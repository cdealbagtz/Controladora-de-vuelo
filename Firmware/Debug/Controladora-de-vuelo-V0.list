
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018500  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  080187b0  080187b0  000197b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019960  08019960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019968  08019968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801996c  0801996c  0001a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b0  24000000  08019970  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054fc  240002b0  08019c20  0001b2b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240057ac  08019c20  0001b7ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b2b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002be38  00000000  00000000  0001b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b83  00000000  00000000  00047116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002168  00000000  00000000  0004cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019ed  00000000  00000000  0004ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039223  00000000  00000000  000507f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033638  00000000  00000000  00089a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157e6a  00000000  00000000  000bd050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00214eba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009de8  00000000  00000000  00214f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  0021ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240002b0 	.word	0x240002b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018798 	.word	0x08018798

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240002b4 	.word	0x240002b4
 80002ec:	08018798 	.word	0x08018798

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 ba0b 	b.w	8000b60 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9c0 	b.w	8000b60 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	468e      	mov	lr, r1
 8000870:	4604      	mov	r4, r0
 8000872:	4688      	mov	r8, r1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d14a      	bne.n	800090e <__udivmoddi4+0xa6>
 8000878:	428a      	cmp	r2, r1
 800087a:	4617      	mov	r7, r2
 800087c:	d962      	bls.n	8000944 <__udivmoddi4+0xdc>
 800087e:	fab2 f682 	clz	r6, r2
 8000882:	b14e      	cbz	r6, 8000898 <__udivmoddi4+0x30>
 8000884:	f1c6 0320 	rsb	r3, r6, #32
 8000888:	fa01 f806 	lsl.w	r8, r1, r6
 800088c:	fa20 f303 	lsr.w	r3, r0, r3
 8000890:	40b7      	lsls	r7, r6
 8000892:	ea43 0808 	orr.w	r8, r3, r8
 8000896:	40b4      	lsls	r4, r6
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	fa1f fc87 	uxth.w	ip, r7
 80008a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80008aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ae:	fb01 f20c 	mul.w	r2, r1, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d909      	bls.n	80008ca <__udivmoddi4+0x62>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80008bc:	f080 80ea 	bcs.w	8000a94 <__udivmoddi4+0x22c>
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f240 80e7 	bls.w	8000a94 <__udivmoddi4+0x22c>
 80008c6:	3902      	subs	r1, #2
 80008c8:	443b      	add	r3, r7
 80008ca:	1a9a      	subs	r2, r3, r2
 80008cc:	b2a3      	uxth	r3, r4
 80008ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008da:	fb00 fc0c 	mul.w	ip, r0, ip
 80008de:	459c      	cmp	ip, r3
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x8e>
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e8:	f080 80d6 	bcs.w	8000a98 <__udivmoddi4+0x230>
 80008ec:	459c      	cmp	ip, r3
 80008ee:	f240 80d3 	bls.w	8000a98 <__udivmoddi4+0x230>
 80008f2:	443b      	add	r3, r7
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008fa:	eba3 030c 	sub.w	r3, r3, ip
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa2>
 8000902:	40f3      	lsrs	r3, r6
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xb6>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb0>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa2>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x14c>
 8000926:	4573      	cmp	r3, lr
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xc8>
 800092a:	4282      	cmp	r2, r0
 800092c:	f200 8105 	bhi.w	8000b3a <__udivmoddi4+0x2d2>
 8000930:	1a84      	subs	r4, r0, r2
 8000932:	eb6e 0203 	sbc.w	r2, lr, r3
 8000936:	2001      	movs	r0, #1
 8000938:	4690      	mov	r8, r2
 800093a:	2d00      	cmp	r5, #0
 800093c:	d0e5      	beq.n	800090a <__udivmoddi4+0xa2>
 800093e:	e9c5 4800 	strd	r4, r8, [r5]
 8000942:	e7e2      	b.n	800090a <__udivmoddi4+0xa2>
 8000944:	2a00      	cmp	r2, #0
 8000946:	f000 8090 	beq.w	8000a6a <__udivmoddi4+0x202>
 800094a:	fab2 f682 	clz	r6, r2
 800094e:	2e00      	cmp	r6, #0
 8000950:	f040 80a4 	bne.w	8000a9c <__udivmoddi4+0x234>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	0c03      	lsrs	r3, r0, #16
 8000958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800095c:	b280      	uxth	r0, r0
 800095e:	b2bc      	uxth	r4, r7
 8000960:	2101      	movs	r1, #1
 8000962:	fbb2 fcfe 	udiv	ip, r2, lr
 8000966:	fb0e 221c 	mls	r2, lr, ip, r2
 800096a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096e:	fb04 f20c 	mul.w	r2, r4, ip
 8000972:	429a      	cmp	r2, r3
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x11e>
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	f10c 38ff 	add.w	r8, ip, #4294967295
 800097c:	d202      	bcs.n	8000984 <__udivmoddi4+0x11c>
 800097e:	429a      	cmp	r2, r3
 8000980:	f200 80e0 	bhi.w	8000b44 <__udivmoddi4+0x2dc>
 8000984:	46c4      	mov	ip, r8
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	fbb3 f2fe 	udiv	r2, r3, lr
 800098c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000990:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000994:	fb02 f404 	mul.w	r4, r2, r4
 8000998:	429c      	cmp	r4, r3
 800099a:	d907      	bls.n	80009ac <__udivmoddi4+0x144>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f102 30ff 	add.w	r0, r2, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x142>
 80009a4:	429c      	cmp	r4, r3
 80009a6:	f200 80ca 	bhi.w	8000b3e <__udivmoddi4+0x2d6>
 80009aa:	4602      	mov	r2, r0
 80009ac:	1b1b      	subs	r3, r3, r4
 80009ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x98>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa0e f401 	lsl.w	r4, lr, r1
 80009c4:	fa20 f306 	lsr.w	r3, r0, r6
 80009c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80009cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009d0:	4323      	orrs	r3, r4
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	fa1f fc87 	uxth.w	ip, r7
 80009da:	fbbe f0f9 	udiv	r0, lr, r9
 80009de:	0c1c      	lsrs	r4, r3, #16
 80009e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d909      	bls.n	8000a08 <__udivmoddi4+0x1a0>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80009fa:	f080 809c 	bcs.w	8000b36 <__udivmoddi4+0x2ce>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	f240 8099 	bls.w	8000b36 <__udivmoddi4+0x2ce>
 8000a04:	3802      	subs	r0, #2
 8000a06:	443c      	add	r4, r7
 8000a08:	eba4 040e 	sub.w	r4, r4, lr
 8000a0c:	fa1f fe83 	uxth.w	lr, r3
 8000a10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a14:	fb09 4413 	mls	r4, r9, r3, r4
 8000a18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a20:	45a4      	cmp	ip, r4
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x1ce>
 8000a24:	193c      	adds	r4, r7, r4
 8000a26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a2a:	f080 8082 	bcs.w	8000b32 <__udivmoddi4+0x2ca>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d97f      	bls.n	8000b32 <__udivmoddi4+0x2ca>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a3a:	eba4 040c 	sub.w	r4, r4, ip
 8000a3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a42:	4564      	cmp	r4, ip
 8000a44:	4673      	mov	r3, lr
 8000a46:	46e1      	mov	r9, ip
 8000a48:	d362      	bcc.n	8000b10 <__udivmoddi4+0x2a8>
 8000a4a:	d05f      	beq.n	8000b0c <__udivmoddi4+0x2a4>
 8000a4c:	b15d      	cbz	r5, 8000a66 <__udivmoddi4+0x1fe>
 8000a4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000a52:	eb64 0409 	sbc.w	r4, r4, r9
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a5e:	431e      	orrs	r6, r3
 8000a60:	40cc      	lsrs	r4, r1
 8000a62:	e9c5 6400 	strd	r6, r4, [r5]
 8000a66:	2100      	movs	r1, #0
 8000a68:	e74f      	b.n	800090a <__udivmoddi4+0xa2>
 8000a6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a6e:	0c01      	lsrs	r1, r0, #16
 8000a70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a74:	b280      	uxth	r0, r0
 8000a76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	463c      	mov	r4, r7
 8000a80:	46b8      	mov	r8, r7
 8000a82:	46be      	mov	lr, r7
 8000a84:	2620      	movs	r6, #32
 8000a86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a8a:	eba2 0208 	sub.w	r2, r2, r8
 8000a8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a92:	e766      	b.n	8000962 <__udivmoddi4+0xfa>
 8000a94:	4601      	mov	r1, r0
 8000a96:	e718      	b.n	80008ca <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e72c      	b.n	80008f6 <__udivmoddi4+0x8e>
 8000a9c:	f1c6 0220 	rsb	r2, r6, #32
 8000aa0:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	40b1      	lsls	r1, r6
 8000aa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ab6:	b2bc      	uxth	r4, r7
 8000ab8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000abc:	0c11      	lsrs	r1, r2, #16
 8000abe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac2:	fb08 f904 	mul.w	r9, r8, r4
 8000ac6:	40b0      	lsls	r0, r6
 8000ac8:	4589      	cmp	r9, r1
 8000aca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ace:	b280      	uxth	r0, r0
 8000ad0:	d93e      	bls.n	8000b50 <__udivmoddi4+0x2e8>
 8000ad2:	1879      	adds	r1, r7, r1
 8000ad4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ad8:	d201      	bcs.n	8000ade <__udivmoddi4+0x276>
 8000ada:	4589      	cmp	r9, r1
 8000adc:	d81f      	bhi.n	8000b1e <__udivmoddi4+0x2b6>
 8000ade:	eba1 0109 	sub.w	r1, r1, r9
 8000ae2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae6:	fb09 f804 	mul.w	r8, r9, r4
 8000aea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aee:	b292      	uxth	r2, r2
 8000af0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af4:	4542      	cmp	r2, r8
 8000af6:	d229      	bcs.n	8000b4c <__udivmoddi4+0x2e4>
 8000af8:	18ba      	adds	r2, r7, r2
 8000afa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000afe:	d2c4      	bcs.n	8000a8a <__udivmoddi4+0x222>
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d2c2      	bcs.n	8000a8a <__udivmoddi4+0x222>
 8000b04:	f1a9 0102 	sub.w	r1, r9, #2
 8000b08:	443a      	add	r2, r7
 8000b0a:	e7be      	b.n	8000a8a <__udivmoddi4+0x222>
 8000b0c:	45f0      	cmp	r8, lr
 8000b0e:	d29d      	bcs.n	8000a4c <__udivmoddi4+0x1e4>
 8000b10:	ebbe 0302 	subs.w	r3, lr, r2
 8000b14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b18:	3801      	subs	r0, #1
 8000b1a:	46e1      	mov	r9, ip
 8000b1c:	e796      	b.n	8000a4c <__udivmoddi4+0x1e4>
 8000b1e:	eba7 0909 	sub.w	r9, r7, r9
 8000b22:	4449      	add	r1, r9
 8000b24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b2c:	fb09 f804 	mul.w	r8, r9, r4
 8000b30:	e7db      	b.n	8000aea <__udivmoddi4+0x282>
 8000b32:	4673      	mov	r3, lr
 8000b34:	e77f      	b.n	8000a36 <__udivmoddi4+0x1ce>
 8000b36:	4650      	mov	r0, sl
 8000b38:	e766      	b.n	8000a08 <__udivmoddi4+0x1a0>
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e6fd      	b.n	800093a <__udivmoddi4+0xd2>
 8000b3e:	443b      	add	r3, r7
 8000b40:	3a02      	subs	r2, #2
 8000b42:	e733      	b.n	80009ac <__udivmoddi4+0x144>
 8000b44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b48:	443b      	add	r3, r7
 8000b4a:	e71c      	b.n	8000986 <__udivmoddi4+0x11e>
 8000b4c:	4649      	mov	r1, r9
 8000b4e:	e79c      	b.n	8000a8a <__udivmoddi4+0x222>
 8000b50:	eba1 0109 	sub.w	r1, r1, r9
 8000b54:	46c4      	mov	ip, r8
 8000b56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5a:	fb09 f804 	mul.w	r8, r9, r4
 8000b5e:	e7c4      	b.n	8000aea <__udivmoddi4+0x282>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7a:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <BMP280_write+0x54>)
 8000b7c:	f008 fb60 	bl	8009240 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b8a:	1df9      	adds	r1, r7, #7
 8000b8c:	2364      	movs	r3, #100	@ 0x64
 8000b8e:	2201      	movs	r2, #1
 8000b90:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <BMP280_write+0x58>)
 8000b92:	f00b fb9f 	bl	800c2d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b96:	1db9      	adds	r1, r7, #6
 8000b98:	2364      	movs	r3, #100	@ 0x64
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <BMP280_write+0x58>)
 8000b9e:	f00b fb99 	bl	800c2d4 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <BMP280_write+0x54>)
 8000baa:	f008 fb49 	bl	8009240 <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	58020400 	.word	0x58020400
 8000bbc:	24004e0c 	.word	0x24004e0c

08000bc0 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bda:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <BMP280_read+0x54>)
 8000bdc:	f008 fb30 	bl	8009240 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000be0:	f107 010f 	add.w	r1, r7, #15
 8000be4:	2364      	movs	r3, #100	@ 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <BMP280_read+0x58>)
 8000bea:	f00b fb73 	bl	800c2d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000bee:	f107 010f 	add.w	r1, r7, #15
 8000bf2:	2364      	movs	r3, #100	@ 0x64
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <BMP280_read+0x58>)
 8000bf8:	f00b fd5a 	bl	800c6b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c02:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <BMP280_read+0x54>)
 8000c04:	f008 fb1c 	bl	8009240 <HAL_GPIO_WritePin>

	return Buffer;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	58020400 	.word	0x58020400
 8000c18:	24004e0c 	.word	0x24004e0c

08000c1c <BMP280_config>:

void BMP280_config(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000c20:	2157      	movs	r1, #87	@ 0x57
 8000c22:	20f4      	movs	r0, #244	@ 0xf4
 8000c24:	f7ff ff9e 	bl	8000b64 <BMP280_write>
	BMP280_write(config, 0x10);
 8000c28:	2110      	movs	r1, #16
 8000c2a:	20f5      	movs	r0, #245	@ 0xf5
 8000c2c:	f7ff ff9a 	bl	8000b64 <BMP280_write>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000c3a:	2388      	movs	r3, #136	@ 0x88
 8000c3c:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
	BMP280_select();
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c54:	4849      	ldr	r0, [pc, #292]	@ (8000d7c <BMP280_calibrationData+0x148>)
 8000c56:	f008 faf3 	bl	8009240 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c5a:	f107 011f 	add.w	r1, r7, #31
 8000c5e:	2364      	movs	r3, #100	@ 0x64
 8000c60:	2201      	movs	r2, #1
 8000c62:	4847      	ldr	r0, [pc, #284]	@ (8000d80 <BMP280_calibrationData+0x14c>)
 8000c64:	f00b fb36 	bl	800c2d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	2364      	movs	r3, #100	@ 0x64
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	4844      	ldr	r0, [pc, #272]	@ (8000d80 <BMP280_calibrationData+0x14c>)
 8000c70:	f00b fd1e 	bl	800c6b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c7a:	4840      	ldr	r0, [pc, #256]	@ (8000d7c <BMP280_calibrationData+0x148>)
 8000c7c:	f008 fae0 	bl	8009240 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	793b      	ldrb	r3, [r7, #4]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <BMP280_calibrationData+0x150>)
 8000c94:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <BMP280_calibrationData+0x154>)
 8000ca8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000caa:	7a7b      	ldrb	r3, [r7, #9]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	7a3b      	ldrb	r3, [r7, #8]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <BMP280_calibrationData+0x158>)
 8000cbc:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <BMP280_calibrationData+0x15c>)
 8000cd2:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <BMP280_calibrationData+0x160>)
 8000ce6:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <BMP280_calibrationData+0x164>)
 8000cfa:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000cfc:	7c7b      	ldrb	r3, [r7, #17]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	7c3b      	ldrb	r3, [r7, #16]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <BMP280_calibrationData+0x168>)
 8000d0e:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7cbb      	ldrb	r3, [r7, #18]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <BMP280_calibrationData+0x16c>)
 8000d22:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	7d3b      	ldrb	r3, [r7, #20]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <BMP280_calibrationData+0x170>)
 8000d36:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	7dbb      	ldrb	r3, [r7, #22]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <BMP280_calibrationData+0x174>)
 8000d4a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000d4c:	7e7b      	ldrb	r3, [r7, #25]
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	7e3b      	ldrb	r3, [r7, #24]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <BMP280_calibrationData+0x178>)
 8000d5e:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d60:	7efb      	ldrb	r3, [r7, #27]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	7ebb      	ldrb	r3, [r7, #26]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <BMP280_calibrationData+0x17c>)
 8000d72:	801a      	strh	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24004e0c 	.word	0x24004e0c
 8000d84:	240002e0 	.word	0x240002e0
 8000d88:	240002e4 	.word	0x240002e4
 8000d8c:	240002e6 	.word	0x240002e6
 8000d90:	240002e2 	.word	0x240002e2
 8000d94:	240002e8 	.word	0x240002e8
 8000d98:	240002ea 	.word	0x240002ea
 8000d9c:	240002ec 	.word	0x240002ec
 8000da0:	240002ee 	.word	0x240002ee
 8000da4:	240002f0 	.word	0x240002f0
 8000da8:	240002f2 	.word	0x240002f2
 8000dac:	240002f4 	.word	0x240002f4
 8000db0:	240002f6 	.word	0x240002f6

08000db4 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000dba:	23f7      	movs	r3, #247	@ 0xf7
 8000dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	809a      	strh	r2, [r3, #4]
	BMP280_select();
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dcc:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <BMP280_readRawValues+0x78>)
 8000dce:	f008 fa37 	bl	8009240 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000dd2:	1df9      	adds	r1, r7, #7
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4815      	ldr	r0, [pc, #84]	@ (8000e30 <BMP280_readRawValues+0x7c>)
 8000dda:	f00b fa7b 	bl	800c2d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000dde:	4639      	mov	r1, r7
 8000de0:	2364      	movs	r3, #100	@ 0x64
 8000de2:	2206      	movs	r2, #6
 8000de4:	4812      	ldr	r0, [pc, #72]	@ (8000e30 <BMP280_readRawValues+0x7c>)
 8000de6:	f00b fc63 	bl	800c6b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <BMP280_readRawValues+0x78>)
 8000df2:	f008 fa25 	bl	8009240 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000df6:	783b      	ldrb	r3, [r7, #0]
 8000df8:	031a      	lsls	r2, r3, #12
 8000dfa:	787b      	ldrb	r3, [r7, #1]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	78ba      	ldrb	r2, [r7, #2]
 8000e02:	0912      	lsrs	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	4313      	orrs	r3, r2
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <BMP280_readRawValues+0x80>)
 8000e0a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	031a      	lsls	r2, r3, #12
 8000e10:	793b      	ldrb	r3, [r7, #4]
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	4313      	orrs	r3, r2
 8000e16:	797a      	ldrb	r2, [r7, #5]
 8000e18:	0912      	lsrs	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <BMP280_readRawValues+0x84>)
 8000e20:	6013      	str	r3, [r2, #0]
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	24004e0c 	.word	0x24004e0c
 8000e34:	240002fc 	.word	0x240002fc
 8000e38:	240002f8 	.word	0x240002f8

08000e3c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <BMP280_measureT+0x74>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	10da      	asrs	r2, r3, #3
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <BMP280_measureT+0x78>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a19      	ldr	r2, [pc, #100]	@ (8000eb8 <BMP280_measureT+0x7c>)
 8000e54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	12db      	asrs	r3, r3, #11
 8000e5e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	111b      	asrs	r3, r3, #4
 8000e64:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <BMP280_measureT+0x78>)
 8000e66:	8812      	ldrh	r2, [r2, #0]
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	1112      	asrs	r2, r2, #4
 8000e6e:	4911      	ldr	r1, [pc, #68]	@ (8000eb4 <BMP280_measureT+0x78>)
 8000e70:	8809      	ldrh	r1, [r1, #0]
 8000e72:	1a52      	subs	r2, r2, r1
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	131b      	asrs	r3, r3, #12
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <BMP280_measureT+0x80>)
 8000e7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	139b      	asrs	r3, r3, #14
 8000e86:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <BMP280_measureT+0x84>)
 8000e90:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <BMP280_measureT+0x84>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3380      	adds	r3, #128	@ 0x80
 8000e9e:	121b      	asrs	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
	return T;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	240002f8 	.word	0x240002f8
 8000eb4:	240002e0 	.word	0x240002e0
 8000eb8:	240002e4 	.word	0x240002e4
 8000ebc:	240002e6 	.word	0x240002e6
 8000ec0:	24000300 	.word	0x24000300

08000ec4 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ec8:	b0ca      	sub	sp, #296	@ 0x128
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000ed0:	4baf      	ldr	r3, [pc, #700]	@ (8001190 <BMP280_measureP+0x2cc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	17da      	asrs	r2, r3, #31
 8000ed6:	461c      	mov	r4, r3
 8000ed8:	4615      	mov	r5, r2
 8000eda:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000ede:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000ee2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000ee6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eee:	fb03 f102 	mul.w	r1, r3, r2
 8000ef2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ef6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	18ca      	adds	r2, r1, r3
 8000f00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f04:	fba3 8903 	umull	r8, r9, r3, r3
 8000f08:	eb02 0309 	add.w	r3, r2, r9
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	4ba1      	ldr	r3, [pc, #644]	@ (8001194 <BMP280_measureP+0x2d0>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	17da      	asrs	r2, r3, #31
 8000f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000f20:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000f24:	4603      	mov	r3, r0
 8000f26:	fb03 f209 	mul.w	r2, r3, r9
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	fb08 f303 	mul.w	r3, r8, r3
 8000f30:	4413      	add	r3, r2
 8000f32:	4602      	mov	r2, r0
 8000f34:	fba8 1202 	umull	r1, r2, r8, r2
 8000f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000f46:	4413      	add	r3, r2
 8000f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000f4c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000f50:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000f54:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000f58:	4b8f      	ldr	r3, [pc, #572]	@ (8001198 <BMP280_measureP+0x2d4>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	17da      	asrs	r2, r3, #31
 8000f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f66:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f6e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f72:	462a      	mov	r2, r5
 8000f74:	fb02 f203 	mul.w	r2, r2, r3
 8000f78:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	441a      	add	r2, r3
 8000f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f88:	4621      	mov	r1, r4
 8000f8a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f92:	460b      	mov	r3, r1
 8000f94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	f04f 0100 	mov.w	r1, #0
 8000faa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000fae:	462b      	mov	r3, r5
 8000fb0:	0459      	lsls	r1, r3, #17
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000fb8:	4623      	mov	r3, r4
 8000fba:	0458      	lsls	r0, r3, #17
 8000fbc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fc0:	1814      	adds	r4, r2, r0
 8000fc2:	643c      	str	r4, [r7, #64]	@ 0x40
 8000fc4:	414b      	adcs	r3, r1
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fc8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000fcc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000fd0:	4b72      	ldr	r3, [pc, #456]	@ (800119c <BMP280_measureP+0x2d8>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	17da      	asrs	r2, r3, #31
 8000fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000fde:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	f04f 0100 	mov.w	r1, #0
 8000fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000fee:	00d9      	lsls	r1, r3, #3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ff6:	1814      	adds	r4, r2, r0
 8000ff8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000ffa:	414b      	adcs	r3, r1
 8000ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ffe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001002:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001006:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800100a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800100e:	fb03 f102 	mul.w	r1, r3, r2
 8001012:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001016:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	18ca      	adds	r2, r1, r3
 8001020:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001024:	fba3 1303 	umull	r1, r3, r3, r3
 8001028:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800102c:	460b      	mov	r3, r1
 800102e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001036:	18d3      	adds	r3, r2, r3
 8001038:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800103c:	4b58      	ldr	r3, [pc, #352]	@ (80011a0 <BMP280_measureP+0x2dc>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	b21b      	sxth	r3, r3
 8001044:	17da      	asrs	r2, r3, #31
 8001046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800104a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800104e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001052:	462b      	mov	r3, r5
 8001054:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001058:	4642      	mov	r2, r8
 800105a:	fb02 f203 	mul.w	r2, r2, r3
 800105e:	464b      	mov	r3, r9
 8001060:	4621      	mov	r1, r4
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	4622      	mov	r2, r4
 800106a:	4641      	mov	r1, r8
 800106c:	fba2 1201 	umull	r1, r2, r2, r1
 8001070:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001074:	460a      	mov	r2, r1
 8001076:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800107a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800107e:	4413      	add	r3, r2
 8001080:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001084:	f04f 0000 	mov.w	r0, #0
 8001088:	f04f 0100 	mov.w	r1, #0
 800108c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001090:	4623      	mov	r3, r4
 8001092:	0a18      	lsrs	r0, r3, #8
 8001094:	462b      	mov	r3, r5
 8001096:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800109a:	462b      	mov	r3, r5
 800109c:	1219      	asrs	r1, r3, #8
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <BMP280_measureP+0x2e0>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	17da      	asrs	r2, r3, #31
 80010a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80010ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80010b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010b4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80010b8:	464a      	mov	r2, r9
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80010c2:	4644      	mov	r4, r8
 80010c4:	fb04 f303 	mul.w	r3, r4, r3
 80010c8:	441a      	add	r2, r3
 80010ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010ce:	4644      	mov	r4, r8
 80010d0:	fba3 4304 	umull	r4, r3, r3, r4
 80010d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80010d8:	4623      	mov	r3, r4
 80010da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80010de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80010f4:	464c      	mov	r4, r9
 80010f6:	0323      	lsls	r3, r4, #12
 80010f8:	4644      	mov	r4, r8
 80010fa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010fe:	4644      	mov	r4, r8
 8001100:	0322      	lsls	r2, r4, #12
 8001102:	1884      	adds	r4, r0, r2
 8001104:	633c      	str	r4, [r7, #48]	@ 0x30
 8001106:	eb41 0303 	adc.w	r3, r1, r3
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
 800110c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001110:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001114:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001118:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800111c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001120:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001124:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <BMP280_measureP+0x2e4>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	2200      	movs	r2, #0
 800112c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001130:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001134:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001138:	462b      	mov	r3, r5
 800113a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800113e:	4642      	mov	r2, r8
 8001140:	fb02 f203 	mul.w	r2, r2, r3
 8001144:	464b      	mov	r3, r9
 8001146:	4621      	mov	r1, r4
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	4622      	mov	r2, r4
 8001150:	4641      	mov	r1, r8
 8001152:	fba2 1201 	umull	r1, r2, r2, r1
 8001156:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800115a:	460a      	mov	r2, r1
 800115c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001160:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001164:	4413      	add	r3, r2
 8001166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001176:	4629      	mov	r1, r5
 8001178:	104a      	asrs	r2, r1, #1
 800117a:	4629      	mov	r1, r5
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001182:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001186:	4313      	orrs	r3, r2
 8001188:	d110      	bne.n	80011ac <BMP280_measureP+0x2e8>
	{
	return 0;
 800118a:	2300      	movs	r3, #0
 800118c:	e154      	b.n	8001438 <BMP280_measureP+0x574>
 800118e:	bf00      	nop
 8001190:	24000300 	.word	0x24000300
 8001194:	240002f0 	.word	0x240002f0
 8001198:	240002ee 	.word	0x240002ee
 800119c:	240002ec 	.word	0x240002ec
 80011a0:	240002ea 	.word	0x240002ea
 80011a4:	240002e8 	.word	0x240002e8
 80011a8:	240002e2 	.word	0x240002e2
	}
	p = 1048576-adc_P;
 80011ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011b0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80011b4:	17da      	asrs	r2, r3, #31
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80011ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80011be:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80011c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011c6:	105b      	asrs	r3, r3, #1
 80011c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011d0:	07db      	lsls	r3, r3, #31
 80011d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80011d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80011da:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80011de:	4621      	mov	r1, r4
 80011e0:	1a89      	subs	r1, r1, r2
 80011e2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80011e4:	4629      	mov	r1, r5
 80011e6:	eb61 0303 	sbc.w	r3, r1, r3
 80011ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80011ec:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80011f0:	4622      	mov	r2, r4
 80011f2:	462b      	mov	r3, r5
 80011f4:	1891      	adds	r1, r2, r2
 80011f6:	6239      	str	r1, [r7, #32]
 80011f8:	415b      	adcs	r3, r3
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001200:	4621      	mov	r1, r4
 8001202:	1851      	adds	r1, r2, r1
 8001204:	61b9      	str	r1, [r7, #24]
 8001206:	4629      	mov	r1, r5
 8001208:	414b      	adcs	r3, r1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001218:	4649      	mov	r1, r9
 800121a:	018b      	lsls	r3, r1, #6
 800121c:	4641      	mov	r1, r8
 800121e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001222:	4641      	mov	r1, r8
 8001224:	018a      	lsls	r2, r1, #6
 8001226:	4641      	mov	r1, r8
 8001228:	1889      	adds	r1, r1, r2
 800122a:	6139      	str	r1, [r7, #16]
 800122c:	4649      	mov	r1, r9
 800122e:	eb43 0101 	adc.w	r1, r3, r1
 8001232:	6179      	str	r1, [r7, #20]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001240:	4649      	mov	r1, r9
 8001242:	008b      	lsls	r3, r1, #2
 8001244:	4641      	mov	r1, r8
 8001246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800124a:	4641      	mov	r1, r8
 800124c:	008a      	lsls	r2, r1, #2
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	4603      	mov	r3, r0
 8001254:	4622      	mov	r2, r4
 8001256:	189b      	adds	r3, r3, r2
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	460b      	mov	r3, r1
 800125c:	462a      	mov	r2, r5
 800125e:	eb42 0303 	adc.w	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001270:	4649      	mov	r1, r9
 8001272:	008b      	lsls	r3, r1, #2
 8001274:	4641      	mov	r1, r8
 8001276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800127a:	4641      	mov	r1, r8
 800127c:	008a      	lsls	r2, r1, #2
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	4603      	mov	r3, r0
 8001284:	4622      	mov	r2, r4
 8001286:	189b      	adds	r3, r3, r2
 8001288:	673b      	str	r3, [r7, #112]	@ 0x70
 800128a:	462b      	mov	r3, r5
 800128c:	460a      	mov	r2, r1
 800128e:	eb42 0303 	adc.w	r3, r2, r3
 8001292:	677b      	str	r3, [r7, #116]	@ 0x74
 8001294:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001298:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800129c:	f7ff fa44 	bl	8000728 <__aeabi_ldivmod>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80012a8:	4b66      	ldr	r3, [pc, #408]	@ (8001444 <BMP280_measureP+0x580>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	17da      	asrs	r2, r3, #31
 80012b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80012b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012ba:	f04f 0000 	mov.w	r0, #0
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	0b50      	lsrs	r0, r2, #13
 80012c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012c8:	1359      	asrs	r1, r3, #13
 80012ca:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80012ce:	462b      	mov	r3, r5
 80012d0:	fb00 f203 	mul.w	r2, r0, r3
 80012d4:	4623      	mov	r3, r4
 80012d6:	fb03 f301 	mul.w	r3, r3, r1
 80012da:	4413      	add	r3, r2
 80012dc:	4622      	mov	r2, r4
 80012de:	fba2 1200 	umull	r1, r2, r2, r0
 80012e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80012e6:	460a      	mov	r2, r1
 80012e8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80012ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80012f0:	4413      	add	r3, r2
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80012f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012fa:	f04f 0000 	mov.w	r0, #0
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	0b50      	lsrs	r0, r2, #13
 8001304:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001308:	1359      	asrs	r1, r3, #13
 800130a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800130e:	462b      	mov	r3, r5
 8001310:	fb00 f203 	mul.w	r2, r0, r3
 8001314:	4623      	mov	r3, r4
 8001316:	fb03 f301 	mul.w	r3, r3, r1
 800131a:	4413      	add	r3, r2
 800131c:	4622      	mov	r2, r4
 800131e:	fba2 1200 	umull	r1, r2, r2, r0
 8001322:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001326:	460a      	mov	r2, r1
 8001328:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800132c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001330:	4413      	add	r3, r2
 8001332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001342:	4621      	mov	r1, r4
 8001344:	0e4a      	lsrs	r2, r1, #25
 8001346:	4629      	mov	r1, r5
 8001348:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800134c:	4629      	mov	r1, r5
 800134e:	164b      	asrs	r3, r1, #25
 8001350:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <BMP280_measureP+0x584>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	b21b      	sxth	r3, r3
 800135c:	17da      	asrs	r2, r3, #31
 800135e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001360:	667a      	str	r2, [r7, #100]	@ 0x64
 8001362:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001366:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800136a:	462a      	mov	r2, r5
 800136c:	fb02 f203 	mul.w	r2, r2, r3
 8001370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001374:	4621      	mov	r1, r4
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001380:	4621      	mov	r1, r4
 8001382:	fba2 1201 	umull	r1, r2, r2, r1
 8001386:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800138a:	460a      	mov	r2, r1
 800138c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001390:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001394:	4413      	add	r3, r2
 8001396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80013a6:	4621      	mov	r1, r4
 80013a8:	0cca      	lsrs	r2, r1, #19
 80013aa:	4629      	mov	r1, r5
 80013ac:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80013b0:	4629      	mov	r1, r5
 80013b2:	14cb      	asrs	r3, r1, #19
 80013b4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80013b8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80013bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80013c0:	1884      	adds	r4, r0, r2
 80013c2:	65bc      	str	r4, [r7, #88]	@ 0x58
 80013c4:	eb41 0303 	adc.w	r3, r1, r3
 80013c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80013d2:	4621      	mov	r1, r4
 80013d4:	1889      	adds	r1, r1, r2
 80013d6:	6539      	str	r1, [r7, #80]	@ 0x50
 80013d8:	4629      	mov	r1, r5
 80013da:	eb43 0101 	adc.w	r1, r3, r1
 80013de:	6579      	str	r1, [r7, #84]	@ 0x54
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80013ec:	4623      	mov	r3, r4
 80013ee:	0a18      	lsrs	r0, r3, #8
 80013f0:	462b      	mov	r3, r5
 80013f2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013f6:	462b      	mov	r3, r5
 80013f8:	1219      	asrs	r1, r3, #8
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <BMP280_measureP+0x588>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	b21b      	sxth	r3, r3
 8001402:	17da      	asrs	r2, r3, #31
 8001404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001406:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001414:	464c      	mov	r4, r9
 8001416:	0123      	lsls	r3, r4, #4
 8001418:	4644      	mov	r4, r8
 800141a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800141e:	4644      	mov	r4, r8
 8001420:	0122      	lsls	r2, r4, #4
 8001422:	1884      	adds	r4, r0, r2
 8001424:	603c      	str	r4, [r7, #0]
 8001426:	eb41 0303 	adc.w	r3, r1, r3
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001430:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001434:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001438:	4618      	mov	r0, r3
 800143a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800143e:	46bd      	mov	sp, r7
 8001440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001444:	240002f6 	.word	0x240002f6
 8001448:	240002f4 	.word	0x240002f4
 800144c:	240002f2 	.word	0x240002f2

08001450 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <BMP280_measureH+0x14>
 8001460:	2300      	movs	r3, #0
 8001462:	e03d      	b.n	80014e0 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800146e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80014e8 <BMP280_measureH+0x98>
 8001472:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001476:	eeb0 0b46 	vmov.f64	d0, d6
 800147a:	f017 f85d 	bl	8018538 <log>
 800147e:	eeb0 7b40 	vmov.f64	d7, d0
 8001482:	eeb1 7b47 	vneg.f64	d7, d7
 8001486:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800148a:	ed97 7b06 	vldr	d7, [r7, #24]
 800148e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d101      	bne.n	800149c <BMP280_measureH+0x4c>
 8001498:	2300      	movs	r3, #0
 800149a:	e021      	b.n	80014e0 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014a6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014f0 <BMP280_measureH+0xa0>
 80014aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ae:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80014f8 <BMP280_measureH+0xa8>
 80014b2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80014b6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001500 <BMP280_measureH+0xb0>
 80014ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014be:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 80014c2:	ed97 5b06 	vldr	d5, [r7, #24]
 80014c6:	ed97 6b04 	vldr	d6, [r7, #16]
 80014ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014ce:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 80014d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80014d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014da:	ee17 3a90 	vmov	r3, s15
 80014de:	b29b      	uxth	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40f8bcd0 	.word	0x40f8bcd0
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40590000 	.word	0x40590000
 80014f8:	66666666 	.word	0x66666666
 80014fc:	40711266 	.word	0x40711266
 8001500:	ca402a92 	.word	0xca402a92
 8001504:	3fa17e3e 	.word	0x3fa17e3e

08001508 <BMP280_init>:

void BMP280_init(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	BMP280_unselect();
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001512:	480d      	ldr	r0, [pc, #52]	@ (8001548 <BMP280_init+0x40>)
 8001514:	f007 fe94 	bl	8009240 <HAL_GPIO_WritePin>
	BMP280_config();
 8001518:	f7ff fb80 	bl	8000c1c <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 800151c:	2089      	movs	r0, #137	@ 0x89
 800151e:	f7ff fb4f 	bl	8000bc0 <BMP280_read>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <BMP280_init+0x44>)
 8001528:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 800152a:	f7ff fb83 	bl	8000c34 <BMP280_calibrationData>
	BMP280_readRawValues();
 800152e:	f7ff fc41 	bl	8000db4 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <BMP280_init+0x48>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc80 	bl	8000e3c <BMP280_measureT>
 800153c:	4603      	mov	r3, r0
 800153e:	4a03      	ldr	r2, [pc, #12]	@ (800154c <BMP280_init+0x44>)
 8001540:	6093      	str	r3, [r2, #8]
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	58020400 	.word	0x58020400
 800154c:	240002cc 	.word	0x240002cc
 8001550:	240002f8 	.word	0x240002f8

08001554 <BMP280_calculate>:

void BMP280_calculate(void){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001558:	2089      	movs	r0, #137	@ 0x89
 800155a:	f7ff fb31 	bl	8000bc0 <BMP280_read>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <BMP280_calculate+0x68>)
 8001564:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001566:	f7ff fc25 	bl	8000db4 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <BMP280_calculate+0x6c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc64 	bl	8000e3c <BMP280_measureT>
 8001574:	4603      	mov	r3, r0
 8001576:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <BMP280_calculate+0x68>)
 8001578:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <BMP280_calculate+0x70>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fca0 	bl	8000ec4 <BMP280_measureP>
 8001584:	4603      	mov	r3, r0
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <BMP280_calculate+0x68>)
 800158a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <BMP280_calculate+0x68>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <BMP280_calculate+0x68>)
 8001592:	6892      	ldr	r2, [r2, #8]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff5a 	bl	8001450 <BMP280_measureH>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <BMP280_calculate+0x68>)
 80015a2:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <BMP280_calculate+0x68>)
 80015a6:	8a1a      	ldrh	r2, [r3, #16]
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <BMP280_calculate+0x68>)
 80015aa:	8a5b      	ldrh	r3, [r3, #18]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d903      	bls.n	80015b8 <BMP280_calculate+0x64>
 80015b0:	4b02      	ldr	r3, [pc, #8]	@ (80015bc <BMP280_calculate+0x68>)
 80015b2:	8a1a      	ldrh	r2, [r3, #16]
 80015b4:	4b01      	ldr	r3, [pc, #4]	@ (80015bc <BMP280_calculate+0x68>)
 80015b6:	825a      	strh	r2, [r3, #18]
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	240002cc 	.word	0x240002cc
 80015c0:	240002f8 	.word	0x240002f8
 80015c4:	240002fc 	.word	0x240002fc

080015c8 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <bno055_delay+0x24>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4413      	add	r3, r2
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <bno055_delay+0x24>)
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	24000407 	.word	0x24000407

080015f0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001600:	23aa      	movs	r3, #170	@ 0xaa
 8001602:	723b      	strb	r3, [r7, #8]
 8001604:	2301      	movs	r3, #1
 8001606:	727b      	strb	r3, [r7, #9]
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	72bb      	strb	r3, [r7, #10]
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001610:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <BNO_Read+0x44>)
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8001616:	f107 0108 	add.w	r1, r7, #8
 800161a:	2364      	movs	r3, #100	@ 0x64
 800161c:	2204      	movs	r2, #4
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <BNO_Read+0x48>)
 8001620:	f00c fff2 	bl	800e608 <HAL_UART_Transmit>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24000304 	.word	0x24000304
 8001638:	24005188 	.word	0x24005188

0800163c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 800164c:	23aa      	movs	r3, #170	@ 0xaa
 800164e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	2364      	movs	r3, #100	@ 0x64
 8001666:	2205      	movs	r2, #5
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <BNO_Write+0x40>)
 800166a:	f00c ffcd 	bl	800e608 <HAL_UART_Transmit>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24005188 	.word	0x24005188

08001680 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001680:	b580      	push	{r7, lr}
 8001682:	b0c4      	sub	sp, #272	@ 0x110
 8001684:	af00      	add	r7, sp, #0
 8001686:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001694:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001698:	4602      	mov	r2, r0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016a4:	460a      	mov	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80016a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016b0:	22aa      	movs	r2, #170	@ 0xaa
 80016b2:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80016b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016bc:	2200      	movs	r2, #0
 80016be:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 80016c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016cc:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 80016d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016dc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016e0:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016ee:	e015      	b.n	800171c <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80016f0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016f8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	441a      	add	r2, r3
 8001700:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001704:	3304      	adds	r3, #4
 8001706:	7811      	ldrb	r1, [r2, #0]
 8001708:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800170c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001710:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8001712:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001716:	3301      	adds	r3, #1
 8001718:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800171c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001720:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001724:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3e0      	bcc.n	80016f0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 800172e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001732:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3304      	adds	r3, #4
 800173c:	b29a      	uxth	r2, r3
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	2364      	movs	r3, #100	@ 0x64
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <BNO_Write_MB+0xe0>)
 8001746:	f00c ff5f 	bl	800e608 <HAL_UART_Transmit>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001750:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001754:	4618      	mov	r0, r3
 8001756:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24005188 	.word	0x24005188

08001764 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001768:	4b62      	ldr	r3, [pc, #392]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b55      	cmp	r3, #85	@ 0x55
 800176e:	f300 8261 	bgt.w	8001c34 <BNO_Page0Adress+0x4d0>
 8001772:	2b35      	cmp	r3, #53	@ 0x35
 8001774:	da0a      	bge.n	800178c <BNO_Page0Adress+0x28>
 8001776:	2b08      	cmp	r3, #8
 8001778:	f000 8158 	beq.w	8001a2c <BNO_Page0Adress+0x2c8>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f300 8259 	bgt.w	8001c34 <BNO_Page0Adress+0x4d0>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d04c      	beq.n	8001820 <BNO_Page0Adress+0xbc>
 8001786:	2b07      	cmp	r3, #7
 8001788:	d064      	beq.n	8001854 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800178a:	e253      	b.n	8001c34 <BNO_Page0Adress+0x4d0>
	switch (BNO_RxBuffer[0]) {
 800178c:	3b35      	subs	r3, #53	@ 0x35
 800178e:	2b20      	cmp	r3, #32
 8001790:	f200 8250 	bhi.w	8001c34 <BNO_Page0Adress+0x4d0>
 8001794:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <BNO_Page0Adress+0x38>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	0800189d 	.word	0x0800189d
 80017a0:	08001c35 	.word	0x08001c35
 80017a4:	08001c35 	.word	0x08001c35
 80017a8:	08001c35 	.word	0x08001c35
 80017ac:	08001879 	.word	0x08001879
 80017b0:	08001c35 	.word	0x08001c35
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001c35 	.word	0x08001c35
 80017bc:	0800188b 	.word	0x0800188b
 80017c0:	08001c35 	.word	0x08001c35
 80017c4:	08001c35 	.word	0x08001c35
 80017c8:	08001c35 	.word	0x08001c35
 80017cc:	08001c35 	.word	0x08001c35
 80017d0:	08001c35 	.word	0x08001c35
 80017d4:	08001c35 	.word	0x08001c35
 80017d8:	08001c35 	.word	0x08001c35
 80017dc:	08001c35 	.word	0x08001c35
 80017e0:	08001c35 	.word	0x08001c35
 80017e4:	08001c35 	.word	0x08001c35
 80017e8:	08001c35 	.word	0x08001c35
 80017ec:	08001c35 	.word	0x08001c35
 80017f0:	08001c35 	.word	0x08001c35
 80017f4:	08001c35 	.word	0x08001c35
 80017f8:	08001c35 	.word	0x08001c35
 80017fc:	08001c35 	.word	0x08001c35
 8001800:	08001c35 	.word	0x08001c35
 8001804:	08001c35 	.word	0x08001c35
 8001808:	08001c35 	.word	0x08001c35
 800180c:	08001c35 	.word	0x08001c35
 8001810:	08001c35 	.word	0x08001c35
 8001814:	08001c35 	.word	0x08001c35
 8001818:	08001c35 	.word	0x08001c35
 800181c:	08001901 	.word	0x08001901
			if(BNO_RxBuffer[1] != 160) return;
 8001820:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <BNO_Page0Adress+0x190>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	2ba0      	cmp	r3, #160	@ 0xa0
 8001826:	f040 8207 	bne.w	8001c38 <BNO_Page0Adress+0x4d4>
			IMU.ID = BNO_RxBuffer[1];
 800182a:	4b32      	ldr	r3, [pc, #200]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800182c:	785a      	ldrb	r2, [r3, #1]
 800182e:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <BNO_Page0Adress+0x194>)
 8001830:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8001832:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <BNO_Page0Adress+0x190>)
 8001834:	789a      	ldrb	r2, [r3, #2]
 8001836:	4b30      	ldr	r3, [pc, #192]	@ (80018f8 <BNO_Page0Adress+0x194>)
 8001838:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800183a:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800183c:	78da      	ldrb	r2, [r3, #3]
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <BNO_Page0Adress+0x194>)
 8001840:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001842:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <BNO_Page0Adress+0x190>)
 8001844:	791a      	ldrb	r2, [r3, #4]
 8001846:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <BNO_Page0Adress+0x194>)
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <BNO_Page0Adress+0x198>)
 800184e:	220b      	movs	r2, #11
 8001850:	701a      	strb	r2, [r3, #0]
			break;
 8001852:	e1f2      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			IMU.Page = BNO_RxBuffer[1];
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <BNO_Page0Adress+0x190>)
 8001856:	785a      	ldrb	r2, [r3, #1]
 8001858:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <BNO_Page0Adress+0x194>)
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800185e:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <BNO_Page0Adress+0x198>)
 8001860:	220b      	movs	r2, #11
 8001862:	701a      	strb	r2, [r3, #0]
			break;
 8001864:	e1e9      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <BNO_Page0Adress+0x190>)
 8001868:	785a      	ldrb	r2, [r3, #1]
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <BNO_Page0Adress+0x194>)
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8001870:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <BNO_Page0Adress+0x198>)
 8001872:	220b      	movs	r2, #11
 8001874:	701a      	strb	r2, [r3, #0]
			break;
 8001876:	e1e0      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			IMU.System_Status = BNO_RxBuffer[1];
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800187a:	785a      	ldrb	r2, [r3, #1]
 800187c:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <BNO_Page0Adress+0x194>)
 800187e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <BNO_Page0Adress+0x198>)
 8001884:	220b      	movs	r2, #11
 8001886:	701a      	strb	r2, [r3, #0]
			break;
 8001888:	e1d7      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			IMU.Op_Mode = BNO_RxBuffer[1];
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800188c:	785a      	ldrb	r2, [r3, #1]
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <BNO_Page0Adress+0x194>)
 8001890:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <BNO_Page0Adress+0x198>)
 8001896:	220b      	movs	r2, #11
 8001898:	701a      	strb	r2, [r3, #0]
			break;
 800189a:	e1ce      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <BNO_Page0Adress+0x190>)
 800189e:	785a      	ldrb	r2, [r3, #1]
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <BNO_Page0Adress+0x194>)
 80018a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <BNO_Page0Adress+0x190>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <BNO_Page0Adress+0x194>)
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <BNO_Page0Adress+0x190>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <BNO_Page0Adress+0x194>)
 80018c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <BNO_Page0Adress+0x190>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <BNO_Page0Adress+0x194>)
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <BNO_Page0Adress+0x190>)
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <BNO_Page0Adress+0x194>)
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <BNO_Page0Adress+0x198>)
 80018ee:	220b      	movs	r2, #11
 80018f0:	701a      	strb	r2, [r3, #0]
			break;
 80018f2:	e1a2      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
 80018f4:	24000304 	.word	0x24000304
 80018f8:	2400040c 	.word	0x2400040c
 80018fc:	24000405 	.word	0x24000405
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8001900:	4b48      	ldr	r3, [pc, #288]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001902:	789b      	ldrb	r3, [r3, #2]
 8001904:	b21b      	sxth	r3, r3
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21a      	sxth	r2, r3
 8001914:	4b44      	ldr	r3, [pc, #272]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	b21b      	sxth	r3, r3
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b3f      	ldr	r3, [pc, #252]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001930:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8001934:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001936:	799b      	ldrb	r3, [r3, #6]
 8001938:	b21b      	sxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001940:	795b      	ldrb	r3, [r3, #5]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 800194a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800194e:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001950:	7a1b      	ldrb	r3, [r3, #8]
 8001952:	b21b      	sxth	r3, r3
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800195a:	79db      	ldrb	r3, [r3, #7]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001964:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800196a:	7a9b      	ldrb	r3, [r3, #10]
 800196c:	b21b      	sxth	r3, r3
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001974:	7a5b      	ldrb	r3, [r3, #9]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 800197e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001984:	7b1b      	ldrb	r3, [r3, #12]
 8001986:	b21b      	sxth	r3, r3
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800198e:	7adb      	ldrb	r3, [r3, #11]
 8001990:	b21b      	sxth	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001998:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 800199e:	7b9b      	ldrb	r3, [r3, #14]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019a8:	7b5b      	ldrb	r3, [r3, #13]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 80019b2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019b8:	7c1b      	ldrb	r3, [r3, #16]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019c2:	7bdb      	ldrb	r3, [r3, #15]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 80019cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019d2:	7c9b      	ldrb	r3, [r3, #18]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019dc:	7c5b      	ldrb	r3, [r3, #17]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 80019e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019ec:	7d1b      	ldrb	r3, [r3, #20]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 80019f6:	7cdb      	ldrb	r3, [r3, #19]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001a02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001a08:	7d9b      	ldrb	r3, [r3, #22]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <BNO_Page0Adress+0x2c0>)
 8001a12:	7d5b      	ldrb	r3, [r3, #21]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b02      	ldr	r3, [pc, #8]	@ (8001a28 <BNO_Page0Adress+0x2c4>)
 8001a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8001a22:	e10a      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
 8001a24:	24000304 	.word	0x24000304
 8001a28:	2400040c 	.word	0x2400040c
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8001a2c:	4b85      	ldr	r3, [pc, #532]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b83      	ldr	r3, [pc, #524]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8001c48 <BNO_Page0Adress+0x4e4>
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	4b7e      	ldr	r3, [pc, #504]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001a52:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8001a56:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a58:	791b      	ldrb	r3, [r3, #4]
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b78      	ldr	r3, [pc, #480]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a72:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001c48 <BNO_Page0Adress+0x4e4>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001a7c:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a80:	4b70      	ldr	r3, [pc, #448]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a82:	799b      	ldrb	r3, [r3, #6]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001a8c:	795b      	ldrb	r3, [r3, #5]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9c:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001c48 <BNO_Page0Adress+0x4e4>
 8001aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa4:	4b69      	ldr	r3, [pc, #420]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001aa6:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001aaa:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001aac:	7a1b      	ldrb	r3, [r3, #8]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001ab6:	79db      	ldrb	r3, [r3, #7]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ace:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001ad0:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001ad6:	7a9b      	ldrb	r3, [r3, #10]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	4b59      	ldr	r3, [pc, #356]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001ae0:	7a5b      	ldrb	r3, [r3, #9]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af8:	4b54      	ldr	r3, [pc, #336]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001afa:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001afe:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b0a:	7adb      	ldrb	r3, [r3, #11]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b22:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001b24:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001b28:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b2a:	7b9b      	ldrb	r3, [r3, #14]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b34:	7b5b      	ldrb	r3, [r3, #13]
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b44:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001b4e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001b52:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b54:	7c1b      	ldrb	r3, [r3, #16]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b5e:	7bdb      	ldrb	r3, [r3, #15]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6e:	eeb1 7a67 	vneg.f32	s14, s15
 8001b72:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7a:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001b7c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b82:	7c9b      	ldrb	r3, [r3, #18]
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001b8c:	7c5b      	ldrb	r3, [r3, #17]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001baa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001bae:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001bb0:	7d1b      	ldrb	r3, [r3, #20]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001bba:	7cdb      	ldrb	r3, [r3, #19]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bca:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001bd4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001bda:	7d9b      	ldrb	r3, [r3, #22]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001be4:	7d5b      	ldrb	r3, [r3, #21]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001bfe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001c04:	7e1b      	ldrb	r3, [r3, #24]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <BNO_Page0Adress+0x4e0>)
 8001c0e:	7ddb      	ldrb	r3, [r3, #23]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <BNO_Page0Adress+0x4e8>)
 8001c28:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <BNO_Page0Adress+0x4ec>)
 8001c2e:	220b      	movs	r2, #11
 8001c30:	701a      	strb	r2, [r3, #0]
			break;
 8001c32:	e002      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			break;
 8001c34:	bf00      	nop
 8001c36:	e000      	b.n	8001c3a <BNO_Page0Adress+0x4d6>
			if(BNO_RxBuffer[1] != 160) return;
 8001c38:	bf00      	nop
	}
}
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	24000304 	.word	0x24000304
 8001c48:	42c80000 	.word	0x42c80000
 8001c4c:	2400040c 	.word	0x2400040c
 8001c50:	24000405 	.word	0x24000405

08001c54 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <BNO_Page1Adress+0x2c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	d108      	bne.n	8001c72 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <BNO_Page1Adress+0x2c>)
 8001c62:	785a      	ldrb	r2, [r3, #1]
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <BNO_Page1Adress+0x30>)
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <BNO_Page1Adress+0x34>)
 8001c6c:	220b      	movs	r2, #11
 8001c6e:	701a      	strb	r2, [r3, #0]
			break;
 8001c70:	e000      	b.n	8001c74 <BNO_Page1Adress+0x20>

		default:
			break;
 8001c72:	bf00      	nop
	}
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	24000304 	.word	0x24000304
 8001c84:	2400040c 	.word	0x2400040c
 8001c88:	24000405 	.word	0x24000405

08001c8c <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <BNO_EmptyingBuffer+0x30>)
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <BNO_EmptyingBuffer+0x14>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d003      	beq.n	8001ca6 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c9e:	e005      	b.n	8001cac <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001ca0:	f7ff fd60 	bl	8001764 <BNO_Page0Adress>
			break;
 8001ca4:	e002      	b.n	8001cac <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001ca6:	f7ff ffd5 	bl	8001c54 <BNO_Page1Adress>
			break;
 8001caa:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001cac:	22ff      	movs	r2, #255	@ 0xff
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <BNO_EmptyingBuffer+0x34>)
 8001cb2:	f014 fd60 	bl	8016776 <memset>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2400040c 	.word	0x2400040c
 8001cc0:	24000304 	.word	0x24000304

08001cc4 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001cc8:	2120      	movs	r1, #32
 8001cca:	203f      	movs	r0, #63	@ 0x3f
 8001ccc:	f7ff fcb6 	bl	800163c <BNO_Write>
	bno055_delay(70);
 8001cd0:	2046      	movs	r0, #70	@ 0x46
 8001cd2:	f7ff fc79 	bl	80015c8 <bno055_delay>
	IMU.ID = 0x00;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <BNO_SWReset+0x24>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <BNO_SWReset+0x28>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2400040c 	.word	0x2400040c
 8001cec:	24000408 	.word	0x24000408

08001cf0 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	203d      	movs	r0, #61	@ 0x3d
 8001d00:	f7ff fc9c 	bl	800163c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f7ff fc5c 	bl	80015c8 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001d10:	e002      	b.n	8001d18 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f7ff fc58 	bl	80015c8 <bno055_delay>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff ffe3 	bl	8001cf0 <bno055_setOperationMode>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001d32:	200c      	movs	r0, #12
 8001d34:	f7ff ffdc 	bl	8001cf0 <bno055_setOperationMode>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001d40:	2116      	movs	r1, #22
 8001d42:	2055      	movs	r0, #85	@ 0x55
 8001d44:	f7ff fc54 	bl	80015f0 <BNO_Read>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001d52:	463b      	mov	r3, r7
 8001d54:	2206      	movs	r2, #6
 8001d56:	4619      	mov	r1, r3
 8001d58:	4814      	ldr	r0, [pc, #80]	@ (8001dac <BNO_SetCalibrationData+0x60>)
 8001d5a:	f014 fda6 	bl	80168aa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	3306      	adds	r3, #6
 8001d62:	2206      	movs	r2, #6
 8001d64:	4619      	mov	r1, r3
 8001d66:	4812      	ldr	r0, [pc, #72]	@ (8001db0 <BNO_SetCalibrationData+0x64>)
 8001d68:	f014 fd9f 	bl	80168aa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	330c      	adds	r3, #12
 8001d70:	2206      	movs	r2, #6
 8001d72:	4619      	mov	r1, r3
 8001d74:	480f      	ldr	r0, [pc, #60]	@ (8001db4 <BNO_SetCalibrationData+0x68>)
 8001d76:	f014 fd98 	bl	80168aa <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	3312      	adds	r3, #18
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <BNO_SetCalibrationData+0x6c>)
 8001d84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d88:	463b      	mov	r3, r7
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <BNO_SetCalibrationData+0x6c>)
 8001d92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d96:	463b      	mov	r3, r7
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2116      	movs	r1, #22
 8001d9c:	2055      	movs	r0, #85	@ 0x55
 8001d9e:	f7ff fc6f 	bl	8001680 <BNO_Write_MB>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	24000462 	.word	0x24000462
 8001db0:	2400045c 	.word	0x2400045c
 8001db4:	24000456 	.word	0x24000456
 8001db8:	2400040c 	.word	0x2400040c

08001dbc <BNO_Init>:

void BNO_Init(void){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4808      	ldr	r0, [pc, #32]	@ (8001de8 <BNO_Init+0x2c>)
 8001dc6:	f007 fa3b 	bl	8009240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dd0:	4806      	ldr	r0, [pc, #24]	@ (8001dec <BNO_Init+0x30>)
 8001dd2:	f007 fa35 	bl	8009240 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001dd6:	2064      	movs	r0, #100	@ 0x64
 8001dd8:	f7ff fbf6 	bl	80015c8 <bno055_delay>

	BNO_CurrentState = Reset;
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <BNO_Init+0x34>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	701a      	strb	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58020c00 	.word	0x58020c00
 8001dec:	58020400 	.word	0x58020400
 8001df0:	24000408 	.word	0x24000408

08001df4 <BNO_Config>:

void BNO_Config(void){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <BNO_Config+0x88>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d839      	bhi.n	8001e74 <BNO_Config+0x80>
 8001e00:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <BNO_Config+0x14>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e29 	.word	0x08001e29
 8001e10:	08001e35 	.word	0x08001e35
 8001e14:	08001e57 	.word	0x08001e57
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	203f      	movs	r0, #63	@ 0x3f
 8001e1c:	f7ff fc0e 	bl	800163c <BNO_Write>
			ConfigFlag = 1;
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <BNO_Config+0x88>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
			break;
 8001e26:	e026      	b.n	8001e76 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001e28:	f7ff ff7a 	bl	8001d20 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <BNO_Config+0x88>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
			break;
 8001e32:	e020      	b.n	8001e76 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e34:	2101      	movs	r1, #1
 8001e36:	203d      	movs	r0, #61	@ 0x3d
 8001e38:	f7ff fbda 	bl	80015f0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <BNO_Config+0x8c>)
 8001e3e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <BNO_Config+0x88>)
 8001e48:	2203      	movs	r2, #3
 8001e4a:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001e4c:	e013      	b.n	8001e76 <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <BNO_Config+0x88>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
			break;
 8001e54:	e00f      	b.n	8001e76 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001e56:	2104      	movs	r1, #4
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fbc9 	bl	80015f0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <BNO_Config+0x8c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e64:	d102      	bne.n	8001e6c <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001e66:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <BNO_Config+0x90>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <BNO_Config+0x88>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
			break;
 8001e72:	e000      	b.n	8001e76 <BNO_Config+0x82>
		default:
			break;
 8001e74:	bf00      	nop
	}

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2400046c 	.word	0x2400046c
 8001e80:	2400040c 	.word	0x2400040c
 8001e84:	24000408 	.word	0x24000408

08001e88 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b07      	cmp	r3, #7
 8001e92:	d870      	bhi.n	8001f76 <BNO_CalibrationStatus+0xee>
 8001e94:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <BNO_CalibrationStatus+0x14>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ebd 	.word	0x08001ebd
 8001ea0:	08001ecd 	.word	0x08001ecd
 8001ea4:	08001ed9 	.word	0x08001ed9
 8001ea8:	08001f11 	.word	0x08001f11
 8001eac:	08001f2b 	.word	0x08001f2b
 8001eb0:	08001f37 	.word	0x08001f37
 8001eb4:	08001f59 	.word	0x08001f59
 8001eb8:	08001f6b 	.word	0x08001f6b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	203f      	movs	r0, #63	@ 0x3f
 8001ec0:	f7ff fbbc 	bl	800163c <BNO_Write>
			CalibrationFlag = 1;
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
			break;
 8001eca:	e059      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001ecc:	f7ff ff2f 	bl	8001d2e <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	701a      	strb	r2, [r3, #0]
			break;
 8001ed6:	e053      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	203d      	movs	r0, #61	@ 0x3d
 8001edc:	f7ff fb88 	bl	80015f0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001ee0:	4b29      	ldr	r3, [pc, #164]	@ (8001f88 <BNO_CalibrationStatus+0x100>)
 8001ee2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d10e      	bne.n	8001f08 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001eea:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <BNO_CalibrationStatus+0x104>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001ef2:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001ef8:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <BNO_CalibrationStatus+0x108>)
 8001efa:	2203      	movs	r2, #3
 8001efc:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001efe:	e03f      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f02:	2203      	movs	r2, #3
 8001f04:	701a      	strb	r2, [r3, #0]
			break;
 8001f06:	e03b      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
			break;
 8001f0e:	e037      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001f10:	2101      	movs	r1, #1
 8001f12:	2035      	movs	r0, #53	@ 0x35
 8001f14:	f7ff fb6c 	bl	80015f0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <BNO_CalibrationStatus+0x100>)
 8001f1a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001f1e:	2bff      	cmp	r3, #255	@ 0xff
 8001f20:	d12d      	bne.n	8001f7e <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f24:	2204      	movs	r2, #4
 8001f26:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f28:	e029      	b.n	8001f7e <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001f2a:	f7ff fef9 	bl	8001d20 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f30:	2205      	movs	r2, #5
 8001f32:	701a      	strb	r2, [r3, #0]
			break;
 8001f34:	e024      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	203d      	movs	r0, #61	@ 0x3d
 8001f3a:	f7ff fb59 	bl	80015f0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <BNO_CalibrationStatus+0x100>)
 8001f40:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001f4e:	e017      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	701a      	strb	r2, [r3, #0]
			break;
 8001f56:	e013      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001f58:	f7ff fef0 	bl	8001d3c <BNO_GetCalibrationData>
			Calibrated = 1;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <BNO_CalibrationStatus+0x104>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
			break;
 8001f68:	e00a      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001f6a:	f7ff feef 	bl	8001d4c <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
			break;
 8001f74:	e004      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001f76:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <BNO_CalibrationStatus+0xfc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
			break;
 8001f7c:	e000      	b.n	8001f80 <BNO_CalibrationStatus+0xf8>
			break;
 8001f7e:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2400046d 	.word	0x2400046d
 8001f88:	2400040c 	.word	0x2400040c
 8001f8c:	24000000 	.word	0x24000000
 8001f90:	24000408 	.word	0x24000408

08001f94 <BNO_GetData>:

void BNO_GetData(void){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f98:	2118      	movs	r1, #24
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f7ff fb28 	bl	80015f0 <BNO_Read>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001fae:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <BNO_Receive+0xbc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <BNO_Receive+0xc0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2bff      	cmp	r3, #255	@ 0xff
 8001fba:	d027      	beq.n	800200c <BNO_Receive+0x68>
 8001fbc:	2bff      	cmp	r3, #255	@ 0xff
 8001fbe:	dc46      	bgt.n	800204e <BNO_Receive+0xaa>
 8001fc0:	2bee      	cmp	r3, #238	@ 0xee
 8001fc2:	d017      	beq.n	8001ff4 <BNO_Receive+0x50>
 8001fc4:	2bee      	cmp	r3, #238	@ 0xee
 8001fc6:	dc42      	bgt.n	800204e <BNO_Receive+0xaa>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <BNO_Receive+0x2e>
 8001fcc:	2bbb      	cmp	r3, #187	@ 0xbb
 8001fce:	d00a      	beq.n	8001fe6 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001fd0:	e03d      	b.n	800204e <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2bbb      	cmp	r3, #187	@ 0xbb
 8001fd6:	d002      	beq.n	8001fde <BNO_Receive+0x3a>
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2bee      	cmp	r3, #238	@ 0xee
 8001fdc:	d139      	bne.n	8002052 <BNO_Receive+0xae>
 8001fde:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <BNO_Receive+0xc0>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	7013      	strb	r3, [r2, #0]
			break;
 8001fe4:	e035      	b.n	8002052 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <BNO_Receive+0xc4>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <BNO_Receive+0xc0>)
 8001fee:	22ff      	movs	r2, #255	@ 0xff
 8001ff0:	701a      	strb	r2, [r3, #0]
			break;
 8001ff2:	e031      	b.n	8002058 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <BNO_Receive+0xc8>)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <BNO_Receive+0xc0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002000:	22ff      	movs	r2, #255	@ 0xff
 8002002:	2100      	movs	r1, #0
 8002004:	481a      	ldr	r0, [pc, #104]	@ (8002070 <BNO_Receive+0xcc>)
 8002006:	f014 fbb6 	bl	8016776 <memset>
			break;
 800200a:	e025      	b.n	8002058 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 800200c:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <BNO_Receive+0xd0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4917      	ldr	r1, [pc, #92]	@ (8002070 <BNO_Receive+0xcc>)
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8002018:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <BNO_Receive+0xd0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <BNO_Receive+0xd0>)
 8002022:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <BNO_Receive+0xd0>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <BNO_Receive+0xc4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d112      	bne.n	8002056 <BNO_Receive+0xb2>
				Counter = 0;
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <BNO_Receive+0xd0>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <BNO_Receive+0xc4>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <BNO_Receive+0xc0>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <BNO_Receive+0xc8>)
 8002044:	220b      	movs	r2, #11
 8002046:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8002048:	f7ff fe20 	bl	8001c8c <BNO_EmptyingBuffer>
			break;
 800204c:	e003      	b.n	8002056 <BNO_Receive+0xb2>
			break;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <BNO_Receive+0xb4>
			break;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <BNO_Receive+0xb4>
			break;
 8002056:	bf00      	nop
	}
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000406 	.word	0x24000406
 8002064:	24000404 	.word	0x24000404
 8002068:	2400046e 	.word	0x2400046e
 800206c:	24000405 	.word	0x24000405
 8002070:	24000304 	.word	0x24000304
 8002074:	2400046f 	.word	0x2400046f

08002078 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <BNO_FaultManager+0x38>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d912      	bls.n	80020aa <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <BNO_FaultManager+0x3c>)
 8002086:	f003 fa61 	bl	800554c <Reset_UART>
		BNO_ComsCounter = 0;
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <BNO_FaultManager+0x38>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <BNO_FaultManager+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002096:	2201      	movs	r2, #1
 8002098:	4908      	ldr	r1, [pc, #32]	@ (80020bc <BNO_FaultManager+0x44>)
 800209a:	4806      	ldr	r0, [pc, #24]	@ (80020b4 <BNO_FaultManager+0x3c>)
 800209c:	f00c fb42 	bl	800e724 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80020a0:	22ff      	movs	r2, #255	@ 0xff
 80020a2:	2100      	movs	r1, #0
 80020a4:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <BNO_FaultManager+0x48>)
 80020a6:	f014 fb66 	bl	8016776 <memset>
	}
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24000406 	.word	0x24000406
 80020b4:	24005188 	.word	0x24005188
 80020b8:	24000404 	.word	0x24000404
 80020bc:	24000403 	.word	0x24000403
 80020c0:	24000304 	.word	0x24000304

080020c4 <BNO_Tasks>:

void BNO_Tasks(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <BNO_Tasks+0x74>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d128      	bne.n	8002122 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 80020d0:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <BNO_Tasks+0x78>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d81c      	bhi.n	8002112 <BNO_Tasks+0x4e>
 80020d8:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <BNO_Tasks+0x1c>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	08002101 	.word	0x08002101
 80020e8:	08002107 	.word	0x08002107
 80020ec:	0800210d 	.word	0x0800210d
 80020f0:	080020fb 	.word	0x080020fb
			case Init:
				BNO_Init();
 80020f4:	f7ff fe62 	bl	8001dbc <BNO_Init>
				break;
 80020f8:	e00c      	b.n	8002114 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 80020fa:	f7ff fde3 	bl	8001cc4 <BNO_SWReset>
			break;
 80020fe:	e009      	b.n	8002114 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8002100:	f7ff fe78 	bl	8001df4 <BNO_Config>
				break;
 8002104:	e006      	b.n	8002114 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8002106:	f7ff febf 	bl	8001e88 <BNO_CalibrationStatus>
				break;
 800210a:	e003      	b.n	8002114 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 800210c:	f7ff ff42 	bl	8001f94 <BNO_GetData>
				break;
 8002110:	e000      	b.n	8002114 <BNO_Tasks+0x50>

			default:
				break;
 8002112:	bf00      	nop
		}
		++BNO_ComsCounter;
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <BNO_Tasks+0x7c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <BNO_Tasks+0x7c>)
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e005      	b.n	800212e <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <BNO_Tasks+0x74>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3b01      	subs	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <BNO_Tasks+0x74>)
 800212c:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 800212e:	f7ff ffa3 	bl	8002078 <BNO_FaultManager>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24000407 	.word	0x24000407
 800213c:	24000408 	.word	0x24000408
 8002140:	24000406 	.word	0x24000406

08002144 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8002144:	b084      	sub	sp, #16
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	f107 001c 	add.w	r0, r7, #28
 8002152:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8002156:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <LED_blink+0x20>
 800215e:	2b01      	cmp	r3, #1
 8002160:	d010      	beq.n	8002184 <LED_blink+0x40>
 8002162:	e01f      	b.n	80021a4 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8002164:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002168:	429a      	cmp	r2, r3
 800216a:	d31f      	bcc.n	80021ac <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	8c39      	ldrh	r1, [r7, #32]
 8002170:	2201      	movs	r2, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f007 f864 	bl	8009240 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8002182:	e013      	b.n	80021ac <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8002184:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002188:	429a      	cmp	r2, r3
 800218a:	d311      	bcc.n	80021b0 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	8c39      	ldrh	r1, [r7, #32]
 8002190:	2200      	movs	r2, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f007 f854 	bl	8009240 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80021a2:	e005      	b.n	80021b0 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 80021aa:	e002      	b.n	80021b2 <LED_blink+0x6e>
				break;
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <LED_blink+0x6e>
				break;
 80021b0:	bf00      	nop
		}

	LED.count++;
 80021b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80021b4:	3301      	adds	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	461c      	mov	r4, r3
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021d2:	b004      	add	sp, #16
 80021d4:	4770      	bx	lr

080021d6 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 80021d6:	b084      	sub	sp, #16
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	f107 001c 	add.w	r0, r7, #28
 80021e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 80021e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d117      	bne.n	8002220 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 80021f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <LED_Rutine+0x28>
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d007      	beq.n	800220c <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80021fc:	e018      	b.n	8002230 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	8c39      	ldrh	r1, [r7, #32]
 8002202:	2201      	movs	r2, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f007 f81b 	bl	8009240 <HAL_GPIO_WritePin>
				break;
 800220a:	e011      	b.n	8002230 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 800220c:	f107 001c 	add.w	r0, r7, #28
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221a:	f7ff ff93 	bl	8002144 <LED_blink>
				break;
 800221e:	e007      	b.n	8002230 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	8c39      	ldrh	r1, [r7, #32]
 8002224:	2200      	movs	r2, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f007 f80a 	bl	8009240 <HAL_GPIO_WritePin>
		LED.count = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	461c      	mov	r4, r3
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002248:	b004      	add	sp, #16
 800224a:	4770      	bx	lr

0800224c <LED_Tasks>:

void LED_Tasks (void){
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8002252:	4c24      	ldr	r4, [pc, #144]	@ (80022e4 <LED_Tasks+0x98>)
 8002254:	4638      	mov	r0, r7
 8002256:	4b23      	ldr	r3, [pc, #140]	@ (80022e4 <LED_Tasks+0x98>)
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	9200      	str	r2, [sp, #0]
 800225c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225e:	f7ff ffba 	bl	80021d6 <LED_Rutine>
 8002262:	463b      	mov	r3, r7
 8002264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 800226a:	4c1e      	ldr	r4, [pc, #120]	@ (80022e4 <LED_Tasks+0x98>)
 800226c:	4638      	mov	r0, r7
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <LED_Tasks+0x98>)
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	3310      	adds	r3, #16
 8002276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002278:	f7ff ffad 	bl	80021d6 <LED_Rutine>
 800227c:	3410      	adds	r4, #16
 800227e:	463b      	mov	r3, r7
 8002280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8002286:	4c17      	ldr	r4, [pc, #92]	@ (80022e4 <LED_Tasks+0x98>)
 8002288:	4638      	mov	r0, r7
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <LED_Tasks+0x98>)
 800228c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	3320      	adds	r3, #32
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	f7ff ff9f 	bl	80021d6 <LED_Rutine>
 8002298:	3420      	adds	r4, #32
 800229a:	463b      	mov	r3, r7
 800229c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 80022a2:	4c10      	ldr	r4, [pc, #64]	@ (80022e4 <LED_Tasks+0x98>)
 80022a4:	4638      	mov	r0, r7
 80022a6:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <LED_Tasks+0x98>)
 80022a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	3330      	adds	r3, #48	@ 0x30
 80022ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b0:	f7ff ff91 	bl	80021d6 <LED_Rutine>
 80022b4:	3430      	adds	r4, #48	@ 0x30
 80022b6:	463b      	mov	r3, r7
 80022b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 80022be:	4c09      	ldr	r4, [pc, #36]	@ (80022e4 <LED_Tasks+0x98>)
 80022c0:	4638      	mov	r0, r7
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <LED_Tasks+0x98>)
 80022c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022c6:	9200      	str	r2, [sp, #0]
 80022c8:	3340      	adds	r3, #64	@ 0x40
 80022ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022cc:	f7ff ff83 	bl	80021d6 <LED_Rutine>
 80022d0:	3440      	adds	r4, #64	@ 0x40
 80022d2:	463b      	mov	r3, r7
 80022d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24000004 	.word	0x24000004

080022e8 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <PWM_Assing+0xb0>)
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 80022f6:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <PWM_Assing+0xb0>)
 80022f8:	885a      	ldrh	r2, [r3, #2]
 80022fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022fe:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <PWM_Assing+0xb0>)
 8002302:	889a      	ldrh	r2, [r3, #4]
 8002304:	4b25      	ldr	r3, [pc, #148]	@ (800239c <PWM_Assing+0xb4>)
 8002306:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8002308:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <PWM_Assing+0xb0>)
 800230a:	88da      	ldrh	r2, [r3, #6]
 800230c:	4b23      	ldr	r3, [pc, #140]	@ (800239c <PWM_Assing+0xb4>)
 800230e:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <PWM_Assing+0xb0>)
 8002312:	891a      	ldrh	r2, [r3, #8]
 8002314:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <PWM_Assing+0xb8>)
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <PWM_Assing+0xb0>)
 800231a:	895a      	ldrh	r2, [r3, #10]
 800231c:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <PWM_Assing+0xb8>)
 800231e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <PWM_Assing+0xb0>)
 8002322:	899a      	ldrh	r2, [r3, #12]
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <PWM_Assing+0xb8>)
 8002326:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <PWM_Assing+0xb0>)
 800232a:	89da      	ldrh	r2, [r3, #14]
 800232c:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <PWM_Assing+0xb8>)
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <PWM_Assing+0xb0>)
 8002332:	8a1a      	ldrh	r2, [r3, #16]
 8002334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 800233a:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <PWM_Assing+0xb0>)
 800233c:	8a5a      	ldrh	r2, [r3, #18]
 800233e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002342:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002344:	2100      	movs	r1, #0
 8002346:	4817      	ldr	r0, [pc, #92]	@ (80023a4 <PWM_Assing+0xbc>)
 8002348:	f00b f96e 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800234c:	2104      	movs	r1, #4
 800234e:	4815      	ldr	r0, [pc, #84]	@ (80023a4 <PWM_Assing+0xbc>)
 8002350:	f00b f96a 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002354:	2108      	movs	r1, #8
 8002356:	4813      	ldr	r0, [pc, #76]	@ (80023a4 <PWM_Assing+0xbc>)
 8002358:	f00b f966 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800235c:	210c      	movs	r1, #12
 800235e:	4811      	ldr	r0, [pc, #68]	@ (80023a4 <PWM_Assing+0xbc>)
 8002360:	f00b f962 	bl	800d628 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002364:	2100      	movs	r1, #0
 8002366:	4810      	ldr	r0, [pc, #64]	@ (80023a8 <PWM_Assing+0xc0>)
 8002368:	f00b f95e 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800236c:	2104      	movs	r1, #4
 800236e:	480e      	ldr	r0, [pc, #56]	@ (80023a8 <PWM_Assing+0xc0>)
 8002370:	f00b f95a 	bl	800d628 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002374:	2100      	movs	r1, #0
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <PWM_Assing+0xc4>)
 8002378:	f00b f956 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800237c:	2104      	movs	r1, #4
 800237e:	480b      	ldr	r0, [pc, #44]	@ (80023ac <PWM_Assing+0xc4>)
 8002380:	f00b f952 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002384:	2108      	movs	r1, #8
 8002386:	4809      	ldr	r0, [pc, #36]	@ (80023ac <PWM_Assing+0xc4>)
 8002388:	f00b f94e 	bl	800d628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800238c:	210c      	movs	r1, #12
 800238e:	4807      	ldr	r0, [pc, #28]	@ (80023ac <PWM_Assing+0xc4>)
 8002390:	f00b f94a 	bl	800d628 <HAL_TIM_PWM_Start>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	24000054 	.word	0x24000054
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800
 80023a4:	24004e98 	.word	0x24004e98
 80023a8:	24004ee4 	.word	0x24004ee4
 80023ac:	24004f30 	.word	0x24004f30

080023b0 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <SBUS_Receive+0x8c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <SBUS_Receive+0x18>
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d017      	beq.n	80023f6 <SBUS_Receive+0x46>
 80023c6:	e02f      	b.n	8002428 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	d10f      	bne.n	80023ee <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002440 <SBUS_Receive+0x90>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <SBUS_Receive+0x94>)
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80023da:	4b18      	ldr	r3, [pc, #96]	@ (800243c <SBUS_Receive+0x8c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80023e0:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <SBUS_Receive+0x90>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <SBUS_Receive+0x90>)
 80023ea:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80023ec:	e021      	b.n	8002432 <SBUS_Receive+0x82>
				RxCount = 0;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <SBUS_Receive+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
			break;
 80023f4:	e01d      	b.n	8002432 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <SBUS_Receive+0x90>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <SBUS_Receive+0x94>)
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <SBUS_Receive+0x90>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <SBUS_Receive+0x90>)
 800240c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <SBUS_Receive+0x90>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b18      	cmp	r3, #24
 8002414:	d10c      	bne.n	8002430 <SBUS_Receive+0x80>
				RxCount = 0;
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <SBUS_Receive+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 800241c:	4b07      	ldr	r3, [pc, #28]	@ (800243c <SBUS_Receive+0x8c>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8002422:	f000 f845 	bl	80024b0 <SBUS_getData>
			}
			break;
 8002426:	e003      	b.n	8002430 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <SBUS_Receive+0x8c>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
			break;
 800242e:	e000      	b.n	8002432 <SBUS_Receive+0x82>
			break;
 8002430:	bf00      	nop
	}
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2400048a 	.word	0x2400048a
 8002440:	2400048b 	.word	0x2400048b
 8002444:	24000470 	.word	0x24000470

08002448 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <Temp_BypassFunct+0x60>)
 800244e:	885a      	ldrh	r2, [r3, #2]
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <Temp_BypassFunct+0x64>)
 8002452:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <Temp_BypassFunct+0x60>)
 8002456:	889a      	ldrh	r2, [r3, #4]
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <Temp_BypassFunct+0x64>)
 800245a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <Temp_BypassFunct+0x60>)
 800245e:	88da      	ldrh	r2, [r3, #6]
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <Temp_BypassFunct+0x64>)
 8002462:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <Temp_BypassFunct+0x60>)
 8002466:	891a      	ldrh	r2, [r3, #8]
 8002468:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <Temp_BypassFunct+0x64>)
 800246a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <Temp_BypassFunct+0x60>)
 800246e:	895a      	ldrh	r2, [r3, #10]
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <Temp_BypassFunct+0x64>)
 8002472:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <Temp_BypassFunct+0x60>)
 8002476:	899a      	ldrh	r2, [r3, #12]
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <Temp_BypassFunct+0x64>)
 800247a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 800247c:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <Temp_BypassFunct+0x60>)
 800247e:	89da      	ldrh	r2, [r3, #14]
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <Temp_BypassFunct+0x64>)
 8002482:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <Temp_BypassFunct+0x60>)
 8002486:	8a1a      	ldrh	r2, [r3, #16]
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <Temp_BypassFunct+0x64>)
 800248a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <Temp_BypassFunct+0x60>)
 800248e:	8a5a      	ldrh	r2, [r3, #18]
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <Temp_BypassFunct+0x64>)
 8002492:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8002494:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <Temp_BypassFunct+0x60>)
 8002496:	8a9a      	ldrh	r2, [r3, #20]
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <Temp_BypassFunct+0x64>)
 800249a:	825a      	strh	r2, [r3, #18]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	24000068 	.word	0x24000068
 80024ac:	24000054 	.word	0x24000054

080024b0 <SBUS_getData>:

void SBUS_getData(void){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 80024b4:	4b93      	ldr	r3, [pc, #588]	@ (8002704 <SBUS_getData+0x254>)
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b92      	ldr	r3, [pc, #584]	@ (8002704 <SBUS_getData+0x254>)
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	b21b      	sxth	r3, r3
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002708 <SBUS_getData+0x258>)
 80024d2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80024d4:	4b8b      	ldr	r3, [pc, #556]	@ (8002704 <SBUS_getData+0x254>)
 80024d6:	789b      	ldrb	r3, [r3, #2]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	b21a      	sxth	r2, r3
 80024de:	4b89      	ldr	r3, [pc, #548]	@ (8002704 <SBUS_getData+0x254>)
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	015b      	lsls	r3, r3, #5
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b84      	ldr	r3, [pc, #528]	@ (8002708 <SBUS_getData+0x258>)
 80024f6:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80024f8:	4b82      	ldr	r3, [pc, #520]	@ (8002704 <SBUS_getData+0x254>)
 80024fa:	78db      	ldrb	r3, [r3, #3]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	b21a      	sxth	r2, r3
 8002502:	4b80      	ldr	r3, [pc, #512]	@ (8002704 <SBUS_getData+0x254>)
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	b21b      	sxth	r3, r3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	b21b      	sxth	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b21a      	sxth	r2, r3
 8002510:	4b7c      	ldr	r3, [pc, #496]	@ (8002704 <SBUS_getData+0x254>)
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	b21b      	sxth	r3, r3
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b21b      	sxth	r3, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b78      	ldr	r3, [pc, #480]	@ (8002708 <SBUS_getData+0x258>)
 8002528:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 800252a:	4b76      	ldr	r3, [pc, #472]	@ (8002704 <SBUS_getData+0x254>)
 800252c:	795b      	ldrb	r3, [r3, #5]
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	b21a      	sxth	r2, r3
 8002534:	4b73      	ldr	r3, [pc, #460]	@ (8002704 <SBUS_getData+0x254>)
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	b21b      	sxth	r3, r3
 800253a:	01db      	lsls	r3, r3, #7
 800253c:	b21b      	sxth	r3, r3
 800253e:	4313      	orrs	r3, r2
 8002540:	b21b      	sxth	r3, r3
 8002542:	b29b      	uxth	r3, r3
 8002544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <SBUS_getData+0x258>)
 800254c:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 800254e:	4b6d      	ldr	r3, [pc, #436]	@ (8002704 <SBUS_getData+0x254>)
 8002550:	799b      	ldrb	r3, [r3, #6]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b21a      	sxth	r2, r3
 8002558:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <SBUS_getData+0x254>)
 800255a:	79db      	ldrb	r3, [r3, #7]
 800255c:	b21b      	sxth	r3, r3
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b66      	ldr	r3, [pc, #408]	@ (8002708 <SBUS_getData+0x258>)
 8002570:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8002572:	4b64      	ldr	r3, [pc, #400]	@ (8002704 <SBUS_getData+0x254>)
 8002574:	79db      	ldrb	r3, [r3, #7]
 8002576:	09db      	lsrs	r3, r3, #7
 8002578:	b2db      	uxtb	r3, r3
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b61      	ldr	r3, [pc, #388]	@ (8002704 <SBUS_getData+0x254>)
 800257e:	7a1b      	ldrb	r3, [r3, #8]
 8002580:	b21b      	sxth	r3, r3
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	b21b      	sxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b21a      	sxth	r2, r3
 800258a:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <SBUS_getData+0x254>)
 800258c:	7a5b      	ldrb	r3, [r3, #9]
 800258e:	b21b      	sxth	r3, r3
 8002590:	025b      	lsls	r3, r3, #9
 8002592:	b21b      	sxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b21b      	sxth	r3, r3
 8002598:	b29b      	uxth	r3, r3
 800259a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b59      	ldr	r3, [pc, #356]	@ (8002708 <SBUS_getData+0x258>)
 80025a2:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 80025a4:	4b57      	ldr	r3, [pc, #348]	@ (8002704 <SBUS_getData+0x254>)
 80025a6:	7a5b      	ldrb	r3, [r3, #9]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4b55      	ldr	r3, [pc, #340]	@ (8002704 <SBUS_getData+0x254>)
 80025b0:	7a9b      	ldrb	r3, [r3, #10]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <SBUS_getData+0x258>)
 80025c6:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 80025c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002704 <SBUS_getData+0x254>)
 80025ca:	7a9b      	ldrb	r3, [r3, #10]
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002704 <SBUS_getData+0x254>)
 80025d4:	7adb      	ldrb	r3, [r3, #11]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b21b      	sxth	r3, r3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <SBUS_getData+0x258>)
 80025ea:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80025ec:	4b45      	ldr	r3, [pc, #276]	@ (8002704 <SBUS_getData+0x254>)
 80025ee:	7b1b      	ldrb	r3, [r3, #12]
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <SBUS_getData+0x254>)
 80025f4:	7b5b      	ldrb	r3, [r3, #13]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b21b      	sxth	r3, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <SBUS_getData+0x258>)
 800260a:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800260c:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <SBUS_getData+0x254>)
 800260e:	7b5b      	ldrb	r3, [r3, #13]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b21a      	sxth	r2, r3
 8002616:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <SBUS_getData+0x254>)
 8002618:	7b9b      	ldrb	r3, [r3, #14]
 800261a:	b21b      	sxth	r3, r3
 800261c:	015b      	lsls	r3, r3, #5
 800261e:	b21b      	sxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b21b      	sxth	r3, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <SBUS_getData+0x258>)
 800262e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <SBUS_getData+0x254>)
 8002632:	7b9b      	ldrb	r3, [r3, #14]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	b2db      	uxtb	r3, r3
 8002638:	b21a      	sxth	r2, r3
 800263a:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <SBUS_getData+0x254>)
 800263c:	7bdb      	ldrb	r3, [r3, #15]
 800263e:	b21b      	sxth	r3, r3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	b21b      	sxth	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b21a      	sxth	r2, r3
 8002648:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <SBUS_getData+0x254>)
 800264a:	7c1b      	ldrb	r3, [r3, #16]
 800264c:	b21b      	sxth	r3, r3
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <SBUS_getData+0x258>)
 8002660:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8002662:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <SBUS_getData+0x254>)
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <SBUS_getData+0x254>)
 800266e:	7c5b      	ldrb	r3, [r3, #17]
 8002670:	b21b      	sxth	r3, r3
 8002672:	01db      	lsls	r3, r3, #7
 8002674:	b21b      	sxth	r3, r3
 8002676:	4313      	orrs	r3, r2
 8002678:	b21b      	sxth	r3, r3
 800267a:	b29b      	uxth	r3, r3
 800267c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002680:	b29a      	uxth	r2, r3
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <SBUS_getData+0x258>)
 8002684:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002686:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <SBUS_getData+0x254>)
 8002688:	7c5b      	ldrb	r3, [r3, #17]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	b2db      	uxtb	r3, r3
 800268e:	b21a      	sxth	r2, r3
 8002690:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <SBUS_getData+0x254>)
 8002692:	7c9b      	ldrb	r3, [r3, #18]
 8002694:	b21b      	sxth	r3, r3
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <SBUS_getData+0x258>)
 80026a8:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 80026aa:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <SBUS_getData+0x254>)
 80026ac:	7c9b      	ldrb	r3, [r3, #18]
 80026ae:	09db      	lsrs	r3, r3, #7
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <SBUS_getData+0x254>)
 80026b6:	7cdb      	ldrb	r3, [r3, #19]
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <SBUS_getData+0x254>)
 80026c4:	7d1b      	ldrb	r3, [r3, #20]
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	025b      	lsls	r3, r3, #9
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <SBUS_getData+0x258>)
 80026da:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <SBUS_getData+0x254>)
 80026de:	7d1b      	ldrb	r3, [r3, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <SBUS_getData+0x254>)
 80026e8:	7d5b      	ldrb	r3, [r3, #21]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b02      	ldr	r3, [pc, #8]	@ (8002708 <SBUS_getData+0x258>)
 80026fe:	83da      	strh	r2, [r3, #30]
 8002700:	e004      	b.n	800270c <SBUS_getData+0x25c>
 8002702:	bf00      	nop
 8002704:	24000470 	.word	0x24000470
 8002708:	24000068 	.word	0x24000068
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 800270c:	4bcd      	ldr	r3, [pc, #820]	@ (8002a44 <SBUS_getData+0x594>)
 800270e:	7d5b      	ldrb	r3, [r3, #21]
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	4bcb      	ldr	r3, [pc, #812]	@ (8002a44 <SBUS_getData+0x594>)
 8002718:	7d9b      	ldrb	r3, [r3, #22]
 800271a:	b21b      	sxth	r3, r3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272a:	b29a      	uxth	r2, r3
 800272c:	4bc6      	ldr	r3, [pc, #792]	@ (8002a48 <SBUS_getData+0x598>)
 800272e:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8002730:	4bc5      	ldr	r3, [pc, #788]	@ (8002a48 <SBUS_getData+0x598>)
 8002732:	885b      	ldrh	r3, [r3, #2]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273c:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8002a4c <SBUS_getData+0x59c>
 8002740:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002744:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 8002a50 <SBUS_getData+0x5a0>
 8002748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800274c:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 8002a54 <SBUS_getData+0x5a4>
 8002750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002758:	ee17 3a90 	vmov	r3, s15
 800275c:	b29b      	uxth	r3, r3
 800275e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002762:	b29a      	uxth	r2, r3
 8002764:	4bb8      	ldr	r3, [pc, #736]	@ (8002a48 <SBUS_getData+0x598>)
 8002766:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8002768:	4bb7      	ldr	r3, [pc, #732]	@ (8002a48 <SBUS_getData+0x598>)
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002774:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002a4c <SBUS_getData+0x59c>
 8002778:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800277c:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 8002a50 <SBUS_getData+0x5a0>
 8002780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002784:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8002a54 <SBUS_getData+0x5a4>
 8002788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002790:	ee17 3a90 	vmov	r3, s15
 8002794:	b29b      	uxth	r3, r3
 8002796:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800279a:	b29a      	uxth	r2, r3
 800279c:	4baa      	ldr	r3, [pc, #680]	@ (8002a48 <SBUS_getData+0x598>)
 800279e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 80027a0:	4ba9      	ldr	r3, [pc, #676]	@ (8002a48 <SBUS_getData+0x598>)
 80027a2:	88db      	ldrh	r3, [r3, #6]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ac:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002a4c <SBUS_getData+0x59c>
 80027b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027b4:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8002a50 <SBUS_getData+0x5a0>
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002a54 <SBUS_getData+0x5a4>
 80027c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a48 <SBUS_getData+0x598>)
 80027d6:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 80027d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a48 <SBUS_getData+0x598>)
 80027da:	891b      	ldrh	r3, [r3, #8]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002a4c <SBUS_getData+0x59c>
 80027e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027ec:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8002a50 <SBUS_getData+0x5a0>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002a54 <SBUS_getData+0x5a4>
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002800:	ee17 3a90 	vmov	r3, s15
 8002804:	b29b      	uxth	r3, r3
 8002806:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b8e      	ldr	r3, [pc, #568]	@ (8002a48 <SBUS_getData+0x598>)
 800280e:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8002810:	4b8d      	ldr	r3, [pc, #564]	@ (8002a48 <SBUS_getData+0x598>)
 8002812:	895b      	ldrh	r3, [r3, #10]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281c:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8002a4c <SBUS_getData+0x59c>
 8002820:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002824:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8002a50 <SBUS_getData+0x5a0>
 8002828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282c:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002a54 <SBUS_getData+0x5a4>
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002838:	ee17 3a90 	vmov	r3, s15
 800283c:	b29b      	uxth	r3, r3
 800283e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b80      	ldr	r3, [pc, #512]	@ (8002a48 <SBUS_getData+0x598>)
 8002846:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8002848:	4b7f      	ldr	r3, [pc, #508]	@ (8002a48 <SBUS_getData+0x598>)
 800284a:	899b      	ldrh	r3, [r3, #12]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002a4c <SBUS_getData+0x59c>
 8002858:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800285c:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8002a50 <SBUS_getData+0x5a0>
 8002860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002864:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8002a54 <SBUS_getData+0x5a4>
 8002868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002870:	ee17 3a90 	vmov	r3, s15
 8002874:	b29b      	uxth	r3, r3
 8002876:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b72      	ldr	r3, [pc, #456]	@ (8002a48 <SBUS_getData+0x598>)
 800287e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8002880:	4b71      	ldr	r3, [pc, #452]	@ (8002a48 <SBUS_getData+0x598>)
 8002882:	89db      	ldrh	r3, [r3, #14]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002a4c <SBUS_getData+0x59c>
 8002890:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002894:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002a50 <SBUS_getData+0x5a0>
 8002898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289c:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002a54 <SBUS_getData+0x5a4>
 80028a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 3a90 	vmov	r3, s15
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b64      	ldr	r3, [pc, #400]	@ (8002a48 <SBUS_getData+0x598>)
 80028b6:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 80028b8:	4b63      	ldr	r3, [pc, #396]	@ (8002a48 <SBUS_getData+0x598>)
 80028ba:	8a1b      	ldrh	r3, [r3, #16]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002a4c <SBUS_getData+0x59c>
 80028c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028cc:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8002a50 <SBUS_getData+0x5a0>
 80028d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d4:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002a54 <SBUS_getData+0x5a4>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <SBUS_getData+0x598>)
 80028ee:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80028f0:	4b55      	ldr	r3, [pc, #340]	@ (8002a48 <SBUS_getData+0x598>)
 80028f2:	8a5b      	ldrh	r3, [r3, #18]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002a4c <SBUS_getData+0x59c>
 8002900:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002904:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8002a50 <SBUS_getData+0x5a0>
 8002908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002a54 <SBUS_getData+0x5a4>
 8002910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002918:	ee17 3a90 	vmov	r3, s15
 800291c:	b29b      	uxth	r3, r3
 800291e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b48      	ldr	r3, [pc, #288]	@ (8002a48 <SBUS_getData+0x598>)
 8002926:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8002928:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <SBUS_getData+0x598>)
 800292a:	8a9b      	ldrh	r3, [r3, #20]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002a4c <SBUS_getData+0x59c>
 8002938:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800293c:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002a50 <SBUS_getData+0x5a0>
 8002940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002944:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002a54 <SBUS_getData+0x5a4>
 8002948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800294c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002950:	ee17 3a90 	vmov	r3, s15
 8002954:	b29b      	uxth	r3, r3
 8002956:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a48 <SBUS_getData+0x598>)
 800295e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <SBUS_getData+0x598>)
 8002962:	8adb      	ldrh	r3, [r3, #22]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002a4c <SBUS_getData+0x59c>
 8002970:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002974:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002a50 <SBUS_getData+0x5a0>
 8002978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002a54 <SBUS_getData+0x5a4>
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002988:	ee17 3a90 	vmov	r3, s15
 800298c:	b29b      	uxth	r3, r3
 800298e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b2c      	ldr	r3, [pc, #176]	@ (8002a48 <SBUS_getData+0x598>)
 8002996:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <SBUS_getData+0x598>)
 800299a:	8b1b      	ldrh	r3, [r3, #24]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002a4c <SBUS_getData+0x59c>
 80029a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029ac:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002a50 <SBUS_getData+0x5a0>
 80029b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002a54 <SBUS_getData+0x5a4>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 3a90 	vmov	r3, s15
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <SBUS_getData+0x598>)
 80029ce:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <SBUS_getData+0x598>)
 80029d2:	8b5b      	ldrh	r3, [r3, #26]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002a4c <SBUS_getData+0x59c>
 80029e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e4:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002a50 <SBUS_getData+0x5a0>
 80029e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002a54 <SBUS_getData+0x5a4>
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <SBUS_getData+0x598>)
 8002a06:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <SBUS_getData+0x598>)
 8002a0a:	8b9b      	ldrh	r3, [r3, #28]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a14:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002a4c <SBUS_getData+0x59c>
 8002a18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a1c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002a50 <SBUS_getData+0x5a0>
 8002a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a24:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002a54 <SBUS_getData+0x5a4>
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b02      	ldr	r3, [pc, #8]	@ (8002a48 <SBUS_getData+0x598>)
 8002a3e:	839a      	strh	r2, [r3, #28]
 8002a40:	e00a      	b.n	8002a58 <SBUS_getData+0x5a8>
 8002a42:	bf00      	nop
 8002a44:	24000470 	.word	0x24000470
 8002a48:	24000068 	.word	0x24000068
 8002a4c:	43b00000 	.word	0x43b00000
 8002a50:	44a80000 	.word	0x44a80000
 8002a54:	447a0000 	.word	0x447a0000
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002a58:	4b44      	ldr	r3, [pc, #272]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002a5a:	8bdb      	ldrh	r3, [r3, #30]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a64:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002b70 <SBUS_getData+0x6c0>
 8002a68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a6c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002b74 <SBUS_getData+0x6c4>
 8002a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a74:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002b78 <SBUS_getData+0x6c8>
 8002a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	ee17 3a90 	vmov	r3, s15
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002a8e:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8002a90:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002a92:	8c1b      	ldrh	r3, [r3, #32]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002b70 <SBUS_getData+0x6c0>
 8002aa0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002aa4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002b74 <SBUS_getData+0x6c4>
 8002aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002b78 <SBUS_getData+0x6c8>
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002ac6:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002aca:	7dda      	ldrb	r2, [r3, #23]
 8002acc:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002ace:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002ad2:	7ddb      	ldrb	r3, [r3, #23]
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	d90a      	bls.n	8002aee <SBUS_getData+0x63e>
		SBUS_UART_Rx[23]-=8;
 8002ad8:	4b28      	ldr	r3, [pc, #160]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002ada:	7ddb      	ldrb	r3, [r3, #23]
 8002adc:	3b08      	subs	r3, #8
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002ae2:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002ae6:	2235      	movs	r2, #53	@ 0x35
 8002ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002aec:	e003      	b.n	8002af6 <SBUS_getData+0x646>
	}else Radio_input.fail_safe= Ok;
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002af0:	22aa      	movs	r2, #170	@ 0xaa
 8002af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002af8:	7ddb      	ldrb	r3, [r3, #23]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d90a      	bls.n	8002b14 <SBUS_getData+0x664>
		SBUS_UART_Rx[23]-=4;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b00:	7ddb      	ldrb	r3, [r3, #23]
 8002b02:	3b04      	subs	r3, #4
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b08:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002b0a:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b12:	e003      	b.n	8002b1c <SBUS_getData+0x66c>
	}else Radio_input.pkg_lost=Ok;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b16:	22aa      	movs	r2, #170	@ 0xaa
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b1e:	7ddb      	ldrb	r3, [r3, #23]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d90a      	bls.n	8002b3a <SBUS_getData+0x68a>
		SBUS_UART_Rx[23]-=2;
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b26:	7ddb      	ldrb	r3, [r3, #23]
 8002b28:	3b02      	subs	r3, #2
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b2e:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002b38:	e003      	b.n	8002b42 <SBUS_getData+0x692>
	}else Radio_input.Interruptor_2=OFF;
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <SBUS_getData+0x6cc>)
 8002b44:	7ddb      	ldrb	r3, [r3, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <SBUS_getData+0x6a4>
		Radio_input.Interruptor_1=ON;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002b52:	e003      	b.n	8002b5c <SBUS_getData+0x6ac>
	}else Radio_input.Interruptor_1=OFF;
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <SBUS_getData+0x6bc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002b64:	f7ff fc70 	bl	8002448 <Temp_BypassFunct>

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	24000068 	.word	0x24000068
 8002b70:	43b00000 	.word	0x43b00000
 8002b74:	44a80000 	.word	0x44a80000
 8002b78:	447a0000 	.word	0x447a0000
 8002b7c:	24000470 	.word	0x24000470

08002b80 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002b86:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002b8a:	2bff      	cmp	r3, #255	@ 0xff
 8002b8c:	d00c      	beq.n	8002ba8 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002b90:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002b9a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002ba0:	22aa      	movs	r2, #170	@ 0xaa
 8002ba2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002ba6:	e007      	b.n	8002bb8 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <SBUS_IntegrityVerification+0x44>)
 8002bb2:	2235      	movs	r2, #53	@ 0x35
 8002bb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	24000068 	.word	0x24000068

08002bc8 <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73bb      	strb	r3, [r7, #14]
 8002bdc:	e011      	b.n	8002c02 <ASCII2uint8+0x3a>
		inter *= 10;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	461a      	mov	r2, r3
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3b30      	subs	r3, #48	@ 0x30
 8002bfa:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 8002bfc:	7bbb      	ldrb	r3, [r7, #14]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	73bb      	strb	r3, [r7, #14]
 8002c02:	7bba      	ldrb	r2, [r7, #14]
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3e9      	bcc.n	8002bde <ASCII2uint8+0x16>
	}
	return inter;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <uint82ASCII+0xac>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <uint82ASCII+0xb0>)
 8002c48:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4c:	1092      	asrs	r2, r2, #2
 8002c4e:	17db      	asrs	r3, r3, #31
 8002c50:	1ad2      	subs	r2, r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	0149      	lsls	r1, r1, #5
 8002c76:	1ac9      	subs	r1, r1, r3
 8002c78:	0089      	lsls	r1, r1, #2
 8002c7a:	1acb      	subs	r3, r1, r3
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	b2d9      	uxtb	r1, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3302      	adds	r3, #2
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	440a      	add	r2, r1
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e00c      	b.n	8002cb0 <uint82ASCII+0x98>
		Output[n] +=48;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3230      	adds	r2, #48	@ 0x30
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	3301      	adds	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d9ef      	bls.n	8002c96 <uint82ASCII+0x7e>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	51eb851f 	.word	0x51eb851f
 8002cc8:	66666667 	.word	0x66666667

08002ccc <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <ConfigFile_Create+0x38>)
 8002cd2:	f012 f86c 	bl	8014dae <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002cd6:	2213      	movs	r2, #19
 8002cd8:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <ConfigFile_Create+0x38>)
 8002cda:	480b      	ldr	r0, [pc, #44]	@ (8002d08 <ConfigFile_Create+0x3c>)
 8002cdc:	f011 f896 	bl	8013e0c <f_open>

	f_printf(&Config, "Version: ");
 8002ce0:	490a      	ldr	r1, [pc, #40]	@ (8002d0c <ConfigFile_Create+0x40>)
 8002ce2:	4809      	ldr	r0, [pc, #36]	@ (8002d08 <ConfigFile_Create+0x3c>)
 8002ce4:	f012 fab6 	bl	8015254 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002ce8:	4909      	ldr	r1, [pc, #36]	@ (8002d10 <ConfigFile_Create+0x44>)
 8002cea:	4807      	ldr	r0, [pc, #28]	@ (8002d08 <ConfigFile_Create+0x3c>)
 8002cec:	f012 fab2 	bl	8015254 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002cf0:	4908      	ldr	r1, [pc, #32]	@ (8002d14 <ConfigFile_Create+0x48>)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <ConfigFile_Create+0x3c>)
 8002cf4:	f012 faae 	bl	8015254 <f_printf>
	f_close(&Config);
 8002cf8:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <ConfigFile_Create+0x3c>)
 8002cfa:	f011 fdc0 	bl	801487e <f_close>
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	240000b0 	.word	0x240000b0
 8002d08:	240024f8 	.word	0x240024f8
 8002d0c:	080187b0 	.word	0x080187b0
 8002d10:	24000090 	.word	0x24000090
 8002d14:	080187bc 	.word	0x080187bc

08002d18 <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 8002d1e:	463b      	mov	r3, r7
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	711a      	strb	r2, [r3, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002d26:	2213      	movs	r2, #19
 8002d28:	492b      	ldr	r1, [pc, #172]	@ (8002dd8 <SD_ConfigFileInit+0xc0>)
 8002d2a:	482c      	ldr	r0, [pc, #176]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d2c:	f011 f86e 	bl	8013e0c <f_open>

	f_lseek(&Config, Config_FWVersion);
 8002d30:	2109      	movs	r1, #9
 8002d32:	482a      	ldr	r0, [pc, #168]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d34:	f011 fe17 	bl	8014966 <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 8002d38:	4639      	mov	r1, r7
 8002d3a:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <SD_ConfigFileInit+0xc8>)
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	4827      	ldr	r0, [pc, #156]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d40:	f011 fa2c 	bl	801419c <f_read>

	f_close(&Config);
 8002d44:	4825      	ldr	r0, [pc, #148]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d46:	f011 fd9a 	bl	801487e <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	71fb      	strb	r3, [r7, #7]
 8002d4e:	e010      	b.n	8002d72 <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	3308      	adds	r3, #8
 8002d54:	443b      	add	r3, r7
 8002d56:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4921      	ldr	r1, [pc, #132]	@ (8002de4 <SD_ConfigFileInit+0xcc>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d003      	beq.n	8002d6c <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002d64:	f7ff ffb2 	bl	8002ccc <ConfigFile_Create>
			n = 5;
 8002d68:	2305      	movs	r3, #5
 8002d6a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d9eb      	bls.n	8002d50 <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002d78:	2213      	movs	r2, #19
 8002d7a:	4917      	ldr	r1, [pc, #92]	@ (8002dd8 <SD_ConfigFileInit+0xc0>)
 8002d7c:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d7e:	f011 f845 	bl	8013e0c <f_open>

	f_lseek(&Config, 26);
 8002d82:	211a      	movs	r1, #26
 8002d84:	4815      	ldr	r0, [pc, #84]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d86:	f011 fdee 	bl	8014966 <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <SD_ConfigFileInit+0xc8>)
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	4916      	ldr	r1, [pc, #88]	@ (8002de8 <SD_ConfigFileInit+0xd0>)
 8002d90:	4812      	ldr	r0, [pc, #72]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002d92:	f011 fa03 	bl	801419c <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8002d96:	2103      	movs	r1, #3
 8002d98:	4813      	ldr	r0, [pc, #76]	@ (8002de8 <SD_ConfigFileInit+0xd0>)
 8002d9a:	f7ff ff15 	bl	8002bc8 <ASCII2uint8>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	3301      	adds	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <SD_ConfigFileInit+0xcc>)
 8002da6:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <SD_ConfigFileInit+0xcc>)
 8002daa:	795b      	ldrb	r3, [r3, #5]
 8002dac:	490e      	ldr	r1, [pc, #56]	@ (8002de8 <SD_ConfigFileInit+0xd0>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff32 	bl	8002c18 <uint82ASCII>

	f_lseek(&Config, 26);
 8002db4:	211a      	movs	r1, #26
 8002db6:	4809      	ldr	r0, [pc, #36]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002db8:	f011 fdd5 	bl	8014966 <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <SD_ConfigFileInit+0xd4>)
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	4909      	ldr	r1, [pc, #36]	@ (8002de8 <SD_ConfigFileInit+0xd0>)
 8002dc2:	4806      	ldr	r0, [pc, #24]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002dc4:	f011 fb49 	bl	801445a <f_write>

	f_close(&Config);
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <SD_ConfigFileInit+0xc4>)
 8002dca:	f011 fd58 	bl	801487e <f_close>

}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	240000b0 	.word	0x240000b0
 8002ddc:	240024f8 	.word	0x240024f8
 8002de0:	2400352c 	.word	0x2400352c
 8002de4:	24000090 	.word	0x24000090
 8002de8:	240000bc 	.word	0x240000bc
 8002dec:	24003530 	.word	0x24003530

08002df0 <SD_GainsInit>:

void SD_GainsInit(void){
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <SD_CreateFlightPath+0x2c>)
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <SD_CreateFlightPath+0x30>)
 8002e0a:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8002e0c:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <SD_CreateFlightPath+0x2c>)
 8002e0e:	785a      	ldrb	r2, [r3, #1]
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <SD_CreateFlightPath+0x30>)
 8002e12:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SD_CreateFlightPath+0x2c>)
 8002e16:	789a      	ldrb	r2, [r3, #2]
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <SD_CreateFlightPath+0x30>)
 8002e1a:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8002e1c:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <SD_CreateFlightPath+0x30>)
 8002e1e:	f012 f887 	bl	8014f30 <f_mkdir>
	f_chdir(FlightPaht);
 8002e22:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <SD_CreateFlightPath+0x30>)
 8002e24:	f011 fd55 	bl	80148d2 <f_chdir>
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	240000bc 	.word	0x240000bc
 8002e30:	24000098 	.word	0x24000098

08002e34 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002e38:	2213      	movs	r2, #19
 8002e3a:	4903      	ldr	r1, [pc, #12]	@ (8002e48 <SD_blackbox_init+0x14>)
 8002e3c:	4803      	ldr	r0, [pc, #12]	@ (8002e4c <SD_blackbox_init+0x18>)
 8002e3e:	f010 ffe5 	bl	8013e0c <f_open>
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	240000a4 	.word	0x240000a4
 8002e4c:	240014c8 	.word	0x240014c8

08002e50 <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002e54:	4b71      	ldr	r3, [pc, #452]	@ (800301c <SD_blackbox_refresh+0x1cc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a71      	ldr	r2, [pc, #452]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e5a:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8002e5c:	4b71      	ldr	r3, [pc, #452]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a6f      	ldr	r2, [pc, #444]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e62:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8002e64:	4b6f      	ldr	r3, [pc, #444]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a6d      	ldr	r2, [pc, #436]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e6a:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8002e6c:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	4a6b      	ldr	r2, [pc, #428]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e72:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8002e74:	4b6b      	ldr	r3, [pc, #428]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	4a69      	ldr	r2, [pc, #420]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e7a:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8002e7c:	4b69      	ldr	r3, [pc, #420]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	4a67      	ldr	r2, [pc, #412]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e82:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8002e84:	4b67      	ldr	r3, [pc, #412]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e8a:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8002e8c:	4b64      	ldr	r3, [pc, #400]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8002e94:	4b62      	ldr	r3, [pc, #392]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 8002e9c:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002eaa:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 8002eac:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002eb2:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 8002eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003024 <SD_blackbox_refresh+0x1d4>)
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	4a59      	ldr	r2, [pc, #356]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8003028 <SD_blackbox_refresh+0x1d8>)
 8002ebe:	8a1a      	ldrh	r2, [r3, #16]
 8002ec0:	4b57      	ldr	r3, [pc, #348]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 8002ec6:	4b56      	ldr	r3, [pc, #344]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 8002ecc:	4b54      	ldr	r3, [pc, #336]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 8002ed2:	4b53      	ldr	r3, [pc, #332]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 8002eda:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <SD_blackbox_refresh+0x1d8>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a50      	ldr	r2, [pc, #320]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ee0:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ee8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8002eec:	4b4c      	ldr	r3, [pc, #304]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002ef6:	885a      	ldrh	r2, [r3, #2]
 8002ef8:	4b49      	ldr	r3, [pc, #292]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002efa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002efe:	4b4b      	ldr	r3, [pc, #300]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f00:	889a      	ldrh	r2, [r3, #4]
 8002f02:	4b47      	ldr	r3, [pc, #284]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002f08:	4b48      	ldr	r3, [pc, #288]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f0a:	88da      	ldrh	r2, [r3, #6]
 8002f0c:	4b44      	ldr	r3, [pc, #272]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002f12:	4b46      	ldr	r3, [pc, #280]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f14:	891a      	ldrh	r2, [r3, #8]
 8002f16:	4b42      	ldr	r3, [pc, #264]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f18:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002f1c:	4b43      	ldr	r3, [pc, #268]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f1e:	895a      	ldrh	r2, [r3, #10]
 8002f20:	4b3f      	ldr	r3, [pc, #252]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f22:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002f26:	4b41      	ldr	r3, [pc, #260]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f28:	899a      	ldrh	r2, [r3, #12]
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002f30:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f32:	89da      	ldrh	r2, [r3, #14]
 8002f34:	4b3a      	ldr	r3, [pc, #232]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f3c:	8a1a      	ldrh	r2, [r3, #16]
 8002f3e:	4b38      	ldr	r3, [pc, #224]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002f44:	4b39      	ldr	r3, [pc, #228]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f46:	8a5a      	ldrh	r2, [r3, #18]
 8002f48:	4b35      	ldr	r3, [pc, #212]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f4a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002f4e:	4b37      	ldr	r3, [pc, #220]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f50:	8a9a      	ldrh	r2, [r3, #20]
 8002f52:	4b33      	ldr	r3, [pc, #204]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002f58:	4b34      	ldr	r3, [pc, #208]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f5a:	8ada      	ldrh	r2, [r3, #22]
 8002f5c:	4b30      	ldr	r3, [pc, #192]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002f62:	4b32      	ldr	r3, [pc, #200]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f64:	8b1a      	ldrh	r2, [r3, #24]
 8002f66:	4b2e      	ldr	r3, [pc, #184]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f6e:	8b5a      	ldrh	r2, [r3, #26]
 8002f70:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002f76:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f78:	8b9a      	ldrh	r2, [r3, #28]
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f82:	8bda      	ldrh	r2, [r3, #30]
 8002f84:	4b26      	ldr	r3, [pc, #152]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f8c:	8c1a      	ldrh	r2, [r3, #32]
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002f96:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002f9a:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002f9c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002fa0:	4b22      	ldr	r3, [pc, #136]	@ (800302c <SD_blackbox_refresh+0x1dc>)
 8002fa2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fa8:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002fac:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fb8:	885a      	ldrh	r2, [r3, #2]
 8002fba:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fc2:	889a      	ldrh	r2, [r3, #4]
 8002fc4:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fc6:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fcc:	88da      	ldrh	r2, [r3, #6]
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fd0:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002fd4:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fd6:	891a      	ldrh	r2, [r3, #8]
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fda:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002fde:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fe0:	895a      	ldrh	r2, [r3, #10]
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fe4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002fea:	899a      	ldrh	r2, [r3, #12]
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002fee:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002ff4:	89da      	ldrh	r2, [r3, #14]
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8002ff8:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8002ffe:	8a1a      	ldrh	r2, [r3, #16]
 8003000:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 8003002:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <SD_blackbox_refresh+0x1e0>)
 8003008:	8a5a      	ldrh	r2, [r3, #18]
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <SD_blackbox_refresh+0x1d0>)
 800300c:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	24004d80 	.word	0x24004d80
 8003020:	24004524 	.word	0x24004524
 8003024:	2400040c 	.word	0x2400040c
 8003028:	240002cc 	.word	0x240002cc
 800302c:	24000068 	.word	0x24000068
 8003030:	24000054 	.word	0x24000054

08003034 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 800303a:	f7ff ff09 	bl	8002e50 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <SD_blackbox_write+0xa4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a26      	ldr	r2, [pc, #152]	@ (80030dc <SD_blackbox_write+0xa8>)
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <SD_blackbox_write+0xac>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4613      	mov	r3, r2
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	4a24      	ldr	r2, [pc, #144]	@ (80030e4 <SD_blackbox_write+0xb0>)
 8003054:	4413      	add	r3, r2
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	4920      	ldr	r1, [pc, #128]	@ (80030dc <SD_blackbox_write+0xa8>)
 800305a:	4618      	mov	r0, r3
 800305c:	f013 fc25 	bl	80168aa <memcpy>

	if(WriteCount == 15){
 8003060:	4b1f      	ldr	r3, [pc, #124]	@ (80030e0 <SD_blackbox_write+0xac>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d129      	bne.n	80030bc <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8003068:	2300      	movs	r3, #0
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	e00d      	b.n	800308a <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 800306e:	79fa      	ldrb	r2, [r7, #7]
 8003070:	4613      	mov	r3, r2
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	4a1b      	ldr	r2, [pc, #108]	@ (80030e4 <SD_blackbox_write+0xb0>)
 8003078:	1899      	adds	r1, r3, r2
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <SD_blackbox_write+0xb4>)
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	481b      	ldr	r0, [pc, #108]	@ (80030ec <SD_blackbox_write+0xb8>)
 8003080:	f011 f9eb 	bl	801445a <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	3301      	adds	r3, #1
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d9ee      	bls.n	800306e <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8003090:	4816      	ldr	r0, [pc, #88]	@ (80030ec <SD_blackbox_write+0xb8>)
 8003092:	f011 fb76 	bl	8014782 <f_sync>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <SD_blackbox_write+0xbc>)
 800309c:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <SD_blackbox_write+0xac>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <SD_blackbox_write+0xc0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <SD_blackbox_write+0xc0>)
 80030ae:	701a      	strb	r2, [r3, #0]
		++DataCount;
 80030b0:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <SD_blackbox_write+0xa4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <SD_blackbox_write+0xa4>)
 80030b8:	6013      	str	r3, [r2, #0]
		return;
 80030ba:	e00a      	b.n	80030d2 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <SD_blackbox_write+0xac>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <SD_blackbox_write+0xac>)
 80030c6:	801a      	strh	r2, [r3, #0]
	++DataCount;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <SD_blackbox_write+0xa4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4a02      	ldr	r2, [pc, #8]	@ (80030d8 <SD_blackbox_write+0xa4>)
 80030d0:	6013      	str	r3, [r2, #0]
}
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	240045a4 	.word	0x240045a4
 80030dc:	24004524 	.word	0x24004524
 80030e0:	240045a8 	.word	0x240045a8
 80030e4:	24003534 	.word	0x24003534
 80030e8:	24003530 	.word	0x24003530
 80030ec:	240014c8 	.word	0x240014c8
 80030f0:	24003528 	.word	0x24003528
 80030f4:	240045aa 	.word	0x240045aa

080030f8 <SD_init>:


void SD_init(void){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80030fc:	2201      	movs	r2, #1
 80030fe:	4909      	ldr	r1, [pc, #36]	@ (8003124 <SD_init+0x2c>)
 8003100:	4809      	ldr	r0, [pc, #36]	@ (8003128 <SD_init+0x30>)
 8003102:	f010 fe3d 	bl	8013d80 <f_mount>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <SD_init+0x34>)
 800310c:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 800310e:	f7ff fe03 	bl	8002d18 <SD_ConfigFileInit>
	  SD_GainsInit();
 8003112:	f7ff fe6d 	bl	8002df0 <SD_GainsInit>
	  SD_CreateFlightPath();
 8003116:	f7ff fe73 	bl	8002e00 <SD_CreateFlightPath>
	  SD_blackbox_init();
 800311a:	f7ff fe8b 	bl	8002e34 <SD_blackbox_init>
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	080187cc 	.word	0x080187cc
 8003128:	2400048c 	.word	0x2400048c
 800312c:	24003528 	.word	0x24003528

08003130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <MX_DMA_Init+0x5c>)
 8003138:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800313c:	4a13      	ldr	r2, [pc, #76]	@ (800318c <MX_DMA_Init+0x5c>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8003146:	4b11      	ldr	r3, [pc, #68]	@ (800318c <MX_DMA_Init+0x5c>)
 8003148:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2100      	movs	r1, #0
 8003158:	200b      	movs	r0, #11
 800315a:	f002 fbc6 	bl	80058ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800315e:	200b      	movs	r0, #11
 8003160:	f002 fbdd 	bl	800591e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	200c      	movs	r0, #12
 800316a:	f002 fbbe 	bl	80058ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800316e:	200c      	movs	r0, #12
 8003170:	f002 fbd5 	bl	800591e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	2100      	movs	r1, #0
 8003178:	200d      	movs	r0, #13
 800317a:	f002 fbb6 	bl	80058ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800317e:	200d      	movs	r0, #13
 8003180:	f002 fbcd 	bl	800591e <HAL_NVIC_EnableIRQ>

}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400

08003190 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003194:	4b2e      	ldr	r3, [pc, #184]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003196:	4a2f      	ldr	r2, [pc, #188]	@ (8003254 <MX_FDCAN1_Init+0xc4>)
 8003198:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800319a:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80031a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031ba:	2210      	movs	r2, #16
 80031bc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80031ca:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80031d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031d8:	2201      	movs	r2, #1
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031de:	2201      	movs	r2, #1
 80031e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003202:	2204      	movs	r2, #4
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003208:	2200      	movs	r2, #0
 800320a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 800320e:	2204      	movs	r2, #4
 8003210:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003212:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003214:	2200      	movs	r2, #0
 8003216:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 800321a:	2204      	movs	r2, #4
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800321e:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003220:	2200      	movs	r2, #0
 8003222:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003226:	2200      	movs	r2, #0
 8003228:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003230:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003232:	2200      	movs	r2, #0
 8003234:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 8003238:	2204      	movs	r2, #4
 800323a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	@ (8003250 <MX_FDCAN1_Init+0xc0>)
 800323e:	f005 faeb 	bl	8008818 <HAL_FDCAN_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8003248:	f000 ff9c 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	240045ac 	.word	0x240045ac
 8003254:	4000a000 	.word	0x4000a000

08003258 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b0ba      	sub	sp, #232	@ 0xe8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	22c0      	movs	r2, #192	@ 0xc0
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f013 fa7c 	bl	8016776 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2f      	ldr	r2, [pc, #188]	@ (8003340 <HAL_FDCAN_MspInit+0xe8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d157      	bne.n	8003338 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003294:	2304      	movs	r3, #4
 8003296:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003298:	2308      	movs	r3, #8
 800329a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800329c:	2302      	movs	r3, #2
 800329e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80032a0:	2301      	movs	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80032a8:	23c0      	movs	r3, #192	@ 0xc0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80032b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80032b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	4618      	mov	r0, r3
 80032c2:	f007 f903 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80032cc:	f000 ff5a 	bl	8004184 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80032d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 80032d2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80032d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032dc:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80032e0:	4b18      	ldr	r3, [pc, #96]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 80032e2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 80032f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032f4:	4a13      	ldr	r2, [pc, #76]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_FDCAN_MspInit+0xec>)
 8003300:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800330c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003310:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003326:	2309      	movs	r3, #9
 8003328:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003330:	4619      	mov	r1, r3
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <HAL_FDCAN_MspInit+0xf0>)
 8003334:	f005 fdd4 	bl	8008ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003338:	bf00      	nop
 800333a:	37e8      	adds	r7, #232	@ 0xe8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	4000a000 	.word	0x4000a000
 8003344:	58024400 	.word	0x58024400
 8003348:	58020000 	.word	0x58020000

0800334c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003362:	4b4e      	ldr	r3, [pc, #312]	@ (800349c <MX_GPIO_Init+0x150>)
 8003364:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003368:	4a4c      	ldr	r2, [pc, #304]	@ (800349c <MX_GPIO_Init+0x150>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003372:	4b4a      	ldr	r3, [pc, #296]	@ (800349c <MX_GPIO_Init+0x150>)
 8003374:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003380:	4b46      	ldr	r3, [pc, #280]	@ (800349c <MX_GPIO_Init+0x150>)
 8003382:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003386:	4a45      	ldr	r2, [pc, #276]	@ (800349c <MX_GPIO_Init+0x150>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003390:	4b42      	ldr	r3, [pc, #264]	@ (800349c <MX_GPIO_Init+0x150>)
 8003392:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b3f      	ldr	r3, [pc, #252]	@ (800349c <MX_GPIO_Init+0x150>)
 80033a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033a4:	4a3d      	ldr	r2, [pc, #244]	@ (800349c <MX_GPIO_Init+0x150>)
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80033ae:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <MX_GPIO_Init+0x150>)
 80033b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033bc:	4b37      	ldr	r3, [pc, #220]	@ (800349c <MX_GPIO_Init+0x150>)
 80033be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033c2:	4a36      	ldr	r2, [pc, #216]	@ (800349c <MX_GPIO_Init+0x150>)
 80033c4:	f043 0308 	orr.w	r3, r3, #8
 80033c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80033cc:	4b33      	ldr	r3, [pc, #204]	@ (800349c <MX_GPIO_Init+0x150>)
 80033ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80033da:	2200      	movs	r2, #0
 80033dc:	f242 010f 	movw	r1, #8207	@ 0x200f
 80033e0:	482f      	ldr	r0, [pc, #188]	@ (80034a0 <MX_GPIO_Init+0x154>)
 80033e2:	f005 ff2d 	bl	8009240 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2110      	movs	r1, #16
 80033ea:	482e      	ldr	r0, [pc, #184]	@ (80034a4 <MX_GPIO_Init+0x158>)
 80033ec:	f005 ff28 	bl	8009240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80033f0:	2200      	movs	r2, #0
 80033f2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80033f6:	482c      	ldr	r0, [pc, #176]	@ (80034a8 <MX_GPIO_Init+0x15c>)
 80033f8:	f005 ff22 	bl	8009240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2104      	movs	r1, #4
 8003400:	482a      	ldr	r0, [pc, #168]	@ (80034ac <MX_GPIO_Init+0x160>)
 8003402:	f005 ff1d 	bl	8009240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8003406:	f242 030f 	movw	r3, #8207	@ 0x200f
 800340a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340c:	2301      	movs	r3, #1
 800340e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4619      	mov	r1, r3
 800341e:	4820      	ldr	r0, [pc, #128]	@ (80034a0 <MX_GPIO_Init+0x154>)
 8003420:	f005 fd5e 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003424:	2310      	movs	r3, #16
 8003426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003428:	2301      	movs	r3, #1
 800342a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	481a      	ldr	r0, [pc, #104]	@ (80034a4 <MX_GPIO_Init+0x158>)
 800343c:	f005 fd50 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8003440:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	4813      	ldr	r0, [pc, #76]	@ (80034a8 <MX_GPIO_Init+0x15c>)
 800345a:	f005 fd41 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800345e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	480b      	ldr	r0, [pc, #44]	@ (80034a0 <MX_GPIO_Init+0x154>)
 8003474:	f005 fd34 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003478:	2304      	movs	r3, #4
 800347a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347c:	2301      	movs	r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4619      	mov	r1, r3
 800348e:	4807      	ldr	r0, [pc, #28]	@ (80034ac <MX_GPIO_Init+0x160>)
 8003490:	f005 fd26 	bl	8008ee0 <HAL_GPIO_Init>

}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	@ 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58024400 	.word	0x58024400
 80034a0:	58020800 	.word	0x58020800
 80034a4:	58020000 	.word	0x58020000
 80034a8:	58020400 	.word	0x58020400
 80034ac:	58020c00 	.word	0x58020c00

080034b0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003528 <MX_I2C3_Init+0x78>)
 80034b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034bc:	4a1b      	ldr	r2, [pc, #108]	@ (800352c <MX_I2C3_Init+0x7c>)
 80034be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c6:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034cc:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80034d2:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034d8:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034da:	2200      	movs	r2, #0
 80034dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034de:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034ea:	480e      	ldr	r0, [pc, #56]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034ec:	f005 fec2 	bl	8009274 <HAL_I2C_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80034f6:	f000 fe45 	bl	8004184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034fa:	2100      	movs	r1, #0
 80034fc:	4809      	ldr	r0, [pc, #36]	@ (8003524 <MX_I2C3_Init+0x74>)
 80034fe:	f005 ff55 	bl	80093ac <HAL_I2CEx_ConfigAnalogFilter>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003508:	f000 fe3c 	bl	8004184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800350c:	2100      	movs	r1, #0
 800350e:	4805      	ldr	r0, [pc, #20]	@ (8003524 <MX_I2C3_Init+0x74>)
 8003510:	f005 ff97 	bl	8009442 <HAL_I2CEx_ConfigDigitalFilter>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800351a:	f000 fe33 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	2400464c 	.word	0x2400464c
 8003528:	40005c00 	.word	0x40005c00
 800352c:	20b0ccff 	.word	0x20b0ccff

08003530 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0bc      	sub	sp, #240	@ 0xf0
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003548:	f107 0318 	add.w	r3, r7, #24
 800354c:	22c0      	movs	r2, #192	@ 0xc0
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f013 f910 	bl	8016776 <memset>
  if(i2cHandle->Instance==I2C3)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a39      	ldr	r2, [pc, #228]	@ (8003640 <HAL_I2C_MspInit+0x110>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d16b      	bne.n	8003638 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003560:	f04f 0208 	mov.w	r2, #8
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0318 	add.w	r3, r7, #24
 8003576:	4618      	mov	r0, r3
 8003578:	f006 ffa8 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003582:	f000 fdff 	bl	8004184 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 8003588:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800358c:	4a2d      	ldr	r2, [pc, #180]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003596:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 8003598:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 80035a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035aa:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80035b4:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 80035b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ca:	2312      	movs	r3, #18
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035dc:	2304      	movs	r3, #4
 80035de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035e6:	4619      	mov	r1, r3
 80035e8:	4817      	ldr	r0, [pc, #92]	@ (8003648 <HAL_I2C_MspInit+0x118>)
 80035ea:	f005 fc79 	bl	8008ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f6:	2312      	movs	r3, #18
 80035f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003608:	2304      	movs	r3, #4
 800360a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003612:	4619      	mov	r1, r3
 8003614:	480d      	ldr	r0, [pc, #52]	@ (800364c <HAL_I2C_MspInit+0x11c>)
 8003616:	f005 fc63 	bl	8008ee0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 800361c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003620:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 8003622:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003626:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_I2C_MspInit+0x114>)
 800362c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003638:	bf00      	nop
 800363a:	37f0      	adds	r7, #240	@ 0xf0
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40005c00 	.word	0x40005c00
 8003644:	58024400 	.word	0x58024400
 8003648:	58020800 	.word	0x58020800
 800364c:	58020000 	.word	0x58020000

08003650 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b0b2      	sub	sp, #200	@ 0xc8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8003668:	4ba9      	ldr	r3, [pc, #676]	@ (8003910 <NMEA_parser+0x2b0>)
 800366a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800366e:	461d      	mov	r5, r3
 8003670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800367c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003680:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	2280      	movs	r2, #128	@ 0x80
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f013 f86f 	bl	8016776 <memset>
	fields[num++]=message;
 8003698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	33c8      	adds	r3, #200	@ 0xc8
 80036a6:	443b      	add	r3, r7
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80036ae:	e00f      	b.n	80036d0 <NMEA_parser+0x70>
		*message++ = 0;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	33c8      	adds	r3, #200	@ 0xc8
 80036c8:	443b      	add	r3, r7
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80036d0:	212c      	movs	r1, #44	@ 0x2c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f013 f857 	bl	8016786 <strchr>
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e7      	bne.n	80036b0 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	498c      	ldr	r1, [pc, #560]	@ (8003914 <NMEA_parser+0x2b4>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fe03 	bl	80002f0 <strcmp>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11e      	bne.n	800372e <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f012 f8ee 	bl	80158d4 <atof>
 80036f8:	eeb0 7b40 	vmov.f64	d7, d0
 80036fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003700:	4b83      	ldr	r3, [pc, #524]	@ (8003910 <NMEA_parser+0x2b0>)
 8003702:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	4b81      	ldr	r3, [pc, #516]	@ (8003910 <NMEA_parser+0x2b0>)
 800370c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4618      	mov	r0, r3
 8003712:	f012 f8df 	bl	80158d4 <atof>
 8003716:	eeb0 7b40 	vmov.f64	d7, d0
 800371a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800371e:	4b7c      	ldr	r3, [pc, #496]	@ (8003910 <NMEA_parser+0x2b0>)
 8003720:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	4b79      	ldr	r3, [pc, #484]	@ (8003910 <NMEA_parser+0x2b0>)
 800372a:	751a      	strb	r2, [r3, #20]
 800372c:	e10d      	b.n	800394a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4979      	ldr	r1, [pc, #484]	@ (8003918 <NMEA_parser+0x2b8>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fddc 	bl	80002f0 <strcmp>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d130      	bne.n	80037a0 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4618      	mov	r0, r3
 8003742:	f012 f8c7 	bl	80158d4 <atof>
 8003746:	eeb0 7b40 	vmov.f64	d7, d0
 800374a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800374e:	4b70      	ldr	r3, [pc, #448]	@ (8003910 <NMEA_parser+0x2b0>)
 8003750:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	4618      	mov	r0, r3
 8003758:	f012 f8bf 	bl	80158da <atoi>
 800375c:	4603      	mov	r3, r0
 800375e:	4a6c      	ldr	r2, [pc, #432]	@ (8003910 <NMEA_parser+0x2b0>)
 8003760:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4618      	mov	r0, r3
 8003766:	f012 f8b5 	bl	80158d4 <atof>
 800376a:	eeb0 7b40 	vmov.f64	d7, d0
 800376e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003772:	4b67      	ldr	r3, [pc, #412]	@ (8003910 <NMEA_parser+0x2b0>)
 8003774:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	4b64      	ldr	r3, [pc, #400]	@ (8003910 <NMEA_parser+0x2b0>)
 800377e:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	4618      	mov	r0, r3
 8003784:	f012 f8a6 	bl	80158d4 <atof>
 8003788:	eeb0 7b40 	vmov.f64	d7, d0
 800378c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003790:	4b5f      	ldr	r3, [pc, #380]	@ (8003910 <NMEA_parser+0x2b0>)
 8003792:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	4b5d      	ldr	r3, [pc, #372]	@ (8003910 <NMEA_parser+0x2b0>)
 800379c:	751a      	strb	r2, [r3, #20]
 800379e:	e0d4      	b.n	800394a <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	495e      	ldr	r1, [pc, #376]	@ (800391c <NMEA_parser+0x2bc>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fda3 	bl	80002f0 <strcmp>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d116      	bne.n	80037de <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f012 f891 	bl	80158da <atoi>
 80037b8:	ee07 0a90 	vmov	s15, r0
 80037bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c0:	4b53      	ldr	r3, [pc, #332]	@ (8003910 <NMEA_parser+0x2b0>)
 80037c2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	4618      	mov	r0, r3
 80037ca:	f012 f886 	bl	80158da <atoi>
 80037ce:	ee07 0a90 	vmov	s15, r0
 80037d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003910 <NMEA_parser+0x2b0>)
 80037d8:	edc3 7a08 	vstr	s15, [r3, #32]
 80037dc:	e0b5      	b.n	800394a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	494f      	ldr	r1, [pc, #316]	@ (8003920 <NMEA_parser+0x2c0>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fd84 	bl	80002f0 <strcmp>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d15c      	bne.n	80038a8 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f012 f86f 	bl	80158d4 <atof>
 80037f6:	eeb0 7b40 	vmov.f64	d7, d0
 80037fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037fe:	4b44      	ldr	r3, [pc, #272]	@ (8003910 <NMEA_parser+0x2b0>)
 8003800:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	4618      	mov	r0, r3
 8003808:	f012 f864 	bl	80158d4 <atof>
 800380c:	eeb0 7b40 	vmov.f64	d7, d0
 8003810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003814:	4b3e      	ldr	r3, [pc, #248]	@ (8003910 <NMEA_parser+0x2b0>)
 8003816:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <NMEA_parser+0x2b0>)
 8003820:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4618      	mov	r0, r3
 8003826:	f012 f855 	bl	80158d4 <atof>
 800382a:	eeb0 7b40 	vmov.f64	d7, d0
 800382e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <NMEA_parser+0x2b0>)
 8003834:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <NMEA_parser+0x2b0>)
 800383e:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	4618      	mov	r0, r3
 8003844:	f012 f849 	bl	80158da <atoi>
 8003848:	4603      	mov	r3, r0
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <NMEA_parser+0x2b0>)
 800384e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	4618      	mov	r0, r3
 8003856:	f012 f840 	bl	80158da <atoi>
 800385a:	4603      	mov	r3, r0
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b2c      	ldr	r3, [pc, #176]	@ (8003910 <NMEA_parser+0x2b0>)
 8003860:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003866:	4618      	mov	r0, r3
 8003868:	f012 f834 	bl	80158d4 <atof>
 800386c:	eeb0 7b40 	vmov.f64	d7, d0
 8003870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003874:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <NMEA_parser+0x2b0>)
 8003876:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	4618      	mov	r0, r3
 800387e:	f012 f829 	bl	80158d4 <atof>
 8003882:	eeb0 7b40 	vmov.f64	d7, d0
 8003886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800388a:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <NMEA_parser+0x2b0>)
 800388c:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	4618      	mov	r0, r3
 8003894:	f012 f81e 	bl	80158d4 <atof>
 8003898:	eeb0 7b40 	vmov.f64	d7, d0
 800389c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <NMEA_parser+0x2b0>)
 80038a2:	edc3 7a07 	vstr	s15, [r3, #28]
 80038a6:	e050      	b.n	800394a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	491e      	ldr	r1, [pc, #120]	@ (8003924 <NMEA_parser+0x2c4>)
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fd1f 	bl	80002f0 <strcmp>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d137      	bne.n	8003928 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f012 f80d 	bl	80158da <atoi>
 80038c0:	4603      	mov	r3, r0
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <NMEA_parser+0x2b0>)
 80038c6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80038ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038cc:	4618      	mov	r0, r3
 80038ce:	f012 f801 	bl	80158d4 <atof>
 80038d2:	eeb0 7b40 	vmov.f64	d7, d0
 80038d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038da:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <NMEA_parser+0x2b0>)
 80038dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 80038e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e2:	4618      	mov	r0, r3
 80038e4:	f011 fff6 	bl	80158d4 <atof>
 80038e8:	eeb0 7b40 	vmov.f64	d7, d0
 80038ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <NMEA_parser+0x2b0>)
 80038f2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 80038f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f8:	4618      	mov	r0, r3
 80038fa:	f011 ffeb 	bl	80158d4 <atof>
 80038fe:	eeb0 7b40 	vmov.f64	d7, d0
 8003902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003906:	4b02      	ldr	r3, [pc, #8]	@ (8003910 <NMEA_parser+0x2b0>)
 8003908:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 800390c:	e01d      	b.n	800394a <NMEA_parser+0x2ea>
 800390e:	bf00      	nop
 8003910:	24004d48 	.word	0x24004d48
 8003914:	080187d0 	.word	0x080187d0
 8003918:	080187d8 	.word	0x080187d8
 800391c:	080187e0 	.word	0x080187e0
 8003920:	080187e8 	.word	0x080187e8
 8003924:	080187f0 	.word	0x080187f0

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4931      	ldr	r1, [pc, #196]	@ (80039f0 <NMEA_parser+0x390>)
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fcdf 	bl	80002f0 <strcmp>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4618      	mov	r0, r3
 800393c:	f011 ffcd 	bl	80158da <atoi>
 8003940:	4603      	mov	r3, r0
 8003942:	b2da      	uxtb	r2, r3
 8003944:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <NMEA_parser+0x394>)
 8003946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800394a:	4b2a      	ldr	r3, [pc, #168]	@ (80039f4 <NMEA_parser+0x394>)
 800394c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003950:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800395c:	ee17 3a90 	vmov	r3, s15
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfb8      	it	lt
 8003964:	425b      	neglt	r3, r3
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800396e:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <NMEA_parser+0x398>)
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	dd02      	ble.n	8003984 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 800397e:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <NMEA_parser+0x39c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <NMEA_parser+0x394>)
 8003986:	ed93 7a08 	vldr	s14, [r3, #32]
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <NMEA_parser+0x3a0>)
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	dd0c      	ble.n	80039b4 <NMEA_parser+0x354>
 800399a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800399e:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <NMEA_parser+0x3a0>)
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ac:	d802      	bhi.n	80039b4 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 80039ae:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <NMEA_parser+0x3a4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80039b4:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <NMEA_parser+0x394>)
 80039b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <NMEA_parser+0x3a0>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d400      	bmi.n	80039cc <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80039ca:	e00d      	b.n	80039e8 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80039cc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <NMEA_parser+0x3a0>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	da00      	bge.n	80039e2 <NMEA_parser+0x382>
}
 80039e0:	e002      	b.n	80039e8 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 80039e2:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <NMEA_parser+0x3a8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4798      	blx	r3
}
 80039e8:	bf00      	nop
 80039ea:	37c8      	adds	r7, #200	@ 0xc8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	080187f8 	.word	0x080187f8
 80039f4:	24004d48 	.word	0x24004d48
 80039f8:	24004d30 	.word	0x24004d30
 80039fc:	24004d2c 	.word	0x24004d2c
 8003a00:	24004d38 	.word	0x24004d38
 8003a04:	24004d34 	.word	0x24004d34
 8003a08:	24004d3c 	.word	0x24004d3c

08003a0c <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	460a      	mov	r2, r1
 8003a16:	71fb      	strb	r3, [r7, #7]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b39      	cmp	r3, #57	@ 0x39
 8003a20:	d803      	bhi.n	8003a2a <hx2int+0x1e>
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	3b30      	subs	r3, #48	@ 0x30
 8003a26:	71fb      	strb	r3, [r7, #7]
 8003a28:	e002      	b.n	8003a30 <hx2int+0x24>
	else n2=n2-'A'+10;
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	3b37      	subs	r3, #55	@ 0x37
 8003a2e:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8003a30:	79bb      	ldrb	r3, [r7, #6]
 8003a32:	2b39      	cmp	r3, #57	@ 0x39
 8003a34:	d803      	bhi.n	8003a3e <hx2int+0x32>
 8003a36:	79bb      	ldrb	r3, [r7, #6]
 8003a38:	3b30      	subs	r3, #48	@ 0x30
 8003a3a:	71bb      	strb	r3, [r7, #6]
 8003a3c:	e002      	b.n	8003a44 <hx2int+0x38>
	else n1=n1-'A'+10;
 8003a3e:	79bb      	ldrb	r3, [r7, #6]
 8003a40:	3b37      	subs	r3, #55	@ 0x37
 8003a42:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	79bb      	ldrb	r3, [r7, #6]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3

}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003a6c:	e009      	b.n	8003a82 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	73fa      	strb	r2, [r7, #15]
 8003a74:	461a      	mov	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	4053      	eors	r3, r2
 8003a80:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8c:	d002      	beq.n	8003a94 <NMEA_checksum_clc+0x38>
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a92:	d9ec      	bls.n	8003a6e <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	7818      	ldrb	r0, [r3, #0]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7ff ffaf 	bl	8003a0c <hx2int>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8003ab2:	7b7a      	ldrb	r2, [r7, #13]
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8003aba:	2302      	movs	r3, #2
 8003abc:	e000      	b.n	8003ac0 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8003abe:	2300      	movs	r3, #0


}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
	int index = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8003ad2:	e005      	b.n	8003ae0 <NMEA_read_line+0x18>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <NMEA_read_line+0xc0>)
 8003adc:	2100      	movs	r1, #0
 8003ade:	54d1      	strb	r1, [r2, r3]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ae4:	ddf6      	ble.n	8003ad4 <NMEA_read_line+0xc>

	index = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003aea:	e01c      	b.n	8003b26 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003aec:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <NMEA_read_line+0xc8>)
 8003af2:	5cd1      	ldrb	r1, [r2, r3]
 8003af4:	4a24      	ldr	r2, [pc, #144]	@ (8003b88 <NMEA_read_line+0xc0>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	460a      	mov	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003afe:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a23      	ldr	r2, [pc, #140]	@ (8003b90 <NMEA_read_line+0xc8>)
 8003b04:	2100      	movs	r1, #0
 8003b06:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	425a      	negs	r2, r3
 8003b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b18:	bf58      	it	pl
 8003b1a:	4253      	negpl	r3, r2
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b1e:	6013      	str	r3, [r2, #0]
		++index;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3301      	adds	r3, #1
 8003b24:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003b26:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <NMEA_read_line+0xc8>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	2b0a      	cmp	r3, #10
 8003b30:	d002      	beq.n	8003b38 <NMEA_read_line+0x70>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b7d      	cmp	r3, #125	@ 0x7d
 8003b36:	ddd9      	ble.n	8003aec <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a14      	ldr	r2, [pc, #80]	@ (8003b90 <NMEA_read_line+0xc8>)
 8003b3e:	5cd1      	ldrb	r1, [r2, r3]
 8003b40:	4a11      	ldr	r2, [pc, #68]	@ (8003b88 <NMEA_read_line+0xc0>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	460a      	mov	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a10      	ldr	r2, [pc, #64]	@ (8003b90 <NMEA_read_line+0xc8>)
 8003b50:	2100      	movs	r1, #0
 8003b52:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003b54:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	425a      	negs	r2, r3
 8003b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b64:	bf58      	it	pl
 8003b66:	4253      	negpl	r3, r2
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <NMEA_read_line+0xc4>)
 8003b6a:	6013      	str	r3, [r2, #0]
	++index;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <NMEA_read_line+0xcc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4a06      	ldr	r2, [pc, #24]	@ (8003b94 <NMEA_read_line+0xcc>)
 8003b7a:	6013      	str	r3, [r2, #0]

}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	24004ca0 	.word	0x24004ca0
 8003b8c:	24004d24 	.word	0x24004d24
 8003b90:	240048a0 	.word	0x240048a0
 8003b94:	24004d28 	.word	0x24004d28

08003b98 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8003ba2:	200a      	movs	r0, #10
 8003ba4:	f001 fda2 	bl	80056ec <HAL_Delay>
	NMEA_huart=huart;
 8003ba8:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <NMEA_init+0x5c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8003bae:	4a12      	ldr	r2, [pc, #72]	@ (8003bf8 <NMEA_init+0x60>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <NMEA_init+0x5c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <NMEA_init+0x5c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0210 	orr.w	r2, r2, #16
 8003bc6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <NMEA_init+0x5c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd0:	490a      	ldr	r1, [pc, #40]	@ (8003bfc <NMEA_init+0x64>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00a fda6 	bl	800e724 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <NMEA_init+0x68>)
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <NMEA_init+0x6c>)
 8003bdc:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <NMEA_init+0x70>)
 8003be0:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <NMEA_init+0x6c>)
 8003be2:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8003be4:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <NMEA_init+0x74>)
 8003be6:	4a07      	ldr	r2, [pc, #28]	@ (8003c04 <NMEA_init+0x6c>)
 8003be8:	601a      	str	r2, [r3, #0]
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	24004d40 	.word	0x24004d40
 8003bf8:	24004d44 	.word	0x24004d44
 8003bfc:	240046a0 	.word	0x240046a0
 8003c00:	24004d2c 	.word	0x24004d2c
 8003c04:	08003651 	.word	0x08003651
 8003c08:	24004d34 	.word	0x24004d34
 8003c0c:	24004d3c 	.word	0x24004d3c

08003c10 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	425a      	negs	r2, r3
 8003c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c2a:	bf58      	it	pl
 8003c2c:	4253      	negpl	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8003c34:	4b27      	ldr	r3, [pc, #156]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d130      	bne.n	8003ca0 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003c3e:	e010      	b.n	8003c62 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8003c40:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a24      	ldr	r2, [pc, #144]	@ (8003cd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003c46:	2100      	movs	r1, #0
 8003c48:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	425a      	negs	r2, r3
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c5a:	bf58      	it	pl
 8003c5c:	4253      	negpl	r3, r2
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c60:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003c62:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	d005      	beq.n	8003c7a <NMEA_UART_DMA_get_char+0x6a>
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a19      	ldr	r2, [pc, #100]	@ (8003cd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e2      	bne.n	8003c40 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003c80:	2100      	movs	r1, #0
 8003c82:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003c84:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	425a      	negs	r2, r3
 8003c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c94:	bf58      	it	pl
 8003c96:	4253      	negpl	r3, r2
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003c9a:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	490c      	ldr	r1, [pc, #48]	@ (8003cd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003ca6:	79fa      	ldrb	r2, [r7, #7]
 8003ca8:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d104      	bne.n	8003cc0 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <NMEA_UART_DMA_get_char+0xcc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <NMEA_UART_DMA_get_char+0xcc>)
 8003cbe:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	24004d20 	.word	0x24004d20
 8003cd4:	24004d24 	.word	0x24004d24
 8003cd8:	240048a0 	.word	0x240048a0
 8003cdc:	24004d28 	.word	0x24004d28

08003ce0 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8003cea:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003e1c <NMEA_UART_DMA_copy_buffer+0x13c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d059      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003cf6:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a48      	ldr	r2, [pc, #288]	@ (8003e20 <NMEA_UART_DMA_copy_buffer+0x140>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d053      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d02:	4b45      	ldr	r3, [pc, #276]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a46      	ldr	r2, [pc, #280]	@ (8003e24 <NMEA_UART_DMA_copy_buffer+0x144>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d04d      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d0e:	4b42      	ldr	r3, [pc, #264]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a44      	ldr	r2, [pc, #272]	@ (8003e28 <NMEA_UART_DMA_copy_buffer+0x148>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d047      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a42      	ldr	r2, [pc, #264]	@ (8003e2c <NMEA_UART_DMA_copy_buffer+0x14c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d041      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d26:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a40      	ldr	r2, [pc, #256]	@ (8003e30 <NMEA_UART_DMA_copy_buffer+0x150>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3e      	ldr	r2, [pc, #248]	@ (8003e34 <NMEA_UART_DMA_copy_buffer+0x154>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d035      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d3e:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <NMEA_UART_DMA_copy_buffer+0x158>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02f      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a3a      	ldr	r2, [pc, #232]	@ (8003e3c <NMEA_UART_DMA_copy_buffer+0x15c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d029      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d56:	4b30      	ldr	r3, [pc, #192]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a38      	ldr	r2, [pc, #224]	@ (8003e40 <NMEA_UART_DMA_copy_buffer+0x160>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d023      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d62:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a36      	ldr	r2, [pc, #216]	@ (8003e44 <NMEA_UART_DMA_copy_buffer+0x164>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <NMEA_UART_DMA_copy_buffer+0x168>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d017      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d7a:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a32      	ldr	r2, [pc, #200]	@ (8003e4c <NMEA_UART_DMA_copy_buffer+0x16c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d011      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d86:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a30      	ldr	r2, [pc, #192]	@ (8003e50 <NMEA_UART_DMA_copy_buffer+0x170>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d92:	4b21      	ldr	r3, [pc, #132]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2e      	ldr	r2, [pc, #184]	@ (8003e54 <NMEA_UART_DMA_copy_buffer+0x174>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d005      	beq.n	8003daa <NMEA_UART_DMA_copy_buffer+0xca>
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <NMEA_UART_DMA_copy_buffer+0x178>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d106      	bne.n	8003db8 <NMEA_UART_DMA_copy_buffer+0xd8>
 8003daa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003db6:	e005      	b.n	8003dc4 <NMEA_UART_DMA_copy_buffer+0xe4>
 8003db8:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003dc4:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	e013      	b.n	8003df4 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8003dcc:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff1b 	bl	8003c10 <NMEA_UART_DMA_get_char>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8003de4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4413      	add	r3, r2
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dbe7      	blt.n	8003dcc <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <NMEA_UART_DMA_copy_buffer+0x180>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e04:	4915      	ldr	r1, [pc, #84]	@ (8003e5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	f00a fc8c 	bl	800e724 <HAL_UART_Receive_DMA>
	return stat;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	24004d44 	.word	0x24004d44
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	240046a0 	.word	0x240046a0
 8003e60:	24004d40 	.word	0x24004d40

08003e64 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003e6e:	e00d      	b.n	8003e8c <NMEA_process_task+0x28>
		NMEA_read_line();
 8003e70:	f7ff fe2a 	bl	8003ac8 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8003e74:	480a      	ldr	r0, [pc, #40]	@ (8003ea0 <NMEA_process_task+0x3c>)
 8003e76:	f7ff fdf1 	bl	8003a5c <NMEA_checksum_clc>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8003e80:	4807      	ldr	r0, [pc, #28]	@ (8003ea0 <NMEA_process_task+0x3c>)
 8003e82:	f7ff fbed 	bl	8003660 <NMEA_parser>
 8003e86:	e001      	b.n	8003e8c <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <NMEA_process_task+0x40>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dced      	bgt.n	8003e70 <NMEA_process_task+0xc>
	}
	return stat;
 8003e94:	79fb      	ldrb	r3, [r7, #7]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	24004ca0 	.word	0x24004ca0
 8003ea4:	24004d28 	.word	0x24004d28

08003ea8 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <user_UART_IDLE_IT_handler+0x40>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d10d      	bne.n	8003ede <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <user_UART_IDLE_IT_handler+0x40>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <user_UART_IDLE_IT_handler+0x40>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f00a fc73 	bl	800e7bc <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003ed6:	f7ff ff03 	bl	8003ce0 <NMEA_UART_DMA_copy_buffer>
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8003ede:	79fb      	ldrb	r3, [r7, #7]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	24004d40 	.word	0x24004d40

08003eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003ef0:	f000 f91c 	bl	800412c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ef4:	f001 fb68 	bl	80055c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ef8:	f000 f844 	bl	8003f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003efc:	f7ff fa26 	bl	800334c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f00:	f7ff f916 	bl	8003130 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003f04:	f7ff f944 	bl	8003190 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003f08:	f7ff fad2 	bl	80034b0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003f0c:	f000 f940 	bl	8004190 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003f10:	f000 f994 	bl	800423c <MX_SPI2_Init>
  MX_TIM2_Init();
 8003f14:	f000 fc92 	bl	800483c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003f18:	f000 fd0c 	bl	8004934 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003f1c:	f000 fd70 	bl	8004a00 <MX_TIM4_Init>
  MX_UART4_Init();
 8003f20:	f000 ffd4 	bl	8004ecc <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003f24:	f001 f81e 	bl	8004f64 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003f28:	f001 f8b8 	bl	800509c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003f2c:	f000 fe54 	bl	8004bd8 <MX_TIM13_Init>
  MX_FATFS_Init();
 8003f30:	f00c fe54 	bl	8010bdc <MX_FATFS_Init>
  MX_TIM6_Init();
 8003f34:	f000 fde0 	bl	8004af8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8003f38:	f001 f864 	bl	8005004 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8003f3c:	f000 fe14 	bl	8004b68 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003f40:	f7fd fae2 	bl	8001508 <BMP280_init>
  SD_init();
 8003f44:	f7ff f8d8 	bl	80030f8 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <main+0x80>)
 8003f4c:	4808      	ldr	r0, [pc, #32]	@ (8003f70 <main+0x84>)
 8003f4e:	f00a fbe9 	bl	800e724 <HAL_UART_Receive_DMA>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8003f52:	4908      	ldr	r1, [pc, #32]	@ (8003f74 <main+0x88>)
 8003f54:	4808      	ldr	r0, [pc, #32]	@ (8003f78 <main+0x8c>)
 8003f56:	f7ff fe1f 	bl	8003b98 <NMEA_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8003f5a:	4808      	ldr	r0, [pc, #32]	@ (8003f7c <main+0x90>)
 8003f5c:	f009 fa94 	bl	800d488 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003f60:	4807      	ldr	r0, [pc, #28]	@ (8003f80 <main+0x94>)
 8003f62:	f009 fa91 	bl	800d488 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NMEA_process_task();
 8003f66:	f7ff ff7d 	bl	8003e64 <NMEA_process_task>
 8003f6a:	e7fc      	b.n	8003f66 <main+0x7a>
 8003f6c:	24000403 	.word	0x24000403
 8003f70:	24005188 	.word	0x24005188
 8003f74:	240052b0 	.word	0x240052b0
 8003f78:	24005060 	.word	0x24005060
 8003f7c:	24004f7c 	.word	0x24004f7c
 8003f80:	24004fc8 	.word	0x24004fc8

08003f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b09c      	sub	sp, #112	@ 0x70
 8003f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8e:	224c      	movs	r2, #76	@ 0x4c
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f012 fbef 	bl	8016776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f012 fbe9 	bl	8016776 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8003fa4:	4b30      	ldr	r3, [pc, #192]	@ (8004068 <SystemClock_Config+0xe4>)
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f005 fa94 	bl	80094dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800406c <SystemClock_Config+0xe8>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <SystemClock_Config+0xe8>)
 8003fbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b29      	ldr	r3, [pc, #164]	@ (800406c <SystemClock_Config+0xe8>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003fd0:	bf00      	nop
 8003fd2:	4b26      	ldr	r3, [pc, #152]	@ (800406c <SystemClock_Config+0xe8>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fde:	d1f8      	bne.n	8003fd2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003fe8:	2340      	movs	r3, #64	@ 0x40
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fec:	2302      	movs	r3, #2
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003ff8:	2323      	movs	r3, #35	@ 0x23
 8003ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004000:	2302      	movs	r3, #2
 8004002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004004:	2302      	movs	r3, #2
 8004006:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004008:	230c      	movs	r3, #12
 800400a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800400c:	2300      	movs	r3, #0
 800400e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004018:	4618      	mov	r0, r3
 800401a:	f005 fa99 	bl	8009550 <HAL_RCC_OscConfig>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004024:	f000 f8ae 	bl	8004184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004028:	233f      	movs	r3, #63	@ 0x3f
 800402a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800402c:	2303      	movs	r3, #3
 800402e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004038:	2340      	movs	r3, #64	@ 0x40
 800403a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800403c:	2340      	movs	r3, #64	@ 0x40
 800403e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004044:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004046:	2340      	movs	r3, #64	@ 0x40
 8004048:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2106      	movs	r1, #6
 800404e:	4618      	mov	r0, r3
 8004050:	f005 feb0 	bl	8009db4 <HAL_RCC_ClockConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800405a:	f000 f893 	bl	8004184 <Error_Handler>
  }
}
 800405e:	bf00      	nop
 8004060:	3770      	adds	r7, #112	@ 0x70
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	58024800 	.word	0x58024800

08004070 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <HAL_UART_RxCpltCallback+0x50>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10a      	bne.n	8004098 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <HAL_UART_RxCpltCallback+0x54>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe f992 	bl	80023b0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800408c:	2201      	movs	r2, #1
 800408e:	490d      	ldr	r1, [pc, #52]	@ (80040c4 <HAL_UART_RxCpltCallback+0x54>)
 8004090:	480d      	ldr	r0, [pc, #52]	@ (80040c8 <HAL_UART_RxCpltCallback+0x58>)
 8004092:	f00a fb47 	bl	800e724 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == UART4){


    }
}
 8004096:	e00e      	b.n	80040b6 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0b      	ldr	r2, [pc, #44]	@ (80040cc <HAL_UART_RxCpltCallback+0x5c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d109      	bne.n	80040b6 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 80040a2:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_UART_RxCpltCallback+0x60>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd ff7c 	bl	8001fa4 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80040ac:	2201      	movs	r2, #1
 80040ae:	4908      	ldr	r1, [pc, #32]	@ (80040d0 <HAL_UART_RxCpltCallback+0x60>)
 80040b0:	4808      	ldr	r0, [pc, #32]	@ (80040d4 <HAL_UART_RxCpltCallback+0x64>)
 80040b2:	f00a fb37 	bl	800e724 <HAL_UART_Receive_DMA>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40011000 	.word	0x40011000
 80040c4:	24000489 	.word	0x24000489
 80040c8:	240050f4 	.word	0x240050f4
 80040cc:	40004800 	.word	0x40004800
 80040d0:	24000403 	.word	0x24000403
 80040d4:	24005188 	.word	0x24005188

080040d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004120 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80040f2:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 80040f4:	f7fe f8aa 	bl	800224c <LED_Tasks>
		SBUS_IntegrityVerification();
 80040f8:	f7fe fd42 	bl	8002b80 <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d107      	bne.n	8004116 <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 8004106:	f7fd ffdd 	bl	80020c4 <BNO_Tasks>
		BMP280_calculate();
 800410a:	f7fd fa23 	bl	8001554 <BMP280_calculate>

		PWM_Assing();
 800410e:	f7fe f8eb 	bl	80022e8 <PWM_Assing>
		SD_blackbox_write();
 8004112:	f7fe ff8f 	bl	8003034 <SD_blackbox_write>
	}
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40001000 	.word	0x40001000
 8004124:	24004d80 	.word	0x24004d80
 8004128:	40001400 	.word	0x40001400

0800412c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004132:	463b      	mov	r3, r7
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800413e:	f001 fc09 	bl	8005954 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004142:	2301      	movs	r3, #1
 8004144:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004146:	2300      	movs	r3, #0
 8004148:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800414e:	231f      	movs	r3, #31
 8004150:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004152:	2387      	movs	r3, #135	@ 0x87
 8004154:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004156:	2300      	movs	r3, #0
 8004158:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800415a:	2300      	movs	r3, #0
 800415c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800415e:	2301      	movs	r3, #1
 8004160:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004162:	2301      	movs	r3, #1
 8004164:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800416e:	463b      	mov	r3, r7
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fc27 	bl	80059c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004176:	2004      	movs	r0, #4
 8004178:	f001 fc04 	bl	8005984 <HAL_MPU_Enable>

}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004188:	b672      	cpsid	i
}
 800418a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <Error_Handler+0x8>

08004190 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004194:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <MX_SPI1_Init+0xa4>)
 8004196:	4a28      	ldr	r2, [pc, #160]	@ (8004238 <MX_SPI1_Init+0xa8>)
 8004198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800419a:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <MX_SPI1_Init+0xa4>)
 800419c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80041a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041a8:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041aa:	2207      	movs	r2, #7
 80041ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ae:	4b21      	ldr	r3, [pc, #132]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80041c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041c4:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80041c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041d0:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d6:	4b17      	ldr	r3, [pc, #92]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041de:	2200      	movs	r2, #0
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80041ea:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <MX_SPI1_Init+0xa4>)
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <MX_SPI1_Init+0xa4>)
 8004204:	2200      	movs	r2, #0
 8004206:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004208:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <MX_SPI1_Init+0xa4>)
 800420a:	2200      	movs	r2, #0
 800420c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <MX_SPI1_Init+0xa4>)
 8004210:	2200      	movs	r2, #0
 8004212:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <MX_SPI1_Init+0xa4>)
 8004216:	2200      	movs	r2, #0
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <MX_SPI1_Init+0xa4>)
 800421c:	2200      	movs	r2, #0
 800421e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004220:	4804      	ldr	r0, [pc, #16]	@ (8004234 <MX_SPI1_Init+0xa4>)
 8004222:	f007 ff33 	bl	800c08c <HAL_SPI_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800422c:	f7ff ffaa 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}
 8004234:	24004d84 	.word	0x24004d84
 8004238:	40013000 	.word	0x40013000

0800423c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004242:	4a28      	ldr	r2, [pc, #160]	@ (80042e4 <MX_SPI2_Init+0xa8>)
 8004244:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004246:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004248:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800424c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004254:	4b22      	ldr	r3, [pc, #136]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004256:	2207      	movs	r2, #7
 8004258:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800425a:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004262:	2200      	movs	r2, #0
 8004264:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004268:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800426c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800426e:	4b1c      	ldr	r3, [pc, #112]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004270:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8004274:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004276:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004278:	2200      	movs	r2, #0
 800427a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800427c:	4b18      	ldr	r3, [pc, #96]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 800427e:	2200      	movs	r2, #0
 8004280:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004282:	4b17      	ldr	r3, [pc, #92]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004284:	2200      	movs	r2, #0
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 800428a:	2200      	movs	r2, #0
 800428c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800428e:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 8004298:	2200      	movs	r2, #0
 800429a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800429c:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042a8:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042ae:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042bc:	2200      	movs	r2, #0
 80042be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80042cc:	4804      	ldr	r0, [pc, #16]	@ (80042e0 <MX_SPI2_Init+0xa4>)
 80042ce:	f007 fedd 	bl	800c08c <HAL_SPI_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80042d8:	f7ff ff54 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	24004e0c 	.word	0x24004e0c
 80042e4:	40003800 	.word	0x40003800

080042e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0bc      	sub	sp, #240	@ 0xf0
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004300:	f107 0318 	add.w	r3, r7, #24
 8004304:	22c0      	movs	r2, #192	@ 0xc0
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f012 fa34 	bl	8016776 <memset>
  if(spiHandle->Instance==SPI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4c      	ldr	r2, [pc, #304]	@ (8004444 <HAL_SPI_MspInit+0x15c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d145      	bne.n	80043a4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004318:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004324:	2300      	movs	r3, #0
 8004326:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004328:	f107 0318 	add.w	r3, r7, #24
 800432c:	4618      	mov	r0, r3
 800432e:	f006 f8cd 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004338:	f7ff ff24 	bl	8004184 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800433c:	4b42      	ldr	r3, [pc, #264]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 800433e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004342:	4a41      	ldr	r2, [pc, #260]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 8004344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004348:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800434c:	4b3e      	ldr	r3, [pc, #248]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 800434e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 800435c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004360:	4a39      	ldr	r2, [pc, #228]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800436a:	4b37      	ldr	r3, [pc, #220]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 800436c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004378:	23e0      	movs	r3, #224	@ 0xe0
 800437a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437e:	2302      	movs	r3, #2
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004390:	2305      	movs	r3, #5
 8004392:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004396:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800439a:	4619      	mov	r1, r3
 800439c:	482b      	ldr	r0, [pc, #172]	@ (800444c <HAL_SPI_MspInit+0x164>)
 800439e:	f004 fd9f 	bl	8008ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80043a2:	e04a      	b.n	800443a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a29      	ldr	r2, [pc, #164]	@ (8004450 <HAL_SPI_MspInit+0x168>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d145      	bne.n	800443a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80043ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043be:	f107 0318 	add.w	r3, r7, #24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f006 f882 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80043ce:	f7ff fed9 	bl	8004184 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 80043d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 80043da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043de:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80043e2:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 80043e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f0:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 80043f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043f6:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_SPI_MspInit+0x160>)
 8004402:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800440e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004422:	2300      	movs	r3, #0
 8004424:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004428:	2305      	movs	r3, #5
 800442a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004432:	4619      	mov	r1, r3
 8004434:	4807      	ldr	r0, [pc, #28]	@ (8004454 <HAL_SPI_MspInit+0x16c>)
 8004436:	f004 fd53 	bl	8008ee0 <HAL_GPIO_Init>
}
 800443a:	bf00      	nop
 800443c:	37f0      	adds	r7, #240	@ 0xf0
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40013000 	.word	0x40013000
 8004448:	58024400 	.word	0x58024400
 800444c:	58020000 	.word	0x58020000
 8004450:	40003800 	.word	0x40003800
 8004454:	58020400 	.word	0x58020400

08004458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_MspInit+0x30>)
 8004460:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004464:	4a08      	ldr	r2, [pc, #32]	@ (8004488 <HAL_MspInit+0x30>)
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_MspInit+0x30>)
 8004470:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	58024400 	.word	0x58024400

0800448c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <NMI_Handler+0x4>

08004494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <HardFault_Handler+0x4>

0800449c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <MemManage_Handler+0x4>

080044a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <BusFault_Handler+0x4>

080044ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <UsageFault_Handler+0x4>

080044b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <SysTick_Handler+0x34>)
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <SysTick_Handler+0x18>
	    Timer1--;
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <SysTick_Handler+0x34>)
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <SysTick_Handler+0x34>)
 80044f6:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80044f8:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <SysTick_Handler+0x38>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <SysTick_Handler+0x2c>
	    Timer2--;
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <SysTick_Handler+0x38>)
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <SysTick_Handler+0x38>)
 800450a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800450c:	f001 f8ce 	bl	80056ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	24005424 	.word	0x24005424
 8004518:	24005426 	.word	0x24005426

0800451c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <DMA1_Stream0_IRQHandler+0x10>)
 8004522:	f002 fdeb 	bl	80070fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	24005328 	.word	0x24005328

08004530 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004534:	4802      	ldr	r0, [pc, #8]	@ (8004540 <DMA1_Stream1_IRQHandler+0x10>)
 8004536:	f002 fde1 	bl	80070fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	240053a0 	.word	0x240053a0

08004544 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004548:	4802      	ldr	r0, [pc, #8]	@ (8004554 <DMA1_Stream2_IRQHandler+0x10>)
 800454a:	f002 fdd7 	bl	80070fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	240052b0 	.word	0x240052b0

08004558 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800455c:	4802      	ldr	r0, [pc, #8]	@ (8004568 <USART1_IRQHandler+0x10>)
 800455e:	f00a faff 	bl	800eb60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	240050f4 	.word	0x240050f4

0800456c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004570:	4802      	ldr	r0, [pc, #8]	@ (800457c <USART3_IRQHandler+0x10>)
 8004572:	f00a faf5 	bl	800eb60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	24005188 	.word	0x24005188

08004580 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8004584:	f7ff fc90 	bl	8003ea8 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004588:	4802      	ldr	r0, [pc, #8]	@ (8004594 <UART4_IRQHandler+0x14>)
 800458a:	f00a fae9 	bl	800eb60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	24005060 	.word	0x24005060

08004598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800459c:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <TIM6_DAC_IRQHandler+0x10>)
 800459e:	f009 f951 	bl	800d844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	24004f7c 	.word	0x24004f7c

080045ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80045b0:	4802      	ldr	r0, [pc, #8]	@ (80045bc <TIM7_IRQHandler+0x10>)
 80045b2:	f009 f947 	bl	800d844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	24004fc8 	.word	0x24004fc8

080045c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return 1;
 80045c4:	2301      	movs	r3, #1
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_kill>:

int _kill(int pid, int sig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045da:	f012 f939 	bl	8016850 <__errno>
 80045de:	4603      	mov	r3, r0
 80045e0:	2216      	movs	r2, #22
 80045e2:	601a      	str	r2, [r3, #0]
  return -1;
 80045e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_exit>:

void _exit (int status)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffe7 	bl	80045d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <_exit+0x12>

08004606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e00a      	b.n	800462e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004618:	f3af 8000 	nop.w
 800461c:	4601      	mov	r1, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	60ba      	str	r2, [r7, #8]
 8004624:	b2ca      	uxtb	r2, r1
 8004626:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	dbf0      	blt.n	8004618 <_read+0x12>
  }

  return len;
 8004636:	687b      	ldr	r3, [r7, #4]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e009      	b.n	8004666 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	60ba      	str	r2, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3301      	adds	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	dbf1      	blt.n	8004652 <_write+0x12>
  }
  return len;
 800466e:	687b      	ldr	r3, [r7, #4]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_close>:

int _close(int file)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046a0:	605a      	str	r2, [r3, #4]
  return 0;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <_isatty>:

int _isatty(int file)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046b8:	2301      	movs	r3, #1
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046e8:	4a14      	ldr	r2, [pc, #80]	@ (800473c <_sbrk+0x5c>)
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <_sbrk+0x60>)
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <_sbrk+0x64>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <_sbrk+0x64>)
 80046fe:	4a12      	ldr	r2, [pc, #72]	@ (8004748 <_sbrk+0x68>)
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <_sbrk+0x64>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d207      	bcs.n	8004720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004710:	f012 f89e 	bl	8016850 <__errno>
 8004714:	4603      	mov	r3, r0
 8004716:	220c      	movs	r2, #12
 8004718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	e009      	b.n	8004734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004720:	4b08      	ldr	r3, [pc, #32]	@ (8004744 <_sbrk+0x64>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004726:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <_sbrk+0x64>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	4a05      	ldr	r2, [pc, #20]	@ (8004744 <_sbrk+0x64>)
 8004730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004732:	68fb      	ldr	r3, [r7, #12]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	24100000 	.word	0x24100000
 8004740:	00000400 	.word	0x00000400
 8004744:	24004e94 	.word	0x24004e94
 8004748:	240057b0 	.word	0x240057b0

0800474c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004750:	4b32      	ldr	r3, [pc, #200]	@ (800481c <SystemInit+0xd0>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	4a31      	ldr	r2, [pc, #196]	@ (800481c <SystemInit+0xd0>)
 8004758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800475c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004760:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <SystemInit+0xd4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2b02      	cmp	r3, #2
 800476a:	d807      	bhi.n	800477c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800476c:	4b2c      	ldr	r3, [pc, #176]	@ (8004820 <SystemInit+0xd4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	4a2a      	ldr	r2, [pc, #168]	@ (8004820 <SystemInit+0xd4>)
 8004776:	f043 0303 	orr.w	r3, r3, #3
 800477a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800477c:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <SystemInit+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a28      	ldr	r2, [pc, #160]	@ (8004824 <SystemInit+0xd8>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004788:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <SystemInit+0xd8>)
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800478e:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <SystemInit+0xd8>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4924      	ldr	r1, [pc, #144]	@ (8004824 <SystemInit+0xd8>)
 8004794:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <SystemInit+0xdc>)
 8004796:	4013      	ands	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800479a:	4b21      	ldr	r3, [pc, #132]	@ (8004820 <SystemInit+0xd4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <SystemInit+0xd4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <SystemInit+0xd4>)
 80047b0:	f043 0303 	orr.w	r3, r3, #3
 80047b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80047b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <SystemInit+0xd8>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80047bc:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <SystemInit+0xd8>)
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <SystemInit+0xd8>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80047c8:	4b16      	ldr	r3, [pc, #88]	@ (8004824 <SystemInit+0xd8>)
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <SystemInit+0xe0>)
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80047ce:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <SystemInit+0xd8>)
 80047d0:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <SystemInit+0xe4>)
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80047d4:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <SystemInit+0xd8>)
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <SystemInit+0xe8>)
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80047da:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <SystemInit+0xd8>)
 80047dc:	2200      	movs	r2, #0
 80047de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80047e0:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <SystemInit+0xd8>)
 80047e2:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <SystemInit+0xe8>)
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <SystemInit+0xd8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <SystemInit+0xd8>)
 80047ee:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <SystemInit+0xe8>)
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80047f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <SystemInit+0xd8>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <SystemInit+0xd8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <SystemInit+0xd8>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004802:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004804:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <SystemInit+0xd8>)
 8004806:	2200      	movs	r2, #0
 8004808:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800480a:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <SystemInit+0xec>)
 800480c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004810:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004812:	bf00      	nop
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000ed00 	.word	0xe000ed00
 8004820:	52002000 	.word	0x52002000
 8004824:	58024400 	.word	0x58024400
 8004828:	eaf6ed7f 	.word	0xeaf6ed7f
 800482c:	02020200 	.word	0x02020200
 8004830:	01ff0000 	.word	0x01ff0000
 8004834:	01010280 	.word	0x01010280
 8004838:	52004000 	.word	0x52004000

0800483c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004842:	f107 031c 	add.w	r3, r7, #28
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800484e:	463b      	mov	r3, r7
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
 800485c:	615a      	str	r2, [r3, #20]
 800485e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004860:	4b33      	ldr	r3, [pc, #204]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8004868:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <MX_TIM2_Init+0xf4>)
 800486a:	f240 1217 	movw	r2, #279	@ 0x117
 800486e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004870:	4b2f      	ldr	r3, [pc, #188]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004876:	4b2e      	ldr	r3, [pc, #184]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004878:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800487c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800487e:	4b2c      	ldr	r3, [pc, #176]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004880:	2200      	movs	r2, #0
 8004882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004884:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800488a:	4829      	ldr	r0, [pc, #164]	@ (8004930 <MX_TIM2_Init+0xf4>)
 800488c:	f008 fe74 	bl	800d578 <HAL_TIM_PWM_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004896:	f7ff fc75 	bl	8004184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4821      	ldr	r0, [pc, #132]	@ (8004930 <MX_TIM2_Init+0xf4>)
 80048aa:	f009 fdb1 	bl	800e410 <HAL_TIMEx_MasterConfigSynchronization>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80048b4:	f7ff fc66 	bl	8004184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048b8:	2360      	movs	r3, #96	@ 0x60
 80048ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048c8:	463b      	mov	r3, r7
 80048ca:	2200      	movs	r2, #0
 80048cc:	4619      	mov	r1, r3
 80048ce:	4818      	ldr	r0, [pc, #96]	@ (8004930 <MX_TIM2_Init+0xf4>)
 80048d0:	f009 f8c0 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80048da:	f7ff fc53 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048de:	463b      	mov	r3, r7
 80048e0:	2204      	movs	r2, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4812      	ldr	r0, [pc, #72]	@ (8004930 <MX_TIM2_Init+0xf4>)
 80048e6:	f009 f8b5 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80048f0:	f7ff fc48 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048f4:	463b      	mov	r3, r7
 80048f6:	2208      	movs	r2, #8
 80048f8:	4619      	mov	r1, r3
 80048fa:	480d      	ldr	r0, [pc, #52]	@ (8004930 <MX_TIM2_Init+0xf4>)
 80048fc:	f009 f8aa 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8004906:	f7ff fc3d 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800490a:	463b      	mov	r3, r7
 800490c:	220c      	movs	r2, #12
 800490e:	4619      	mov	r1, r3
 8004910:	4807      	ldr	r0, [pc, #28]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004912:	f009 f89f 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 800491c:	f7ff fc32 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004920:	4803      	ldr	r0, [pc, #12]	@ (8004930 <MX_TIM2_Init+0xf4>)
 8004922:	f000 fa29 	bl	8004d78 <HAL_TIM_MspPostInit>

}
 8004926:	bf00      	nop
 8004928:	3728      	adds	r7, #40	@ 0x28
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	24004e98 	.word	0x24004e98

08004934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800493a:	f107 031c 	add.w	r3, r7, #28
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004946:	463b      	mov	r3, r7
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
 8004954:	615a      	str	r2, [r3, #20]
 8004956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004958:	4b27      	ldr	r3, [pc, #156]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 800495a:	4a28      	ldr	r2, [pc, #160]	@ (80049fc <MX_TIM3_Init+0xc8>)
 800495c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800495e:	4b26      	ldr	r3, [pc, #152]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 8004960:	f240 1217 	movw	r2, #279	@ 0x117
 8004964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 800496c:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 800496e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004974:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800497a:	4b1f      	ldr	r3, [pc, #124]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004980:	481d      	ldr	r0, [pc, #116]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 8004982:	f008 fdf9 	bl	800d578 <HAL_TIM_PWM_Init>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800498c:	f7ff fbfa 	bl	8004184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	4619      	mov	r1, r3
 800499e:	4816      	ldr	r0, [pc, #88]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 80049a0:	f009 fd36 	bl	800e410 <HAL_TIMEx_MasterConfigSynchronization>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80049aa:	f7ff fbeb 	bl	8004184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ae:	2360      	movs	r3, #96	@ 0x60
 80049b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049be:	463b      	mov	r3, r7
 80049c0:	2200      	movs	r2, #0
 80049c2:	4619      	mov	r1, r3
 80049c4:	480c      	ldr	r0, [pc, #48]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 80049c6:	f009 f845 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80049d0:	f7ff fbd8 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049d4:	463b      	mov	r3, r7
 80049d6:	2204      	movs	r2, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4807      	ldr	r0, [pc, #28]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 80049dc:	f009 f83a 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80049e6:	f7ff fbcd 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049ea:	4803      	ldr	r0, [pc, #12]	@ (80049f8 <MX_TIM3_Init+0xc4>)
 80049ec:	f000 f9c4 	bl	8004d78 <HAL_TIM_MspPostInit>

}
 80049f0:	bf00      	nop
 80049f2:	3728      	adds	r7, #40	@ 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	24004ee4 	.word	0x24004ee4
 80049fc:	40000400 	.word	0x40000400

08004a00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	@ 0x28
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a06:	f107 031c 	add.w	r3, r7, #28
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a12:	463b      	mov	r3, r7
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
 8004a20:	615a      	str	r2, [r3, #20]
 8004a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004a24:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a26:	4a33      	ldr	r2, [pc, #204]	@ (8004af4 <MX_TIM4_Init+0xf4>)
 8004a28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8004a2a:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a2c:	f240 1217 	movw	r2, #279	@ 0x117
 8004a30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a32:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8004a38:	4b2d      	ldr	r3, [pc, #180]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a3a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004a3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a40:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a48:	2280      	movs	r2, #128	@ 0x80
 8004a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004a4c:	4828      	ldr	r0, [pc, #160]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a4e:	f008 fd93 	bl	800d578 <HAL_TIM_PWM_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004a58:	f7ff fb94 	bl	8004184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a64:	f107 031c 	add.w	r3, r7, #28
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4821      	ldr	r0, [pc, #132]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a6c:	f009 fcd0 	bl	800e410 <HAL_TIMEx_MasterConfigSynchronization>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004a76:	f7ff fb85 	bl	8004184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a7a:	2360      	movs	r3, #96	@ 0x60
 8004a7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4817      	ldr	r0, [pc, #92]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004a92:	f008 ffdf 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004a9c:	f7ff fb72 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4812      	ldr	r0, [pc, #72]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004aa8:	f008 ffd4 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004ab2:	f7ff fb67 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	2208      	movs	r2, #8
 8004aba:	4619      	mov	r1, r3
 8004abc:	480c      	ldr	r0, [pc, #48]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004abe:	f008 ffc9 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004ac8:	f7ff fb5c 	bl	8004184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004acc:	463b      	mov	r3, r7
 8004ace:	220c      	movs	r2, #12
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4807      	ldr	r0, [pc, #28]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004ad4:	f008 ffbe 	bl	800da54 <HAL_TIM_PWM_ConfigChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004ade:	f7ff fb51 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004ae2:	4803      	ldr	r0, [pc, #12]	@ (8004af0 <MX_TIM4_Init+0xf0>)
 8004ae4:	f000 f948 	bl	8004d78 <HAL_TIM_MspPostInit>

}
 8004ae8:	bf00      	nop
 8004aea:	3728      	adds	r7, #40	@ 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	24004f30 	.word	0x24004f30
 8004af4:	40000800 	.word	0x40000800

08004af8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b08:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b0a:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <MX_TIM6_Init+0x6c>)
 8004b0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b14:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b1e:	f240 1217 	movw	r2, #279	@ 0x117
 8004b22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b2a:	480d      	ldr	r0, [pc, #52]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b2c:	f008 fc55 	bl	800d3da <HAL_TIM_Base_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004b36:	f7ff fb25 	bl	8004184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4806      	ldr	r0, [pc, #24]	@ (8004b60 <MX_TIM6_Init+0x68>)
 8004b48:	f009 fc62 	bl	800e410 <HAL_TIMEx_MasterConfigSynchronization>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004b52:	f7ff fb17 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	24004f7c 	.word	0x24004f7c
 8004b64:	40001000 	.word	0x40001000

08004b68 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004b78:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b7a:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <MX_TIM7_Init+0x6c>)
 8004b7c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004b7e:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b84:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8004b8c:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b8e:	f240 1217 	movw	r2, #279	@ 0x117
 8004b92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b94:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b9a:	480d      	ldr	r0, [pc, #52]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004b9c:	f008 fc1d 	bl	800d3da <HAL_TIM_Base_Init>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004ba6:	f7ff faed 	bl	8004184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4806      	ldr	r0, [pc, #24]	@ (8004bd0 <MX_TIM7_Init+0x68>)
 8004bb8:	f009 fc2a 	bl	800e410 <HAL_TIMEx_MasterConfigSynchronization>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004bc2:	f7ff fadf 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	24004fc8 	.word	0x24004fc8
 8004bd4:	40001400 	.word	0x40001400

08004bd8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004bde:	4a0f      	ldr	r2, [pc, #60]	@ (8004c1c <MX_TIM13_Init+0x44>)
 8004be0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004be2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004be4:	f240 1217 	movw	r2, #279	@ 0x117
 8004be8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004bf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bf8:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004c00:	2280      	movs	r2, #128	@ 0x80
 8004c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c04:	4804      	ldr	r0, [pc, #16]	@ (8004c18 <MX_TIM13_Init+0x40>)
 8004c06:	f008 fbe8 	bl	800d3da <HAL_TIM_Base_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004c10:	f7ff fab8 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	24005014 	.word	0x24005014
 8004c1c:	40001c00 	.word	0x40001c00

08004c20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c30:	d10f      	bne.n	8004c52 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c32:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c34:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c50:	e028      	b.n	8004ca4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a17      	ldr	r2, [pc, #92]	@ (8004cb4 <HAL_TIM_PWM_MspInit+0x94>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10f      	bne.n	8004c7c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c5c:	4b14      	ldr	r3, [pc, #80]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c6c:	4b10      	ldr	r3, [pc, #64]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693b      	ldr	r3, [r7, #16]
}
 8004c7a:	e013      	b.n	8004ca4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb8 <HAL_TIM_PWM_MspInit+0x98>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c88:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c8c:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8004c98:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800

08004cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_TIM_Base_MspInit+0xac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d117      	bne.n	8004cfe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cce:	4b27      	ldr	r3, [pc, #156]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004cd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cd4:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004cd6:	f043 0310 	orr.w	r3, r3, #16
 8004cda:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004cde:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004ce0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2036      	movs	r0, #54	@ 0x36
 8004cf2:	f000 fdfa 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cf6:	2036      	movs	r0, #54	@ 0x36
 8004cf8:	f000 fe11 	bl	800591e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004cfc:	e030      	b.n	8004d60 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1b      	ldr	r2, [pc, #108]	@ (8004d70 <HAL_TIM_Base_MspInit+0xb4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d117      	bne.n	8004d38 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d08:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d0e:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d18:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d1a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2037      	movs	r0, #55	@ 0x37
 8004d2c:	f000 fddd 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d30:	2037      	movs	r0, #55	@ 0x37
 8004d32:	f000 fdf4 	bl	800591e <HAL_NVIC_EnableIRQ>
}
 8004d36:	e013      	b.n	8004d60 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d74 <HAL_TIM_Base_MspInit+0xb8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d48:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_TIM_Base_MspInit+0xb0>)
 8004d54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	bf00      	nop
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40001000 	.word	0x40001000
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	40001400 	.word	0x40001400
 8004d74:	40001c00 	.word	0x40001c00

08004d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	@ 0x30
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d13f      	bne.n	8004e1a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004da0:	4a45      	ldr	r2, [pc, #276]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004daa:	4b43      	ldr	r3, [pc, #268]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db8:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004dc0:	f043 0302 	orr.w	r3, r3, #2
 8004dc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004dd6:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004de8:	2301      	movs	r3, #1
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	4619      	mov	r1, r3
 8004df2:	4832      	ldr	r0, [pc, #200]	@ (8004ebc <HAL_TIM_MspPostInit+0x144>)
 8004df4:	f004 f874 	bl	8008ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004df8:	2308      	movs	r3, #8
 8004dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e0c:	f107 031c 	add.w	r3, r7, #28
 8004e10:	4619      	mov	r1, r3
 8004e12:	482b      	ldr	r0, [pc, #172]	@ (8004ec0 <HAL_TIM_MspPostInit+0x148>)
 8004e14:	f004 f864 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e18:	e049      	b.n	8004eae <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <HAL_TIM_MspPostInit+0x14c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d11f      	bne.n	8004e64 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e2a:	4a23      	ldr	r2, [pc, #140]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004e34:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004e42:	2330      	movs	r3, #48	@ 0x30
 8004e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	2302      	movs	r3, #2
 8004e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e52:	2302      	movs	r3, #2
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e56:	f107 031c 	add.w	r3, r7, #28
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4818      	ldr	r0, [pc, #96]	@ (8004ec0 <HAL_TIM_MspPostInit+0x148>)
 8004e5e:	f004 f83f 	bl	8008ee0 <HAL_GPIO_Init>
}
 8004e62:	e024      	b.n	8004eae <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <HAL_TIM_MspPostInit+0x150>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d11f      	bne.n	8004eae <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e74:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <HAL_TIM_MspPostInit+0x140>)
 8004e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e8c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	2302      	movs	r3, #2
 8004e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea2:	f107 031c 	add.w	r3, r7, #28
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4805      	ldr	r0, [pc, #20]	@ (8004ec0 <HAL_TIM_MspPostInit+0x148>)
 8004eaa:	f004 f819 	bl	8008ee0 <HAL_GPIO_Init>
}
 8004eae:	bf00      	nop
 8004eb0:	3730      	adds	r7, #48	@ 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58020000 	.word	0x58020000
 8004ec0:	58020400 	.word	0x58020400
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800

08004ecc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004ed0:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ed2:	4a23      	ldr	r2, [pc, #140]	@ (8004f60 <MX_UART4_Init+0x94>)
 8004ed4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004ed6:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ed8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004edc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ede:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004eea:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef6:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004efc:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f02:	4b16      	ldr	r3, [pc, #88]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f08:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f0e:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f14:	4811      	ldr	r0, [pc, #68]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f16:	f009 fb27 	bl	800e568 <HAL_UART_Init>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004f20:	f7ff f930 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f24:	2100      	movs	r1, #0
 8004f26:	480d      	ldr	r0, [pc, #52]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f28:	f00b fd8d 	bl	8010a46 <HAL_UARTEx_SetTxFifoThreshold>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004f32:	f7ff f927 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f36:	2100      	movs	r1, #0
 8004f38:	4808      	ldr	r0, [pc, #32]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f3a:	f00b fdc2 	bl	8010ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004f44:	f7ff f91e 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004f48:	4804      	ldr	r0, [pc, #16]	@ (8004f5c <MX_UART4_Init+0x90>)
 8004f4a:	f00b fd43 	bl	80109d4 <HAL_UARTEx_DisableFifoMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004f54:	f7ff f916 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	24005060 	.word	0x24005060
 8004f60:	40004c00 	.word	0x40004c00

08004f64 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f6a:	4a24      	ldr	r2, [pc, #144]	@ (8004ffc <MX_USART1_UART_Init+0x98>)
 8004f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004f6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f70:	4a23      	ldr	r2, [pc, #140]	@ (8005000 <MX_USART1_UART_Init+0x9c>)
 8004f72:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004f74:	4b20      	ldr	r3, [pc, #128]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004f82:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f88:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f8c:	220c      	movs	r2, #12
 8004f8e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fae:	4812      	ldr	r0, [pc, #72]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004fb0:	f009 fada 	bl	800e568 <HAL_UART_Init>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004fba:	f7ff f8e3 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	480d      	ldr	r0, [pc, #52]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004fc2:	f00b fd40 	bl	8010a46 <HAL_UARTEx_SetTxFifoThreshold>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004fcc:	f7ff f8da 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4809      	ldr	r0, [pc, #36]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004fd4:	f00b fd75 	bl	8010ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004fde:	f7ff f8d1 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004fe2:	4805      	ldr	r0, [pc, #20]	@ (8004ff8 <MX_USART1_UART_Init+0x94>)
 8004fe4:	f00b fcf6 	bl	80109d4 <HAL_UARTEx_DisableFifoMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004fee:	f7ff f8c9 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	240050f4 	.word	0x240050f4
 8004ffc:	40011000 	.word	0x40011000
 8005000:	000186a0 	.word	0x000186a0

08005004 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005008:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 800500a:	4a23      	ldr	r2, [pc, #140]	@ (8005098 <MX_USART3_UART_Init+0x94>)
 800500c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800500e:	4b21      	ldr	r3, [pc, #132]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005016:	4b1f      	ldr	r3, [pc, #124]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 800501e:	2200      	movs	r2, #0
 8005020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005022:	4b1c      	ldr	r3, [pc, #112]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005028:	4b1a      	ldr	r3, [pc, #104]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 800502a:	220c      	movs	r2, #12
 800502c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800502e:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005030:	2200      	movs	r2, #0
 8005032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005034:	4b17      	ldr	r3, [pc, #92]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005036:	2200      	movs	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800503a:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005040:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005042:	2200      	movs	r2, #0
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005046:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005048:	2200      	movs	r2, #0
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800504c:	4811      	ldr	r0, [pc, #68]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 800504e:	f009 fa8b 	bl	800e568 <HAL_UART_Init>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005058:	f7ff f894 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800505c:	2100      	movs	r1, #0
 800505e:	480d      	ldr	r0, [pc, #52]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005060:	f00b fcf1 	bl	8010a46 <HAL_UARTEx_SetTxFifoThreshold>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800506a:	f7ff f88b 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800506e:	2100      	movs	r1, #0
 8005070:	4808      	ldr	r0, [pc, #32]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005072:	f00b fd26 	bl	8010ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800507c:	f7ff f882 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005080:	4804      	ldr	r0, [pc, #16]	@ (8005094 <MX_USART3_UART_Init+0x90>)
 8005082:	f00b fca7 	bl	80109d4 <HAL_UARTEx_DisableFifoMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800508c:	f7ff f87a 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}
 8005094:	24005188 	.word	0x24005188
 8005098:	40004800 	.word	0x40004800

0800509c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80050a0:	4b22      	ldr	r3, [pc, #136]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050a2:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <MX_USART6_UART_Init+0x94>)
 80050a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80050a6:	4b21      	ldr	r3, [pc, #132]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80050ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80050ae:	4b1f      	ldr	r3, [pc, #124]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80050b4:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80050ba:	4b1c      	ldr	r3, [pc, #112]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050bc:	2200      	movs	r2, #0
 80050be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80050c0:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050c2:	220c      	movs	r2, #12
 80050c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80050cc:	4b17      	ldr	r3, [pc, #92]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050d2:	4b16      	ldr	r3, [pc, #88]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050da:	2200      	movs	r2, #0
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80050e4:	4811      	ldr	r0, [pc, #68]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050e6:	f009 fa3f 	bl	800e568 <HAL_UART_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80050f0:	f7ff f848 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050f4:	2100      	movs	r1, #0
 80050f6:	480d      	ldr	r0, [pc, #52]	@ (800512c <MX_USART6_UART_Init+0x90>)
 80050f8:	f00b fca5 	bl	8010a46 <HAL_UARTEx_SetTxFifoThreshold>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8005102:	f7ff f83f 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005106:	2100      	movs	r1, #0
 8005108:	4808      	ldr	r0, [pc, #32]	@ (800512c <MX_USART6_UART_Init+0x90>)
 800510a:	f00b fcda 	bl	8010ac2 <HAL_UARTEx_SetRxFifoThreshold>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8005114:	f7ff f836 	bl	8004184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <MX_USART6_UART_Init+0x90>)
 800511a:	f00b fc5b 	bl	80109d4 <HAL_UARTEx_DisableFifoMode>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8005124:	f7ff f82e 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	2400521c 	.word	0x2400521c
 8005130:	40011400 	.word	0x40011400

08005134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0c0      	sub	sp, #256	@ 0x100
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800514c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005150:	22c0      	movs	r2, #192	@ 0xc0
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f011 fb0e 	bl	8016776 <memset>
  if(uartHandle->Instance==UART4)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a83      	ldr	r2, [pc, #524]	@ (800536c <HAL_UART_MspInit+0x238>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d17c      	bne.n	800525e <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005164:	f04f 0202 	mov.w	r2, #2
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005176:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800517a:	4618      	mov	r0, r3
 800517c:	f005 f9a6 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005186:	f7fe fffd 	bl	8004184 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800518a:	4b79      	ldr	r3, [pc, #484]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 800518c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005190:	4a77      	ldr	r2, [pc, #476]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 8005192:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005196:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800519a:	4b75      	ldr	r3, [pc, #468]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 800519c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80051a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a8:	4b71      	ldr	r3, [pc, #452]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80051aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80051ae:	4a70      	ldr	r2, [pc, #448]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80051b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80051ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051c6:	2303      	movs	r3, #3
 80051c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80051de:	2308      	movs	r3, #8
 80051e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80051e8:	4619      	mov	r1, r3
 80051ea:	4862      	ldr	r0, [pc, #392]	@ (8005374 <HAL_UART_MspInit+0x240>)
 80051ec:	f003 fe78 	bl	8008ee0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80051f0:	4b61      	ldr	r3, [pc, #388]	@ (8005378 <HAL_UART_MspInit+0x244>)
 80051f2:	4a62      	ldr	r2, [pc, #392]	@ (800537c <HAL_UART_MspInit+0x248>)
 80051f4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80051f6:	4b60      	ldr	r3, [pc, #384]	@ (8005378 <HAL_UART_MspInit+0x244>)
 80051f8:	223f      	movs	r2, #63	@ 0x3f
 80051fa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005378 <HAL_UART_MspInit+0x244>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005202:	4b5d      	ldr	r3, [pc, #372]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005204:	2200      	movs	r2, #0
 8005206:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005208:	4b5b      	ldr	r3, [pc, #364]	@ (8005378 <HAL_UART_MspInit+0x244>)
 800520a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800520e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005210:	4b59      	ldr	r3, [pc, #356]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005216:	4b58      	ldr	r3, [pc, #352]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800521c:	4b56      	ldr	r3, [pc, #344]	@ (8005378 <HAL_UART_MspInit+0x244>)
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005222:	4b55      	ldr	r3, [pc, #340]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005224:	2200      	movs	r2, #0
 8005226:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005228:	4b53      	ldr	r3, [pc, #332]	@ (8005378 <HAL_UART_MspInit+0x244>)
 800522a:	2200      	movs	r2, #0
 800522c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800522e:	4852      	ldr	r0, [pc, #328]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005230:	f000 fc08 	bl	8005a44 <HAL_DMA_Init>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800523a:	f7fe ffa3 	bl	8004184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4d      	ldr	r2, [pc, #308]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005246:	4a4c      	ldr	r2, [pc, #304]	@ (8005378 <HAL_UART_MspInit+0x244>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800524c:	2200      	movs	r2, #0
 800524e:	2100      	movs	r1, #0
 8005250:	2034      	movs	r0, #52	@ 0x34
 8005252:	f000 fb4a 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005256:	2034      	movs	r0, #52	@ 0x34
 8005258:	f000 fb61 	bl	800591e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800525c:	e164      	b.n	8005528 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a47      	ldr	r2, [pc, #284]	@ (8005380 <HAL_UART_MspInit+0x24c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	f040 8091 	bne.w	800538c <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800526a:	f04f 0201 	mov.w	r2, #1
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800527c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005280:	4618      	mov	r0, r3
 8005282:	f005 f923 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800528c:	f7fe ff7a 	bl	8004184 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005290:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 8005292:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005296:	4a36      	ldr	r2, [pc, #216]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 8005298:	f043 0310 	orr.w	r3, r3, #16
 800529c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80052a0:	4b33      	ldr	r3, [pc, #204]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80052a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ae:	4b30      	ldr	r3, [pc, #192]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80052b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80052b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_UART_MspInit+0x23c>)
 80052c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80052cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80052d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052e6:	2307      	movs	r3, #7
 80052e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80052f0:	4619      	mov	r1, r3
 80052f2:	4820      	ldr	r0, [pc, #128]	@ (8005374 <HAL_UART_MspInit+0x240>)
 80052f4:	f003 fdf4 	bl	8008ee0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80052f8:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <HAL_UART_MspInit+0x250>)
 80052fa:	4a23      	ldr	r2, [pc, #140]	@ (8005388 <HAL_UART_MspInit+0x254>)
 80052fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80052fe:	4b21      	ldr	r3, [pc, #132]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005300:	2229      	movs	r2, #41	@ 0x29
 8005302:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005304:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800530a:	4b1e      	ldr	r3, [pc, #120]	@ (8005384 <HAL_UART_MspInit+0x250>)
 800530c:	2200      	movs	r2, #0
 800530e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005310:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005316:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_UART_MspInit+0x250>)
 800531a:	2200      	movs	r2, #0
 800531c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800531e:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005320:	2200      	movs	r2, #0
 8005322:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005324:	4b17      	ldr	r3, [pc, #92]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800532a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800532c:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <HAL_UART_MspInit+0x250>)
 800532e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005332:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005334:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800533a:	4812      	ldr	r0, [pc, #72]	@ (8005384 <HAL_UART_MspInit+0x250>)
 800533c:	f000 fb82 	bl	8005a44 <HAL_DMA_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_UART_MspInit+0x216>
      Error_Handler();
 8005346:	f7fe ff1d 	bl	8004184 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a0d      	ldr	r2, [pc, #52]	@ (8005384 <HAL_UART_MspInit+0x250>)
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005352:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <HAL_UART_MspInit+0x250>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005358:	2200      	movs	r2, #0
 800535a:	2100      	movs	r1, #0
 800535c:	2025      	movs	r0, #37	@ 0x25
 800535e:	f000 fac4 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005362:	2025      	movs	r0, #37	@ 0x25
 8005364:	f000 fadb 	bl	800591e <HAL_NVIC_EnableIRQ>
}
 8005368:	e0de      	b.n	8005528 <HAL_UART_MspInit+0x3f4>
 800536a:	bf00      	nop
 800536c:	40004c00 	.word	0x40004c00
 8005370:	58024400 	.word	0x58024400
 8005374:	58020000 	.word	0x58020000
 8005378:	240052b0 	.word	0x240052b0
 800537c:	40020040 	.word	0x40020040
 8005380:	40011000 	.word	0x40011000
 8005384:	24005328 	.word	0x24005328
 8005388:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a68      	ldr	r2, [pc, #416]	@ (8005534 <HAL_UART_MspInit+0x400>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d17d      	bne.n	8005492 <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005396:	f04f 0202 	mov.w	r2, #2
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053ac:	4618      	mov	r0, r3
 80053ae:	f005 f88d 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_MspInit+0x288>
      Error_Handler();
 80053b8:	f7fe fee4 	bl	8004184 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80053c2:	4a5d      	ldr	r2, [pc, #372]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80053cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80053d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053da:	4b57      	ldr	r3, [pc, #348]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80053e0:	4a55      	ldr	r2, [pc, #340]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80053ea:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80053ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80053f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80053fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005400:	2302      	movs	r3, #2
 8005402:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005412:	2307      	movs	r3, #7
 8005414:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005418:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800541c:	4619      	mov	r1, r3
 800541e:	4847      	ldr	r0, [pc, #284]	@ (800553c <HAL_UART_MspInit+0x408>)
 8005420:	f003 fd5e 	bl	8008ee0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005424:	4b46      	ldr	r3, [pc, #280]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005426:	4a47      	ldr	r2, [pc, #284]	@ (8005544 <HAL_UART_MspInit+0x410>)
 8005428:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800542a:	4b45      	ldr	r3, [pc, #276]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 800542c:	222d      	movs	r2, #45	@ 0x2d
 800542e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005430:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005436:	4b42      	ldr	r3, [pc, #264]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005438:	2200      	movs	r2, #0
 800543a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800543c:	4b40      	ldr	r3, [pc, #256]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 800543e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005442:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005444:	4b3e      	ldr	r3, [pc, #248]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544a:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005456:	4b3a      	ldr	r3, [pc, #232]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005458:	2200      	movs	r2, #0
 800545a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800545c:	4b38      	ldr	r3, [pc, #224]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 800545e:	2200      	movs	r2, #0
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005462:	4837      	ldr	r0, [pc, #220]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005464:	f000 faee 	bl	8005a44 <HAL_DMA_Init>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800546e:	f7fe fe89 	bl	8004184 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a32      	ldr	r2, [pc, #200]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 8005476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800547a:	4a31      	ldr	r2, [pc, #196]	@ (8005540 <HAL_UART_MspInit+0x40c>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005480:	2200      	movs	r2, #0
 8005482:	2100      	movs	r1, #0
 8005484:	2027      	movs	r0, #39	@ 0x27
 8005486:	f000 fa30 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800548a:	2027      	movs	r0, #39	@ 0x27
 800548c:	f000 fa47 	bl	800591e <HAL_NVIC_EnableIRQ>
}
 8005490:	e04a      	b.n	8005528 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART6)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2c      	ldr	r2, [pc, #176]	@ (8005548 <HAL_UART_MspInit+0x414>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d145      	bne.n	8005528 <HAL_UART_MspInit+0x3f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800549c:	f04f 0201 	mov.w	r2, #1
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054b2:	4618      	mov	r0, r3
 80054b4:	f005 f80a 	bl	800a4cc <HAL_RCCEx_PeriphCLKConfig>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_UART_MspInit+0x38e>
      Error_Handler();
 80054be:	f7fe fe61 	bl	8004184 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054ca:	f043 0320 	orr.w	r3, r3, #32
 80054ce:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80054d2:	4b19      	ldr	r3, [pc, #100]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e0:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_UART_MspInit+0x404>)
 80054f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054fe:	23c0      	movs	r3, #192	@ 0xc0
 8005500:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8005516:	2307      	movs	r3, #7
 8005518:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005520:	4619      	mov	r1, r3
 8005522:	4806      	ldr	r0, [pc, #24]	@ (800553c <HAL_UART_MspInit+0x408>)
 8005524:	f003 fcdc 	bl	8008ee0 <HAL_GPIO_Init>
}
 8005528:	bf00      	nop
 800552a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40004800 	.word	0x40004800
 8005538:	58024400 	.word	0x58024400
 800553c:	58020800 	.word	0x58020800
 8005540:	240053a0 	.word	0x240053a0
 8005544:	40020028 	.word	0x40020028
 8005548:	40011400 	.word	0x40011400

0800554c <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	220f      	movs	r2, #15
 800555a:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f009 f9c3 	bl	800e8e8 <HAL_UART_Abort_IT>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8005568:	f7fe fe0c 	bl	8004184 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005578:	f7ff f8e8 	bl	800474c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800557c:	480c      	ldr	r0, [pc, #48]	@ (80055b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800557e:	490d      	ldr	r1, [pc, #52]	@ (80055b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005580:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005584:	e002      	b.n	800558c <LoopCopyDataInit>

08005586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800558a:	3304      	adds	r3, #4

0800558c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800558c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800558e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005590:	d3f9      	bcc.n	8005586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005592:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005594:	4c0a      	ldr	r4, [pc, #40]	@ (80055c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005598:	e001      	b.n	800559e <LoopFillZerobss>

0800559a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800559a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800559c:	3204      	adds	r2, #4

0800559e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800559e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055a0:	d3fb      	bcc.n	800559a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80055a2:	f011 f95b 	bl	801685c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055a6:	f7fe fca1 	bl	8003eec <main>
  bx  lr
 80055aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80055ac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80055b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80055b4:	240002b0 	.word	0x240002b0
  ldr r2, =_sidata
 80055b8:	08019970 	.word	0x08019970
  ldr r2, =_sbss
 80055bc:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 80055c0:	240057ac 	.word	0x240057ac

080055c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055c4:	e7fe      	b.n	80055c4 <ADC_IRQHandler>
	...

080055c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055ce:	2003      	movs	r0, #3
 80055d0:	f000 f980 	bl	80058d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80055d4:	f004 fda4 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <HAL_Init+0x68>)
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	4913      	ldr	r1, [pc, #76]	@ (8005634 <HAL_Init+0x6c>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80055f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005630 <HAL_Init+0x68>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005634 <HAL_Init+0x6c>)
 80055fc:	5cd3      	ldrb	r3, [r2, r3]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	4a0b      	ldr	r2, [pc, #44]	@ (8005638 <HAL_Init+0x70>)
 800560a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800560c:	4a0b      	ldr	r2, [pc, #44]	@ (800563c <HAL_Init+0x74>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005612:	200f      	movs	r0, #15
 8005614:	f000 f814 	bl	8005640 <HAL_InitTick>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e002      	b.n	8005628 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005622:	f7fe ff19 	bl	8004458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	58024400 	.word	0x58024400
 8005634:	08018894 	.word	0x08018894
 8005638:	240000c4 	.word	0x240000c4
 800563c:	240000c0 	.word	0x240000c0

08005640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <HAL_InitTick+0x60>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e021      	b.n	8005698 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005654:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <HAL_InitTick+0x64>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <HAL_InitTick+0x60>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005662:	fbb3 f3f1 	udiv	r3, r3, r1
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f965 	bl	800593a <HAL_SYSTICK_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00e      	b.n	8005698 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d80a      	bhi.n	8005696 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005680:	2200      	movs	r2, #0
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	f000 f92f 	bl	80058ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800568c:	4a06      	ldr	r2, [pc, #24]	@ (80056a8 <HAL_InitTick+0x68>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	240000cc 	.word	0x240000cc
 80056a4:	240000c0 	.word	0x240000c0
 80056a8:	240000c8 	.word	0x240000c8

080056ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_IncTick+0x20>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_IncTick+0x24>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	4a04      	ldr	r2, [pc, #16]	@ (80056d0 <HAL_IncTick+0x24>)
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	240000cc 	.word	0x240000cc
 80056d0:	24005418 	.word	0x24005418

080056d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return uwTick;
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_GetTick+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	24005418 	.word	0x24005418

080056ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056f4:	f7ff ffee 	bl	80056d4 <HAL_GetTick>
 80056f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d005      	beq.n	8005712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005706:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <HAL_Delay+0x44>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005712:	bf00      	nop
 8005714:	f7ff ffde 	bl	80056d4 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d8f7      	bhi.n	8005714 <HAL_Delay+0x28>
  {
  }
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	240000cc 	.word	0x240000cc

08005734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005744:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <__NVIC_SetPriorityGrouping+0x40>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005750:	4013      	ands	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <__NVIC_SetPriorityGrouping+0x44>)
 800575e:	4313      	orrs	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005762:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <__NVIC_SetPriorityGrouping+0x40>)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	60d3      	str	r3, [r2, #12]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000ed00 	.word	0xe000ed00
 8005778:	05fa0000 	.word	0x05fa0000

0800577c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <__NVIC_GetPriorityGrouping+0x18>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	f003 0307 	and.w	r3, r3, #7
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db0b      	blt.n	80057c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	f003 021f 	and.w	r2, r3, #31
 80057b0:	4907      	ldr	r1, [pc, #28]	@ (80057d0 <__NVIC_EnableIRQ+0x38>)
 80057b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2001      	movs	r0, #1
 80057ba:	fa00 f202 	lsl.w	r2, r0, r2
 80057be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e100 	.word	0xe000e100

080057d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db0a      	blt.n	80057fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	490c      	ldr	r1, [pc, #48]	@ (8005820 <__NVIC_SetPriority+0x4c>)
 80057ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	440b      	add	r3, r1
 80057f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057fc:	e00a      	b.n	8005814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4908      	ldr	r1, [pc, #32]	@ (8005824 <__NVIC_SetPriority+0x50>)
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3b04      	subs	r3, #4
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	440b      	add	r3, r1
 8005812:	761a      	strb	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000e100 	.word	0xe000e100
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	@ 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f1c3 0307 	rsb	r3, r3, #7
 8005842:	2b04      	cmp	r3, #4
 8005844:	bf28      	it	cs
 8005846:	2304      	movcs	r3, #4
 8005848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	3304      	adds	r3, #4
 800584e:	2b06      	cmp	r3, #6
 8005850:	d902      	bls.n	8005858 <NVIC_EncodePriority+0x30>
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	3b03      	subs	r3, #3
 8005856:	e000      	b.n	800585a <NVIC_EncodePriority+0x32>
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800585c:	f04f 32ff 	mov.w	r2, #4294967295
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43da      	mvns	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	401a      	ands	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005870:	f04f 31ff 	mov.w	r1, #4294967295
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	43d9      	mvns	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005880:	4313      	orrs	r3, r2
         );
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	@ 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3b01      	subs	r3, #1
 800589c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058a0:	d301      	bcc.n	80058a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00f      	b.n	80058c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058a6:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <SysTick_Config+0x40>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ae:	210f      	movs	r1, #15
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	f7ff ff8e 	bl	80057d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <SysTick_Config+0x40>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058be:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <SysTick_Config+0x40>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010

080058d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff29 	bl	8005734 <__NVIC_SetPriorityGrouping>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4603      	mov	r3, r0
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058f8:	f7ff ff40 	bl	800577c <__NVIC_GetPriorityGrouping>
 80058fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	6978      	ldr	r0, [r7, #20]
 8005904:	f7ff ff90 	bl	8005828 <NVIC_EncodePriority>
 8005908:	4602      	mov	r2, r0
 800590a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff5f 	bl	80057d4 <__NVIC_SetPriority>
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	4603      	mov	r3, r0
 8005926:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff33 	bl	8005798 <__NVIC_EnableIRQ>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ffa4 	bl	8005890 <SysTick_Config>
 8005948:	4603      	mov	r3, r0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005958:	f3bf 8f5f 	dmb	sy
}
 800595c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800595e:	4b07      	ldr	r3, [pc, #28]	@ (800597c <HAL_MPU_Disable+0x28>)
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	4a06      	ldr	r2, [pc, #24]	@ (800597c <HAL_MPU_Disable+0x28>)
 8005964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005968:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800596a:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_MPU_Disable+0x2c>)
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000ed00 	.word	0xe000ed00
 8005980:	e000ed90 	.word	0xe000ed90

08005984 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800598c:	4a0b      	ldr	r2, [pc, #44]	@ (80059bc <HAL_MPU_Enable+0x38>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005996:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <HAL_MPU_Enable+0x3c>)
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	4a09      	ldr	r2, [pc, #36]	@ (80059c0 <HAL_MPU_Enable+0x3c>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80059a2:	f3bf 8f4f 	dsb	sy
}
 80059a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059a8:	f3bf 8f6f 	isb	sy
}
 80059ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e000ed90 	.word	0xe000ed90
 80059c0:	e000ed00 	.word	0xe000ed00

080059c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	785a      	ldrb	r2, [r3, #1]
 80059d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_MPU_ConfigRegion+0x7c>)
 80059d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80059d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a40 <HAL_MPU_ConfigRegion+0x7c>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4a19      	ldr	r2, [pc, #100]	@ (8005a40 <HAL_MPU_ConfigRegion+0x7c>)
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80059e0:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_MPU_ConfigRegion+0x7c>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	7b1b      	ldrb	r3, [r3, #12]
 80059ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	7adb      	ldrb	r3, [r3, #11]
 80059f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7a9b      	ldrb	r3, [r3, #10]
 80059fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80059fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7b5b      	ldrb	r3, [r3, #13]
 8005a02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7b9b      	ldrb	r3, [r3, #14]
 8005a0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7bdb      	ldrb	r3, [r3, #15]
 8005a12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	7a5b      	ldrb	r3, [r3, #9]
 8005a1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7a1b      	ldrb	r3, [r3, #8]
 8005a22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005a24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a2c:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a30:	6113      	str	r3, [r2, #16]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e000ed90 	.word	0xe000ed90

08005a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a4c:	f7ff fe42 	bl	80056d4 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e37d      	b.n	8006158 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a66      	ldr	r2, [pc, #408]	@ (8005bfc <HAL_DMA_Init+0x1b8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d04a      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a65      	ldr	r2, [pc, #404]	@ (8005c00 <HAL_DMA_Init+0x1bc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d045      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a63      	ldr	r2, [pc, #396]	@ (8005c04 <HAL_DMA_Init+0x1c0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d040      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a62      	ldr	r2, [pc, #392]	@ (8005c08 <HAL_DMA_Init+0x1c4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d03b      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a60      	ldr	r2, [pc, #384]	@ (8005c0c <HAL_DMA_Init+0x1c8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d036      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a5f      	ldr	r2, [pc, #380]	@ (8005c10 <HAL_DMA_Init+0x1cc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d031      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8005c14 <HAL_DMA_Init+0x1d0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02c      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8005c18 <HAL_DMA_Init+0x1d4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d027      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8005c1c <HAL_DMA_Init+0x1d8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d022      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a59      	ldr	r2, [pc, #356]	@ (8005c20 <HAL_DMA_Init+0x1dc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d01d      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a57      	ldr	r2, [pc, #348]	@ (8005c24 <HAL_DMA_Init+0x1e0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d018      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a56      	ldr	r2, [pc, #344]	@ (8005c28 <HAL_DMA_Init+0x1e4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a54      	ldr	r2, [pc, #336]	@ (8005c2c <HAL_DMA_Init+0x1e8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00e      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a53      	ldr	r2, [pc, #332]	@ (8005c30 <HAL_DMA_Init+0x1ec>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a51      	ldr	r2, [pc, #324]	@ (8005c34 <HAL_DMA_Init+0x1f0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d004      	beq.n	8005afc <HAL_DMA_Init+0xb8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a50      	ldr	r2, [pc, #320]	@ (8005c38 <HAL_DMA_Init+0x1f4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <HAL_DMA_Init+0xbc>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_DMA_Init+0xbe>
 8005b00:	2300      	movs	r3, #0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 813c 	beq.w	8005d80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a37      	ldr	r2, [pc, #220]	@ (8005bfc <HAL_DMA_Init+0x1b8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a36      	ldr	r2, [pc, #216]	@ (8005c00 <HAL_DMA_Init+0x1bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <HAL_DMA_Init+0x1c0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a33      	ldr	r2, [pc, #204]	@ (8005c08 <HAL_DMA_Init+0x1c4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a31      	ldr	r2, [pc, #196]	@ (8005c0c <HAL_DMA_Init+0x1c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a30      	ldr	r2, [pc, #192]	@ (8005c10 <HAL_DMA_Init+0x1cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2e      	ldr	r2, [pc, #184]	@ (8005c14 <HAL_DMA_Init+0x1d0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <HAL_DMA_Init+0x1d4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <HAL_DMA_Init+0x1d8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <HAL_DMA_Init+0x1dc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <HAL_DMA_Init+0x1e0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a27      	ldr	r2, [pc, #156]	@ (8005c28 <HAL_DMA_Init+0x1e4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a25      	ldr	r2, [pc, #148]	@ (8005c2c <HAL_DMA_Init+0x1e8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a24      	ldr	r2, [pc, #144]	@ (8005c30 <HAL_DMA_Init+0x1ec>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a22      	ldr	r2, [pc, #136]	@ (8005c34 <HAL_DMA_Init+0x1f0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_Init+0x174>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	@ (8005c38 <HAL_DMA_Init+0x1f4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <HAL_DMA_Init+0x186>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e007      	b.n	8005bda <HAL_DMA_Init+0x196>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bda:	e02f      	b.n	8005c3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bdc:	f7ff fd7a 	bl	80056d4 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d928      	bls.n	8005c3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e2ad      	b.n	8006158 <HAL_DMA_Init+0x714>
 8005bfc:	40020010 	.word	0x40020010
 8005c00:	40020028 	.word	0x40020028
 8005c04:	40020040 	.word	0x40020040
 8005c08:	40020058 	.word	0x40020058
 8005c0c:	40020070 	.word	0x40020070
 8005c10:	40020088 	.word	0x40020088
 8005c14:	400200a0 	.word	0x400200a0
 8005c18:	400200b8 	.word	0x400200b8
 8005c1c:	40020410 	.word	0x40020410
 8005c20:	40020428 	.word	0x40020428
 8005c24:	40020440 	.word	0x40020440
 8005c28:	40020458 	.word	0x40020458
 8005c2c:	40020470 	.word	0x40020470
 8005c30:	40020488 	.word	0x40020488
 8005c34:	400204a0 	.word	0x400204a0
 8005c38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1c8      	bne.n	8005bdc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4b73      	ldr	r3, [pc, #460]	@ (8005e24 <HAL_DMA_Init+0x3e0>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d107      	bne.n	8005ca0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b28      	cmp	r3, #40	@ 0x28
 8005ca6:	d903      	bls.n	8005cb0 <HAL_DMA_Init+0x26c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cae:	d91f      	bls.n	8005cf0 <HAL_DMA_Init+0x2ac>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cb6:	d903      	bls.n	8005cc0 <HAL_DMA_Init+0x27c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b42      	cmp	r3, #66	@ 0x42
 8005cbe:	d917      	bls.n	8005cf0 <HAL_DMA_Init+0x2ac>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b46      	cmp	r3, #70	@ 0x46
 8005cc6:	d903      	bls.n	8005cd0 <HAL_DMA_Init+0x28c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b48      	cmp	r3, #72	@ 0x48
 8005cce:	d90f      	bls.n	8005cf0 <HAL_DMA_Init+0x2ac>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8005cd6:	d903      	bls.n	8005ce0 <HAL_DMA_Init+0x29c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b52      	cmp	r3, #82	@ 0x52
 8005cde:	d907      	bls.n	8005cf0 <HAL_DMA_Init+0x2ac>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b73      	cmp	r3, #115	@ 0x73
 8005ce6:	d905      	bls.n	8005cf4 <HAL_DMA_Init+0x2b0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b77      	cmp	r3, #119	@ 0x77
 8005cee:	d801      	bhi.n	8005cf4 <HAL_DMA_Init+0x2b0>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_DMA_Init+0x2b2>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0307 	bic.w	r3, r3, #7
 8005d18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d117      	bne.n	8005d5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f002 fbe0 	bl	8008504 <DMA_CheckFifoParam>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2240      	movs	r2, #64	@ 0x40
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e1fd      	b.n	8006158 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f002 fb1b 	bl	80083a0 <DMA_CalcBaseAndBitshift>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	223f      	movs	r2, #63	@ 0x3f
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
 8005d7e:	e0fd      	b.n	8005f7c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <HAL_DMA_Init+0x3e4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04a      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <HAL_DMA_Init+0x3e8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d045      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a25      	ldr	r2, [pc, #148]	@ (8005e30 <HAL_DMA_Init+0x3ec>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d040      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a24      	ldr	r2, [pc, #144]	@ (8005e34 <HAL_DMA_Init+0x3f0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d03b      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <HAL_DMA_Init+0x3f4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d036      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	@ (8005e3c <HAL_DMA_Init+0x3f8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d031      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <HAL_DMA_Init+0x3fc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d02c      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	@ (8005e44 <HAL_DMA_Init+0x400>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d027      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e48 <HAL_DMA_Init+0x404>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	@ (8005e4c <HAL_DMA_Init+0x408>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01d      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <HAL_DMA_Init+0x40c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a18      	ldr	r2, [pc, #96]	@ (8005e54 <HAL_DMA_Init+0x410>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	@ (8005e58 <HAL_DMA_Init+0x414>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <HAL_DMA_Init+0x418>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a13      	ldr	r2, [pc, #76]	@ (8005e60 <HAL_DMA_Init+0x41c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_DMA_Init+0x3dc>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <HAL_DMA_Init+0x420>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d123      	bne.n	8005e68 <HAL_DMA_Init+0x424>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e022      	b.n	8005e6a <HAL_DMA_Init+0x426>
 8005e24:	fe10803f 	.word	0xfe10803f
 8005e28:	48022c08 	.word	0x48022c08
 8005e2c:	48022c1c 	.word	0x48022c1c
 8005e30:	48022c30 	.word	0x48022c30
 8005e34:	48022c44 	.word	0x48022c44
 8005e38:	48022c58 	.word	0x48022c58
 8005e3c:	48022c6c 	.word	0x48022c6c
 8005e40:	48022c80 	.word	0x48022c80
 8005e44:	48022c94 	.word	0x48022c94
 8005e48:	58025408 	.word	0x58025408
 8005e4c:	5802541c 	.word	0x5802541c
 8005e50:	58025430 	.word	0x58025430
 8005e54:	58025444 	.word	0x58025444
 8005e58:	58025458 	.word	0x58025458
 8005e5c:	5802546c 	.word	0x5802546c
 8005e60:	58025480 	.word	0x58025480
 8005e64:	58025494 	.word	0x58025494
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d07d      	beq.n	8005f6a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7f      	ldr	r2, [pc, #508]	@ (8006070 <HAL_DMA_Init+0x62c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d021      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8006074 <HAL_DMA_Init+0x630>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01c      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7c      	ldr	r2, [pc, #496]	@ (8006078 <HAL_DMA_Init+0x634>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d017      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a7a      	ldr	r2, [pc, #488]	@ (800607c <HAL_DMA_Init+0x638>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d012      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a79      	ldr	r2, [pc, #484]	@ (8006080 <HAL_DMA_Init+0x63c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00d      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a77      	ldr	r2, [pc, #476]	@ (8006084 <HAL_DMA_Init+0x640>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d008      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a76      	ldr	r2, [pc, #472]	@ (8006088 <HAL_DMA_Init+0x644>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <HAL_DMA_Init+0x478>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a74      	ldr	r2, [pc, #464]	@ (800608c <HAL_DMA_Init+0x648>)
 8005eba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8006090 <HAL_DMA_Init+0x64c>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d008      	beq.n	8005ef6 <HAL_DMA_Init+0x4b2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b80      	cmp	r3, #128	@ 0x80
 8005eea:	d102      	bne.n	8005ef2 <HAL_DMA_Init+0x4ae>
 8005eec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ef0:	e002      	b.n	8005ef8 <HAL_DMA_Init+0x4b4>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_DMA_Init+0x4b4>
 8005ef6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68d2      	ldr	r2, [r2, #12]
 8005efc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005efe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f06:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f0e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f16:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f1e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f26:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b55      	ldr	r3, [pc, #340]	@ (8006094 <HAL_DMA_Init+0x650>)
 8005f3e:	4413      	add	r3, r2
 8005f40:	4a55      	ldr	r2, [pc, #340]	@ (8006098 <HAL_DMA_Init+0x654>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	009a      	lsls	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f002 fa26 	bl	80083a0 <DMA_CalcBaseAndBitshift>
 8005f54:	4603      	mov	r3, r0
 8005f56:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	e008      	b.n	8005f7c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2240      	movs	r2, #64	@ 0x40
 8005f6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0ed      	b.n	8006158 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a46      	ldr	r2, [pc, #280]	@ (800609c <HAL_DMA_Init+0x658>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d072      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a45      	ldr	r2, [pc, #276]	@ (80060a0 <HAL_DMA_Init+0x65c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d06d      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a43      	ldr	r2, [pc, #268]	@ (80060a4 <HAL_DMA_Init+0x660>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d068      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a42      	ldr	r2, [pc, #264]	@ (80060a8 <HAL_DMA_Init+0x664>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d063      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a40      	ldr	r2, [pc, #256]	@ (80060ac <HAL_DMA_Init+0x668>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d05e      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80060b0 <HAL_DMA_Init+0x66c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d059      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a3d      	ldr	r2, [pc, #244]	@ (80060b4 <HAL_DMA_Init+0x670>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d054      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80060b8 <HAL_DMA_Init+0x674>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d04f      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80060bc <HAL_DMA_Init+0x678>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d04a      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a39      	ldr	r2, [pc, #228]	@ (80060c0 <HAL_DMA_Init+0x67c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d045      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a37      	ldr	r2, [pc, #220]	@ (80060c4 <HAL_DMA_Init+0x680>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d040      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a36      	ldr	r2, [pc, #216]	@ (80060c8 <HAL_DMA_Init+0x684>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03b      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	@ (80060cc <HAL_DMA_Init+0x688>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d036      	beq.n	800606c <HAL_DMA_Init+0x628>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a33      	ldr	r2, [pc, #204]	@ (80060d0 <HAL_DMA_Init+0x68c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d031      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <HAL_DMA_Init+0x690>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02c      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <HAL_DMA_Init+0x694>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_Init+0x628>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a13      	ldr	r2, [pc, #76]	@ (8006070 <HAL_DMA_Init+0x62c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <HAL_DMA_Init+0x630>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a10      	ldr	r2, [pc, #64]	@ (8006078 <HAL_DMA_Init+0x634>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_Init+0x628>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a0f      	ldr	r2, [pc, #60]	@ (800607c <HAL_DMA_Init+0x638>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a0d      	ldr	r2, [pc, #52]	@ (8006080 <HAL_DMA_Init+0x63c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_Init+0x628>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <HAL_DMA_Init+0x640>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a0a      	ldr	r2, [pc, #40]	@ (8006088 <HAL_DMA_Init+0x644>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_Init+0x628>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a09      	ldr	r2, [pc, #36]	@ (800608c <HAL_DMA_Init+0x648>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d137      	bne.n	80060dc <HAL_DMA_Init+0x698>
 800606c:	2301      	movs	r3, #1
 800606e:	e036      	b.n	80060de <HAL_DMA_Init+0x69a>
 8006070:	58025408 	.word	0x58025408
 8006074:	5802541c 	.word	0x5802541c
 8006078:	58025430 	.word	0x58025430
 800607c:	58025444 	.word	0x58025444
 8006080:	58025458 	.word	0x58025458
 8006084:	5802546c 	.word	0x5802546c
 8006088:	58025480 	.word	0x58025480
 800608c:	58025494 	.word	0x58025494
 8006090:	fffe000f 	.word	0xfffe000f
 8006094:	a7fdabf8 	.word	0xa7fdabf8
 8006098:	cccccccd 	.word	0xcccccccd
 800609c:	40020010 	.word	0x40020010
 80060a0:	40020028 	.word	0x40020028
 80060a4:	40020040 	.word	0x40020040
 80060a8:	40020058 	.word	0x40020058
 80060ac:	40020070 	.word	0x40020070
 80060b0:	40020088 	.word	0x40020088
 80060b4:	400200a0 	.word	0x400200a0
 80060b8:	400200b8 	.word	0x400200b8
 80060bc:	40020410 	.word	0x40020410
 80060c0:	40020428 	.word	0x40020428
 80060c4:	40020440 	.word	0x40020440
 80060c8:	40020458 	.word	0x40020458
 80060cc:	40020470 	.word	0x40020470
 80060d0:	40020488 	.word	0x40020488
 80060d4:	400204a0 	.word	0x400204a0
 80060d8:	400204b8 	.word	0x400204b8
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d032      	beq.n	8006148 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 fa8a 	bl	80085fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b80      	cmp	r3, #128	@ 0x80
 80060ee:	d102      	bne.n	80060f6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800610a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d010      	beq.n	8006136 <HAL_DMA_Init+0x6f2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d80c      	bhi.n	8006136 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f002 fb07 	bl	8008730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	e008      	b.n	8006148 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e226      	b.n	80065ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_DMA_Start_IT+0x2a>
 8006186:	2302      	movs	r3, #2
 8006188:	e21f      	b.n	80065ca <HAL_DMA_Start_IT+0x46a>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	f040 820a 	bne.w	80065b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a68      	ldr	r2, [pc, #416]	@ (8006354 <HAL_DMA_Start_IT+0x1f4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a66      	ldr	r2, [pc, #408]	@ (8006358 <HAL_DMA_Start_IT+0x1f8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a65      	ldr	r2, [pc, #404]	@ (800635c <HAL_DMA_Start_IT+0x1fc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a63      	ldr	r2, [pc, #396]	@ (8006360 <HAL_DMA_Start_IT+0x200>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a62      	ldr	r2, [pc, #392]	@ (8006364 <HAL_DMA_Start_IT+0x204>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a60      	ldr	r2, [pc, #384]	@ (8006368 <HAL_DMA_Start_IT+0x208>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a5f      	ldr	r2, [pc, #380]	@ (800636c <HAL_DMA_Start_IT+0x20c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006370 <HAL_DMA_Start_IT+0x210>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a5c      	ldr	r2, [pc, #368]	@ (8006374 <HAL_DMA_Start_IT+0x214>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5a      	ldr	r2, [pc, #360]	@ (8006378 <HAL_DMA_Start_IT+0x218>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a59      	ldr	r2, [pc, #356]	@ (800637c <HAL_DMA_Start_IT+0x21c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a57      	ldr	r2, [pc, #348]	@ (8006380 <HAL_DMA_Start_IT+0x220>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a56      	ldr	r2, [pc, #344]	@ (8006384 <HAL_DMA_Start_IT+0x224>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a54      	ldr	r2, [pc, #336]	@ (8006388 <HAL_DMA_Start_IT+0x228>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a53      	ldr	r2, [pc, #332]	@ (800638c <HAL_DMA_Start_IT+0x22c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_Start_IT+0xee>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a51      	ldr	r2, [pc, #324]	@ (8006390 <HAL_DMA_Start_IT+0x230>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <HAL_DMA_Start_IT+0x100>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e007      	b.n	8006270 <HAL_DMA_Start_IT+0x110>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 feae 	bl	8007fd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_DMA_Start_IT+0x1f4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d04a      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_DMA_Start_IT+0x1f8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d045      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	@ (800635c <HAL_DMA_Start_IT+0x1fc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d040      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a30      	ldr	r2, [pc, #192]	@ (8006360 <HAL_DMA_Start_IT+0x200>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d03b      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <HAL_DMA_Start_IT+0x204>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d036      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <HAL_DMA_Start_IT+0x208>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d031      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	@ (800636c <HAL_DMA_Start_IT+0x20c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d02c      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <HAL_DMA_Start_IT+0x210>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d027      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a28      	ldr	r2, [pc, #160]	@ (8006374 <HAL_DMA_Start_IT+0x214>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d022      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <HAL_DMA_Start_IT+0x218>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d01d      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_DMA_Start_IT+0x21c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d018      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <HAL_DMA_Start_IT+0x220>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_DMA_Start_IT+0x224>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00e      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	@ (8006388 <HAL_DMA_Start_IT+0x228>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d009      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1f      	ldr	r2, [pc, #124]	@ (800638c <HAL_DMA_Start_IT+0x22c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d004      	beq.n	800631c <HAL_DMA_Start_IT+0x1bc>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <HAL_DMA_Start_IT+0x230>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d101      	bne.n	8006320 <HAL_DMA_Start_IT+0x1c0>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <HAL_DMA_Start_IT+0x1c2>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d036      	beq.n	8006394 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f023 021e 	bic.w	r2, r3, #30
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0216 	orr.w	r2, r2, #22
 8006338:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03e      	beq.n	80063c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0208 	orr.w	r2, r2, #8
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e035      	b.n	80063c0 <HAL_DMA_Start_IT+0x260>
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 020e 	bic.w	r2, r3, #14
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 020a 	orr.w	r2, r2, #10
 80063a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0204 	orr.w	r2, r2, #4
 80063be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a83      	ldr	r2, [pc, #524]	@ (80065d4 <HAL_DMA_Start_IT+0x474>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d072      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a82      	ldr	r2, [pc, #520]	@ (80065d8 <HAL_DMA_Start_IT+0x478>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d06d      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a80      	ldr	r2, [pc, #512]	@ (80065dc <HAL_DMA_Start_IT+0x47c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d068      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a7f      	ldr	r2, [pc, #508]	@ (80065e0 <HAL_DMA_Start_IT+0x480>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d063      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a7d      	ldr	r2, [pc, #500]	@ (80065e4 <HAL_DMA_Start_IT+0x484>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d05e      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a7c      	ldr	r2, [pc, #496]	@ (80065e8 <HAL_DMA_Start_IT+0x488>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d059      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a7a      	ldr	r2, [pc, #488]	@ (80065ec <HAL_DMA_Start_IT+0x48c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d054      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a79      	ldr	r2, [pc, #484]	@ (80065f0 <HAL_DMA_Start_IT+0x490>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d04f      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a77      	ldr	r2, [pc, #476]	@ (80065f4 <HAL_DMA_Start_IT+0x494>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d04a      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a76      	ldr	r2, [pc, #472]	@ (80065f8 <HAL_DMA_Start_IT+0x498>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d045      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a74      	ldr	r2, [pc, #464]	@ (80065fc <HAL_DMA_Start_IT+0x49c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d040      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a73      	ldr	r2, [pc, #460]	@ (8006600 <HAL_DMA_Start_IT+0x4a0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d03b      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a71      	ldr	r2, [pc, #452]	@ (8006604 <HAL_DMA_Start_IT+0x4a4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d036      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a70      	ldr	r2, [pc, #448]	@ (8006608 <HAL_DMA_Start_IT+0x4a8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d031      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6e      	ldr	r2, [pc, #440]	@ (800660c <HAL_DMA_Start_IT+0x4ac>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d02c      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6d      	ldr	r2, [pc, #436]	@ (8006610 <HAL_DMA_Start_IT+0x4b0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d027      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a6b      	ldr	r2, [pc, #428]	@ (8006614 <HAL_DMA_Start_IT+0x4b4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d022      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a6a      	ldr	r2, [pc, #424]	@ (8006618 <HAL_DMA_Start_IT+0x4b8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d01d      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_DMA_Start_IT+0x4bc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a67      	ldr	r2, [pc, #412]	@ (8006620 <HAL_DMA_Start_IT+0x4c0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a65      	ldr	r2, [pc, #404]	@ (8006624 <HAL_DMA_Start_IT+0x4c4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a64      	ldr	r2, [pc, #400]	@ (8006628 <HAL_DMA_Start_IT+0x4c8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a62      	ldr	r2, [pc, #392]	@ (800662c <HAL_DMA_Start_IT+0x4cc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_DMA_Start_IT+0x350>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a61      	ldr	r2, [pc, #388]	@ (8006630 <HAL_DMA_Start_IT+0x4d0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <HAL_DMA_Start_IT+0x354>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_DMA_Start_IT+0x356>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a37      	ldr	r2, [pc, #220]	@ (80065d4 <HAL_DMA_Start_IT+0x474>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04a      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a36      	ldr	r2, [pc, #216]	@ (80065d8 <HAL_DMA_Start_IT+0x478>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d045      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a34      	ldr	r2, [pc, #208]	@ (80065dc <HAL_DMA_Start_IT+0x47c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d040      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a33      	ldr	r2, [pc, #204]	@ (80065e0 <HAL_DMA_Start_IT+0x480>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d03b      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a31      	ldr	r2, [pc, #196]	@ (80065e4 <HAL_DMA_Start_IT+0x484>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d036      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a30      	ldr	r2, [pc, #192]	@ (80065e8 <HAL_DMA_Start_IT+0x488>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d031      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2e      	ldr	r2, [pc, #184]	@ (80065ec <HAL_DMA_Start_IT+0x48c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02c      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2d      	ldr	r2, [pc, #180]	@ (80065f0 <HAL_DMA_Start_IT+0x490>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d027      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2b      	ldr	r2, [pc, #172]	@ (80065f4 <HAL_DMA_Start_IT+0x494>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2a      	ldr	r2, [pc, #168]	@ (80065f8 <HAL_DMA_Start_IT+0x498>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01d      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a28      	ldr	r2, [pc, #160]	@ (80065fc <HAL_DMA_Start_IT+0x49c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a27      	ldr	r2, [pc, #156]	@ (8006600 <HAL_DMA_Start_IT+0x4a0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a25      	ldr	r2, [pc, #148]	@ (8006604 <HAL_DMA_Start_IT+0x4a4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a24      	ldr	r2, [pc, #144]	@ (8006608 <HAL_DMA_Start_IT+0x4a8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a22      	ldr	r2, [pc, #136]	@ (800660c <HAL_DMA_Start_IT+0x4ac>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_DMA_Start_IT+0x430>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a21      	ldr	r2, [pc, #132]	@ (8006610 <HAL_DMA_Start_IT+0x4b0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <HAL_DMA_Start_IT+0x442>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e012      	b.n	80065c8 <HAL_DMA_Start_IT+0x468>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0201 	orr.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e009      	b.n	80065c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494

08006634 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800663c:	f7ff f84a 	bl	80056d4 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e2dc      	b.n	8006c06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d008      	beq.n	800666a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2280      	movs	r2, #128	@ 0x80
 800665c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e2cd      	b.n	8006c06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a76      	ldr	r2, [pc, #472]	@ (8006848 <HAL_DMA_Abort+0x214>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d04a      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a74      	ldr	r2, [pc, #464]	@ (800684c <HAL_DMA_Abort+0x218>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d045      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a73      	ldr	r2, [pc, #460]	@ (8006850 <HAL_DMA_Abort+0x21c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d040      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a71      	ldr	r2, [pc, #452]	@ (8006854 <HAL_DMA_Abort+0x220>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d03b      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a70      	ldr	r2, [pc, #448]	@ (8006858 <HAL_DMA_Abort+0x224>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d036      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a6e      	ldr	r2, [pc, #440]	@ (800685c <HAL_DMA_Abort+0x228>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d031      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a6d      	ldr	r2, [pc, #436]	@ (8006860 <HAL_DMA_Abort+0x22c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d02c      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006864 <HAL_DMA_Abort+0x230>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d027      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a6a      	ldr	r2, [pc, #424]	@ (8006868 <HAL_DMA_Abort+0x234>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a68      	ldr	r2, [pc, #416]	@ (800686c <HAL_DMA_Abort+0x238>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01d      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a67      	ldr	r2, [pc, #412]	@ (8006870 <HAL_DMA_Abort+0x23c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a65      	ldr	r2, [pc, #404]	@ (8006874 <HAL_DMA_Abort+0x240>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a64      	ldr	r2, [pc, #400]	@ (8006878 <HAL_DMA_Abort+0x244>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a62      	ldr	r2, [pc, #392]	@ (800687c <HAL_DMA_Abort+0x248>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a61      	ldr	r2, [pc, #388]	@ (8006880 <HAL_DMA_Abort+0x24c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_DMA_Abort+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a5f      	ldr	r2, [pc, #380]	@ (8006884 <HAL_DMA_Abort+0x250>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_DMA_Abort+0xda>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_DMA_Abort+0xdc>
 800670e:	2300      	movs	r3, #0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 021e 	bic.w	r2, r2, #30
 8006722:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006732:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e00a      	b.n	8006752 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 020e 	bic.w	r2, r2, #14
 800674a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a3c      	ldr	r2, [pc, #240]	@ (8006848 <HAL_DMA_Abort+0x214>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d072      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a3a      	ldr	r2, [pc, #232]	@ (800684c <HAL_DMA_Abort+0x218>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d06d      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a39      	ldr	r2, [pc, #228]	@ (8006850 <HAL_DMA_Abort+0x21c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d068      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a37      	ldr	r2, [pc, #220]	@ (8006854 <HAL_DMA_Abort+0x220>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d063      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a36      	ldr	r2, [pc, #216]	@ (8006858 <HAL_DMA_Abort+0x224>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d05e      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a34      	ldr	r2, [pc, #208]	@ (800685c <HAL_DMA_Abort+0x228>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d059      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a33      	ldr	r2, [pc, #204]	@ (8006860 <HAL_DMA_Abort+0x22c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d054      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a31      	ldr	r2, [pc, #196]	@ (8006864 <HAL_DMA_Abort+0x230>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d04f      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a30      	ldr	r2, [pc, #192]	@ (8006868 <HAL_DMA_Abort+0x234>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d04a      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a2e      	ldr	r2, [pc, #184]	@ (800686c <HAL_DMA_Abort+0x238>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d045      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006870 <HAL_DMA_Abort+0x23c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d040      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006874 <HAL_DMA_Abort+0x240>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d03b      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006878 <HAL_DMA_Abort+0x244>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d036      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a28      	ldr	r2, [pc, #160]	@ (800687c <HAL_DMA_Abort+0x248>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d031      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a27      	ldr	r2, [pc, #156]	@ (8006880 <HAL_DMA_Abort+0x24c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d02c      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a25      	ldr	r2, [pc, #148]	@ (8006884 <HAL_DMA_Abort+0x250>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d027      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a24      	ldr	r2, [pc, #144]	@ (8006888 <HAL_DMA_Abort+0x254>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a22      	ldr	r2, [pc, #136]	@ (800688c <HAL_DMA_Abort+0x258>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01d      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a21      	ldr	r2, [pc, #132]	@ (8006890 <HAL_DMA_Abort+0x25c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1f      	ldr	r2, [pc, #124]	@ (8006894 <HAL_DMA_Abort+0x260>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1e      	ldr	r2, [pc, #120]	@ (8006898 <HAL_DMA_Abort+0x264>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1c      	ldr	r2, [pc, #112]	@ (800689c <HAL_DMA_Abort+0x268>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1b      	ldr	r2, [pc, #108]	@ (80068a0 <HAL_DMA_Abort+0x26c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <HAL_DMA_Abort+0x20e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a19      	ldr	r2, [pc, #100]	@ (80068a4 <HAL_DMA_Abort+0x270>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d132      	bne.n	80068a8 <HAL_DMA_Abort+0x274>
 8006842:	2301      	movs	r3, #1
 8006844:	e031      	b.n	80068aa <HAL_DMA_Abort+0x276>
 8006846:	bf00      	nop
 8006848:	40020010 	.word	0x40020010
 800684c:	40020028 	.word	0x40020028
 8006850:	40020040 	.word	0x40020040
 8006854:	40020058 	.word	0x40020058
 8006858:	40020070 	.word	0x40020070
 800685c:	40020088 	.word	0x40020088
 8006860:	400200a0 	.word	0x400200a0
 8006864:	400200b8 	.word	0x400200b8
 8006868:	40020410 	.word	0x40020410
 800686c:	40020428 	.word	0x40020428
 8006870:	40020440 	.word	0x40020440
 8006874:	40020458 	.word	0x40020458
 8006878:	40020470 	.word	0x40020470
 800687c:	40020488 	.word	0x40020488
 8006880:	400204a0 	.word	0x400204a0
 8006884:	400204b8 	.word	0x400204b8
 8006888:	58025408 	.word	0x58025408
 800688c:	5802541c 	.word	0x5802541c
 8006890:	58025430 	.word	0x58025430
 8006894:	58025444 	.word	0x58025444
 8006898:	58025458 	.word	0x58025458
 800689c:	5802546c 	.word	0x5802546c
 80068a0:	58025480 	.word	0x58025480
 80068a4:	58025494 	.word	0x58025494
 80068a8:	2300      	movs	r3, #0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006a78 <HAL_DMA_Abort+0x444>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d04a      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6b      	ldr	r2, [pc, #428]	@ (8006a7c <HAL_DMA_Abort+0x448>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d045      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006a80 <HAL_DMA_Abort+0x44c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d040      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a68      	ldr	r2, [pc, #416]	@ (8006a84 <HAL_DMA_Abort+0x450>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d03b      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a67      	ldr	r2, [pc, #412]	@ (8006a88 <HAL_DMA_Abort+0x454>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d036      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a65      	ldr	r2, [pc, #404]	@ (8006a8c <HAL_DMA_Abort+0x458>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d031      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a64      	ldr	r2, [pc, #400]	@ (8006a90 <HAL_DMA_Abort+0x45c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d02c      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a62      	ldr	r2, [pc, #392]	@ (8006a94 <HAL_DMA_Abort+0x460>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d027      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a61      	ldr	r2, [pc, #388]	@ (8006a98 <HAL_DMA_Abort+0x464>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5f      	ldr	r2, [pc, #380]	@ (8006a9c <HAL_DMA_Abort+0x468>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa0 <HAL_DMA_Abort+0x46c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a5c      	ldr	r2, [pc, #368]	@ (8006aa4 <HAL_DMA_Abort+0x470>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a5b      	ldr	r2, [pc, #364]	@ (8006aa8 <HAL_DMA_Abort+0x474>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a59      	ldr	r2, [pc, #356]	@ (8006aac <HAL_DMA_Abort+0x478>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a58      	ldr	r2, [pc, #352]	@ (8006ab0 <HAL_DMA_Abort+0x47c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_DMA_Abort+0x32a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a56      	ldr	r2, [pc, #344]	@ (8006ab4 <HAL_DMA_Abort+0x480>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <HAL_DMA_Abort+0x33c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e007      	b.n	8006980 <HAL_DMA_Abort+0x34c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006980:	e013      	b.n	80069aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006982:	f7fe fea7 	bl	80056d4 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b05      	cmp	r3, #5
 800698e:	d90c      	bls.n	80069aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2203      	movs	r2, #3
 800699a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e12d      	b.n	8006c06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006a78 <HAL_DMA_Abort+0x444>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d04a      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a7c <HAL_DMA_Abort+0x448>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d045      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006a80 <HAL_DMA_Abort+0x44c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d040      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006a84 <HAL_DMA_Abort+0x450>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d03b      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a29      	ldr	r2, [pc, #164]	@ (8006a88 <HAL_DMA_Abort+0x454>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d036      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a27      	ldr	r2, [pc, #156]	@ (8006a8c <HAL_DMA_Abort+0x458>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d031      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a26      	ldr	r2, [pc, #152]	@ (8006a90 <HAL_DMA_Abort+0x45c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d02c      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a24      	ldr	r2, [pc, #144]	@ (8006a94 <HAL_DMA_Abort+0x460>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d027      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a23      	ldr	r2, [pc, #140]	@ (8006a98 <HAL_DMA_Abort+0x464>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a21      	ldr	r2, [pc, #132]	@ (8006a9c <HAL_DMA_Abort+0x468>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a20      	ldr	r2, [pc, #128]	@ (8006aa0 <HAL_DMA_Abort+0x46c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <HAL_DMA_Abort+0x470>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <HAL_DMA_Abort+0x474>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_DMA_Abort+0x478>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <HAL_DMA_Abort+0x47c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_DMA_Abort+0x422>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <HAL_DMA_Abort+0x480>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_DMA_Abort+0x426>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_DMA_Abort+0x428>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02b      	beq.n	8006ab8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	223f      	movs	r2, #63	@ 0x3f
 8006a70:	409a      	lsls	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	e02a      	b.n	8006ace <HAL_DMA_Abort+0x49a>
 8006a78:	40020010 	.word	0x40020010
 8006a7c:	40020028 	.word	0x40020028
 8006a80:	40020040 	.word	0x40020040
 8006a84:	40020058 	.word	0x40020058
 8006a88:	40020070 	.word	0x40020070
 8006a8c:	40020088 	.word	0x40020088
 8006a90:	400200a0 	.word	0x400200a0
 8006a94:	400200b8 	.word	0x400200b8
 8006a98:	40020410 	.word	0x40020410
 8006a9c:	40020428 	.word	0x40020428
 8006aa0:	40020440 	.word	0x40020440
 8006aa4:	40020458 	.word	0x40020458
 8006aa8:	40020470 	.word	0x40020470
 8006aac:	40020488 	.word	0x40020488
 8006ab0:	400204a0 	.word	0x400204a0
 8006ab4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006abc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	409a      	lsls	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8006c10 <HAL_DMA_Abort+0x5dc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d072      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a4d      	ldr	r2, [pc, #308]	@ (8006c14 <HAL_DMA_Abort+0x5e0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d06d      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8006c18 <HAL_DMA_Abort+0x5e4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d068      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a4a      	ldr	r2, [pc, #296]	@ (8006c1c <HAL_DMA_Abort+0x5e8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d063      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a49      	ldr	r2, [pc, #292]	@ (8006c20 <HAL_DMA_Abort+0x5ec>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d05e      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a47      	ldr	r2, [pc, #284]	@ (8006c24 <HAL_DMA_Abort+0x5f0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d059      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a46      	ldr	r2, [pc, #280]	@ (8006c28 <HAL_DMA_Abort+0x5f4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d054      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a44      	ldr	r2, [pc, #272]	@ (8006c2c <HAL_DMA_Abort+0x5f8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d04f      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a43      	ldr	r2, [pc, #268]	@ (8006c30 <HAL_DMA_Abort+0x5fc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a41      	ldr	r2, [pc, #260]	@ (8006c34 <HAL_DMA_Abort+0x600>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a40      	ldr	r2, [pc, #256]	@ (8006c38 <HAL_DMA_Abort+0x604>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3e      	ldr	r2, [pc, #248]	@ (8006c3c <HAL_DMA_Abort+0x608>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c40 <HAL_DMA_Abort+0x60c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a3b      	ldr	r2, [pc, #236]	@ (8006c44 <HAL_DMA_Abort+0x610>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8006c48 <HAL_DMA_Abort+0x614>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a38      	ldr	r2, [pc, #224]	@ (8006c4c <HAL_DMA_Abort+0x618>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a37      	ldr	r2, [pc, #220]	@ (8006c50 <HAL_DMA_Abort+0x61c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a35      	ldr	r2, [pc, #212]	@ (8006c54 <HAL_DMA_Abort+0x620>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a34      	ldr	r2, [pc, #208]	@ (8006c58 <HAL_DMA_Abort+0x624>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <HAL_DMA_Abort+0x628>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a31      	ldr	r2, [pc, #196]	@ (8006c60 <HAL_DMA_Abort+0x62c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8006c64 <HAL_DMA_Abort+0x630>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2e      	ldr	r2, [pc, #184]	@ (8006c68 <HAL_DMA_Abort+0x634>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_Abort+0x58a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <HAL_DMA_Abort+0x638>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_DMA_Abort+0x58e>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_DMA_Abort+0x590>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006bd0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006be8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006bf2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40020010 	.word	0x40020010
 8006c14:	40020028 	.word	0x40020028
 8006c18:	40020040 	.word	0x40020040
 8006c1c:	40020058 	.word	0x40020058
 8006c20:	40020070 	.word	0x40020070
 8006c24:	40020088 	.word	0x40020088
 8006c28:	400200a0 	.word	0x400200a0
 8006c2c:	400200b8 	.word	0x400200b8
 8006c30:	40020410 	.word	0x40020410
 8006c34:	40020428 	.word	0x40020428
 8006c38:	40020440 	.word	0x40020440
 8006c3c:	40020458 	.word	0x40020458
 8006c40:	40020470 	.word	0x40020470
 8006c44:	40020488 	.word	0x40020488
 8006c48:	400204a0 	.word	0x400204a0
 8006c4c:	400204b8 	.word	0x400204b8
 8006c50:	58025408 	.word	0x58025408
 8006c54:	5802541c 	.word	0x5802541c
 8006c58:	58025430 	.word	0x58025430
 8006c5c:	58025444 	.word	0x58025444
 8006c60:	58025458 	.word	0x58025458
 8006c64:	5802546c 	.word	0x5802546c
 8006c68:	58025480 	.word	0x58025480
 8006c6c:	58025494 	.word	0x58025494

08006c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e237      	b.n	80070f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d004      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2280      	movs	r2, #128	@ 0x80
 8006c92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e22c      	b.n	80070f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006e10 <HAL_DMA_Abort_IT+0x1a0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d04a      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e14 <HAL_DMA_Abort_IT+0x1a4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d045      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a59      	ldr	r2, [pc, #356]	@ (8006e18 <HAL_DMA_Abort_IT+0x1a8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d040      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a58      	ldr	r2, [pc, #352]	@ (8006e1c <HAL_DMA_Abort_IT+0x1ac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d03b      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a56      	ldr	r2, [pc, #344]	@ (8006e20 <HAL_DMA_Abort_IT+0x1b0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d036      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a55      	ldr	r2, [pc, #340]	@ (8006e24 <HAL_DMA_Abort_IT+0x1b4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d031      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a53      	ldr	r2, [pc, #332]	@ (8006e28 <HAL_DMA_Abort_IT+0x1b8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d02c      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a52      	ldr	r2, [pc, #328]	@ (8006e2c <HAL_DMA_Abort_IT+0x1bc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d027      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a50      	ldr	r2, [pc, #320]	@ (8006e30 <HAL_DMA_Abort_IT+0x1c0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8006e34 <HAL_DMA_Abort_IT+0x1c4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d01d      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a4d      	ldr	r2, [pc, #308]	@ (8006e38 <HAL_DMA_Abort_IT+0x1c8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8006e3c <HAL_DMA_Abort_IT+0x1cc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a4a      	ldr	r2, [pc, #296]	@ (8006e40 <HAL_DMA_Abort_IT+0x1d0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a49      	ldr	r2, [pc, #292]	@ (8006e44 <HAL_DMA_Abort_IT+0x1d4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a47      	ldr	r2, [pc, #284]	@ (8006e48 <HAL_DMA_Abort_IT+0x1d8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_DMA_Abort_IT+0xc8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a46      	ldr	r2, [pc, #280]	@ (8006e4c <HAL_DMA_Abort_IT+0x1dc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_DMA_Abort_IT+0xcc>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_DMA_Abort_IT+0xce>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8086 	beq.w	8006e50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2204      	movs	r2, #4
 8006d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	@ (8006e10 <HAL_DMA_Abort_IT+0x1a0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d04a      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006e14 <HAL_DMA_Abort_IT+0x1a4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d045      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2c      	ldr	r2, [pc, #176]	@ (8006e18 <HAL_DMA_Abort_IT+0x1a8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d040      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <HAL_DMA_Abort_IT+0x1ac>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d03b      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a29      	ldr	r2, [pc, #164]	@ (8006e20 <HAL_DMA_Abort_IT+0x1b0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d036      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a28      	ldr	r2, [pc, #160]	@ (8006e24 <HAL_DMA_Abort_IT+0x1b4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d031      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	@ (8006e28 <HAL_DMA_Abort_IT+0x1b8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02c      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a25      	ldr	r2, [pc, #148]	@ (8006e2c <HAL_DMA_Abort_IT+0x1bc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d027      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a23      	ldr	r2, [pc, #140]	@ (8006e30 <HAL_DMA_Abort_IT+0x1c0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d022      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a22      	ldr	r2, [pc, #136]	@ (8006e34 <HAL_DMA_Abort_IT+0x1c4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01d      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a20      	ldr	r2, [pc, #128]	@ (8006e38 <HAL_DMA_Abort_IT+0x1c8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <HAL_DMA_Abort_IT+0x1cc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e40 <HAL_DMA_Abort_IT+0x1d0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e44 <HAL_DMA_Abort_IT+0x1d4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e48 <HAL_DMA_Abort_IT+0x1d8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_DMA_Abort_IT+0x17c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a19      	ldr	r2, [pc, #100]	@ (8006e4c <HAL_DMA_Abort_IT+0x1dc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_DMA_Abort_IT+0x18e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e178      	b.n	80070f0 <HAL_DMA_Abort_IT+0x480>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e16f      	b.n	80070f0 <HAL_DMA_Abort_IT+0x480>
 8006e10:	40020010 	.word	0x40020010
 8006e14:	40020028 	.word	0x40020028
 8006e18:	40020040 	.word	0x40020040
 8006e1c:	40020058 	.word	0x40020058
 8006e20:	40020070 	.word	0x40020070
 8006e24:	40020088 	.word	0x40020088
 8006e28:	400200a0 	.word	0x400200a0
 8006e2c:	400200b8 	.word	0x400200b8
 8006e30:	40020410 	.word	0x40020410
 8006e34:	40020428 	.word	0x40020428
 8006e38:	40020440 	.word	0x40020440
 8006e3c:	40020458 	.word	0x40020458
 8006e40:	40020470 	.word	0x40020470
 8006e44:	40020488 	.word	0x40020488
 8006e48:	400204a0 	.word	0x400204a0
 8006e4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 020e 	bic.w	r2, r2, #14
 8006e5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a6c      	ldr	r2, [pc, #432]	@ (8007018 <HAL_DMA_Abort_IT+0x3a8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a6b      	ldr	r2, [pc, #428]	@ (800701c <HAL_DMA_Abort_IT+0x3ac>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a69      	ldr	r2, [pc, #420]	@ (8007020 <HAL_DMA_Abort_IT+0x3b0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a68      	ldr	r2, [pc, #416]	@ (8007024 <HAL_DMA_Abort_IT+0x3b4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a66      	ldr	r2, [pc, #408]	@ (8007028 <HAL_DMA_Abort_IT+0x3b8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a65      	ldr	r2, [pc, #404]	@ (800702c <HAL_DMA_Abort_IT+0x3bc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a63      	ldr	r2, [pc, #396]	@ (8007030 <HAL_DMA_Abort_IT+0x3c0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a62      	ldr	r2, [pc, #392]	@ (8007034 <HAL_DMA_Abort_IT+0x3c4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a60      	ldr	r2, [pc, #384]	@ (8007038 <HAL_DMA_Abort_IT+0x3c8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800703c <HAL_DMA_Abort_IT+0x3cc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8007040 <HAL_DMA_Abort_IT+0x3d0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a5c      	ldr	r2, [pc, #368]	@ (8007044 <HAL_DMA_Abort_IT+0x3d4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5a      	ldr	r2, [pc, #360]	@ (8007048 <HAL_DMA_Abort_IT+0x3d8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a59      	ldr	r2, [pc, #356]	@ (800704c <HAL_DMA_Abort_IT+0x3dc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a57      	ldr	r2, [pc, #348]	@ (8007050 <HAL_DMA_Abort_IT+0x3e0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x290>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a56      	ldr	r2, [pc, #344]	@ (8007054 <HAL_DMA_Abort_IT+0x3e4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <HAL_DMA_Abort_IT+0x2a2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0201 	bic.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <HAL_DMA_Abort_IT+0x2b2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a3c      	ldr	r2, [pc, #240]	@ (8007018 <HAL_DMA_Abort_IT+0x3a8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d072      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a3a      	ldr	r2, [pc, #232]	@ (800701c <HAL_DMA_Abort_IT+0x3ac>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d06d      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a39      	ldr	r2, [pc, #228]	@ (8007020 <HAL_DMA_Abort_IT+0x3b0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d068      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a37      	ldr	r2, [pc, #220]	@ (8007024 <HAL_DMA_Abort_IT+0x3b4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d063      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a36      	ldr	r2, [pc, #216]	@ (8007028 <HAL_DMA_Abort_IT+0x3b8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d05e      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a34      	ldr	r2, [pc, #208]	@ (800702c <HAL_DMA_Abort_IT+0x3bc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d059      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a33      	ldr	r2, [pc, #204]	@ (8007030 <HAL_DMA_Abort_IT+0x3c0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d054      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a31      	ldr	r2, [pc, #196]	@ (8007034 <HAL_DMA_Abort_IT+0x3c4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04f      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a30      	ldr	r2, [pc, #192]	@ (8007038 <HAL_DMA_Abort_IT+0x3c8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d04a      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2e      	ldr	r2, [pc, #184]	@ (800703c <HAL_DMA_Abort_IT+0x3cc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d045      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8007040 <HAL_DMA_Abort_IT+0x3d0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d040      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2b      	ldr	r2, [pc, #172]	@ (8007044 <HAL_DMA_Abort_IT+0x3d4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d03b      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007048 <HAL_DMA_Abort_IT+0x3d8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d036      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a28      	ldr	r2, [pc, #160]	@ (800704c <HAL_DMA_Abort_IT+0x3dc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d031      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a27      	ldr	r2, [pc, #156]	@ (8007050 <HAL_DMA_Abort_IT+0x3e0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d02c      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a25      	ldr	r2, [pc, #148]	@ (8007054 <HAL_DMA_Abort_IT+0x3e4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d027      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a24      	ldr	r2, [pc, #144]	@ (8007058 <HAL_DMA_Abort_IT+0x3e8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a22      	ldr	r2, [pc, #136]	@ (800705c <HAL_DMA_Abort_IT+0x3ec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01d      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <HAL_DMA_Abort_IT+0x3f0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <HAL_DMA_Abort_IT+0x3f4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_DMA_Abort_IT+0x3f8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <HAL_DMA_Abort_IT+0x3fc>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_DMA_Abort_IT+0x400>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_DMA_Abort_IT+0x3a2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a19      	ldr	r2, [pc, #100]	@ (8007074 <HAL_DMA_Abort_IT+0x404>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d132      	bne.n	8007078 <HAL_DMA_Abort_IT+0x408>
 8007012:	2301      	movs	r3, #1
 8007014:	e031      	b.n	800707a <HAL_DMA_Abort_IT+0x40a>
 8007016:	bf00      	nop
 8007018:	40020010 	.word	0x40020010
 800701c:	40020028 	.word	0x40020028
 8007020:	40020040 	.word	0x40020040
 8007024:	40020058 	.word	0x40020058
 8007028:	40020070 	.word	0x40020070
 800702c:	40020088 	.word	0x40020088
 8007030:	400200a0 	.word	0x400200a0
 8007034:	400200b8 	.word	0x400200b8
 8007038:	40020410 	.word	0x40020410
 800703c:	40020428 	.word	0x40020428
 8007040:	40020440 	.word	0x40020440
 8007044:	40020458 	.word	0x40020458
 8007048:	40020470 	.word	0x40020470
 800704c:	40020488 	.word	0x40020488
 8007050:	400204a0 	.word	0x400204a0
 8007054:	400204b8 	.word	0x400204b8
 8007058:	58025408 	.word	0x58025408
 800705c:	5802541c 	.word	0x5802541c
 8007060:	58025430 	.word	0x58025430
 8007064:	58025444 	.word	0x58025444
 8007068:	58025458 	.word	0x58025458
 800706c:	5802546c 	.word	0x5802546c
 8007070:	58025480 	.word	0x58025480
 8007074:	58025494 	.word	0x58025494
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d028      	beq.n	80070d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800708c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2201      	movs	r2, #1
 800709e:	409a      	lsls	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80070ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80070ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	@ 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007108:	4b67      	ldr	r3, [pc, #412]	@ (80072a8 <HAL_DMA_IRQHandler+0x1ac>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a67      	ldr	r2, [pc, #412]	@ (80072ac <HAL_DMA_IRQHandler+0x1b0>)
 800710e:	fba2 2303 	umull	r2, r3, r2, r3
 8007112:	0a9b      	lsrs	r3, r3, #10
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007120:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5f      	ldr	r2, [pc, #380]	@ (80072b0 <HAL_DMA_IRQHandler+0x1b4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d04a      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5d      	ldr	r2, [pc, #372]	@ (80072b4 <HAL_DMA_IRQHandler+0x1b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5c      	ldr	r2, [pc, #368]	@ (80072b8 <HAL_DMA_IRQHandler+0x1bc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5a      	ldr	r2, [pc, #360]	@ (80072bc <HAL_DMA_IRQHandler+0x1c0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d03b      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a59      	ldr	r2, [pc, #356]	@ (80072c0 <HAL_DMA_IRQHandler+0x1c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d036      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a57      	ldr	r2, [pc, #348]	@ (80072c4 <HAL_DMA_IRQHandler+0x1c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d031      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a56      	ldr	r2, [pc, #344]	@ (80072c8 <HAL_DMA_IRQHandler+0x1cc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d02c      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a54      	ldr	r2, [pc, #336]	@ (80072cc <HAL_DMA_IRQHandler+0x1d0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d027      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a53      	ldr	r2, [pc, #332]	@ (80072d0 <HAL_DMA_IRQHandler+0x1d4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a51      	ldr	r2, [pc, #324]	@ (80072d4 <HAL_DMA_IRQHandler+0x1d8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a50      	ldr	r2, [pc, #320]	@ (80072d8 <HAL_DMA_IRQHandler+0x1dc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a4e      	ldr	r2, [pc, #312]	@ (80072dc <HAL_DMA_IRQHandler+0x1e0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a4d      	ldr	r2, [pc, #308]	@ (80072e0 <HAL_DMA_IRQHandler+0x1e4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a4b      	ldr	r2, [pc, #300]	@ (80072e4 <HAL_DMA_IRQHandler+0x1e8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a4a      	ldr	r2, [pc, #296]	@ (80072e8 <HAL_DMA_IRQHandler+0x1ec>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_DMA_IRQHandler+0xd2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a48      	ldr	r2, [pc, #288]	@ (80072ec <HAL_DMA_IRQHandler+0x1f0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d101      	bne.n	80071d2 <HAL_DMA_IRQHandler+0xd6>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <HAL_DMA_IRQHandler+0xd8>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 842b 	beq.w	8007a30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2208      	movs	r2, #8
 80071e4:	409a      	lsls	r2, r3
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 80a2 	beq.w	8007334 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2e      	ldr	r2, [pc, #184]	@ (80072b0 <HAL_DMA_IRQHandler+0x1b4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04a      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2d      	ldr	r2, [pc, #180]	@ (80072b4 <HAL_DMA_IRQHandler+0x1b8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d045      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2b      	ldr	r2, [pc, #172]	@ (80072b8 <HAL_DMA_IRQHandler+0x1bc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d040      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2a      	ldr	r2, [pc, #168]	@ (80072bc <HAL_DMA_IRQHandler+0x1c0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d03b      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a28      	ldr	r2, [pc, #160]	@ (80072c0 <HAL_DMA_IRQHandler+0x1c4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d036      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a27      	ldr	r2, [pc, #156]	@ (80072c4 <HAL_DMA_IRQHandler+0x1c8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d031      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	@ (80072c8 <HAL_DMA_IRQHandler+0x1cc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02c      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a24      	ldr	r2, [pc, #144]	@ (80072cc <HAL_DMA_IRQHandler+0x1d0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d027      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	@ (80072d0 <HAL_DMA_IRQHandler+0x1d4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d022      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	@ (80072d4 <HAL_DMA_IRQHandler+0x1d8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1f      	ldr	r2, [pc, #124]	@ (80072d8 <HAL_DMA_IRQHandler+0x1dc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d018      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1e      	ldr	r2, [pc, #120]	@ (80072dc <HAL_DMA_IRQHandler+0x1e0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1c      	ldr	r2, [pc, #112]	@ (80072e0 <HAL_DMA_IRQHandler+0x1e4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1b      	ldr	r2, [pc, #108]	@ (80072e4 <HAL_DMA_IRQHandler+0x1e8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a19      	ldr	r2, [pc, #100]	@ (80072e8 <HAL_DMA_IRQHandler+0x1ec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_DMA_IRQHandler+0x194>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a18      	ldr	r2, [pc, #96]	@ (80072ec <HAL_DMA_IRQHandler+0x1f0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d12f      	bne.n	80072f0 <HAL_DMA_IRQHandler+0x1f4>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e02e      	b.n	8007304 <HAL_DMA_IRQHandler+0x208>
 80072a6:	bf00      	nop
 80072a8:	240000c0 	.word	0x240000c0
 80072ac:	1b4e81b5 	.word	0x1b4e81b5
 80072b0:	40020010 	.word	0x40020010
 80072b4:	40020028 	.word	0x40020028
 80072b8:	40020040 	.word	0x40020040
 80072bc:	40020058 	.word	0x40020058
 80072c0:	40020070 	.word	0x40020070
 80072c4:	40020088 	.word	0x40020088
 80072c8:	400200a0 	.word	0x400200a0
 80072cc:	400200b8 	.word	0x400200b8
 80072d0:	40020410 	.word	0x40020410
 80072d4:	40020428 	.word	0x40020428
 80072d8:	40020440 	.word	0x40020440
 80072dc:	40020458 	.word	0x40020458
 80072e0:	40020470 	.word	0x40020470
 80072e4:	40020488 	.word	0x40020488
 80072e8:	400204a0 	.word	0x400204a0
 80072ec:	400204b8 	.word	0x400204b8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf14      	ite	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	2300      	moveq	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0204 	bic.w	r2, r2, #4
 8007316:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2208      	movs	r2, #8
 8007322:	409a      	lsls	r2, r3
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800732c:	f043 0201 	orr.w	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	fa22 f303 	lsr.w	r3, r2, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d06e      	beq.n	8007428 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a69      	ldr	r2, [pc, #420]	@ (80074f4 <HAL_DMA_IRQHandler+0x3f8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d04a      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a67      	ldr	r2, [pc, #412]	@ (80074f8 <HAL_DMA_IRQHandler+0x3fc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d045      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a66      	ldr	r2, [pc, #408]	@ (80074fc <HAL_DMA_IRQHandler+0x400>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d040      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a64      	ldr	r2, [pc, #400]	@ (8007500 <HAL_DMA_IRQHandler+0x404>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d03b      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a63      	ldr	r2, [pc, #396]	@ (8007504 <HAL_DMA_IRQHandler+0x408>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d036      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a61      	ldr	r2, [pc, #388]	@ (8007508 <HAL_DMA_IRQHandler+0x40c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d031      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a60      	ldr	r2, [pc, #384]	@ (800750c <HAL_DMA_IRQHandler+0x410>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d02c      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a5e      	ldr	r2, [pc, #376]	@ (8007510 <HAL_DMA_IRQHandler+0x414>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d027      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5d      	ldr	r2, [pc, #372]	@ (8007514 <HAL_DMA_IRQHandler+0x418>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5b      	ldr	r2, [pc, #364]	@ (8007518 <HAL_DMA_IRQHandler+0x41c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a5a      	ldr	r2, [pc, #360]	@ (800751c <HAL_DMA_IRQHandler+0x420>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a58      	ldr	r2, [pc, #352]	@ (8007520 <HAL_DMA_IRQHandler+0x424>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a57      	ldr	r2, [pc, #348]	@ (8007524 <HAL_DMA_IRQHandler+0x428>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a55      	ldr	r2, [pc, #340]	@ (8007528 <HAL_DMA_IRQHandler+0x42c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a54      	ldr	r2, [pc, #336]	@ (800752c <HAL_DMA_IRQHandler+0x430>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_DMA_IRQHandler+0x2ee>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a52      	ldr	r2, [pc, #328]	@ (8007530 <HAL_DMA_IRQHandler+0x434>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d10a      	bne.n	8007400 <HAL_DMA_IRQHandler+0x304>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bf14      	ite	ne
 80073f8:	2301      	movne	r3, #1
 80073fa:	2300      	moveq	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	e003      	b.n	8007408 <HAL_DMA_IRQHandler+0x30c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00d      	beq.n	8007428 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007420:	f043 0202 	orr.w	r2, r3, #2
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2204      	movs	r2, #4
 8007432:	409a      	lsls	r2, r3
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 808f 	beq.w	800755c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2c      	ldr	r2, [pc, #176]	@ (80074f4 <HAL_DMA_IRQHandler+0x3f8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d04a      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2a      	ldr	r2, [pc, #168]	@ (80074f8 <HAL_DMA_IRQHandler+0x3fc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d045      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a29      	ldr	r2, [pc, #164]	@ (80074fc <HAL_DMA_IRQHandler+0x400>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d040      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a27      	ldr	r2, [pc, #156]	@ (8007500 <HAL_DMA_IRQHandler+0x404>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d03b      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a26      	ldr	r2, [pc, #152]	@ (8007504 <HAL_DMA_IRQHandler+0x408>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d036      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a24      	ldr	r2, [pc, #144]	@ (8007508 <HAL_DMA_IRQHandler+0x40c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d031      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a23      	ldr	r2, [pc, #140]	@ (800750c <HAL_DMA_IRQHandler+0x410>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d02c      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a21      	ldr	r2, [pc, #132]	@ (8007510 <HAL_DMA_IRQHandler+0x414>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d027      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a20      	ldr	r2, [pc, #128]	@ (8007514 <HAL_DMA_IRQHandler+0x418>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d022      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1e      	ldr	r2, [pc, #120]	@ (8007518 <HAL_DMA_IRQHandler+0x41c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01d      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <HAL_DMA_IRQHandler+0x420>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d018      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007520 <HAL_DMA_IRQHandler+0x424>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007524 <HAL_DMA_IRQHandler+0x428>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a18      	ldr	r2, [pc, #96]	@ (8007528 <HAL_DMA_IRQHandler+0x42c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a17      	ldr	r2, [pc, #92]	@ (800752c <HAL_DMA_IRQHandler+0x430>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_DMA_IRQHandler+0x3e2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a15      	ldr	r2, [pc, #84]	@ (8007530 <HAL_DMA_IRQHandler+0x434>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d12a      	bne.n	8007534 <HAL_DMA_IRQHandler+0x438>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	e023      	b.n	800753c <HAL_DMA_IRQHandler+0x440>
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00d      	beq.n	800755c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2204      	movs	r2, #4
 800754a:	409a      	lsls	r2, r3
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	f043 0204 	orr.w	r2, r3, #4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	2210      	movs	r2, #16
 8007566:	409a      	lsls	r2, r3
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80a6 	beq.w	80076be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a85      	ldr	r2, [pc, #532]	@ (800778c <HAL_DMA_IRQHandler+0x690>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d04a      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a83      	ldr	r2, [pc, #524]	@ (8007790 <HAL_DMA_IRQHandler+0x694>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d045      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a82      	ldr	r2, [pc, #520]	@ (8007794 <HAL_DMA_IRQHandler+0x698>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d040      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a80      	ldr	r2, [pc, #512]	@ (8007798 <HAL_DMA_IRQHandler+0x69c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d03b      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7f      	ldr	r2, [pc, #508]	@ (800779c <HAL_DMA_IRQHandler+0x6a0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d036      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a7d      	ldr	r2, [pc, #500]	@ (80077a0 <HAL_DMA_IRQHandler+0x6a4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d031      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7c      	ldr	r2, [pc, #496]	@ (80077a4 <HAL_DMA_IRQHandler+0x6a8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d02c      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7a      	ldr	r2, [pc, #488]	@ (80077a8 <HAL_DMA_IRQHandler+0x6ac>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d027      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a79      	ldr	r2, [pc, #484]	@ (80077ac <HAL_DMA_IRQHandler+0x6b0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d022      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a77      	ldr	r2, [pc, #476]	@ (80077b0 <HAL_DMA_IRQHandler+0x6b4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01d      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a76      	ldr	r2, [pc, #472]	@ (80077b4 <HAL_DMA_IRQHandler+0x6b8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d018      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a74      	ldr	r2, [pc, #464]	@ (80077b8 <HAL_DMA_IRQHandler+0x6bc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a73      	ldr	r2, [pc, #460]	@ (80077bc <HAL_DMA_IRQHandler+0x6c0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a71      	ldr	r2, [pc, #452]	@ (80077c0 <HAL_DMA_IRQHandler+0x6c4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a70      	ldr	r2, [pc, #448]	@ (80077c4 <HAL_DMA_IRQHandler+0x6c8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_DMA_IRQHandler+0x516>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a6e      	ldr	r2, [pc, #440]	@ (80077c8 <HAL_DMA_IRQHandler+0x6cc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10a      	bne.n	8007628 <HAL_DMA_IRQHandler+0x52c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	bf14      	ite	ne
 8007620:	2301      	movne	r3, #1
 8007622:	2300      	moveq	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	e009      	b.n	800763c <HAL_DMA_IRQHandler+0x540>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d03e      	beq.n	80076be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	2210      	movs	r2, #16
 800764a:	409a      	lsls	r2, r3
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d024      	beq.n	80076be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
 800767c:	e01f      	b.n	80076be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01b      	beq.n	80076be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	e016      	b.n	80076be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0208 	bic.w	r2, r2, #8
 80076ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2220      	movs	r2, #32
 80076c8:	409a      	lsls	r2, r3
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	4013      	ands	r3, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8110 	beq.w	80078f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2c      	ldr	r2, [pc, #176]	@ (800778c <HAL_DMA_IRQHandler+0x690>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d04a      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007790 <HAL_DMA_IRQHandler+0x694>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d045      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a29      	ldr	r2, [pc, #164]	@ (8007794 <HAL_DMA_IRQHandler+0x698>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d040      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a28      	ldr	r2, [pc, #160]	@ (8007798 <HAL_DMA_IRQHandler+0x69c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d03b      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <HAL_DMA_IRQHandler+0x6a0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d036      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a25      	ldr	r2, [pc, #148]	@ (80077a0 <HAL_DMA_IRQHandler+0x6a4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d031      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a23      	ldr	r2, [pc, #140]	@ (80077a4 <HAL_DMA_IRQHandler+0x6a8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d02c      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a22      	ldr	r2, [pc, #136]	@ (80077a8 <HAL_DMA_IRQHandler+0x6ac>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d027      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a20      	ldr	r2, [pc, #128]	@ (80077ac <HAL_DMA_IRQHandler+0x6b0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d022      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <HAL_DMA_IRQHandler+0x6b4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01d      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1d      	ldr	r2, [pc, #116]	@ (80077b4 <HAL_DMA_IRQHandler+0x6b8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d018      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1c      	ldr	r2, [pc, #112]	@ (80077b8 <HAL_DMA_IRQHandler+0x6bc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d013      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1a      	ldr	r2, [pc, #104]	@ (80077bc <HAL_DMA_IRQHandler+0x6c0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00e      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a19      	ldr	r2, [pc, #100]	@ (80077c0 <HAL_DMA_IRQHandler+0x6c4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d009      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a17      	ldr	r2, [pc, #92]	@ (80077c4 <HAL_DMA_IRQHandler+0x6c8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_DMA_IRQHandler+0x678>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a16      	ldr	r2, [pc, #88]	@ (80077c8 <HAL_DMA_IRQHandler+0x6cc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d12b      	bne.n	80077cc <HAL_DMA_IRQHandler+0x6d0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf14      	ite	ne
 8007782:	2301      	movne	r3, #1
 8007784:	2300      	moveq	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	e02a      	b.n	80077e0 <HAL_DMA_IRQHandler+0x6e4>
 800778a:	bf00      	nop
 800778c:	40020010 	.word	0x40020010
 8007790:	40020028 	.word	0x40020028
 8007794:	40020040 	.word	0x40020040
 8007798:	40020058 	.word	0x40020058
 800779c:	40020070 	.word	0x40020070
 80077a0:	40020088 	.word	0x40020088
 80077a4:	400200a0 	.word	0x400200a0
 80077a8:	400200b8 	.word	0x400200b8
 80077ac:	40020410 	.word	0x40020410
 80077b0:	40020428 	.word	0x40020428
 80077b4:	40020440 	.word	0x40020440
 80077b8:	40020458 	.word	0x40020458
 80077bc:	40020470 	.word	0x40020470
 80077c0:	40020488 	.word	0x40020488
 80077c4:	400204a0 	.word	0x400204a0
 80077c8:	400204b8 	.word	0x400204b8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bf14      	ite	ne
 80077da:	2301      	movne	r3, #1
 80077dc:	2300      	moveq	r3, #0
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8087 	beq.w	80078f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	2220      	movs	r2, #32
 80077f0:	409a      	lsls	r2, r3
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d139      	bne.n	8007876 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0216 	bic.w	r2, r2, #22
 8007810:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695a      	ldr	r2, [r3, #20]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007820:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <HAL_DMA_IRQHandler+0x736>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0208 	bic.w	r2, r2, #8
 8007840:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	223f      	movs	r2, #63	@ 0x3f
 800784c:	409a      	lsls	r2, r3
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8382 	beq.w	8007f70 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
          }
          return;
 8007874:	e37c      	b.n	8007f70 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d018      	beq.n	80078b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d108      	bne.n	80078a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	2b00      	cmp	r3, #0
 8007898:	d02c      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
 80078a2:	e027      	b.n	80078f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d023      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
 80078b4:	e01e      	b.n	80078f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10f      	bne.n	80078e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0210 	bic.w	r2, r2, #16
 80078d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 833e 	beq.w	8007f7a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8088 	beq.w	8007a1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2204      	movs	r2, #4
 8007910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a89      	ldr	r2, [pc, #548]	@ (8007b40 <HAL_DMA_IRQHandler+0xa44>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d04a      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a88      	ldr	r2, [pc, #544]	@ (8007b44 <HAL_DMA_IRQHandler+0xa48>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d045      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a86      	ldr	r2, [pc, #536]	@ (8007b48 <HAL_DMA_IRQHandler+0xa4c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d040      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a85      	ldr	r2, [pc, #532]	@ (8007b4c <HAL_DMA_IRQHandler+0xa50>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d03b      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a83      	ldr	r2, [pc, #524]	@ (8007b50 <HAL_DMA_IRQHandler+0xa54>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d036      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a82      	ldr	r2, [pc, #520]	@ (8007b54 <HAL_DMA_IRQHandler+0xa58>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d031      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a80      	ldr	r2, [pc, #512]	@ (8007b58 <HAL_DMA_IRQHandler+0xa5c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d02c      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a7f      	ldr	r2, [pc, #508]	@ (8007b5c <HAL_DMA_IRQHandler+0xa60>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d027      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a7d      	ldr	r2, [pc, #500]	@ (8007b60 <HAL_DMA_IRQHandler+0xa64>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d022      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a7c      	ldr	r2, [pc, #496]	@ (8007b64 <HAL_DMA_IRQHandler+0xa68>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d01d      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a7a      	ldr	r2, [pc, #488]	@ (8007b68 <HAL_DMA_IRQHandler+0xa6c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d018      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a79      	ldr	r2, [pc, #484]	@ (8007b6c <HAL_DMA_IRQHandler+0xa70>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d013      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a77      	ldr	r2, [pc, #476]	@ (8007b70 <HAL_DMA_IRQHandler+0xa74>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00e      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a76      	ldr	r2, [pc, #472]	@ (8007b74 <HAL_DMA_IRQHandler+0xa78>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d009      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a74      	ldr	r2, [pc, #464]	@ (8007b78 <HAL_DMA_IRQHandler+0xa7c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x8b8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a73      	ldr	r2, [pc, #460]	@ (8007b7c <HAL_DMA_IRQHandler+0xa80>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d108      	bne.n	80079c6 <HAL_DMA_IRQHandler+0x8ca>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e007      	b.n	80079d6 <HAL_DMA_IRQHandler+0x8da>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079de:	429a      	cmp	r2, r3
 80079e0:	d307      	bcc.n	80079f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f2      	bne.n	80079d6 <HAL_DMA_IRQHandler+0x8da>
 80079f0:	e000      	b.n	80079f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007a0a:	e003      	b.n	8007a14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 82aa 	beq.w	8007f7a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	e2a4      	b.n	8007f7a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a52      	ldr	r2, [pc, #328]	@ (8007b80 <HAL_DMA_IRQHandler+0xa84>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d04a      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a51      	ldr	r2, [pc, #324]	@ (8007b84 <HAL_DMA_IRQHandler+0xa88>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d045      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a4f      	ldr	r2, [pc, #316]	@ (8007b88 <HAL_DMA_IRQHandler+0xa8c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d040      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4e      	ldr	r2, [pc, #312]	@ (8007b8c <HAL_DMA_IRQHandler+0xa90>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d03b      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8007b90 <HAL_DMA_IRQHandler+0xa94>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d036      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a4b      	ldr	r2, [pc, #300]	@ (8007b94 <HAL_DMA_IRQHandler+0xa98>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d031      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a49      	ldr	r2, [pc, #292]	@ (8007b98 <HAL_DMA_IRQHandler+0xa9c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d02c      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a48      	ldr	r2, [pc, #288]	@ (8007b9c <HAL_DMA_IRQHandler+0xaa0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d027      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a46      	ldr	r2, [pc, #280]	@ (8007ba0 <HAL_DMA_IRQHandler+0xaa4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d022      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a45      	ldr	r2, [pc, #276]	@ (8007ba4 <HAL_DMA_IRQHandler+0xaa8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d01d      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a43      	ldr	r2, [pc, #268]	@ (8007ba8 <HAL_DMA_IRQHandler+0xaac>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d018      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a42      	ldr	r2, [pc, #264]	@ (8007bac <HAL_DMA_IRQHandler+0xab0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d013      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a40      	ldr	r2, [pc, #256]	@ (8007bb0 <HAL_DMA_IRQHandler+0xab4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8007bb4 <HAL_DMA_IRQHandler+0xab8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d009      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8007bb8 <HAL_DMA_IRQHandler+0xabc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d004      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x9d4>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3c      	ldr	r2, [pc, #240]	@ (8007bbc <HAL_DMA_IRQHandler+0xac0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <HAL_DMA_IRQHandler+0x9d8>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <HAL_DMA_IRQHandler+0x9da>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 824f 	beq.w	8007f7a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae8:	f003 031f 	and.w	r3, r3, #31
 8007aec:	2204      	movs	r2, #4
 8007aee:	409a      	lsls	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4013      	ands	r3, r2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 80dd 	beq.w	8007cb4 <HAL_DMA_IRQHandler+0xbb8>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80d7 	beq.w	8007cb4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	2204      	movs	r2, #4
 8007b10:	409a      	lsls	r2, r3
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d059      	beq.n	8007bd4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d14a      	bne.n	8007bc0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8220 	beq.w	8007f74 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b3c:	e21a      	b.n	8007f74 <HAL_DMA_IRQHandler+0xe78>
 8007b3e:	bf00      	nop
 8007b40:	40020010 	.word	0x40020010
 8007b44:	40020028 	.word	0x40020028
 8007b48:	40020040 	.word	0x40020040
 8007b4c:	40020058 	.word	0x40020058
 8007b50:	40020070 	.word	0x40020070
 8007b54:	40020088 	.word	0x40020088
 8007b58:	400200a0 	.word	0x400200a0
 8007b5c:	400200b8 	.word	0x400200b8
 8007b60:	40020410 	.word	0x40020410
 8007b64:	40020428 	.word	0x40020428
 8007b68:	40020440 	.word	0x40020440
 8007b6c:	40020458 	.word	0x40020458
 8007b70:	40020470 	.word	0x40020470
 8007b74:	40020488 	.word	0x40020488
 8007b78:	400204a0 	.word	0x400204a0
 8007b7c:	400204b8 	.word	0x400204b8
 8007b80:	48022c08 	.word	0x48022c08
 8007b84:	48022c1c 	.word	0x48022c1c
 8007b88:	48022c30 	.word	0x48022c30
 8007b8c:	48022c44 	.word	0x48022c44
 8007b90:	48022c58 	.word	0x48022c58
 8007b94:	48022c6c 	.word	0x48022c6c
 8007b98:	48022c80 	.word	0x48022c80
 8007b9c:	48022c94 	.word	0x48022c94
 8007ba0:	58025408 	.word	0x58025408
 8007ba4:	5802541c 	.word	0x5802541c
 8007ba8:	58025430 	.word	0x58025430
 8007bac:	58025444 	.word	0x58025444
 8007bb0:	58025458 	.word	0x58025458
 8007bb4:	5802546c 	.word	0x5802546c
 8007bb8:	58025480 	.word	0x58025480
 8007bbc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 81d5 	beq.w	8007f74 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd2:	e1cf      	b.n	8007f74 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d160      	bne.n	8007ca0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7f      	ldr	r2, [pc, #508]	@ (8007de0 <HAL_DMA_IRQHandler+0xce4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d04a      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a7d      	ldr	r2, [pc, #500]	@ (8007de4 <HAL_DMA_IRQHandler+0xce8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d045      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8007de8 <HAL_DMA_IRQHandler+0xcec>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d040      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a7a      	ldr	r2, [pc, #488]	@ (8007dec <HAL_DMA_IRQHandler+0xcf0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d03b      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a79      	ldr	r2, [pc, #484]	@ (8007df0 <HAL_DMA_IRQHandler+0xcf4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d036      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a77      	ldr	r2, [pc, #476]	@ (8007df4 <HAL_DMA_IRQHandler+0xcf8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d031      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a76      	ldr	r2, [pc, #472]	@ (8007df8 <HAL_DMA_IRQHandler+0xcfc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d02c      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a74      	ldr	r2, [pc, #464]	@ (8007dfc <HAL_DMA_IRQHandler+0xd00>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d027      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a73      	ldr	r2, [pc, #460]	@ (8007e00 <HAL_DMA_IRQHandler+0xd04>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d022      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a71      	ldr	r2, [pc, #452]	@ (8007e04 <HAL_DMA_IRQHandler+0xd08>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d01d      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a70      	ldr	r2, [pc, #448]	@ (8007e08 <HAL_DMA_IRQHandler+0xd0c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d018      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6e      	ldr	r2, [pc, #440]	@ (8007e0c <HAL_DMA_IRQHandler+0xd10>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8007e10 <HAL_DMA_IRQHandler+0xd14>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a6b      	ldr	r2, [pc, #428]	@ (8007e14 <HAL_DMA_IRQHandler+0xd18>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8007e18 <HAL_DMA_IRQHandler+0xd1c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xb82>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a68      	ldr	r2, [pc, #416]	@ (8007e1c <HAL_DMA_IRQHandler+0xd20>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d108      	bne.n	8007c90 <HAL_DMA_IRQHandler+0xb94>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0208 	bic.w	r2, r2, #8
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e007      	b.n	8007ca0 <HAL_DMA_IRQHandler+0xba4>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0204 	bic.w	r2, r2, #4
 8007c9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8165 	beq.w	8007f74 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cb2:	e15f      	b.n	8007f74 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb8:	f003 031f 	and.w	r3, r3, #31
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80c5 	beq.w	8007e54 <HAL_DMA_IRQHandler+0xd58>
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80bf 	beq.w	8007e54 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	2202      	movs	r2, #2
 8007ce0:	409a      	lsls	r2, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d018      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 813a 	beq.w	8007f78 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d0c:	e134      	b.n	8007f78 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8130 	beq.w	8007f78 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d20:	e12a      	b.n	8007f78 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f040 8089 	bne.w	8007e40 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a2b      	ldr	r2, [pc, #172]	@ (8007de0 <HAL_DMA_IRQHandler+0xce4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04a      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a29      	ldr	r2, [pc, #164]	@ (8007de4 <HAL_DMA_IRQHandler+0xce8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d045      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a28      	ldr	r2, [pc, #160]	@ (8007de8 <HAL_DMA_IRQHandler+0xcec>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d040      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a26      	ldr	r2, [pc, #152]	@ (8007dec <HAL_DMA_IRQHandler+0xcf0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d03b      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a25      	ldr	r2, [pc, #148]	@ (8007df0 <HAL_DMA_IRQHandler+0xcf4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d036      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a23      	ldr	r2, [pc, #140]	@ (8007df4 <HAL_DMA_IRQHandler+0xcf8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a22      	ldr	r2, [pc, #136]	@ (8007df8 <HAL_DMA_IRQHandler+0xcfc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d02c      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a20      	ldr	r2, [pc, #128]	@ (8007dfc <HAL_DMA_IRQHandler+0xd00>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d027      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1f      	ldr	r2, [pc, #124]	@ (8007e00 <HAL_DMA_IRQHandler+0xd04>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e04 <HAL_DMA_IRQHandler+0xd08>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1c      	ldr	r2, [pc, #112]	@ (8007e08 <HAL_DMA_IRQHandler+0xd0c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1a      	ldr	r2, [pc, #104]	@ (8007e0c <HAL_DMA_IRQHandler+0xd10>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a19      	ldr	r2, [pc, #100]	@ (8007e10 <HAL_DMA_IRQHandler+0xd14>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a17      	ldr	r2, [pc, #92]	@ (8007e14 <HAL_DMA_IRQHandler+0xd18>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a16      	ldr	r2, [pc, #88]	@ (8007e18 <HAL_DMA_IRQHandler+0xd1c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_IRQHandler+0xcd2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a14      	ldr	r2, [pc, #80]	@ (8007e1c <HAL_DMA_IRQHandler+0xd20>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d128      	bne.n	8007e20 <HAL_DMA_IRQHandler+0xd24>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0214 	bic.w	r2, r2, #20
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e027      	b.n	8007e30 <HAL_DMA_IRQHandler+0xd34>
 8007de0:	40020010 	.word	0x40020010
 8007de4:	40020028 	.word	0x40020028
 8007de8:	40020040 	.word	0x40020040
 8007dec:	40020058 	.word	0x40020058
 8007df0:	40020070 	.word	0x40020070
 8007df4:	40020088 	.word	0x40020088
 8007df8:	400200a0 	.word	0x400200a0
 8007dfc:	400200b8 	.word	0x400200b8
 8007e00:	40020410 	.word	0x40020410
 8007e04:	40020428 	.word	0x40020428
 8007e08:	40020440 	.word	0x40020440
 8007e0c:	40020458 	.word	0x40020458
 8007e10:	40020470 	.word	0x40020470
 8007e14:	40020488 	.word	0x40020488
 8007e18:	400204a0 	.word	0x400204a0
 8007e1c:	400204b8 	.word	0x400204b8
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 020a 	bic.w	r2, r2, #10
 8007e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8097 	beq.w	8007f78 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e52:	e091      	b.n	8007f78 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8088 	beq.w	8007f7a <HAL_DMA_IRQHandler+0xe7e>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8082 	beq.w	8007f7a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a41      	ldr	r2, [pc, #260]	@ (8007f80 <HAL_DMA_IRQHandler+0xe84>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d04a      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a3f      	ldr	r2, [pc, #252]	@ (8007f84 <HAL_DMA_IRQHandler+0xe88>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d045      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f88 <HAL_DMA_IRQHandler+0xe8c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d040      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a3c      	ldr	r2, [pc, #240]	@ (8007f8c <HAL_DMA_IRQHandler+0xe90>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d03b      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8007f90 <HAL_DMA_IRQHandler+0xe94>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d036      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a39      	ldr	r2, [pc, #228]	@ (8007f94 <HAL_DMA_IRQHandler+0xe98>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d031      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a38      	ldr	r2, [pc, #224]	@ (8007f98 <HAL_DMA_IRQHandler+0xe9c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d02c      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <HAL_DMA_IRQHandler+0xea0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d027      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a35      	ldr	r2, [pc, #212]	@ (8007fa0 <HAL_DMA_IRQHandler+0xea4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d022      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a33      	ldr	r2, [pc, #204]	@ (8007fa4 <HAL_DMA_IRQHandler+0xea8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d01d      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a32      	ldr	r2, [pc, #200]	@ (8007fa8 <HAL_DMA_IRQHandler+0xeac>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d018      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a30      	ldr	r2, [pc, #192]	@ (8007fac <HAL_DMA_IRQHandler+0xeb0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8007fb0 <HAL_DMA_IRQHandler+0xeb4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a2d      	ldr	r2, [pc, #180]	@ (8007fb4 <HAL_DMA_IRQHandler+0xeb8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d009      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <HAL_DMA_IRQHandler+0xebc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xe1a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <HAL_DMA_IRQHandler+0xec0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d108      	bne.n	8007f28 <HAL_DMA_IRQHandler+0xe2c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 021c 	bic.w	r2, r2, #28
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	e007      	b.n	8007f38 <HAL_DMA_IRQHandler+0xe3c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 020e 	bic.w	r2, r2, #14
 8007f36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
 8007f6e:	e004      	b.n	8007f7a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007f70:	bf00      	nop
 8007f72:	e002      	b.n	8007f7a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f74:	bf00      	nop
 8007f76:	e000      	b.n	8007f7a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f7a:	3728      	adds	r7, #40	@ 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40020010 	.word	0x40020010
 8007f84:	40020028 	.word	0x40020028
 8007f88:	40020040 	.word	0x40020040
 8007f8c:	40020058 	.word	0x40020058
 8007f90:	40020070 	.word	0x40020070
 8007f94:	40020088 	.word	0x40020088
 8007f98:	400200a0 	.word	0x400200a0
 8007f9c:	400200b8 	.word	0x400200b8
 8007fa0:	40020410 	.word	0x40020410
 8007fa4:	40020428 	.word	0x40020428
 8007fa8:	40020440 	.word	0x40020440
 8007fac:	40020458 	.word	0x40020458
 8007fb0:	40020470 	.word	0x40020470
 8007fb4:	40020488 	.word	0x40020488
 8007fb8:	400204a0 	.word	0x400204a0
 8007fbc:	400204b8 	.word	0x400204b8

08007fc0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a7f      	ldr	r2, [pc, #508]	@ (80081f4 <DMA_SetConfig+0x21c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d072      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a7d      	ldr	r2, [pc, #500]	@ (80081f8 <DMA_SetConfig+0x220>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d06d      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7c      	ldr	r2, [pc, #496]	@ (80081fc <DMA_SetConfig+0x224>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d068      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a7a      	ldr	r2, [pc, #488]	@ (8008200 <DMA_SetConfig+0x228>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d063      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a79      	ldr	r2, [pc, #484]	@ (8008204 <DMA_SetConfig+0x22c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d05e      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a77      	ldr	r2, [pc, #476]	@ (8008208 <DMA_SetConfig+0x230>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d059      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a76      	ldr	r2, [pc, #472]	@ (800820c <DMA_SetConfig+0x234>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d054      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a74      	ldr	r2, [pc, #464]	@ (8008210 <DMA_SetConfig+0x238>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d04f      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a73      	ldr	r2, [pc, #460]	@ (8008214 <DMA_SetConfig+0x23c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d04a      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a71      	ldr	r2, [pc, #452]	@ (8008218 <DMA_SetConfig+0x240>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d045      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a70      	ldr	r2, [pc, #448]	@ (800821c <DMA_SetConfig+0x244>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d040      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a6e      	ldr	r2, [pc, #440]	@ (8008220 <DMA_SetConfig+0x248>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d03b      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a6d      	ldr	r2, [pc, #436]	@ (8008224 <DMA_SetConfig+0x24c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d036      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a6b      	ldr	r2, [pc, #428]	@ (8008228 <DMA_SetConfig+0x250>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d031      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a6a      	ldr	r2, [pc, #424]	@ (800822c <DMA_SetConfig+0x254>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d02c      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a68      	ldr	r2, [pc, #416]	@ (8008230 <DMA_SetConfig+0x258>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d027      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a67      	ldr	r2, [pc, #412]	@ (8008234 <DMA_SetConfig+0x25c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d022      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a65      	ldr	r2, [pc, #404]	@ (8008238 <DMA_SetConfig+0x260>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01d      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a64      	ldr	r2, [pc, #400]	@ (800823c <DMA_SetConfig+0x264>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d018      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a62      	ldr	r2, [pc, #392]	@ (8008240 <DMA_SetConfig+0x268>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d013      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a61      	ldr	r2, [pc, #388]	@ (8008244 <DMA_SetConfig+0x26c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00e      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a5f      	ldr	r2, [pc, #380]	@ (8008248 <DMA_SetConfig+0x270>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d009      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a5e      	ldr	r2, [pc, #376]	@ (800824c <DMA_SetConfig+0x274>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d004      	beq.n	80080e2 <DMA_SetConfig+0x10a>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a5c      	ldr	r2, [pc, #368]	@ (8008250 <DMA_SetConfig+0x278>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d101      	bne.n	80080e6 <DMA_SetConfig+0x10e>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <DMA_SetConfig+0x110>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00d      	beq.n	8008108 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80080f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008106:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a39      	ldr	r2, [pc, #228]	@ (80081f4 <DMA_SetConfig+0x21c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d04a      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a38      	ldr	r2, [pc, #224]	@ (80081f8 <DMA_SetConfig+0x220>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d045      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a36      	ldr	r2, [pc, #216]	@ (80081fc <DMA_SetConfig+0x224>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d040      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a35      	ldr	r2, [pc, #212]	@ (8008200 <DMA_SetConfig+0x228>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d03b      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a33      	ldr	r2, [pc, #204]	@ (8008204 <DMA_SetConfig+0x22c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d036      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a32      	ldr	r2, [pc, #200]	@ (8008208 <DMA_SetConfig+0x230>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d031      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a30      	ldr	r2, [pc, #192]	@ (800820c <DMA_SetConfig+0x234>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d02c      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2f      	ldr	r2, [pc, #188]	@ (8008210 <DMA_SetConfig+0x238>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d027      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a2d      	ldr	r2, [pc, #180]	@ (8008214 <DMA_SetConfig+0x23c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d022      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a2c      	ldr	r2, [pc, #176]	@ (8008218 <DMA_SetConfig+0x240>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01d      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a2a      	ldr	r2, [pc, #168]	@ (800821c <DMA_SetConfig+0x244>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d018      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a29      	ldr	r2, [pc, #164]	@ (8008220 <DMA_SetConfig+0x248>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a27      	ldr	r2, [pc, #156]	@ (8008224 <DMA_SetConfig+0x24c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a26      	ldr	r2, [pc, #152]	@ (8008228 <DMA_SetConfig+0x250>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a24      	ldr	r2, [pc, #144]	@ (800822c <DMA_SetConfig+0x254>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <DMA_SetConfig+0x1d0>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a23      	ldr	r2, [pc, #140]	@ (8008230 <DMA_SetConfig+0x258>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d101      	bne.n	80081ac <DMA_SetConfig+0x1d4>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <DMA_SetConfig+0x1d6>
 80081ac:	2300      	movs	r3, #0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d059      	beq.n	8008266 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	223f      	movs	r2, #63	@ 0x3f
 80081bc:	409a      	lsls	r2, r3
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b40      	cmp	r3, #64	@ 0x40
 80081e0:	d138      	bne.n	8008254 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081f2:	e0ae      	b.n	8008352 <DMA_SetConfig+0x37a>
 80081f4:	40020010 	.word	0x40020010
 80081f8:	40020028 	.word	0x40020028
 80081fc:	40020040 	.word	0x40020040
 8008200:	40020058 	.word	0x40020058
 8008204:	40020070 	.word	0x40020070
 8008208:	40020088 	.word	0x40020088
 800820c:	400200a0 	.word	0x400200a0
 8008210:	400200b8 	.word	0x400200b8
 8008214:	40020410 	.word	0x40020410
 8008218:	40020428 	.word	0x40020428
 800821c:	40020440 	.word	0x40020440
 8008220:	40020458 	.word	0x40020458
 8008224:	40020470 	.word	0x40020470
 8008228:	40020488 	.word	0x40020488
 800822c:	400204a0 	.word	0x400204a0
 8008230:	400204b8 	.word	0x400204b8
 8008234:	58025408 	.word	0x58025408
 8008238:	5802541c 	.word	0x5802541c
 800823c:	58025430 	.word	0x58025430
 8008240:	58025444 	.word	0x58025444
 8008244:	58025458 	.word	0x58025458
 8008248:	5802546c 	.word	0x5802546c
 800824c:	58025480 	.word	0x58025480
 8008250:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
}
 8008264:	e075      	b.n	8008352 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a3d      	ldr	r2, [pc, #244]	@ (8008360 <DMA_SetConfig+0x388>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d04a      	beq.n	8008306 <DMA_SetConfig+0x32e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a3b      	ldr	r2, [pc, #236]	@ (8008364 <DMA_SetConfig+0x38c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d045      	beq.n	8008306 <DMA_SetConfig+0x32e>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a3a      	ldr	r2, [pc, #232]	@ (8008368 <DMA_SetConfig+0x390>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d040      	beq.n	8008306 <DMA_SetConfig+0x32e>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a38      	ldr	r2, [pc, #224]	@ (800836c <DMA_SetConfig+0x394>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d03b      	beq.n	8008306 <DMA_SetConfig+0x32e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a37      	ldr	r2, [pc, #220]	@ (8008370 <DMA_SetConfig+0x398>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d036      	beq.n	8008306 <DMA_SetConfig+0x32e>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a35      	ldr	r2, [pc, #212]	@ (8008374 <DMA_SetConfig+0x39c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d031      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a34      	ldr	r2, [pc, #208]	@ (8008378 <DMA_SetConfig+0x3a0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d02c      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a32      	ldr	r2, [pc, #200]	@ (800837c <DMA_SetConfig+0x3a4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d027      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a31      	ldr	r2, [pc, #196]	@ (8008380 <DMA_SetConfig+0x3a8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d022      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008384 <DMA_SetConfig+0x3ac>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01d      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008388 <DMA_SetConfig+0x3b0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d018      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a2c      	ldr	r2, [pc, #176]	@ (800838c <DMA_SetConfig+0x3b4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008390 <DMA_SetConfig+0x3b8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00e      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a29      	ldr	r2, [pc, #164]	@ (8008394 <DMA_SetConfig+0x3bc>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a28      	ldr	r2, [pc, #160]	@ (8008398 <DMA_SetConfig+0x3c0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <DMA_SetConfig+0x32e>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a26      	ldr	r2, [pc, #152]	@ (800839c <DMA_SetConfig+0x3c4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d101      	bne.n	800830a <DMA_SetConfig+0x332>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <DMA_SetConfig+0x334>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d020      	beq.n	8008352 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	2201      	movs	r2, #1
 800831a:	409a      	lsls	r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b40      	cmp	r3, #64	@ 0x40
 800832e:	d108      	bne.n	8008342 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	60da      	str	r2, [r3, #12]
}
 8008340:	e007      	b.n	8008352 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	60da      	str	r2, [r3, #12]
}
 8008352:	bf00      	nop
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	48022c08 	.word	0x48022c08
 8008364:	48022c1c 	.word	0x48022c1c
 8008368:	48022c30 	.word	0x48022c30
 800836c:	48022c44 	.word	0x48022c44
 8008370:	48022c58 	.word	0x48022c58
 8008374:	48022c6c 	.word	0x48022c6c
 8008378:	48022c80 	.word	0x48022c80
 800837c:	48022c94 	.word	0x48022c94
 8008380:	58025408 	.word	0x58025408
 8008384:	5802541c 	.word	0x5802541c
 8008388:	58025430 	.word	0x58025430
 800838c:	58025444 	.word	0x58025444
 8008390:	58025458 	.word	0x58025458
 8008394:	5802546c 	.word	0x5802546c
 8008398:	58025480 	.word	0x58025480
 800839c:	58025494 	.word	0x58025494

080083a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a42      	ldr	r2, [pc, #264]	@ (80084b8 <DMA_CalcBaseAndBitshift+0x118>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d04a      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a41      	ldr	r2, [pc, #260]	@ (80084bc <DMA_CalcBaseAndBitshift+0x11c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d045      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a3f      	ldr	r2, [pc, #252]	@ (80084c0 <DMA_CalcBaseAndBitshift+0x120>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d040      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3e      	ldr	r2, [pc, #248]	@ (80084c4 <DMA_CalcBaseAndBitshift+0x124>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d03b      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a3c      	ldr	r2, [pc, #240]	@ (80084c8 <DMA_CalcBaseAndBitshift+0x128>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d036      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a3b      	ldr	r2, [pc, #236]	@ (80084cc <DMA_CalcBaseAndBitshift+0x12c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d031      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a39      	ldr	r2, [pc, #228]	@ (80084d0 <DMA_CalcBaseAndBitshift+0x130>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d02c      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a38      	ldr	r2, [pc, #224]	@ (80084d4 <DMA_CalcBaseAndBitshift+0x134>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d027      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a36      	ldr	r2, [pc, #216]	@ (80084d8 <DMA_CalcBaseAndBitshift+0x138>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d022      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a35      	ldr	r2, [pc, #212]	@ (80084dc <DMA_CalcBaseAndBitshift+0x13c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d01d      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a33      	ldr	r2, [pc, #204]	@ (80084e0 <DMA_CalcBaseAndBitshift+0x140>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d018      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a32      	ldr	r2, [pc, #200]	@ (80084e4 <DMA_CalcBaseAndBitshift+0x144>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d013      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a30      	ldr	r2, [pc, #192]	@ (80084e8 <DMA_CalcBaseAndBitshift+0x148>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00e      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a2f      	ldr	r2, [pc, #188]	@ (80084ec <DMA_CalcBaseAndBitshift+0x14c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d009      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a2d      	ldr	r2, [pc, #180]	@ (80084f0 <DMA_CalcBaseAndBitshift+0x150>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d004      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xa8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a2c      	ldr	r2, [pc, #176]	@ (80084f4 <DMA_CalcBaseAndBitshift+0x154>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d101      	bne.n	800844c <DMA_CalcBaseAndBitshift+0xac>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <DMA_CalcBaseAndBitshift+0xae>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d024      	beq.n	800849c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	3b10      	subs	r3, #16
 800845a:	4a27      	ldr	r2, [pc, #156]	@ (80084f8 <DMA_CalcBaseAndBitshift+0x158>)
 800845c:	fba2 2303 	umull	r2, r3, r2, r3
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	4a24      	ldr	r2, [pc, #144]	@ (80084fc <DMA_CalcBaseAndBitshift+0x15c>)
 800846c:	5cd3      	ldrb	r3, [r2, r3]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d908      	bls.n	800848c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	4b1f      	ldr	r3, [pc, #124]	@ (8008500 <DMA_CalcBaseAndBitshift+0x160>)
 8008482:	4013      	ands	r3, r2
 8008484:	1d1a      	adds	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	659a      	str	r2, [r3, #88]	@ 0x58
 800848a:	e00d      	b.n	80084a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	4b1b      	ldr	r3, [pc, #108]	@ (8008500 <DMA_CalcBaseAndBitshift+0x160>)
 8008494:	4013      	ands	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6593      	str	r3, [r2, #88]	@ 0x58
 800849a:	e005      	b.n	80084a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	40020010 	.word	0x40020010
 80084bc:	40020028 	.word	0x40020028
 80084c0:	40020040 	.word	0x40020040
 80084c4:	40020058 	.word	0x40020058
 80084c8:	40020070 	.word	0x40020070
 80084cc:	40020088 	.word	0x40020088
 80084d0:	400200a0 	.word	0x400200a0
 80084d4:	400200b8 	.word	0x400200b8
 80084d8:	40020410 	.word	0x40020410
 80084dc:	40020428 	.word	0x40020428
 80084e0:	40020440 	.word	0x40020440
 80084e4:	40020458 	.word	0x40020458
 80084e8:	40020470 	.word	0x40020470
 80084ec:	40020488 	.word	0x40020488
 80084f0:	400204a0 	.word	0x400204a0
 80084f4:	400204b8 	.word	0x400204b8
 80084f8:	aaaaaaab 	.word	0xaaaaaaab
 80084fc:	080188a4 	.word	0x080188a4
 8008500:	fffffc00 	.word	0xfffffc00

08008504 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d120      	bne.n	800855a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	2b03      	cmp	r3, #3
 800851e:	d858      	bhi.n	80085d2 <DMA_CheckFifoParam+0xce>
 8008520:	a201      	add	r2, pc, #4	@ (adr r2, 8008528 <DMA_CheckFifoParam+0x24>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008539 	.word	0x08008539
 800852c:	0800854b 	.word	0x0800854b
 8008530:	08008539 	.word	0x08008539
 8008534:	080085d3 	.word	0x080085d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d048      	beq.n	80085d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008548:	e045      	b.n	80085d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008552:	d142      	bne.n	80085da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008558:	e03f      	b.n	80085da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008562:	d123      	bne.n	80085ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008568:	2b03      	cmp	r3, #3
 800856a:	d838      	bhi.n	80085de <DMA_CheckFifoParam+0xda>
 800856c:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <DMA_CheckFifoParam+0x70>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008585 	.word	0x08008585
 8008578:	0800858b 	.word	0x0800858b
 800857c:	08008585 	.word	0x08008585
 8008580:	0800859d 	.word	0x0800859d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]
        break;
 8008588:	e030      	b.n	80085ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d025      	beq.n	80085e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800859a:	e022      	b.n	80085e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80085a4:	d11f      	bne.n	80085e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085aa:	e01c      	b.n	80085e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d902      	bls.n	80085ba <DMA_CheckFifoParam+0xb6>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d003      	beq.n	80085c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80085b8:	e018      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
        break;
 80085be:	e015      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00e      	beq.n	80085ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	e00b      	b.n	80085ea <DMA_CheckFifoParam+0xe6>
        break;
 80085d2:	bf00      	nop
 80085d4:	e00a      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        break;
 80085d6:	bf00      	nop
 80085d8:	e008      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        break;
 80085da:	bf00      	nop
 80085dc:	e006      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        break;
 80085de:	bf00      	nop
 80085e0:	e004      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        break;
 80085e2:	bf00      	nop
 80085e4:	e002      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
        break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <DMA_CheckFifoParam+0xe8>
    break;
 80085ea:	bf00      	nop
    }
  }

  return status;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop

080085fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a38      	ldr	r2, [pc, #224]	@ (80086f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d022      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a36      	ldr	r2, [pc, #216]	@ (80086f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01d      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a35      	ldr	r2, [pc, #212]	@ (80086f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d018      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a33      	ldr	r2, [pc, #204]	@ (80086fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a32      	ldr	r2, [pc, #200]	@ (8008700 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00e      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a30      	ldr	r2, [pc, #192]	@ (8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d009      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2f      	ldr	r2, [pc, #188]	@ (8008708 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d004      	beq.n	800865a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a2d      	ldr	r2, [pc, #180]	@ (800870c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d101      	bne.n	800865e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01a      	beq.n	800869a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	3b08      	subs	r3, #8
 800866c:	4a28      	ldr	r2, [pc, #160]	@ (8008710 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	091b      	lsrs	r3, r3, #4
 8008674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4b26      	ldr	r3, [pc, #152]	@ (8008714 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	461a      	mov	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a24      	ldr	r2, [pc, #144]	@ (8008718 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008688:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	2201      	movs	r2, #1
 8008692:	409a      	lsls	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008698:	e024      	b.n	80086e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	3b10      	subs	r3, #16
 80086a2:	4a1e      	ldr	r2, [pc, #120]	@ (800871c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80086a4:	fba2 2303 	umull	r2, r3, r2, r3
 80086a8:	091b      	lsrs	r3, r3, #4
 80086aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008720 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d806      	bhi.n	80086c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008724 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d902      	bls.n	80086c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3308      	adds	r3, #8
 80086c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4b18      	ldr	r3, [pc, #96]	@ (8008728 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	461a      	mov	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a16      	ldr	r2, [pc, #88]	@ (800872c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80086d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2201      	movs	r2, #1
 80086de:	409a      	lsls	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	58025408 	.word	0x58025408
 80086f4:	5802541c 	.word	0x5802541c
 80086f8:	58025430 	.word	0x58025430
 80086fc:	58025444 	.word	0x58025444
 8008700:	58025458 	.word	0x58025458
 8008704:	5802546c 	.word	0x5802546c
 8008708:	58025480 	.word	0x58025480
 800870c:	58025494 	.word	0x58025494
 8008710:	cccccccd 	.word	0xcccccccd
 8008714:	16009600 	.word	0x16009600
 8008718:	58025880 	.word	0x58025880
 800871c:	aaaaaaab 	.word	0xaaaaaaab
 8008720:	400204b8 	.word	0x400204b8
 8008724:	4002040f 	.word	0x4002040f
 8008728:	10008200 	.word	0x10008200
 800872c:	40020880 	.word	0x40020880

08008730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d04a      	beq.n	80087dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b08      	cmp	r3, #8
 800874a:	d847      	bhi.n	80087dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a25      	ldr	r2, [pc, #148]	@ (80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d022      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a24      	ldr	r2, [pc, #144]	@ (80087ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d01d      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a22      	ldr	r2, [pc, #136]	@ (80087f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d018      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a21      	ldr	r2, [pc, #132]	@ (80087f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1f      	ldr	r2, [pc, #124]	@ (80087f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00e      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1e      	ldr	r2, [pc, #120]	@ (80087fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d009      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1c      	ldr	r2, [pc, #112]	@ (8008800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d004      	beq.n	800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d101      	bne.n	80087a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80087a0:	2300      	movs	r3, #0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4b17      	ldr	r3, [pc, #92]	@ (8008808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a15      	ldr	r2, [pc, #84]	@ (800880c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80087b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80087ba:	e009      	b.n	80087d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a11      	ldr	r2, [pc, #68]	@ (8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80087ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2201      	movs	r2, #1
 80087d6:	409a      	lsls	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	58025408 	.word	0x58025408
 80087ec:	5802541c 	.word	0x5802541c
 80087f0:	58025430 	.word	0x58025430
 80087f4:	58025444 	.word	0x58025444
 80087f8:	58025458 	.word	0x58025458
 80087fc:	5802546c 	.word	0x5802546c
 8008800:	58025480 	.word	0x58025480
 8008804:	58025494 	.word	0x58025494
 8008808:	1600963f 	.word	0x1600963f
 800880c:	58025940 	.word	0x58025940
 8008810:	1000823f 	.word	0x1000823f
 8008814:	40020940 	.word	0x40020940

08008818 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b098      	sub	sp, #96	@ 0x60
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008820:	4a84      	ldr	r2, [pc, #528]	@ (8008a34 <HAL_FDCAN_Init+0x21c>)
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	4611      	mov	r1, r2
 8008828:	224c      	movs	r2, #76	@ 0x4c
 800882a:	4618      	mov	r0, r3
 800882c:	f00e f83d 	bl	80168aa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e1c6      	b.n	8008bc8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a38 <HAL_FDCAN_Init+0x220>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d106      	bne.n	8008852 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800884c:	461a      	mov	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d106      	bne.n	800886c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7fa fcf6 	bl	8003258 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0210 	bic.w	r2, r2, #16
 800887a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800887c:	f7fc ff2a 	bl	80056d4 <HAL_GetTick>
 8008880:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008882:	e014      	b.n	80088ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008884:	f7fc ff26 	bl	80056d4 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d90d      	bls.n	80088ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008898:	f043 0201 	orr.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e18c      	b.n	8008bc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d0e3      	beq.n	8008884 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088cc:	f7fc ff02 	bl	80056d4 <HAL_GetTick>
 80088d0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088d2:	e014      	b.n	80088fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80088d4:	f7fc fefe 	bl	80056d4 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	d90d      	bls.n	80088fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2203      	movs	r2, #3
 80088f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e164      	b.n	8008bc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0e3      	beq.n	80088d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0202 	orr.w	r2, r2, #2
 800891a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7c1b      	ldrb	r3, [r3, #16]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d108      	bne.n	8008936 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008932:	619a      	str	r2, [r3, #24]
 8008934:	e007      	b.n	8008946 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008944:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7c5b      	ldrb	r3, [r3, #17]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d108      	bne.n	8008960 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800895c:	619a      	str	r2, [r3, #24]
 800895e:	e007      	b.n	8008970 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800896e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7c9b      	ldrb	r3, [r3, #18]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d108      	bne.n	800898a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008986:	619a      	str	r2, [r3, #24]
 8008988:	e007      	b.n	800899a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008998:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80089be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0210 	bic.w	r2, r2, #16
 80089ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d108      	bne.n	80089ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0204 	orr.w	r2, r2, #4
 80089e6:	619a      	str	r2, [r3, #24]
 80089e8:	e030      	b.n	8008a4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02c      	beq.n	8008a4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d020      	beq.n	8008a3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	699a      	ldr	r2, [r3, #24]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008a08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0210 	orr.w	r2, r2, #16
 8008a18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d114      	bne.n	8008a4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0220 	orr.w	r2, r2, #32
 8008a30:	619a      	str	r2, [r3, #24]
 8008a32:	e00b      	b.n	8008a4c <HAL_FDCAN_Init+0x234>
 8008a34:	08018800 	.word	0x08018800
 8008a38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0220 	orr.w	r2, r2, #32
 8008a4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a80:	d115      	bne.n	8008aae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	3b01      	subs	r3, #1
 8008a98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008aaa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008aac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d011      	beq.n	8008afe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008ae2:	f023 0107 	bic.w	r1, r3, #7
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	3360      	adds	r3, #96	@ 0x60
 8008aee:	443b      	add	r3, r7
 8008af0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b0e:	f023 0107 	bic.w	r1, r3, #7
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	3360      	adds	r3, #96	@ 0x60
 8008b1a:	443b      	add	r3, r7
 8008b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d012      	beq.n	8008b58 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b3a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	3360      	adds	r3, #96	@ 0x60
 8008b46:	443b      	add	r3, r7
 8008b48:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b4c:	011a      	lsls	r2, r3, #4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d012      	beq.n	8008b86 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	3360      	adds	r3, #96	@ 0x60
 8008b74:	443b      	add	r3, r7
 8008b76:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b7a:	021a      	lsls	r2, r3, #8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a11      	ldr	r2, [pc, #68]	@ (8008bd0 <HAL_FDCAN_Init+0x3b8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d107      	bne.n	8008ba0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f022 0203 	bic.w	r2, r2, #3
 8008b9e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f80b 	bl	8008bd4 <FDCAN_CalcultateRamBlockAddresses>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008bc4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3760      	adds	r7, #96	@ 0x60
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	4000a000 	.word	0x4000a000

08008bd4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008bea:	4ba7      	ldr	r3, [pc, #668]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	0091      	lsls	r1, r2, #2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c04:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0c:	041a      	lsls	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4413      	add	r3, r2
 8008c20:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c2a:	4b97      	ldr	r3, [pc, #604]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	0091      	lsls	r1, r2, #2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	430b      	orrs	r3, r1
 8008c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c44:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4c:	041a      	lsls	r2, r3, #16
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	4413      	add	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008c6c:	4b86      	ldr	r3, [pc, #536]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c6e:	4013      	ands	r3, r2
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	0091      	lsls	r1, r2, #2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c86:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8e:	041a      	lsls	r2, r3, #16
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008cb4:	4b74      	ldr	r3, [pc, #464]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	0091      	lsls	r1, r2, #2
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008cce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd6:	041a      	lsls	r2, r3, #16
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008cfc:	4b62      	ldr	r3, [pc, #392]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cfe:	4013      	ands	r3, r2
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	0091      	lsls	r1, r2, #2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008d28:	4b57      	ldr	r3, [pc, #348]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	0091      	lsls	r1, r2, #2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	430b      	orrs	r3, r1
 8008d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d42:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4a:	041a      	lsls	r2, r3, #16
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	4413      	add	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008d6a:	4b47      	ldr	r3, [pc, #284]	@ (8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	0091      	lsls	r1, r2, #2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	430b      	orrs	r3, r1
 8008d78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d84:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8c:	041a      	lsls	r2, r3, #16
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008da0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da8:	061a      	lsls	r2, r3, #24
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008db8:	4b34      	ldr	r3, [pc, #208]	@ (8008e8c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	009a      	lsls	r2, r3, #2
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	441a      	add	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008e06:	fb01 f303 	mul.w	r3, r1, r3
 8008e0a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008e0c:	441a      	add	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	441a      	add	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	441a      	add	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008e70:	441a      	add	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7e:	4a04      	ldr	r2, [pc, #16]	@ (8008e90 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d915      	bls.n	8008eb0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008e84:	e006      	b.n	8008e94 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008e86:	bf00      	nop
 8008e88:	ffff0003 	.word	0xffff0003
 8008e8c:	10002b00 	.word	0x10002b00
 8008e90:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e9a:	f043 0220 	orr.w	r2, r3, #32
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e010      	b.n	8008ed2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e005      	b.n	8008ec4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d3f3      	bcc.n	8008eb8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop

08008ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	@ 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008eee:	4b89      	ldr	r3, [pc, #548]	@ (8009114 <HAL_GPIO_Init+0x234>)
 8008ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ef2:	e194      	b.n	800921e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	2101      	movs	r1, #1
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	fa01 f303 	lsl.w	r3, r1, r3
 8008f00:	4013      	ands	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 8186 	beq.w	8009218 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d005      	beq.n	8008f24 <HAL_GPIO_Init+0x44>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d130      	bne.n	8008f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	2203      	movs	r2, #3
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	43db      	mvns	r3, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4013      	ands	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	091b      	lsrs	r3, r3, #4
 8008f70:	f003 0201 	and.w	r2, r3, #1
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d017      	beq.n	8008fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f003 0303 	and.w	r3, r3, #3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d123      	bne.n	8009016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	08da      	lsrs	r2, r3, #3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3208      	adds	r2, #8
 8008fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	220f      	movs	r2, #15
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	43db      	mvns	r3, r3
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	691a      	ldr	r2, [r3, #16]
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	4313      	orrs	r3, r2
 8009006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	08da      	lsrs	r2, r3, #3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3208      	adds	r2, #8
 8009010:	69b9      	ldr	r1, [r7, #24]
 8009012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	2203      	movs	r2, #3
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43db      	mvns	r3, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	4013      	ands	r3, r2
 800902c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f003 0203 	and.w	r2, r3, #3
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	4313      	orrs	r3, r2
 8009042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80e0 	beq.w	8009218 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009058:	4b2f      	ldr	r3, [pc, #188]	@ (8009118 <HAL_GPIO_Init+0x238>)
 800905a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800905e:	4a2e      	ldr	r2, [pc, #184]	@ (8009118 <HAL_GPIO_Init+0x238>)
 8009060:	f043 0302 	orr.w	r3, r3, #2
 8009064:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009068:	4b2b      	ldr	r3, [pc, #172]	@ (8009118 <HAL_GPIO_Init+0x238>)
 800906a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009076:	4a29      	ldr	r2, [pc, #164]	@ (800911c <HAL_GPIO_Init+0x23c>)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	089b      	lsrs	r3, r3, #2
 800907c:	3302      	adds	r3, #2
 800907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	220f      	movs	r2, #15
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	43db      	mvns	r3, r3
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	4013      	ands	r3, r2
 8009098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a20      	ldr	r2, [pc, #128]	@ (8009120 <HAL_GPIO_Init+0x240>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d052      	beq.n	8009148 <HAL_GPIO_Init+0x268>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <HAL_GPIO_Init+0x244>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d031      	beq.n	800910e <HAL_GPIO_Init+0x22e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009128 <HAL_GPIO_Init+0x248>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d02b      	beq.n	800910a <HAL_GPIO_Init+0x22a>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1d      	ldr	r2, [pc, #116]	@ (800912c <HAL_GPIO_Init+0x24c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d025      	beq.n	8009106 <HAL_GPIO_Init+0x226>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009130 <HAL_GPIO_Init+0x250>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01f      	beq.n	8009102 <HAL_GPIO_Init+0x222>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009134 <HAL_GPIO_Init+0x254>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d019      	beq.n	80090fe <HAL_GPIO_Init+0x21e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009138 <HAL_GPIO_Init+0x258>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d013      	beq.n	80090fa <HAL_GPIO_Init+0x21a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a19      	ldr	r2, [pc, #100]	@ (800913c <HAL_GPIO_Init+0x25c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d00d      	beq.n	80090f6 <HAL_GPIO_Init+0x216>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a18      	ldr	r2, [pc, #96]	@ (8009140 <HAL_GPIO_Init+0x260>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d007      	beq.n	80090f2 <HAL_GPIO_Init+0x212>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a17      	ldr	r2, [pc, #92]	@ (8009144 <HAL_GPIO_Init+0x264>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d101      	bne.n	80090ee <HAL_GPIO_Init+0x20e>
 80090ea:	2309      	movs	r3, #9
 80090ec:	e02d      	b.n	800914a <HAL_GPIO_Init+0x26a>
 80090ee:	230a      	movs	r3, #10
 80090f0:	e02b      	b.n	800914a <HAL_GPIO_Init+0x26a>
 80090f2:	2308      	movs	r3, #8
 80090f4:	e029      	b.n	800914a <HAL_GPIO_Init+0x26a>
 80090f6:	2307      	movs	r3, #7
 80090f8:	e027      	b.n	800914a <HAL_GPIO_Init+0x26a>
 80090fa:	2306      	movs	r3, #6
 80090fc:	e025      	b.n	800914a <HAL_GPIO_Init+0x26a>
 80090fe:	2305      	movs	r3, #5
 8009100:	e023      	b.n	800914a <HAL_GPIO_Init+0x26a>
 8009102:	2304      	movs	r3, #4
 8009104:	e021      	b.n	800914a <HAL_GPIO_Init+0x26a>
 8009106:	2303      	movs	r3, #3
 8009108:	e01f      	b.n	800914a <HAL_GPIO_Init+0x26a>
 800910a:	2302      	movs	r3, #2
 800910c:	e01d      	b.n	800914a <HAL_GPIO_Init+0x26a>
 800910e:	2301      	movs	r3, #1
 8009110:	e01b      	b.n	800914a <HAL_GPIO_Init+0x26a>
 8009112:	bf00      	nop
 8009114:	58000080 	.word	0x58000080
 8009118:	58024400 	.word	0x58024400
 800911c:	58000400 	.word	0x58000400
 8009120:	58020000 	.word	0x58020000
 8009124:	58020400 	.word	0x58020400
 8009128:	58020800 	.word	0x58020800
 800912c:	58020c00 	.word	0x58020c00
 8009130:	58021000 	.word	0x58021000
 8009134:	58021400 	.word	0x58021400
 8009138:	58021800 	.word	0x58021800
 800913c:	58021c00 	.word	0x58021c00
 8009140:	58022000 	.word	0x58022000
 8009144:	58022400 	.word	0x58022400
 8009148:	2300      	movs	r3, #0
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	f002 0203 	and.w	r2, r2, #3
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	4093      	lsls	r3, r2
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	4313      	orrs	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800915a:	4938      	ldr	r1, [pc, #224]	@ (800923c <HAL_GPIO_Init+0x35c>)
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	089b      	lsrs	r3, r3, #2
 8009160:	3302      	adds	r3, #2
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	43db      	mvns	r3, r3
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	4013      	ands	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800918e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	43db      	mvns	r3, r3
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	4013      	ands	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	4013      	ands	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	43db      	mvns	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	f47f ae63 	bne.w	8008ef4 <HAL_GPIO_Init+0x14>
  }
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	3724      	adds	r7, #36	@ 0x24
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	58000400 	.word	0x58000400

08009240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
 800924c:	4613      	mov	r3, r2
 800924e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009250:	787b      	ldrb	r3, [r7, #1]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009256:	887a      	ldrh	r2, [r7, #2]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800925c:	e003      	b.n	8009266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800925e:	887b      	ldrh	r3, [r7, #2]
 8009260:	041a      	lsls	r2, r3, #16
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	619a      	str	r2, [r3, #24]
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e08b      	b.n	800939e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fa f948 	bl	8003530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2224      	movs	r2, #36	@ 0x24
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80092c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d107      	bne.n	80092ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092ea:	609a      	str	r2, [r3, #8]
 80092ec:	e006      	b.n	80092fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689a      	ldr	r2, [r3, #8]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80092fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d108      	bne.n	8009316 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	e007      	b.n	8009326 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6859      	ldr	r1, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b1d      	ldr	r3, [pc, #116]	@ (80093a8 <HAL_I2C_Init+0x134>)
 8009332:	430b      	orrs	r3, r1
 8009334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691a      	ldr	r2, [r3, #16]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1a      	ldr	r2, [r3, #32]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	02008000 	.word	0x02008000

080093ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d138      	bne.n	8009434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e032      	b.n	8009436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2224      	movs	r2, #36	@ 0x24
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0201 	bic.w	r2, r2, #1
 80093ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6819      	ldr	r1, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0201 	orr.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	e000      	b.n	8009436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009434:	2302      	movs	r3, #2
  }
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b20      	cmp	r3, #32
 8009456:	d139      	bne.n	80094cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009462:	2302      	movs	r3, #2
 8009464:	e033      	b.n	80094ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2224      	movs	r2, #36	@ 0x24
 8009472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009494:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0201 	orr.w	r2, r2, #1
 80094b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	e000      	b.n	80094ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80094cc:	2302      	movs	r3, #2
  }
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
	...

080094dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80094e4:	4b19      	ldr	r3, [pc, #100]	@ (800954c <HAL_PWREx_ConfigSupply+0x70>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d00a      	beq.n	8009506 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80094f0:	4b16      	ldr	r3, [pc, #88]	@ (800954c <HAL_PWREx_ConfigSupply+0x70>)
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d001      	beq.n	8009502 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e01f      	b.n	8009542 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	e01d      	b.n	8009542 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009506:	4b11      	ldr	r3, [pc, #68]	@ (800954c <HAL_PWREx_ConfigSupply+0x70>)
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f023 0207 	bic.w	r2, r3, #7
 800950e:	490f      	ldr	r1, [pc, #60]	@ (800954c <HAL_PWREx_ConfigSupply+0x70>)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4313      	orrs	r3, r2
 8009514:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009516:	f7fc f8dd 	bl	80056d4 <HAL_GetTick>
 800951a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800951c:	e009      	b.n	8009532 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800951e:	f7fc f8d9 	bl	80056d4 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800952c:	d901      	bls.n	8009532 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e007      	b.n	8009542 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009532:	4b06      	ldr	r3, [pc, #24]	@ (800954c <HAL_PWREx_ConfigSupply+0x70>)
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800953a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953e:	d1ee      	bne.n	800951e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	58024800 	.word	0x58024800

08009550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08c      	sub	sp, #48	@ 0x30
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f000 bc1f 	b.w	8009da2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80b3 	beq.w	80096d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009572:	4b95      	ldr	r3, [pc, #596]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800957a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800957c:	4b92      	ldr	r3, [pc, #584]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800957e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009580:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	2b10      	cmp	r3, #16
 8009586:	d007      	beq.n	8009598 <HAL_RCC_OscConfig+0x48>
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	2b18      	cmp	r3, #24
 800958c:	d112      	bne.n	80095b4 <HAL_RCC_OscConfig+0x64>
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d10d      	bne.n	80095b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009598:	4b8b      	ldr	r3, [pc, #556]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8098 	beq.w	80096d6 <HAL_RCC_OscConfig+0x186>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f040 8093 	bne.w	80096d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e3f6      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095bc:	d106      	bne.n	80095cc <HAL_RCC_OscConfig+0x7c>
 80095be:	4b82      	ldr	r3, [pc, #520]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a81      	ldr	r2, [pc, #516]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	e058      	b.n	800967e <HAL_RCC_OscConfig+0x12e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d112      	bne.n	80095fa <HAL_RCC_OscConfig+0xaa>
 80095d4:	4b7c      	ldr	r3, [pc, #496]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a7b      	ldr	r2, [pc, #492]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	4b79      	ldr	r3, [pc, #484]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a78      	ldr	r2, [pc, #480]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	4b76      	ldr	r3, [pc, #472]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a75      	ldr	r2, [pc, #468]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80095f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	e041      	b.n	800967e <HAL_RCC_OscConfig+0x12e>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009602:	d112      	bne.n	800962a <HAL_RCC_OscConfig+0xda>
 8009604:	4b70      	ldr	r3, [pc, #448]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a6f      	ldr	r2, [pc, #444]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800960a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	4b6d      	ldr	r3, [pc, #436]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a6c      	ldr	r2, [pc, #432]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009616:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	4b6a      	ldr	r3, [pc, #424]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a69      	ldr	r2, [pc, #420]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	e029      	b.n	800967e <HAL_RCC_OscConfig+0x12e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009632:	d112      	bne.n	800965a <HAL_RCC_OscConfig+0x10a>
 8009634:	4b64      	ldr	r3, [pc, #400]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a63      	ldr	r2, [pc, #396]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800963a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	4b61      	ldr	r3, [pc, #388]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a60      	ldr	r2, [pc, #384]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	4b5e      	ldr	r3, [pc, #376]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a5d      	ldr	r2, [pc, #372]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e011      	b.n	800967e <HAL_RCC_OscConfig+0x12e>
 800965a:	4b5b      	ldr	r3, [pc, #364]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a5a      	ldr	r2, [pc, #360]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	4b58      	ldr	r3, [pc, #352]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a57      	ldr	r2, [pc, #348]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800966c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	4b55      	ldr	r3, [pc, #340]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a54      	ldr	r2, [pc, #336]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009678:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800967c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d013      	beq.n	80096ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009686:	f7fc f825 	bl	80056d4 <HAL_GetTick>
 800968a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800968c:	e008      	b.n	80096a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800968e:	f7fc f821 	bl	80056d4 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b64      	cmp	r3, #100	@ 0x64
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e380      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096a0:	4b49      	ldr	r3, [pc, #292]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f0      	beq.n	800968e <HAL_RCC_OscConfig+0x13e>
 80096ac:	e014      	b.n	80096d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ae:	f7fc f811 	bl	80056d4 <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096b4:	e008      	b.n	80096c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096b6:	f7fc f80d 	bl	80056d4 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b64      	cmp	r3, #100	@ 0x64
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e36c      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096c8:	4b3f      	ldr	r3, [pc, #252]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f0      	bne.n	80096b6 <HAL_RCC_OscConfig+0x166>
 80096d4:	e000      	b.n	80096d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 808c 	beq.w	80097fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096e6:	4b38      	ldr	r3, [pc, #224]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096f0:	4b35      	ldr	r3, [pc, #212]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80096f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <HAL_RCC_OscConfig+0x1bc>
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	2b18      	cmp	r3, #24
 8009700:	d137      	bne.n	8009772 <HAL_RCC_OscConfig+0x222>
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d132      	bne.n	8009772 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800970c:	4b2e      	ldr	r3, [pc, #184]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <HAL_RCC_OscConfig+0x1d4>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e33e      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009724:	4b28      	ldr	r3, [pc, #160]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f023 0219 	bic.w	r2, r3, #25
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4925      	ldr	r1, [pc, #148]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009732:	4313      	orrs	r3, r2
 8009734:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009736:	f7fb ffcd 	bl	80056d4 <HAL_GetTick>
 800973a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800973c:	e008      	b.n	8009750 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800973e:	f7fb ffc9 	bl	80056d4 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d901      	bls.n	8009750 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e328      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009750:	4b1d      	ldr	r3, [pc, #116]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0f0      	beq.n	800973e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800975c:	4b1a      	ldr	r3, [pc, #104]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	4917      	ldr	r1, [pc, #92]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800976c:	4313      	orrs	r3, r2
 800976e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009770:	e045      	b.n	80097fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d028      	beq.n	80097cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800977a:	4b13      	ldr	r3, [pc, #76]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f023 0219 	bic.w	r2, r3, #25
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	4910      	ldr	r1, [pc, #64]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 8009788:	4313      	orrs	r3, r2
 800978a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800978c:	f7fb ffa2 	bl	80056d4 <HAL_GetTick>
 8009790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009794:	f7fb ff9e 	bl	80056d4 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e2fd      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097a6:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f0      	beq.n	8009794 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097b2:	4b05      	ldr	r3, [pc, #20]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	061b      	lsls	r3, r3, #24
 80097c0:	4901      	ldr	r1, [pc, #4]	@ (80097c8 <HAL_RCC_OscConfig+0x278>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	604b      	str	r3, [r1, #4]
 80097c6:	e01a      	b.n	80097fe <HAL_RCC_OscConfig+0x2ae>
 80097c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097cc:	4b97      	ldr	r3, [pc, #604]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a96      	ldr	r2, [pc, #600]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d8:	f7fb ff7c 	bl	80056d4 <HAL_GetTick>
 80097dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097e0:	f7fb ff78 	bl	80056d4 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e2d7      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097f2:	4b8e      	ldr	r3, [pc, #568]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f0      	bne.n	80097e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0310 	and.w	r3, r3, #16
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06a      	beq.n	80098e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800980a:	4b88      	ldr	r3, [pc, #544]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009812:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009814:	4b85      	ldr	r3, [pc, #532]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009818:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d007      	beq.n	8009830 <HAL_RCC_OscConfig+0x2e0>
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b18      	cmp	r3, #24
 8009824:	d11b      	bne.n	800985e <HAL_RCC_OscConfig+0x30e>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f003 0303 	and.w	r3, r3, #3
 800982c:	2b01      	cmp	r3, #1
 800982e:	d116      	bne.n	800985e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009830:	4b7e      	ldr	r3, [pc, #504]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_RCC_OscConfig+0x2f8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	2b80      	cmp	r3, #128	@ 0x80
 8009842:	d001      	beq.n	8009848 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e2ac      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009848:	4b78      	ldr	r3, [pc, #480]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	061b      	lsls	r3, r3, #24
 8009856:	4975      	ldr	r1, [pc, #468]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009858:	4313      	orrs	r3, r2
 800985a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800985c:	e040      	b.n	80098e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d023      	beq.n	80098ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009866:	4b71      	ldr	r3, [pc, #452]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a70      	ldr	r2, [pc, #448]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800986c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009872:	f7fb ff2f 	bl	80056d4 <HAL_GetTick>
 8009876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009878:	e008      	b.n	800988c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800987a:	f7fb ff2b 	bl	80056d4 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2b02      	cmp	r3, #2
 8009886:	d901      	bls.n	800988c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e28a      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800988c:	4b67      	ldr	r3, [pc, #412]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0f0      	beq.n	800987a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009898:	4b64      	ldr	r3, [pc, #400]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	061b      	lsls	r3, r3, #24
 80098a6:	4961      	ldr	r1, [pc, #388]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	60cb      	str	r3, [r1, #12]
 80098ac:	e018      	b.n	80098e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80098ae:	4b5f      	ldr	r3, [pc, #380]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a5e      	ldr	r2, [pc, #376]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ba:	f7fb ff0b 	bl	80056d4 <HAL_GetTick>
 80098be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098c0:	e008      	b.n	80098d4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098c2:	f7fb ff07 	bl	80056d4 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e266      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098d4:	4b55      	ldr	r3, [pc, #340]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f0      	bne.n	80098c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d036      	beq.n	800995a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d019      	beq.n	8009928 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098f4:	4b4d      	ldr	r3, [pc, #308]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f8:	4a4c      	ldr	r2, [pc, #304]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009900:	f7fb fee8 	bl	80056d4 <HAL_GetTick>
 8009904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009906:	e008      	b.n	800991a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009908:	f7fb fee4 	bl	80056d4 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d901      	bls.n	800991a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e243      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800991a:	4b44      	ldr	r3, [pc, #272]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800991c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0f0      	beq.n	8009908 <HAL_RCC_OscConfig+0x3b8>
 8009926:	e018      	b.n	800995a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009928:	4b40      	ldr	r3, [pc, #256]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800992a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800992c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009934:	f7fb fece 	bl	80056d4 <HAL_GetTick>
 8009938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800993a:	e008      	b.n	800994e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800993c:	f7fb feca 	bl	80056d4 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b02      	cmp	r3, #2
 8009948:	d901      	bls.n	800994e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e229      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800994e:	4b37      	ldr	r3, [pc, #220]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f0      	bne.n	800993c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d036      	beq.n	80099d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d019      	beq.n	80099a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800996e:	4b2f      	ldr	r3, [pc, #188]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a2e      	ldr	r2, [pc, #184]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800997a:	f7fb feab 	bl	80056d4 <HAL_GetTick>
 800997e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009980:	e008      	b.n	8009994 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009982:	f7fb fea7 	bl	80056d4 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	2b02      	cmp	r3, #2
 800998e:	d901      	bls.n	8009994 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e206      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009994:	4b25      	ldr	r3, [pc, #148]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0f0      	beq.n	8009982 <HAL_RCC_OscConfig+0x432>
 80099a0:	e018      	b.n	80099d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099a2:	4b22      	ldr	r3, [pc, #136]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a21      	ldr	r2, [pc, #132]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80099a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099ae:	f7fb fe91 	bl	80056d4 <HAL_GetTick>
 80099b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099b6:	f7fb fe8d 	bl	80056d4 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e1ec      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099c8:	4b18      	ldr	r3, [pc, #96]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f0      	bne.n	80099b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 80af 	beq.w	8009b40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80099e2:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <HAL_RCC_OscConfig+0x4e0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a12      	ldr	r2, [pc, #72]	@ (8009a30 <HAL_RCC_OscConfig+0x4e0>)
 80099e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099ee:	f7fb fe71 	bl	80056d4 <HAL_GetTick>
 80099f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099f4:	e008      	b.n	8009a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f6:	f7fb fe6d 	bl	80056d4 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b64      	cmp	r3, #100	@ 0x64
 8009a02:	d901      	bls.n	8009a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e1cc      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a08:	4b09      	ldr	r3, [pc, #36]	@ (8009a30 <HAL_RCC_OscConfig+0x4e0>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0f0      	beq.n	80099f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10b      	bne.n	8009a34 <HAL_RCC_OscConfig+0x4e4>
 8009a1c:	4b03      	ldr	r3, [pc, #12]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a20:	4a02      	ldr	r2, [pc, #8]	@ (8009a2c <HAL_RCC_OscConfig+0x4dc>)
 8009a22:	f043 0301 	orr.w	r3, r3, #1
 8009a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a28:	e05b      	b.n	8009ae2 <HAL_RCC_OscConfig+0x592>
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	58024800 	.word	0x58024800
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d112      	bne.n	8009a62 <HAL_RCC_OscConfig+0x512>
 8009a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a40:	4a9c      	ldr	r2, [pc, #624]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a42:	f023 0301 	bic.w	r3, r3, #1
 8009a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a48:	4b9a      	ldr	r3, [pc, #616]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4c:	4a99      	ldr	r2, [pc, #612]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a54:	4b97      	ldr	r3, [pc, #604]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a58:	4a96      	ldr	r2, [pc, #600]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a5a:	f023 0304 	bic.w	r3, r3, #4
 8009a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a60:	e03f      	b.n	8009ae2 <HAL_RCC_OscConfig+0x592>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d112      	bne.n	8009a90 <HAL_RCC_OscConfig+0x540>
 8009a6a:	4b92      	ldr	r3, [pc, #584]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6e:	4a91      	ldr	r2, [pc, #580]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a70:	f043 0304 	orr.w	r3, r3, #4
 8009a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a76:	4b8f      	ldr	r3, [pc, #572]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7a:	4a8e      	ldr	r2, [pc, #568]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a82:	4b8c      	ldr	r3, [pc, #560]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a86:	4a8b      	ldr	r2, [pc, #556]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a8e:	e028      	b.n	8009ae2 <HAL_RCC_OscConfig+0x592>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b85      	cmp	r3, #133	@ 0x85
 8009a96:	d112      	bne.n	8009abe <HAL_RCC_OscConfig+0x56e>
 8009a98:	4b86      	ldr	r3, [pc, #536]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	4a85      	ldr	r2, [pc, #532]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009a9e:	f043 0304 	orr.w	r3, r3, #4
 8009aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aa4:	4b83      	ldr	r3, [pc, #524]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa8:	4a82      	ldr	r2, [pc, #520]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ab0:	4b80      	ldr	r3, [pc, #512]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8009abc:	e011      	b.n	8009ae2 <HAL_RCC_OscConfig+0x592>
 8009abe:	4b7d      	ldr	r3, [pc, #500]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aca:	4b7a      	ldr	r3, [pc, #488]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ace:	4a79      	ldr	r2, [pc, #484]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ad0:	f023 0304 	bic.w	r3, r3, #4
 8009ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ad6:	4b77      	ldr	r3, [pc, #476]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ada:	4a76      	ldr	r2, [pc, #472]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ae0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d015      	beq.n	8009b16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aea:	f7fb fdf3 	bl	80056d4 <HAL_GetTick>
 8009aee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af0:	e00a      	b.n	8009b08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009af2:	f7fb fdef 	bl	80056d4 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d901      	bls.n	8009b08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e14c      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b08:	4b6a      	ldr	r3, [pc, #424]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0ee      	beq.n	8009af2 <HAL_RCC_OscConfig+0x5a2>
 8009b14:	e014      	b.n	8009b40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b16:	f7fb fddd 	bl	80056d4 <HAL_GetTick>
 8009b1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b1c:	e00a      	b.n	8009b34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b1e:	f7fb fdd9 	bl	80056d4 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e136      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b34:	4b5f      	ldr	r3, [pc, #380]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1ee      	bne.n	8009b1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 812b 	beq.w	8009da0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b52:	2b18      	cmp	r3, #24
 8009b54:	f000 80bb 	beq.w	8009cce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	f040 8095 	bne.w	8009c8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b62:	4b54      	ldr	r3, [pc, #336]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a53      	ldr	r2, [pc, #332]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6e:	f7fb fdb1 	bl	80056d4 <HAL_GetTick>
 8009b72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b76:	f7fb fdad 	bl	80056d4 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e10c      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b88:	4b4a      	ldr	r3, [pc, #296]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1f0      	bne.n	8009b76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b94:	4b47      	ldr	r3, [pc, #284]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009b96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b98:	4b47      	ldr	r3, [pc, #284]	@ (8009cb8 <HAL_RCC_OscConfig+0x768>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	4942      	ldr	r1, [pc, #264]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	628b      	str	r3, [r1, #40]	@ 0x28
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	025b      	lsls	r3, r3, #9
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	041b      	lsls	r3, r3, #16
 8009bcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	061b      	lsls	r3, r3, #24
 8009bda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009bde:	4935      	ldr	r1, [pc, #212]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009be4:	4b33      	ldr	r3, [pc, #204]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be8:	4a32      	ldr	r2, [pc, #200]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bf0:	4b30      	ldr	r3, [pc, #192]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bf4:	4b31      	ldr	r3, [pc, #196]	@ (8009cbc <HAL_RCC_OscConfig+0x76c>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bfc:	00d2      	lsls	r2, r2, #3
 8009bfe:	492d      	ldr	r1, [pc, #180]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c04:	4b2b      	ldr	r3, [pc, #172]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	f023 020c 	bic.w	r2, r3, #12
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c10:	4928      	ldr	r1, [pc, #160]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009c16:	4b27      	ldr	r3, [pc, #156]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f023 0202 	bic.w	r2, r3, #2
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	4924      	ldr	r1, [pc, #144]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c28:	4b22      	ldr	r3, [pc, #136]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	4a21      	ldr	r2, [pc, #132]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c34:	4b1f      	ldr	r3, [pc, #124]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c38:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c40:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c44:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c4c:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c50:	4a18      	ldr	r2, [pc, #96]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c58:	4b16      	ldr	r3, [pc, #88]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a15      	ldr	r2, [pc, #84]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c64:	f7fb fd36 	bl	80056d4 <HAL_GetTick>
 8009c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c6c:	f7fb fd32 	bl	80056d4 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e091      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f0      	beq.n	8009c6c <HAL_RCC_OscConfig+0x71c>
 8009c8a:	e089      	b.n	8009da0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c8c:	4b09      	ldr	r3, [pc, #36]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <HAL_RCC_OscConfig+0x764>)
 8009c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c98:	f7fb fd1c 	bl	80056d4 <HAL_GetTick>
 8009c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c9e:	e00f      	b.n	8009cc0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca0:	f7fb fd18 	bl	80056d4 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d908      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e077      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
 8009cb2:	bf00      	nop
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	fffffc0c 	.word	0xfffffc0c
 8009cbc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e9      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x750>
 8009ccc:	e068      	b.n	8009da0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009cce:	4b37      	ldr	r3, [pc, #220]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009cd4:	4b35      	ldr	r3, [pc, #212]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d031      	beq.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f003 0203 	and.w	r2, r3, #3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d12a      	bne.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	091b      	lsrs	r3, r3, #4
 8009cf4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d122      	bne.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d11a      	bne.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	0a5b      	lsrs	r3, r3, #9
 8009d14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d111      	bne.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d108      	bne.n	8009d46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	0e1b      	lsrs	r3, r3, #24
 8009d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d001      	beq.n	8009d4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e02b      	b.n	8009da2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d4a:	4b18      	ldr	r3, [pc, #96]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4e:	08db      	lsrs	r3, r3, #3
 8009d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d01f      	beq.n	8009da0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d60:	4b12      	ldr	r3, [pc, #72]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d64:	4a11      	ldr	r2, [pc, #68]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d6c:	f7fb fcb2 	bl	80056d4 <HAL_GetTick>
 8009d70:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d72:	bf00      	nop
 8009d74:	f7fb fcae 	bl	80056d4 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d0f9      	beq.n	8009d74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d80:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d84:	4b0a      	ldr	r3, [pc, #40]	@ (8009db0 <HAL_RCC_OscConfig+0x860>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d8c:	00d2      	lsls	r2, r2, #3
 8009d8e:	4907      	ldr	r1, [pc, #28]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d94:	4b05      	ldr	r3, [pc, #20]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d98:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <HAL_RCC_OscConfig+0x85c>)
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3730      	adds	r7, #48	@ 0x30
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	58024400 	.word	0x58024400
 8009db0:	ffff0007 	.word	0xffff0007

08009db4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e19c      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009dc8:	4b8a      	ldr	r3, [pc, #552]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d910      	bls.n	8009df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dd6:	4b87      	ldr	r3, [pc, #540]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f023 020f 	bic.w	r2, r3, #15
 8009dde:	4985      	ldr	r1, [pc, #532]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de6:	4b83      	ldr	r3, [pc, #524]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d001      	beq.n	8009df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e184      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d010      	beq.n	8009e26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	4b7b      	ldr	r3, [pc, #492]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d908      	bls.n	8009e26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e14:	4b78      	ldr	r3, [pc, #480]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4975      	ldr	r1, [pc, #468]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 0308 	and.w	r3, r3, #8
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d010      	beq.n	8009e54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695a      	ldr	r2, [r3, #20]
 8009e36:	4b70      	ldr	r3, [pc, #448]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d908      	bls.n	8009e54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e42:	4b6d      	ldr	r3, [pc, #436]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	496a      	ldr	r1, [pc, #424]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d010      	beq.n	8009e82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699a      	ldr	r2, [r3, #24]
 8009e64:	4b64      	ldr	r3, [pc, #400]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d908      	bls.n	8009e82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e70:	4b61      	ldr	r3, [pc, #388]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	495e      	ldr	r1, [pc, #376]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d010      	beq.n	8009eb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69da      	ldr	r2, [r3, #28]
 8009e92:	4b59      	ldr	r3, [pc, #356]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d908      	bls.n	8009eb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e9e:	4b56      	ldr	r3, [pc, #344]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	4953      	ldr	r1, [pc, #332]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d010      	beq.n	8009ede <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d908      	bls.n	8009ede <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f023 020f 	bic.w	r2, r3, #15
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4947      	ldr	r1, [pc, #284]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d055      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009eea:	4b43      	ldr	r3, [pc, #268]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4940      	ldr	r1, [pc, #256]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d107      	bne.n	8009f14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f04:	4b3c      	ldr	r3, [pc, #240]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d121      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e0f6      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f1c:	4b36      	ldr	r3, [pc, #216]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d115      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e0ea      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d107      	bne.n	8009f44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f34:	4b30      	ldr	r3, [pc, #192]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d109      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0de      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f44:	4b2c      	ldr	r3, [pc, #176]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e0d6      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f54:	4b28      	ldr	r3, [pc, #160]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f023 0207 	bic.w	r2, r3, #7
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4925      	ldr	r1, [pc, #148]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f66:	f7fb fbb5 	bl	80056d4 <HAL_GetTick>
 8009f6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f6c:	e00a      	b.n	8009f84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f6e:	f7fb fbb1 	bl	80056d4 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e0be      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f84:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d1eb      	bne.n	8009f6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	4b14      	ldr	r3, [pc, #80]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d208      	bcs.n	8009fc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fb2:	4b11      	ldr	r3, [pc, #68]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	f023 020f 	bic.w	r2, r3, #15
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	490e      	ldr	r1, [pc, #56]	@ (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d214      	bcs.n	8009ffc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fd2:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f023 020f 	bic.w	r2, r3, #15
 8009fda:	4906      	ldr	r1, [pc, #24]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe2:	4b04      	ldr	r3, [pc, #16]	@ (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d005      	beq.n	8009ffc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e086      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
 8009ff4:	52002000 	.word	0x52002000
 8009ff8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	d010      	beq.n	800a02a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	4b3f      	ldr	r3, [pc, #252]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a014:	429a      	cmp	r2, r3
 800a016:	d208      	bcs.n	800a02a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a018:	4b3c      	ldr	r3, [pc, #240]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	4939      	ldr	r1, [pc, #228]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a026:	4313      	orrs	r3, r2
 800a028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0308 	and.w	r3, r3, #8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d010      	beq.n	800a058 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	695a      	ldr	r2, [r3, #20]
 800a03a:	4b34      	ldr	r3, [pc, #208]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a042:	429a      	cmp	r2, r3
 800a044:	d208      	bcs.n	800a058 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a046:	4b31      	ldr	r3, [pc, #196]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	492e      	ldr	r1, [pc, #184]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a054:	4313      	orrs	r3, r2
 800a056:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0310 	and.w	r3, r3, #16
 800a060:	2b00      	cmp	r3, #0
 800a062:	d010      	beq.n	800a086 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	4b28      	ldr	r3, [pc, #160]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a070:	429a      	cmp	r2, r3
 800a072:	d208      	bcs.n	800a086 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a074:	4b25      	ldr	r3, [pc, #148]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	4922      	ldr	r1, [pc, #136]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a082:	4313      	orrs	r3, r2
 800a084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d010      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69da      	ldr	r2, [r3, #28]
 800a096:	4b1d      	ldr	r3, [pc, #116]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d208      	bcs.n	800a0b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	4917      	ldr	r1, [pc, #92]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a0b4:	f000 f834 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	0a1b      	lsrs	r3, r3, #8
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	4912      	ldr	r1, [pc, #72]	@ (800a110 <HAL_RCC_ClockConfig+0x35c>)
 800a0c6:	5ccb      	ldrb	r3, [r1, r3]
 800a0c8:	f003 031f 	and.w	r3, r3, #31
 800a0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	4a0d      	ldr	r2, [pc, #52]	@ (800a110 <HAL_RCC_ClockConfig+0x35c>)
 800a0dc:	5cd3      	ldrb	r3, [r2, r3]
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a114 <HAL_RCC_ClockConfig+0x360>)
 800a0ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a118 <HAL_RCC_ClockConfig+0x364>)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <HAL_RCC_ClockConfig+0x368>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fb faa2 	bl	8005640 <HAL_InitTick>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	58024400 	.word	0x58024400
 800a110:	08018894 	.word	0x08018894
 800a114:	240000c4 	.word	0x240000c4
 800a118:	240000c0 	.word	0x240000c0
 800a11c:	240000c8 	.word	0x240000c8

0800a120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a120:	b480      	push	{r7}
 800a122:	b089      	sub	sp, #36	@ 0x24
 800a124:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a126:	4bb3      	ldr	r3, [pc, #716]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a12e:	2b18      	cmp	r3, #24
 800a130:	f200 8155 	bhi.w	800a3de <HAL_RCC_GetSysClockFreq+0x2be>
 800a134:	a201      	add	r2, pc, #4	@ (adr r2, 800a13c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13a:	bf00      	nop
 800a13c:	0800a1a1 	.word	0x0800a1a1
 800a140:	0800a3df 	.word	0x0800a3df
 800a144:	0800a3df 	.word	0x0800a3df
 800a148:	0800a3df 	.word	0x0800a3df
 800a14c:	0800a3df 	.word	0x0800a3df
 800a150:	0800a3df 	.word	0x0800a3df
 800a154:	0800a3df 	.word	0x0800a3df
 800a158:	0800a3df 	.word	0x0800a3df
 800a15c:	0800a1c7 	.word	0x0800a1c7
 800a160:	0800a3df 	.word	0x0800a3df
 800a164:	0800a3df 	.word	0x0800a3df
 800a168:	0800a3df 	.word	0x0800a3df
 800a16c:	0800a3df 	.word	0x0800a3df
 800a170:	0800a3df 	.word	0x0800a3df
 800a174:	0800a3df 	.word	0x0800a3df
 800a178:	0800a3df 	.word	0x0800a3df
 800a17c:	0800a1cd 	.word	0x0800a1cd
 800a180:	0800a3df 	.word	0x0800a3df
 800a184:	0800a3df 	.word	0x0800a3df
 800a188:	0800a3df 	.word	0x0800a3df
 800a18c:	0800a3df 	.word	0x0800a3df
 800a190:	0800a3df 	.word	0x0800a3df
 800a194:	0800a3df 	.word	0x0800a3df
 800a198:	0800a3df 	.word	0x0800a3df
 800a19c:	0800a1d3 	.word	0x0800a1d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1a0:	4b94      	ldr	r3, [pc, #592]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ac:	4b91      	ldr	r3, [pc, #580]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	08db      	lsrs	r3, r3, #3
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	4a90      	ldr	r2, [pc, #576]	@ (800a3f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a1be:	e111      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a1c0:	4b8d      	ldr	r3, [pc, #564]	@ (800a3f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1c2:	61bb      	str	r3, [r7, #24]
      break;
 800a1c4:	e10e      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a1c6:	4b8d      	ldr	r3, [pc, #564]	@ (800a3fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1c8:	61bb      	str	r3, [r7, #24]
      break;
 800a1ca:	e10b      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a1cc:	4b8c      	ldr	r3, [pc, #560]	@ (800a400 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a1ce:	61bb      	str	r3, [r7, #24]
      break;
 800a1d0:	e108      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1d2:	4b88      	ldr	r3, [pc, #544]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a1dc:	4b85      	ldr	r3, [pc, #532]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e0:	091b      	lsrs	r3, r3, #4
 800a1e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a1e8:	4b82      	ldr	r3, [pc, #520]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1f2:	4b80      	ldr	r3, [pc, #512]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f6:	08db      	lsrs	r3, r3, #3
 800a1f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	fb02 f303 	mul.w	r3, r2, r3
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 80e1 	beq.w	800a3d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	f000 8083 	beq.w	800a324 <HAL_RCC_GetSysClockFreq+0x204>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b02      	cmp	r3, #2
 800a222:	f200 80a1 	bhi.w	800a368 <HAL_RCC_GetSysClockFreq+0x248>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <HAL_RCC_GetSysClockFreq+0x114>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d056      	beq.n	800a2e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a232:	e099      	b.n	800a368 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a234:	4b6f      	ldr	r3, [pc, #444]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d02d      	beq.n	800a29c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a240:	4b6c      	ldr	r3, [pc, #432]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	08db      	lsrs	r3, r3, #3
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	4a6b      	ldr	r2, [pc, #428]	@ (800a3f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a24c:	fa22 f303 	lsr.w	r3, r2, r3
 800a250:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26a:	4b62      	ldr	r3, [pc, #392]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a27e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a404 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a296:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a29a:	e087      	b.n	800a3ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a408 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ae:	4b51      	ldr	r3, [pc, #324]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a404 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2de:	e065      	b.n	800a3ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a40c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f2:	4b40      	ldr	r3, [pc, #256]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a302:	ed97 6a02 	vldr	s12, [r7, #8]
 800a306:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a404 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a322:	e043      	b.n	800a3ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a410 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a336:	4b2f      	ldr	r3, [pc, #188]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a346:	ed97 6a02 	vldr	s12, [r7, #8]
 800a34a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a404 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a366:	e021      	b.n	800a3ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a40c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a38e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a404 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a3ac:	4b11      	ldr	r3, [pc, #68]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b0:	0a5b      	lsrs	r3, r3, #9
 800a3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d0:	ee17 3a90 	vmov	r3, s15
 800a3d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a3d6:	e005      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	61bb      	str	r3, [r7, #24]
      break;
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a3de:	4b07      	ldr	r3, [pc, #28]	@ (800a3fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a3e0:	61bb      	str	r3, [r7, #24]
      break;
 800a3e2:	bf00      	nop
  }

  return sysclockfreq;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3724      	adds	r7, #36	@ 0x24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	03d09000 	.word	0x03d09000
 800a3fc:	003d0900 	.word	0x003d0900
 800a400:	016e3600 	.word	0x016e3600
 800a404:	46000000 	.word	0x46000000
 800a408:	4c742400 	.word	0x4c742400
 800a40c:	4a742400 	.word	0x4a742400
 800a410:	4bb71b00 	.word	0x4bb71b00

0800a414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a41a:	f7ff fe81 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 800a41e:	4602      	mov	r2, r0
 800a420:	4b10      	ldr	r3, [pc, #64]	@ (800a464 <HAL_RCC_GetHCLKFreq+0x50>)
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	0a1b      	lsrs	r3, r3, #8
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	490f      	ldr	r1, [pc, #60]	@ (800a468 <HAL_RCC_GetHCLKFreq+0x54>)
 800a42c:	5ccb      	ldrb	r3, [r1, r3]
 800a42e:	f003 031f 	and.w	r3, r3, #31
 800a432:	fa22 f303 	lsr.w	r3, r2, r3
 800a436:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a438:	4b0a      	ldr	r3, [pc, #40]	@ (800a464 <HAL_RCC_GetHCLKFreq+0x50>)
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	4a09      	ldr	r2, [pc, #36]	@ (800a468 <HAL_RCC_GetHCLKFreq+0x54>)
 800a442:	5cd3      	ldrb	r3, [r2, r3]
 800a444:	f003 031f 	and.w	r3, r3, #31
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	fa22 f303 	lsr.w	r3, r2, r3
 800a44e:	4a07      	ldr	r2, [pc, #28]	@ (800a46c <HAL_RCC_GetHCLKFreq+0x58>)
 800a450:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a452:	4a07      	ldr	r2, [pc, #28]	@ (800a470 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a458:	4b04      	ldr	r3, [pc, #16]	@ (800a46c <HAL_RCC_GetHCLKFreq+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	58024400 	.word	0x58024400
 800a468:	08018894 	.word	0x08018894
 800a46c:	240000c4 	.word	0x240000c4
 800a470:	240000c0 	.word	0x240000c0

0800a474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a478:	f7ff ffcc 	bl	800a414 <HAL_RCC_GetHCLKFreq>
 800a47c:	4602      	mov	r2, r0
 800a47e:	4b06      	ldr	r3, [pc, #24]	@ (800a498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	091b      	lsrs	r3, r3, #4
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	4904      	ldr	r1, [pc, #16]	@ (800a49c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a48a:	5ccb      	ldrb	r3, [r1, r3]
 800a48c:	f003 031f 	and.w	r3, r3, #31
 800a490:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a494:	4618      	mov	r0, r3
 800a496:	bd80      	pop	{r7, pc}
 800a498:	58024400 	.word	0x58024400
 800a49c:	08018894 	.word	0x08018894

0800a4a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a4a4:	f7ff ffb6 	bl	800a414 <HAL_RCC_GetHCLKFreq>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	0a1b      	lsrs	r3, r3, #8
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	4904      	ldr	r1, [pc, #16]	@ (800a4c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a4b6:	5ccb      	ldrb	r3, [r1, r3]
 800a4b8:	f003 031f 	and.w	r3, r3, #31
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	58024400 	.word	0x58024400
 800a4c8:	08018894 	.word	0x08018894

0800a4cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d0:	b0c8      	sub	sp, #288	@ 0x120
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a4f0:	2500      	movs	r5, #0
 800a4f2:	ea54 0305 	orrs.w	r3, r4, r5
 800a4f6:	d049      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a502:	d02f      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a508:	d828      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a50a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a50e:	d01a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a514:	d822      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a51a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a51e:	d007      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a520:	e01c      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a522:	4ba7      	ldr	r3, [pc, #668]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a526:	4aa6      	ldr	r2, [pc, #664]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a52c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a52e:	e01a      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a534:	3308      	adds	r3, #8
 800a536:	2102      	movs	r1, #2
 800a538:	4618      	mov	r0, r3
 800a53a:	f001 fc43 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a53e:	4603      	mov	r3, r0
 800a540:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a544:	e00f      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a54a:	3328      	adds	r3, #40	@ 0x28
 800a54c:	2102      	movs	r1, #2
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 fcea 	bl	800bf28 <RCCEx_PLL3_Config>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a55a:	e004      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a562:	e000      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a564:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a566:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a56e:	4b94      	ldr	r3, [pc, #592]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a57a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a57c:	4a90      	ldr	r2, [pc, #576]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a57e:	430b      	orrs	r3, r1
 800a580:	6513      	str	r3, [r2, #80]	@ 0x50
 800a582:	e003      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a588:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a598:	f04f 0900 	mov.w	r9, #0
 800a59c:	ea58 0309 	orrs.w	r3, r8, r9
 800a5a0:	d047      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d82a      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5c9 	.word	0x0800a5c9
 800a5b8:	0800a5d7 	.word	0x0800a5d7
 800a5bc:	0800a5ed 	.word	0x0800a5ed
 800a5c0:	0800a60b 	.word	0x0800a60b
 800a5c4:	0800a60b 	.word	0x0800a60b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c8:	4b7d      	ldr	r3, [pc, #500]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5cc:	4a7c      	ldr	r2, [pc, #496]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5d4:	e01a      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fbf0 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5ea:	e00f      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f0:	3328      	adds	r3, #40	@ 0x28
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fc97 	bl	800bf28 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a600:	e004      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a608:	e000      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a60c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a614:	4b6a      	ldr	r3, [pc, #424]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a618:	f023 0107 	bic.w	r1, r3, #7
 800a61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a622:	4a67      	ldr	r2, [pc, #412]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a624:	430b      	orrs	r3, r1
 800a626:	6513      	str	r3, [r2, #80]	@ 0x50
 800a628:	e003      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a62e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a63e:	f04f 0b00 	mov.w	fp, #0
 800a642:	ea5a 030b 	orrs.w	r3, sl, fp
 800a646:	d054      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a64e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a652:	d036      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a654:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a658:	d82f      	bhi.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a65e:	d032      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a664:	d829      	bhi.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a666:	2bc0      	cmp	r3, #192	@ 0xc0
 800a668:	d02f      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a66a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a66c:	d825      	bhi.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a66e:	2b80      	cmp	r3, #128	@ 0x80
 800a670:	d018      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a672:	2b80      	cmp	r3, #128	@ 0x80
 800a674:	d821      	bhi.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	d007      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a67e:	e01c      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a680:	4b4f      	ldr	r3, [pc, #316]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a684:	4a4e      	ldr	r2, [pc, #312]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a68a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a68c:	e01e      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a68e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a692:	3308      	adds	r3, #8
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fb94 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a6a2:	e013      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a8:	3328      	adds	r3, #40	@ 0x28
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 fc3b 	bl	800bf28 <RCCEx_PLL3_Config>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a6b8:	e008      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a6c0:	e004      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a6c2:	bf00      	nop
 800a6c4:	e002      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a6ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a6d4:	4b3a      	ldr	r3, [pc, #232]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6e2:	4a37      	ldr	r2, [pc, #220]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6e8:	e003      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a6fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a702:	2300      	movs	r3, #0
 800a704:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a708:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a70c:	460b      	mov	r3, r1
 800a70e:	4313      	orrs	r3, r2
 800a710:	d05c      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a718:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a71c:	d03b      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a71e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a722:	d834      	bhi.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a728:	d037      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a72a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a72e:	d82e      	bhi.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a730:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a734:	d033      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a736:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a73a:	d828      	bhi.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a73c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a740:	d01a      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a746:	d822      	bhi.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a74c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a750:	d007      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a752:	e01c      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a754:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a758:	4a19      	ldr	r2, [pc, #100]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a75a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a75e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a760:	e01e      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a766:	3308      	adds	r3, #8
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f001 fb2a 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a776:	e013      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a77c:	3328      	adds	r3, #40	@ 0x28
 800a77e:	2100      	movs	r1, #0
 800a780:	4618      	mov	r0, r3
 800a782:	f001 fbd1 	bl	800bf28 <RCCEx_PLL3_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a78c:	e008      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a794:	e004      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a796:	bf00      	nop
 800a798:	e002      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a79a:	bf00      	nop
 800a79c:	e000      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10d      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a7a8:	4b05      	ldr	r3, [pc, #20]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7b6:	4a02      	ldr	r2, [pc, #8]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7bc:	e006      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a7be:	bf00      	nop
 800a7c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a7d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	d03a      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7f2:	2b30      	cmp	r3, #48	@ 0x30
 800a7f4:	d01f      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a7f6:	2b30      	cmp	r3, #48	@ 0x30
 800a7f8:	d819      	bhi.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a7fa:	2b20      	cmp	r3, #32
 800a7fc:	d00c      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d815      	bhi.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d019      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a806:	2b10      	cmp	r3, #16
 800a808:	d111      	bne.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a80a:	4bae      	ldr	r3, [pc, #696]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80e:	4aad      	ldr	r2, [pc, #692]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a816:	e011      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a81c:	3308      	adds	r3, #8
 800a81e:	2102      	movs	r1, #2
 800a820:	4618      	mov	r0, r3
 800a822:	f001 facf 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a826:	4603      	mov	r3, r0
 800a828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a82c:	e006      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a834:	e002      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a836:	bf00      	nop
 800a838:	e000      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a83a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a83c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a844:	4b9f      	ldr	r3, [pc, #636]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a848:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a84c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a852:	4a9c      	ldr	r2, [pc, #624]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a854:	430b      	orrs	r3, r1
 800a856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a858:	e003      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a85a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a85e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a86e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a872:	2300      	movs	r3, #0
 800a874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a878:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4313      	orrs	r3, r2
 800a880:	d051      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a88c:	d035      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a88e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a892:	d82e      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a894:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a898:	d031      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a89a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a89e:	d828      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a8a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8a4:	d01a      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a8a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8aa:	d822      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a8b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b4:	d007      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a8b6:	e01c      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8b8:	4b82      	ldr	r3, [pc, #520]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8bc:	4a81      	ldr	r2, [pc, #516]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8c4:	e01c      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 fa78 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8da:	e011      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8e0:	3328      	adds	r3, #40	@ 0x28
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f001 fb1f 	bl	800bf28 <RCCEx_PLL3_Config>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8f0:	e006      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8f8:	e002      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a8fa:	bf00      	nop
 800a8fc:	e000      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a8fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a900:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a908:	4b6e      	ldr	r3, [pc, #440]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a90a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a90c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a916:	4a6b      	ldr	r2, [pc, #428]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a918:	430b      	orrs	r3, r1
 800a91a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a91c:	e003      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a922:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a936:	2300      	movs	r3, #0
 800a938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a93c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a940:	460b      	mov	r3, r1
 800a942:	4313      	orrs	r3, r2
 800a944:	d053      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a94a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a94c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a950:	d033      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a952:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a956:	d82c      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a95c:	d02f      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a95e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a962:	d826      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a968:	d02b      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a96a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a96e:	d820      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a974:	d012      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a97a:	d81a      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d022      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a984:	d115      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98a:	3308      	adds	r3, #8
 800a98c:	2101      	movs	r1, #1
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 fa18 	bl	800bdc4 <RCCEx_PLL2_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a99a:	e015      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a0:	3328      	adds	r3, #40	@ 0x28
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f001 fabf 	bl	800bf28 <RCCEx_PLL3_Config>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a9b0:	e00a      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a9b8:	e006      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a9ba:	bf00      	nop
 800a9bc:	e004      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a9be:	bf00      	nop
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9d0:	4b3c      	ldr	r3, [pc, #240]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9de:	4a39      	ldr	r2, [pc, #228]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9e4:	e003      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a9ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a9fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	d060      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aa0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa16:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800aa1a:	d039      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800aa1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800aa20:	d832      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa26:	d035      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aa28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa2c:	d82c      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa32:	d031      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aa34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa38:	d826      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa3e:	d02d      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aa40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa44:	d820      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa4a:	d012      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800aa4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa50:	d81a      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d024      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aa56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa5a:	d115      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa60:	3308      	adds	r3, #8
 800aa62:	2101      	movs	r1, #1
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 f9ad 	bl	800bdc4 <RCCEx_PLL2_Config>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa70:	e017      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa76:	3328      	adds	r3, #40	@ 0x28
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fa54 	bl	800bf28 <RCCEx_PLL3_Config>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa86:	e00c      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa90:	bf00      	nop
 800aa92:	e006      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa94:	bf00      	nop
 800aa96:	e004      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa98:	bf00      	nop
 800aa9a:	e002      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa9c:	bf00      	nop
 800aa9e:	e000      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aaa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10e      	bne.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aaaa:	4b06      	ldr	r3, [pc, #24]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aaba:	4a02      	ldr	r2, [pc, #8]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aabc:	430b      	orrs	r3, r1
 800aabe:	6593      	str	r3, [r2, #88]	@ 0x58
 800aac0:	e006      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aac2:	bf00      	nop
 800aac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aacc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800aadc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aae0:	2300      	movs	r3, #0
 800aae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aaea:	460b      	mov	r3, r1
 800aaec:	4313      	orrs	r3, r2
 800aaee:	d037      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aaf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aaf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aafa:	d00e      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aafc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab00:	d816      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d018      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ab06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab0a:	d111      	bne.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab0c:	4bc4      	ldr	r3, [pc, #784]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab10:	4ac3      	ldr	r2, [pc, #780]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab18:	e00f      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab1e:	3308      	adds	r3, #8
 800ab20:	2101      	movs	r1, #1
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 f94e 	bl	800bdc4 <RCCEx_PLL2_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab2e:	e004      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab36:	e000      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ab38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10a      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab42:	4bb7      	ldr	r3, [pc, #732]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ab4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab50:	4ab3      	ldr	r2, [pc, #716]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab52:	430b      	orrs	r3, r1
 800ab54:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab56:	e003      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ab6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ab76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	d039      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d81c      	bhi.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab90:	0800abcd 	.word	0x0800abcd
 800ab94:	0800aba1 	.word	0x0800aba1
 800ab98:	0800abaf 	.word	0x0800abaf
 800ab9c:	0800abcd 	.word	0x0800abcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba0:	4b9f      	ldr	r3, [pc, #636]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba4:	4a9e      	ldr	r2, [pc, #632]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800abac:	e00f      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb2:	3308      	adds	r3, #8
 800abb4:	2102      	movs	r1, #2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 f904 	bl	800bdc4 <RCCEx_PLL2_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800abc2:	e004      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abca:	e000      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800abcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10a      	bne.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800abd6:	4b92      	ldr	r3, [pc, #584]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abda:	f023 0103 	bic.w	r1, r3, #3
 800abde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abe4:	4a8e      	ldr	r2, [pc, #568]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe6:	430b      	orrs	r3, r1
 800abe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abea:	e003      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ac00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac04:	2300      	movs	r3, #0
 800ac06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4313      	orrs	r3, r2
 800ac12:	f000 8099 	beq.w	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac16:	4b83      	ldr	r3, [pc, #524]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a82      	ldr	r2, [pc, #520]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac22:	f7fa fd57 	bl	80056d4 <HAL_GetTick>
 800ac26:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac2a:	e00b      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac2c:	f7fa fd52 	bl	80056d4 <HAL_GetTick>
 800ac30:	4602      	mov	r2, r0
 800ac32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b64      	cmp	r3, #100	@ 0x64
 800ac3a:	d903      	bls.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac42:	e005      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac44:	4b77      	ldr	r3, [pc, #476]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0ed      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ac50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d173      	bne.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac58:	4b71      	ldr	r3, [pc, #452]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac64:	4053      	eors	r3, r2
 800ac66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d015      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac6e:	4b6c      	ldr	r3, [pc, #432]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac7a:	4b69      	ldr	r3, [pc, #420]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac7e:	4a68      	ldr	r2, [pc, #416]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac86:	4b66      	ldr	r3, [pc, #408]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8a:	4a65      	ldr	r2, [pc, #404]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac92:	4a63      	ldr	r2, [pc, #396]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca6:	d118      	bne.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca8:	f7fa fd14 	bl	80056d4 <HAL_GetTick>
 800acac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acb0:	e00d      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb2:	f7fa fd0f 	bl	80056d4 <HAL_GetTick>
 800acb6:	4602      	mov	r2, r0
 800acb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800acbc:	1ad2      	subs	r2, r2, r3
 800acbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d903      	bls.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800accc:	e005      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acce:	4b54      	ldr	r3, [pc, #336]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0eb      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800acda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d129      	bne.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ace2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ace6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acf2:	d10e      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800acf4:	4b4a      	ldr	r3, [pc, #296]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800acfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad04:	091a      	lsrs	r2, r3, #4
 800ad06:	4b48      	ldr	r3, [pc, #288]	@ (800ae28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ad08:	4013      	ands	r3, r2
 800ad0a:	4a45      	ldr	r2, [pc, #276]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	6113      	str	r3, [r2, #16]
 800ad10:	e005      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ad12:	4b43      	ldr	r3, [pc, #268]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	4a42      	ldr	r2, [pc, #264]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ad1c:	6113      	str	r3, [r2, #16]
 800ad1e:	4b40      	ldr	r3, [pc, #256]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ad22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad2e:	4a3c      	ldr	r2, [pc, #240]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad34:	e008      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800ad3e:	e003      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f002 0301 	and.w	r3, r2, #1
 800ad54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4313      	orrs	r3, r2
 800ad66:	f000 8090 	beq.w	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ad6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad72:	2b28      	cmp	r3, #40	@ 0x28
 800ad74:	d870      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad76:	a201      	add	r2, pc, #4	@ (adr r2, 800ad7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800ae61 	.word	0x0800ae61
 800ad80:	0800ae59 	.word	0x0800ae59
 800ad84:	0800ae59 	.word	0x0800ae59
 800ad88:	0800ae59 	.word	0x0800ae59
 800ad8c:	0800ae59 	.word	0x0800ae59
 800ad90:	0800ae59 	.word	0x0800ae59
 800ad94:	0800ae59 	.word	0x0800ae59
 800ad98:	0800ae59 	.word	0x0800ae59
 800ad9c:	0800ae2d 	.word	0x0800ae2d
 800ada0:	0800ae59 	.word	0x0800ae59
 800ada4:	0800ae59 	.word	0x0800ae59
 800ada8:	0800ae59 	.word	0x0800ae59
 800adac:	0800ae59 	.word	0x0800ae59
 800adb0:	0800ae59 	.word	0x0800ae59
 800adb4:	0800ae59 	.word	0x0800ae59
 800adb8:	0800ae59 	.word	0x0800ae59
 800adbc:	0800ae43 	.word	0x0800ae43
 800adc0:	0800ae59 	.word	0x0800ae59
 800adc4:	0800ae59 	.word	0x0800ae59
 800adc8:	0800ae59 	.word	0x0800ae59
 800adcc:	0800ae59 	.word	0x0800ae59
 800add0:	0800ae59 	.word	0x0800ae59
 800add4:	0800ae59 	.word	0x0800ae59
 800add8:	0800ae59 	.word	0x0800ae59
 800addc:	0800ae61 	.word	0x0800ae61
 800ade0:	0800ae59 	.word	0x0800ae59
 800ade4:	0800ae59 	.word	0x0800ae59
 800ade8:	0800ae59 	.word	0x0800ae59
 800adec:	0800ae59 	.word	0x0800ae59
 800adf0:	0800ae59 	.word	0x0800ae59
 800adf4:	0800ae59 	.word	0x0800ae59
 800adf8:	0800ae59 	.word	0x0800ae59
 800adfc:	0800ae61 	.word	0x0800ae61
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae59 	.word	0x0800ae59
 800ae08:	0800ae59 	.word	0x0800ae59
 800ae0c:	0800ae59 	.word	0x0800ae59
 800ae10:	0800ae59 	.word	0x0800ae59
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae59 	.word	0x0800ae59
 800ae1c:	0800ae61 	.word	0x0800ae61
 800ae20:	58024400 	.word	0x58024400
 800ae24:	58024800 	.word	0x58024800
 800ae28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae30:	3308      	adds	r3, #8
 800ae32:	2101      	movs	r1, #1
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 ffc5 	bl	800bdc4 <RCCEx_PLL2_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae40:	e00f      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae46:	3328      	adds	r3, #40	@ 0x28
 800ae48:	2101      	movs	r1, #1
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 f86c 	bl	800bf28 <RCCEx_PLL3_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae56:	e004      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae5e:	e000      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ae60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10b      	bne.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae6a:	4bc0      	ldr	r3, [pc, #768]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ae72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae7a:	4abc      	ldr	r2, [pc, #752]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae80:	e003      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f002 0302 	and.w	r3, r2, #2
 800ae96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aea0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800aea4:	460b      	mov	r3, r1
 800aea6:	4313      	orrs	r3, r2
 800aea8:	d043      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aeaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	d824      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800aeb6:	a201      	add	r2, pc, #4	@ (adr r2, 800aebc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800af09 	.word	0x0800af09
 800aec0:	0800aed5 	.word	0x0800aed5
 800aec4:	0800aeeb 	.word	0x0800aeeb
 800aec8:	0800af09 	.word	0x0800af09
 800aecc:	0800af09 	.word	0x0800af09
 800aed0:	0800af09 	.word	0x0800af09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed8:	3308      	adds	r3, #8
 800aeda:	2101      	movs	r1, #1
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 ff71 	bl	800bdc4 <RCCEx_PLL2_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aee8:	e00f      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeee:	3328      	adds	r3, #40	@ 0x28
 800aef0:	2101      	movs	r1, #1
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 f818 	bl	800bf28 <RCCEx_PLL3_Config>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aefe:	e004      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af06:	e000      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800af08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10b      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af12:	4b96      	ldr	r3, [pc, #600]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af16:	f023 0107 	bic.w	r1, r3, #7
 800af1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af22:	4a92      	ldr	r2, [pc, #584]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af24:	430b      	orrs	r3, r1
 800af26:	6553      	str	r3, [r2, #84]	@ 0x54
 800af28:	e003      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f002 0304 	and.w	r3, r2, #4
 800af3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af42:	2300      	movs	r3, #0
 800af44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4313      	orrs	r3, r2
 800af50:	d043      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d824      	bhi.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800af5e:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800afb1 	.word	0x0800afb1
 800af68:	0800af7d 	.word	0x0800af7d
 800af6c:	0800af93 	.word	0x0800af93
 800af70:	0800afb1 	.word	0x0800afb1
 800af74:	0800afb1 	.word	0x0800afb1
 800af78:	0800afb1 	.word	0x0800afb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af80:	3308      	adds	r3, #8
 800af82:	2101      	movs	r1, #1
 800af84:	4618      	mov	r0, r3
 800af86:	f000 ff1d 	bl	800bdc4 <RCCEx_PLL2_Config>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af90:	e00f      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af96:	3328      	adds	r3, #40	@ 0x28
 800af98:	2101      	movs	r1, #1
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 ffc4 	bl	800bf28 <RCCEx_PLL3_Config>
 800afa0:	4603      	mov	r3, r0
 800afa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800afa6:	e004      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afae:	e000      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800afb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afba:	4b6c      	ldr	r3, [pc, #432]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800afbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afbe:	f023 0107 	bic.w	r1, r3, #7
 800afc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800afca:	4a68      	ldr	r2, [pc, #416]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800afcc:	430b      	orrs	r3, r1
 800afce:	6593      	str	r3, [r2, #88]	@ 0x58
 800afd0:	e003      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f002 0320 	and.w	r3, r2, #32
 800afe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800afea:	2300      	movs	r3, #0
 800afec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aff0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aff4:	460b      	mov	r3, r1
 800aff6:	4313      	orrs	r3, r2
 800aff8:	d055      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800affa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800affe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b006:	d033      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b00c:	d82c      	bhi.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b00e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b012:	d02f      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b018:	d826      	bhi.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b01a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b01e:	d02b      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b024:	d820      	bhi.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02a:	d012      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b02c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b030:	d81a      	bhi.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d022      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b03a:	d115      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b040:	3308      	adds	r3, #8
 800b042:	2100      	movs	r1, #0
 800b044:	4618      	mov	r0, r3
 800b046:	f000 febd 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b050:	e015      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b056:	3328      	adds	r3, #40	@ 0x28
 800b058:	2102      	movs	r1, #2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 ff64 	bl	800bf28 <RCCEx_PLL3_Config>
 800b060:	4603      	mov	r3, r0
 800b062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b066:	e00a      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b06e:	e006      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b070:	bf00      	nop
 800b072:	e004      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b074:	bf00      	nop
 800b076:	e002      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b07e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10b      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b086:	4b39      	ldr	r3, [pc, #228]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b08a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b096:	4a35      	ldr	r2, [pc, #212]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b098:	430b      	orrs	r3, r1
 800b09a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b09c:	e003      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b0b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b0bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	d058      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b0d2:	d033      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b0d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b0d8:	d82c      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0de:	d02f      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0e4:	d826      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0ea:	d02b      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b0ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0f0:	d820      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0f6:	d012      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b0f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0fc:	d81a      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d022      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b106:	d115      	bne.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10c:	3308      	adds	r3, #8
 800b10e:	2100      	movs	r1, #0
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fe57 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b11c:	e015      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b122:	3328      	adds	r3, #40	@ 0x28
 800b124:	2102      	movs	r1, #2
 800b126:	4618      	mov	r0, r3
 800b128:	f000 fefe 	bl	800bf28 <RCCEx_PLL3_Config>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b132:	e00a      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b13a:	e006      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b13c:	bf00      	nop
 800b13e:	e004      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b140:	bf00      	nop
 800b142:	e002      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10e      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b152:	4b06      	ldr	r3, [pc, #24]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b156:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b162:	4a02      	ldr	r2, [pc, #8]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b164:	430b      	orrs	r3, r1
 800b166:	6593      	str	r3, [r2, #88]	@ 0x58
 800b168:	e006      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b16a:	bf00      	nop
 800b16c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b170:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b174:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b188:	2300      	movs	r3, #0
 800b18a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b18e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b192:	460b      	mov	r3, r1
 800b194:	4313      	orrs	r3, r2
 800b196:	d055      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b1a4:	d033      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b1a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b1aa:	d82c      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b1ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1b0:	d02f      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b1b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1b6:	d826      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b1b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b1bc:	d02b      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b1be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b1c2:	d820      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b1c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1c8:	d012      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1ce:	d81a      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d022      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b1d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1d8:	d115      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1de:	3308      	adds	r3, #8
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 fdee 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1ee:	e015      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f4:	3328      	adds	r3, #40	@ 0x28
 800b1f6:	2102      	movs	r1, #2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fe95 	bl	800bf28 <RCCEx_PLL3_Config>
 800b1fe:	4603      	mov	r3, r0
 800b200:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b204:	e00a      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b20c:	e006      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b20e:	bf00      	nop
 800b210:	e004      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b212:	bf00      	nop
 800b214:	e002      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b216:	bf00      	nop
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10b      	bne.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b224:	4ba1      	ldr	r3, [pc, #644]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b228:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b234:	4a9d      	ldr	r2, [pc, #628]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b236:	430b      	orrs	r3, r1
 800b238:	6593      	str	r3, [r2, #88]	@ 0x58
 800b23a:	e003      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b240:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	f002 0308 	and.w	r3, r2, #8
 800b250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b254:	2300      	movs	r3, #0
 800b256:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b25a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b25e:	460b      	mov	r3, r1
 800b260:	4313      	orrs	r3, r2
 800b262:	d01e      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b26c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b270:	d10c      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b276:	3328      	adds	r3, #40	@ 0x28
 800b278:	2102      	movs	r1, #2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fe54 	bl	800bf28 <RCCEx_PLL3_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b28c:	4b87      	ldr	r3, [pc, #540]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b28e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b290:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b29c:	4a83      	ldr	r2, [pc, #524]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b29e:	430b      	orrs	r3, r1
 800b2a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f002 0310 	and.w	r3, r2, #16
 800b2ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b2b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	d01e      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ce:	d10c      	bne.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	3328      	adds	r3, #40	@ 0x28
 800b2d6:	2102      	movs	r1, #2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fe25 	bl	800bf28 <RCCEx_PLL3_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2ea:	4b70      	ldr	r3, [pc, #448]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b2ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2fa:	4a6c      	ldr	r2, [pc, #432]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b30c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b310:	2300      	movs	r3, #0
 800b312:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b316:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b31a:	460b      	mov	r3, r1
 800b31c:	4313      	orrs	r3, r2
 800b31e:	d03e      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b324:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b32c:	d022      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b32e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b332:	d81b      	bhi.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d003      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b33c:	d00b      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b33e:	e015      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b344:	3308      	adds	r3, #8
 800b346:	2100      	movs	r1, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fd3b 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b354:	e00f      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35a:	3328      	adds	r3, #40	@ 0x28
 800b35c:	2102      	movs	r1, #2
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fde2 	bl	800bf28 <RCCEx_PLL3_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b36a:	e004      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b372:	e000      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b37e:	4b4b      	ldr	r3, [pc, #300]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b382:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b38a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b38e:	4a47      	ldr	r2, [pc, #284]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6593      	str	r3, [r2, #88]	@ 0x58
 800b394:	e003      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b39a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b3aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	d03b      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3c6:	d01f      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b3c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3cc:	d818      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b3ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3d2:	d003      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b3d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3d8:	d007      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b3da:	e011      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3dc:	4b33      	ldr	r3, [pc, #204]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	4a32      	ldr	r2, [pc, #200]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3e8:	e00f      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ee:	3328      	adds	r3, #40	@ 0x28
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fd98 	bl	800bf28 <RCCEx_PLL3_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3fe:	e004      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b406:	e000      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10b      	bne.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b412:	4b26      	ldr	r3, [pc, #152]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b422:	4a22      	ldr	r2, [pc, #136]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b424:	430b      	orrs	r3, r1
 800b426:	6553      	str	r3, [r2, #84]	@ 0x54
 800b428:	e003      	b.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b42e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b43e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b440:	2300      	movs	r3, #0
 800b442:	677b      	str	r3, [r7, #116]	@ 0x74
 800b444:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b448:	460b      	mov	r3, r1
 800b44a:	4313      	orrs	r3, r2
 800b44c:	d034      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b454:	2b00      	cmp	r3, #0
 800b456:	d003      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b45c:	d007      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b45e:	e011      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b460:	4b12      	ldr	r3, [pc, #72]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b464:	4a11      	ldr	r2, [pc, #68]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b46a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b46c:	e00e      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b472:	3308      	adds	r3, #8
 800b474:	2102      	movs	r1, #2
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fca4 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b482:	e003      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b48a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10d      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b494:	4b05      	ldr	r3, [pc, #20]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b498:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a2:	4a02      	ldr	r2, [pc, #8]	@ (800b4ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b4a8:	e006      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b4aa:	bf00      	nop
 800b4ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b4c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	d00c      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d8:	3328      	adds	r3, #40	@ 0x28
 800b4da:	2102      	movs	r1, #2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fd23 	bl	800bf28 <RCCEx_PLL3_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b4ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b4fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800b500:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b504:	460b      	mov	r3, r1
 800b506:	4313      	orrs	r3, r2
 800b508:	d038      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b516:	d018      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b51c:	d811      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b51e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b522:	d014      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b528:	d80b      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d011      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b52e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b532:	d106      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b534:	4bc3      	ldr	r3, [pc, #780]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	4ac2      	ldr	r2, [pc, #776]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b53a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b540:	e008      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b548:	e004      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b55c:	4bb9      	ldr	r3, [pc, #740]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b55e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b560:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56c:	4ab5      	ldr	r2, [pc, #724]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b56e:	430b      	orrs	r3, r1
 800b570:	6553      	str	r3, [r2, #84]	@ 0x54
 800b572:	e003      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b578:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b57c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b58a:	2300      	movs	r3, #0
 800b58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b58e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b592:	460b      	mov	r3, r1
 800b594:	4313      	orrs	r3, r2
 800b596:	d009      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b598:	4baa      	ldr	r3, [pc, #680]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b59a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b59c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5a6:	4aa7      	ldr	r2, [pc, #668]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b5b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	d009      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5c8:	4b9e      	ldr	r3, [pc, #632]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5d6:	4a9b      	ldr	r2, [pc, #620]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	d009      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b5f8:	4b92      	ldr	r3, [pc, #584]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5fc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b606:	4a8f      	ldr	r2, [pc, #572]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b608:	430b      	orrs	r3, r1
 800b60a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b618:	643b      	str	r3, [r7, #64]	@ 0x40
 800b61a:	2300      	movs	r3, #0
 800b61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b622:	460b      	mov	r3, r1
 800b624:	4313      	orrs	r3, r2
 800b626:	d00e      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b628:	4b86      	ldr	r3, [pc, #536]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	4a85      	ldr	r2, [pc, #532]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b62e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b632:	6113      	str	r3, [r2, #16]
 800b634:	4b83      	ldr	r3, [pc, #524]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b636:	6919      	ldr	r1, [r3, #16]
 800b638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b63c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b640:	4a80      	ldr	r2, [pc, #512]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b642:	430b      	orrs	r3, r1
 800b644:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b652:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b654:	2300      	movs	r3, #0
 800b656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b658:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b65c:	460b      	mov	r3, r1
 800b65e:	4313      	orrs	r3, r2
 800b660:	d009      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b662:	4b78      	ldr	r3, [pc, #480]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b666:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b670:	4a74      	ldr	r2, [pc, #464]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b672:	430b      	orrs	r3, r1
 800b674:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b682:	633b      	str	r3, [r7, #48]	@ 0x30
 800b684:	2300      	movs	r3, #0
 800b686:	637b      	str	r3, [r7, #52]	@ 0x34
 800b688:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b68c:	460b      	mov	r3, r1
 800b68e:	4313      	orrs	r3, r2
 800b690:	d00a      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b692:	4b6c      	ldr	r3, [pc, #432]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b696:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6a2:	4a68      	ldr	r2, [pc, #416]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	d011      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fb79 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b6d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	6239      	str	r1, [r7, #32]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b6fe:	460b      	mov	r3, r1
 800b700:	4313      	orrs	r3, r2
 800b702:	d011      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b708:	3308      	adds	r3, #8
 800b70a:	2101      	movs	r1, #1
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 fb59 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b724:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	2100      	movs	r1, #0
 800b732:	61b9      	str	r1, [r7, #24]
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	61fb      	str	r3, [r7, #28]
 800b73a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b73e:	460b      	mov	r3, r1
 800b740:	4313      	orrs	r3, r2
 800b742:	d011      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b748:	3308      	adds	r3, #8
 800b74a:	2102      	movs	r1, #2
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 fb39 	bl	800bdc4 <RCCEx_PLL2_Config>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b764:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	2100      	movs	r1, #0
 800b772:	6139      	str	r1, [r7, #16]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b77e:	460b      	mov	r3, r1
 800b780:	4313      	orrs	r3, r2
 800b782:	d011      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b788:	3328      	adds	r3, #40	@ 0x28
 800b78a:	2100      	movs	r1, #0
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 fbcb 	bl	800bf28 <RCCEx_PLL3_Config>
 800b792:	4603      	mov	r3, r0
 800b794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	f003 0310 	and.w	r3, r3, #16
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	d011      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c8:	3328      	adds	r3, #40	@ 0x28
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 fbab 	bl	800bf28 <RCCEx_PLL3_Config>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b7d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	6039      	str	r1, [r7, #0]
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	607b      	str	r3, [r7, #4]
 800b7fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b7fe:	460b      	mov	r3, r1
 800b800:	4313      	orrs	r3, r2
 800b802:	d011      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b808:	3328      	adds	r3, #40	@ 0x28
 800b80a:	2102      	movs	r1, #2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 fb8b 	bl	800bf28 <RCCEx_PLL3_Config>
 800b812:	4603      	mov	r3, r0
 800b814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b828:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	e000      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
}
 800b836:	4618      	mov	r0, r3
 800b838:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b83c:	46bd      	mov	sp, r7
 800b83e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400

0800b848 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b84c:	f7fe fde2 	bl	800a414 <HAL_RCC_GetHCLKFreq>
 800b850:	4602      	mov	r2, r0
 800b852:	4b06      	ldr	r3, [pc, #24]	@ (800b86c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	091b      	lsrs	r3, r3, #4
 800b858:	f003 0307 	and.w	r3, r3, #7
 800b85c:	4904      	ldr	r1, [pc, #16]	@ (800b870 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b85e:	5ccb      	ldrb	r3, [r1, r3]
 800b860:	f003 031f 	and.w	r3, r3, #31
 800b864:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b868:	4618      	mov	r0, r3
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	58024400 	.word	0x58024400
 800b870:	08018894 	.word	0x08018894

0800b874 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b874:	b480      	push	{r7}
 800b876:	b089      	sub	sp, #36	@ 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b87c:	4ba1      	ldr	r3, [pc, #644]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b886:	4b9f      	ldr	r3, [pc, #636]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88a:	0b1b      	lsrs	r3, r3, #12
 800b88c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b890:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b892:	4b9c      	ldr	r3, [pc, #624]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	091b      	lsrs	r3, r3, #4
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b89e:	4b99      	ldr	r3, [pc, #612]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a2:	08db      	lsrs	r3, r3, #3
 800b8a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	fb02 f303 	mul.w	r3, r2, r3
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8111 	beq.w	800bae4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	f000 8083 	beq.w	800b9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	f200 80a1 	bhi.w	800ba14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d056      	beq.n	800b98c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b8de:	e099      	b.n	800ba14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e0:	4b88      	ldr	r3, [pc, #544]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d02d      	beq.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ec:	4b85      	ldr	r3, [pc, #532]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	08db      	lsrs	r3, r3, #3
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	4a84      	ldr	r2, [pc, #528]	@ (800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b916:	4b7b      	ldr	r3, [pc, #492]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b926:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b946:	e087      	b.n	800ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b952:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b95a:	4b6a      	ldr	r3, [pc, #424]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b96a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b97a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b98a:	e065      	b.n	800ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b996:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99e:	4b59      	ldr	r3, [pc, #356]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ce:	e043      	b.n	800ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bb18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e2:	4b48      	ldr	r3, [pc, #288]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba12:	e021      	b.n	800ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba26:	4b37      	ldr	r3, [pc, #220]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ba58:	4b2a      	ldr	r3, [pc, #168]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba5c:	0a5b      	lsrs	r3, r3, #9
 800ba5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7e:	ee17 2a90 	vmov	r2, s15
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ba86:	4b1f      	ldr	r3, [pc, #124]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8a:	0c1b      	lsrs	r3, r3, #16
 800ba8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baac:	ee17 2a90 	vmov	r2, s15
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bab4:	4b13      	ldr	r3, [pc, #76]	@ (800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab8:	0e1b      	lsrs	r3, r3, #24
 800baba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bace:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bada:	ee17 2a90 	vmov	r2, s15
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bae2:	e008      	b.n	800baf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	609a      	str	r2, [r3, #8]
}
 800baf6:	bf00      	nop
 800baf8:	3724      	adds	r7, #36	@ 0x24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	58024400 	.word	0x58024400
 800bb08:	03d09000 	.word	0x03d09000
 800bb0c:	46000000 	.word	0x46000000
 800bb10:	4c742400 	.word	0x4c742400
 800bb14:	4a742400 	.word	0x4a742400
 800bb18:	4bb71b00 	.word	0x4bb71b00

0800bb1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b089      	sub	sp, #36	@ 0x24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb24:	4ba1      	ldr	r3, [pc, #644]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb2e:	4b9f      	ldr	r3, [pc, #636]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb32:	0d1b      	lsrs	r3, r3, #20
 800bb34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bb3a:	4b9c      	ldr	r3, [pc, #624]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bb46:	4b99      	ldr	r3, [pc, #612]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4a:	08db      	lsrs	r3, r3, #3
 800bb4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	fb02 f303 	mul.w	r3, r2, r3
 800bb56:	ee07 3a90 	vmov	s15, r3
 800bb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 8111 	beq.w	800bd8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	f000 8083 	beq.w	800bc78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	f200 80a1 	bhi.w	800bcbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d056      	beq.n	800bc34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb86:	e099      	b.n	800bcbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb88:	4b88      	ldr	r3, [pc, #544]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d02d      	beq.n	800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb94:	4b85      	ldr	r3, [pc, #532]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	08db      	lsrs	r3, r3, #3
 800bb9a:	f003 0303 	and.w	r3, r3, #3
 800bb9e:	4a84      	ldr	r2, [pc, #528]	@ (800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bba0:	fa22 f303 	lsr.w	r3, r2, r3
 800bba4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	ee07 3a90 	vmov	s15, r3
 800bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbbe:	4b7b      	ldr	r3, [pc, #492]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbce:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbee:	e087      	b.n	800bd00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc02:	4b6a      	ldr	r3, [pc, #424]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc12:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc32:	e065      	b.n	800bd00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bdbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc46:	4b59      	ldr	r3, [pc, #356]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc76:	e043      	b.n	800bd00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bdc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc8a:	4b48      	ldr	r3, [pc, #288]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcba:	e021      	b.n	800bd00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bdbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcce:	4b37      	ldr	r3, [pc, #220]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bd00:	4b2a      	ldr	r3, [pc, #168]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd04:	0a5b      	lsrs	r3, r3, #9
 800bd06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd26:	ee17 2a90 	vmov	r2, s15
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bd2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd32:	0c1b      	lsrs	r3, r3, #16
 800bd34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd48:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd54:	ee17 2a90 	vmov	r2, s15
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bd5c:	4b13      	ldr	r3, [pc, #76]	@ (800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd60:	0e1b      	lsrs	r3, r3, #24
 800bd62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd76:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd82:	ee17 2a90 	vmov	r2, s15
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd8a:	e008      	b.n	800bd9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	609a      	str	r2, [r3, #8]
}
 800bd9e:	bf00      	nop
 800bda0:	3724      	adds	r7, #36	@ 0x24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	58024400 	.word	0x58024400
 800bdb0:	03d09000 	.word	0x03d09000
 800bdb4:	46000000 	.word	0x46000000
 800bdb8:	4c742400 	.word	0x4c742400
 800bdbc:	4a742400 	.word	0x4a742400
 800bdc0:	4bb71b00 	.word	0x4bb71b00

0800bdc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdd2:	4b53      	ldr	r3, [pc, #332]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d101      	bne.n	800bde2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e099      	b.n	800bf16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bde2:	4b4f      	ldr	r3, [pc, #316]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a4e      	ldr	r2, [pc, #312]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bde8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bdec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdee:	f7f9 fc71 	bl	80056d4 <HAL_GetTick>
 800bdf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdf4:	e008      	b.n	800be08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdf6:	f7f9 fc6d 	bl	80056d4 <HAL_GetTick>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	2b02      	cmp	r3, #2
 800be02:	d901      	bls.n	800be08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be04:	2303      	movs	r3, #3
 800be06:	e086      	b.n	800bf16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be08:	4b45      	ldr	r3, [pc, #276]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1f0      	bne.n	800bdf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be14:	4b42      	ldr	r3, [pc, #264]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	031b      	lsls	r3, r3, #12
 800be22:	493f      	ldr	r1, [pc, #252]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be24:	4313      	orrs	r3, r2
 800be26:	628b      	str	r3, [r1, #40]	@ 0x28
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	3b01      	subs	r3, #1
 800be38:	025b      	lsls	r3, r3, #9
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	3b01      	subs	r3, #1
 800be44:	041b      	lsls	r3, r3, #16
 800be46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	3b01      	subs	r3, #1
 800be52:	061b      	lsls	r3, r3, #24
 800be54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be58:	4931      	ldr	r1, [pc, #196]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be5e:	4b30      	ldr	r3, [pc, #192]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	492d      	ldr	r1, [pc, #180]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be70:	4b2b      	ldr	r3, [pc, #172]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	f023 0220 	bic.w	r2, r3, #32
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	4928      	ldr	r1, [pc, #160]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be82:	4b27      	ldr	r3, [pc, #156]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	4a26      	ldr	r2, [pc, #152]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be88:	f023 0310 	bic.w	r3, r3, #16
 800be8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be8e:	4b24      	ldr	r3, [pc, #144]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be92:	4b24      	ldr	r3, [pc, #144]	@ (800bf24 <RCCEx_PLL2_Config+0x160>)
 800be94:	4013      	ands	r3, r2
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	69d2      	ldr	r2, [r2, #28]
 800be9a:	00d2      	lsls	r2, r2, #3
 800be9c:	4920      	ldr	r1, [pc, #128]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bea2:	4b1f      	ldr	r3, [pc, #124]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea6:	4a1e      	ldr	r2, [pc, #120]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bea8:	f043 0310 	orr.w	r3, r3, #16
 800beac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800beb4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800beb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb8:	4a19      	ldr	r2, [pc, #100]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800beba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bebe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bec0:	e00f      	b.n	800bee2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d106      	bne.n	800bed6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bec8:	4b15      	ldr	r3, [pc, #84]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800becc:	4a14      	ldr	r2, [pc, #80]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bed4:	e005      	b.n	800bee2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bed6:	4b12      	ldr	r3, [pc, #72]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beda:	4a11      	ldr	r2, [pc, #68]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bedc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bee2:	4b0f      	ldr	r3, [pc, #60]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a0e      	ldr	r2, [pc, #56]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800beec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beee:	f7f9 fbf1 	bl	80056d4 <HAL_GetTick>
 800bef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bef4:	e008      	b.n	800bf08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bef6:	f7f9 fbed 	bl	80056d4 <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d901      	bls.n	800bf08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e006      	b.n	800bf16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf08:	4b05      	ldr	r3, [pc, #20]	@ (800bf20 <RCCEx_PLL2_Config+0x15c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d0f0      	beq.n	800bef6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	58024400 	.word	0x58024400
 800bf24:	ffff0007 	.word	0xffff0007

0800bf28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf36:	4b53      	ldr	r3, [pc, #332]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d101      	bne.n	800bf46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e099      	b.n	800c07a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf46:	4b4f      	ldr	r3, [pc, #316]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a4e      	ldr	r2, [pc, #312]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf52:	f7f9 fbbf 	bl	80056d4 <HAL_GetTick>
 800bf56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf58:	e008      	b.n	800bf6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf5a:	f7f9 fbbb 	bl	80056d4 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d901      	bls.n	800bf6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e086      	b.n	800c07a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf6c:	4b45      	ldr	r3, [pc, #276]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1f0      	bne.n	800bf5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf78:	4b42      	ldr	r3, [pc, #264]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	051b      	lsls	r3, r3, #20
 800bf86:	493f      	ldr	r1, [pc, #252]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	025b      	lsls	r3, r3, #9
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	041b      	lsls	r3, r3, #16
 800bfaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	061b      	lsls	r3, r3, #24
 800bfb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bfbc:	4931      	ldr	r1, [pc, #196]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bfc2:	4b30      	ldr	r3, [pc, #192]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	492d      	ldr	r1, [pc, #180]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfd4:	4b2b      	ldr	r3, [pc, #172]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	4928      	ldr	r1, [pc, #160]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfe6:	4b27      	ldr	r3, [pc, #156]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfea:	4a26      	ldr	r2, [pc, #152]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bfec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bff2:	4b24      	ldr	r3, [pc, #144]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800bff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bff6:	4b24      	ldr	r3, [pc, #144]	@ (800c088 <RCCEx_PLL3_Config+0x160>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	69d2      	ldr	r2, [r2, #28]
 800bffe:	00d2      	lsls	r2, r2, #3
 800c000:	4920      	ldr	r1, [pc, #128]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c002:	4313      	orrs	r3, r2
 800c004:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c006:	4b1f      	ldr	r3, [pc, #124]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00a:	4a1e      	ldr	r2, [pc, #120]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c00c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c010:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c018:	4b1a      	ldr	r3, [pc, #104]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	4a19      	ldr	r2, [pc, #100]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c01e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c022:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c024:	e00f      	b.n	800c046 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d106      	bne.n	800c03a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c02c:	4b15      	ldr	r3, [pc, #84]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c030:	4a14      	ldr	r2, [pc, #80]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c032:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c036:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c038:	e005      	b.n	800c046 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c03a:	4b12      	ldr	r3, [pc, #72]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c03e:	4a11      	ldr	r2, [pc, #68]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c044:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c046:	4b0f      	ldr	r3, [pc, #60]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a0e      	ldr	r2, [pc, #56]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c04c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c052:	f7f9 fb3f 	bl	80056d4 <HAL_GetTick>
 800c056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c058:	e008      	b.n	800c06c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c05a:	f7f9 fb3b 	bl	80056d4 <HAL_GetTick>
 800c05e:	4602      	mov	r2, r0
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	2b02      	cmp	r3, #2
 800c066:	d901      	bls.n	800c06c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e006      	b.n	800c07a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c06c:	4b05      	ldr	r3, [pc, #20]	@ (800c084 <RCCEx_PLL3_Config+0x15c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0f0      	beq.n	800c05a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	58024400 	.word	0x58024400
 800c088:	ffff0007 	.word	0xffff0007

0800c08c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e10f      	b.n	800c2be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a87      	ldr	r2, [pc, #540]	@ (800c2c8 <HAL_SPI_Init+0x23c>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d00f      	beq.n	800c0ce <HAL_SPI_Init+0x42>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a86      	ldr	r2, [pc, #536]	@ (800c2cc <HAL_SPI_Init+0x240>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d00a      	beq.n	800c0ce <HAL_SPI_Init+0x42>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a84      	ldr	r2, [pc, #528]	@ (800c2d0 <HAL_SPI_Init+0x244>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d005      	beq.n	800c0ce <HAL_SPI_Init+0x42>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	2b0f      	cmp	r3, #15
 800c0c8:	d901      	bls.n	800c0ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e0f7      	b.n	800c2be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 f968 	bl	800d3a4 <SPI_GetPacketSize>
 800c0d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a7b      	ldr	r2, [pc, #492]	@ (800c2c8 <HAL_SPI_Init+0x23c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00c      	beq.n	800c0fa <HAL_SPI_Init+0x6e>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a79      	ldr	r2, [pc, #484]	@ (800c2cc <HAL_SPI_Init+0x240>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d007      	beq.n	800c0fa <HAL_SPI_Init+0x6e>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a78      	ldr	r2, [pc, #480]	@ (800c2d0 <HAL_SPI_Init+0x244>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d002      	beq.n	800c0fa <HAL_SPI_Init+0x6e>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b08      	cmp	r3, #8
 800c0f8:	d811      	bhi.n	800c11e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0fe:	4a72      	ldr	r2, [pc, #456]	@ (800c2c8 <HAL_SPI_Init+0x23c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d009      	beq.n	800c118 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a70      	ldr	r2, [pc, #448]	@ (800c2cc <HAL_SPI_Init+0x240>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d004      	beq.n	800c118 <HAL_SPI_Init+0x8c>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a6f      	ldr	r2, [pc, #444]	@ (800c2d0 <HAL_SPI_Init+0x244>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d104      	bne.n	800c122 <HAL_SPI_Init+0x96>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b10      	cmp	r3, #16
 800c11c:	d901      	bls.n	800c122 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e0cd      	b.n	800c2be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7f8 f8d6 	bl	80042e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2202      	movs	r2, #2
 800c140:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0201 	bic.w	r2, r2, #1
 800c152:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c15e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c168:	d119      	bne.n	800c19e <HAL_SPI_Init+0x112>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c172:	d103      	bne.n	800c17c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d008      	beq.n	800c18e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10c      	bne.n	800c19e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c18c:	d107      	bne.n	800c19e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c19c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00f      	beq.n	800c1ca <HAL_SPI_Init+0x13e>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	2b06      	cmp	r3, #6
 800c1b0:	d90b      	bls.n	800c1ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	e007      	b.n	800c1da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	69da      	ldr	r2, [r3, #28]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	431a      	orrs	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ec:	ea42 0103 	orr.w	r1, r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c20a:	431a      	orrs	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	431a      	orrs	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	431a      	orrs	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	431a      	orrs	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	431a      	orrs	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	431a      	orrs	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c22e:	431a      	orrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	431a      	orrs	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c23a:	ea42 0103 	orr.w	r1, r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d113      	bne.n	800c27a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c264:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c278:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0201 	bic.w	r2, r2, #1
 800c288:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00a      	beq.n	800c2ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	40013000 	.word	0x40013000
 800c2cc:	40003800 	.word	0x40003800
 800c2d0:	40003c00 	.word	0x40003c00

0800c2d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3320      	adds	r3, #32
 800c2ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2ec:	f7f9 f9f2 	bl	80056d4 <HAL_GetTick>
 800c2f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d001      	beq.n	800c302 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c2fe:	2302      	movs	r3, #2
 800c300:	e1d1      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <HAL_SPI_Transmit+0x3a>
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e1c9      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d101      	bne.n	800c320 <HAL_SPI_Transmit+0x4c>
 800c31c:	2302      	movs	r3, #2
 800c31e:	e1c2      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2203      	movs	r2, #3
 800c32c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	88fa      	ldrh	r2, [r7, #6]
 800c342:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	88fa      	ldrh	r2, [r7, #6]
 800c34a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c378:	d108      	bne.n	800c38c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	e009      	b.n	800c3a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c39e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	4b96      	ldr	r3, [pc, #600]	@ (800c600 <HAL_SPI_Transmit+0x32c>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	88f9      	ldrh	r1, [r7, #6]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	6812      	ldr	r2, [r2, #0]
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f042 0201 	orr.w	r2, r2, #1
 800c3c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3cc:	d107      	bne.n	800c3de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	2b0f      	cmp	r3, #15
 800c3e4:	d947      	bls.n	800c476 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c3e6:	e03f      	b.n	800c468 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	f003 0302 	and.w	r3, r3, #2
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d114      	bne.n	800c420 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c406:	1d1a      	adds	r2, r3, #4
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c412:	b29b      	uxth	r3, r3
 800c414:	3b01      	subs	r3, #1
 800c416:	b29a      	uxth	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c41e:	e023      	b.n	800c468 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c420:	f7f9 f958 	bl	80056d4 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d803      	bhi.n	800c438 <HAL_SPI_Transmit+0x164>
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c436:	d102      	bne.n	800c43e <HAL_SPI_Transmit+0x16a>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d114      	bne.n	800c468 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 fee2 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c44a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c464:	2303      	movs	r3, #3
 800c466:	e11e      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c46e:	b29b      	uxth	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1b9      	bne.n	800c3e8 <HAL_SPI_Transmit+0x114>
 800c474:	e0f1      	b.n	800c65a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	2b07      	cmp	r3, #7
 800c47c:	f240 80e6 	bls.w	800c64c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c480:	e05d      	b.n	800c53e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	f003 0302 	and.w	r3, r3, #2
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d132      	bne.n	800c4f6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c496:	b29b      	uxth	r3, r3
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d918      	bls.n	800c4ce <HAL_SPI_Transmit+0x1fa>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d014      	beq.n	800c4ce <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6812      	ldr	r2, [r2, #0]
 800c4ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	3b02      	subs	r3, #2
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4cc:	e037      	b.n	800c53e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d2:	881a      	ldrh	r2, [r3, #0]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4dc:	1c9a      	adds	r2, r3, #2
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4f4:	e023      	b.n	800c53e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4f6:	f7f9 f8ed 	bl	80056d4 <HAL_GetTick>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d803      	bhi.n	800c50e <HAL_SPI_Transmit+0x23a>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50c:	d102      	bne.n	800c514 <HAL_SPI_Transmit+0x240>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d114      	bne.n	800c53e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 fe77 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c520:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e0b3      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c544:	b29b      	uxth	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d19b      	bne.n	800c482 <HAL_SPI_Transmit+0x1ae>
 800c54a:	e086      	b.n	800c65a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b02      	cmp	r3, #2
 800c558:	d154      	bne.n	800c604 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c560:	b29b      	uxth	r3, r3
 800c562:	2b03      	cmp	r3, #3
 800c564:	d918      	bls.n	800c598 <HAL_SPI_Transmit+0x2c4>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c56a:	2b40      	cmp	r3, #64	@ 0x40
 800c56c:	d914      	bls.n	800c598 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6812      	ldr	r2, [r2, #0]
 800c578:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c57e:	1d1a      	adds	r2, r3, #4
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	3b04      	subs	r3, #4
 800c58e:	b29a      	uxth	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c596:	e059      	b.n	800c64c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d917      	bls.n	800c5d4 <HAL_SPI_Transmit+0x300>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d013      	beq.n	800c5d4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5b0:	881a      	ldrh	r2, [r3, #0]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5ba:	1c9a      	adds	r2, r3, #2
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	3b02      	subs	r3, #2
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5d2:	e03b      	b.n	800c64c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3320      	adds	r3, #32
 800c5de:	7812      	ldrb	r2, [r2, #0]
 800c5e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5e6:	1c5a      	adds	r2, r3, #1
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5fe:	e025      	b.n	800c64c <HAL_SPI_Transmit+0x378>
 800c600:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c604:	f7f9 f866 	bl	80056d4 <HAL_GetTick>
 800c608:	4602      	mov	r2, r0
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d803      	bhi.n	800c61c <HAL_SPI_Transmit+0x348>
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d102      	bne.n	800c622 <HAL_SPI_Transmit+0x34e>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d114      	bne.n	800c64c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fdf0 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c62e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c648:	2303      	movs	r3, #3
 800c64a:	e02c      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	f47f af79 	bne.w	800c54c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2200      	movs	r2, #0
 800c662:	2108      	movs	r1, #8
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 fe6f 	bl	800d348 <SPI_WaitOnFlagUntilTimeout>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d007      	beq.n	800c680 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c676:	f043 0220 	orr.w	r2, r3, #32
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fdc1 	bl	800d208 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d001      	beq.n	800c6a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e000      	b.n	800c6a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
  }
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop

0800c6b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	603b      	str	r3, [r7, #0]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c4:	095b      	lsrs	r3, r3, #5
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3330      	adds	r3, #48	@ 0x30
 800c6d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6d4:	f7f8 fffe 	bl	80056d4 <HAL_GetTick>
 800c6d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d001      	beq.n	800c6ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e250      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <HAL_SPI_Receive+0x46>
 800c6f0:	88fb      	ldrh	r3, [r7, #6]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e248      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c700:	2b01      	cmp	r3, #1
 800c702:	d101      	bne.n	800c708 <HAL_SPI_Receive+0x58>
 800c704:	2302      	movs	r3, #2
 800c706:	e241      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2204      	movs	r2, #4
 800c714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	88fa      	ldrh	r2, [r7, #6]
 800c732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c760:	d108      	bne.n	800c774 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	e009      	b.n	800c788 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c786:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	4b95      	ldr	r3, [pc, #596]	@ (800c9e4 <HAL_SPI_Receive+0x334>)
 800c790:	4013      	ands	r3, r2
 800c792:	88f9      	ldrh	r1, [r7, #6]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	430b      	orrs	r3, r1
 800c79a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f042 0201 	orr.w	r2, r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7b4:	d107      	bne.n	800c7c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b0f      	cmp	r3, #15
 800c7cc:	d96c      	bls.n	800c8a8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c7ce:	e064      	b.n	800c89a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d114      	bne.n	800c810 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c7f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c802:	b29b      	uxth	r3, r3
 800c804:	3b01      	subs	r3, #1
 800c806:	b29a      	uxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c80e:	e044      	b.n	800c89a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c816:	b29b      	uxth	r3, r3
 800c818:	8bfa      	ldrh	r2, [r7, #30]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d919      	bls.n	800c852 <HAL_SPI_Receive+0x1a2>
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d014      	beq.n	800c852 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c830:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c832:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c844:	b29b      	uxth	r3, r3
 800c846:	3b01      	subs	r3, #1
 800c848:	b29a      	uxth	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c850:	e023      	b.n	800c89a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c852:	f7f8 ff3f 	bl	80056d4 <HAL_GetTick>
 800c856:	4602      	mov	r2, r0
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d803      	bhi.n	800c86a <HAL_SPI_Receive+0x1ba>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d102      	bne.n	800c870 <HAL_SPI_Receive+0x1c0>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d114      	bne.n	800c89a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f000 fcc9 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c87c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e178      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d194      	bne.n	800c7d0 <HAL_SPI_Receive+0x120>
 800c8a6:	e15e      	b.n	800cb66 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	2b07      	cmp	r3, #7
 800c8ae:	f240 8153 	bls.w	800cb58 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c8b2:	e08f      	b.n	800c9d4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d114      	bne.n	800c8f4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	8812      	ldrh	r2, [r2, #0]
 800c8d2:	b292      	uxth	r2, r2
 800c8d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8da:	1c9a      	adds	r2, r3, #2
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8f2:	e06f      	b.n	800c9d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	8bfa      	ldrh	r2, [r7, #30]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d924      	bls.n	800c94c <HAL_SPI_Receive+0x29c>
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01f      	beq.n	800c94c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	8812      	ldrh	r2, [r2, #0]
 800c914:	b292      	uxth	r2, r2
 800c916:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c91c:	1c9a      	adds	r2, r3, #2
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	8812      	ldrh	r2, [r2, #0]
 800c92a:	b292      	uxth	r2, r2
 800c92c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c932:	1c9a      	adds	r2, r3, #2
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c93e:	b29b      	uxth	r3, r3
 800c940:	3b02      	subs	r3, #2
 800c942:	b29a      	uxth	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c94a:	e043      	b.n	800c9d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c952:	b29b      	uxth	r3, r3
 800c954:	2b01      	cmp	r3, #1
 800c956:	d119      	bne.n	800c98c <HAL_SPI_Receive+0x2dc>
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d014      	beq.n	800c98c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c966:	69ba      	ldr	r2, [r7, #24]
 800c968:	8812      	ldrh	r2, [r2, #0]
 800c96a:	b292      	uxth	r2, r2
 800c96c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c972:	1c9a      	adds	r2, r3, #2
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c97e:	b29b      	uxth	r3, r3
 800c980:	3b01      	subs	r3, #1
 800c982:	b29a      	uxth	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c98a:	e023      	b.n	800c9d4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c98c:	f7f8 fea2 	bl	80056d4 <HAL_GetTick>
 800c990:	4602      	mov	r2, r0
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d803      	bhi.n	800c9a4 <HAL_SPI_Receive+0x2f4>
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d102      	bne.n	800c9aa <HAL_SPI_Receive+0x2fa>
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d114      	bne.n	800c9d4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 fc2c 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	e0db      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f47f af69 	bne.w	800c8b4 <HAL_SPI_Receive+0x204>
 800c9e2:	e0c0      	b.n	800cb66 <HAL_SPI_Receive+0x4b6>
 800c9e4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d117      	bne.n	800ca2e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0a:	7812      	ldrb	r2, [r2, #0]
 800ca0c:	b2d2      	uxtb	r2, r2
 800ca0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca14:	1c5a      	adds	r2, r3, #1
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	3b01      	subs	r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca2c:	e094      	b.n	800cb58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	8bfa      	ldrh	r2, [r7, #30]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d946      	bls.n	800caca <HAL_SPI_Receive+0x41a>
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d041      	beq.n	800caca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca52:	7812      	ldrb	r2, [r2, #0]
 800ca54:	b2d2      	uxtb	r2, r2
 800ca56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca6e:	7812      	ldrb	r2, [r2, #0]
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca78:	1c5a      	adds	r2, r3, #1
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca8a:	7812      	ldrb	r2, [r2, #0]
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caa6:	7812      	ldrb	r2, [r2, #0]
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	3b04      	subs	r3, #4
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cac8:	e046      	b.n	800cb58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d81c      	bhi.n	800cb10 <HAL_SPI_Receive+0x460>
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d017      	beq.n	800cb10 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caec:	7812      	ldrb	r2, [r2, #0]
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caf6:	1c5a      	adds	r2, r3, #1
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	3b01      	subs	r3, #1
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb0e:	e023      	b.n	800cb58 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb10:	f7f8 fde0 	bl	80056d4 <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d803      	bhi.n	800cb28 <HAL_SPI_Receive+0x478>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d102      	bne.n	800cb2e <HAL_SPI_Receive+0x47e>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d114      	bne.n	800cb58 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 fb6a 	bl	800d208 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e019      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f47f af41 	bne.w	800c9e8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 fb4e 	bl	800d208 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
  }
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08e      	sub	sp, #56	@ 0x38
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3320      	adds	r3, #32
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3330      	adds	r3, #48	@ 0x30
 800cbb0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	3301      	adds	r3, #1
 800cbbc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbbe:	f7f8 fd89 	bl	80056d4 <HAL_GetTick>
 800cbc2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800cbc4:	887b      	ldrh	r3, [r7, #2]
 800cbc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800cbc8:	887b      	ldrh	r3, [r7, #2]
 800cbca:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d001      	beq.n	800cbdc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e310      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d005      	beq.n	800cbee <HAL_SPI_TransmitReceive+0x5a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <HAL_SPI_TransmitReceive+0x5a>
 800cbe8:	887b      	ldrh	r3, [r7, #2]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e305      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d101      	bne.n	800cc00 <HAL_SPI_TransmitReceive+0x6c>
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e2fe      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2205      	movs	r2, #5
 800cc0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	887a      	ldrh	r2, [r7, #2]
 800cc22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	887a      	ldrh	r2, [r7, #2]
 800cc2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	887a      	ldrh	r2, [r7, #2]
 800cc38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	887a      	ldrh	r2, [r7, #2]
 800cc40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68da      	ldr	r2, [r3, #12]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cc5e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a70      	ldr	r2, [pc, #448]	@ (800ce28 <HAL_SPI_TransmitReceive+0x294>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d009      	beq.n	800cc7e <HAL_SPI_TransmitReceive+0xea>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a6f      	ldr	r2, [pc, #444]	@ (800ce2c <HAL_SPI_TransmitReceive+0x298>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d004      	beq.n	800cc7e <HAL_SPI_TransmitReceive+0xea>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a6d      	ldr	r2, [pc, #436]	@ (800ce30 <HAL_SPI_TransmitReceive+0x29c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d102      	bne.n	800cc84 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800cc7e:	2310      	movs	r3, #16
 800cc80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc82:	e001      	b.n	800cc88 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800cc84:	2308      	movs	r3, #8
 800cc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	4b69      	ldr	r3, [pc, #420]	@ (800ce34 <HAL_SPI_TransmitReceive+0x2a0>)
 800cc90:	4013      	ands	r3, r2
 800cc92:	8879      	ldrh	r1, [r7, #2]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccb4:	d107      	bne.n	800ccc6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	2b0f      	cmp	r3, #15
 800cccc:	f240 80a2 	bls.w	800ce14 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ccd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd2:	089b      	lsrs	r3, r3, #2
 800ccd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ccd6:	e094      	b.n	800ce02 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d120      	bne.n	800cd28 <HAL_SPI_TransmitReceive+0x194>
 800cce6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01d      	beq.n	800cd28 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ccec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ccee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d217      	bcs.n	800cd28 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6812      	ldr	r2, [r2, #0]
 800cd02:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd08:	1d1a      	adds	r2, r3, #4
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd26:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cd30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d065      	beq.n	800ce02 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d118      	bne.n	800cd76 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cd4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	3b01      	subs	r3, #1
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd72:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd74:	e045      	b.n	800ce02 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cd76:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cd78:	8bfb      	ldrh	r3, [r7, #30]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d21d      	bcs.n	800cdba <HAL_SPI_TransmitReceive+0x226>
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d018      	beq.n	800cdba <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cd92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd98:	1d1a      	adds	r2, r3, #4
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cdb8:	e023      	b.n	800ce02 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdba:	f7f8 fc8b 	bl	80056d4 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d803      	bhi.n	800cdd2 <HAL_SPI_TransmitReceive+0x23e>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d102      	bne.n	800cdd8 <HAL_SPI_TransmitReceive+0x244>
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d114      	bne.n	800ce02 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 fa15 	bl	800d208 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cde4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e1fd      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ce02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f47f af67 	bne.w	800ccd8 <HAL_SPI_TransmitReceive+0x144>
 800ce0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f47f af63 	bne.w	800ccd8 <HAL_SPI_TransmitReceive+0x144>
 800ce12:	e1ce      	b.n	800d1b2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	2b07      	cmp	r3, #7
 800ce1a:	f240 81c2 	bls.w	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	085b      	lsrs	r3, r3, #1
 800ce22:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ce24:	e0c9      	b.n	800cfba <HAL_SPI_TransmitReceive+0x426>
 800ce26:	bf00      	nop
 800ce28:	40013000 	.word	0x40013000
 800ce2c:	40003800 	.word	0x40003800
 800ce30:	40003c00 	.word	0x40003c00
 800ce34:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d11f      	bne.n	800ce86 <HAL_SPI_TransmitReceive+0x2f2>
 800ce46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01c      	beq.n	800ce86 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ce4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ce50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d216      	bcs.n	800ce86 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce5c:	881a      	ldrh	r2, [r3, #0]
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce66:	1c9a      	adds	r2, r3, #2
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	3b01      	subs	r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ce8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 8092 	beq.w	800cfba <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d118      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea8:	6a3a      	ldr	r2, [r7, #32]
 800ceaa:	8812      	ldrh	r2, [r2, #0]
 800ceac:	b292      	uxth	r2, r2
 800ceae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb4:	1c9a      	adds	r2, r3, #2
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ced2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ced4:	e071      	b.n	800cfba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ced6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ced8:	8bfb      	ldrh	r3, [r7, #30]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d228      	bcs.n	800cf30 <HAL_SPI_TransmitReceive+0x39c>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d023      	beq.n	800cf30 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceec:	6a3a      	ldr	r2, [r7, #32]
 800ceee:	8812      	ldrh	r2, [r2, #0]
 800cef0:	b292      	uxth	r2, r2
 800cef2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cef8:	1c9a      	adds	r2, r3, #2
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf02:	6a3a      	ldr	r2, [r7, #32]
 800cf04:	8812      	ldrh	r2, [r2, #0]
 800cf06:	b292      	uxth	r2, r2
 800cf08:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf0e:	1c9a      	adds	r2, r3, #2
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	3b02      	subs	r3, #2
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf2c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf2e:	e044      	b.n	800cfba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cf30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d11d      	bne.n	800cf72 <HAL_SPI_TransmitReceive+0x3de>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d018      	beq.n	800cf72 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf44:	6a3a      	ldr	r2, [r7, #32]
 800cf46:	8812      	ldrh	r2, [r2, #0]
 800cf48:	b292      	uxth	r2, r2
 800cf4a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf50:	1c9a      	adds	r2, r3, #2
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf70:	e023      	b.n	800cfba <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf72:	f7f8 fbaf 	bl	80056d4 <HAL_GetTick>
 800cf76:	4602      	mov	r2, r0
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d803      	bhi.n	800cf8a <HAL_SPI_TransmitReceive+0x3f6>
 800cf82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d102      	bne.n	800cf90 <HAL_SPI_TransmitReceive+0x3fc>
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d114      	bne.n	800cfba <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f000 f939 	bl	800d208 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e121      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cfba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f47f af3b 	bne.w	800ce38 <HAL_SPI_TransmitReceive+0x2a4>
 800cfc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f47f af37 	bne.w	800ce38 <HAL_SPI_TransmitReceive+0x2a4>
 800cfca:	e0f2      	b.n	800d1b2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d121      	bne.n	800d01e <HAL_SPI_TransmitReceive+0x48a>
 800cfda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d01e      	beq.n	800d01e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cfe0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cfe2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d218      	bcs.n	800d01e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3320      	adds	r3, #32
 800cff6:	7812      	ldrb	r2, [r2, #0]
 800cff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	3b01      	subs	r3, #1
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d01c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d026:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 80ba 	beq.w	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d11b      	bne.n	800d074 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d048:	7812      	ldrb	r2, [r2, #0]
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d05e:	b29b      	uxth	r3, r3
 800d060:	3b01      	subs	r3, #1
 800d062:	b29a      	uxth	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d070:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d072:	e096      	b.n	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d074:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d076:	8bfb      	ldrh	r3, [r7, #30]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d24a      	bcs.n	800d112 <HAL_SPI_TransmitReceive+0x57e>
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d045      	beq.n	800d112 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d092:	7812      	ldrb	r2, [r2, #0]
 800d094:	b2d2      	uxtb	r2, r2
 800d096:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ae:	7812      	ldrb	r2, [r2, #0]
 800d0b0:	b2d2      	uxtb	r2, r2
 800d0b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ca:	7812      	ldrb	r2, [r2, #0]
 800d0cc:	b2d2      	uxtb	r2, r2
 800d0ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	b2d2      	uxtb	r2, r2
 800d0ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0f0:	1c5a      	adds	r2, r3, #1
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	3b04      	subs	r3, #4
 800d100:	b29a      	uxth	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d10e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d110:	e047      	b.n	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d112:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d114:	2b03      	cmp	r3, #3
 800d116:	d820      	bhi.n	800d15a <HAL_SPI_TransmitReceive+0x5c6>
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d01b      	beq.n	800d15a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d12e:	7812      	ldrb	r2, [r2, #0]
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d144:	b29b      	uxth	r3, r3
 800d146:	3b01      	subs	r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d156:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d158:	e023      	b.n	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d15a:	f7f8 fabb 	bl	80056d4 <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d166:	429a      	cmp	r2, r3
 800d168:	d803      	bhi.n	800d172 <HAL_SPI_TransmitReceive+0x5de>
 800d16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d170:	d102      	bne.n	800d178 <HAL_SPI_TransmitReceive+0x5e4>
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	2b00      	cmp	r3, #0
 800d176:	d114      	bne.n	800d1a2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f845 	bl	800d208 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d184:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e02d      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f47f af11 	bne.w	800cfcc <HAL_SPI_TransmitReceive+0x438>
 800d1aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f47f af0d 	bne.w	800cfcc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2108      	movs	r1, #8
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f000 f8c3 	bl	800d348 <SPI_WaitOnFlagUntilTimeout>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1ce:	f043 0220 	orr.w	r2, r3, #32
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 f815 	bl	800d208 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e000      	b.n	800d1fe <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
  }
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3730      	adds	r7, #48	@ 0x30
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop

0800d208 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699a      	ldr	r2, [r3, #24]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0208 	orr.w	r2, r2, #8
 800d226:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f042 0210 	orr.w	r2, r2, #16
 800d236:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f022 0201 	bic.w	r2, r2, #1
 800d246:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6919      	ldr	r1, [r3, #16]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	4b3c      	ldr	r3, [pc, #240]	@ (800d344 <SPI_CloseTransfer+0x13c>)
 800d254:	400b      	ands	r3, r1
 800d256:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d266:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b04      	cmp	r3, #4
 800d272:	d014      	beq.n	800d29e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00f      	beq.n	800d29e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d284:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	699a      	ldr	r2, [r3, #24]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f042 0220 	orr.w	r2, r2, #32
 800d29c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b03      	cmp	r3, #3
 800d2a8:	d014      	beq.n	800d2d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00f      	beq.n	800d2d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2ba:	f043 0204 	orr.w	r2, r3, #4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	699a      	ldr	r2, [r3, #24]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00f      	beq.n	800d2fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2e4:	f043 0201 	orr.w	r2, r3, #1
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	699a      	ldr	r2, [r3, #24]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00f      	beq.n	800d328 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d30e:	f043 0208 	orr.w	r2, r3, #8
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	699a      	ldr	r2, [r3, #24]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d326:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	fffffc90 	.word	0xfffffc90

0800d348 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	4613      	mov	r3, r2
 800d356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d358:	e010      	b.n	800d37c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d35a:	f7f8 f9bb 	bl	80056d4 <HAL_GetTick>
 800d35e:	4602      	mov	r2, r0
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	429a      	cmp	r2, r3
 800d368:	d803      	bhi.n	800d372 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d102      	bne.n	800d378 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d378:	2303      	movs	r3, #3
 800d37a:	e00f      	b.n	800d39c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	695a      	ldr	r2, [r3, #20]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	4013      	ands	r3, r2
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	429a      	cmp	r2, r3
 800d38a:	bf0c      	ite	eq
 800d38c:	2301      	moveq	r3, #1
 800d38e:	2300      	movne	r3, #0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	461a      	mov	r2, r3
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	429a      	cmp	r2, r3
 800d398:	d0df      	beq.n	800d35a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b0:	095b      	lsrs	r3, r3, #5
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	3307      	adds	r3, #7
 800d3c2:	08db      	lsrs	r3, r3, #3
 800d3c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3714      	adds	r7, #20
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e049      	b.n	800d480 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d106      	bne.n	800d406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7f7 fc5b 	bl	8004cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2202      	movs	r2, #2
 800d40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3304      	adds	r3, #4
 800d416:	4619      	mov	r1, r3
 800d418:	4610      	mov	r0, r2
 800d41a:	f000 fc57 	bl	800dccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d001      	beq.n	800d4a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	e054      	b.n	800d54a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68da      	ldr	r2, [r3, #12]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f042 0201 	orr.w	r2, r2, #1
 800d4b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a26      	ldr	r2, [pc, #152]	@ (800d558 <HAL_TIM_Base_Start_IT+0xd0>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d022      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4ca:	d01d      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a22      	ldr	r2, [pc, #136]	@ (800d55c <HAL_TIM_Base_Start_IT+0xd4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d018      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a21      	ldr	r2, [pc, #132]	@ (800d560 <HAL_TIM_Base_Start_IT+0xd8>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d013      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a1f      	ldr	r2, [pc, #124]	@ (800d564 <HAL_TIM_Base_Start_IT+0xdc>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d00e      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a1e      	ldr	r2, [pc, #120]	@ (800d568 <HAL_TIM_Base_Start_IT+0xe0>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d009      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a1c      	ldr	r2, [pc, #112]	@ (800d56c <HAL_TIM_Base_Start_IT+0xe4>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d004      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x80>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a1b      	ldr	r2, [pc, #108]	@ (800d570 <HAL_TIM_Base_Start_IT+0xe8>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d115      	bne.n	800d534 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	689a      	ldr	r2, [r3, #8]
 800d50e:	4b19      	ldr	r3, [pc, #100]	@ (800d574 <HAL_TIM_Base_Start_IT+0xec>)
 800d510:	4013      	ands	r3, r2
 800d512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2b06      	cmp	r3, #6
 800d518:	d015      	beq.n	800d546 <HAL_TIM_Base_Start_IT+0xbe>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d520:	d011      	beq.n	800d546 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f042 0201 	orr.w	r2, r2, #1
 800d530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d532:	e008      	b.n	800d546 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f042 0201 	orr.w	r2, r2, #1
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	e000      	b.n	800d548 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	40010000 	.word	0x40010000
 800d55c:	40000400 	.word	0x40000400
 800d560:	40000800 	.word	0x40000800
 800d564:	40000c00 	.word	0x40000c00
 800d568:	40010400 	.word	0x40010400
 800d56c:	40001800 	.word	0x40001800
 800d570:	40014000 	.word	0x40014000
 800d574:	00010007 	.word	0x00010007

0800d578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e049      	b.n	800d61e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7f7 fb3e 	bl	8004c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f000 fb88 	bl	800dccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
	...

0800d628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d109      	bne.n	800d64c <HAL_TIM_PWM_Start+0x24>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b01      	cmp	r3, #1
 800d642:	bf14      	ite	ne
 800d644:	2301      	movne	r3, #1
 800d646:	2300      	moveq	r3, #0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	e03c      	b.n	800d6c6 <HAL_TIM_PWM_Start+0x9e>
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d109      	bne.n	800d666 <HAL_TIM_PWM_Start+0x3e>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	bf14      	ite	ne
 800d65e:	2301      	movne	r3, #1
 800d660:	2300      	moveq	r3, #0
 800d662:	b2db      	uxtb	r3, r3
 800d664:	e02f      	b.n	800d6c6 <HAL_TIM_PWM_Start+0x9e>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b08      	cmp	r3, #8
 800d66a:	d109      	bne.n	800d680 <HAL_TIM_PWM_Start+0x58>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b01      	cmp	r3, #1
 800d676:	bf14      	ite	ne
 800d678:	2301      	movne	r3, #1
 800d67a:	2300      	moveq	r3, #0
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	e022      	b.n	800d6c6 <HAL_TIM_PWM_Start+0x9e>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2b0c      	cmp	r3, #12
 800d684:	d109      	bne.n	800d69a <HAL_TIM_PWM_Start+0x72>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b01      	cmp	r3, #1
 800d690:	bf14      	ite	ne
 800d692:	2301      	movne	r3, #1
 800d694:	2300      	moveq	r3, #0
 800d696:	b2db      	uxtb	r3, r3
 800d698:	e015      	b.n	800d6c6 <HAL_TIM_PWM_Start+0x9e>
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b10      	cmp	r3, #16
 800d69e:	d109      	bne.n	800d6b4 <HAL_TIM_PWM_Start+0x8c>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	bf14      	ite	ne
 800d6ac:	2301      	movne	r3, #1
 800d6ae:	2300      	moveq	r3, #0
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	e008      	b.n	800d6c6 <HAL_TIM_PWM_Start+0x9e>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	bf14      	ite	ne
 800d6c0:	2301      	movne	r3, #1
 800d6c2:	2300      	moveq	r3, #0
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e0a1      	b.n	800d812 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <HAL_TIM_PWM_Start+0xb6>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6dc:	e023      	b.n	800d726 <HAL_TIM_PWM_Start+0xfe>
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	d104      	bne.n	800d6ee <HAL_TIM_PWM_Start+0xc6>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6ec:	e01b      	b.n	800d726 <HAL_TIM_PWM_Start+0xfe>
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b08      	cmp	r3, #8
 800d6f2:	d104      	bne.n	800d6fe <HAL_TIM_PWM_Start+0xd6>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6fc:	e013      	b.n	800d726 <HAL_TIM_PWM_Start+0xfe>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b0c      	cmp	r3, #12
 800d702:	d104      	bne.n	800d70e <HAL_TIM_PWM_Start+0xe6>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d70c:	e00b      	b.n	800d726 <HAL_TIM_PWM_Start+0xfe>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b10      	cmp	r3, #16
 800d712:	d104      	bne.n	800d71e <HAL_TIM_PWM_Start+0xf6>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d71c:	e003      	b.n	800d726 <HAL_TIM_PWM_Start+0xfe>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2202      	movs	r2, #2
 800d722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2201      	movs	r2, #1
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 fe48 	bl	800e3c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a38      	ldr	r2, [pc, #224]	@ (800d81c <HAL_TIM_PWM_Start+0x1f4>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d013      	beq.n	800d766 <HAL_TIM_PWM_Start+0x13e>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a37      	ldr	r2, [pc, #220]	@ (800d820 <HAL_TIM_PWM_Start+0x1f8>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d00e      	beq.n	800d766 <HAL_TIM_PWM_Start+0x13e>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a35      	ldr	r2, [pc, #212]	@ (800d824 <HAL_TIM_PWM_Start+0x1fc>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d009      	beq.n	800d766 <HAL_TIM_PWM_Start+0x13e>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a34      	ldr	r2, [pc, #208]	@ (800d828 <HAL_TIM_PWM_Start+0x200>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d004      	beq.n	800d766 <HAL_TIM_PWM_Start+0x13e>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a32      	ldr	r2, [pc, #200]	@ (800d82c <HAL_TIM_PWM_Start+0x204>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d101      	bne.n	800d76a <HAL_TIM_PWM_Start+0x142>
 800d766:	2301      	movs	r3, #1
 800d768:	e000      	b.n	800d76c <HAL_TIM_PWM_Start+0x144>
 800d76a:	2300      	movs	r3, #0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d77e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a25      	ldr	r2, [pc, #148]	@ (800d81c <HAL_TIM_PWM_Start+0x1f4>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d022      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d792:	d01d      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a25      	ldr	r2, [pc, #148]	@ (800d830 <HAL_TIM_PWM_Start+0x208>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d018      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a24      	ldr	r2, [pc, #144]	@ (800d834 <HAL_TIM_PWM_Start+0x20c>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d013      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a22      	ldr	r2, [pc, #136]	@ (800d838 <HAL_TIM_PWM_Start+0x210>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d00e      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a1a      	ldr	r2, [pc, #104]	@ (800d820 <HAL_TIM_PWM_Start+0x1f8>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d009      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a1e      	ldr	r2, [pc, #120]	@ (800d83c <HAL_TIM_PWM_Start+0x214>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d004      	beq.n	800d7d0 <HAL_TIM_PWM_Start+0x1a8>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a16      	ldr	r2, [pc, #88]	@ (800d824 <HAL_TIM_PWM_Start+0x1fc>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d115      	bne.n	800d7fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	689a      	ldr	r2, [r3, #8]
 800d7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d840 <HAL_TIM_PWM_Start+0x218>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b06      	cmp	r3, #6
 800d7e0:	d015      	beq.n	800d80e <HAL_TIM_PWM_Start+0x1e6>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7e8:	d011      	beq.n	800d80e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f042 0201 	orr.w	r2, r2, #1
 800d7f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7fa:	e008      	b.n	800d80e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f042 0201 	orr.w	r2, r2, #1
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	e000      	b.n	800d810 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d80e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	40010000 	.word	0x40010000
 800d820:	40010400 	.word	0x40010400
 800d824:	40014000 	.word	0x40014000
 800d828:	40014400 	.word	0x40014400
 800d82c:	40014800 	.word	0x40014800
 800d830:	40000400 	.word	0x40000400
 800d834:	40000800 	.word	0x40000800
 800d838:	40000c00 	.word	0x40000c00
 800d83c:	40001800 	.word	0x40001800
 800d840:	00010007 	.word	0x00010007

0800d844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	f003 0302 	and.w	r3, r3, #2
 800d862:	2b00      	cmp	r3, #0
 800d864:	d020      	beq.n	800d8a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d01b      	beq.n	800d8a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f06f 0202 	mvn.w	r2, #2
 800d878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f9fe 	bl	800dc90 <HAL_TIM_IC_CaptureCallback>
 800d894:	e005      	b.n	800d8a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f9f0 	bl	800dc7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fa01 	bl	800dca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	f003 0304 	and.w	r3, r3, #4
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d020      	beq.n	800d8f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d01b      	beq.n	800d8f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f06f 0204 	mvn.w	r2, #4
 800d8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f9d8 	bl	800dc90 <HAL_TIM_IC_CaptureCallback>
 800d8e0:	e005      	b.n	800d8ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f9ca 	bl	800dc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f9db 	bl	800dca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	f003 0308 	and.w	r3, r3, #8
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d020      	beq.n	800d940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01b      	beq.n	800d940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f06f 0208 	mvn.w	r2, #8
 800d910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2204      	movs	r2, #4
 800d916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69db      	ldr	r3, [r3, #28]
 800d91e:	f003 0303 	and.w	r3, r3, #3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f9b2 	bl	800dc90 <HAL_TIM_IC_CaptureCallback>
 800d92c:	e005      	b.n	800d93a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f9a4 	bl	800dc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f9b5 	bl	800dca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	f003 0310 	and.w	r3, r3, #16
 800d946:	2b00      	cmp	r3, #0
 800d948:	d020      	beq.n	800d98c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f003 0310 	and.w	r3, r3, #16
 800d950:	2b00      	cmp	r3, #0
 800d952:	d01b      	beq.n	800d98c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f06f 0210 	mvn.w	r2, #16
 800d95c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2208      	movs	r2, #8
 800d962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 f98c 	bl	800dc90 <HAL_TIM_IC_CaptureCallback>
 800d978:	e005      	b.n	800d986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f97e 	bl	800dc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f98f 	bl	800dca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00c      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d007      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f06f 0201 	mvn.w	r2, #1
 800d9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7f6 fb94 	bl	80040d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d104      	bne.n	800d9c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00c      	beq.n	800d9de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fdb1 	bl	800e540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00c      	beq.n	800da02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d007      	beq.n	800da02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 fda9 	bl	800e554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00c      	beq.n	800da26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da12:	2b00      	cmp	r3, #0
 800da14:	d007      	beq.n	800da26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800da1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f949 	bl	800dcb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f003 0320 	and.w	r3, r3, #32
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00c      	beq.n	800da4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f003 0320 	and.w	r3, r3, #32
 800da36:	2b00      	cmp	r3, #0
 800da38:	d007      	beq.n	800da4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f06f 0220 	mvn.w	r2, #32
 800da42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fd71 	bl	800e52c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d101      	bne.n	800da72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800da6e:	2302      	movs	r3, #2
 800da70:	e0ff      	b.n	800dc72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b14      	cmp	r3, #20
 800da7e:	f200 80f0 	bhi.w	800dc62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800da82:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800dadd 	.word	0x0800dadd
 800da8c:	0800dc63 	.word	0x0800dc63
 800da90:	0800dc63 	.word	0x0800dc63
 800da94:	0800dc63 	.word	0x0800dc63
 800da98:	0800db1d 	.word	0x0800db1d
 800da9c:	0800dc63 	.word	0x0800dc63
 800daa0:	0800dc63 	.word	0x0800dc63
 800daa4:	0800dc63 	.word	0x0800dc63
 800daa8:	0800db5f 	.word	0x0800db5f
 800daac:	0800dc63 	.word	0x0800dc63
 800dab0:	0800dc63 	.word	0x0800dc63
 800dab4:	0800dc63 	.word	0x0800dc63
 800dab8:	0800db9f 	.word	0x0800db9f
 800dabc:	0800dc63 	.word	0x0800dc63
 800dac0:	0800dc63 	.word	0x0800dc63
 800dac4:	0800dc63 	.word	0x0800dc63
 800dac8:	0800dbe1 	.word	0x0800dbe1
 800dacc:	0800dc63 	.word	0x0800dc63
 800dad0:	0800dc63 	.word	0x0800dc63
 800dad4:	0800dc63 	.word	0x0800dc63
 800dad8:	0800dc21 	.word	0x0800dc21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 f998 	bl	800de18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	699a      	ldr	r2, [r3, #24]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f042 0208 	orr.w	r2, r2, #8
 800daf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	699a      	ldr	r2, [r3, #24]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 0204 	bic.w	r2, r2, #4
 800db06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6999      	ldr	r1, [r3, #24]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	691a      	ldr	r2, [r3, #16]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	619a      	str	r2, [r3, #24]
      break;
 800db1a:	e0a5      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	4618      	mov	r0, r3
 800db24:	f000 fa08 	bl	800df38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	699a      	ldr	r2, [r3, #24]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	699a      	ldr	r2, [r3, #24]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6999      	ldr	r1, [r3, #24]
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	021a      	lsls	r2, r3, #8
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	430a      	orrs	r2, r1
 800db5a:	619a      	str	r2, [r3, #24]
      break;
 800db5c:	e084      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68b9      	ldr	r1, [r7, #8]
 800db64:	4618      	mov	r0, r3
 800db66:	f000 fa71 	bl	800e04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	69da      	ldr	r2, [r3, #28]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f042 0208 	orr.w	r2, r2, #8
 800db78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	69da      	ldr	r2, [r3, #28]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f022 0204 	bic.w	r2, r2, #4
 800db88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	69d9      	ldr	r1, [r3, #28]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	691a      	ldr	r2, [r3, #16]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	430a      	orrs	r2, r1
 800db9a:	61da      	str	r2, [r3, #28]
      break;
 800db9c:	e064      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 fad9 	bl	800e15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69da      	ldr	r2, [r3, #28]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	69da      	ldr	r2, [r3, #28]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69d9      	ldr	r1, [r3, #28]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	021a      	lsls	r2, r3, #8
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	430a      	orrs	r2, r1
 800dbdc:	61da      	str	r2, [r3, #28]
      break;
 800dbde:	e043      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fb22 	bl	800e230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0208 	orr.w	r2, r2, #8
 800dbfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f022 0204 	bic.w	r2, r2, #4
 800dc0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	691a      	ldr	r2, [r3, #16]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	430a      	orrs	r2, r1
 800dc1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dc1e:	e023      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68b9      	ldr	r1, [r7, #8]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fb66 	bl	800e2f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	021a      	lsls	r2, r3, #8
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dc60:	e002      	b.n	800dc68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	75fb      	strb	r3, [r7, #23]
      break;
 800dc66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3718      	adds	r7, #24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop

0800dc7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a46      	ldr	r2, [pc, #280]	@ (800ddf8 <TIM_Base_SetConfig+0x12c>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d013      	beq.n	800dd0c <TIM_Base_SetConfig+0x40>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcea:	d00f      	beq.n	800dd0c <TIM_Base_SetConfig+0x40>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a43      	ldr	r2, [pc, #268]	@ (800ddfc <TIM_Base_SetConfig+0x130>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d00b      	beq.n	800dd0c <TIM_Base_SetConfig+0x40>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4a42      	ldr	r2, [pc, #264]	@ (800de00 <TIM_Base_SetConfig+0x134>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d007      	beq.n	800dd0c <TIM_Base_SetConfig+0x40>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a41      	ldr	r2, [pc, #260]	@ (800de04 <TIM_Base_SetConfig+0x138>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d003      	beq.n	800dd0c <TIM_Base_SetConfig+0x40>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a40      	ldr	r2, [pc, #256]	@ (800de08 <TIM_Base_SetConfig+0x13c>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d108      	bne.n	800dd1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a35      	ldr	r2, [pc, #212]	@ (800ddf8 <TIM_Base_SetConfig+0x12c>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d01f      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd2c:	d01b      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a32      	ldr	r2, [pc, #200]	@ (800ddfc <TIM_Base_SetConfig+0x130>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d017      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a31      	ldr	r2, [pc, #196]	@ (800de00 <TIM_Base_SetConfig+0x134>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d013      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a30      	ldr	r2, [pc, #192]	@ (800de04 <TIM_Base_SetConfig+0x138>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d00f      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a2f      	ldr	r2, [pc, #188]	@ (800de08 <TIM_Base_SetConfig+0x13c>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00b      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a2e      	ldr	r2, [pc, #184]	@ (800de0c <TIM_Base_SetConfig+0x140>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d007      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a2d      	ldr	r2, [pc, #180]	@ (800de10 <TIM_Base_SetConfig+0x144>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d003      	beq.n	800dd66 <TIM_Base_SetConfig+0x9a>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a2c      	ldr	r2, [pc, #176]	@ (800de14 <TIM_Base_SetConfig+0x148>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d108      	bne.n	800dd78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	689a      	ldr	r2, [r3, #8]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a16      	ldr	r2, [pc, #88]	@ (800ddf8 <TIM_Base_SetConfig+0x12c>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00f      	beq.n	800ddc4 <TIM_Base_SetConfig+0xf8>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a18      	ldr	r2, [pc, #96]	@ (800de08 <TIM_Base_SetConfig+0x13c>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00b      	beq.n	800ddc4 <TIM_Base_SetConfig+0xf8>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a17      	ldr	r2, [pc, #92]	@ (800de0c <TIM_Base_SetConfig+0x140>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d007      	beq.n	800ddc4 <TIM_Base_SetConfig+0xf8>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a16      	ldr	r2, [pc, #88]	@ (800de10 <TIM_Base_SetConfig+0x144>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d003      	beq.n	800ddc4 <TIM_Base_SetConfig+0xf8>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a15      	ldr	r2, [pc, #84]	@ (800de14 <TIM_Base_SetConfig+0x148>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d103      	bne.n	800ddcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	691a      	ldr	r2, [r3, #16]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d105      	bne.n	800ddea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	f023 0201 	bic.w	r2, r3, #1
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	611a      	str	r2, [r3, #16]
  }
}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	40010000 	.word	0x40010000
 800ddfc:	40000400 	.word	0x40000400
 800de00:	40000800 	.word	0x40000800
 800de04:	40000c00 	.word	0x40000c00
 800de08:	40010400 	.word	0x40010400
 800de0c:	40014000 	.word	0x40014000
 800de10:	40014400 	.word	0x40014400
 800de14:	40014800 	.word	0x40014800

0800de18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de18:	b480      	push	{r7}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	f023 0201 	bic.w	r2, r3, #1
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4b37      	ldr	r3, [pc, #220]	@ (800df20 <TIM_OC1_SetConfig+0x108>)
 800de44:	4013      	ands	r3, r2
 800de46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f023 0303 	bic.w	r3, r3, #3
 800de4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4313      	orrs	r3, r2
 800de58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f023 0302 	bic.w	r3, r3, #2
 800de60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	4313      	orrs	r3, r2
 800de6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4a2d      	ldr	r2, [pc, #180]	@ (800df24 <TIM_OC1_SetConfig+0x10c>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d00f      	beq.n	800de94 <TIM_OC1_SetConfig+0x7c>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a2c      	ldr	r2, [pc, #176]	@ (800df28 <TIM_OC1_SetConfig+0x110>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00b      	beq.n	800de94 <TIM_OC1_SetConfig+0x7c>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a2b      	ldr	r2, [pc, #172]	@ (800df2c <TIM_OC1_SetConfig+0x114>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d007      	beq.n	800de94 <TIM_OC1_SetConfig+0x7c>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a2a      	ldr	r2, [pc, #168]	@ (800df30 <TIM_OC1_SetConfig+0x118>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d003      	beq.n	800de94 <TIM_OC1_SetConfig+0x7c>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a29      	ldr	r2, [pc, #164]	@ (800df34 <TIM_OC1_SetConfig+0x11c>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d10c      	bne.n	800deae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f023 0308 	bic.w	r3, r3, #8
 800de9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f023 0304 	bic.w	r3, r3, #4
 800deac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a1c      	ldr	r2, [pc, #112]	@ (800df24 <TIM_OC1_SetConfig+0x10c>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d00f      	beq.n	800ded6 <TIM_OC1_SetConfig+0xbe>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a1b      	ldr	r2, [pc, #108]	@ (800df28 <TIM_OC1_SetConfig+0x110>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d00b      	beq.n	800ded6 <TIM_OC1_SetConfig+0xbe>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4a1a      	ldr	r2, [pc, #104]	@ (800df2c <TIM_OC1_SetConfig+0x114>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d007      	beq.n	800ded6 <TIM_OC1_SetConfig+0xbe>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a19      	ldr	r2, [pc, #100]	@ (800df30 <TIM_OC1_SetConfig+0x118>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d003      	beq.n	800ded6 <TIM_OC1_SetConfig+0xbe>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a18      	ldr	r2, [pc, #96]	@ (800df34 <TIM_OC1_SetConfig+0x11c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d111      	bne.n	800defa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	693a      	ldr	r2, [r7, #16]
 800deec:	4313      	orrs	r3, r2
 800deee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	4313      	orrs	r3, r2
 800def8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	693a      	ldr	r2, [r7, #16]
 800defe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	685a      	ldr	r2, [r3, #4]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	621a      	str	r2, [r3, #32]
}
 800df14:	bf00      	nop
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	fffeff8f 	.word	0xfffeff8f
 800df24:	40010000 	.word	0x40010000
 800df28:	40010400 	.word	0x40010400
 800df2c:	40014000 	.word	0x40014000
 800df30:	40014400 	.word	0x40014400
 800df34:	40014800 	.word	0x40014800

0800df38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df38:	b480      	push	{r7}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a1b      	ldr	r3, [r3, #32]
 800df4c:	f023 0210 	bic.w	r2, r3, #16
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	4b34      	ldr	r3, [pc, #208]	@ (800e034 <TIM_OC2_SetConfig+0xfc>)
 800df64:	4013      	ands	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f023 0320 	bic.w	r3, r3, #32
 800df82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	011b      	lsls	r3, r3, #4
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a29      	ldr	r2, [pc, #164]	@ (800e038 <TIM_OC2_SetConfig+0x100>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d003      	beq.n	800dfa0 <TIM_OC2_SetConfig+0x68>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a28      	ldr	r2, [pc, #160]	@ (800e03c <TIM_OC2_SetConfig+0x104>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d10d      	bne.n	800dfbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a1e      	ldr	r2, [pc, #120]	@ (800e038 <TIM_OC2_SetConfig+0x100>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d00f      	beq.n	800dfe4 <TIM_OC2_SetConfig+0xac>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a1d      	ldr	r2, [pc, #116]	@ (800e03c <TIM_OC2_SetConfig+0x104>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d00b      	beq.n	800dfe4 <TIM_OC2_SetConfig+0xac>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a1c      	ldr	r2, [pc, #112]	@ (800e040 <TIM_OC2_SetConfig+0x108>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d007      	beq.n	800dfe4 <TIM_OC2_SetConfig+0xac>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a1b      	ldr	r2, [pc, #108]	@ (800e044 <TIM_OC2_SetConfig+0x10c>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d003      	beq.n	800dfe4 <TIM_OC2_SetConfig+0xac>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a1a      	ldr	r2, [pc, #104]	@ (800e048 <TIM_OC2_SetConfig+0x110>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d113      	bne.n	800e00c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dfea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	695b      	ldr	r3, [r3, #20]
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	693a      	ldr	r2, [r7, #16]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	4313      	orrs	r3, r2
 800e00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	621a      	str	r2, [r3, #32]
}
 800e026:	bf00      	nop
 800e028:	371c      	adds	r7, #28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	feff8fff 	.word	0xfeff8fff
 800e038:	40010000 	.word	0x40010000
 800e03c:	40010400 	.word	0x40010400
 800e040:	40014000 	.word	0x40014000
 800e044:	40014400 	.word	0x40014400
 800e048:	40014800 	.word	0x40014800

0800e04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a1b      	ldr	r3, [r3, #32]
 800e05a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a1b      	ldr	r3, [r3, #32]
 800e060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4b33      	ldr	r3, [pc, #204]	@ (800e144 <TIM_OC3_SetConfig+0xf8>)
 800e078:	4013      	ands	r3, r2
 800e07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f023 0303 	bic.w	r3, r3, #3
 800e082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a28      	ldr	r2, [pc, #160]	@ (800e148 <TIM_OC3_SetConfig+0xfc>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d003      	beq.n	800e0b2 <TIM_OC3_SetConfig+0x66>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a27      	ldr	r2, [pc, #156]	@ (800e14c <TIM_OC3_SetConfig+0x100>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d10d      	bne.n	800e0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	021b      	lsls	r3, r3, #8
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e148 <TIM_OC3_SetConfig+0xfc>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00f      	beq.n	800e0f6 <TIM_OC3_SetConfig+0xaa>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a1c      	ldr	r2, [pc, #112]	@ (800e14c <TIM_OC3_SetConfig+0x100>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d00b      	beq.n	800e0f6 <TIM_OC3_SetConfig+0xaa>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800e150 <TIM_OC3_SetConfig+0x104>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d007      	beq.n	800e0f6 <TIM_OC3_SetConfig+0xaa>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4a1a      	ldr	r2, [pc, #104]	@ (800e154 <TIM_OC3_SetConfig+0x108>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d003      	beq.n	800e0f6 <TIM_OC3_SetConfig+0xaa>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a19      	ldr	r2, [pc, #100]	@ (800e158 <TIM_OC3_SetConfig+0x10c>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d113      	bne.n	800e11e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	695b      	ldr	r3, [r3, #20]
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	4313      	orrs	r3, r2
 800e110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	011b      	lsls	r3, r3, #4
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	621a      	str	r2, [r3, #32]
}
 800e138:	bf00      	nop
 800e13a:	371c      	adds	r7, #28
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	fffeff8f 	.word	0xfffeff8f
 800e148:	40010000 	.word	0x40010000
 800e14c:	40010400 	.word	0x40010400
 800e150:	40014000 	.word	0x40014000
 800e154:	40014400 	.word	0x40014400
 800e158:	40014800 	.word	0x40014800

0800e15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b087      	sub	sp, #28
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a1b      	ldr	r3, [r3, #32]
 800e16a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6a1b      	ldr	r3, [r3, #32]
 800e170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	69db      	ldr	r3, [r3, #28]
 800e182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	4b24      	ldr	r3, [pc, #144]	@ (800e218 <TIM_OC4_SetConfig+0xbc>)
 800e188:	4013      	ands	r3, r2
 800e18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	021b      	lsls	r3, r3, #8
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	031b      	lsls	r3, r3, #12
 800e1ae:	693a      	ldr	r2, [r7, #16]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a19      	ldr	r2, [pc, #100]	@ (800e21c <TIM_OC4_SetConfig+0xc0>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d00f      	beq.n	800e1dc <TIM_OC4_SetConfig+0x80>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a18      	ldr	r2, [pc, #96]	@ (800e220 <TIM_OC4_SetConfig+0xc4>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d00b      	beq.n	800e1dc <TIM_OC4_SetConfig+0x80>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a17      	ldr	r2, [pc, #92]	@ (800e224 <TIM_OC4_SetConfig+0xc8>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d007      	beq.n	800e1dc <TIM_OC4_SetConfig+0x80>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a16      	ldr	r2, [pc, #88]	@ (800e228 <TIM_OC4_SetConfig+0xcc>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d003      	beq.n	800e1dc <TIM_OC4_SetConfig+0x80>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a15      	ldr	r2, [pc, #84]	@ (800e22c <TIM_OC4_SetConfig+0xd0>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d109      	bne.n	800e1f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	019b      	lsls	r3, r3, #6
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	621a      	str	r2, [r3, #32]
}
 800e20a:	bf00      	nop
 800e20c:	371c      	adds	r7, #28
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	feff8fff 	.word	0xfeff8fff
 800e21c:	40010000 	.word	0x40010000
 800e220:	40010400 	.word	0x40010400
 800e224:	40014000 	.word	0x40014000
 800e228:	40014400 	.word	0x40014400
 800e22c:	40014800 	.word	0x40014800

0800e230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e230:	b480      	push	{r7}
 800e232:	b087      	sub	sp, #28
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a1b      	ldr	r3, [r3, #32]
 800e23e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a1b      	ldr	r3, [r3, #32]
 800e244:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	4b21      	ldr	r3, [pc, #132]	@ (800e2e0 <TIM_OC5_SetConfig+0xb0>)
 800e25c:	4013      	ands	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	4313      	orrs	r3, r2
 800e268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	041b      	lsls	r3, r3, #16
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	4313      	orrs	r3, r2
 800e27c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4a18      	ldr	r2, [pc, #96]	@ (800e2e4 <TIM_OC5_SetConfig+0xb4>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d00f      	beq.n	800e2a6 <TIM_OC5_SetConfig+0x76>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4a17      	ldr	r2, [pc, #92]	@ (800e2e8 <TIM_OC5_SetConfig+0xb8>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d00b      	beq.n	800e2a6 <TIM_OC5_SetConfig+0x76>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4a16      	ldr	r2, [pc, #88]	@ (800e2ec <TIM_OC5_SetConfig+0xbc>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d007      	beq.n	800e2a6 <TIM_OC5_SetConfig+0x76>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a15      	ldr	r2, [pc, #84]	@ (800e2f0 <TIM_OC5_SetConfig+0xc0>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d003      	beq.n	800e2a6 <TIM_OC5_SetConfig+0x76>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a14      	ldr	r2, [pc, #80]	@ (800e2f4 <TIM_OC5_SetConfig+0xc4>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d109      	bne.n	800e2ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	021b      	lsls	r3, r3, #8
 800e2b4:	697a      	ldr	r2, [r7, #20]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	621a      	str	r2, [r3, #32]
}
 800e2d4:	bf00      	nop
 800e2d6:	371c      	adds	r7, #28
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	fffeff8f 	.word	0xfffeff8f
 800e2e4:	40010000 	.word	0x40010000
 800e2e8:	40010400 	.word	0x40010400
 800e2ec:	40014000 	.word	0x40014000
 800e2f0:	40014400 	.word	0x40014400
 800e2f4:	40014800 	.word	0x40014800

0800e2f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b087      	sub	sp, #28
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a1b      	ldr	r3, [r3, #32]
 800e306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	4b22      	ldr	r3, [pc, #136]	@ (800e3ac <TIM_OC6_SetConfig+0xb4>)
 800e324:	4013      	ands	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	4313      	orrs	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	051b      	lsls	r3, r3, #20
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	4313      	orrs	r3, r2
 800e346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a19      	ldr	r2, [pc, #100]	@ (800e3b0 <TIM_OC6_SetConfig+0xb8>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d00f      	beq.n	800e370 <TIM_OC6_SetConfig+0x78>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a18      	ldr	r2, [pc, #96]	@ (800e3b4 <TIM_OC6_SetConfig+0xbc>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d00b      	beq.n	800e370 <TIM_OC6_SetConfig+0x78>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a17      	ldr	r2, [pc, #92]	@ (800e3b8 <TIM_OC6_SetConfig+0xc0>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d007      	beq.n	800e370 <TIM_OC6_SetConfig+0x78>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a16      	ldr	r2, [pc, #88]	@ (800e3bc <TIM_OC6_SetConfig+0xc4>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d003      	beq.n	800e370 <TIM_OC6_SetConfig+0x78>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a15      	ldr	r2, [pc, #84]	@ (800e3c0 <TIM_OC6_SetConfig+0xc8>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d109      	bne.n	800e384 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	029b      	lsls	r3, r3, #10
 800e37e:	697a      	ldr	r2, [r7, #20]
 800e380:	4313      	orrs	r3, r2
 800e382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	693a      	ldr	r2, [r7, #16]
 800e39c:	621a      	str	r2, [r3, #32]
}
 800e39e:	bf00      	nop
 800e3a0:	371c      	adds	r7, #28
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	feff8fff 	.word	0xfeff8fff
 800e3b0:	40010000 	.word	0x40010000
 800e3b4:	40010400 	.word	0x40010400
 800e3b8:	40014000 	.word	0x40014000
 800e3bc:	40014400 	.word	0x40014400
 800e3c0:	40014800 	.word	0x40014800

0800e3c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f003 031f 	and.w	r3, r3, #31
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6a1a      	ldr	r2, [r3, #32]
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	43db      	mvns	r3, r3
 800e3e6:	401a      	ands	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6a1a      	ldr	r2, [r3, #32]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f003 031f 	and.w	r3, r3, #31
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fc:	431a      	orrs	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	621a      	str	r2, [r3, #32]
}
 800e402:	bf00      	nop
 800e404:	371c      	adds	r7, #28
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
	...

0800e410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e420:	2b01      	cmp	r3, #1
 800e422:	d101      	bne.n	800e428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e424:	2302      	movs	r3, #2
 800e426:	e06d      	b.n	800e504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a30      	ldr	r2, [pc, #192]	@ (800e510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d004      	beq.n	800e45c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a2f      	ldr	r2, [pc, #188]	@ (800e514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d108      	bne.n	800e46e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a20      	ldr	r2, [pc, #128]	@ (800e510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d022      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e49a:	d01d      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e518 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d018      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a1c      	ldr	r2, [pc, #112]	@ (800e51c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d013      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a1a      	ldr	r2, [pc, #104]	@ (800e520 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d00e      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a15      	ldr	r2, [pc, #84]	@ (800e514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d009      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a16      	ldr	r2, [pc, #88]	@ (800e524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d004      	beq.n	800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a15      	ldr	r2, [pc, #84]	@ (800e528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d10c      	bne.n	800e4f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	40010000 	.word	0x40010000
 800e514:	40010400 	.word	0x40010400
 800e518:	40000400 	.word	0x40000400
 800e51c:	40000800 	.word	0x40000800
 800e520:	40000c00 	.word	0x40000c00
 800e524:	40001800 	.word	0x40001800
 800e528:	40014000 	.word	0x40014000

0800e52c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e534:	bf00      	nop
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d101      	bne.n	800e57a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e042      	b.n	800e600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e580:	2b00      	cmp	r3, #0
 800e582:	d106      	bne.n	800e592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7f6 fdd1 	bl	8005134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2224      	movs	r2, #36	@ 0x24
 800e596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f022 0201 	bic.w	r2, r2, #1
 800e5a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d002      	beq.n	800e5b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 fd2e 	bl	8010014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 febf 	bl	800f33c <UART_SetConfig>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d101      	bne.n	800e5c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e01b      	b.n	800e600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e5d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689a      	ldr	r2, [r3, #8]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f042 0201 	orr.w	r2, r2, #1
 800e5f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 fdad 	bl	8010158 <UART_CheckIdleState>
 800e5fe:	4603      	mov	r3, r0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08a      	sub	sp, #40	@ 0x28
 800e60c:	af02      	add	r7, sp, #8
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	4613      	mov	r3, r2
 800e616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e61e:	2b20      	cmp	r3, #32
 800e620:	d17b      	bne.n	800e71a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <HAL_UART_Transmit+0x26>
 800e628:	88fb      	ldrh	r3, [r7, #6]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	e074      	b.n	800e71c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2221      	movs	r2, #33	@ 0x21
 800e63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e642:	f7f7 f847 	bl	80056d4 <HAL_GetTick>
 800e646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	88fa      	ldrh	r2, [r7, #6]
 800e64c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	88fa      	ldrh	r2, [r7, #6]
 800e654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e660:	d108      	bne.n	800e674 <HAL_UART_Transmit+0x6c>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d104      	bne.n	800e674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	61bb      	str	r3, [r7, #24]
 800e672:	e003      	b.n	800e67c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e67c:	e030      	b.n	800e6e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2200      	movs	r2, #0
 800e686:	2180      	movs	r1, #128	@ 0x80
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f001 fe0f 	bl	80102ac <UART_WaitOnFlagUntilTimeout>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2220      	movs	r2, #32
 800e698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e69c:	2303      	movs	r3, #3
 800e69e:	e03d      	b.n	800e71c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10b      	bne.n	800e6be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	3302      	adds	r3, #2
 800e6ba:	61bb      	str	r3, [r7, #24]
 800e6bc:	e007      	b.n	800e6ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1c8      	bne.n	800e67e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2140      	movs	r1, #64	@ 0x40
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f001 fdd8 	bl	80102ac <UART_WaitOnFlagUntilTimeout>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d005      	beq.n	800e70e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2220      	movs	r2, #32
 800e706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e70a:	2303      	movs	r3, #3
 800e70c:	e006      	b.n	800e71c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2220      	movs	r2, #32
 800e712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e716:	2300      	movs	r3, #0
 800e718:	e000      	b.n	800e71c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e71a:	2302      	movs	r3, #2
  }
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3720      	adds	r7, #32
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08a      	sub	sp, #40	@ 0x28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e738:	2b20      	cmp	r3, #32
 800e73a:	d137      	bne.n	800e7ac <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <HAL_UART_Receive_DMA+0x24>
 800e742:	88fb      	ldrh	r3, [r7, #6]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d101      	bne.n	800e74c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e030      	b.n	800e7ae <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a18      	ldr	r2, [pc, #96]	@ (800e7b8 <HAL_UART_Receive_DMA+0x94>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d01f      	beq.n	800e79c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d018      	beq.n	800e79c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	e853 3f00 	ldrex	r3, [r3]
 800e776:	613b      	str	r3, [r7, #16]
   return(result);
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e788:	623b      	str	r3, [r7, #32]
 800e78a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78c:	69f9      	ldr	r1, [r7, #28]
 800e78e:	6a3a      	ldr	r2, [r7, #32]
 800e790:	e841 2300 	strex	r3, r2, [r1]
 800e794:	61bb      	str	r3, [r7, #24]
   return(result);
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1e6      	bne.n	800e76a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e79c:	88fb      	ldrh	r3, [r7, #6]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	68b9      	ldr	r1, [r7, #8]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f001 fdf0 	bl	8010388 <UART_Start_Receive_DMA>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	e000      	b.n	800e7ae <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e7ac:	2302      	movs	r3, #2
  }
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3728      	adds	r7, #40	@ 0x28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	58000c00 	.word	0x58000c00

0800e7bc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b090      	sub	sp, #64	@ 0x40
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7de:	2b80      	cmp	r3, #128	@ 0x80
 800e7e0:	d139      	bne.n	800e856 <HAL_UART_DMAStop+0x9a>
 800e7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7e4:	2b21      	cmp	r3, #33	@ 0x21
 800e7e6:	d136      	bne.n	800e856 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3308      	adds	r3, #8
 800e7ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	e853 3f00 	ldrex	r3, [r3]
 800e7f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e80a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e80e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e810:	e841 2300 	strex	r3, r2, [r1]
 800e814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1e5      	bne.n	800e7e8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e820:	2b00      	cmp	r3, #0
 800e822:	d015      	beq.n	800e850 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e828:	4618      	mov	r0, r3
 800e82a:	f7f7 ff03 	bl	8006634 <HAL_DMA_Abort>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00d      	beq.n	800e850 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e838:	4618      	mov	r0, r3
 800e83a:	f7f9 fbc1 	bl	8007fc0 <HAL_DMA_GetError>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b20      	cmp	r3, #32
 800e842:	d105      	bne.n	800e850 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2210      	movs	r2, #16
 800e848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e84c:	2303      	movs	r3, #3
 800e84e:	e047      	b.n	800e8e0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f001 fe3f 	bl	80104d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e860:	2b40      	cmp	r3, #64	@ 0x40
 800e862:	d13c      	bne.n	800e8de <HAL_UART_DMAStop+0x122>
 800e864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e866:	2b22      	cmp	r3, #34	@ 0x22
 800e868:	d139      	bne.n	800e8de <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3308      	adds	r3, #8
 800e870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	e853 3f00 	ldrex	r3, [r3]
 800e878:	60bb      	str	r3, [r7, #8]
   return(result);
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e880:	633b      	str	r3, [r7, #48]	@ 0x30
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3308      	adds	r3, #8
 800e888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e88a:	61ba      	str	r2, [r7, #24]
 800e88c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88e:	6979      	ldr	r1, [r7, #20]
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	e841 2300 	strex	r3, r2, [r1]
 800e896:	613b      	str	r3, [r7, #16]
   return(result);
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1e5      	bne.n	800e86a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d017      	beq.n	800e8d8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f7 fec0 	bl	8006634 <HAL_DMA_Abort>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00e      	beq.n	800e8d8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f9 fb7d 	bl	8007fc0 <HAL_DMA_GetError>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b20      	cmp	r3, #32
 800e8ca:	d105      	bne.n	800e8d8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2210      	movs	r2, #16
 800e8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e8d4:	2303      	movs	r3, #3
 800e8d6:	e003      	b.n	800e8e0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f001 fe3d 	bl	8010558 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3740      	adds	r7, #64	@ 0x40
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b0a2      	sub	sp, #136	@ 0x88
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e906:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e90a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e918:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e91a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e91e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e920:	e841 2300 	strex	r3, r2, [r1]
 800e924:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e4      	bne.n	800e8f6 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3308      	adds	r3, #8
 800e932:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e936:	e853 3f00 	ldrex	r3, [r3]
 800e93a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e93c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e93e:	4b85      	ldr	r3, [pc, #532]	@ (800eb54 <HAL_UART_Abort_IT+0x26c>)
 800e940:	4013      	ands	r3, r2
 800e942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3308      	adds	r3, #8
 800e94a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e94c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e94e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e950:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e954:	e841 2300 	strex	r3, r2, [r1]
 800e958:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1e5      	bne.n	800e92c <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e964:	2b01      	cmp	r3, #1
 800e966:	d118      	bne.n	800e99a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e970:	e853 3f00 	ldrex	r3, [r3]
 800e974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e978:	f023 0310 	bic.w	r3, r3, #16
 800e97c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	461a      	mov	r2, r3
 800e984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e986:	647b      	str	r3, [r7, #68]	@ 0x44
 800e988:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e98c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e98e:	e841 2300 	strex	r3, r2, [r1]
 800e992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1e6      	bne.n	800e968 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00f      	beq.n	800e9c2 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9ac:	2b80      	cmp	r3, #128	@ 0x80
 800e9ae:	d104      	bne.n	800e9ba <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9b4:	4a68      	ldr	r2, [pc, #416]	@ (800eb58 <HAL_UART_Abort_IT+0x270>)
 800e9b6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9b8:	e003      	b.n	800e9c2 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9be:	2200      	movs	r2, #0
 800e9c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d011      	beq.n	800e9f0 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9d6:	2b40      	cmp	r3, #64	@ 0x40
 800e9d8:	d105      	bne.n	800e9e6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9e0:	4a5e      	ldr	r2, [pc, #376]	@ (800eb5c <HAL_UART_Abort_IT+0x274>)
 800e9e2:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9e4:	e004      	b.n	800e9f0 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	689b      	ldr	r3, [r3, #8]
 800e9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9fa:	2b80      	cmp	r3, #128	@ 0x80
 800e9fc:	d12d      	bne.n	800ea5a <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3308      	adds	r3, #8
 800ea04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea14:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3308      	adds	r3, #8
 800ea1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ea1e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ea20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea26:	e841 2300 	strex	r3, r2, [r1]
 800ea2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1e5      	bne.n	800e9fe <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00f      	beq.n	800ea5a <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f8 f916 	bl	8006c70 <HAL_DMA_Abort_IT>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d004      	beq.n	800ea54 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea4e:	2200      	movs	r2, #0
 800ea50:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea52:	e002      	b.n	800ea5a <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea64:	2b40      	cmp	r3, #64	@ 0x40
 800ea66:	d133      	bne.n	800ead0 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	e853 3f00 	ldrex	r3, [r3]
 800ea76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea7e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	3308      	adds	r3, #8
 800ea86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea88:	61fa      	str	r2, [r7, #28]
 800ea8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8c:	69b9      	ldr	r1, [r7, #24]
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	e841 2300 	strex	r3, r2, [r1]
 800ea94:	617b      	str	r3, [r7, #20]
   return(result);
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1e5      	bne.n	800ea68 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d014      	beq.n	800ead0 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7f8 f8df 	bl	8006c70 <HAL_DMA_Abort_IT>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d008      	beq.n	800eaca <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eabe:	2200      	movs	r2, #0
 800eac0:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800eac2:	2301      	movs	r3, #1
 800eac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eac8:	e002      	b.n	800ead0 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800eaca:	2300      	movs	r3, #0
 800eacc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ead0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d138      	bne.n	800eb4a <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	220f      	movs	r2, #15
 800eb02:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb0c:	d107      	bne.n	800eb1e <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	699a      	ldr	r2, [r3, #24]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f042 0210 	orr.w	r2, r2, #16
 800eb1c:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	699a      	ldr	r2, [r3, #24]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f042 0208 	orr.w	r2, r2, #8
 800eb2c:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fbe3 	bl	800f310 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3788      	adds	r7, #136	@ 0x88
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	ef7ffffe 	.word	0xef7ffffe
 800eb58:	08010837 	.word	0x08010837
 800eb5c:	080108c3 	.word	0x080108c3

0800eb60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b0ba      	sub	sp, #232	@ 0xe8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eb8e:	4013      	ands	r3, r2
 800eb90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eb94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d11b      	bne.n	800ebd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eba0:	f003 0320 	and.w	r3, r3, #32
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d015      	beq.n	800ebd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebac:	f003 0320 	and.w	r3, r3, #32
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d105      	bne.n	800ebc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d009      	beq.n	800ebd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f000 8377 	beq.w	800f2b8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	4798      	blx	r3
      }
      return;
 800ebd2:	e371      	b.n	800f2b8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ebd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8123 	beq.w	800ee24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ebde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebe2:	4b8d      	ldr	r3, [pc, #564]	@ (800ee18 <HAL_UART_IRQHandler+0x2b8>)
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d106      	bne.n	800ebf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ebea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ebee:	4b8b      	ldr	r3, [pc, #556]	@ (800ee1c <HAL_UART_IRQHandler+0x2bc>)
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 8116 	beq.w	800ee24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ebf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebfc:	f003 0301 	and.w	r3, r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d011      	beq.n	800ec28 <HAL_UART_IRQHandler+0xc8>
 800ec04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00b      	beq.n	800ec28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2201      	movs	r2, #1
 800ec16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec1e:	f043 0201 	orr.w	r2, r3, #1
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec2c:	f003 0302 	and.w	r3, r3, #2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d011      	beq.n	800ec58 <HAL_UART_IRQHandler+0xf8>
 800ec34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec38:	f003 0301 	and.w	r3, r3, #1
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00b      	beq.n	800ec58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2202      	movs	r2, #2
 800ec46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec4e:	f043 0204 	orr.w	r2, r3, #4
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec5c:	f003 0304 	and.w	r3, r3, #4
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d011      	beq.n	800ec88 <HAL_UART_IRQHandler+0x128>
 800ec64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00b      	beq.n	800ec88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2204      	movs	r2, #4
 800ec76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec7e:	f043 0202 	orr.w	r2, r3, #2
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec8c:	f003 0308 	and.w	r3, r3, #8
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d017      	beq.n	800ecc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec98:	f003 0320 	and.w	r3, r3, #32
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d105      	bne.n	800ecac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eca0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eca4:	4b5c      	ldr	r3, [pc, #368]	@ (800ee18 <HAL_UART_IRQHandler+0x2b8>)
 800eca6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00b      	beq.n	800ecc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2208      	movs	r2, #8
 800ecb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecba:	f043 0208 	orr.w	r2, r3, #8
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ecc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d012      	beq.n	800ecf6 <HAL_UART_IRQHandler+0x196>
 800ecd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00c      	beq.n	800ecf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ece4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecec:	f043 0220 	orr.w	r2, r3, #32
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 82dd 	beq.w	800f2bc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed06:	f003 0320 	and.w	r3, r3, #32
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d013      	beq.n	800ed36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed12:	f003 0320 	and.w	r3, r3, #32
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed4a:	2b40      	cmp	r3, #64	@ 0x40
 800ed4c:	d005      	beq.n	800ed5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ed4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ed52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d054      	beq.n	800ee04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 fbfc 	bl	8010558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed6a:	2b40      	cmp	r3, #64	@ 0x40
 800ed6c:	d146      	bne.n	800edfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3308      	adds	r3, #8
 800ed74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed7c:	e853 3f00 	ldrex	r3, [r3]
 800ed80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ed84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3308      	adds	r3, #8
 800ed96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ed9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800eda6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800edaa:	e841 2300 	strex	r3, r2, [r1]
 800edae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800edb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1d9      	bne.n	800ed6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d017      	beq.n	800edf4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edca:	4a15      	ldr	r2, [pc, #84]	@ (800ee20 <HAL_UART_IRQHandler+0x2c0>)
 800edcc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7f7 ff4b 	bl	8006c70 <HAL_DMA_Abort_IT>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d019      	beq.n	800ee14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ede6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800edee:	4610      	mov	r0, r2
 800edf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edf2:	e00f      	b.n	800ee14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fa81 	bl	800f2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edfa:	e00b      	b.n	800ee14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fa7d 	bl	800f2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee02:	e007      	b.n	800ee14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fa79 	bl	800f2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ee12:	e253      	b.n	800f2bc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee14:	bf00      	nop
    return;
 800ee16:	e251      	b.n	800f2bc <HAL_UART_IRQHandler+0x75c>
 800ee18:	10000001 	.word	0x10000001
 800ee1c:	04000120 	.word	0x04000120
 800ee20:	0801080b 	.word	0x0801080b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	f040 81e7 	bne.w	800f1fc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ee2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee32:	f003 0310 	and.w	r3, r3, #16
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f000 81e0 	beq.w	800f1fc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ee3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f000 81d9 	beq.w	800f1fc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2210      	movs	r2, #16
 800ee50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee5c:	2b40      	cmp	r3, #64	@ 0x40
 800ee5e:	f040 8151 	bne.w	800f104 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a96      	ldr	r2, [pc, #600]	@ (800f0c4 <HAL_UART_IRQHandler+0x564>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d068      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a93      	ldr	r2, [pc, #588]	@ (800f0c8 <HAL_UART_IRQHandler+0x568>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d061      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a91      	ldr	r2, [pc, #580]	@ (800f0cc <HAL_UART_IRQHandler+0x56c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d05a      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a8e      	ldr	r2, [pc, #568]	@ (800f0d0 <HAL_UART_IRQHandler+0x570>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d053      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a8c      	ldr	r2, [pc, #560]	@ (800f0d4 <HAL_UART_IRQHandler+0x574>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d04c      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a89      	ldr	r2, [pc, #548]	@ (800f0d8 <HAL_UART_IRQHandler+0x578>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d045      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a87      	ldr	r2, [pc, #540]	@ (800f0dc <HAL_UART_IRQHandler+0x57c>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d03e      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a84      	ldr	r2, [pc, #528]	@ (800f0e0 <HAL_UART_IRQHandler+0x580>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d037      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a82      	ldr	r2, [pc, #520]	@ (800f0e4 <HAL_UART_IRQHandler+0x584>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d030      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a7f      	ldr	r2, [pc, #508]	@ (800f0e8 <HAL_UART_IRQHandler+0x588>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d029      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a7d      	ldr	r2, [pc, #500]	@ (800f0ec <HAL_UART_IRQHandler+0x58c>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d022      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a7a      	ldr	r2, [pc, #488]	@ (800f0f0 <HAL_UART_IRQHandler+0x590>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d01b      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a78      	ldr	r2, [pc, #480]	@ (800f0f4 <HAL_UART_IRQHandler+0x594>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d014      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a75      	ldr	r2, [pc, #468]	@ (800f0f8 <HAL_UART_IRQHandler+0x598>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d00d      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a73      	ldr	r2, [pc, #460]	@ (800f0fc <HAL_UART_IRQHandler+0x59c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d006      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3e2>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a70      	ldr	r2, [pc, #448]	@ (800f100 <HAL_UART_IRQHandler+0x5a0>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d106      	bne.n	800ef50 <HAL_UART_IRQHandler+0x3f0>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	e005      	b.n	800ef5c <HAL_UART_IRQHandler+0x3fc>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 81ab 	beq.w	800f2c0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef74:	429a      	cmp	r2, r3
 800ef76:	f080 81a3 	bcs.w	800f2c0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef90:	f000 8087 	beq.w	800f0a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800efa0:	e853 3f00 	ldrex	r3, [r3]
 800efa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800efa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800efac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	461a      	mov	r2, r3
 800efba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800efbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efc2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800efca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800efce:	e841 2300 	strex	r3, r2, [r1]
 800efd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800efd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1da      	bne.n	800ef94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3308      	adds	r3, #8
 800efe4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800efee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eff0:	f023 0301 	bic.w	r3, r3, #1
 800eff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3308      	adds	r3, #8
 800effe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f002:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f006:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f008:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f00a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e1      	bne.n	800efde <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	3308      	adds	r3, #8
 800f020:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f02a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f02c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3308      	adds	r3, #8
 800f03a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f03e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f040:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f04c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e3      	bne.n	800f01a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2220      	movs	r2, #32
 800f056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f068:	e853 3f00 	ldrex	r3, [r3]
 800f06c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f06e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f070:	f023 0310 	bic.w	r3, r3, #16
 800f074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	461a      	mov	r2, r3
 800f07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f082:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f084:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f086:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f088:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f08a:	e841 2300 	strex	r3, r2, [r1]
 800f08e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1e4      	bne.n	800f060 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7f7 fac9 	bl	8006634 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2202      	movs	r2, #2
 800f0a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 f931 	bl	800f324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0c2:	e0fd      	b.n	800f2c0 <HAL_UART_IRQHandler+0x760>
 800f0c4:	40020010 	.word	0x40020010
 800f0c8:	40020028 	.word	0x40020028
 800f0cc:	40020040 	.word	0x40020040
 800f0d0:	40020058 	.word	0x40020058
 800f0d4:	40020070 	.word	0x40020070
 800f0d8:	40020088 	.word	0x40020088
 800f0dc:	400200a0 	.word	0x400200a0
 800f0e0:	400200b8 	.word	0x400200b8
 800f0e4:	40020410 	.word	0x40020410
 800f0e8:	40020428 	.word	0x40020428
 800f0ec:	40020440 	.word	0x40020440
 800f0f0:	40020458 	.word	0x40020458
 800f0f4:	40020470 	.word	0x40020470
 800f0f8:	40020488 	.word	0x40020488
 800f0fc:	400204a0 	.word	0x400204a0
 800f100:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f110:	b29b      	uxth	r3, r3
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	f000 80cf 	beq.w	800f2c4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f126:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f000 80ca 	beq.w	800f2c4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f138:	e853 3f00 	ldrex	r3, [r3]
 800f13c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f152:	647b      	str	r3, [r7, #68]	@ 0x44
 800f154:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f15a:	e841 2300 	strex	r3, r2, [r1]
 800f15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e4      	bne.n	800f130 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f170:	e853 3f00 	ldrex	r3, [r3]
 800f174:	623b      	str	r3, [r7, #32]
   return(result);
 800f176:	6a3a      	ldr	r2, [r7, #32]
 800f178:	4b55      	ldr	r3, [pc, #340]	@ (800f2d0 <HAL_UART_IRQHandler+0x770>)
 800f17a:	4013      	ands	r3, r2
 800f17c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3308      	adds	r3, #8
 800f186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f18a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f18e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f192:	e841 2300 	strex	r3, r2, [r1]
 800f196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1e3      	bne.n	800f166 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2220      	movs	r2, #32
 800f1a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	e853 3f00 	ldrex	r3, [r3]
 800f1be:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f023 0310 	bic.w	r3, r3, #16
 800f1c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f1d4:	61fb      	str	r3, [r7, #28]
 800f1d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d8:	69b9      	ldr	r1, [r7, #24]
 800f1da:	69fa      	ldr	r2, [r7, #28]
 800f1dc:	e841 2300 	strex	r3, r2, [r1]
 800f1e0:	617b      	str	r3, [r7, #20]
   return(result);
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1e4      	bne.n	800f1b2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f1ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f895 	bl	800f324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f1fa:	e063      	b.n	800f2c4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00e      	beq.n	800f226 <HAL_UART_IRQHandler+0x6c6>
 800f208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f20c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f210:	2b00      	cmp	r3, #0
 800f212:	d008      	beq.n	800f226 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f21c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f001 fbba 	bl	8010998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f224:	e051      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d014      	beq.n	800f25c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d105      	bne.n	800f24a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f246:	2b00      	cmp	r3, #0
 800f248:	d008      	beq.n	800f25c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d03a      	beq.n	800f2c8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	4798      	blx	r3
    }
    return;
 800f25a:	e035      	b.n	800f2c8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d009      	beq.n	800f27c <HAL_UART_IRQHandler+0x71c>
 800f268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f26c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f270:	2b00      	cmp	r3, #0
 800f272:	d003      	beq.n	800f27c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 fb64 	bl	8010942 <UART_EndTransmit_IT>
    return;
 800f27a:	e026      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d009      	beq.n	800f29c <HAL_UART_IRQHandler+0x73c>
 800f288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f28c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f001 fb93 	bl	80109c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f29a:	e016      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d010      	beq.n	800f2ca <HAL_UART_IRQHandler+0x76a>
 800f2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	da0c      	bge.n	800f2ca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 fb7b 	bl	80109ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2b6:	e008      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
      return;
 800f2b8:	bf00      	nop
 800f2ba:	e006      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
    return;
 800f2bc:	bf00      	nop
 800f2be:	e004      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
      return;
 800f2c0:	bf00      	nop
 800f2c2:	e002      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
      return;
 800f2c4:	bf00      	nop
 800f2c6:	e000      	b.n	800f2ca <HAL_UART_IRQHandler+0x76a>
    return;
 800f2c8:	bf00      	nop
  }
}
 800f2ca:	37e8      	adds	r7, #232	@ 0xe8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	effffffe 	.word	0xeffffffe

0800f2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f33c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f340:	b092      	sub	sp, #72	@ 0x48
 800f342:	af00      	add	r7, sp, #0
 800f344:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f346:	2300      	movs	r3, #0
 800f348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	431a      	orrs	r2, r3
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	431a      	orrs	r2, r3
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	4313      	orrs	r3, r2
 800f362:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	4bbe      	ldr	r3, [pc, #760]	@ (800f664 <UART_SetConfig+0x328>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	6812      	ldr	r2, [r2, #0]
 800f372:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f374:	430b      	orrs	r3, r1
 800f376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	68da      	ldr	r2, [r3, #12]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	430a      	orrs	r2, r1
 800f38c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4ab3      	ldr	r2, [pc, #716]	@ (800f668 <UART_SetConfig+0x32c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d004      	beq.n	800f3a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	689a      	ldr	r2, [r3, #8]
 800f3ae:	4baf      	ldr	r3, [pc, #700]	@ (800f66c <UART_SetConfig+0x330>)
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	6812      	ldr	r2, [r2, #0]
 800f3b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3c2:	f023 010f 	bic.w	r1, r3, #15
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	430a      	orrs	r2, r1
 800f3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4aa6      	ldr	r2, [pc, #664]	@ (800f670 <UART_SetConfig+0x334>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d177      	bne.n	800f4cc <UART_SetConfig+0x190>
 800f3dc:	4ba5      	ldr	r3, [pc, #660]	@ (800f674 <UART_SetConfig+0x338>)
 800f3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f3e4:	2b28      	cmp	r3, #40	@ 0x28
 800f3e6:	d86d      	bhi.n	800f4c4 <UART_SetConfig+0x188>
 800f3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f0 <UART_SetConfig+0xb4>)
 800f3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ee:	bf00      	nop
 800f3f0:	0800f495 	.word	0x0800f495
 800f3f4:	0800f4c5 	.word	0x0800f4c5
 800f3f8:	0800f4c5 	.word	0x0800f4c5
 800f3fc:	0800f4c5 	.word	0x0800f4c5
 800f400:	0800f4c5 	.word	0x0800f4c5
 800f404:	0800f4c5 	.word	0x0800f4c5
 800f408:	0800f4c5 	.word	0x0800f4c5
 800f40c:	0800f4c5 	.word	0x0800f4c5
 800f410:	0800f49d 	.word	0x0800f49d
 800f414:	0800f4c5 	.word	0x0800f4c5
 800f418:	0800f4c5 	.word	0x0800f4c5
 800f41c:	0800f4c5 	.word	0x0800f4c5
 800f420:	0800f4c5 	.word	0x0800f4c5
 800f424:	0800f4c5 	.word	0x0800f4c5
 800f428:	0800f4c5 	.word	0x0800f4c5
 800f42c:	0800f4c5 	.word	0x0800f4c5
 800f430:	0800f4a5 	.word	0x0800f4a5
 800f434:	0800f4c5 	.word	0x0800f4c5
 800f438:	0800f4c5 	.word	0x0800f4c5
 800f43c:	0800f4c5 	.word	0x0800f4c5
 800f440:	0800f4c5 	.word	0x0800f4c5
 800f444:	0800f4c5 	.word	0x0800f4c5
 800f448:	0800f4c5 	.word	0x0800f4c5
 800f44c:	0800f4c5 	.word	0x0800f4c5
 800f450:	0800f4ad 	.word	0x0800f4ad
 800f454:	0800f4c5 	.word	0x0800f4c5
 800f458:	0800f4c5 	.word	0x0800f4c5
 800f45c:	0800f4c5 	.word	0x0800f4c5
 800f460:	0800f4c5 	.word	0x0800f4c5
 800f464:	0800f4c5 	.word	0x0800f4c5
 800f468:	0800f4c5 	.word	0x0800f4c5
 800f46c:	0800f4c5 	.word	0x0800f4c5
 800f470:	0800f4b5 	.word	0x0800f4b5
 800f474:	0800f4c5 	.word	0x0800f4c5
 800f478:	0800f4c5 	.word	0x0800f4c5
 800f47c:	0800f4c5 	.word	0x0800f4c5
 800f480:	0800f4c5 	.word	0x0800f4c5
 800f484:	0800f4c5 	.word	0x0800f4c5
 800f488:	0800f4c5 	.word	0x0800f4c5
 800f48c:	0800f4c5 	.word	0x0800f4c5
 800f490:	0800f4bd 	.word	0x0800f4bd
 800f494:	2301      	movs	r3, #1
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49a:	e326      	b.n	800faea <UART_SetConfig+0x7ae>
 800f49c:	2304      	movs	r3, #4
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a2:	e322      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4a4:	2308      	movs	r3, #8
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4aa:	e31e      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b2:	e31a      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4b4:	2320      	movs	r3, #32
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ba:	e316      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4bc:	2340      	movs	r3, #64	@ 0x40
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c2:	e312      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4c4:	2380      	movs	r3, #128	@ 0x80
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ca:	e30e      	b.n	800faea <UART_SetConfig+0x7ae>
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a69      	ldr	r2, [pc, #420]	@ (800f678 <UART_SetConfig+0x33c>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d130      	bne.n	800f538 <UART_SetConfig+0x1fc>
 800f4d6:	4b67      	ldr	r3, [pc, #412]	@ (800f674 <UART_SetConfig+0x338>)
 800f4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4da:	f003 0307 	and.w	r3, r3, #7
 800f4de:	2b05      	cmp	r3, #5
 800f4e0:	d826      	bhi.n	800f530 <UART_SetConfig+0x1f4>
 800f4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4e8 <UART_SetConfig+0x1ac>)
 800f4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e8:	0800f501 	.word	0x0800f501
 800f4ec:	0800f509 	.word	0x0800f509
 800f4f0:	0800f511 	.word	0x0800f511
 800f4f4:	0800f519 	.word	0x0800f519
 800f4f8:	0800f521 	.word	0x0800f521
 800f4fc:	0800f529 	.word	0x0800f529
 800f500:	2300      	movs	r3, #0
 800f502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f506:	e2f0      	b.n	800faea <UART_SetConfig+0x7ae>
 800f508:	2304      	movs	r3, #4
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50e:	e2ec      	b.n	800faea <UART_SetConfig+0x7ae>
 800f510:	2308      	movs	r3, #8
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f516:	e2e8      	b.n	800faea <UART_SetConfig+0x7ae>
 800f518:	2310      	movs	r3, #16
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51e:	e2e4      	b.n	800faea <UART_SetConfig+0x7ae>
 800f520:	2320      	movs	r3, #32
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f526:	e2e0      	b.n	800faea <UART_SetConfig+0x7ae>
 800f528:	2340      	movs	r3, #64	@ 0x40
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52e:	e2dc      	b.n	800faea <UART_SetConfig+0x7ae>
 800f530:	2380      	movs	r3, #128	@ 0x80
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f536:	e2d8      	b.n	800faea <UART_SetConfig+0x7ae>
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a4f      	ldr	r2, [pc, #316]	@ (800f67c <UART_SetConfig+0x340>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d130      	bne.n	800f5a4 <UART_SetConfig+0x268>
 800f542:	4b4c      	ldr	r3, [pc, #304]	@ (800f674 <UART_SetConfig+0x338>)
 800f544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f546:	f003 0307 	and.w	r3, r3, #7
 800f54a:	2b05      	cmp	r3, #5
 800f54c:	d826      	bhi.n	800f59c <UART_SetConfig+0x260>
 800f54e:	a201      	add	r2, pc, #4	@ (adr r2, 800f554 <UART_SetConfig+0x218>)
 800f550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f554:	0800f56d 	.word	0x0800f56d
 800f558:	0800f575 	.word	0x0800f575
 800f55c:	0800f57d 	.word	0x0800f57d
 800f560:	0800f585 	.word	0x0800f585
 800f564:	0800f58d 	.word	0x0800f58d
 800f568:	0800f595 	.word	0x0800f595
 800f56c:	2300      	movs	r3, #0
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f572:	e2ba      	b.n	800faea <UART_SetConfig+0x7ae>
 800f574:	2304      	movs	r3, #4
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57a:	e2b6      	b.n	800faea <UART_SetConfig+0x7ae>
 800f57c:	2308      	movs	r3, #8
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f582:	e2b2      	b.n	800faea <UART_SetConfig+0x7ae>
 800f584:	2310      	movs	r3, #16
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58a:	e2ae      	b.n	800faea <UART_SetConfig+0x7ae>
 800f58c:	2320      	movs	r3, #32
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f592:	e2aa      	b.n	800faea <UART_SetConfig+0x7ae>
 800f594:	2340      	movs	r3, #64	@ 0x40
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59a:	e2a6      	b.n	800faea <UART_SetConfig+0x7ae>
 800f59c:	2380      	movs	r3, #128	@ 0x80
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a2:	e2a2      	b.n	800faea <UART_SetConfig+0x7ae>
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a35      	ldr	r2, [pc, #212]	@ (800f680 <UART_SetConfig+0x344>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d130      	bne.n	800f610 <UART_SetConfig+0x2d4>
 800f5ae:	4b31      	ldr	r3, [pc, #196]	@ (800f674 <UART_SetConfig+0x338>)
 800f5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b05      	cmp	r3, #5
 800f5b8:	d826      	bhi.n	800f608 <UART_SetConfig+0x2cc>
 800f5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c0 <UART_SetConfig+0x284>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f5d9 	.word	0x0800f5d9
 800f5c4:	0800f5e1 	.word	0x0800f5e1
 800f5c8:	0800f5e9 	.word	0x0800f5e9
 800f5cc:	0800f5f1 	.word	0x0800f5f1
 800f5d0:	0800f5f9 	.word	0x0800f5f9
 800f5d4:	0800f601 	.word	0x0800f601
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5de:	e284      	b.n	800faea <UART_SetConfig+0x7ae>
 800f5e0:	2304      	movs	r3, #4
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e280      	b.n	800faea <UART_SetConfig+0x7ae>
 800f5e8:	2308      	movs	r3, #8
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e27c      	b.n	800faea <UART_SetConfig+0x7ae>
 800f5f0:	2310      	movs	r3, #16
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f6:	e278      	b.n	800faea <UART_SetConfig+0x7ae>
 800f5f8:	2320      	movs	r3, #32
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fe:	e274      	b.n	800faea <UART_SetConfig+0x7ae>
 800f600:	2340      	movs	r3, #64	@ 0x40
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e270      	b.n	800faea <UART_SetConfig+0x7ae>
 800f608:	2380      	movs	r3, #128	@ 0x80
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e26c      	b.n	800faea <UART_SetConfig+0x7ae>
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a1b      	ldr	r2, [pc, #108]	@ (800f684 <UART_SetConfig+0x348>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d142      	bne.n	800f6a0 <UART_SetConfig+0x364>
 800f61a:	4b16      	ldr	r3, [pc, #88]	@ (800f674 <UART_SetConfig+0x338>)
 800f61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	2b05      	cmp	r3, #5
 800f624:	d838      	bhi.n	800f698 <UART_SetConfig+0x35c>
 800f626:	a201      	add	r2, pc, #4	@ (adr r2, 800f62c <UART_SetConfig+0x2f0>)
 800f628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62c:	0800f645 	.word	0x0800f645
 800f630:	0800f64d 	.word	0x0800f64d
 800f634:	0800f655 	.word	0x0800f655
 800f638:	0800f65d 	.word	0x0800f65d
 800f63c:	0800f689 	.word	0x0800f689
 800f640:	0800f691 	.word	0x0800f691
 800f644:	2300      	movs	r3, #0
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64a:	e24e      	b.n	800faea <UART_SetConfig+0x7ae>
 800f64c:	2304      	movs	r3, #4
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e24a      	b.n	800faea <UART_SetConfig+0x7ae>
 800f654:	2308      	movs	r3, #8
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65a:	e246      	b.n	800faea <UART_SetConfig+0x7ae>
 800f65c:	2310      	movs	r3, #16
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f662:	e242      	b.n	800faea <UART_SetConfig+0x7ae>
 800f664:	cfff69f3 	.word	0xcfff69f3
 800f668:	58000c00 	.word	0x58000c00
 800f66c:	11fff4ff 	.word	0x11fff4ff
 800f670:	40011000 	.word	0x40011000
 800f674:	58024400 	.word	0x58024400
 800f678:	40004400 	.word	0x40004400
 800f67c:	40004800 	.word	0x40004800
 800f680:	40004c00 	.word	0x40004c00
 800f684:	40005000 	.word	0x40005000
 800f688:	2320      	movs	r3, #32
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f68e:	e22c      	b.n	800faea <UART_SetConfig+0x7ae>
 800f690:	2340      	movs	r3, #64	@ 0x40
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f696:	e228      	b.n	800faea <UART_SetConfig+0x7ae>
 800f698:	2380      	movs	r3, #128	@ 0x80
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69e:	e224      	b.n	800faea <UART_SetConfig+0x7ae>
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4ab1      	ldr	r2, [pc, #708]	@ (800f96c <UART_SetConfig+0x630>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d176      	bne.n	800f798 <UART_SetConfig+0x45c>
 800f6aa:	4bb1      	ldr	r3, [pc, #708]	@ (800f970 <UART_SetConfig+0x634>)
 800f6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6b2:	2b28      	cmp	r3, #40	@ 0x28
 800f6b4:	d86c      	bhi.n	800f790 <UART_SetConfig+0x454>
 800f6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6bc <UART_SetConfig+0x380>)
 800f6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6bc:	0800f761 	.word	0x0800f761
 800f6c0:	0800f791 	.word	0x0800f791
 800f6c4:	0800f791 	.word	0x0800f791
 800f6c8:	0800f791 	.word	0x0800f791
 800f6cc:	0800f791 	.word	0x0800f791
 800f6d0:	0800f791 	.word	0x0800f791
 800f6d4:	0800f791 	.word	0x0800f791
 800f6d8:	0800f791 	.word	0x0800f791
 800f6dc:	0800f769 	.word	0x0800f769
 800f6e0:	0800f791 	.word	0x0800f791
 800f6e4:	0800f791 	.word	0x0800f791
 800f6e8:	0800f791 	.word	0x0800f791
 800f6ec:	0800f791 	.word	0x0800f791
 800f6f0:	0800f791 	.word	0x0800f791
 800f6f4:	0800f791 	.word	0x0800f791
 800f6f8:	0800f791 	.word	0x0800f791
 800f6fc:	0800f771 	.word	0x0800f771
 800f700:	0800f791 	.word	0x0800f791
 800f704:	0800f791 	.word	0x0800f791
 800f708:	0800f791 	.word	0x0800f791
 800f70c:	0800f791 	.word	0x0800f791
 800f710:	0800f791 	.word	0x0800f791
 800f714:	0800f791 	.word	0x0800f791
 800f718:	0800f791 	.word	0x0800f791
 800f71c:	0800f779 	.word	0x0800f779
 800f720:	0800f791 	.word	0x0800f791
 800f724:	0800f791 	.word	0x0800f791
 800f728:	0800f791 	.word	0x0800f791
 800f72c:	0800f791 	.word	0x0800f791
 800f730:	0800f791 	.word	0x0800f791
 800f734:	0800f791 	.word	0x0800f791
 800f738:	0800f791 	.word	0x0800f791
 800f73c:	0800f781 	.word	0x0800f781
 800f740:	0800f791 	.word	0x0800f791
 800f744:	0800f791 	.word	0x0800f791
 800f748:	0800f791 	.word	0x0800f791
 800f74c:	0800f791 	.word	0x0800f791
 800f750:	0800f791 	.word	0x0800f791
 800f754:	0800f791 	.word	0x0800f791
 800f758:	0800f791 	.word	0x0800f791
 800f75c:	0800f789 	.word	0x0800f789
 800f760:	2301      	movs	r3, #1
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e1c0      	b.n	800faea <UART_SetConfig+0x7ae>
 800f768:	2304      	movs	r3, #4
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e1bc      	b.n	800faea <UART_SetConfig+0x7ae>
 800f770:	2308      	movs	r3, #8
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f776:	e1b8      	b.n	800faea <UART_SetConfig+0x7ae>
 800f778:	2310      	movs	r3, #16
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77e:	e1b4      	b.n	800faea <UART_SetConfig+0x7ae>
 800f780:	2320      	movs	r3, #32
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e1b0      	b.n	800faea <UART_SetConfig+0x7ae>
 800f788:	2340      	movs	r3, #64	@ 0x40
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78e:	e1ac      	b.n	800faea <UART_SetConfig+0x7ae>
 800f790:	2380      	movs	r3, #128	@ 0x80
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f796:	e1a8      	b.n	800faea <UART_SetConfig+0x7ae>
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a75      	ldr	r2, [pc, #468]	@ (800f974 <UART_SetConfig+0x638>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d130      	bne.n	800f804 <UART_SetConfig+0x4c8>
 800f7a2:	4b73      	ldr	r3, [pc, #460]	@ (800f970 <UART_SetConfig+0x634>)
 800f7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7a6:	f003 0307 	and.w	r3, r3, #7
 800f7aa:	2b05      	cmp	r3, #5
 800f7ac:	d826      	bhi.n	800f7fc <UART_SetConfig+0x4c0>
 800f7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f7b4 <UART_SetConfig+0x478>)
 800f7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b4:	0800f7cd 	.word	0x0800f7cd
 800f7b8:	0800f7d5 	.word	0x0800f7d5
 800f7bc:	0800f7dd 	.word	0x0800f7dd
 800f7c0:	0800f7e5 	.word	0x0800f7e5
 800f7c4:	0800f7ed 	.word	0x0800f7ed
 800f7c8:	0800f7f5 	.word	0x0800f7f5
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d2:	e18a      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7d4:	2304      	movs	r3, #4
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7da:	e186      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7dc:	2308      	movs	r3, #8
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e2:	e182      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7e4:	2310      	movs	r3, #16
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ea:	e17e      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7ec:	2320      	movs	r3, #32
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f2:	e17a      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7f4:	2340      	movs	r3, #64	@ 0x40
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fa:	e176      	b.n	800faea <UART_SetConfig+0x7ae>
 800f7fc:	2380      	movs	r3, #128	@ 0x80
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f802:	e172      	b.n	800faea <UART_SetConfig+0x7ae>
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a5b      	ldr	r2, [pc, #364]	@ (800f978 <UART_SetConfig+0x63c>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d130      	bne.n	800f870 <UART_SetConfig+0x534>
 800f80e:	4b58      	ldr	r3, [pc, #352]	@ (800f970 <UART_SetConfig+0x634>)
 800f810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f812:	f003 0307 	and.w	r3, r3, #7
 800f816:	2b05      	cmp	r3, #5
 800f818:	d826      	bhi.n	800f868 <UART_SetConfig+0x52c>
 800f81a:	a201      	add	r2, pc, #4	@ (adr r2, 800f820 <UART_SetConfig+0x4e4>)
 800f81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f820:	0800f839 	.word	0x0800f839
 800f824:	0800f841 	.word	0x0800f841
 800f828:	0800f849 	.word	0x0800f849
 800f82c:	0800f851 	.word	0x0800f851
 800f830:	0800f859 	.word	0x0800f859
 800f834:	0800f861 	.word	0x0800f861
 800f838:	2300      	movs	r3, #0
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e154      	b.n	800faea <UART_SetConfig+0x7ae>
 800f840:	2304      	movs	r3, #4
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e150      	b.n	800faea <UART_SetConfig+0x7ae>
 800f848:	2308      	movs	r3, #8
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84e:	e14c      	b.n	800faea <UART_SetConfig+0x7ae>
 800f850:	2310      	movs	r3, #16
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f856:	e148      	b.n	800faea <UART_SetConfig+0x7ae>
 800f858:	2320      	movs	r3, #32
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85e:	e144      	b.n	800faea <UART_SetConfig+0x7ae>
 800f860:	2340      	movs	r3, #64	@ 0x40
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f866:	e140      	b.n	800faea <UART_SetConfig+0x7ae>
 800f868:	2380      	movs	r3, #128	@ 0x80
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86e:	e13c      	b.n	800faea <UART_SetConfig+0x7ae>
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a41      	ldr	r2, [pc, #260]	@ (800f97c <UART_SetConfig+0x640>)
 800f876:	4293      	cmp	r3, r2
 800f878:	f040 8082 	bne.w	800f980 <UART_SetConfig+0x644>
 800f87c:	4b3c      	ldr	r3, [pc, #240]	@ (800f970 <UART_SetConfig+0x634>)
 800f87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f880:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f884:	2b28      	cmp	r3, #40	@ 0x28
 800f886:	d86d      	bhi.n	800f964 <UART_SetConfig+0x628>
 800f888:	a201      	add	r2, pc, #4	@ (adr r2, 800f890 <UART_SetConfig+0x554>)
 800f88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f88e:	bf00      	nop
 800f890:	0800f935 	.word	0x0800f935
 800f894:	0800f965 	.word	0x0800f965
 800f898:	0800f965 	.word	0x0800f965
 800f89c:	0800f965 	.word	0x0800f965
 800f8a0:	0800f965 	.word	0x0800f965
 800f8a4:	0800f965 	.word	0x0800f965
 800f8a8:	0800f965 	.word	0x0800f965
 800f8ac:	0800f965 	.word	0x0800f965
 800f8b0:	0800f93d 	.word	0x0800f93d
 800f8b4:	0800f965 	.word	0x0800f965
 800f8b8:	0800f965 	.word	0x0800f965
 800f8bc:	0800f965 	.word	0x0800f965
 800f8c0:	0800f965 	.word	0x0800f965
 800f8c4:	0800f965 	.word	0x0800f965
 800f8c8:	0800f965 	.word	0x0800f965
 800f8cc:	0800f965 	.word	0x0800f965
 800f8d0:	0800f945 	.word	0x0800f945
 800f8d4:	0800f965 	.word	0x0800f965
 800f8d8:	0800f965 	.word	0x0800f965
 800f8dc:	0800f965 	.word	0x0800f965
 800f8e0:	0800f965 	.word	0x0800f965
 800f8e4:	0800f965 	.word	0x0800f965
 800f8e8:	0800f965 	.word	0x0800f965
 800f8ec:	0800f965 	.word	0x0800f965
 800f8f0:	0800f94d 	.word	0x0800f94d
 800f8f4:	0800f965 	.word	0x0800f965
 800f8f8:	0800f965 	.word	0x0800f965
 800f8fc:	0800f965 	.word	0x0800f965
 800f900:	0800f965 	.word	0x0800f965
 800f904:	0800f965 	.word	0x0800f965
 800f908:	0800f965 	.word	0x0800f965
 800f90c:	0800f965 	.word	0x0800f965
 800f910:	0800f955 	.word	0x0800f955
 800f914:	0800f965 	.word	0x0800f965
 800f918:	0800f965 	.word	0x0800f965
 800f91c:	0800f965 	.word	0x0800f965
 800f920:	0800f965 	.word	0x0800f965
 800f924:	0800f965 	.word	0x0800f965
 800f928:	0800f965 	.word	0x0800f965
 800f92c:	0800f965 	.word	0x0800f965
 800f930:	0800f95d 	.word	0x0800f95d
 800f934:	2301      	movs	r3, #1
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93a:	e0d6      	b.n	800faea <UART_SetConfig+0x7ae>
 800f93c:	2304      	movs	r3, #4
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f942:	e0d2      	b.n	800faea <UART_SetConfig+0x7ae>
 800f944:	2308      	movs	r3, #8
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f94a:	e0ce      	b.n	800faea <UART_SetConfig+0x7ae>
 800f94c:	2310      	movs	r3, #16
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f952:	e0ca      	b.n	800faea <UART_SetConfig+0x7ae>
 800f954:	2320      	movs	r3, #32
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95a:	e0c6      	b.n	800faea <UART_SetConfig+0x7ae>
 800f95c:	2340      	movs	r3, #64	@ 0x40
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e0c2      	b.n	800faea <UART_SetConfig+0x7ae>
 800f964:	2380      	movs	r3, #128	@ 0x80
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e0be      	b.n	800faea <UART_SetConfig+0x7ae>
 800f96c:	40011400 	.word	0x40011400
 800f970:	58024400 	.word	0x58024400
 800f974:	40007800 	.word	0x40007800
 800f978:	40007c00 	.word	0x40007c00
 800f97c:	40011800 	.word	0x40011800
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4aad      	ldr	r2, [pc, #692]	@ (800fc3c <UART_SetConfig+0x900>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d176      	bne.n	800fa78 <UART_SetConfig+0x73c>
 800f98a:	4bad      	ldr	r3, [pc, #692]	@ (800fc40 <UART_SetConfig+0x904>)
 800f98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f98e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f992:	2b28      	cmp	r3, #40	@ 0x28
 800f994:	d86c      	bhi.n	800fa70 <UART_SetConfig+0x734>
 800f996:	a201      	add	r2, pc, #4	@ (adr r2, 800f99c <UART_SetConfig+0x660>)
 800f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99c:	0800fa41 	.word	0x0800fa41
 800f9a0:	0800fa71 	.word	0x0800fa71
 800f9a4:	0800fa71 	.word	0x0800fa71
 800f9a8:	0800fa71 	.word	0x0800fa71
 800f9ac:	0800fa71 	.word	0x0800fa71
 800f9b0:	0800fa71 	.word	0x0800fa71
 800f9b4:	0800fa71 	.word	0x0800fa71
 800f9b8:	0800fa71 	.word	0x0800fa71
 800f9bc:	0800fa49 	.word	0x0800fa49
 800f9c0:	0800fa71 	.word	0x0800fa71
 800f9c4:	0800fa71 	.word	0x0800fa71
 800f9c8:	0800fa71 	.word	0x0800fa71
 800f9cc:	0800fa71 	.word	0x0800fa71
 800f9d0:	0800fa71 	.word	0x0800fa71
 800f9d4:	0800fa71 	.word	0x0800fa71
 800f9d8:	0800fa71 	.word	0x0800fa71
 800f9dc:	0800fa51 	.word	0x0800fa51
 800f9e0:	0800fa71 	.word	0x0800fa71
 800f9e4:	0800fa71 	.word	0x0800fa71
 800f9e8:	0800fa71 	.word	0x0800fa71
 800f9ec:	0800fa71 	.word	0x0800fa71
 800f9f0:	0800fa71 	.word	0x0800fa71
 800f9f4:	0800fa71 	.word	0x0800fa71
 800f9f8:	0800fa71 	.word	0x0800fa71
 800f9fc:	0800fa59 	.word	0x0800fa59
 800fa00:	0800fa71 	.word	0x0800fa71
 800fa04:	0800fa71 	.word	0x0800fa71
 800fa08:	0800fa71 	.word	0x0800fa71
 800fa0c:	0800fa71 	.word	0x0800fa71
 800fa10:	0800fa71 	.word	0x0800fa71
 800fa14:	0800fa71 	.word	0x0800fa71
 800fa18:	0800fa71 	.word	0x0800fa71
 800fa1c:	0800fa61 	.word	0x0800fa61
 800fa20:	0800fa71 	.word	0x0800fa71
 800fa24:	0800fa71 	.word	0x0800fa71
 800fa28:	0800fa71 	.word	0x0800fa71
 800fa2c:	0800fa71 	.word	0x0800fa71
 800fa30:	0800fa71 	.word	0x0800fa71
 800fa34:	0800fa71 	.word	0x0800fa71
 800fa38:	0800fa71 	.word	0x0800fa71
 800fa3c:	0800fa69 	.word	0x0800fa69
 800fa40:	2301      	movs	r3, #1
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e050      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa48:	2304      	movs	r3, #4
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e04c      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa50:	2308      	movs	r3, #8
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e048      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa58:	2310      	movs	r3, #16
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5e:	e044      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa60:	2320      	movs	r3, #32
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa66:	e040      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa68:	2340      	movs	r3, #64	@ 0x40
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6e:	e03c      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa70:	2380      	movs	r3, #128	@ 0x80
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa76:	e038      	b.n	800faea <UART_SetConfig+0x7ae>
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a71      	ldr	r2, [pc, #452]	@ (800fc44 <UART_SetConfig+0x908>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d130      	bne.n	800fae4 <UART_SetConfig+0x7a8>
 800fa82:	4b6f      	ldr	r3, [pc, #444]	@ (800fc40 <UART_SetConfig+0x904>)
 800fa84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa86:	f003 0307 	and.w	r3, r3, #7
 800fa8a:	2b05      	cmp	r3, #5
 800fa8c:	d826      	bhi.n	800fadc <UART_SetConfig+0x7a0>
 800fa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa94 <UART_SetConfig+0x758>)
 800fa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa94:	0800faad 	.word	0x0800faad
 800fa98:	0800fab5 	.word	0x0800fab5
 800fa9c:	0800fabd 	.word	0x0800fabd
 800faa0:	0800fac5 	.word	0x0800fac5
 800faa4:	0800facd 	.word	0x0800facd
 800faa8:	0800fad5 	.word	0x0800fad5
 800faac:	2302      	movs	r3, #2
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e01a      	b.n	800faea <UART_SetConfig+0x7ae>
 800fab4:	2304      	movs	r3, #4
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e016      	b.n	800faea <UART_SetConfig+0x7ae>
 800fabc:	2308      	movs	r3, #8
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e012      	b.n	800faea <UART_SetConfig+0x7ae>
 800fac4:	2310      	movs	r3, #16
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e00e      	b.n	800faea <UART_SetConfig+0x7ae>
 800facc:	2320      	movs	r3, #32
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e00a      	b.n	800faea <UART_SetConfig+0x7ae>
 800fad4:	2340      	movs	r3, #64	@ 0x40
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fada:	e006      	b.n	800faea <UART_SetConfig+0x7ae>
 800fadc:	2380      	movs	r3, #128	@ 0x80
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae2:	e002      	b.n	800faea <UART_SetConfig+0x7ae>
 800fae4:	2380      	movs	r3, #128	@ 0x80
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a55      	ldr	r2, [pc, #340]	@ (800fc44 <UART_SetConfig+0x908>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	f040 80f8 	bne.w	800fce6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800faf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fafa:	2b20      	cmp	r3, #32
 800fafc:	dc46      	bgt.n	800fb8c <UART_SetConfig+0x850>
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	db75      	blt.n	800fbee <UART_SetConfig+0x8b2>
 800fb02:	3b02      	subs	r3, #2
 800fb04:	2b1e      	cmp	r3, #30
 800fb06:	d872      	bhi.n	800fbee <UART_SetConfig+0x8b2>
 800fb08:	a201      	add	r2, pc, #4	@ (adr r2, 800fb10 <UART_SetConfig+0x7d4>)
 800fb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0e:	bf00      	nop
 800fb10:	0800fb93 	.word	0x0800fb93
 800fb14:	0800fbef 	.word	0x0800fbef
 800fb18:	0800fb9b 	.word	0x0800fb9b
 800fb1c:	0800fbef 	.word	0x0800fbef
 800fb20:	0800fbef 	.word	0x0800fbef
 800fb24:	0800fbef 	.word	0x0800fbef
 800fb28:	0800fbab 	.word	0x0800fbab
 800fb2c:	0800fbef 	.word	0x0800fbef
 800fb30:	0800fbef 	.word	0x0800fbef
 800fb34:	0800fbef 	.word	0x0800fbef
 800fb38:	0800fbef 	.word	0x0800fbef
 800fb3c:	0800fbef 	.word	0x0800fbef
 800fb40:	0800fbef 	.word	0x0800fbef
 800fb44:	0800fbef 	.word	0x0800fbef
 800fb48:	0800fbbb 	.word	0x0800fbbb
 800fb4c:	0800fbef 	.word	0x0800fbef
 800fb50:	0800fbef 	.word	0x0800fbef
 800fb54:	0800fbef 	.word	0x0800fbef
 800fb58:	0800fbef 	.word	0x0800fbef
 800fb5c:	0800fbef 	.word	0x0800fbef
 800fb60:	0800fbef 	.word	0x0800fbef
 800fb64:	0800fbef 	.word	0x0800fbef
 800fb68:	0800fbef 	.word	0x0800fbef
 800fb6c:	0800fbef 	.word	0x0800fbef
 800fb70:	0800fbef 	.word	0x0800fbef
 800fb74:	0800fbef 	.word	0x0800fbef
 800fb78:	0800fbef 	.word	0x0800fbef
 800fb7c:	0800fbef 	.word	0x0800fbef
 800fb80:	0800fbef 	.word	0x0800fbef
 800fb84:	0800fbef 	.word	0x0800fbef
 800fb88:	0800fbe1 	.word	0x0800fbe1
 800fb8c:	2b40      	cmp	r3, #64	@ 0x40
 800fb8e:	d02a      	beq.n	800fbe6 <UART_SetConfig+0x8aa>
 800fb90:	e02d      	b.n	800fbee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb92:	f7fb fe59 	bl	800b848 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fb98:	e02f      	b.n	800fbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fb fe68 	bl	800b874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fba8:	e027      	b.n	800fbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbaa:	f107 0318 	add.w	r3, r7, #24
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fb ffb4 	bl	800bb1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbb8:	e01f      	b.n	800fbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbba:	4b21      	ldr	r3, [pc, #132]	@ (800fc40 <UART_SetConfig+0x904>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f003 0320 	and.w	r3, r3, #32
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbc6:	4b1e      	ldr	r3, [pc, #120]	@ (800fc40 <UART_SetConfig+0x904>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	08db      	lsrs	r3, r3, #3
 800fbcc:	f003 0303 	and.w	r3, r3, #3
 800fbd0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc48 <UART_SetConfig+0x90c>)
 800fbd2:	fa22 f303 	lsr.w	r3, r2, r3
 800fbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fbd8:	e00f      	b.n	800fbfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fbda:	4b1b      	ldr	r3, [pc, #108]	@ (800fc48 <UART_SetConfig+0x90c>)
 800fbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbde:	e00c      	b.n	800fbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbe0:	4b1a      	ldr	r3, [pc, #104]	@ (800fc4c <UART_SetConfig+0x910>)
 800fbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe4:	e009      	b.n	800fbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbec:	e005      	b.n	800fbfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fbf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 81ee 	beq.w	800ffde <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc06:	4a12      	ldr	r2, [pc, #72]	@ (800fc50 <UART_SetConfig+0x914>)
 800fc08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc10:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc14:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	685a      	ldr	r2, [r3, #4]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	4413      	add	r3, r2
 800fc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d305      	bcc.n	800fc32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d910      	bls.n	800fc54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc38:	e1d1      	b.n	800ffde <UART_SetConfig+0xca2>
 800fc3a:	bf00      	nop
 800fc3c:	40011c00 	.word	0x40011c00
 800fc40:	58024400 	.word	0x58024400
 800fc44:	58000c00 	.word	0x58000c00
 800fc48:	03d09000 	.word	0x03d09000
 800fc4c:	003d0900 	.word	0x003d0900
 800fc50:	080188ac 	.word	0x080188ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc56:	2200      	movs	r2, #0
 800fc58:	60bb      	str	r3, [r7, #8]
 800fc5a:	60fa      	str	r2, [r7, #12]
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc60:	4ac0      	ldr	r2, [pc, #768]	@ (800ff64 <UART_SetConfig+0xc28>)
 800fc62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	2200      	movs	r2, #0
 800fc6a:	603b      	str	r3, [r7, #0]
 800fc6c:	607a      	str	r2, [r7, #4]
 800fc6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc76:	f7f0 fda7 	bl	80007c8 <__aeabi_uldivmod>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4610      	mov	r0, r2
 800fc80:	4619      	mov	r1, r3
 800fc82:	f04f 0200 	mov.w	r2, #0
 800fc86:	f04f 0300 	mov.w	r3, #0
 800fc8a:	020b      	lsls	r3, r1, #8
 800fc8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc90:	0202      	lsls	r2, r0, #8
 800fc92:	6979      	ldr	r1, [r7, #20]
 800fc94:	6849      	ldr	r1, [r1, #4]
 800fc96:	0849      	lsrs	r1, r1, #1
 800fc98:	2000      	movs	r0, #0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	eb12 0804 	adds.w	r8, r2, r4
 800fca2:	eb43 0905 	adc.w	r9, r3, r5
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	469a      	mov	sl, r3
 800fcae:	4693      	mov	fp, r2
 800fcb0:	4652      	mov	r2, sl
 800fcb2:	465b      	mov	r3, fp
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	f7f0 fd86 	bl	80007c8 <__aeabi_uldivmod>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fcca:	d308      	bcc.n	800fcde <UART_SetConfig+0x9a2>
 800fccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fcd2:	d204      	bcs.n	800fcde <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcda:	60da      	str	r2, [r3, #12]
 800fcdc:	e17f      	b.n	800ffde <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fce4:	e17b      	b.n	800ffde <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcee:	f040 80bd 	bne.w	800fe6c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fcf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fcf6:	2b20      	cmp	r3, #32
 800fcf8:	dc48      	bgt.n	800fd8c <UART_SetConfig+0xa50>
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	db7b      	blt.n	800fdf6 <UART_SetConfig+0xaba>
 800fcfe:	2b20      	cmp	r3, #32
 800fd00:	d879      	bhi.n	800fdf6 <UART_SetConfig+0xaba>
 800fd02:	a201      	add	r2, pc, #4	@ (adr r2, 800fd08 <UART_SetConfig+0x9cc>)
 800fd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd08:	0800fd93 	.word	0x0800fd93
 800fd0c:	0800fd9b 	.word	0x0800fd9b
 800fd10:	0800fdf7 	.word	0x0800fdf7
 800fd14:	0800fdf7 	.word	0x0800fdf7
 800fd18:	0800fda3 	.word	0x0800fda3
 800fd1c:	0800fdf7 	.word	0x0800fdf7
 800fd20:	0800fdf7 	.word	0x0800fdf7
 800fd24:	0800fdf7 	.word	0x0800fdf7
 800fd28:	0800fdb3 	.word	0x0800fdb3
 800fd2c:	0800fdf7 	.word	0x0800fdf7
 800fd30:	0800fdf7 	.word	0x0800fdf7
 800fd34:	0800fdf7 	.word	0x0800fdf7
 800fd38:	0800fdf7 	.word	0x0800fdf7
 800fd3c:	0800fdf7 	.word	0x0800fdf7
 800fd40:	0800fdf7 	.word	0x0800fdf7
 800fd44:	0800fdf7 	.word	0x0800fdf7
 800fd48:	0800fdc3 	.word	0x0800fdc3
 800fd4c:	0800fdf7 	.word	0x0800fdf7
 800fd50:	0800fdf7 	.word	0x0800fdf7
 800fd54:	0800fdf7 	.word	0x0800fdf7
 800fd58:	0800fdf7 	.word	0x0800fdf7
 800fd5c:	0800fdf7 	.word	0x0800fdf7
 800fd60:	0800fdf7 	.word	0x0800fdf7
 800fd64:	0800fdf7 	.word	0x0800fdf7
 800fd68:	0800fdf7 	.word	0x0800fdf7
 800fd6c:	0800fdf7 	.word	0x0800fdf7
 800fd70:	0800fdf7 	.word	0x0800fdf7
 800fd74:	0800fdf7 	.word	0x0800fdf7
 800fd78:	0800fdf7 	.word	0x0800fdf7
 800fd7c:	0800fdf7 	.word	0x0800fdf7
 800fd80:	0800fdf7 	.word	0x0800fdf7
 800fd84:	0800fdf7 	.word	0x0800fdf7
 800fd88:	0800fde9 	.word	0x0800fde9
 800fd8c:	2b40      	cmp	r3, #64	@ 0x40
 800fd8e:	d02e      	beq.n	800fdee <UART_SetConfig+0xab2>
 800fd90:	e031      	b.n	800fdf6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd92:	f7fa fb6f 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 800fd96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd98:	e033      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd9a:	f7fa fb81 	bl	800a4a0 <HAL_RCC_GetPCLK2Freq>
 800fd9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fda0:	e02f      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fda2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fb fd64 	bl	800b874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdb0:	e027      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdb2:	f107 0318 	add.w	r3, r7, #24
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fb feb0 	bl	800bb1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdc0:	e01f      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdc2:	4b69      	ldr	r3, [pc, #420]	@ (800ff68 <UART_SetConfig+0xc2c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f003 0320 	and.w	r3, r3, #32
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d009      	beq.n	800fde2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdce:	4b66      	ldr	r3, [pc, #408]	@ (800ff68 <UART_SetConfig+0xc2c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	08db      	lsrs	r3, r3, #3
 800fdd4:	f003 0303 	and.w	r3, r3, #3
 800fdd8:	4a64      	ldr	r2, [pc, #400]	@ (800ff6c <UART_SetConfig+0xc30>)
 800fdda:	fa22 f303 	lsr.w	r3, r2, r3
 800fdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fde0:	e00f      	b.n	800fe02 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fde2:	4b62      	ldr	r3, [pc, #392]	@ (800ff6c <UART_SetConfig+0xc30>)
 800fde4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde6:	e00c      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fde8:	4b61      	ldr	r3, [pc, #388]	@ (800ff70 <UART_SetConfig+0xc34>)
 800fdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdec:	e009      	b.n	800fe02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdf4:	e005      	b.n	800fe02 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80ea 	beq.w	800ffde <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe0e:	4a55      	ldr	r2, [pc, #340]	@ (800ff64 <UART_SetConfig+0xc28>)
 800fe10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe14:	461a      	mov	r2, r3
 800fe16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe18:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe1c:	005a      	lsls	r2, r3, #1
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	085b      	lsrs	r3, r3, #1
 800fe24:	441a      	add	r2, r3
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe32:	2b0f      	cmp	r3, #15
 800fe34:	d916      	bls.n	800fe64 <UART_SetConfig+0xb28>
 800fe36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe3c:	d212      	bcs.n	800fe64 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	f023 030f 	bic.w	r3, r3, #15
 800fe46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe4a:	085b      	lsrs	r3, r3, #1
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f003 0307 	and.w	r3, r3, #7
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe56:	4313      	orrs	r3, r2
 800fe58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fe60:	60da      	str	r2, [r3, #12]
 800fe62:	e0bc      	b.n	800ffde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe64:	2301      	movs	r3, #1
 800fe66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe6a:	e0b8      	b.n	800ffde <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe70:	2b20      	cmp	r3, #32
 800fe72:	dc4b      	bgt.n	800ff0c <UART_SetConfig+0xbd0>
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f2c0 8087 	blt.w	800ff88 <UART_SetConfig+0xc4c>
 800fe7a:	2b20      	cmp	r3, #32
 800fe7c:	f200 8084 	bhi.w	800ff88 <UART_SetConfig+0xc4c>
 800fe80:	a201      	add	r2, pc, #4	@ (adr r2, 800fe88 <UART_SetConfig+0xb4c>)
 800fe82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe86:	bf00      	nop
 800fe88:	0800ff13 	.word	0x0800ff13
 800fe8c:	0800ff1b 	.word	0x0800ff1b
 800fe90:	0800ff89 	.word	0x0800ff89
 800fe94:	0800ff89 	.word	0x0800ff89
 800fe98:	0800ff23 	.word	0x0800ff23
 800fe9c:	0800ff89 	.word	0x0800ff89
 800fea0:	0800ff89 	.word	0x0800ff89
 800fea4:	0800ff89 	.word	0x0800ff89
 800fea8:	0800ff33 	.word	0x0800ff33
 800feac:	0800ff89 	.word	0x0800ff89
 800feb0:	0800ff89 	.word	0x0800ff89
 800feb4:	0800ff89 	.word	0x0800ff89
 800feb8:	0800ff89 	.word	0x0800ff89
 800febc:	0800ff89 	.word	0x0800ff89
 800fec0:	0800ff89 	.word	0x0800ff89
 800fec4:	0800ff89 	.word	0x0800ff89
 800fec8:	0800ff43 	.word	0x0800ff43
 800fecc:	0800ff89 	.word	0x0800ff89
 800fed0:	0800ff89 	.word	0x0800ff89
 800fed4:	0800ff89 	.word	0x0800ff89
 800fed8:	0800ff89 	.word	0x0800ff89
 800fedc:	0800ff89 	.word	0x0800ff89
 800fee0:	0800ff89 	.word	0x0800ff89
 800fee4:	0800ff89 	.word	0x0800ff89
 800fee8:	0800ff89 	.word	0x0800ff89
 800feec:	0800ff89 	.word	0x0800ff89
 800fef0:	0800ff89 	.word	0x0800ff89
 800fef4:	0800ff89 	.word	0x0800ff89
 800fef8:	0800ff89 	.word	0x0800ff89
 800fefc:	0800ff89 	.word	0x0800ff89
 800ff00:	0800ff89 	.word	0x0800ff89
 800ff04:	0800ff89 	.word	0x0800ff89
 800ff08:	0800ff7b 	.word	0x0800ff7b
 800ff0c:	2b40      	cmp	r3, #64	@ 0x40
 800ff0e:	d037      	beq.n	800ff80 <UART_SetConfig+0xc44>
 800ff10:	e03a      	b.n	800ff88 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff12:	f7fa faaf 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 800ff16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff18:	e03c      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff1a:	f7fa fac1 	bl	800a4a0 <HAL_RCC_GetPCLK2Freq>
 800ff1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff20:	e038      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb fca4 	bl	800b874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff30:	e030      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff32:	f107 0318 	add.w	r3, r7, #24
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fb fdf0 	bl	800bb1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff40:	e028      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff42:	4b09      	ldr	r3, [pc, #36]	@ (800ff68 <UART_SetConfig+0xc2c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f003 0320 	and.w	r3, r3, #32
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d012      	beq.n	800ff74 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff4e:	4b06      	ldr	r3, [pc, #24]	@ (800ff68 <UART_SetConfig+0xc2c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	08db      	lsrs	r3, r3, #3
 800ff54:	f003 0303 	and.w	r3, r3, #3
 800ff58:	4a04      	ldr	r2, [pc, #16]	@ (800ff6c <UART_SetConfig+0xc30>)
 800ff5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff60:	e018      	b.n	800ff94 <UART_SetConfig+0xc58>
 800ff62:	bf00      	nop
 800ff64:	080188ac 	.word	0x080188ac
 800ff68:	58024400 	.word	0x58024400
 800ff6c:	03d09000 	.word	0x03d09000
 800ff70:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff74:	4b24      	ldr	r3, [pc, #144]	@ (8010008 <UART_SetConfig+0xccc>)
 800ff76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff78:	e00c      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff7a:	4b24      	ldr	r3, [pc, #144]	@ (801000c <UART_SetConfig+0xcd0>)
 800ff7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff7e:	e009      	b.n	800ff94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff86:	e005      	b.n	800ff94 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff92:	bf00      	nop
    }

    if (pclk != 0U)
 800ff94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d021      	beq.n	800ffde <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff9e:	4a1c      	ldr	r2, [pc, #112]	@ (8010010 <UART_SetConfig+0xcd4>)
 800ffa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa8:	fbb3 f2f2 	udiv	r2, r3, r2
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	085b      	lsrs	r3, r3, #1
 800ffb2:	441a      	add	r2, r3
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc0:	2b0f      	cmp	r3, #15
 800ffc2:	d909      	bls.n	800ffd8 <UART_SetConfig+0xc9c>
 800ffc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffca:	d205      	bcs.n	800ffd8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ffcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60da      	str	r2, [r3, #12]
 800ffd6:	e002      	b.n	800ffde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	2200      	movs	r2, #0
 800fff2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	2200      	movs	r2, #0
 800fff8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fffa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3748      	adds	r7, #72	@ 0x48
 8010002:	46bd      	mov	sp, r7
 8010004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010008:	03d09000 	.word	0x03d09000
 801000c:	003d0900 	.word	0x003d0900
 8010010:	080188ac 	.word	0x080188ac

08010014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010020:	f003 0308 	and.w	r3, r3, #8
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00a      	beq.n	801003e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	430a      	orrs	r2, r1
 801003c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010042:	f003 0301 	and.w	r3, r3, #1
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00a      	beq.n	8010060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	430a      	orrs	r2, r1
 801005e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010064:	f003 0302 	and.w	r3, r3, #2
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00a      	beq.n	8010082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	430a      	orrs	r2, r1
 8010080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010086:	f003 0304 	and.w	r3, r3, #4
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00a      	beq.n	80100a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	430a      	orrs	r2, r1
 80100a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100a8:	f003 0310 	and.w	r3, r3, #16
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00a      	beq.n	80100c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	430a      	orrs	r2, r1
 80100c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ca:	f003 0320 	and.w	r3, r3, #32
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00a      	beq.n	80100e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	430a      	orrs	r2, r1
 80100e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d01a      	beq.n	801012a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	430a      	orrs	r2, r1
 8010108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801010e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010112:	d10a      	bne.n	801012a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	430a      	orrs	r2, r1
 8010128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801012e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00a      	beq.n	801014c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	430a      	orrs	r2, r1
 801014a:	605a      	str	r2, [r3, #4]
  }
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b098      	sub	sp, #96	@ 0x60
 801015c:	af02      	add	r7, sp, #8
 801015e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010168:	f7f5 fab4 	bl	80056d4 <HAL_GetTick>
 801016c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f003 0308 	and.w	r3, r3, #8
 8010178:	2b08      	cmp	r3, #8
 801017a:	d12f      	bne.n	80101dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801017c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010184:	2200      	movs	r2, #0
 8010186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 f88e 	bl	80102ac <UART_WaitOnFlagUntilTimeout>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d022      	beq.n	80101dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80101a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	461a      	mov	r2, r3
 80101b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80101b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80101ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101bc:	e841 2300 	strex	r3, r2, [r1]
 80101c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80101c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1e6      	bne.n	8010196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2220      	movs	r2, #32
 80101cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101d8:	2303      	movs	r3, #3
 80101da:	e063      	b.n	80102a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f003 0304 	and.w	r3, r3, #4
 80101e6:	2b04      	cmp	r3, #4
 80101e8:	d149      	bne.n	801027e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101f2:	2200      	movs	r2, #0
 80101f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f857 	bl	80102ac <UART_WaitOnFlagUntilTimeout>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d03c      	beq.n	801027e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020c:	e853 3f00 	ldrex	r3, [r3]
 8010210:	623b      	str	r3, [r7, #32]
   return(result);
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	461a      	mov	r2, r3
 8010220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010222:	633b      	str	r3, [r7, #48]	@ 0x30
 8010224:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801022a:	e841 2300 	strex	r3, r2, [r1]
 801022e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1e6      	bne.n	8010204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3308      	adds	r3, #8
 801023c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	e853 3f00 	ldrex	r3, [r3]
 8010244:	60fb      	str	r3, [r7, #12]
   return(result);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f023 0301 	bic.w	r3, r3, #1
 801024c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3308      	adds	r3, #8
 8010254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010256:	61fa      	str	r2, [r7, #28]
 8010258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025a:	69b9      	ldr	r1, [r7, #24]
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	e841 2300 	strex	r3, r2, [r1]
 8010262:	617b      	str	r3, [r7, #20]
   return(result);
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1e5      	bne.n	8010236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2220      	movs	r2, #32
 801026e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801027a:	2303      	movs	r3, #3
 801027c:	e012      	b.n	80102a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2220      	movs	r2, #32
 8010282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2220      	movs	r2, #32
 801028a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3758      	adds	r7, #88	@ 0x58
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	603b      	str	r3, [r7, #0]
 80102b8:	4613      	mov	r3, r2
 80102ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102bc:	e04f      	b.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c4:	d04b      	beq.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102c6:	f7f5 fa05 	bl	80056d4 <HAL_GetTick>
 80102ca:	4602      	mov	r2, r0
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d302      	bcc.n	80102dc <UART_WaitOnFlagUntilTimeout+0x30>
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80102dc:	2303      	movs	r3, #3
 80102de:	e04e      	b.n	801037e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d037      	beq.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	2b80      	cmp	r3, #128	@ 0x80
 80102f2:	d034      	beq.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2b40      	cmp	r3, #64	@ 0x40
 80102f8:	d031      	beq.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	69db      	ldr	r3, [r3, #28]
 8010300:	f003 0308 	and.w	r3, r3, #8
 8010304:	2b08      	cmp	r3, #8
 8010306:	d110      	bne.n	801032a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2208      	movs	r2, #8
 801030e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f000 f921 	bl	8010558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2208      	movs	r2, #8
 801031a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	e029      	b.n	801037e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010338:	d111      	bne.n	801035e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f000 f907 	bl	8010558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2220      	movs	r2, #32
 801034e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801035a:	2303      	movs	r3, #3
 801035c:	e00f      	b.n	801037e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	69da      	ldr	r2, [r3, #28]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	4013      	ands	r3, r2
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	429a      	cmp	r2, r3
 801036c:	bf0c      	ite	eq
 801036e:	2301      	moveq	r3, #1
 8010370:	2300      	movne	r3, #0
 8010372:	b2db      	uxtb	r3, r3
 8010374:	461a      	mov	r2, r3
 8010376:	79fb      	ldrb	r3, [r7, #7]
 8010378:	429a      	cmp	r2, r3
 801037a:	d0a0      	beq.n	80102be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b096      	sub	sp, #88	@ 0x58
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	4613      	mov	r3, r2
 8010394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	88fa      	ldrh	r2, [r7, #6]
 80103a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2222      	movs	r2, #34	@ 0x22
 80103b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d02d      	beq.n	801041a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103c4:	4a40      	ldr	r2, [pc, #256]	@ (80104c8 <UART_Start_Receive_DMA+0x140>)
 80103c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ce:	4a3f      	ldr	r2, [pc, #252]	@ (80104cc <UART_Start_Receive_DMA+0x144>)
 80103d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d8:	4a3d      	ldr	r2, [pc, #244]	@ (80104d0 <UART_Start_Receive_DMA+0x148>)
 80103da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e2:	2200      	movs	r2, #0
 80103e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3324      	adds	r3, #36	@ 0x24
 80103f2:	4619      	mov	r1, r3
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103f8:	461a      	mov	r2, r3
 80103fa:	88fb      	ldrh	r3, [r7, #6]
 80103fc:	f7f5 feb0 	bl	8006160 <HAL_DMA_Start_IT>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d009      	beq.n	801041a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2210      	movs	r2, #16
 801040a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2220      	movs	r2, #32
 8010412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010416:	2301      	movs	r3, #1
 8010418:	e051      	b.n	80104be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	691b      	ldr	r3, [r3, #16]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d018      	beq.n	8010454 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801042a:	e853 3f00 	ldrex	r3, [r3]
 801042e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010436:	657b      	str	r3, [r7, #84]	@ 0x54
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010442:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801044e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e6      	bne.n	8010422 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	3308      	adds	r3, #8
 801045a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045e:	e853 3f00 	ldrex	r3, [r3]
 8010462:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010466:	f043 0301 	orr.w	r3, r3, #1
 801046a:	653b      	str	r3, [r7, #80]	@ 0x50
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3308      	adds	r3, #8
 8010472:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010474:	637a      	str	r2, [r7, #52]	@ 0x34
 8010476:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010478:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801047a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801047c:	e841 2300 	strex	r3, r2, [r1]
 8010480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e5      	bne.n	8010454 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	e853 3f00 	ldrex	r3, [r3]
 8010496:	613b      	str	r3, [r7, #16]
   return(result);
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801049e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3308      	adds	r3, #8
 80104a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80104a8:	623a      	str	r2, [r7, #32]
 80104aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	6a3a      	ldr	r2, [r7, #32]
 80104b0:	e841 2300 	strex	r3, r2, [r1]
 80104b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e5      	bne.n	8010488 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3758      	adds	r7, #88	@ 0x58
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	08010625 	.word	0x08010625
 80104cc:	0801074d 	.word	0x0801074d
 80104d0:	0801078b 	.word	0x0801078b

080104d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b08f      	sub	sp, #60	@ 0x3c
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	e853 3f00 	ldrex	r3, [r3]
 80104e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80104f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1e6      	bne.n	80104dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3308      	adds	r3, #8
 8010514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	e853 3f00 	ldrex	r3, [r3]
 801051c:	60bb      	str	r3, [r7, #8]
   return(result);
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010524:	633b      	str	r3, [r7, #48]	@ 0x30
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3308      	adds	r3, #8
 801052c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801052e:	61ba      	str	r2, [r7, #24]
 8010530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010532:	6979      	ldr	r1, [r7, #20]
 8010534:	69ba      	ldr	r2, [r7, #24]
 8010536:	e841 2300 	strex	r3, r2, [r1]
 801053a:	613b      	str	r3, [r7, #16]
   return(result);
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1e5      	bne.n	801050e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2220      	movs	r2, #32
 8010546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801054a:	bf00      	nop
 801054c:	373c      	adds	r7, #60	@ 0x3c
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
	...

08010558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010558:	b480      	push	{r7}
 801055a:	b095      	sub	sp, #84	@ 0x54
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010568:	e853 3f00 	ldrex	r3, [r3]
 801056c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801056e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801057e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010580:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801058c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e6      	bne.n	8010560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80105a2:	69fa      	ldr	r2, [r7, #28]
 80105a4:	4b1e      	ldr	r3, [pc, #120]	@ (8010620 <UART_EndRxTransfer+0xc8>)
 80105a6:	4013      	ands	r3, r2
 80105a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	3308      	adds	r3, #8
 80105b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80105b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105ba:	e841 2300 	strex	r3, r2, [r1]
 80105be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d1e5      	bne.n	8010592 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d118      	bne.n	8010600 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	e853 3f00 	ldrex	r3, [r3]
 80105da:	60bb      	str	r3, [r7, #8]
   return(result);
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	f023 0310 	bic.w	r3, r3, #16
 80105e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	461a      	mov	r2, r3
 80105ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105ec:	61bb      	str	r3, [r7, #24]
 80105ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f0:	6979      	ldr	r1, [r7, #20]
 80105f2:	69ba      	ldr	r2, [r7, #24]
 80105f4:	e841 2300 	strex	r3, r2, [r1]
 80105f8:	613b      	str	r3, [r7, #16]
   return(result);
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1e6      	bne.n	80105ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2220      	movs	r2, #32
 8010604:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010614:	bf00      	nop
 8010616:	3754      	adds	r7, #84	@ 0x54
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	effffffe 	.word	0xeffffffe

08010624 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b09c      	sub	sp, #112	@ 0x70
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010630:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	69db      	ldr	r3, [r3, #28]
 8010636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801063a:	d071      	beq.n	8010720 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801063c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801063e:	2200      	movs	r2, #0
 8010640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801064c:	e853 3f00 	ldrex	r3, [r3]
 8010650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010658:	66bb      	str	r3, [r7, #104]	@ 0x68
 801065a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010662:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010664:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801066a:	e841 2300 	strex	r3, r2, [r1]
 801066e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1e6      	bne.n	8010644 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	3308      	adds	r3, #8
 801067c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010680:	e853 3f00 	ldrex	r3, [r3]
 8010684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010688:	f023 0301 	bic.w	r3, r3, #1
 801068c:	667b      	str	r3, [r7, #100]	@ 0x64
 801068e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010696:	647a      	str	r2, [r7, #68]	@ 0x44
 8010698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801069c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801069e:	e841 2300 	strex	r3, r2, [r1]
 80106a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80106a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d1e5      	bne.n	8010676 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	3308      	adds	r3, #8
 80106b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b4:	e853 3f00 	ldrex	r3, [r3]
 80106b8:	623b      	str	r3, [r7, #32]
   return(result);
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80106c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80106c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3308      	adds	r3, #8
 80106c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80106ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80106cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106d2:	e841 2300 	strex	r3, r2, [r1]
 80106d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1e5      	bne.n	80106aa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80106de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e0:	2220      	movs	r2, #32
 80106e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d118      	bne.n	8010720 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	e853 3f00 	ldrex	r3, [r3]
 80106fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f023 0310 	bic.w	r3, r3, #16
 8010702:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	461a      	mov	r2, r3
 801070a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801070c:	61fb      	str	r3, [r7, #28]
 801070e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010710:	69b9      	ldr	r1, [r7, #24]
 8010712:	69fa      	ldr	r2, [r7, #28]
 8010714:	e841 2300 	strex	r3, r2, [r1]
 8010718:	617b      	str	r3, [r7, #20]
   return(result);
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1e6      	bne.n	80106ee <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010722:	2200      	movs	r2, #0
 8010724:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801072a:	2b01      	cmp	r3, #1
 801072c:	d107      	bne.n	801073e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801072e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010734:	4619      	mov	r1, r3
 8010736:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010738:	f7fe fdf4 	bl	800f324 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801073c:	e002      	b.n	8010744 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801073e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010740:	f7f3 fc96 	bl	8004070 <HAL_UART_RxCpltCallback>
}
 8010744:	bf00      	nop
 8010746:	3770      	adds	r7, #112	@ 0x70
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010758:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010764:	2b01      	cmp	r3, #1
 8010766:	d109      	bne.n	801077c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801076e:	085b      	lsrs	r3, r3, #1
 8010770:	b29b      	uxth	r3, r3
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7fe fdd5 	bl	800f324 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801077a:	e002      	b.n	8010782 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7fe fdb3 	bl	800f2e8 <HAL_UART_RxHalfCpltCallback>
}
 8010782:	bf00      	nop
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b086      	sub	sp, #24
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010796:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801079e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	689b      	ldr	r3, [r3, #8]
 80107ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107b2:	2b80      	cmp	r3, #128	@ 0x80
 80107b4:	d109      	bne.n	80107ca <UART_DMAError+0x40>
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	2b21      	cmp	r3, #33	@ 0x21
 80107ba:	d106      	bne.n	80107ca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2200      	movs	r2, #0
 80107c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80107c4:	6978      	ldr	r0, [r7, #20]
 80107c6:	f7ff fe85 	bl	80104d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107d4:	2b40      	cmp	r3, #64	@ 0x40
 80107d6:	d109      	bne.n	80107ec <UART_DMAError+0x62>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2b22      	cmp	r3, #34	@ 0x22
 80107dc:	d106      	bne.n	80107ec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f7ff feb6 	bl	8010558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107f2:	f043 0210 	orr.w	r2, r3, #16
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107fc:	6978      	ldr	r0, [r7, #20]
 80107fe:	f7fe fd7d 	bl	800f2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010802:	bf00      	nop
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801080a:	b580      	push	{r7, lr}
 801080c:	b084      	sub	sp, #16
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f7fe fd67 	bl	800f2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801082e:	bf00      	nop
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010842:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010848:	2200      	movs	r2, #0
 801084a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010852:	2b00      	cmp	r3, #0
 8010854:	d005      	beq.n	8010862 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801085c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801085e:	2b00      	cmp	r3, #0
 8010860:	d12b      	bne.n	80108ba <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2200      	movs	r2, #0
 8010876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	220f      	movs	r2, #15
 8010880:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801088a:	d107      	bne.n	801089c <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	699a      	ldr	r2, [r3, #24]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f042 0210 	orr.w	r2, r2, #16
 801089a:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2220      	movs	r2, #32
 80108a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2220      	movs	r2, #32
 80108a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2200      	movs	r2, #0
 80108b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7fe fd2c 	bl	800f310 <HAL_UART_AbortCpltCallback>
 80108b8:	e000      	b.n	80108bc <UART_DMATxAbortCallback+0x86>
      return;
 80108ba:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b084      	sub	sp, #16
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ce:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108d6:	2200      	movs	r2, #0
 80108d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d004      	beq.n	80108ec <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d126      	bne.n	801093a <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	220f      	movs	r2, #15
 801090a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	699a      	ldr	r2, [r3, #24]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f042 0208 	orr.w	r2, r2, #8
 801091a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2220      	movs	r2, #32
 8010920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2220      	movs	r2, #32
 8010928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2200      	movs	r2, #0
 8010930:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	f7fe fcec 	bl	800f310 <HAL_UART_AbortCpltCallback>
 8010938:	e000      	b.n	801093c <UART_DMARxAbortCallback+0x7a>
      return;
 801093a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b088      	sub	sp, #32
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	e853 3f00 	ldrex	r3, [r3]
 8010956:	60bb      	str	r3, [r7, #8]
   return(result);
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801095e:	61fb      	str	r3, [r7, #28]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	461a      	mov	r2, r3
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	61bb      	str	r3, [r7, #24]
 801096a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096c:	6979      	ldr	r1, [r7, #20]
 801096e:	69ba      	ldr	r2, [r7, #24]
 8010970:	e841 2300 	strex	r3, r2, [r1]
 8010974:	613b      	str	r3, [r7, #16]
   return(result);
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1e6      	bne.n	801094a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2220      	movs	r2, #32
 8010980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fe fca2 	bl	800f2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010990:	bf00      	nop
 8010992:	3720      	adds	r7, #32
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80109a0:	bf00      	nop
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80109b4:	bf00      	nop
 80109b6:	370c      	adds	r7, #12
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b083      	sub	sp, #12
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80109c8:	bf00      	nop
 80109ca:	370c      	adds	r7, #12
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d101      	bne.n	80109ea <HAL_UARTEx_DisableFifoMode+0x16>
 80109e6:	2302      	movs	r3, #2
 80109e8:	e027      	b.n	8010a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2224      	movs	r2, #36	@ 0x24
 80109f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f022 0201 	bic.w	r2, r2, #1
 8010a10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2220      	movs	r2, #32
 8010a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3714      	adds	r7, #20
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b084      	sub	sp, #16
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d101      	bne.n	8010a5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a5a:	2302      	movs	r3, #2
 8010a5c:	e02d      	b.n	8010aba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2201      	movs	r2, #1
 8010a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2224      	movs	r2, #36	@ 0x24
 8010a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f022 0201 	bic.w	r2, r2, #1
 8010a84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	430a      	orrs	r2, r1
 8010a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f850 	bl	8010b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d101      	bne.n	8010ada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	e02d      	b.n	8010b36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2201      	movs	r2, #1
 8010ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2224      	movs	r2, #36	@ 0x24
 8010ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681a      	ldr	r2, [r3, #0]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f022 0201 	bic.w	r2, r2, #1
 8010b00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	430a      	orrs	r2, r1
 8010b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f000 f812 	bl	8010b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2220      	movs	r2, #32
 8010b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
	...

08010b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d108      	bne.n	8010b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2201      	movs	r2, #1
 8010b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b60:	e031      	b.n	8010bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b62:	2310      	movs	r3, #16
 8010b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b66:	2310      	movs	r3, #16
 8010b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	0e5b      	lsrs	r3, r3, #25
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	f003 0307 	and.w	r3, r3, #7
 8010b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	689b      	ldr	r3, [r3, #8]
 8010b80:	0f5b      	lsrs	r3, r3, #29
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	f003 0307 	and.w	r3, r3, #7
 8010b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b8a:	7bbb      	ldrb	r3, [r7, #14]
 8010b8c:	7b3a      	ldrb	r2, [r7, #12]
 8010b8e:	4911      	ldr	r1, [pc, #68]	@ (8010bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8010b90:	5c8a      	ldrb	r2, [r1, r2]
 8010b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b96:	7b3a      	ldrb	r2, [r7, #12]
 8010b98:	490f      	ldr	r1, [pc, #60]	@ (8010bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8010b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
 8010baa:	7b7a      	ldrb	r2, [r7, #13]
 8010bac:	4909      	ldr	r1, [pc, #36]	@ (8010bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8010bae:	5c8a      	ldrb	r2, [r1, r2]
 8010bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010bb4:	7b7a      	ldrb	r2, [r7, #13]
 8010bb6:	4908      	ldr	r1, [pc, #32]	@ (8010bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8010bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010bc6:	bf00      	nop
 8010bc8:	3714      	adds	r7, #20
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	080188c4 	.word	0x080188c4
 8010bd8:	080188cc 	.word	0x080188cc

08010bdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010be0:	4904      	ldr	r1, [pc, #16]	@ (8010bf4 <MX_FATFS_Init+0x18>)
 8010be2:	4805      	ldr	r0, [pc, #20]	@ (8010bf8 <MX_FATFS_Init+0x1c>)
 8010be4:	f004 fda0 	bl	8015728 <FATFS_LinkDriver>
 8010be8:	4603      	mov	r3, r0
 8010bea:	461a      	mov	r2, r3
 8010bec:	4b03      	ldr	r3, [pc, #12]	@ (8010bfc <MX_FATFS_Init+0x20>)
 8010bee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010bf0:	bf00      	nop
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	24005420 	.word	0x24005420
 8010bf8:	240000d0 	.word	0x240000d0
 8010bfc:	2400541c 	.word	0x2400541c

08010c00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010c00:	b480      	push	{r7}
 8010c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010c04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8010c1a:	79fb      	ldrb	r3, [r7, #7]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 f9fd 	bl	801101c <SD_disk_initialize>
 8010c22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	4603      	mov	r3, r0
 8010c34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f000 fad5 	bl	80111e8 <SD_disk_status>
 8010c3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60b9      	str	r1, [r7, #8]
 8010c50:	607a      	str	r2, [r7, #4]
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8010c58:	7bf8      	ldrb	r0, [r7, #15]
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	68b9      	ldr	r1, [r7, #8]
 8010c60:	f000 fad8 	bl	8011214 <SD_disk_read>
 8010c64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
 8010c78:	603b      	str	r3, [r7, #0]
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8010c7e:	7bf8      	ldrb	r0, [r7, #15]
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	68b9      	ldr	r1, [r7, #8]
 8010c86:	f000 fb2f 	bl	80112e8 <SD_disk_write>
 8010c8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	603a      	str	r2, [r7, #0]
 8010c9e:	71fb      	strb	r3, [r7, #7]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8010ca4:	79b9      	ldrb	r1, [r7, #6]
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 fba0 	bl	80113f0 <SD_disk_ioctl>
 8010cb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	2110      	movs	r1, #16
 8010cc4:	4802      	ldr	r0, [pc, #8]	@ (8010cd0 <SELECT+0x14>)
 8010cc6:	f7f8 fabb 	bl	8009240 <HAL_GPIO_WritePin>
}
 8010cca:	bf00      	nop
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	58020000 	.word	0x58020000

08010cd4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8010cd8:	2201      	movs	r2, #1
 8010cda:	2110      	movs	r1, #16
 8010cdc:	4802      	ldr	r0, [pc, #8]	@ (8010ce8 <DESELECT+0x14>)
 8010cde:	f7f8 faaf 	bl	8009240 <HAL_GPIO_WritePin>
}
 8010ce2:	bf00      	nop
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	58020000 	.word	0x58020000

08010cec <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010cf6:	bf00      	nop
 8010cf8:	4b08      	ldr	r3, [pc, #32]	@ (8010d1c <SPI_TxByte+0x30>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	695b      	ldr	r3, [r3, #20]
 8010cfe:	f003 0302 	and.w	r3, r3, #2
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d1f8      	bne.n	8010cf8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8010d06:	1df9      	adds	r1, r7, #7
 8010d08:	2364      	movs	r3, #100	@ 0x64
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4803      	ldr	r0, [pc, #12]	@ (8010d1c <SPI_TxByte+0x30>)
 8010d0e:	f7fb fae1 	bl	800c2d4 <HAL_SPI_Transmit>
}
 8010d12:	bf00      	nop
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	24004d84 	.word	0x24004d84

08010d20 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010d2c:	bf00      	nop
 8010d2e:	4b08      	ldr	r3, [pc, #32]	@ (8010d50 <SPI_TxBuffer+0x30>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	695b      	ldr	r3, [r3, #20]
 8010d34:	f003 0302 	and.w	r3, r3, #2
 8010d38:	2b02      	cmp	r3, #2
 8010d3a:	d1f8      	bne.n	8010d2e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8010d3c:	887a      	ldrh	r2, [r7, #2]
 8010d3e:	2364      	movs	r3, #100	@ 0x64
 8010d40:	6879      	ldr	r1, [r7, #4]
 8010d42:	4803      	ldr	r0, [pc, #12]	@ (8010d50 <SPI_TxBuffer+0x30>)
 8010d44:	f7fb fac6 	bl	800c2d4 <HAL_SPI_Transmit>
}
 8010d48:	bf00      	nop
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	24004d84 	.word	0x24004d84

08010d54 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8010d5a:	23ff      	movs	r3, #255	@ 0xff
 8010d5c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010d5e:	bf00      	nop
 8010d60:	4b09      	ldr	r3, [pc, #36]	@ (8010d88 <SPI_RxByte+0x34>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	f003 0302 	and.w	r3, r3, #2
 8010d6a:	2b02      	cmp	r3, #2
 8010d6c:	d1f8      	bne.n	8010d60 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8010d6e:	1dba      	adds	r2, r7, #6
 8010d70:	1df9      	adds	r1, r7, #7
 8010d72:	2364      	movs	r3, #100	@ 0x64
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	2301      	movs	r3, #1
 8010d78:	4803      	ldr	r0, [pc, #12]	@ (8010d88 <SPI_RxByte+0x34>)
 8010d7a:	f7fb ff0b 	bl	800cb94 <HAL_SPI_TransmitReceive>
  return data;
 8010d7e:	79bb      	ldrb	r3, [r7, #6]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	24004d84 	.word	0x24004d84

08010d8c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8010d94:	f7ff ffde 	bl	8010d54 <SPI_RxByte>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	701a      	strb	r2, [r3, #0]
}
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8010dae:	4b0a      	ldr	r3, [pc, #40]	@ (8010dd8 <SD_ReadyWait+0x30>)
 8010db0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8010db4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8010db6:	f7ff ffcd 	bl	8010d54 <SPI_RxByte>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	2bff      	cmp	r3, #255	@ 0xff
 8010dc2:	d003      	beq.n	8010dcc <SD_ReadyWait+0x24>
 8010dc4:	4b04      	ldr	r3, [pc, #16]	@ (8010dd8 <SD_ReadyWait+0x30>)
 8010dc6:	881b      	ldrh	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d1f4      	bne.n	8010db6 <SD_ReadyWait+0xe>
  return res;
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3708      	adds	r7, #8
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
 8010dd6:	bf00      	nop
 8010dd8:	24005426 	.word	0x24005426

08010ddc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8010de2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8010de6:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8010de8:	f7ff ff74 	bl	8010cd4 <DESELECT>
  for(int i = 0; i < 10; i++)
 8010dec:	2300      	movs	r3, #0
 8010dee:	60bb      	str	r3, [r7, #8]
 8010df0:	e005      	b.n	8010dfe <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8010df2:	20ff      	movs	r0, #255	@ 0xff
 8010df4:	f7ff ff7a 	bl	8010cec <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	60bb      	str	r3, [r7, #8]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	2b09      	cmp	r3, #9
 8010e02:	ddf6      	ble.n	8010df2 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8010e04:	f7ff ff5a 	bl	8010cbc <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8010e08:	2340      	movs	r3, #64	@ 0x40
 8010e0a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8010e14:	2300      	movs	r3, #0
 8010e16:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8010e1c:	2395      	movs	r3, #149	@ 0x95
 8010e1e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8010e20:	463b      	mov	r3, r7
 8010e22:	2106      	movs	r1, #6
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff ff7b 	bl	8010d20 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8010e2a:	e002      	b.n	8010e32 <SD_PowerOn+0x56>
  {
    cnt--;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8010e32:	f7ff ff8f 	bl	8010d54 <SPI_RxByte>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d002      	beq.n	8010e42 <SD_PowerOn+0x66>
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1f4      	bne.n	8010e2c <SD_PowerOn+0x50>
  }
  DESELECT();
 8010e42:	f7ff ff47 	bl	8010cd4 <DESELECT>
  SPI_TxByte(0XFF);
 8010e46:	20ff      	movs	r0, #255	@ 0xff
 8010e48:	f7ff ff50 	bl	8010cec <SPI_TxByte>
  PowerFlag = 1;
 8010e4c:	4b03      	ldr	r3, [pc, #12]	@ (8010e5c <SD_PowerOn+0x80>)
 8010e4e:	2201      	movs	r2, #1
 8010e50:	701a      	strb	r2, [r3, #0]
}
 8010e52:	bf00      	nop
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	24005429 	.word	0x24005429

08010e60 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8010e60:	b480      	push	{r7}
 8010e62:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8010e64:	4b03      	ldr	r3, [pc, #12]	@ (8010e74 <SD_PowerOff+0x14>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	701a      	strb	r2, [r3, #0]
}
 8010e6a:	bf00      	nop
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr
 8010e74:	24005429 	.word	0x24005429

08010e78 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8010e7c:	4b03      	ldr	r3, [pc, #12]	@ (8010e8c <SD_CheckPower+0x14>)
 8010e7e:	781b      	ldrb	r3, [r3, #0]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	24005429 	.word	0x24005429

08010e90 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8010e9a:	4b13      	ldr	r3, [pc, #76]	@ (8010ee8 <SD_RxDataBlock+0x58>)
 8010e9c:	22c8      	movs	r2, #200	@ 0xc8
 8010e9e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8010ea0:	f7ff ff58 	bl	8010d54 <SPI_RxByte>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	2bff      	cmp	r3, #255	@ 0xff
 8010eac:	d103      	bne.n	8010eb6 <SD_RxDataBlock+0x26>
 8010eae:	4b0e      	ldr	r3, [pc, #56]	@ (8010ee8 <SD_RxDataBlock+0x58>)
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1f4      	bne.n	8010ea0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8010eb6:	7bfb      	ldrb	r3, [r7, #15]
 8010eb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8010eba:	d001      	beq.n	8010ec0 <SD_RxDataBlock+0x30>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e00f      	b.n	8010ee0 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff ff60 	bl	8010d8c <SPI_RxBytePtr>
  } while(len--);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	1e5a      	subs	r2, r3, #1
 8010ed0:	603a      	str	r2, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1f4      	bne.n	8010ec0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8010ed6:	f7ff ff3d 	bl	8010d54 <SPI_RxByte>
  SPI_RxByte();
 8010eda:	f7ff ff3b 	bl	8010d54 <SPI_RxByte>
  return TRUE;
 8010ede:	2301      	movs	r3, #1
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	24005424 	.word	0x24005424

08010eec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8010efc:	f7ff ff54 	bl	8010da8 <SD_ReadyWait>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2bff      	cmp	r3, #255	@ 0xff
 8010f04:	d001      	beq.n	8010f0a <SD_TxDataBlock+0x1e>
 8010f06:	2300      	movs	r3, #0
 8010f08:	e02f      	b.n	8010f6a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8010f0a:	78fb      	ldrb	r3, [r7, #3]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff feed 	bl	8010cec <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8010f12:	78fb      	ldrb	r3, [r7, #3]
 8010f14:	2bfd      	cmp	r3, #253	@ 0xfd
 8010f16:	d020      	beq.n	8010f5a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8010f18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff feff 	bl	8010d20 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8010f22:	f7ff ff17 	bl	8010d54 <SPI_RxByte>
    SPI_RxByte();
 8010f26:	f7ff ff15 	bl	8010d54 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8010f2a:	e00b      	b.n	8010f44 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8010f2c:	f7ff ff12 	bl	8010d54 <SPI_RxByte>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	f003 031f 	and.w	r3, r3, #31
 8010f3a:	2b05      	cmp	r3, #5
 8010f3c:	d006      	beq.n	8010f4c <SD_TxDataBlock+0x60>
      i++;
 8010f3e:	7bbb      	ldrb	r3, [r7, #14]
 8010f40:	3301      	adds	r3, #1
 8010f42:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8010f44:	7bbb      	ldrb	r3, [r7, #14]
 8010f46:	2b40      	cmp	r3, #64	@ 0x40
 8010f48:	d9f0      	bls.n	8010f2c <SD_TxDataBlock+0x40>
 8010f4a:	e000      	b.n	8010f4e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8010f4c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8010f4e:	bf00      	nop
 8010f50:	f7ff ff00 	bl	8010d54 <SPI_RxByte>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0fa      	beq.n	8010f50 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8010f5a:	7bfb      	ldrb	r3, [r7, #15]
 8010f5c:	f003 031f 	and.w	r3, r3, #31
 8010f60:	2b05      	cmp	r3, #5
 8010f62:	d101      	bne.n	8010f68 <SD_TxDataBlock+0x7c>
 8010f64:	2301      	movs	r3, #1
 8010f66:	e000      	b.n	8010f6a <SD_TxDataBlock+0x7e>

  return FALSE;
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b084      	sub	sp, #16
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	4603      	mov	r3, r0
 8010f7a:	6039      	str	r1, [r7, #0]
 8010f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8010f7e:	f7ff ff13 	bl	8010da8 <SD_ReadyWait>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2bff      	cmp	r3, #255	@ 0xff
 8010f86:	d001      	beq.n	8010f8c <SD_SendCmd+0x1a>
 8010f88:	23ff      	movs	r3, #255	@ 0xff
 8010f8a:	e042      	b.n	8011012 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8010f8c:	79fb      	ldrb	r3, [r7, #7]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7ff feac 	bl	8010cec <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	0e1b      	lsrs	r3, r3, #24
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7ff fea6 	bl	8010cec <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	0c1b      	lsrs	r3, r3, #16
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff fea0 	bl	8010cec <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	0a1b      	lsrs	r3, r3, #8
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7ff fe9a 	bl	8010cec <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff fe95 	bl	8010cec <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8010fc2:	79fb      	ldrb	r3, [r7, #7]
 8010fc4:	2b40      	cmp	r3, #64	@ 0x40
 8010fc6:	d102      	bne.n	8010fce <SD_SendCmd+0x5c>
 8010fc8:	2395      	movs	r3, #149	@ 0x95
 8010fca:	73fb      	strb	r3, [r7, #15]
 8010fcc:	e007      	b.n	8010fde <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8010fce:	79fb      	ldrb	r3, [r7, #7]
 8010fd0:	2b48      	cmp	r3, #72	@ 0x48
 8010fd2:	d102      	bne.n	8010fda <SD_SendCmd+0x68>
 8010fd4:	2387      	movs	r3, #135	@ 0x87
 8010fd6:	73fb      	strb	r3, [r7, #15]
 8010fd8:	e001      	b.n	8010fde <SD_SendCmd+0x6c>
  else crc = 1;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8010fde:	7bfb      	ldrb	r3, [r7, #15]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff fe83 	bl	8010cec <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8010fe6:	79fb      	ldrb	r3, [r7, #7]
 8010fe8:	2b4c      	cmp	r3, #76	@ 0x4c
 8010fea:	d101      	bne.n	8010ff0 <SD_SendCmd+0x7e>
 8010fec:	f7ff feb2 	bl	8010d54 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8010ff0:	230a      	movs	r3, #10
 8010ff2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8010ff4:	f7ff feae 	bl	8010d54 <SPI_RxByte>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8010ffc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011000:	2b00      	cmp	r3, #0
 8011002:	da05      	bge.n	8011010 <SD_SendCmd+0x9e>
 8011004:	7bbb      	ldrb	r3, [r7, #14]
 8011006:	3b01      	subs	r3, #1
 8011008:	73bb      	strb	r3, [r7, #14]
 801100a:	7bbb      	ldrb	r3, [r7, #14]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1f1      	bne.n	8010ff4 <SD_SendCmd+0x82>

  return res;
 8011010:	7b7b      	ldrb	r3, [r7, #13]
}
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
	...

0801101c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 801101c:	b590      	push	{r4, r7, lr}
 801101e:	b085      	sub	sp, #20
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011026:	79fb      	ldrb	r3, [r7, #7]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <SD_disk_initialize+0x14>
 801102c:	2301      	movs	r3, #1
 801102e:	e0d1      	b.n	80111d4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8011030:	4b6a      	ldr	r3, [pc, #424]	@ (80111dc <SD_disk_initialize+0x1c0>)
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	b2db      	uxtb	r3, r3
 8011036:	f003 0302 	and.w	r3, r3, #2
 801103a:	2b00      	cmp	r3, #0
 801103c:	d003      	beq.n	8011046 <SD_disk_initialize+0x2a>
 801103e:	4b67      	ldr	r3, [pc, #412]	@ (80111dc <SD_disk_initialize+0x1c0>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	e0c6      	b.n	80111d4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011046:	f7ff fec9 	bl	8010ddc <SD_PowerOn>
  /* slave select */
  SELECT();
 801104a:	f7ff fe37 	bl	8010cbc <SELECT>
  /* check disk type */
  type = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8011052:	2100      	movs	r1, #0
 8011054:	2040      	movs	r0, #64	@ 0x40
 8011056:	f7ff ff8c 	bl	8010f72 <SD_SendCmd>
 801105a:	4603      	mov	r3, r0
 801105c:	2b01      	cmp	r3, #1
 801105e:	f040 80a1 	bne.w	80111a4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8011062:	4b5f      	ldr	r3, [pc, #380]	@ (80111e0 <SD_disk_initialize+0x1c4>)
 8011064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011068:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 801106a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801106e:	2048      	movs	r0, #72	@ 0x48
 8011070:	f7ff ff7f 	bl	8010f72 <SD_SendCmd>
 8011074:	4603      	mov	r3, r0
 8011076:	2b01      	cmp	r3, #1
 8011078:	d155      	bne.n	8011126 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 801107a:	2300      	movs	r3, #0
 801107c:	73fb      	strb	r3, [r7, #15]
 801107e:	e00c      	b.n	801109a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8011080:	7bfc      	ldrb	r4, [r7, #15]
 8011082:	f7ff fe67 	bl	8010d54 <SPI_RxByte>
 8011086:	4603      	mov	r3, r0
 8011088:	461a      	mov	r2, r3
 801108a:	f104 0310 	add.w	r3, r4, #16
 801108e:	443b      	add	r3, r7
 8011090:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8011094:	7bfb      	ldrb	r3, [r7, #15]
 8011096:	3301      	adds	r3, #1
 8011098:	73fb      	strb	r3, [r7, #15]
 801109a:	7bfb      	ldrb	r3, [r7, #15]
 801109c:	2b03      	cmp	r3, #3
 801109e:	d9ef      	bls.n	8011080 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80110a0:	7abb      	ldrb	r3, [r7, #10]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d17e      	bne.n	80111a4 <SD_disk_initialize+0x188>
 80110a6:	7afb      	ldrb	r3, [r7, #11]
 80110a8:	2baa      	cmp	r3, #170	@ 0xaa
 80110aa:	d17b      	bne.n	80111a4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80110ac:	2100      	movs	r1, #0
 80110ae:	2077      	movs	r0, #119	@ 0x77
 80110b0:	f7ff ff5f 	bl	8010f72 <SD_SendCmd>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d807      	bhi.n	80110ca <SD_disk_initialize+0xae>
 80110ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80110be:	2069      	movs	r0, #105	@ 0x69
 80110c0:	f7ff ff57 	bl	8010f72 <SD_SendCmd>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80110ca:	4b45      	ldr	r3, [pc, #276]	@ (80111e0 <SD_disk_initialize+0x1c4>)
 80110cc:	881b      	ldrh	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1ec      	bne.n	80110ac <SD_disk_initialize+0x90>
 80110d2:	e000      	b.n	80110d6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80110d4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80110d6:	4b42      	ldr	r3, [pc, #264]	@ (80111e0 <SD_disk_initialize+0x1c4>)
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d062      	beq.n	80111a4 <SD_disk_initialize+0x188>
 80110de:	2100      	movs	r1, #0
 80110e0:	207a      	movs	r0, #122	@ 0x7a
 80110e2:	f7ff ff46 	bl	8010f72 <SD_SendCmd>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d15b      	bne.n	80111a4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80110ec:	2300      	movs	r3, #0
 80110ee:	73fb      	strb	r3, [r7, #15]
 80110f0:	e00c      	b.n	801110c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80110f2:	7bfc      	ldrb	r4, [r7, #15]
 80110f4:	f7ff fe2e 	bl	8010d54 <SPI_RxByte>
 80110f8:	4603      	mov	r3, r0
 80110fa:	461a      	mov	r2, r3
 80110fc:	f104 0310 	add.w	r3, r4, #16
 8011100:	443b      	add	r3, r7
 8011102:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	3301      	adds	r3, #1
 801110a:	73fb      	strb	r3, [r7, #15]
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	2b03      	cmp	r3, #3
 8011110:	d9ef      	bls.n	80110f2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8011112:	7a3b      	ldrb	r3, [r7, #8]
 8011114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011118:	2b00      	cmp	r3, #0
 801111a:	d001      	beq.n	8011120 <SD_disk_initialize+0x104>
 801111c:	230c      	movs	r3, #12
 801111e:	e000      	b.n	8011122 <SD_disk_initialize+0x106>
 8011120:	2304      	movs	r3, #4
 8011122:	73bb      	strb	r3, [r7, #14]
 8011124:	e03e      	b.n	80111a4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8011126:	2100      	movs	r1, #0
 8011128:	2077      	movs	r0, #119	@ 0x77
 801112a:	f7ff ff22 	bl	8010f72 <SD_SendCmd>
 801112e:	4603      	mov	r3, r0
 8011130:	2b01      	cmp	r3, #1
 8011132:	d808      	bhi.n	8011146 <SD_disk_initialize+0x12a>
 8011134:	2100      	movs	r1, #0
 8011136:	2069      	movs	r0, #105	@ 0x69
 8011138:	f7ff ff1b 	bl	8010f72 <SD_SendCmd>
 801113c:	4603      	mov	r3, r0
 801113e:	2b01      	cmp	r3, #1
 8011140:	d801      	bhi.n	8011146 <SD_disk_initialize+0x12a>
 8011142:	2302      	movs	r3, #2
 8011144:	e000      	b.n	8011148 <SD_disk_initialize+0x12c>
 8011146:	2301      	movs	r3, #1
 8011148:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 801114a:	7bbb      	ldrb	r3, [r7, #14]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d10e      	bne.n	801116e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8011150:	2100      	movs	r1, #0
 8011152:	2077      	movs	r0, #119	@ 0x77
 8011154:	f7ff ff0d 	bl	8010f72 <SD_SendCmd>
 8011158:	4603      	mov	r3, r0
 801115a:	2b01      	cmp	r3, #1
 801115c:	d80e      	bhi.n	801117c <SD_disk_initialize+0x160>
 801115e:	2100      	movs	r1, #0
 8011160:	2069      	movs	r0, #105	@ 0x69
 8011162:	f7ff ff06 	bl	8010f72 <SD_SendCmd>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d107      	bne.n	801117c <SD_disk_initialize+0x160>
 801116c:	e00c      	b.n	8011188 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801116e:	2100      	movs	r1, #0
 8011170:	2041      	movs	r0, #65	@ 0x41
 8011172:	f7ff fefe 	bl	8010f72 <SD_SendCmd>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d004      	beq.n	8011186 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 801117c:	4b18      	ldr	r3, [pc, #96]	@ (80111e0 <SD_disk_initialize+0x1c4>)
 801117e:	881b      	ldrh	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1e2      	bne.n	801114a <SD_disk_initialize+0x12e>
 8011184:	e000      	b.n	8011188 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8011186:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8011188:	4b15      	ldr	r3, [pc, #84]	@ (80111e0 <SD_disk_initialize+0x1c4>)
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d007      	beq.n	80111a0 <SD_disk_initialize+0x184>
 8011190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011194:	2050      	movs	r0, #80	@ 0x50
 8011196:	f7ff feec 	bl	8010f72 <SD_SendCmd>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <SD_disk_initialize+0x188>
 80111a0:	2300      	movs	r3, #0
 80111a2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80111a4:	4a0f      	ldr	r2, [pc, #60]	@ (80111e4 <SD_disk_initialize+0x1c8>)
 80111a6:	7bbb      	ldrb	r3, [r7, #14]
 80111a8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80111aa:	f7ff fd93 	bl	8010cd4 <DESELECT>
  SPI_RxByte();
 80111ae:	f7ff fdd1 	bl	8010d54 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d008      	beq.n	80111ca <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80111b8:	4b08      	ldr	r3, [pc, #32]	@ (80111dc <SD_disk_initialize+0x1c0>)
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	f023 0301 	bic.w	r3, r3, #1
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b05      	ldr	r3, [pc, #20]	@ (80111dc <SD_disk_initialize+0x1c0>)
 80111c6:	701a      	strb	r2, [r3, #0]
 80111c8:	e001      	b.n	80111ce <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80111ca:	f7ff fe49 	bl	8010e60 <SD_PowerOff>
  }
  return Stat;
 80111ce:	4b03      	ldr	r3, [pc, #12]	@ (80111dc <SD_disk_initialize+0x1c0>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b2db      	uxtb	r3, r3
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3714      	adds	r7, #20
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd90      	pop	{r4, r7, pc}
 80111dc:	240000e4 	.word	0x240000e4
 80111e0:	24005424 	.word	0x24005424
 80111e4:	24005428 	.word	0x24005428

080111e8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80111f2:	79fb      	ldrb	r3, [r7, #7]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d001      	beq.n	80111fc <SD_disk_status+0x14>
 80111f8:	2301      	movs	r3, #1
 80111fa:	e002      	b.n	8011202 <SD_disk_status+0x1a>
  return Stat;
 80111fc:	4b04      	ldr	r3, [pc, #16]	@ (8011210 <SD_disk_status+0x28>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	b2db      	uxtb	r3, r3
}
 8011202:	4618      	mov	r0, r3
 8011204:	370c      	adds	r7, #12
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	240000e4 	.word	0x240000e4

08011214 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	4603      	mov	r3, r0
 8011222:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011224:	7bfb      	ldrb	r3, [r7, #15]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d102      	bne.n	8011230 <SD_disk_read+0x1c>
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <SD_disk_read+0x20>
 8011230:	2304      	movs	r3, #4
 8011232:	e051      	b.n	80112d8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011234:	4b2a      	ldr	r3, [pc, #168]	@ (80112e0 <SD_disk_read+0xcc>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	b2db      	uxtb	r3, r3
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <SD_disk_read+0x32>
 8011242:	2303      	movs	r3, #3
 8011244:	e048      	b.n	80112d8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8011246:	4b27      	ldr	r3, [pc, #156]	@ (80112e4 <SD_disk_read+0xd0>)
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	f003 0304 	and.w	r3, r3, #4
 801124e:	2b00      	cmp	r3, #0
 8011250:	d102      	bne.n	8011258 <SD_disk_read+0x44>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	025b      	lsls	r3, r3, #9
 8011256:	607b      	str	r3, [r7, #4]

  SELECT();
 8011258:	f7ff fd30 	bl	8010cbc <SELECT>

  if (count == 1)
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b01      	cmp	r3, #1
 8011260:	d111      	bne.n	8011286 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8011262:	6879      	ldr	r1, [r7, #4]
 8011264:	2051      	movs	r0, #81	@ 0x51
 8011266:	f7ff fe84 	bl	8010f72 <SD_SendCmd>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d129      	bne.n	80112c4 <SD_disk_read+0xb0>
 8011270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011274:	68b8      	ldr	r0, [r7, #8]
 8011276:	f7ff fe0b 	bl	8010e90 <SD_RxDataBlock>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d021      	beq.n	80112c4 <SD_disk_read+0xb0>
 8011280:	2300      	movs	r3, #0
 8011282:	603b      	str	r3, [r7, #0]
 8011284:	e01e      	b.n	80112c4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	2052      	movs	r0, #82	@ 0x52
 801128a:	f7ff fe72 	bl	8010f72 <SD_SendCmd>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d117      	bne.n	80112c4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8011294:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011298:	68b8      	ldr	r0, [r7, #8]
 801129a:	f7ff fdf9 	bl	8010e90 <SD_RxDataBlock>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d00a      	beq.n	80112ba <SD_disk_read+0xa6>
        buff += 512;
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80112aa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	3b01      	subs	r3, #1
 80112b0:	603b      	str	r3, [r7, #0]
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d1ed      	bne.n	8011294 <SD_disk_read+0x80>
 80112b8:	e000      	b.n	80112bc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80112ba:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80112bc:	2100      	movs	r1, #0
 80112be:	204c      	movs	r0, #76	@ 0x4c
 80112c0:	f7ff fe57 	bl	8010f72 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80112c4:	f7ff fd06 	bl	8010cd4 <DESELECT>
  SPI_RxByte();
 80112c8:	f7ff fd44 	bl	8010d54 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	bf14      	ite	ne
 80112d2:	2301      	movne	r3, #1
 80112d4:	2300      	moveq	r3, #0
 80112d6:	b2db      	uxtb	r3, r3
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3710      	adds	r7, #16
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	240000e4 	.word	0x240000e4
 80112e4:	24005428 	.word	0x24005428

080112e8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60b9      	str	r1, [r7, #8]
 80112f0:	607a      	str	r2, [r7, #4]
 80112f2:	603b      	str	r3, [r7, #0]
 80112f4:	4603      	mov	r3, r0
 80112f6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d102      	bne.n	8011304 <SD_disk_write+0x1c>
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <SD_disk_write+0x20>
 8011304:	2304      	movs	r3, #4
 8011306:	e06b      	b.n	80113e0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011308:	4b37      	ldr	r3, [pc, #220]	@ (80113e8 <SD_disk_write+0x100>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	b2db      	uxtb	r3, r3
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <SD_disk_write+0x32>
 8011316:	2303      	movs	r3, #3
 8011318:	e062      	b.n	80113e0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801131a:	4b33      	ldr	r3, [pc, #204]	@ (80113e8 <SD_disk_write+0x100>)
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f003 0304 	and.w	r3, r3, #4
 8011324:	2b00      	cmp	r3, #0
 8011326:	d001      	beq.n	801132c <SD_disk_write+0x44>
 8011328:	2302      	movs	r3, #2
 801132a:	e059      	b.n	80113e0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801132c:	4b2f      	ldr	r3, [pc, #188]	@ (80113ec <SD_disk_write+0x104>)
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	2b00      	cmp	r3, #0
 8011336:	d102      	bne.n	801133e <SD_disk_write+0x56>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	025b      	lsls	r3, r3, #9
 801133c:	607b      	str	r3, [r7, #4]

  SELECT();
 801133e:	f7ff fcbd 	bl	8010cbc <SELECT>

  if (count == 1)
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d110      	bne.n	801136a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8011348:	6879      	ldr	r1, [r7, #4]
 801134a:	2058      	movs	r0, #88	@ 0x58
 801134c:	f7ff fe11 	bl	8010f72 <SD_SendCmd>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d13a      	bne.n	80113cc <SD_disk_write+0xe4>
 8011356:	21fe      	movs	r1, #254	@ 0xfe
 8011358:	68b8      	ldr	r0, [r7, #8]
 801135a:	f7ff fdc7 	bl	8010eec <SD_TxDataBlock>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d033      	beq.n	80113cc <SD_disk_write+0xe4>
      count = 0;
 8011364:	2300      	movs	r3, #0
 8011366:	603b      	str	r3, [r7, #0]
 8011368:	e030      	b.n	80113cc <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 801136a:	4b20      	ldr	r3, [pc, #128]	@ (80113ec <SD_disk_write+0x104>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 0302 	and.w	r3, r3, #2
 8011372:	2b00      	cmp	r3, #0
 8011374:	d007      	beq.n	8011386 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8011376:	2100      	movs	r1, #0
 8011378:	2077      	movs	r0, #119	@ 0x77
 801137a:	f7ff fdfa 	bl	8010f72 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	2057      	movs	r0, #87	@ 0x57
 8011382:	f7ff fdf6 	bl	8010f72 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8011386:	6879      	ldr	r1, [r7, #4]
 8011388:	2059      	movs	r0, #89	@ 0x59
 801138a:	f7ff fdf2 	bl	8010f72 <SD_SendCmd>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d11b      	bne.n	80113cc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8011394:	21fc      	movs	r1, #252	@ 0xfc
 8011396:	68b8      	ldr	r0, [r7, #8]
 8011398:	f7ff fda8 	bl	8010eec <SD_TxDataBlock>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00a      	beq.n	80113b8 <SD_disk_write+0xd0>
        buff += 512;
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80113a8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	603b      	str	r3, [r7, #0]
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1ee      	bne.n	8011394 <SD_disk_write+0xac>
 80113b6:	e000      	b.n	80113ba <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80113b8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80113ba:	21fd      	movs	r1, #253	@ 0xfd
 80113bc:	2000      	movs	r0, #0
 80113be:	f7ff fd95 	bl	8010eec <SD_TxDataBlock>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <SD_disk_write+0xe4>
      {
        count = 1;
 80113c8:	2301      	movs	r3, #1
 80113ca:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80113cc:	f7ff fc82 	bl	8010cd4 <DESELECT>
  SPI_RxByte();
 80113d0:	f7ff fcc0 	bl	8010d54 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	bf14      	ite	ne
 80113da:	2301      	movne	r3, #1
 80113dc:	2300      	moveq	r3, #0
 80113de:	b2db      	uxtb	r3, r3
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	240000e4 	.word	0x240000e4
 80113ec:	24005428 	.word	0x24005428

080113f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80113f0:	b590      	push	{r4, r7, lr}
 80113f2:	b08b      	sub	sp, #44	@ 0x2c
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	603a      	str	r2, [r7, #0]
 80113fa:	71fb      	strb	r3, [r7, #7]
 80113fc:	460b      	mov	r3, r1
 80113fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8011404:	79fb      	ldrb	r3, [r7, #7]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d001      	beq.n	801140e <SD_disk_ioctl+0x1e>
 801140a:	2304      	movs	r3, #4
 801140c:	e113      	b.n	8011636 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801140e:	2301      	movs	r3, #1
 8011410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8011414:	79bb      	ldrb	r3, [r7, #6]
 8011416:	2b05      	cmp	r3, #5
 8011418:	d124      	bne.n	8011464 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801141a:	6a3b      	ldr	r3, [r7, #32]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	2b02      	cmp	r3, #2
 8011420:	d012      	beq.n	8011448 <SD_disk_ioctl+0x58>
 8011422:	2b02      	cmp	r3, #2
 8011424:	dc1a      	bgt.n	801145c <SD_disk_ioctl+0x6c>
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <SD_disk_ioctl+0x40>
 801142a:	2b01      	cmp	r3, #1
 801142c:	d006      	beq.n	801143c <SD_disk_ioctl+0x4c>
 801142e:	e015      	b.n	801145c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8011430:	f7ff fd16 	bl	8010e60 <SD_PowerOff>
      res = RES_OK;
 8011434:	2300      	movs	r3, #0
 8011436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801143a:	e0fa      	b.n	8011632 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 801143c:	f7ff fcce 	bl	8010ddc <SD_PowerOn>
      res = RES_OK;
 8011440:	2300      	movs	r3, #0
 8011442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011446:	e0f4      	b.n	8011632 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8011448:	6a3b      	ldr	r3, [r7, #32]
 801144a:	1c5c      	adds	r4, r3, #1
 801144c:	f7ff fd14 	bl	8010e78 <SD_CheckPower>
 8011450:	4603      	mov	r3, r0
 8011452:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8011454:	2300      	movs	r3, #0
 8011456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801145a:	e0ea      	b.n	8011632 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 801145c:	2304      	movs	r3, #4
 801145e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011462:	e0e6      	b.n	8011632 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8011464:	4b76      	ldr	r3, [pc, #472]	@ (8011640 <SD_disk_ioctl+0x250>)
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	b2db      	uxtb	r3, r3
 801146a:	f003 0301 	and.w	r3, r3, #1
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8011472:	2303      	movs	r3, #3
 8011474:	e0df      	b.n	8011636 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8011476:	f7ff fc21 	bl	8010cbc <SELECT>
    switch (ctrl)
 801147a:	79bb      	ldrb	r3, [r7, #6]
 801147c:	2b0d      	cmp	r3, #13
 801147e:	f200 80c9 	bhi.w	8011614 <SD_disk_ioctl+0x224>
 8011482:	a201      	add	r2, pc, #4	@ (adr r2, 8011488 <SD_disk_ioctl+0x98>)
 8011484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011488:	0801157f 	.word	0x0801157f
 801148c:	080114c1 	.word	0x080114c1
 8011490:	0801156f 	.word	0x0801156f
 8011494:	08011615 	.word	0x08011615
 8011498:	08011615 	.word	0x08011615
 801149c:	08011615 	.word	0x08011615
 80114a0:	08011615 	.word	0x08011615
 80114a4:	08011615 	.word	0x08011615
 80114a8:	08011615 	.word	0x08011615
 80114ac:	08011615 	.word	0x08011615
 80114b0:	08011615 	.word	0x08011615
 80114b4:	08011591 	.word	0x08011591
 80114b8:	080115b5 	.word	0x080115b5
 80114bc:	080115d9 	.word	0x080115d9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80114c0:	2100      	movs	r1, #0
 80114c2:	2049      	movs	r0, #73	@ 0x49
 80114c4:	f7ff fd55 	bl	8010f72 <SD_SendCmd>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f040 80a6 	bne.w	801161c <SD_disk_ioctl+0x22c>
 80114d0:	f107 030c 	add.w	r3, r7, #12
 80114d4:	2110      	movs	r1, #16
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff fcda 	bl	8010e90 <SD_RxDataBlock>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 809c 	beq.w	801161c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80114e4:	7b3b      	ldrb	r3, [r7, #12]
 80114e6:	099b      	lsrs	r3, r3, #6
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d10d      	bne.n	801150a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80114ee:	7d7b      	ldrb	r3, [r7, #21]
 80114f0:	461a      	mov	r2, r3
 80114f2:	7d3b      	ldrb	r3, [r7, #20]
 80114f4:	021b      	lsls	r3, r3, #8
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	4413      	add	r3, r2
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	3301      	adds	r3, #1
 80114fe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8011500:	8bfb      	ldrh	r3, [r7, #30]
 8011502:	029a      	lsls	r2, r3, #10
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	e02d      	b.n	8011566 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801150a:	7c7b      	ldrb	r3, [r7, #17]
 801150c:	f003 030f 	and.w	r3, r3, #15
 8011510:	b2da      	uxtb	r2, r3
 8011512:	7dbb      	ldrb	r3, [r7, #22]
 8011514:	09db      	lsrs	r3, r3, #7
 8011516:	b2db      	uxtb	r3, r3
 8011518:	4413      	add	r3, r2
 801151a:	b2da      	uxtb	r2, r3
 801151c:	7d7b      	ldrb	r3, [r7, #21]
 801151e:	005b      	lsls	r3, r3, #1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	f003 0306 	and.w	r3, r3, #6
 8011526:	b2db      	uxtb	r3, r3
 8011528:	4413      	add	r3, r2
 801152a:	b2db      	uxtb	r3, r3
 801152c:	3302      	adds	r3, #2
 801152e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8011532:	7d3b      	ldrb	r3, [r7, #20]
 8011534:	099b      	lsrs	r3, r3, #6
 8011536:	b2db      	uxtb	r3, r3
 8011538:	461a      	mov	r2, r3
 801153a:	7cfb      	ldrb	r3, [r7, #19]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	b29b      	uxth	r3, r3
 8011540:	4413      	add	r3, r2
 8011542:	b29a      	uxth	r2, r3
 8011544:	7cbb      	ldrb	r3, [r7, #18]
 8011546:	029b      	lsls	r3, r3, #10
 8011548:	b29b      	uxth	r3, r3
 801154a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801154e:	b29b      	uxth	r3, r3
 8011550:	4413      	add	r3, r2
 8011552:	b29b      	uxth	r3, r3
 8011554:	3301      	adds	r3, #1
 8011556:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8011558:	8bfa      	ldrh	r2, [r7, #30]
 801155a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801155e:	3b09      	subs	r3, #9
 8011560:	409a      	lsls	r2, r3
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 801156c:	e056      	b.n	801161c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011574:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801157c:	e055      	b.n	801162a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801157e:	f7ff fc13 	bl	8010da8 <SD_ReadyWait>
 8011582:	4603      	mov	r3, r0
 8011584:	2bff      	cmp	r3, #255	@ 0xff
 8011586:	d14b      	bne.n	8011620 <SD_disk_ioctl+0x230>
 8011588:	2300      	movs	r3, #0
 801158a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801158e:	e047      	b.n	8011620 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8011590:	2100      	movs	r1, #0
 8011592:	2049      	movs	r0, #73	@ 0x49
 8011594:	f7ff fced 	bl	8010f72 <SD_SendCmd>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d142      	bne.n	8011624 <SD_disk_ioctl+0x234>
 801159e:	2110      	movs	r1, #16
 80115a0:	6a38      	ldr	r0, [r7, #32]
 80115a2:	f7ff fc75 	bl	8010e90 <SD_RxDataBlock>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d03b      	beq.n	8011624 <SD_disk_ioctl+0x234>
 80115ac:	2300      	movs	r3, #0
 80115ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80115b2:	e037      	b.n	8011624 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80115b4:	2100      	movs	r1, #0
 80115b6:	204a      	movs	r0, #74	@ 0x4a
 80115b8:	f7ff fcdb 	bl	8010f72 <SD_SendCmd>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d132      	bne.n	8011628 <SD_disk_ioctl+0x238>
 80115c2:	2110      	movs	r1, #16
 80115c4:	6a38      	ldr	r0, [r7, #32]
 80115c6:	f7ff fc63 	bl	8010e90 <SD_RxDataBlock>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d02b      	beq.n	8011628 <SD_disk_ioctl+0x238>
 80115d0:	2300      	movs	r3, #0
 80115d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80115d6:	e027      	b.n	8011628 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80115d8:	2100      	movs	r1, #0
 80115da:	207a      	movs	r0, #122	@ 0x7a
 80115dc:	f7ff fcc9 	bl	8010f72 <SD_SendCmd>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d116      	bne.n	8011614 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80115e6:	2300      	movs	r3, #0
 80115e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80115ec:	e00b      	b.n	8011606 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80115ee:	6a3c      	ldr	r4, [r7, #32]
 80115f0:	1c63      	adds	r3, r4, #1
 80115f2:	623b      	str	r3, [r7, #32]
 80115f4:	f7ff fbae 	bl	8010d54 <SPI_RxByte>
 80115f8:	4603      	mov	r3, r0
 80115fa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80115fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011600:	3301      	adds	r3, #1
 8011602:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011606:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801160a:	2b03      	cmp	r3, #3
 801160c:	d9ef      	bls.n	80115ee <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8011614:	2304      	movs	r3, #4
 8011616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801161a:	e006      	b.n	801162a <SD_disk_ioctl+0x23a>
      break;
 801161c:	bf00      	nop
 801161e:	e004      	b.n	801162a <SD_disk_ioctl+0x23a>
      break;
 8011620:	bf00      	nop
 8011622:	e002      	b.n	801162a <SD_disk_ioctl+0x23a>
      break;
 8011624:	bf00      	nop
 8011626:	e000      	b.n	801162a <SD_disk_ioctl+0x23a>
      break;
 8011628:	bf00      	nop
    }
    DESELECT();
 801162a:	f7ff fb53 	bl	8010cd4 <DESELECT>
    SPI_RxByte();
 801162e:	f7ff fb91 	bl	8010d54 <SPI_RxByte>
  }
  return res;
 8011632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011636:	4618      	mov	r0, r3
 8011638:	372c      	adds	r7, #44	@ 0x2c
 801163a:	46bd      	mov	sp, r7
 801163c:	bd90      	pop	{r4, r7, pc}
 801163e:	bf00      	nop
 8011640:	240000e4 	.word	0x240000e4

08011644 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801164e:	79fb      	ldrb	r3, [r7, #7]
 8011650:	4a08      	ldr	r2, [pc, #32]	@ (8011674 <disk_status+0x30>)
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	79fa      	ldrb	r2, [r7, #7]
 801165c:	4905      	ldr	r1, [pc, #20]	@ (8011674 <disk_status+0x30>)
 801165e:	440a      	add	r2, r1
 8011660:	7a12      	ldrb	r2, [r2, #8]
 8011662:	4610      	mov	r0, r2
 8011664:	4798      	blx	r3
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]
  return stat;
 801166a:	7bfb      	ldrb	r3, [r7, #15]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	24005654 	.word	0x24005654

08011678 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011682:	2300      	movs	r3, #0
 8011684:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011686:	79fb      	ldrb	r3, [r7, #7]
 8011688:	4a0e      	ldr	r2, [pc, #56]	@ (80116c4 <disk_initialize+0x4c>)
 801168a:	5cd3      	ldrb	r3, [r2, r3]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d114      	bne.n	80116ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011690:	79fb      	ldrb	r3, [r7, #7]
 8011692:	4a0c      	ldr	r2, [pc, #48]	@ (80116c4 <disk_initialize+0x4c>)
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	79fa      	ldrb	r2, [r7, #7]
 801169e:	4909      	ldr	r1, [pc, #36]	@ (80116c4 <disk_initialize+0x4c>)
 80116a0:	440a      	add	r2, r1
 80116a2:	7a12      	ldrb	r2, [r2, #8]
 80116a4:	4610      	mov	r0, r2
 80116a6:	4798      	blx	r3
 80116a8:	4603      	mov	r3, r0
 80116aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d103      	bne.n	80116ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	4a03      	ldr	r2, [pc, #12]	@ (80116c4 <disk_initialize+0x4c>)
 80116b6:	2101      	movs	r1, #1
 80116b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	24005654 	.word	0x24005654

080116c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b087      	sub	sp, #28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60b9      	str	r1, [r7, #8]
 80116d0:	607a      	str	r2, [r7, #4]
 80116d2:	603b      	str	r3, [r7, #0]
 80116d4:	4603      	mov	r3, r0
 80116d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116d8:	7bfb      	ldrb	r3, [r7, #15]
 80116da:	4a0a      	ldr	r2, [pc, #40]	@ (8011704 <disk_read+0x3c>)
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	4413      	add	r3, r2
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	689c      	ldr	r4, [r3, #8]
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
 80116e6:	4a07      	ldr	r2, [pc, #28]	@ (8011704 <disk_read+0x3c>)
 80116e8:	4413      	add	r3, r2
 80116ea:	7a18      	ldrb	r0, [r3, #8]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	68b9      	ldr	r1, [r7, #8]
 80116f2:	47a0      	blx	r4
 80116f4:	4603      	mov	r3, r0
 80116f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80116f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	371c      	adds	r7, #28
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd90      	pop	{r4, r7, pc}
 8011702:	bf00      	nop
 8011704:	24005654 	.word	0x24005654

08011708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011708:	b590      	push	{r4, r7, lr}
 801170a:	b087      	sub	sp, #28
 801170c:	af00      	add	r7, sp, #0
 801170e:	60b9      	str	r1, [r7, #8]
 8011710:	607a      	str	r2, [r7, #4]
 8011712:	603b      	str	r3, [r7, #0]
 8011714:	4603      	mov	r3, r0
 8011716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	4a0a      	ldr	r2, [pc, #40]	@ (8011744 <disk_write+0x3c>)
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	68dc      	ldr	r4, [r3, #12]
 8011724:	7bfb      	ldrb	r3, [r7, #15]
 8011726:	4a07      	ldr	r2, [pc, #28]	@ (8011744 <disk_write+0x3c>)
 8011728:	4413      	add	r3, r2
 801172a:	7a18      	ldrb	r0, [r3, #8]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	68b9      	ldr	r1, [r7, #8]
 8011732:	47a0      	blx	r4
 8011734:	4603      	mov	r3, r0
 8011736:	75fb      	strb	r3, [r7, #23]
  return res;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
}
 801173a:	4618      	mov	r0, r3
 801173c:	371c      	adds	r7, #28
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	24005654 	.word	0x24005654

08011748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	603a      	str	r2, [r7, #0]
 8011752:	71fb      	strb	r3, [r7, #7]
 8011754:	460b      	mov	r3, r1
 8011756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011758:	79fb      	ldrb	r3, [r7, #7]
 801175a:	4a09      	ldr	r2, [pc, #36]	@ (8011780 <disk_ioctl+0x38>)
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4413      	add	r3, r2
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	79fa      	ldrb	r2, [r7, #7]
 8011766:	4906      	ldr	r1, [pc, #24]	@ (8011780 <disk_ioctl+0x38>)
 8011768:	440a      	add	r2, r1
 801176a:	7a10      	ldrb	r0, [r2, #8]
 801176c:	79b9      	ldrb	r1, [r7, #6]
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	4798      	blx	r3
 8011772:	4603      	mov	r3, r0
 8011774:	73fb      	strb	r3, [r7, #15]
  return res;
 8011776:	7bfb      	ldrb	r3, [r7, #15]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	24005654 	.word	0x24005654

08011784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011784:	b480      	push	{r7}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3301      	adds	r3, #1
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011798:	021b      	lsls	r3, r3, #8
 801179a:	b21a      	sxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	b21b      	sxth	r3, r3
 80117a2:	4313      	orrs	r3, r2
 80117a4:	b21b      	sxth	r3, r3
 80117a6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80117a8:	89fb      	ldrh	r3, [r7, #14]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117b6:	b480      	push	{r7}
 80117b8:	b085      	sub	sp, #20
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	3303      	adds	r3, #3
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	021b      	lsls	r3, r3, #8
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	3202      	adds	r2, #2
 80117ce:	7812      	ldrb	r2, [r2, #0]
 80117d0:	4313      	orrs	r3, r2
 80117d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	021b      	lsls	r3, r3, #8
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	3201      	adds	r2, #1
 80117dc:	7812      	ldrb	r2, [r2, #0]
 80117de:	4313      	orrs	r3, r2
 80117e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	021b      	lsls	r3, r3, #8
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	7812      	ldrb	r2, [r2, #0]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	60fb      	str	r3, [r7, #12]
	return rv;
 80117ee:	68fb      	ldr	r3, [r7, #12]
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3714      	adds	r7, #20
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	607a      	str	r2, [r7, #4]
 801180e:	887a      	ldrh	r2, [r7, #2]
 8011810:	b2d2      	uxtb	r2, r2
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	887b      	ldrh	r3, [r7, #2]
 8011816:	0a1b      	lsrs	r3, r3, #8
 8011818:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	887a      	ldrh	r2, [r7, #2]
 8011822:	b2d2      	uxtb	r2, r2
 8011824:	701a      	strb	r2, [r3, #0]
}
 8011826:	bf00      	nop
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
 801183a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	1c5a      	adds	r2, r3, #1
 8011840:	607a      	str	r2, [r7, #4]
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	b2d2      	uxtb	r2, r2
 8011846:	701a      	strb	r2, [r3, #0]
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	0a1b      	lsrs	r3, r3, #8
 801184c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	b2d2      	uxtb	r2, r2
 8011858:	701a      	strb	r2, [r3, #0]
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	0a1b      	lsrs	r3, r3, #8
 801185e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	607a      	str	r2, [r7, #4]
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	b2d2      	uxtb	r2, r2
 801186a:	701a      	strb	r2, [r3, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	0a1b      	lsrs	r3, r3, #8
 8011870:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	607a      	str	r2, [r7, #4]
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	b2d2      	uxtb	r2, r2
 801187c:	701a      	strb	r2, [r3, #0]
}
 801187e:	bf00      	nop
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801188a:	b480      	push	{r7}
 801188c:	b087      	sub	sp, #28
 801188e:	af00      	add	r7, sp, #0
 8011890:	60f8      	str	r0, [r7, #12]
 8011892:	60b9      	str	r1, [r7, #8]
 8011894:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00d      	beq.n	80118c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80118a4:	693a      	ldr	r2, [r7, #16]
 80118a6:	1c53      	adds	r3, r2, #1
 80118a8:	613b      	str	r3, [r7, #16]
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	1c59      	adds	r1, r3, #1
 80118ae:	6179      	str	r1, [r7, #20]
 80118b0:	7812      	ldrb	r2, [r2, #0]
 80118b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	607b      	str	r3, [r7, #4]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1f1      	bne.n	80118a4 <mem_cpy+0x1a>
	}
}
 80118c0:	bf00      	nop
 80118c2:	371c      	adds	r7, #28
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	1c5a      	adds	r2, r3, #1
 80118e0:	617a      	str	r2, [r7, #20]
 80118e2:	68ba      	ldr	r2, [r7, #8]
 80118e4:	b2d2      	uxtb	r2, r2
 80118e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	3b01      	subs	r3, #1
 80118ec:	607b      	str	r3, [r7, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1f3      	bne.n	80118dc <mem_set+0x10>
}
 80118f4:	bf00      	nop
 80118f6:	bf00      	nop
 80118f8:	371c      	adds	r7, #28
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011902:	b480      	push	{r7}
 8011904:	b089      	sub	sp, #36	@ 0x24
 8011906:	af00      	add	r7, sp, #0
 8011908:	60f8      	str	r0, [r7, #12]
 801190a:	60b9      	str	r1, [r7, #8]
 801190c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	61fb      	str	r3, [r7, #28]
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	61fa      	str	r2, [r7, #28]
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	4619      	mov	r1, r3
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	1c5a      	adds	r2, r3, #1
 8011928:	61ba      	str	r2, [r7, #24]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	1acb      	subs	r3, r1, r3
 801192e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	3b01      	subs	r3, #1
 8011934:	607b      	str	r3, [r7, #4]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d002      	beq.n	8011942 <mem_cmp+0x40>
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0eb      	beq.n	801191a <mem_cmp+0x18>

	return r;
 8011942:	697b      	ldr	r3, [r7, #20]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3724      	adds	r7, #36	@ 0x24
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801195a:	e002      	b.n	8011962 <chk_chr+0x12>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3301      	adds	r3, #1
 8011960:	607b      	str	r3, [r7, #4]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d005      	beq.n	8011976 <chk_chr+0x26>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	461a      	mov	r2, r3
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	4293      	cmp	r3, r2
 8011974:	d1f2      	bne.n	801195c <chk_chr+0xc>
	return *str;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	781b      	ldrb	r3, [r3, #0]
}
 801197a:	4618      	mov	r0, r3
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
	...

08011988 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011988:	b480      	push	{r7}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011992:	2300      	movs	r3, #0
 8011994:	60bb      	str	r3, [r7, #8]
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	60fb      	str	r3, [r7, #12]
 801199a:	e029      	b.n	80119f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801199c:	4a27      	ldr	r2, [pc, #156]	@ (8011a3c <chk_lock+0xb4>)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	011b      	lsls	r3, r3, #4
 80119a2:	4413      	add	r3, r2
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d01d      	beq.n	80119e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119aa:	4a24      	ldr	r2, [pc, #144]	@ (8011a3c <chk_lock+0xb4>)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	011b      	lsls	r3, r3, #4
 80119b0:	4413      	add	r3, r2
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d116      	bne.n	80119ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80119bc:	4a1f      	ldr	r2, [pc, #124]	@ (8011a3c <chk_lock+0xb4>)
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	011b      	lsls	r3, r3, #4
 80119c2:	4413      	add	r3, r2
 80119c4:	3304      	adds	r3, #4
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d10c      	bne.n	80119ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119d0:	4a1a      	ldr	r2, [pc, #104]	@ (8011a3c <chk_lock+0xb4>)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	011b      	lsls	r3, r3, #4
 80119d6:	4413      	add	r3, r2
 80119d8:	3308      	adds	r3, #8
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d102      	bne.n	80119ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119e4:	e007      	b.n	80119f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119e6:	2301      	movs	r3, #1
 80119e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	3301      	adds	r3, #1
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d9d2      	bls.n	801199c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d109      	bne.n	8011a10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d102      	bne.n	8011a08 <chk_lock+0x80>
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	2b02      	cmp	r3, #2
 8011a06:	d101      	bne.n	8011a0c <chk_lock+0x84>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e010      	b.n	8011a2e <chk_lock+0xa6>
 8011a0c:	2312      	movs	r3, #18
 8011a0e:	e00e      	b.n	8011a2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d108      	bne.n	8011a28 <chk_lock+0xa0>
 8011a16:	4a09      	ldr	r2, [pc, #36]	@ (8011a3c <chk_lock+0xb4>)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	011b      	lsls	r3, r3, #4
 8011a1c:	4413      	add	r3, r2
 8011a1e:	330c      	adds	r3, #12
 8011a20:	881b      	ldrh	r3, [r3, #0]
 8011a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a26:	d101      	bne.n	8011a2c <chk_lock+0xa4>
 8011a28:	2310      	movs	r3, #16
 8011a2a:	e000      	b.n	8011a2e <chk_lock+0xa6>
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3714      	adds	r7, #20
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	24005434 	.word	0x24005434

08011a40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a46:	2300      	movs	r3, #0
 8011a48:	607b      	str	r3, [r7, #4]
 8011a4a:	e002      	b.n	8011a52 <enq_lock+0x12>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	607b      	str	r3, [r7, #4]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d806      	bhi.n	8011a66 <enq_lock+0x26>
 8011a58:	4a09      	ldr	r2, [pc, #36]	@ (8011a80 <enq_lock+0x40>)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	011b      	lsls	r3, r3, #4
 8011a5e:	4413      	add	r3, r2
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1f2      	bne.n	8011a4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2b02      	cmp	r3, #2
 8011a6a:	bf14      	ite	ne
 8011a6c:	2301      	movne	r3, #1
 8011a6e:	2300      	moveq	r3, #0
 8011a70:	b2db      	uxtb	r3, r3
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	370c      	adds	r7, #12
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	24005434 	.word	0x24005434

08011a84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a8e:	2300      	movs	r3, #0
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	e01f      	b.n	8011ad4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a94:	4a41      	ldr	r2, [pc, #260]	@ (8011b9c <inc_lock+0x118>)
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	011b      	lsls	r3, r3, #4
 8011a9a:	4413      	add	r3, r2
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d113      	bne.n	8011ace <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8011b9c <inc_lock+0x118>)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	011b      	lsls	r3, r3, #4
 8011aac:	4413      	add	r3, r2
 8011aae:	3304      	adds	r3, #4
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d109      	bne.n	8011ace <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011aba:	4a38      	ldr	r2, [pc, #224]	@ (8011b9c <inc_lock+0x118>)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d006      	beq.n	8011adc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	60fb      	str	r3, [r7, #12]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d9dc      	bls.n	8011a94 <inc_lock+0x10>
 8011ada:	e000      	b.n	8011ade <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011adc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d132      	bne.n	8011b4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	e002      	b.n	8011af0 <inc_lock+0x6c>
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	3301      	adds	r3, #1
 8011aee:	60fb      	str	r3, [r7, #12]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d806      	bhi.n	8011b04 <inc_lock+0x80>
 8011af6:	4a29      	ldr	r2, [pc, #164]	@ (8011b9c <inc_lock+0x118>)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	4413      	add	r3, r2
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1f2      	bne.n	8011aea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	d101      	bne.n	8011b0e <inc_lock+0x8a>
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e040      	b.n	8011b90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	4922      	ldr	r1, [pc, #136]	@ (8011b9c <inc_lock+0x118>)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	011b      	lsls	r3, r3, #4
 8011b18:	440b      	add	r3, r1
 8011b1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	689a      	ldr	r2, [r3, #8]
 8011b20:	491e      	ldr	r1, [pc, #120]	@ (8011b9c <inc_lock+0x118>)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	011b      	lsls	r3, r3, #4
 8011b26:	440b      	add	r3, r1
 8011b28:	3304      	adds	r3, #4
 8011b2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	695a      	ldr	r2, [r3, #20]
 8011b30:	491a      	ldr	r1, [pc, #104]	@ (8011b9c <inc_lock+0x118>)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	011b      	lsls	r3, r3, #4
 8011b36:	440b      	add	r3, r1
 8011b38:	3308      	adds	r3, #8
 8011b3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b3c:	4a17      	ldr	r2, [pc, #92]	@ (8011b9c <inc_lock+0x118>)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	011b      	lsls	r3, r3, #4
 8011b42:	4413      	add	r3, r2
 8011b44:	330c      	adds	r3, #12
 8011b46:	2200      	movs	r2, #0
 8011b48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d009      	beq.n	8011b64 <inc_lock+0xe0>
 8011b50:	4a12      	ldr	r2, [pc, #72]	@ (8011b9c <inc_lock+0x118>)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	011b      	lsls	r3, r3, #4
 8011b56:	4413      	add	r3, r2
 8011b58:	330c      	adds	r3, #12
 8011b5a:	881b      	ldrh	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d001      	beq.n	8011b64 <inc_lock+0xe0>
 8011b60:	2300      	movs	r3, #0
 8011b62:	e015      	b.n	8011b90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d108      	bne.n	8011b7c <inc_lock+0xf8>
 8011b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8011b9c <inc_lock+0x118>)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	011b      	lsls	r3, r3, #4
 8011b70:	4413      	add	r3, r2
 8011b72:	330c      	adds	r3, #12
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	3301      	adds	r3, #1
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	e001      	b.n	8011b80 <inc_lock+0xfc>
 8011b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011b80:	4906      	ldr	r1, [pc, #24]	@ (8011b9c <inc_lock+0x118>)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	011b      	lsls	r3, r3, #4
 8011b86:	440b      	add	r3, r1
 8011b88:	330c      	adds	r3, #12
 8011b8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	3301      	adds	r3, #1
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3714      	adds	r7, #20
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	24005434 	.word	0x24005434

08011ba0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	3b01      	subs	r3, #1
 8011bac:	607b      	str	r3, [r7, #4]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d825      	bhi.n	8011c00 <dec_lock+0x60>
		n = Files[i].ctr;
 8011bb4:	4a17      	ldr	r2, [pc, #92]	@ (8011c14 <dec_lock+0x74>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	011b      	lsls	r3, r3, #4
 8011bba:	4413      	add	r3, r2
 8011bbc:	330c      	adds	r3, #12
 8011bbe:	881b      	ldrh	r3, [r3, #0]
 8011bc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011bc2:	89fb      	ldrh	r3, [r7, #14]
 8011bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bc8:	d101      	bne.n	8011bce <dec_lock+0x2e>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011bce:	89fb      	ldrh	r3, [r7, #14]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <dec_lock+0x3a>
 8011bd4:	89fb      	ldrh	r3, [r7, #14]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011bda:	4a0e      	ldr	r2, [pc, #56]	@ (8011c14 <dec_lock+0x74>)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	011b      	lsls	r3, r3, #4
 8011be0:	4413      	add	r3, r2
 8011be2:	330c      	adds	r3, #12
 8011be4:	89fa      	ldrh	r2, [r7, #14]
 8011be6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011be8:	89fb      	ldrh	r3, [r7, #14]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d105      	bne.n	8011bfa <dec_lock+0x5a>
 8011bee:	4a09      	ldr	r2, [pc, #36]	@ (8011c14 <dec_lock+0x74>)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	4413      	add	r3, r2
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	737b      	strb	r3, [r7, #13]
 8011bfe:	e001      	b.n	8011c04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011c00:	2302      	movs	r3, #2
 8011c02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011c04:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	24005434 	.word	0x24005434

08011c18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c20:	2300      	movs	r3, #0
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e010      	b.n	8011c48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011c26:	4a0d      	ldr	r2, [pc, #52]	@ (8011c5c <clear_lock+0x44>)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	011b      	lsls	r3, r3, #4
 8011c2c:	4413      	add	r3, r2
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d105      	bne.n	8011c42 <clear_lock+0x2a>
 8011c36:	4a09      	ldr	r2, [pc, #36]	@ (8011c5c <clear_lock+0x44>)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	011b      	lsls	r3, r3, #4
 8011c3c:	4413      	add	r3, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3301      	adds	r3, #1
 8011c46:	60fb      	str	r3, [r7, #12]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d9eb      	bls.n	8011c26 <clear_lock+0xe>
	}
}
 8011c4e:	bf00      	nop
 8011c50:	bf00      	nop
 8011c52:	3714      	adds	r7, #20
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	24005434 	.word	0x24005434

08011c60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	78db      	ldrb	r3, [r3, #3]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d034      	beq.n	8011cde <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	7858      	ldrb	r0, [r3, #1]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011c84:	2301      	movs	r3, #1
 8011c86:	697a      	ldr	r2, [r7, #20]
 8011c88:	f7ff fd3e 	bl	8011708 <disk_write>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d002      	beq.n	8011c98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c92:	2301      	movs	r3, #1
 8011c94:	73fb      	strb	r3, [r7, #15]
 8011c96:	e022      	b.n	8011cde <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ca2:	697a      	ldr	r2, [r7, #20]
 8011ca4:	1ad2      	subs	r2, r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d217      	bcs.n	8011cde <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	789b      	ldrb	r3, [r3, #2]
 8011cb2:	613b      	str	r3, [r7, #16]
 8011cb4:	e010      	b.n	8011cd8 <sync_window+0x78>
					wsect += fs->fsize;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cba:	697a      	ldr	r2, [r7, #20]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7858      	ldrb	r0, [r3, #1]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011cca:	2301      	movs	r3, #1
 8011ccc:	697a      	ldr	r2, [r7, #20]
 8011cce:	f7ff fd1b 	bl	8011708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	613b      	str	r3, [r7, #16]
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d8eb      	bhi.n	8011cb6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3718      	adds	r7, #24
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cfa:	683a      	ldr	r2, [r7, #0]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d01b      	beq.n	8011d38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7ff ffad 	bl	8011c60 <sync_window>
 8011d06:	4603      	mov	r3, r0
 8011d08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d113      	bne.n	8011d38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	7858      	ldrb	r0, [r3, #1]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	f7ff fcd3 	bl	80116c8 <disk_read>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d004      	beq.n	8011d32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d28:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d2e:	2301      	movs	r3, #1
 8011d30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8011d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
	...

08011d44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7ff ff87 	bl	8011c60 <sync_window>
 8011d52:	4603      	mov	r3, r0
 8011d54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d56:	7bfb      	ldrb	r3, [r7, #15]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d159      	bne.n	8011e10 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	2b03      	cmp	r3, #3
 8011d62:	d149      	bne.n	8011df8 <sync_fs+0xb4>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	791b      	ldrb	r3, [r3, #4]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d145      	bne.n	8011df8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	899b      	ldrh	r3, [r3, #12]
 8011d76:	461a      	mov	r2, r3
 8011d78:	2100      	movs	r1, #0
 8011d7a:	f7ff fda7 	bl	80118cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	333c      	adds	r3, #60	@ 0x3c
 8011d82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011d86:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff fd36 	bl	80117fc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	333c      	adds	r3, #60	@ 0x3c
 8011d94:	4921      	ldr	r1, [pc, #132]	@ (8011e1c <sync_fs+0xd8>)
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7ff fd4b 	bl	8011832 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	333c      	adds	r3, #60	@ 0x3c
 8011da0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011da4:	491e      	ldr	r1, [pc, #120]	@ (8011e20 <sync_fs+0xdc>)
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7ff fd43 	bl	8011832 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	333c      	adds	r3, #60	@ 0x3c
 8011db0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	699b      	ldr	r3, [r3, #24]
 8011db8:	4619      	mov	r1, r3
 8011dba:	4610      	mov	r0, r2
 8011dbc:	f7ff fd39 	bl	8011832 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	333c      	adds	r3, #60	@ 0x3c
 8011dc4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	695b      	ldr	r3, [r3, #20]
 8011dcc:	4619      	mov	r1, r3
 8011dce:	4610      	mov	r0, r2
 8011dd0:	f7ff fd2f 	bl	8011832 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd8:	1c5a      	adds	r2, r3, #1
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	7858      	ldrb	r0, [r3, #1]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dec:	2301      	movs	r3, #1
 8011dee:	f7ff fc8b 	bl	8011708 <disk_write>
			fs->fsi_flag = 0;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	785b      	ldrb	r3, [r3, #1]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7ff fca1 	bl	8011748 <disk_ioctl>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d001      	beq.n	8011e10 <sync_fs+0xcc>
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	41615252 	.word	0x41615252
 8011e20:	61417272 	.word	0x61417272

08011e24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	3b02      	subs	r3, #2
 8011e32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6a1b      	ldr	r3, [r3, #32]
 8011e38:	3b02      	subs	r3, #2
 8011e3a:	683a      	ldr	r2, [r7, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d301      	bcc.n	8011e44 <clust2sect+0x20>
 8011e40:	2300      	movs	r3, #0
 8011e42:	e008      	b.n	8011e56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	895b      	ldrh	r3, [r3, #10]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	fb03 f202 	mul.w	r2, r3, r2
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e54:	4413      	add	r3, r2
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b086      	sub	sp, #24
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d904      	bls.n	8011e82 <get_fat+0x20>
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	6a1b      	ldr	r3, [r3, #32]
 8011e7c:	683a      	ldr	r2, [r7, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d302      	bcc.n	8011e88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e82:	2301      	movs	r3, #1
 8011e84:	617b      	str	r3, [r7, #20]
 8011e86:	e0ba      	b.n	8011ffe <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e88:	f04f 33ff 	mov.w	r3, #4294967295
 8011e8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	2b03      	cmp	r3, #3
 8011e94:	f000 8082 	beq.w	8011f9c <get_fat+0x13a>
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	f300 80a6 	bgt.w	8011fea <get_fat+0x188>
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d002      	beq.n	8011ea8 <get_fat+0x46>
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d055      	beq.n	8011f52 <get_fat+0xf0>
 8011ea6:	e0a0      	b.n	8011fea <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	085b      	lsrs	r3, r3, #1
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	899b      	ldrh	r3, [r3, #12]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ec6:	4413      	add	r3, r2
 8011ec8:	4619      	mov	r1, r3
 8011eca:	6938      	ldr	r0, [r7, #16]
 8011ecc:	f7ff ff0c 	bl	8011ce8 <move_window>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	f040 808c 	bne.w	8011ff0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	60fa      	str	r2, [r7, #12]
 8011ede:	693a      	ldr	r2, [r7, #16]
 8011ee0:	8992      	ldrh	r2, [r2, #12]
 8011ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ee6:	fb01 f202 	mul.w	r2, r1, r2
 8011eea:	1a9b      	subs	r3, r3, r2
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	4413      	add	r3, r2
 8011ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ef4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	899b      	ldrh	r3, [r3, #12]
 8011efe:	4619      	mov	r1, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f06:	4413      	add	r3, r2
 8011f08:	4619      	mov	r1, r3
 8011f0a:	6938      	ldr	r0, [r7, #16]
 8011f0c:	f7ff feec 	bl	8011ce8 <move_window>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d16e      	bne.n	8011ff4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	899b      	ldrh	r3, [r3, #12]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f22:	fb01 f202 	mul.w	r2, r1, r2
 8011f26:	1a9b      	subs	r3, r3, r2
 8011f28:	693a      	ldr	r2, [r7, #16]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f30:	021b      	lsls	r3, r3, #8
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	4313      	orrs	r3, r2
 8011f36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	f003 0301 	and.w	r3, r3, #1
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d002      	beq.n	8011f48 <get_fat+0xe6>
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	091b      	lsrs	r3, r3, #4
 8011f46:	e002      	b.n	8011f4e <get_fat+0xec>
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f4e:	617b      	str	r3, [r7, #20]
			break;
 8011f50:	e055      	b.n	8011ffe <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	899b      	ldrh	r3, [r3, #12]
 8011f5a:	085b      	lsrs	r3, r3, #1
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	4619      	mov	r1, r3
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f66:	4413      	add	r3, r2
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6938      	ldr	r0, [r7, #16]
 8011f6c:	f7ff febc 	bl	8011ce8 <move_window>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d140      	bne.n	8011ff8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	8992      	ldrh	r2, [r2, #12]
 8011f84:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f88:	fb00 f202 	mul.w	r2, r0, r2
 8011f8c:	1a9b      	subs	r3, r3, r2
 8011f8e:	440b      	add	r3, r1
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7ff fbf7 	bl	8011784 <ld_word>
 8011f96:	4603      	mov	r3, r0
 8011f98:	617b      	str	r3, [r7, #20]
			break;
 8011f9a:	e030      	b.n	8011ffe <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	899b      	ldrh	r3, [r3, #12]
 8011fa4:	089b      	lsrs	r3, r3, #2
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	4619      	mov	r1, r3
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fb0:	4413      	add	r3, r2
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	6938      	ldr	r0, [r7, #16]
 8011fb6:	f7ff fe97 	bl	8011ce8 <move_window>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d11d      	bne.n	8011ffc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	693a      	ldr	r2, [r7, #16]
 8011fcc:	8992      	ldrh	r2, [r2, #12]
 8011fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fd2:	fb00 f202 	mul.w	r2, r0, r2
 8011fd6:	1a9b      	subs	r3, r3, r2
 8011fd8:	440b      	add	r3, r1
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7ff fbeb 	bl	80117b6 <ld_dword>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011fe6:	617b      	str	r3, [r7, #20]
			break;
 8011fe8:	e009      	b.n	8011ffe <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fea:	2301      	movs	r3, #1
 8011fec:	617b      	str	r3, [r7, #20]
 8011fee:	e006      	b.n	8011ffe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ff0:	bf00      	nop
 8011ff2:	e004      	b.n	8011ffe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ff4:	bf00      	nop
 8011ff6:	e002      	b.n	8011ffe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ff8:	bf00      	nop
 8011ffa:	e000      	b.n	8011ffe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ffc:	bf00      	nop
		}
	}

	return val;
 8011ffe:	697b      	ldr	r3, [r7, #20]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3718      	adds	r7, #24
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012008:	b590      	push	{r4, r7, lr}
 801200a:	b089      	sub	sp, #36	@ 0x24
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012014:	2302      	movs	r3, #2
 8012016:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	2b01      	cmp	r3, #1
 801201c:	f240 8109 	bls.w	8012232 <put_fat+0x22a>
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6a1b      	ldr	r3, [r3, #32]
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	f080 8103 	bcs.w	8012232 <put_fat+0x22a>
		switch (fs->fs_type) {
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b03      	cmp	r3, #3
 8012032:	f000 80b6 	beq.w	80121a2 <put_fat+0x19a>
 8012036:	2b03      	cmp	r3, #3
 8012038:	f300 80fb 	bgt.w	8012232 <put_fat+0x22a>
 801203c:	2b01      	cmp	r3, #1
 801203e:	d003      	beq.n	8012048 <put_fat+0x40>
 8012040:	2b02      	cmp	r3, #2
 8012042:	f000 8083 	beq.w	801214c <put_fat+0x144>
 8012046:	e0f4      	b.n	8012232 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	61bb      	str	r3, [r7, #24]
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	085b      	lsrs	r3, r3, #1
 8012050:	69ba      	ldr	r2, [r7, #24]
 8012052:	4413      	add	r3, r2
 8012054:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	899b      	ldrh	r3, [r3, #12]
 801205e:	4619      	mov	r1, r3
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	fbb3 f3f1 	udiv	r3, r3, r1
 8012066:	4413      	add	r3, r2
 8012068:	4619      	mov	r1, r3
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f7ff fe3c 	bl	8011ce8 <move_window>
 8012070:	4603      	mov	r3, r0
 8012072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012074:	7ffb      	ldrb	r3, [r7, #31]
 8012076:	2b00      	cmp	r3, #0
 8012078:	f040 80d4 	bne.w	8012224 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	1c5a      	adds	r2, r3, #1
 8012086:	61ba      	str	r2, [r7, #24]
 8012088:	68fa      	ldr	r2, [r7, #12]
 801208a:	8992      	ldrh	r2, [r2, #12]
 801208c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012090:	fb00 f202 	mul.w	r2, r0, r2
 8012094:	1a9b      	subs	r3, r3, r2
 8012096:	440b      	add	r3, r1
 8012098:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	f003 0301 	and.w	r3, r3, #1
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00d      	beq.n	80120c0 <put_fat+0xb8>
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	b25b      	sxtb	r3, r3
 80120aa:	f003 030f 	and.w	r3, r3, #15
 80120ae:	b25a      	sxtb	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	b25b      	sxtb	r3, r3
 80120b4:	011b      	lsls	r3, r3, #4
 80120b6:	b25b      	sxtb	r3, r3
 80120b8:	4313      	orrs	r3, r2
 80120ba:	b25b      	sxtb	r3, r3
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	e001      	b.n	80120c4 <put_fat+0xbc>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2201      	movs	r2, #1
 80120cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	899b      	ldrh	r3, [r3, #12]
 80120d6:	4619      	mov	r1, r3
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	fbb3 f3f1 	udiv	r3, r3, r1
 80120de:	4413      	add	r3, r2
 80120e0:	4619      	mov	r1, r3
 80120e2:	68f8      	ldr	r0, [r7, #12]
 80120e4:	f7ff fe00 	bl	8011ce8 <move_window>
 80120e8:	4603      	mov	r3, r0
 80120ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120ec:	7ffb      	ldrb	r3, [r7, #31]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f040 809a 	bne.w	8012228 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	899b      	ldrh	r3, [r3, #12]
 80120fe:	461a      	mov	r2, r3
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	fbb3 f0f2 	udiv	r0, r3, r2
 8012106:	fb00 f202 	mul.w	r2, r0, r2
 801210a:	1a9b      	subs	r3, r3, r2
 801210c:	440b      	add	r3, r1
 801210e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	f003 0301 	and.w	r3, r3, #1
 8012116:	2b00      	cmp	r3, #0
 8012118:	d003      	beq.n	8012122 <put_fat+0x11a>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	091b      	lsrs	r3, r3, #4
 801211e:	b2db      	uxtb	r3, r3
 8012120:	e00e      	b.n	8012140 <put_fat+0x138>
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	b25b      	sxtb	r3, r3
 8012128:	f023 030f 	bic.w	r3, r3, #15
 801212c:	b25a      	sxtb	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	0a1b      	lsrs	r3, r3, #8
 8012132:	b25b      	sxtb	r3, r3
 8012134:	f003 030f 	and.w	r3, r3, #15
 8012138:	b25b      	sxtb	r3, r3
 801213a:	4313      	orrs	r3, r2
 801213c:	b25b      	sxtb	r3, r3
 801213e:	b2db      	uxtb	r3, r3
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2201      	movs	r2, #1
 8012148:	70da      	strb	r2, [r3, #3]
			break;
 801214a:	e072      	b.n	8012232 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	899b      	ldrh	r3, [r3, #12]
 8012154:	085b      	lsrs	r3, r3, #1
 8012156:	b29b      	uxth	r3, r3
 8012158:	4619      	mov	r1, r3
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012160:	4413      	add	r3, r2
 8012162:	4619      	mov	r1, r3
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f7ff fdbf 	bl	8011ce8 <move_window>
 801216a:	4603      	mov	r3, r0
 801216c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801216e:	7ffb      	ldrb	r3, [r7, #31]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d15b      	bne.n	801222c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	8992      	ldrh	r2, [r2, #12]
 8012182:	fbb3 f0f2 	udiv	r0, r3, r2
 8012186:	fb00 f202 	mul.w	r2, r0, r2
 801218a:	1a9b      	subs	r3, r3, r2
 801218c:	440b      	add	r3, r1
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	b292      	uxth	r2, r2
 8012192:	4611      	mov	r1, r2
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff fb31 	bl	80117fc <st_word>
			fs->wflag = 1;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2201      	movs	r2, #1
 801219e:	70da      	strb	r2, [r3, #3]
			break;
 80121a0:	e047      	b.n	8012232 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	899b      	ldrh	r3, [r3, #12]
 80121aa:	089b      	lsrs	r3, r3, #2
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	4619      	mov	r1, r3
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80121b6:	4413      	add	r3, r2
 80121b8:	4619      	mov	r1, r3
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7ff fd94 	bl	8011ce8 <move_window>
 80121c0:	4603      	mov	r3, r0
 80121c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121c4:	7ffb      	ldrb	r3, [r7, #31]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d132      	bne.n	8012230 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	8992      	ldrh	r2, [r2, #12]
 80121de:	fbb3 f0f2 	udiv	r0, r3, r2
 80121e2:	fb00 f202 	mul.w	r2, r0, r2
 80121e6:	1a9b      	subs	r3, r3, r2
 80121e8:	440b      	add	r3, r1
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7ff fae3 	bl	80117b6 <ld_dword>
 80121f0:	4603      	mov	r3, r0
 80121f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80121f6:	4323      	orrs	r3, r4
 80121f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	8992      	ldrh	r2, [r2, #12]
 8012208:	fbb3 f0f2 	udiv	r0, r3, r2
 801220c:	fb00 f202 	mul.w	r2, r0, r2
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	440b      	add	r3, r1
 8012214:	6879      	ldr	r1, [r7, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff fb0b 	bl	8011832 <st_dword>
			fs->wflag = 1;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2201      	movs	r2, #1
 8012220:	70da      	strb	r2, [r3, #3]
			break;
 8012222:	e006      	b.n	8012232 <put_fat+0x22a>
			if (res != FR_OK) break;
 8012224:	bf00      	nop
 8012226:	e004      	b.n	8012232 <put_fat+0x22a>
			if (res != FR_OK) break;
 8012228:	bf00      	nop
 801222a:	e002      	b.n	8012232 <put_fat+0x22a>
			if (res != FR_OK) break;
 801222c:	bf00      	nop
 801222e:	e000      	b.n	8012232 <put_fat+0x22a>
			if (res != FR_OK) break;
 8012230:	bf00      	nop
		}
	}
	return res;
 8012232:	7ffb      	ldrb	r3, [r7, #31]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3724      	adds	r7, #36	@ 0x24
 8012238:	46bd      	mov	sp, r7
 801223a:	bd90      	pop	{r4, r7, pc}

0801223c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	2b01      	cmp	r3, #1
 8012256:	d904      	bls.n	8012262 <remove_chain+0x26>
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	6a1b      	ldr	r3, [r3, #32]
 801225c:	68ba      	ldr	r2, [r7, #8]
 801225e:	429a      	cmp	r2, r3
 8012260:	d301      	bcc.n	8012266 <remove_chain+0x2a>
 8012262:	2302      	movs	r3, #2
 8012264:	e04b      	b.n	80122fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00c      	beq.n	8012286 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801226c:	f04f 32ff 	mov.w	r2, #4294967295
 8012270:	6879      	ldr	r1, [r7, #4]
 8012272:	69b8      	ldr	r0, [r7, #24]
 8012274:	f7ff fec8 	bl	8012008 <put_fat>
 8012278:	4603      	mov	r3, r0
 801227a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801227c:	7ffb      	ldrb	r3, [r7, #31]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <remove_chain+0x4a>
 8012282:	7ffb      	ldrb	r3, [r7, #31]
 8012284:	e03b      	b.n	80122fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012286:	68b9      	ldr	r1, [r7, #8]
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	f7ff fdea 	bl	8011e62 <get_fat>
 801228e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d031      	beq.n	80122fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	2b01      	cmp	r3, #1
 801229a:	d101      	bne.n	80122a0 <remove_chain+0x64>
 801229c:	2302      	movs	r3, #2
 801229e:	e02e      	b.n	80122fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a6:	d101      	bne.n	80122ac <remove_chain+0x70>
 80122a8:	2301      	movs	r3, #1
 80122aa:	e028      	b.n	80122fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80122ac:	2200      	movs	r2, #0
 80122ae:	68b9      	ldr	r1, [r7, #8]
 80122b0:	69b8      	ldr	r0, [r7, #24]
 80122b2:	f7ff fea9 	bl	8012008 <put_fat>
 80122b6:	4603      	mov	r3, r0
 80122b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80122ba:	7ffb      	ldrb	r3, [r7, #31]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <remove_chain+0x88>
 80122c0:	7ffb      	ldrb	r3, [r7, #31]
 80122c2:	e01c      	b.n	80122fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	699a      	ldr	r2, [r3, #24]
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	6a1b      	ldr	r3, [r3, #32]
 80122cc:	3b02      	subs	r3, #2
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d20b      	bcs.n	80122ea <remove_chain+0xae>
			fs->free_clst++;
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	699b      	ldr	r3, [r3, #24]
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	791b      	ldrb	r3, [r3, #4]
 80122e0:	f043 0301 	orr.w	r3, r3, #1
 80122e4:	b2da      	uxtb	r2, r3
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	6a1b      	ldr	r3, [r3, #32]
 80122f2:	68ba      	ldr	r2, [r7, #8]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d3c6      	bcc.n	8012286 <remove_chain+0x4a>
 80122f8:	e000      	b.n	80122fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3720      	adds	r7, #32
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b088      	sub	sp, #32
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10d      	bne.n	8012338 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	695b      	ldr	r3, [r3, #20]
 8012320:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d004      	beq.n	8012332 <create_chain+0x2c>
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	6a1b      	ldr	r3, [r3, #32]
 801232c:	69ba      	ldr	r2, [r7, #24]
 801232e:	429a      	cmp	r2, r3
 8012330:	d31b      	bcc.n	801236a <create_chain+0x64>
 8012332:	2301      	movs	r3, #1
 8012334:	61bb      	str	r3, [r7, #24]
 8012336:	e018      	b.n	801236a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012338:	6839      	ldr	r1, [r7, #0]
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f7ff fd91 	bl	8011e62 <get_fat>
 8012340:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d801      	bhi.n	801234c <create_chain+0x46>
 8012348:	2301      	movs	r3, #1
 801234a:	e070      	b.n	801242e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012352:	d101      	bne.n	8012358 <create_chain+0x52>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	e06a      	b.n	801242e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	6a1b      	ldr	r3, [r3, #32]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	429a      	cmp	r2, r3
 8012360:	d201      	bcs.n	8012366 <create_chain+0x60>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	e063      	b.n	801242e <create_chain+0x128>
		scl = clst;
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	3301      	adds	r3, #1
 8012372:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	69fa      	ldr	r2, [r7, #28]
 801237a:	429a      	cmp	r2, r3
 801237c:	d307      	bcc.n	801238e <create_chain+0x88>
				ncl = 2;
 801237e:	2302      	movs	r3, #2
 8012380:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012382:	69fa      	ldr	r2, [r7, #28]
 8012384:	69bb      	ldr	r3, [r7, #24]
 8012386:	429a      	cmp	r2, r3
 8012388:	d901      	bls.n	801238e <create_chain+0x88>
 801238a:	2300      	movs	r3, #0
 801238c:	e04f      	b.n	801242e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801238e:	69f9      	ldr	r1, [r7, #28]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7ff fd66 	bl	8011e62 <get_fat>
 8012396:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d00e      	beq.n	80123bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d003      	beq.n	80123ac <create_chain+0xa6>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123aa:	d101      	bne.n	80123b0 <create_chain+0xaa>
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	e03e      	b.n	801242e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80123b0:	69fa      	ldr	r2, [r7, #28]
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d1da      	bne.n	801236e <create_chain+0x68>
 80123b8:	2300      	movs	r3, #0
 80123ba:	e038      	b.n	801242e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80123bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80123be:	f04f 32ff 	mov.w	r2, #4294967295
 80123c2:	69f9      	ldr	r1, [r7, #28]
 80123c4:	6938      	ldr	r0, [r7, #16]
 80123c6:	f7ff fe1f 	bl	8012008 <put_fat>
 80123ca:	4603      	mov	r3, r0
 80123cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80123ce:	7dfb      	ldrb	r3, [r7, #23]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d109      	bne.n	80123e8 <create_chain+0xe2>
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d006      	beq.n	80123e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123da:	69fa      	ldr	r2, [r7, #28]
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	6938      	ldr	r0, [r7, #16]
 80123e0:	f7ff fe12 	bl	8012008 <put_fat>
 80123e4:	4603      	mov	r3, r0
 80123e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d116      	bne.n	801241c <create_chain+0x116>
		fs->last_clst = ncl;
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	69fa      	ldr	r2, [r7, #28]
 80123f2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	699a      	ldr	r2, [r3, #24]
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	6a1b      	ldr	r3, [r3, #32]
 80123fc:	3b02      	subs	r3, #2
 80123fe:	429a      	cmp	r2, r3
 8012400:	d804      	bhi.n	801240c <create_chain+0x106>
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	699b      	ldr	r3, [r3, #24]
 8012406:	1e5a      	subs	r2, r3, #1
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	791b      	ldrb	r3, [r3, #4]
 8012410:	f043 0301 	orr.w	r3, r3, #1
 8012414:	b2da      	uxtb	r2, r3
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	711a      	strb	r2, [r3, #4]
 801241a:	e007      	b.n	801242c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801241c:	7dfb      	ldrb	r3, [r7, #23]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d102      	bne.n	8012428 <create_chain+0x122>
 8012422:	f04f 33ff 	mov.w	r3, #4294967295
 8012426:	e000      	b.n	801242a <create_chain+0x124>
 8012428:	2301      	movs	r3, #1
 801242a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801242c:	69fb      	ldr	r3, [r7, #28]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012436:	b480      	push	{r7}
 8012438:	b087      	sub	sp, #28
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801244a:	3304      	adds	r3, #4
 801244c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	899b      	ldrh	r3, [r3, #12]
 8012452:	461a      	mov	r2, r3
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	fbb3 f3f2 	udiv	r3, r3, r2
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	8952      	ldrh	r2, [r2, #10]
 801245e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012462:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	1d1a      	adds	r2, r3, #4
 8012468:	613a      	str	r2, [r7, #16]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <clmt_clust+0x42>
 8012474:	2300      	movs	r3, #0
 8012476:	e010      	b.n	801249a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012478:	697a      	ldr	r2, [r7, #20]
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	429a      	cmp	r2, r3
 801247e:	d307      	bcc.n	8012490 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012480:	697a      	ldr	r2, [r7, #20]
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	617b      	str	r3, [r7, #20]
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	3304      	adds	r3, #4
 801248c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801248e:	e7e9      	b.n	8012464 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012490:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	4413      	add	r3, r2
}
 801249a:	4618      	mov	r0, r3
 801249c:	371c      	adds	r7, #28
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b086      	sub	sp, #24
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
 80124ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80124bc:	d204      	bcs.n	80124c8 <dir_sdi+0x22>
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	f003 031f 	and.w	r3, r3, #31
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d001      	beq.n	80124cc <dir_sdi+0x26>
		return FR_INT_ERR;
 80124c8:	2302      	movs	r3, #2
 80124ca:	e071      	b.n	80125b0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	683a      	ldr	r2, [r7, #0]
 80124d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <dir_sdi+0x46>
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	2b02      	cmp	r3, #2
 80124e4:	d902      	bls.n	80124ec <dir_sdi+0x46>
		clst = fs->dirbase;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d10c      	bne.n	801250c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	095b      	lsrs	r3, r3, #5
 80124f6:	693a      	ldr	r2, [r7, #16]
 80124f8:	8912      	ldrh	r2, [r2, #8]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d301      	bcc.n	8012502 <dir_sdi+0x5c>
 80124fe:	2302      	movs	r3, #2
 8012500:	e056      	b.n	80125b0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	61da      	str	r2, [r3, #28]
 801250a:	e02d      	b.n	8012568 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	895b      	ldrh	r3, [r3, #10]
 8012510:	461a      	mov	r2, r3
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	fb02 f303 	mul.w	r3, r2, r3
 801251a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801251c:	e019      	b.n	8012552 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6979      	ldr	r1, [r7, #20]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff fc9d 	bl	8011e62 <get_fat>
 8012528:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012530:	d101      	bne.n	8012536 <dir_sdi+0x90>
 8012532:	2301      	movs	r3, #1
 8012534:	e03c      	b.n	80125b0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	2b01      	cmp	r3, #1
 801253a:	d904      	bls.n	8012546 <dir_sdi+0xa0>
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	6a1b      	ldr	r3, [r3, #32]
 8012540:	697a      	ldr	r2, [r7, #20]
 8012542:	429a      	cmp	r2, r3
 8012544:	d301      	bcc.n	801254a <dir_sdi+0xa4>
 8012546:	2302      	movs	r3, #2
 8012548:	e032      	b.n	80125b0 <dir_sdi+0x10a>
			ofs -= csz;
 801254a:	683a      	ldr	r2, [r7, #0]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	429a      	cmp	r2, r3
 8012558:	d2e1      	bcs.n	801251e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801255a:	6979      	ldr	r1, [r7, #20]
 801255c:	6938      	ldr	r0, [r7, #16]
 801255e:	f7ff fc61 	bl	8011e24 <clust2sect>
 8012562:	4602      	mov	r2, r0
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	697a      	ldr	r2, [r7, #20]
 801256c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	69db      	ldr	r3, [r3, #28]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d101      	bne.n	801257a <dir_sdi+0xd4>
 8012576:	2302      	movs	r3, #2
 8012578:	e01a      	b.n	80125b0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	69da      	ldr	r2, [r3, #28]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	899b      	ldrh	r3, [r3, #12]
 8012582:	4619      	mov	r1, r3
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	fbb3 f3f1 	udiv	r3, r3, r1
 801258a:	441a      	add	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	899b      	ldrh	r3, [r3, #12]
 801259a:	461a      	mov	r2, r3
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	fbb3 f0f2 	udiv	r0, r3, r2
 80125a2:	fb00 f202 	mul.w	r2, r0, r2
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	18ca      	adds	r2, r1, r3
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3718      	adds	r7, #24
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	3320      	adds	r3, #32
 80125ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	69db      	ldr	r3, [r3, #28]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d003      	beq.n	80125e0 <dir_next+0x28>
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80125de:	d301      	bcc.n	80125e4 <dir_next+0x2c>
 80125e0:	2304      	movs	r3, #4
 80125e2:	e0bb      	b.n	801275c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	899b      	ldrh	r3, [r3, #12]
 80125e8:	461a      	mov	r2, r3
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80125f0:	fb01 f202 	mul.w	r2, r1, r2
 80125f4:	1a9b      	subs	r3, r3, r2
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f040 809d 	bne.w	8012736 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	69db      	ldr	r3, [r3, #28]
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	699b      	ldr	r3, [r3, #24]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10b      	bne.n	8012626 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	095b      	lsrs	r3, r3, #5
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	8912      	ldrh	r2, [r2, #8]
 8012616:	4293      	cmp	r3, r2
 8012618:	f0c0 808d 	bcc.w	8012736 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	61da      	str	r2, [r3, #28]
 8012622:	2304      	movs	r3, #4
 8012624:	e09a      	b.n	801275c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	899b      	ldrh	r3, [r3, #12]
 801262a:	461a      	mov	r2, r3
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012632:	68fa      	ldr	r2, [r7, #12]
 8012634:	8952      	ldrh	r2, [r2, #10]
 8012636:	3a01      	subs	r2, #1
 8012638:	4013      	ands	r3, r2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d17b      	bne.n	8012736 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	4619      	mov	r1, r3
 8012646:	4610      	mov	r0, r2
 8012648:	f7ff fc0b 	bl	8011e62 <get_fat>
 801264c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d801      	bhi.n	8012658 <dir_next+0xa0>
 8012654:	2302      	movs	r3, #2
 8012656:	e081      	b.n	801275c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801265e:	d101      	bne.n	8012664 <dir_next+0xac>
 8012660:	2301      	movs	r3, #1
 8012662:	e07b      	b.n	801275c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	6a1b      	ldr	r3, [r3, #32]
 8012668:	697a      	ldr	r2, [r7, #20]
 801266a:	429a      	cmp	r2, r3
 801266c:	d359      	bcc.n	8012722 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d104      	bne.n	801267e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	61da      	str	r2, [r3, #28]
 801267a:	2304      	movs	r3, #4
 801267c:	e06e      	b.n	801275c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801267e:	687a      	ldr	r2, [r7, #4]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	699b      	ldr	r3, [r3, #24]
 8012684:	4619      	mov	r1, r3
 8012686:	4610      	mov	r0, r2
 8012688:	f7ff fe3d 	bl	8012306 <create_chain>
 801268c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d101      	bne.n	8012698 <dir_next+0xe0>
 8012694:	2307      	movs	r3, #7
 8012696:	e061      	b.n	801275c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	2b01      	cmp	r3, #1
 801269c:	d101      	bne.n	80126a2 <dir_next+0xea>
 801269e:	2302      	movs	r3, #2
 80126a0:	e05c      	b.n	801275c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126a8:	d101      	bne.n	80126ae <dir_next+0xf6>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e056      	b.n	801275c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f7ff fad6 	bl	8011c60 <sync_window>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <dir_next+0x106>
 80126ba:	2301      	movs	r3, #1
 80126bc:	e04e      	b.n	801275c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	899b      	ldrh	r3, [r3, #12]
 80126c8:	461a      	mov	r2, r3
 80126ca:	2100      	movs	r1, #0
 80126cc:	f7ff f8fe 	bl	80118cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126d0:	2300      	movs	r3, #0
 80126d2:	613b      	str	r3, [r7, #16]
 80126d4:	6979      	ldr	r1, [r7, #20]
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f7ff fba4 	bl	8011e24 <clust2sect>
 80126dc:	4602      	mov	r2, r0
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80126e2:	e012      	b.n	801270a <dir_next+0x152>
						fs->wflag = 1;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2201      	movs	r2, #1
 80126e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126ea:	68f8      	ldr	r0, [r7, #12]
 80126ec:	f7ff fab8 	bl	8011c60 <sync_window>
 80126f0:	4603      	mov	r3, r0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <dir_next+0x142>
 80126f6:	2301      	movs	r3, #1
 80126f8:	e030      	b.n	801275c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	3301      	adds	r3, #1
 80126fe:	613b      	str	r3, [r7, #16]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	639a      	str	r2, [r3, #56]	@ 0x38
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	895b      	ldrh	r3, [r3, #10]
 801270e:	461a      	mov	r2, r3
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	4293      	cmp	r3, r2
 8012714:	d3e6      	bcc.n	80126e4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	1ad2      	subs	r2, r2, r3
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	697a      	ldr	r2, [r7, #20]
 8012726:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012728:	6979      	ldr	r1, [r7, #20]
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f7ff fb7a 	bl	8011e24 <clust2sect>
 8012730:	4602      	mov	r2, r0
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	461a      	mov	r2, r3
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	fbb3 f0f2 	udiv	r0, r3, r2
 801274e:	fb00 f202 	mul.w	r2, r0, r2
 8012752:	1a9b      	subs	r3, r3, r2
 8012754:	18ca      	adds	r2, r1, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012774:	2100      	movs	r1, #0
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7ff fe95 	bl	80124a6 <dir_sdi>
 801277c:	4603      	mov	r3, r0
 801277e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012780:	7dfb      	ldrb	r3, [r7, #23]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d12b      	bne.n	80127de <dir_alloc+0x7a>
		n = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	69db      	ldr	r3, [r3, #28]
 801278e:	4619      	mov	r1, r3
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f7ff faa9 	bl	8011ce8 <move_window>
 8012796:	4603      	mov	r3, r0
 8012798:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801279a:	7dfb      	ldrb	r3, [r7, #23]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d11d      	bne.n	80127dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a1b      	ldr	r3, [r3, #32]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	2be5      	cmp	r3, #229	@ 0xe5
 80127a8:	d004      	beq.n	80127b4 <dir_alloc+0x50>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d107      	bne.n	80127c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	3301      	adds	r3, #1
 80127b8:	613b      	str	r3, [r7, #16]
 80127ba:	693a      	ldr	r2, [r7, #16]
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	429a      	cmp	r2, r3
 80127c0:	d102      	bne.n	80127c8 <dir_alloc+0x64>
 80127c2:	e00c      	b.n	80127de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80127c4:	2300      	movs	r3, #0
 80127c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80127c8:	2101      	movs	r1, #1
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7ff fef4 	bl	80125b8 <dir_next>
 80127d0:	4603      	mov	r3, r0
 80127d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d0d7      	beq.n	801278a <dir_alloc+0x26>
 80127da:	e000      	b.n	80127de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127de:	7dfb      	ldrb	r3, [r7, #23]
 80127e0:	2b04      	cmp	r3, #4
 80127e2:	d101      	bne.n	80127e8 <dir_alloc+0x84>
 80127e4:	2307      	movs	r3, #7
 80127e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3718      	adds	r7, #24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	331a      	adds	r3, #26
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe ffbf 	bl	8011784 <ld_word>
 8012806:	4603      	mov	r3, r0
 8012808:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2b03      	cmp	r3, #3
 8012810:	d109      	bne.n	8012826 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	3314      	adds	r3, #20
 8012816:	4618      	mov	r0, r3
 8012818:	f7fe ffb4 	bl	8011784 <ld_word>
 801281c:	4603      	mov	r3, r0
 801281e:	041b      	lsls	r3, r3, #16
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	4313      	orrs	r3, r2
 8012824:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012826:	68fb      	ldr	r3, [r7, #12]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	331a      	adds	r3, #26
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	b292      	uxth	r2, r2
 8012844:	4611      	mov	r1, r2
 8012846:	4618      	mov	r0, r3
 8012848:	f7fe ffd8 	bl	80117fc <st_word>
	if (fs->fs_type == FS_FAT32) {
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b03      	cmp	r3, #3
 8012852:	d109      	bne.n	8012868 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	f103 0214 	add.w	r2, r3, #20
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	0c1b      	lsrs	r3, r3, #16
 801285e:	b29b      	uxth	r3, r3
 8012860:	4619      	mov	r1, r3
 8012862:	4610      	mov	r0, r2
 8012864:	f7fe ffca 	bl	80117fc <st_word>
	}
}
 8012868:	bf00      	nop
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012870:	b590      	push	{r4, r7, lr}
 8012872:	b087      	sub	sp, #28
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	331a      	adds	r3, #26
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe ff80 	bl	8011784 <ld_word>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d001      	beq.n	801288e <cmp_lfn+0x1e>
 801288a:	2300      	movs	r3, #0
 801288c:	e059      	b.n	8012942 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012896:	1e5a      	subs	r2, r3, #1
 8012898:	4613      	mov	r3, r2
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	4413      	add	r3, r2
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80128a4:	2301      	movs	r3, #1
 80128a6:	81fb      	strh	r3, [r7, #14]
 80128a8:	2300      	movs	r3, #0
 80128aa:	613b      	str	r3, [r7, #16]
 80128ac:	e033      	b.n	8012916 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80128ae:	4a27      	ldr	r2, [pc, #156]	@ (801294c <cmp_lfn+0xdc>)
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	4413      	add	r3, r2
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	461a      	mov	r2, r3
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	4413      	add	r3, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fe ff61 	bl	8011784 <ld_word>
 80128c2:	4603      	mov	r3, r0
 80128c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80128c6:	89fb      	ldrh	r3, [r7, #14]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01a      	beq.n	8012902 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80128d0:	d812      	bhi.n	80128f8 <cmp_lfn+0x88>
 80128d2:	89bb      	ldrh	r3, [r7, #12]
 80128d4:	4618      	mov	r0, r3
 80128d6:	f002 ff73 	bl	80157c0 <ff_wtoupper>
 80128da:	4603      	mov	r3, r0
 80128dc:	461c      	mov	r4, r3
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	1c5a      	adds	r2, r3, #1
 80128e2:	617a      	str	r2, [r7, #20]
 80128e4:	005b      	lsls	r3, r3, #1
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	4413      	add	r3, r2
 80128ea:	881b      	ldrh	r3, [r3, #0]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f002 ff67 	bl	80157c0 <ff_wtoupper>
 80128f2:	4603      	mov	r3, r0
 80128f4:	429c      	cmp	r4, r3
 80128f6:	d001      	beq.n	80128fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80128f8:	2300      	movs	r3, #0
 80128fa:	e022      	b.n	8012942 <cmp_lfn+0xd2>
			}
			wc = uc;
 80128fc:	89bb      	ldrh	r3, [r7, #12]
 80128fe:	81fb      	strh	r3, [r7, #14]
 8012900:	e006      	b.n	8012910 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012902:	89bb      	ldrh	r3, [r7, #12]
 8012904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012908:	4293      	cmp	r3, r2
 801290a:	d001      	beq.n	8012910 <cmp_lfn+0xa0>
 801290c:	2300      	movs	r3, #0
 801290e:	e018      	b.n	8012942 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	3301      	adds	r3, #1
 8012914:	613b      	str	r3, [r7, #16]
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	2b0c      	cmp	r3, #12
 801291a:	d9c8      	bls.n	80128ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00b      	beq.n	8012940 <cmp_lfn+0xd0>
 8012928:	89fb      	ldrh	r3, [r7, #14]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d008      	beq.n	8012940 <cmp_lfn+0xd0>
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	005b      	lsls	r3, r3, #1
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	4413      	add	r3, r2
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d001      	beq.n	8012940 <cmp_lfn+0xd0>
 801293c:	2300      	movs	r3, #0
 801293e:	e000      	b.n	8012942 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012940:	2301      	movs	r3, #1
}
 8012942:	4618      	mov	r0, r3
 8012944:	371c      	adds	r7, #28
 8012946:	46bd      	mov	sp, r7
 8012948:	bd90      	pop	{r4, r7, pc}
 801294a:	bf00      	nop
 801294c:	08018954 	.word	0x08018954

08012950 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	331a      	adds	r3, #26
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe ff10 	bl	8011784 <ld_word>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <pick_lfn+0x1e>
 801296a:	2300      	movs	r3, #0
 801296c:	e04d      	b.n	8012a0a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012976:	1e5a      	subs	r2, r3, #1
 8012978:	4613      	mov	r3, r2
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	4413      	add	r3, r2
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	4413      	add	r3, r2
 8012982:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012984:	2301      	movs	r3, #1
 8012986:	81fb      	strh	r3, [r7, #14]
 8012988:	2300      	movs	r3, #0
 801298a:	613b      	str	r3, [r7, #16]
 801298c:	e028      	b.n	80129e0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801298e:	4a21      	ldr	r2, [pc, #132]	@ (8012a14 <pick_lfn+0xc4>)
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	4413      	add	r3, r2
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	461a      	mov	r2, r3
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	4413      	add	r3, r2
 801299c:	4618      	mov	r0, r3
 801299e:	f7fe fef1 	bl	8011784 <ld_word>
 80129a2:	4603      	mov	r3, r0
 80129a4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80129a6:	89fb      	ldrh	r3, [r7, #14]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00f      	beq.n	80129cc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80129b0:	d901      	bls.n	80129b6 <pick_lfn+0x66>
 80129b2:	2300      	movs	r3, #0
 80129b4:	e029      	b.n	8012a0a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80129b6:	89bb      	ldrh	r3, [r7, #12]
 80129b8:	81fb      	strh	r3, [r7, #14]
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	1c5a      	adds	r2, r3, #1
 80129be:	617a      	str	r2, [r7, #20]
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	4413      	add	r3, r2
 80129c6:	89fa      	ldrh	r2, [r7, #14]
 80129c8:	801a      	strh	r2, [r3, #0]
 80129ca:	e006      	b.n	80129da <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129cc:	89bb      	ldrh	r3, [r7, #12]
 80129ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d001      	beq.n	80129da <pick_lfn+0x8a>
 80129d6:	2300      	movs	r3, #0
 80129d8:	e017      	b.n	8012a0a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	3301      	adds	r3, #1
 80129de:	613b      	str	r3, [r7, #16]
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	2b0c      	cmp	r3, #12
 80129e4:	d9d3      	bls.n	801298e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00a      	beq.n	8012a08 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80129f6:	d901      	bls.n	80129fc <pick_lfn+0xac>
 80129f8:	2300      	movs	r3, #0
 80129fa:	e006      	b.n	8012a0a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	005b      	lsls	r3, r3, #1
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	4413      	add	r3, r2
 8012a04:	2200      	movs	r2, #0
 8012a06:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012a08:	2301      	movs	r3, #1
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3718      	adds	r7, #24
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08018954 	.word	0x08018954

08012a18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	4611      	mov	r1, r2
 8012a24:	461a      	mov	r2, r3
 8012a26:	460b      	mov	r3, r1
 8012a28:	71fb      	strb	r3, [r7, #7]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	330d      	adds	r3, #13
 8012a32:	79ba      	ldrb	r2, [r7, #6]
 8012a34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	330b      	adds	r3, #11
 8012a3a:	220f      	movs	r2, #15
 8012a3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	330c      	adds	r3, #12
 8012a42:	2200      	movs	r2, #0
 8012a44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	331a      	adds	r3, #26
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7fe fed5 	bl	80117fc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012a52:	79fb      	ldrb	r3, [r7, #7]
 8012a54:	1e5a      	subs	r2, r3, #1
 8012a56:	4613      	mov	r3, r2
 8012a58:	005b      	lsls	r3, r3, #1
 8012a5a:	4413      	add	r3, r2
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	4413      	add	r3, r2
 8012a60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	82fb      	strh	r3, [r7, #22]
 8012a66:	2300      	movs	r3, #0
 8012a68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a6a:	8afb      	ldrh	r3, [r7, #22]
 8012a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d007      	beq.n	8012a84 <put_lfn+0x6c>
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	1c5a      	adds	r2, r3, #1
 8012a78:	61fa      	str	r2, [r7, #28]
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	4413      	add	r3, r2
 8012a80:	881b      	ldrh	r3, [r3, #0]
 8012a82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012a84:	4a17      	ldr	r2, [pc, #92]	@ (8012ae4 <put_lfn+0xcc>)
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	4413      	add	r3, r2
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	4413      	add	r3, r2
 8012a92:	8afa      	ldrh	r2, [r7, #22]
 8012a94:	4611      	mov	r1, r2
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fe feb0 	bl	80117fc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a9c:	8afb      	ldrh	r3, [r7, #22]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <put_lfn+0x90>
 8012aa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012aa6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	61bb      	str	r3, [r7, #24]
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	2b0c      	cmp	r3, #12
 8012ab2:	d9da      	bls.n	8012a6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012ab4:	8afb      	ldrh	r3, [r7, #22]
 8012ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d006      	beq.n	8012acc <put_lfn+0xb4>
 8012abe:	69fb      	ldr	r3, [r7, #28]
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	68fa      	ldr	r2, [r7, #12]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d103      	bne.n	8012ad4 <put_lfn+0xbc>
 8012acc:	79fb      	ldrb	r3, [r7, #7]
 8012ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ad2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	79fa      	ldrb	r2, [r7, #7]
 8012ad8:	701a      	strb	r2, [r3, #0]
}
 8012ada:	bf00      	nop
 8012adc:	3720      	adds	r7, #32
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	08018954 	.word	0x08018954

08012ae8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08c      	sub	sp, #48	@ 0x30
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	607a      	str	r2, [r7, #4]
 8012af4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012af6:	220b      	movs	r2, #11
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f7fe fec5 	bl	801188a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	2b05      	cmp	r3, #5
 8012b04:	d929      	bls.n	8012b5a <gen_numname+0x72>
		sr = seq;
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012b0a:	e020      	b.n	8012b4e <gen_numname+0x66>
			wc = *lfn++;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	1c9a      	adds	r2, r3, #2
 8012b10:	607a      	str	r2, [r7, #4]
 8012b12:	881b      	ldrh	r3, [r3, #0]
 8012b14:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012b16:	2300      	movs	r3, #0
 8012b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b1a:	e015      	b.n	8012b48 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	005a      	lsls	r2, r3, #1
 8012b20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	4413      	add	r3, r2
 8012b28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012b2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b2c:	085b      	lsrs	r3, r3, #1
 8012b2e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d003      	beq.n	8012b42 <gen_numname+0x5a>
 8012b3a:	69fa      	ldr	r2, [r7, #28]
 8012b3c:	4b30      	ldr	r3, [pc, #192]	@ (8012c00 <gen_numname+0x118>)
 8012b3e:	4053      	eors	r3, r2
 8012b40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b44:	3301      	adds	r3, #1
 8012b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b4a:	2b0f      	cmp	r3, #15
 8012b4c:	d9e6      	bls.n	8012b1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d1da      	bne.n	8012b0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012b5a:	2307      	movs	r3, #7
 8012b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	f003 030f 	and.w	r3, r3, #15
 8012b66:	b2db      	uxtb	r3, r3
 8012b68:	3330      	adds	r3, #48	@ 0x30
 8012b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b72:	2b39      	cmp	r3, #57	@ 0x39
 8012b74:	d904      	bls.n	8012b80 <gen_numname+0x98>
 8012b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b7a:	3307      	adds	r3, #7
 8012b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b82:	1e5a      	subs	r2, r3, #1
 8012b84:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b86:	3330      	adds	r3, #48	@ 0x30
 8012b88:	443b      	add	r3, r7
 8012b8a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012b8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	091b      	lsrs	r3, r3, #4
 8012b96:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d1df      	bne.n	8012b5e <gen_numname+0x76>
	ns[i] = '~';
 8012b9e:	f107 0214 	add.w	r2, r7, #20
 8012ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba4:	4413      	add	r3, r2
 8012ba6:	227e      	movs	r2, #126	@ 0x7e
 8012ba8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012baa:	2300      	movs	r3, #0
 8012bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bae:	e002      	b.n	8012bb6 <gen_numname+0xce>
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d205      	bcs.n	8012bca <gen_numname+0xe2>
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc2:	4413      	add	r3, r2
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b20      	cmp	r3, #32
 8012bc8:	d1f2      	bne.n	8012bb0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bcc:	2b07      	cmp	r3, #7
 8012bce:	d807      	bhi.n	8012be0 <gen_numname+0xf8>
 8012bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd2:	1c5a      	adds	r2, r3, #1
 8012bd4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012bd6:	3330      	adds	r3, #48	@ 0x30
 8012bd8:	443b      	add	r3, r7
 8012bda:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012bde:	e000      	b.n	8012be2 <gen_numname+0xfa>
 8012be0:	2120      	movs	r1, #32
 8012be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be4:	1c5a      	adds	r2, r3, #1
 8012be6:	627a      	str	r2, [r7, #36]	@ 0x24
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	4413      	add	r3, r2
 8012bec:	460a      	mov	r2, r1
 8012bee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf2:	2b07      	cmp	r3, #7
 8012bf4:	d9e9      	bls.n	8012bca <gen_numname+0xe2>
}
 8012bf6:	bf00      	nop
 8012bf8:	bf00      	nop
 8012bfa:	3730      	adds	r7, #48	@ 0x30
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	00011021 	.word	0x00011021

08012c04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b085      	sub	sp, #20
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012c10:	230b      	movs	r3, #11
 8012c12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012c14:	7bfb      	ldrb	r3, [r7, #15]
 8012c16:	b2da      	uxtb	r2, r3
 8012c18:	0852      	lsrs	r2, r2, #1
 8012c1a:	01db      	lsls	r3, r3, #7
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	1c59      	adds	r1, r3, #1
 8012c24:	6079      	str	r1, [r7, #4]
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	4413      	add	r3, r2
 8012c2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	60bb      	str	r3, [r7, #8]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1ed      	bne.n	8012c14 <sum_sfn+0x10>
	return sum;
 8012c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3714      	adds	r7, #20
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c44:	4770      	bx	lr

08012c46 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b086      	sub	sp, #24
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
 8012c4e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012c50:	2304      	movs	r3, #4
 8012c52:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012c5a:	23ff      	movs	r3, #255	@ 0xff
 8012c5c:	757b      	strb	r3, [r7, #21]
 8012c5e:	23ff      	movs	r3, #255	@ 0xff
 8012c60:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012c62:	e081      	b.n	8012d68 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	69db      	ldr	r3, [r3, #28]
 8012c68:	4619      	mov	r1, r3
 8012c6a:	6938      	ldr	r0, [r7, #16]
 8012c6c:	f7ff f83c 	bl	8011ce8 <move_window>
 8012c70:	4603      	mov	r3, r0
 8012c72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c74:	7dfb      	ldrb	r3, [r7, #23]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d17c      	bne.n	8012d74 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6a1b      	ldr	r3, [r3, #32]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012c82:	7dbb      	ldrb	r3, [r7, #22]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d102      	bne.n	8012c8e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012c88:	2304      	movs	r3, #4
 8012c8a:	75fb      	strb	r3, [r7, #23]
 8012c8c:	e077      	b.n	8012d7e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6a1b      	ldr	r3, [r3, #32]
 8012c92:	330b      	adds	r3, #11
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c9a:	73fb      	strb	r3, [r7, #15]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	7bfa      	ldrb	r2, [r7, #15]
 8012ca0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012ca2:	7dbb      	ldrb	r3, [r7, #22]
 8012ca4:	2be5      	cmp	r3, #229	@ 0xe5
 8012ca6:	d00e      	beq.n	8012cc6 <dir_read+0x80>
 8012ca8:	7dbb      	ldrb	r3, [r7, #22]
 8012caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cac:	d00b      	beq.n	8012cc6 <dir_read+0x80>
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	f023 0320 	bic.w	r3, r3, #32
 8012cb4:	2b08      	cmp	r3, #8
 8012cb6:	bf0c      	ite	eq
 8012cb8:	2301      	moveq	r3, #1
 8012cba:	2300      	movne	r3, #0
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d002      	beq.n	8012ccc <dir_read+0x86>
				ord = 0xFF;
 8012cc6:	23ff      	movs	r3, #255	@ 0xff
 8012cc8:	757b      	strb	r3, [r7, #21]
 8012cca:	e044      	b.n	8012d56 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012ccc:	7bfb      	ldrb	r3, [r7, #15]
 8012cce:	2b0f      	cmp	r3, #15
 8012cd0:	d12f      	bne.n	8012d32 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012cd2:	7dbb      	ldrb	r3, [r7, #22]
 8012cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d00d      	beq.n	8012cf8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6a1b      	ldr	r3, [r3, #32]
 8012ce0:	7b5b      	ldrb	r3, [r3, #13]
 8012ce2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012ce4:	7dbb      	ldrb	r3, [r7, #22]
 8012ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012cea:	75bb      	strb	r3, [r7, #22]
 8012cec:	7dbb      	ldrb	r3, [r7, #22]
 8012cee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	695a      	ldr	r2, [r3, #20]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012cf8:	7dba      	ldrb	r2, [r7, #22]
 8012cfa:	7d7b      	ldrb	r3, [r7, #21]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d115      	bne.n	8012d2c <dir_read+0xe6>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a1b      	ldr	r3, [r3, #32]
 8012d04:	330d      	adds	r3, #13
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	7d3a      	ldrb	r2, [r7, #20]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d10e      	bne.n	8012d2c <dir_read+0xe6>
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	691a      	ldr	r2, [r3, #16]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6a1b      	ldr	r3, [r3, #32]
 8012d16:	4619      	mov	r1, r3
 8012d18:	4610      	mov	r0, r2
 8012d1a:	f7ff fe19 	bl	8012950 <pick_lfn>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d003      	beq.n	8012d2c <dir_read+0xe6>
 8012d24:	7d7b      	ldrb	r3, [r7, #21]
 8012d26:	3b01      	subs	r3, #1
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	e000      	b.n	8012d2e <dir_read+0xe8>
 8012d2c:	23ff      	movs	r3, #255	@ 0xff
 8012d2e:	757b      	strb	r3, [r7, #21]
 8012d30:	e011      	b.n	8012d56 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012d32:	7d7b      	ldrb	r3, [r7, #21]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d109      	bne.n	8012d4c <dir_read+0x106>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a1b      	ldr	r3, [r3, #32]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7ff ff61 	bl	8012c04 <sum_sfn>
 8012d42:	4603      	mov	r3, r0
 8012d44:	461a      	mov	r2, r3
 8012d46:	7d3b      	ldrb	r3, [r7, #20]
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d015      	beq.n	8012d78 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d52:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012d54:	e010      	b.n	8012d78 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012d56:	2100      	movs	r1, #0
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff fc2d 	bl	80125b8 <dir_next>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d109      	bne.n	8012d7c <dir_read+0x136>
	while (dp->sect) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	69db      	ldr	r3, [r3, #28]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f47f af79 	bne.w	8012c64 <dir_read+0x1e>
 8012d72:	e004      	b.n	8012d7e <dir_read+0x138>
		if (res != FR_OK) break;
 8012d74:	bf00      	nop
 8012d76:	e002      	b.n	8012d7e <dir_read+0x138>
					break;
 8012d78:	bf00      	nop
 8012d7a:	e000      	b.n	8012d7e <dir_read+0x138>
		if (res != FR_OK) break;
 8012d7c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012d7e:	7dfb      	ldrb	r3, [r7, #23]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <dir_read+0x144>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	61da      	str	r2, [r3, #28]
	return res;
 8012d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3718      	adds	r7, #24
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012da2:	2100      	movs	r1, #0
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ff fb7e 	bl	80124a6 <dir_sdi>
 8012daa:	4603      	mov	r3, r0
 8012dac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d001      	beq.n	8012db8 <dir_find+0x24>
 8012db4:	7dfb      	ldrb	r3, [r7, #23]
 8012db6:	e0a9      	b.n	8012f0c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012db8:	23ff      	movs	r3, #255	@ 0xff
 8012dba:	753b      	strb	r3, [r7, #20]
 8012dbc:	7d3b      	ldrb	r3, [r7, #20]
 8012dbe:	757b      	strb	r3, [r7, #21]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	69db      	ldr	r3, [r3, #28]
 8012dcc:	4619      	mov	r1, r3
 8012dce:	6938      	ldr	r0, [r7, #16]
 8012dd0:	f7fe ff8a 	bl	8011ce8 <move_window>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012dd8:	7dfb      	ldrb	r3, [r7, #23]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f040 8090 	bne.w	8012f00 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6a1b      	ldr	r3, [r3, #32]
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012de8:	7dbb      	ldrb	r3, [r7, #22]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d102      	bne.n	8012df4 <dir_find+0x60>
 8012dee:	2304      	movs	r3, #4
 8012df0:	75fb      	strb	r3, [r7, #23]
 8012df2:	e08a      	b.n	8012f0a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6a1b      	ldr	r3, [r3, #32]
 8012df8:	330b      	adds	r3, #11
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012e00:	73fb      	strb	r3, [r7, #15]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	7bfa      	ldrb	r2, [r7, #15]
 8012e06:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012e08:	7dbb      	ldrb	r3, [r7, #22]
 8012e0a:	2be5      	cmp	r3, #229	@ 0xe5
 8012e0c:	d007      	beq.n	8012e1e <dir_find+0x8a>
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
 8012e10:	f003 0308 	and.w	r3, r3, #8
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d009      	beq.n	8012e2c <dir_find+0x98>
 8012e18:	7bfb      	ldrb	r3, [r7, #15]
 8012e1a:	2b0f      	cmp	r3, #15
 8012e1c:	d006      	beq.n	8012e2c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e1e:	23ff      	movs	r3, #255	@ 0xff
 8012e20:	757b      	strb	r3, [r7, #21]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f04f 32ff 	mov.w	r2, #4294967295
 8012e28:	631a      	str	r2, [r3, #48]	@ 0x30
 8012e2a:	e05e      	b.n	8012eea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
 8012e2e:	2b0f      	cmp	r3, #15
 8012e30:	d136      	bne.n	8012ea0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d154      	bne.n	8012eea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012e40:	7dbb      	ldrb	r3, [r7, #22]
 8012e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00d      	beq.n	8012e66 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6a1b      	ldr	r3, [r3, #32]
 8012e4e:	7b5b      	ldrb	r3, [r3, #13]
 8012e50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012e52:	7dbb      	ldrb	r3, [r7, #22]
 8012e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e58:	75bb      	strb	r3, [r7, #22]
 8012e5a:	7dbb      	ldrb	r3, [r7, #22]
 8012e5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	695a      	ldr	r2, [r3, #20]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012e66:	7dba      	ldrb	r2, [r7, #22]
 8012e68:	7d7b      	ldrb	r3, [r7, #21]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d115      	bne.n	8012e9a <dir_find+0x106>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6a1b      	ldr	r3, [r3, #32]
 8012e72:	330d      	adds	r3, #13
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	7d3a      	ldrb	r2, [r7, #20]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d10e      	bne.n	8012e9a <dir_find+0x106>
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	691a      	ldr	r2, [r3, #16]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6a1b      	ldr	r3, [r3, #32]
 8012e84:	4619      	mov	r1, r3
 8012e86:	4610      	mov	r0, r2
 8012e88:	f7ff fcf2 	bl	8012870 <cmp_lfn>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d003      	beq.n	8012e9a <dir_find+0x106>
 8012e92:	7d7b      	ldrb	r3, [r7, #21]
 8012e94:	3b01      	subs	r3, #1
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	e000      	b.n	8012e9c <dir_find+0x108>
 8012e9a:	23ff      	movs	r3, #255	@ 0xff
 8012e9c:	757b      	strb	r3, [r7, #21]
 8012e9e:	e024      	b.n	8012eea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012ea0:	7d7b      	ldrb	r3, [r7, #21]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d109      	bne.n	8012eba <dir_find+0x126>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6a1b      	ldr	r3, [r3, #32]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff feaa 	bl	8012c04 <sum_sfn>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	7d3b      	ldrb	r3, [r7, #20]
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d024      	beq.n	8012f04 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012ec0:	f003 0301 	and.w	r3, r3, #1
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d10a      	bne.n	8012ede <dir_find+0x14a>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6a18      	ldr	r0, [r3, #32]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	3324      	adds	r3, #36	@ 0x24
 8012ed0:	220b      	movs	r2, #11
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	f7fe fd15 	bl	8011902 <mem_cmp>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d014      	beq.n	8012f08 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012ede:	23ff      	movs	r3, #255	@ 0xff
 8012ee0:	757b      	strb	r3, [r7, #21]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ee8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012eea:	2100      	movs	r1, #0
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7ff fb63 	bl	80125b8 <dir_next>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	f43f af65 	beq.w	8012dc8 <dir_find+0x34>
 8012efe:	e004      	b.n	8012f0a <dir_find+0x176>
		if (res != FR_OK) break;
 8012f00:	bf00      	nop
 8012f02:	e002      	b.n	8012f0a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012f04:	bf00      	nop
 8012f06:	e000      	b.n	8012f0a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012f08:	bf00      	nop

	return res;
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3718      	adds	r7, #24
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b08c      	sub	sp, #48	@ 0x30
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012f28:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <dir_register+0x20>
 8012f30:	2306      	movs	r3, #6
 8012f32:	e0e0      	b.n	80130f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012f34:	2300      	movs	r3, #0
 8012f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f38:	e002      	b.n	8012f40 <dir_register+0x2c>
 8012f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	691a      	ldr	r2, [r3, #16]
 8012f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f46:	005b      	lsls	r3, r3, #1
 8012f48:	4413      	add	r3, r2
 8012f4a:	881b      	ldrh	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1f4      	bne.n	8012f3a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	220c      	movs	r2, #12
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fe fc94 	bl	801188a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012f62:	7dfb      	ldrb	r3, [r7, #23]
 8012f64:	f003 0301 	and.w	r3, r3, #1
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d032      	beq.n	8012fd2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2240      	movs	r2, #64	@ 0x40
 8012f70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012f74:	2301      	movs	r3, #1
 8012f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f78:	e016      	b.n	8012fa8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	691a      	ldr	r2, [r3, #16]
 8012f84:	f107 010c 	add.w	r1, r7, #12
 8012f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f8a:	f7ff fdad 	bl	8012ae8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7ff ff00 	bl	8012d94 <dir_find>
 8012f94:	4603      	mov	r3, r0
 8012f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012faa:	2b63      	cmp	r3, #99	@ 0x63
 8012fac:	d9e5      	bls.n	8012f7a <dir_register+0x66>
 8012fae:	e000      	b.n	8012fb2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8012fb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb4:	2b64      	cmp	r3, #100	@ 0x64
 8012fb6:	d101      	bne.n	8012fbc <dir_register+0xa8>
 8012fb8:	2307      	movs	r3, #7
 8012fba:	e09c      	b.n	80130f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fc0:	2b04      	cmp	r3, #4
 8012fc2:	d002      	beq.n	8012fca <dir_register+0xb6>
 8012fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fc8:	e095      	b.n	80130f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012fca:	7dfa      	ldrb	r2, [r7, #23]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012fd2:	7dfb      	ldrb	r3, [r7, #23]
 8012fd4:	f003 0302 	and.w	r3, r3, #2
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d007      	beq.n	8012fec <dir_register+0xd8>
 8012fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fde:	330c      	adds	r3, #12
 8012fe0:	4a47      	ldr	r2, [pc, #284]	@ (8013100 <dir_register+0x1ec>)
 8012fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fe6:	089b      	lsrs	r3, r3, #2
 8012fe8:	3301      	adds	r3, #1
 8012fea:	e000      	b.n	8012fee <dir_register+0xda>
 8012fec:	2301      	movs	r3, #1
 8012fee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012ff0:	6a39      	ldr	r1, [r7, #32]
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fbb6 	bl	8012764 <dir_alloc>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013002:	2b00      	cmp	r3, #0
 8013004:	d148      	bne.n	8013098 <dir_register+0x184>
 8013006:	6a3b      	ldr	r3, [r7, #32]
 8013008:	3b01      	subs	r3, #1
 801300a:	623b      	str	r3, [r7, #32]
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d042      	beq.n	8013098 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	695a      	ldr	r2, [r3, #20]
 8013016:	6a3b      	ldr	r3, [r7, #32]
 8013018:	015b      	lsls	r3, r3, #5
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	4619      	mov	r1, r3
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff fa41 	bl	80124a6 <dir_sdi>
 8013024:	4603      	mov	r3, r0
 8013026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801302a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801302e:	2b00      	cmp	r3, #0
 8013030:	d132      	bne.n	8013098 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	3324      	adds	r3, #36	@ 0x24
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff fde4 	bl	8012c04 <sum_sfn>
 801303c:	4603      	mov	r3, r0
 801303e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	69db      	ldr	r3, [r3, #28]
 8013044:	4619      	mov	r1, r3
 8013046:	69f8      	ldr	r0, [r7, #28]
 8013048:	f7fe fe4e 	bl	8011ce8 <move_window>
 801304c:	4603      	mov	r3, r0
 801304e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8013052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013056:	2b00      	cmp	r3, #0
 8013058:	d11d      	bne.n	8013096 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	6918      	ldr	r0, [r3, #16]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a19      	ldr	r1, [r3, #32]
 8013062:	6a3b      	ldr	r3, [r7, #32]
 8013064:	b2da      	uxtb	r2, r3
 8013066:	7efb      	ldrb	r3, [r7, #27]
 8013068:	f7ff fcd6 	bl	8012a18 <put_lfn>
				fs->wflag = 1;
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	2201      	movs	r2, #1
 8013070:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013072:	2100      	movs	r1, #0
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7ff fa9f 	bl	80125b8 <dir_next>
 801307a:	4603      	mov	r3, r0
 801307c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013084:	2b00      	cmp	r3, #0
 8013086:	d107      	bne.n	8013098 <dir_register+0x184>
 8013088:	6a3b      	ldr	r3, [r7, #32]
 801308a:	3b01      	subs	r3, #1
 801308c:	623b      	str	r3, [r7, #32]
 801308e:	6a3b      	ldr	r3, [r7, #32]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d1d5      	bne.n	8013040 <dir_register+0x12c>
 8013094:	e000      	b.n	8013098 <dir_register+0x184>
				if (res != FR_OK) break;
 8013096:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801309c:	2b00      	cmp	r3, #0
 801309e:	d128      	bne.n	80130f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	69db      	ldr	r3, [r3, #28]
 80130a4:	4619      	mov	r1, r3
 80130a6:	69f8      	ldr	r0, [r7, #28]
 80130a8:	f7fe fe1e 	bl	8011ce8 <move_window>
 80130ac:	4603      	mov	r3, r0
 80130ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80130b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d11b      	bne.n	80130f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6a1b      	ldr	r3, [r3, #32]
 80130be:	2220      	movs	r2, #32
 80130c0:	2100      	movs	r1, #0
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7fe fc02 	bl	80118cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a18      	ldr	r0, [r3, #32]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	3324      	adds	r3, #36	@ 0x24
 80130d0:	220b      	movs	r2, #11
 80130d2:	4619      	mov	r1, r3
 80130d4:	f7fe fbd9 	bl	801188a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6a1b      	ldr	r3, [r3, #32]
 80130e2:	330c      	adds	r3, #12
 80130e4:	f002 0218 	and.w	r2, r2, #24
 80130e8:	b2d2      	uxtb	r2, r2
 80130ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	2201      	movs	r2, #1
 80130f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80130f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3730      	adds	r7, #48	@ 0x30
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	4ec4ec4f 	.word	0x4ec4ec4f

08013104 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b086      	sub	sp, #24
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	695b      	ldr	r3, [r3, #20]
 8013116:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013120:	d007      	beq.n	8013132 <dir_remove+0x2e>
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013126:	4619      	mov	r1, r3
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff f9bc 	bl	80124a6 <dir_sdi>
 801312e:	4603      	mov	r3, r0
 8013130:	e000      	b.n	8013134 <dir_remove+0x30>
 8013132:	2300      	movs	r3, #0
 8013134:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013136:	7dfb      	ldrb	r3, [r7, #23]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d128      	bne.n	801318e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	69db      	ldr	r3, [r3, #28]
 8013140:	4619      	mov	r1, r3
 8013142:	6938      	ldr	r0, [r7, #16]
 8013144:	f7fe fdd0 	bl	8011ce8 <move_window>
 8013148:	4603      	mov	r3, r0
 801314a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801314c:	7dfb      	ldrb	r3, [r7, #23]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d115      	bne.n	801317e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a1b      	ldr	r3, [r3, #32]
 8013156:	22e5      	movs	r2, #229	@ 0xe5
 8013158:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	2201      	movs	r2, #1
 801315e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	695b      	ldr	r3, [r3, #20]
 8013164:	68fa      	ldr	r2, [r7, #12]
 8013166:	429a      	cmp	r2, r3
 8013168:	d90b      	bls.n	8013182 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801316a:	2100      	movs	r1, #0
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7ff fa23 	bl	80125b8 <dir_next>
 8013172:	4603      	mov	r3, r0
 8013174:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8013176:	7dfb      	ldrb	r3, [r7, #23]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d0df      	beq.n	801313c <dir_remove+0x38>
 801317c:	e002      	b.n	8013184 <dir_remove+0x80>
			if (res != FR_OK) break;
 801317e:	bf00      	nop
 8013180:	e000      	b.n	8013184 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8013182:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	2b04      	cmp	r3, #4
 8013188:	d101      	bne.n	801318e <dir_remove+0x8a>
 801318a:	2302      	movs	r3, #2
 801318c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013190:	4618      	mov	r0, r3
 8013192:	3718      	adds	r7, #24
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08a      	sub	sp, #40	@ 0x28
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	613b      	str	r3, [r7, #16]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	60fb      	str	r3, [r7, #12]
 80131b0:	2300      	movs	r3, #0
 80131b2:	617b      	str	r3, [r7, #20]
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	61ba      	str	r2, [r7, #24]
 80131be:	693a      	ldr	r2, [r7, #16]
 80131c0:	4413      	add	r3, r2
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80131c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131c8:	2b1f      	cmp	r3, #31
 80131ca:	d940      	bls.n	801324e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80131cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80131d0:	d006      	beq.n	80131e0 <create_name+0x48>
 80131d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80131d6:	d110      	bne.n	80131fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80131d8:	e002      	b.n	80131e0 <create_name+0x48>
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	3301      	adds	r3, #1
 80131de:	61bb      	str	r3, [r7, #24]
 80131e0:	693a      	ldr	r2, [r7, #16]
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	4413      	add	r3, r2
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80131ea:	d0f6      	beq.n	80131da <create_name+0x42>
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	4413      	add	r3, r2
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80131f6:	d0f0      	beq.n	80131da <create_name+0x42>
			break;
 80131f8:	e02a      	b.n	8013250 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2bfe      	cmp	r3, #254	@ 0xfe
 80131fe:	d901      	bls.n	8013204 <create_name+0x6c>
 8013200:	2306      	movs	r3, #6
 8013202:	e1ca      	b.n	801359a <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013206:	b2db      	uxtb	r3, r3
 8013208:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801320a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801320c:	2101      	movs	r1, #1
 801320e:	4618      	mov	r0, r3
 8013210:	f002 fa9a 	bl	8015748 <ff_convert>
 8013214:	4603      	mov	r3, r0
 8013216:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <create_name+0x8a>
 801321e:	2306      	movs	r3, #6
 8013220:	e1bb      	b.n	801359a <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013224:	2b7f      	cmp	r3, #127	@ 0x7f
 8013226:	d809      	bhi.n	801323c <create_name+0xa4>
 8013228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801322a:	4619      	mov	r1, r3
 801322c:	489e      	ldr	r0, [pc, #632]	@ (80134a8 <create_name+0x310>)
 801322e:	f7fe fb8f 	bl	8011950 <chk_chr>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d001      	beq.n	801323c <create_name+0xa4>
 8013238:	2306      	movs	r3, #6
 801323a:	e1ae      	b.n	801359a <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	1c5a      	adds	r2, r3, #1
 8013240:	617a      	str	r2, [r7, #20]
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	4413      	add	r3, r2
 8013248:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801324a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801324c:	e7b4      	b.n	80131b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801324e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	441a      	add	r2, r3
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801325a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801325c:	2b1f      	cmp	r3, #31
 801325e:	d801      	bhi.n	8013264 <create_name+0xcc>
 8013260:	2304      	movs	r3, #4
 8013262:	e000      	b.n	8013266 <create_name+0xce>
 8013264:	2300      	movs	r3, #0
 8013266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d109      	bne.n	8013284 <create_name+0xec>
 8013270:	697a      	ldr	r2, [r7, #20]
 8013272:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013276:	4413      	add	r3, r2
 8013278:	005b      	lsls	r3, r3, #1
 801327a:	68fa      	ldr	r2, [r7, #12]
 801327c:	4413      	add	r3, r2
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	2b2e      	cmp	r3, #46	@ 0x2e
 8013282:	d015      	beq.n	80132b0 <create_name+0x118>
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2b02      	cmp	r3, #2
 8013288:	d14d      	bne.n	8013326 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801328a:	697a      	ldr	r2, [r7, #20]
 801328c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013290:	4413      	add	r3, r2
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	4413      	add	r3, r2
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	2b2e      	cmp	r3, #46	@ 0x2e
 801329c:	d143      	bne.n	8013326 <create_name+0x18e>
 801329e:	697a      	ldr	r2, [r7, #20]
 80132a0:	4b82      	ldr	r3, [pc, #520]	@ (80134ac <create_name+0x314>)
 80132a2:	4413      	add	r3, r2
 80132a4:	005b      	lsls	r3, r3, #1
 80132a6:	68fa      	ldr	r2, [r7, #12]
 80132a8:	4413      	add	r3, r2
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80132ae:	d13a      	bne.n	8013326 <create_name+0x18e>
		lfn[di] = 0;
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	005b      	lsls	r3, r3, #1
 80132b4:	68fa      	ldr	r2, [r7, #12]
 80132b6:	4413      	add	r3, r2
 80132b8:	2200      	movs	r2, #0
 80132ba:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80132bc:	2300      	movs	r3, #0
 80132be:	623b      	str	r3, [r7, #32]
 80132c0:	e00f      	b.n	80132e2 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80132c2:	6a3a      	ldr	r2, [r7, #32]
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d201      	bcs.n	80132ce <create_name+0x136>
 80132ca:	212e      	movs	r1, #46	@ 0x2e
 80132cc:	e000      	b.n	80132d0 <create_name+0x138>
 80132ce:	2120      	movs	r1, #32
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	6a3b      	ldr	r3, [r7, #32]
 80132d4:	4413      	add	r3, r2
 80132d6:	3324      	adds	r3, #36	@ 0x24
 80132d8:	460a      	mov	r2, r1
 80132da:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80132dc:	6a3b      	ldr	r3, [r7, #32]
 80132de:	3301      	adds	r3, #1
 80132e0:	623b      	str	r3, [r7, #32]
 80132e2:	6a3b      	ldr	r3, [r7, #32]
 80132e4:	2b0a      	cmp	r3, #10
 80132e6:	d9ec      	bls.n	80132c2 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80132e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132ec:	f043 0320 	orr.w	r3, r3, #32
 80132f0:	b2d9      	uxtb	r1, r3
 80132f2:	687a      	ldr	r2, [r7, #4]
 80132f4:	6a3b      	ldr	r3, [r7, #32]
 80132f6:	4413      	add	r3, r2
 80132f8:	3324      	adds	r3, #36	@ 0x24
 80132fa:	460a      	mov	r2, r1
 80132fc:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80132fe:	2300      	movs	r3, #0
 8013300:	e14b      	b.n	801359a <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8013302:	697a      	ldr	r2, [r7, #20]
 8013304:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013308:	4413      	add	r3, r2
 801330a:	005b      	lsls	r3, r3, #1
 801330c:	68fa      	ldr	r2, [r7, #12]
 801330e:	4413      	add	r3, r2
 8013310:	881b      	ldrh	r3, [r3, #0]
 8013312:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013316:	2b20      	cmp	r3, #32
 8013318:	d002      	beq.n	8013320 <create_name+0x188>
 801331a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801331c:	2b2e      	cmp	r3, #46	@ 0x2e
 801331e:	d106      	bne.n	801332e <create_name+0x196>
		di--;
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	3b01      	subs	r3, #1
 8013324:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d1ea      	bne.n	8013302 <create_name+0x16a>
 801332c:	e000      	b.n	8013330 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 801332e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	005b      	lsls	r3, r3, #1
 8013334:	68fa      	ldr	r2, [r7, #12]
 8013336:	4413      	add	r3, r2
 8013338:	2200      	movs	r2, #0
 801333a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <create_name+0x1ae>
 8013342:	2306      	movs	r3, #6
 8013344:	e129      	b.n	801359a <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	3324      	adds	r3, #36	@ 0x24
 801334a:	220b      	movs	r2, #11
 801334c:	2120      	movs	r1, #32
 801334e:	4618      	mov	r0, r3
 8013350:	f7fe fabc 	bl	80118cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013354:	2300      	movs	r3, #0
 8013356:	61bb      	str	r3, [r7, #24]
 8013358:	e002      	b.n	8013360 <create_name+0x1c8>
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	3301      	adds	r3, #1
 801335e:	61bb      	str	r3, [r7, #24]
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	4413      	add	r3, r2
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	2b20      	cmp	r3, #32
 801336c:	d0f5      	beq.n	801335a <create_name+0x1c2>
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	005b      	lsls	r3, r3, #1
 8013372:	68fa      	ldr	r2, [r7, #12]
 8013374:	4413      	add	r3, r2
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	2b2e      	cmp	r3, #46	@ 0x2e
 801337a:	d0ee      	beq.n	801335a <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d009      	beq.n	8013396 <create_name+0x1fe>
 8013382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013386:	f043 0303 	orr.w	r3, r3, #3
 801338a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801338e:	e002      	b.n	8013396 <create_name+0x1fe>
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	3b01      	subs	r3, #1
 8013394:	617b      	str	r3, [r7, #20]
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d009      	beq.n	80133b0 <create_name+0x218>
 801339c:	697a      	ldr	r2, [r7, #20]
 801339e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80133a2:	4413      	add	r3, r2
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	4413      	add	r3, r2
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80133ae:	d1ef      	bne.n	8013390 <create_name+0x1f8>

	i = b = 0; ni = 8;
 80133b0:	2300      	movs	r3, #0
 80133b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80133b6:	2300      	movs	r3, #0
 80133b8:	623b      	str	r3, [r7, #32]
 80133ba:	2308      	movs	r3, #8
 80133bc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	1c5a      	adds	r2, r3, #1
 80133c2:	61ba      	str	r2, [r7, #24]
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	68fa      	ldr	r2, [r7, #12]
 80133c8:	4413      	add	r3, r2
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80133ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f000 8098 	beq.w	8013506 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80133d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133d8:	2b20      	cmp	r3, #32
 80133da:	d006      	beq.n	80133ea <create_name+0x252>
 80133dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133de:	2b2e      	cmp	r3, #46	@ 0x2e
 80133e0:	d10a      	bne.n	80133f8 <create_name+0x260>
 80133e2:	69ba      	ldr	r2, [r7, #24]
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d006      	beq.n	80133f8 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 80133ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133ee:	f043 0303 	orr.w	r3, r3, #3
 80133f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133f6:	e085      	b.n	8013504 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80133f8:	6a3a      	ldr	r2, [r7, #32]
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d203      	bcs.n	8013408 <create_name+0x270>
 8013400:	69ba      	ldr	r2, [r7, #24]
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	429a      	cmp	r2, r3
 8013406:	d123      	bne.n	8013450 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	2b0b      	cmp	r3, #11
 801340c:	d106      	bne.n	801341c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801340e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013412:	f043 0303 	orr.w	r3, r3, #3
 8013416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801341a:	e077      	b.n	801350c <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801341c:	69ba      	ldr	r2, [r7, #24]
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	429a      	cmp	r2, r3
 8013422:	d005      	beq.n	8013430 <create_name+0x298>
 8013424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013428:	f043 0303 	orr.w	r3, r3, #3
 801342c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013430:	69ba      	ldr	r2, [r7, #24]
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	429a      	cmp	r2, r3
 8013436:	d868      	bhi.n	801350a <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	61bb      	str	r3, [r7, #24]
 801343c:	2308      	movs	r3, #8
 801343e:	623b      	str	r3, [r7, #32]
 8013440:	230b      	movs	r3, #11
 8013442:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013444:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801344e:	e059      	b.n	8013504 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013452:	2b7f      	cmp	r3, #127	@ 0x7f
 8013454:	d914      	bls.n	8013480 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013458:	2100      	movs	r1, #0
 801345a:	4618      	mov	r0, r3
 801345c:	f002 f974 	bl	8015748 <ff_convert>
 8013460:	4603      	mov	r3, r0
 8013462:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013466:	2b00      	cmp	r3, #0
 8013468:	d004      	beq.n	8013474 <create_name+0x2dc>
 801346a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801346c:	3b80      	subs	r3, #128	@ 0x80
 801346e:	4a10      	ldr	r2, [pc, #64]	@ (80134b0 <create_name+0x318>)
 8013470:	5cd3      	ldrb	r3, [r2, r3]
 8013472:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013478:	f043 0302 	orr.w	r3, r3, #2
 801347c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013480:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013482:	2b00      	cmp	r3, #0
 8013484:	d007      	beq.n	8013496 <create_name+0x2fe>
 8013486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013488:	4619      	mov	r1, r3
 801348a:	480a      	ldr	r0, [pc, #40]	@ (80134b4 <create_name+0x31c>)
 801348c:	f7fe fa60 	bl	8011950 <chk_chr>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d010      	beq.n	80134b8 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013496:	235f      	movs	r3, #95	@ 0x5f
 8013498:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801349a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801349e:	f043 0303 	orr.w	r3, r3, #3
 80134a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80134a6:	e023      	b.n	80134f0 <create_name+0x358>
 80134a8:	0801884c 	.word	0x0801884c
 80134ac:	7ffffffe 	.word	0x7ffffffe
 80134b0:	080188d4 	.word	0x080188d4
 80134b4:	08018858 	.word	0x08018858
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80134b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134ba:	2b40      	cmp	r3, #64	@ 0x40
 80134bc:	d909      	bls.n	80134d2 <create_name+0x33a>
 80134be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80134c2:	d806      	bhi.n	80134d2 <create_name+0x33a>
					b |= 2;
 80134c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134c8:	f043 0302 	orr.w	r3, r3, #2
 80134cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80134d0:	e00e      	b.n	80134f0 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80134d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134d4:	2b60      	cmp	r3, #96	@ 0x60
 80134d6:	d90b      	bls.n	80134f0 <create_name+0x358>
 80134d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134da:	2b7a      	cmp	r3, #122	@ 0x7a
 80134dc:	d808      	bhi.n	80134f0 <create_name+0x358>
						b |= 1; w -= 0x20;
 80134de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134e2:	f043 0301 	orr.w	r3, r3, #1
 80134e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80134ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134ec:	3b20      	subs	r3, #32
 80134ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80134f0:	6a3b      	ldr	r3, [r7, #32]
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	623a      	str	r2, [r7, #32]
 80134f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134f8:	b2d1      	uxtb	r1, r2
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	4413      	add	r3, r2
 80134fe:	460a      	mov	r2, r1
 8013500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013504:	e75b      	b.n	80133be <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8013506:	bf00      	nop
 8013508:	e000      	b.n	801350c <create_name+0x374>
			if (si > di) break;			/* No extension */
 801350a:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013512:	2be5      	cmp	r3, #229	@ 0xe5
 8013514:	d103      	bne.n	801351e <create_name+0x386>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2205      	movs	r2, #5
 801351a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	2b08      	cmp	r3, #8
 8013522:	d104      	bne.n	801352e <create_name+0x396>
 8013524:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801352e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013532:	f003 030c 	and.w	r3, r3, #12
 8013536:	2b0c      	cmp	r3, #12
 8013538:	d005      	beq.n	8013546 <create_name+0x3ae>
 801353a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801353e:	f003 0303 	and.w	r3, r3, #3
 8013542:	2b03      	cmp	r3, #3
 8013544:	d105      	bne.n	8013552 <create_name+0x3ba>
 8013546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801354a:	f043 0302 	orr.w	r3, r3, #2
 801354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013556:	f003 0302 	and.w	r3, r3, #2
 801355a:	2b00      	cmp	r3, #0
 801355c:	d117      	bne.n	801358e <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801355e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013562:	f003 0303 	and.w	r3, r3, #3
 8013566:	2b01      	cmp	r3, #1
 8013568:	d105      	bne.n	8013576 <create_name+0x3de>
 801356a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801356e:	f043 0310 	orr.w	r3, r3, #16
 8013572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013576:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801357a:	f003 030c 	and.w	r3, r3, #12
 801357e:	2b04      	cmp	r3, #4
 8013580:	d105      	bne.n	801358e <create_name+0x3f6>
 8013582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013586:	f043 0308 	orr.w	r3, r3, #8
 801358a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013594:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8013598:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801359a:	4618      	mov	r0, r3
 801359c:	3728      	adds	r7, #40	@ 0x28
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop

080135a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b086      	sub	sp, #24
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80135be:	d00b      	beq.n	80135d8 <follow_path+0x34>
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80135c6:	d007      	beq.n	80135d8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	69da      	ldr	r2, [r3, #28]
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	609a      	str	r2, [r3, #8]
 80135d0:	e00d      	b.n	80135ee <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	3301      	adds	r3, #1
 80135d6:	603b      	str	r3, [r7, #0]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80135de:	d0f8      	beq.n	80135d2 <follow_path+0x2e>
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80135e6:	d0f4      	beq.n	80135d2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	2200      	movs	r2, #0
 80135ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	2b1f      	cmp	r3, #31
 80135f4:	d80a      	bhi.n	801360c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2280      	movs	r2, #128	@ 0x80
 80135fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80135fe:	2100      	movs	r1, #0
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7fe ff50 	bl	80124a6 <dir_sdi>
 8013606:	4603      	mov	r3, r0
 8013608:	75fb      	strb	r3, [r7, #23]
 801360a:	e05b      	b.n	80136c4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801360c:	463b      	mov	r3, r7
 801360e:	4619      	mov	r1, r3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7ff fdc1 	bl	8013198 <create_name>
 8013616:	4603      	mov	r3, r0
 8013618:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d14c      	bne.n	80136ba <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ff fbb7 	bl	8012d94 <dir_find>
 8013626:	4603      	mov	r3, r0
 8013628:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013630:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013632:	7dfb      	ldrb	r3, [r7, #23]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d01b      	beq.n	8013670 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013638:	7dfb      	ldrb	r3, [r7, #23]
 801363a:	2b04      	cmp	r3, #4
 801363c:	d13f      	bne.n	80136be <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801363e:	7afb      	ldrb	r3, [r7, #11]
 8013640:	f003 0320 	and.w	r3, r3, #32
 8013644:	2b00      	cmp	r3, #0
 8013646:	d00b      	beq.n	8013660 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013648:	7afb      	ldrb	r3, [r7, #11]
 801364a:	f003 0304 	and.w	r3, r3, #4
 801364e:	2b00      	cmp	r3, #0
 8013650:	d031      	beq.n	80136b6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2280      	movs	r2, #128	@ 0x80
 8013656:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 801365a:	2300      	movs	r3, #0
 801365c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801365e:	e02e      	b.n	80136be <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013660:	7afb      	ldrb	r3, [r7, #11]
 8013662:	f003 0304 	and.w	r3, r3, #4
 8013666:	2b00      	cmp	r3, #0
 8013668:	d129      	bne.n	80136be <follow_path+0x11a>
 801366a:	2305      	movs	r3, #5
 801366c:	75fb      	strb	r3, [r7, #23]
				break;
 801366e:	e026      	b.n	80136be <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013670:	7afb      	ldrb	r3, [r7, #11]
 8013672:	f003 0304 	and.w	r3, r3, #4
 8013676:	2b00      	cmp	r3, #0
 8013678:	d123      	bne.n	80136c2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	799b      	ldrb	r3, [r3, #6]
 801367e:	f003 0310 	and.w	r3, r3, #16
 8013682:	2b00      	cmp	r3, #0
 8013684:	d102      	bne.n	801368c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8013686:	2305      	movs	r3, #5
 8013688:	75fb      	strb	r3, [r7, #23]
 801368a:	e01b      	b.n	80136c4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	695b      	ldr	r3, [r3, #20]
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	8992      	ldrh	r2, [r2, #12]
 801369a:	fbb3 f0f2 	udiv	r0, r3, r2
 801369e:	fb00 f202 	mul.w	r2, r0, r2
 80136a2:	1a9b      	subs	r3, r3, r2
 80136a4:	440b      	add	r3, r1
 80136a6:	4619      	mov	r1, r3
 80136a8:	68f8      	ldr	r0, [r7, #12]
 80136aa:	f7ff f8a2 	bl	80127f2 <ld_clust>
 80136ae:	4602      	mov	r2, r0
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	609a      	str	r2, [r3, #8]
 80136b4:	e7aa      	b.n	801360c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80136b6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80136b8:	e7a8      	b.n	801360c <follow_path+0x68>
			if (res != FR_OK) break;
 80136ba:	bf00      	nop
 80136bc:	e002      	b.n	80136c4 <follow_path+0x120>
				break;
 80136be:	bf00      	nop
 80136c0:	e000      	b.n	80136c4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80136c2:	bf00      	nop
			}
		}
	}

	return res;
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3718      	adds	r7, #24
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80136ce:	b480      	push	{r7}
 80136d0:	b087      	sub	sp, #28
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80136d6:	f04f 33ff 	mov.w	r3, #4294967295
 80136da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d031      	beq.n	8013748 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	617b      	str	r3, [r7, #20]
 80136ea:	e002      	b.n	80136f2 <get_ldnumber+0x24>
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	3301      	adds	r3, #1
 80136f0:	617b      	str	r3, [r7, #20]
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	2b1f      	cmp	r3, #31
 80136f8:	d903      	bls.n	8013702 <get_ldnumber+0x34>
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8013700:	d1f4      	bne.n	80136ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	2b3a      	cmp	r3, #58	@ 0x3a
 8013708:	d11c      	bne.n	8013744 <get_ldnumber+0x76>
			tp = *path;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	1c5a      	adds	r2, r3, #1
 8013714:	60fa      	str	r2, [r7, #12]
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	3b30      	subs	r3, #48	@ 0x30
 801371a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	2b09      	cmp	r3, #9
 8013720:	d80e      	bhi.n	8013740 <get_ldnumber+0x72>
 8013722:	68fa      	ldr	r2, [r7, #12]
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	429a      	cmp	r2, r3
 8013728:	d10a      	bne.n	8013740 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d107      	bne.n	8013740 <get_ldnumber+0x72>
					vol = (int)i;
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	3301      	adds	r3, #1
 8013738:	617b      	str	r3, [r7, #20]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	697a      	ldr	r2, [r7, #20]
 801373e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	e002      	b.n	801374a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013744:	2300      	movs	r3, #0
 8013746:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013748:	693b      	ldr	r3, [r7, #16]
}
 801374a:	4618      	mov	r0, r3
 801374c:	371c      	adds	r7, #28
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr
	...

08013758 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	70da      	strb	r2, [r3, #3]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f04f 32ff 	mov.w	r2, #4294967295
 801376e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013770:	6839      	ldr	r1, [r7, #0]
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7fe fab8 	bl	8011ce8 <move_window>
 8013778:	4603      	mov	r3, r0
 801377a:	2b00      	cmp	r3, #0
 801377c:	d001      	beq.n	8013782 <check_fs+0x2a>
 801377e:	2304      	movs	r3, #4
 8013780:	e038      	b.n	80137f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	333c      	adds	r3, #60	@ 0x3c
 8013786:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801378a:	4618      	mov	r0, r3
 801378c:	f7fd fffa 	bl	8011784 <ld_word>
 8013790:	4603      	mov	r3, r0
 8013792:	461a      	mov	r2, r3
 8013794:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013798:	429a      	cmp	r2, r3
 801379a:	d001      	beq.n	80137a0 <check_fs+0x48>
 801379c:	2303      	movs	r3, #3
 801379e:	e029      	b.n	80137f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137a6:	2be9      	cmp	r3, #233	@ 0xe9
 80137a8:	d009      	beq.n	80137be <check_fs+0x66>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137b0:	2beb      	cmp	r3, #235	@ 0xeb
 80137b2:	d11e      	bne.n	80137f2 <check_fs+0x9a>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80137ba:	2b90      	cmp	r3, #144	@ 0x90
 80137bc:	d119      	bne.n	80137f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	333c      	adds	r3, #60	@ 0x3c
 80137c2:	3336      	adds	r3, #54	@ 0x36
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fd fff6 	bl	80117b6 <ld_dword>
 80137ca:	4603      	mov	r3, r0
 80137cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80137d0:	4a0a      	ldr	r2, [pc, #40]	@ (80137fc <check_fs+0xa4>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d101      	bne.n	80137da <check_fs+0x82>
 80137d6:	2300      	movs	r3, #0
 80137d8:	e00c      	b.n	80137f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	333c      	adds	r3, #60	@ 0x3c
 80137de:	3352      	adds	r3, #82	@ 0x52
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fd ffe8 	bl	80117b6 <ld_dword>
 80137e6:	4603      	mov	r3, r0
 80137e8:	4a05      	ldr	r2, [pc, #20]	@ (8013800 <check_fs+0xa8>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d101      	bne.n	80137f2 <check_fs+0x9a>
 80137ee:	2300      	movs	r3, #0
 80137f0:	e000      	b.n	80137f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80137f2:	2302      	movs	r3, #2
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	00544146 	.word	0x00544146
 8013800:	33544146 	.word	0x33544146

08013804 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b096      	sub	sp, #88	@ 0x58
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	4613      	mov	r3, r2
 8013810:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	2200      	movs	r2, #0
 8013816:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	f7ff ff58 	bl	80136ce <get_ldnumber>
 801381e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013822:	2b00      	cmp	r3, #0
 8013824:	da01      	bge.n	801382a <find_volume+0x26>
 8013826:	230b      	movs	r3, #11
 8013828:	e268      	b.n	8013cfc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801382a:	4a9f      	ldr	r2, [pc, #636]	@ (8013aa8 <find_volume+0x2a4>)
 801382c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013832:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013836:	2b00      	cmp	r3, #0
 8013838:	d101      	bne.n	801383e <find_volume+0x3a>
 801383a:	230c      	movs	r3, #12
 801383c:	e25e      	b.n	8013cfc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013842:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	f023 0301 	bic.w	r3, r3, #1
 801384a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d01a      	beq.n	801388a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	4618      	mov	r0, r3
 801385a:	f7fd fef3 	bl	8011644 <disk_status>
 801385e:	4603      	mov	r3, r0
 8013860:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10c      	bne.n	801388a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013870:	79fb      	ldrb	r3, [r7, #7]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d007      	beq.n	8013886 <find_volume+0x82>
 8013876:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801387a:	f003 0304 	and.w	r3, r3, #4
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013882:	230a      	movs	r3, #10
 8013884:	e23a      	b.n	8013cfc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8013886:	2300      	movs	r3, #0
 8013888:	e238      	b.n	8013cfc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801388c:	2200      	movs	r2, #0
 801388e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013892:	b2da      	uxtb	r2, r3
 8013894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013896:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389a:	785b      	ldrb	r3, [r3, #1]
 801389c:	4618      	mov	r0, r3
 801389e:	f7fd feeb 	bl	8011678 <disk_initialize>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80138a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80138ac:	f003 0301 	and.w	r3, r3, #1
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d001      	beq.n	80138b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80138b4:	2303      	movs	r3, #3
 80138b6:	e221      	b.n	8013cfc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80138b8:	79fb      	ldrb	r3, [r7, #7]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d007      	beq.n	80138ce <find_volume+0xca>
 80138be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80138c2:	f003 0304 	and.w	r3, r3, #4
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d001      	beq.n	80138ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80138ca:	230a      	movs	r3, #10
 80138cc:	e216      	b.n	8013cfc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80138ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d0:	7858      	ldrb	r0, [r3, #1]
 80138d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d4:	330c      	adds	r3, #12
 80138d6:	461a      	mov	r2, r3
 80138d8:	2102      	movs	r1, #2
 80138da:	f7fd ff35 	bl	8011748 <disk_ioctl>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d001      	beq.n	80138e8 <find_volume+0xe4>
 80138e4:	2301      	movs	r3, #1
 80138e6:	e209      	b.n	8013cfc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80138e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ea:	899b      	ldrh	r3, [r3, #12]
 80138ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80138f0:	d80d      	bhi.n	801390e <find_volume+0x10a>
 80138f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f4:	899b      	ldrh	r3, [r3, #12]
 80138f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138fa:	d308      	bcc.n	801390e <find_volume+0x10a>
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	899b      	ldrh	r3, [r3, #12]
 8013900:	461a      	mov	r2, r3
 8013902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013904:	899b      	ldrh	r3, [r3, #12]
 8013906:	3b01      	subs	r3, #1
 8013908:	4013      	ands	r3, r2
 801390a:	2b00      	cmp	r3, #0
 801390c:	d001      	beq.n	8013912 <find_volume+0x10e>
 801390e:	2301      	movs	r3, #1
 8013910:	e1f4      	b.n	8013cfc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013912:	2300      	movs	r3, #0
 8013914:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013916:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013918:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801391a:	f7ff ff1d 	bl	8013758 <check_fs>
 801391e:	4603      	mov	r3, r0
 8013920:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013928:	2b02      	cmp	r3, #2
 801392a:	d149      	bne.n	80139c0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801392c:	2300      	movs	r3, #0
 801392e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013930:	e01e      	b.n	8013970 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013934:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801393a:	011b      	lsls	r3, r3, #4
 801393c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013940:	4413      	add	r3, r2
 8013942:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013946:	3304      	adds	r3, #4
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d006      	beq.n	801395c <find_volume+0x158>
 801394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013950:	3308      	adds	r3, #8
 8013952:	4618      	mov	r0, r3
 8013954:	f7fd ff2f 	bl	80117b6 <ld_dword>
 8013958:	4602      	mov	r2, r0
 801395a:	e000      	b.n	801395e <find_volume+0x15a>
 801395c:	2200      	movs	r2, #0
 801395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	3358      	adds	r3, #88	@ 0x58
 8013964:	443b      	add	r3, r7
 8013966:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801396c:	3301      	adds	r3, #1
 801396e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013972:	2b03      	cmp	r3, #3
 8013974:	d9dd      	bls.n	8013932 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013976:	2300      	movs	r3, #0
 8013978:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801397c:	2b00      	cmp	r3, #0
 801397e:	d002      	beq.n	8013986 <find_volume+0x182>
 8013980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013982:	3b01      	subs	r3, #1
 8013984:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	3358      	adds	r3, #88	@ 0x58
 801398c:	443b      	add	r3, r7
 801398e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013992:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013996:	2b00      	cmp	r3, #0
 8013998:	d005      	beq.n	80139a6 <find_volume+0x1a2>
 801399a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801399c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801399e:	f7ff fedb 	bl	8013758 <check_fs>
 80139a2:	4603      	mov	r3, r0
 80139a4:	e000      	b.n	80139a8 <find_volume+0x1a4>
 80139a6:	2303      	movs	r3, #3
 80139a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80139ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d905      	bls.n	80139c0 <find_volume+0x1bc>
 80139b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139b6:	3301      	adds	r3, #1
 80139b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80139ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139bc:	2b03      	cmp	r3, #3
 80139be:	d9e2      	bls.n	8013986 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80139c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139c4:	2b04      	cmp	r3, #4
 80139c6:	d101      	bne.n	80139cc <find_volume+0x1c8>
 80139c8:	2301      	movs	r3, #1
 80139ca:	e197      	b.n	8013cfc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80139cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d901      	bls.n	80139d8 <find_volume+0x1d4>
 80139d4:	230d      	movs	r3, #13
 80139d6:	e191      	b.n	8013cfc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80139d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139da:	333c      	adds	r3, #60	@ 0x3c
 80139dc:	330b      	adds	r3, #11
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fd fed0 	bl	8011784 <ld_word>
 80139e4:	4603      	mov	r3, r0
 80139e6:	461a      	mov	r2, r3
 80139e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ea:	899b      	ldrh	r3, [r3, #12]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d001      	beq.n	80139f4 <find_volume+0x1f0>
 80139f0:	230d      	movs	r3, #13
 80139f2:	e183      	b.n	8013cfc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80139f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f6:	333c      	adds	r3, #60	@ 0x3c
 80139f8:	3316      	adds	r3, #22
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fd fec2 	bl	8011784 <ld_word>
 8013a00:	4603      	mov	r3, r0
 8013a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d106      	bne.n	8013a18 <find_volume+0x214>
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0c:	333c      	adds	r3, #60	@ 0x3c
 8013a0e:	3324      	adds	r3, #36	@ 0x24
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fd fed0 	bl	80117b6 <ld_dword>
 8013a16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a1c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a20:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8013a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2a:	789b      	ldrb	r3, [r3, #2]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d005      	beq.n	8013a3c <find_volume+0x238>
 8013a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a32:	789b      	ldrb	r3, [r3, #2]
 8013a34:	2b02      	cmp	r3, #2
 8013a36:	d001      	beq.n	8013a3c <find_volume+0x238>
 8013a38:	230d      	movs	r3, #13
 8013a3a:	e15f      	b.n	8013cfc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3e:	789b      	ldrb	r3, [r3, #2]
 8013a40:	461a      	mov	r2, r3
 8013a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a44:	fb02 f303 	mul.w	r3, r2, r3
 8013a48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8013a50:	461a      	mov	r2, r3
 8013a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a58:	895b      	ldrh	r3, [r3, #10]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d008      	beq.n	8013a70 <find_volume+0x26c>
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a60:	895b      	ldrh	r3, [r3, #10]
 8013a62:	461a      	mov	r2, r3
 8013a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a66:	895b      	ldrh	r3, [r3, #10]
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	4013      	ands	r3, r2
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <find_volume+0x270>
 8013a70:	230d      	movs	r3, #13
 8013a72:	e143      	b.n	8013cfc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a76:	333c      	adds	r3, #60	@ 0x3c
 8013a78:	3311      	adds	r3, #17
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fd fe82 	bl	8011784 <ld_word>
 8013a80:	4603      	mov	r3, r0
 8013a82:	461a      	mov	r2, r3
 8013a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8a:	891b      	ldrh	r3, [r3, #8]
 8013a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a8e:	8992      	ldrh	r2, [r2, #12]
 8013a90:	0952      	lsrs	r2, r2, #5
 8013a92:	b292      	uxth	r2, r2
 8013a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a98:	fb01 f202 	mul.w	r2, r1, r2
 8013a9c:	1a9b      	subs	r3, r3, r2
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d003      	beq.n	8013aac <find_volume+0x2a8>
 8013aa4:	230d      	movs	r3, #13
 8013aa6:	e129      	b.n	8013cfc <find_volume+0x4f8>
 8013aa8:	2400542c 	.word	0x2400542c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aae:	333c      	adds	r3, #60	@ 0x3c
 8013ab0:	3313      	adds	r3, #19
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fd fe66 	bl	8011784 <ld_word>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <find_volume+0x2cc>
 8013ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ac4:	333c      	adds	r3, #60	@ 0x3c
 8013ac6:	3320      	adds	r3, #32
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7fd fe74 	bl	80117b6 <ld_dword>
 8013ace:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad2:	333c      	adds	r3, #60	@ 0x3c
 8013ad4:	330e      	adds	r3, #14
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7fd fe54 	bl	8011784 <ld_word>
 8013adc:	4603      	mov	r3, r0
 8013ade:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013ae0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d101      	bne.n	8013aea <find_volume+0x2e6>
 8013ae6:	230d      	movs	r3, #13
 8013ae8:	e108      	b.n	8013cfc <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013aea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aee:	4413      	add	r3, r2
 8013af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013af2:	8911      	ldrh	r1, [r2, #8]
 8013af4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013af6:	8992      	ldrh	r2, [r2, #12]
 8013af8:	0952      	lsrs	r2, r2, #5
 8013afa:	b292      	uxth	r2, r2
 8013afc:	fbb1 f2f2 	udiv	r2, r1, r2
 8013b00:	b292      	uxth	r2, r2
 8013b02:	4413      	add	r3, r2
 8013b04:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d201      	bcs.n	8013b12 <find_volume+0x30e>
 8013b0e:	230d      	movs	r3, #13
 8013b10:	e0f4      	b.n	8013cfc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b1a:	8952      	ldrh	r2, [r2, #10]
 8013b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b20:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d101      	bne.n	8013b2c <find_volume+0x328>
 8013b28:	230d      	movs	r3, #13
 8013b2a:	e0e7      	b.n	8013cfc <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013b2c:	2303      	movs	r3, #3
 8013b2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b34:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d802      	bhi.n	8013b42 <find_volume+0x33e>
 8013b3c:	2302      	movs	r3, #2
 8013b3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b44:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d802      	bhi.n	8013b52 <find_volume+0x34e>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b54:	1c9a      	adds	r2, r3, #2
 8013b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b58:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b5e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013b60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b64:	441a      	add	r2, r3
 8013b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b68:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013b6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b6e:	441a      	add	r2, r3
 8013b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b72:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013b74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d11e      	bne.n	8013bba <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7e:	333c      	adds	r3, #60	@ 0x3c
 8013b80:	332a      	adds	r3, #42	@ 0x2a
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7fd fdfe 	bl	8011784 <ld_word>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d001      	beq.n	8013b92 <find_volume+0x38e>
 8013b8e:	230d      	movs	r3, #13
 8013b90:	e0b4      	b.n	8013cfc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b94:	891b      	ldrh	r3, [r3, #8]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d001      	beq.n	8013b9e <find_volume+0x39a>
 8013b9a:	230d      	movs	r3, #13
 8013b9c:	e0ae      	b.n	8013cfc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ba0:	333c      	adds	r3, #60	@ 0x3c
 8013ba2:	332c      	adds	r3, #44	@ 0x2c
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fd fe06 	bl	80117b6 <ld_dword>
 8013baa:	4602      	mov	r2, r0
 8013bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bae:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb2:	6a1b      	ldr	r3, [r3, #32]
 8013bb4:	009b      	lsls	r3, r3, #2
 8013bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8013bb8:	e01f      	b.n	8013bfa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bbc:	891b      	ldrh	r3, [r3, #8]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d101      	bne.n	8013bc6 <find_volume+0x3c2>
 8013bc2:	230d      	movs	r3, #13
 8013bc4:	e09a      	b.n	8013cfc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bcc:	441a      	add	r2, r3
 8013bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd0:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d103      	bne.n	8013be2 <find_volume+0x3de>
 8013bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bdc:	6a1b      	ldr	r3, [r3, #32]
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	e00a      	b.n	8013bf8 <find_volume+0x3f4>
 8013be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be4:	6a1a      	ldr	r2, [r3, #32]
 8013be6:	4613      	mov	r3, r2
 8013be8:	005b      	lsls	r3, r3, #1
 8013bea:	4413      	add	r3, r2
 8013bec:	085a      	lsrs	r2, r3, #1
 8013bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf0:	6a1b      	ldr	r3, [r3, #32]
 8013bf2:	f003 0301 	and.w	r3, r3, #1
 8013bf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013bf8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c00:	899b      	ldrh	r3, [r3, #12]
 8013c02:	4619      	mov	r1, r3
 8013c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c06:	440b      	add	r3, r1
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c0c:	8989      	ldrh	r1, [r1, #12]
 8013c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d201      	bcs.n	8013c1a <find_volume+0x416>
 8013c16:	230d      	movs	r3, #13
 8013c18:	e070      	b.n	8013cfc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c20:	619a      	str	r2, [r3, #24]
 8013c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c24:	699a      	ldr	r2, [r3, #24]
 8013c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8013c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2c:	2280      	movs	r2, #128	@ 0x80
 8013c2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013c30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d149      	bne.n	8013ccc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c3a:	333c      	adds	r3, #60	@ 0x3c
 8013c3c:	3330      	adds	r3, #48	@ 0x30
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fd fda0 	bl	8011784 <ld_word>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d140      	bne.n	8013ccc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013c52:	f7fe f849 	bl	8011ce8 <move_window>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d137      	bne.n	8013ccc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8013c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c5e:	2200      	movs	r2, #0
 8013c60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c64:	333c      	adds	r3, #60	@ 0x3c
 8013c66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fd fd8a 	bl	8011784 <ld_word>
 8013c70:	4603      	mov	r3, r0
 8013c72:	461a      	mov	r2, r3
 8013c74:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d127      	bne.n	8013ccc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c7e:	333c      	adds	r3, #60	@ 0x3c
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fd fd98 	bl	80117b6 <ld_dword>
 8013c86:	4603      	mov	r3, r0
 8013c88:	4a1e      	ldr	r2, [pc, #120]	@ (8013d04 <find_volume+0x500>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d11e      	bne.n	8013ccc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c90:	333c      	adds	r3, #60	@ 0x3c
 8013c92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fd fd8d 	bl	80117b6 <ld_dword>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8013d08 <find_volume+0x504>)
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	d113      	bne.n	8013ccc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ca6:	333c      	adds	r3, #60	@ 0x3c
 8013ca8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fd fd82 	bl	80117b6 <ld_dword>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cb6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cba:	333c      	adds	r3, #60	@ 0x3c
 8013cbc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fd fd78 	bl	80117b6 <ld_dword>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013cd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8013d0c <find_volume+0x508>)
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	b29a      	uxth	r2, r3
 8013cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8013d0c <find_volume+0x508>)
 8013cde:	801a      	strh	r2, [r3, #0]
 8013ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8013d0c <find_volume+0x508>)
 8013ce2:	881a      	ldrh	r2, [r3, #0]
 8013ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cea:	4a09      	ldr	r2, [pc, #36]	@ (8013d10 <find_volume+0x50c>)
 8013cec:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013cf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013cf6:	f7fd ff8f 	bl	8011c18 <clear_lock>
#endif
	return FR_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3758      	adds	r7, #88	@ 0x58
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	41615252 	.word	0x41615252
 8013d08:	61417272 	.word	0x61417272
 8013d0c:	24005430 	.word	0x24005430
 8013d10:	24005454 	.word	0x24005454

08013d14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013d1e:	2309      	movs	r3, #9
 8013d20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d01c      	beq.n	8013d62 <validate+0x4e>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d018      	beq.n	8013d62 <validate+0x4e>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d013      	beq.n	8013d62 <validate+0x4e>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	889a      	ldrh	r2, [r3, #4]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	88db      	ldrh	r3, [r3, #6]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d10c      	bne.n	8013d62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	785b      	ldrb	r3, [r3, #1]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fd fc78 	bl	8011644 <disk_status>
 8013d54:	4603      	mov	r3, r0
 8013d56:	f003 0301 	and.w	r3, r3, #1
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d101      	bne.n	8013d62 <validate+0x4e>
			res = FR_OK;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013d62:	7bfb      	ldrb	r3, [r7, #15]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d102      	bne.n	8013d6e <validate+0x5a>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	e000      	b.n	8013d70 <validate+0x5c>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	6013      	str	r3, [r2, #0]
	return res;
 8013d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3710      	adds	r7, #16
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
	...

08013d80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b088      	sub	sp, #32
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013d92:	f107 0310 	add.w	r3, r7, #16
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7ff fc99 	bl	80136ce <get_ldnumber>
 8013d9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	da01      	bge.n	8013da8 <f_mount+0x28>
 8013da4:	230b      	movs	r3, #11
 8013da6:	e02b      	b.n	8013e00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013da8:	4a17      	ldr	r2, [pc, #92]	@ (8013e08 <f_mount+0x88>)
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013db0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d005      	beq.n	8013dc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013db8:	69b8      	ldr	r0, [r7, #24]
 8013dba:	f7fd ff2d 	bl	8011c18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d002      	beq.n	8013dd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	490d      	ldr	r1, [pc, #52]	@ (8013e08 <f_mount+0x88>)
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <f_mount+0x66>
 8013de0:	79fb      	ldrb	r3, [r7, #7]
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d001      	beq.n	8013dea <f_mount+0x6a>
 8013de6:	2300      	movs	r3, #0
 8013de8:	e00a      	b.n	8013e00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013dea:	f107 010c 	add.w	r1, r7, #12
 8013dee:	f107 0308 	add.w	r3, r7, #8
 8013df2:	2200      	movs	r2, #0
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7ff fd05 	bl	8013804 <find_volume>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3720      	adds	r7, #32
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	2400542c 	.word	0x2400542c

08013e0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b09a      	sub	sp, #104	@ 0x68
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	4613      	mov	r3, r2
 8013e18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d101      	bne.n	8013e24 <f_open+0x18>
 8013e20:	2309      	movs	r3, #9
 8013e22:	e1b7      	b.n	8014194 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013e24:	79fb      	ldrb	r3, [r7, #7]
 8013e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013e2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013e2c:	79fa      	ldrb	r2, [r7, #7]
 8013e2e:	f107 0114 	add.w	r1, r7, #20
 8013e32:	f107 0308 	add.w	r3, r7, #8
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff fce4 	bl	8013804 <find_volume>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013e42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f040 819b 	bne.w	8014182 <f_open+0x376>
		dj.obj.fs = fs;
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013e50:	68ba      	ldr	r2, [r7, #8]
 8013e52:	f107 0318 	add.w	r3, r7, #24
 8013e56:	4611      	mov	r1, r2
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ff fba3 	bl	80135a4 <follow_path>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013e64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d118      	bne.n	8013e9e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013e6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013e70:	b25b      	sxtb	r3, r3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	da03      	bge.n	8013e7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013e76:	2306      	movs	r3, #6
 8013e78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013e7c:	e00f      	b.n	8013e9e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	bf8c      	ite	hi
 8013e84:	2301      	movhi	r3, #1
 8013e86:	2300      	movls	r3, #0
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	f107 0318 	add.w	r3, r7, #24
 8013e90:	4611      	mov	r1, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd fd78 	bl	8011988 <chk_lock>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e9e:	79fb      	ldrb	r3, [r7, #7]
 8013ea0:	f003 031c 	and.w	r3, r3, #28
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d07f      	beq.n	8013fa8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013ea8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d017      	beq.n	8013ee0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013eb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013eb4:	2b04      	cmp	r3, #4
 8013eb6:	d10e      	bne.n	8013ed6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013eb8:	f7fd fdc2 	bl	8011a40 <enq_lock>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d006      	beq.n	8013ed0 <f_open+0xc4>
 8013ec2:	f107 0318 	add.w	r3, r7, #24
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ff f824 	bl	8012f14 <dir_register>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	e000      	b.n	8013ed2 <f_open+0xc6>
 8013ed0:	2312      	movs	r3, #18
 8013ed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013ed6:	79fb      	ldrb	r3, [r7, #7]
 8013ed8:	f043 0308 	orr.w	r3, r3, #8
 8013edc:	71fb      	strb	r3, [r7, #7]
 8013ede:	e010      	b.n	8013f02 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013ee0:	7fbb      	ldrb	r3, [r7, #30]
 8013ee2:	f003 0311 	and.w	r3, r3, #17
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d003      	beq.n	8013ef2 <f_open+0xe6>
					res = FR_DENIED;
 8013eea:	2307      	movs	r3, #7
 8013eec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013ef0:	e007      	b.n	8013f02 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013ef2:	79fb      	ldrb	r3, [r7, #7]
 8013ef4:	f003 0304 	and.w	r3, r3, #4
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d002      	beq.n	8013f02 <f_open+0xf6>
 8013efc:	2308      	movs	r3, #8
 8013efe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013f02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d168      	bne.n	8013fdc <f_open+0x1d0>
 8013f0a:	79fb      	ldrb	r3, [r7, #7]
 8013f0c:	f003 0308 	and.w	r3, r3, #8
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d063      	beq.n	8013fdc <f_open+0x1d0>
				dw = GET_FATTIME();
 8013f14:	f7fc fe74 	bl	8010c00 <get_fattime>
 8013f18:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f1c:	330e      	adds	r3, #14
 8013f1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd fc86 	bl	8011832 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f28:	3316      	adds	r3, #22
 8013f2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fd fc80 	bl	8011832 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f34:	330b      	adds	r3, #11
 8013f36:	2220      	movs	r2, #32
 8013f38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f3e:	4611      	mov	r1, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe fc56 	bl	80127f2 <ld_clust>
 8013f46:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe fc6e 	bl	8012830 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f56:	331c      	adds	r3, #28
 8013f58:	2100      	movs	r1, #0
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7fd fc69 	bl	8011832 <st_dword>
					fs->wflag = 1;
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	2201      	movs	r2, #1
 8013f64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d037      	beq.n	8013fdc <f_open+0x1d0>
						dw = fs->winsect;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f70:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013f72:	f107 0318 	add.w	r3, r7, #24
 8013f76:	2200      	movs	r2, #0
 8013f78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fe f95e 	bl	801223c <remove_chain>
 8013f80:	4603      	mov	r3, r0
 8013f82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013f86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d126      	bne.n	8013fdc <f_open+0x1d0>
							res = move_window(fs, dw);
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fd fea8 	bl	8011ce8 <move_window>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013fa2:	3a01      	subs	r2, #1
 8013fa4:	615a      	str	r2, [r3, #20]
 8013fa6:	e019      	b.n	8013fdc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d115      	bne.n	8013fdc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013fb0:	7fbb      	ldrb	r3, [r7, #30]
 8013fb2:	f003 0310 	and.w	r3, r3, #16
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d003      	beq.n	8013fc2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8013fba:	2304      	movs	r3, #4
 8013fbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013fc0:	e00c      	b.n	8013fdc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013fc2:	79fb      	ldrb	r3, [r7, #7]
 8013fc4:	f003 0302 	and.w	r3, r3, #2
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d007      	beq.n	8013fdc <f_open+0x1d0>
 8013fcc:	7fbb      	ldrb	r3, [r7, #30]
 8013fce:	f003 0301 	and.w	r3, r3, #1
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d002      	beq.n	8013fdc <f_open+0x1d0>
						res = FR_DENIED;
 8013fd6:	2307      	movs	r3, #7
 8013fd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d126      	bne.n	8014032 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013fe4:	79fb      	ldrb	r3, [r7, #7]
 8013fe6:	f003 0308 	and.w	r3, r3, #8
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d003      	beq.n	8013ff6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013fee:	79fb      	ldrb	r3, [r7, #7]
 8013ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ff4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013ffe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014004:	79fb      	ldrb	r3, [r7, #7]
 8014006:	2b01      	cmp	r3, #1
 8014008:	bf8c      	ite	hi
 801400a:	2301      	movhi	r3, #1
 801400c:	2300      	movls	r3, #0
 801400e:	b2db      	uxtb	r3, r3
 8014010:	461a      	mov	r2, r3
 8014012:	f107 0318 	add.w	r3, r7, #24
 8014016:	4611      	mov	r1, r2
 8014018:	4618      	mov	r0, r3
 801401a:	f7fd fd33 	bl	8011a84 <inc_lock>
 801401e:	4602      	mov	r2, r0
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d102      	bne.n	8014032 <f_open+0x226>
 801402c:	2302      	movs	r3, #2
 801402e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014032:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014036:	2b00      	cmp	r3, #0
 8014038:	f040 80a3 	bne.w	8014182 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014040:	4611      	mov	r1, r2
 8014042:	4618      	mov	r0, r3
 8014044:	f7fe fbd5 	bl	80127f2 <ld_clust>
 8014048:	4602      	mov	r2, r0
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014050:	331c      	adds	r3, #28
 8014052:	4618      	mov	r0, r3
 8014054:	f7fd fbaf 	bl	80117b6 <ld_dword>
 8014058:	4602      	mov	r2, r0
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2200      	movs	r2, #0
 8014062:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	88da      	ldrh	r2, [r3, #6]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	79fa      	ldrb	r2, [r7, #7]
 8014076:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2200      	movs	r2, #0
 801407c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2200      	movs	r2, #0
 8014082:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	2200      	movs	r2, #0
 8014088:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	3330      	adds	r3, #48	@ 0x30
 801408e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014092:	2100      	movs	r1, #0
 8014094:	4618      	mov	r0, r3
 8014096:	f7fd fc19 	bl	80118cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801409a:	79fb      	ldrb	r3, [r7, #7]
 801409c:	f003 0320 	and.w	r3, r3, #32
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d06e      	beq.n	8014182 <f_open+0x376>
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d06a      	beq.n	8014182 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	68da      	ldr	r2, [r3, #12]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	895b      	ldrh	r3, [r3, #10]
 80140b8:	461a      	mov	r2, r3
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	899b      	ldrh	r3, [r3, #12]
 80140be:	fb02 f303 	mul.w	r3, r2, r3
 80140c2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80140d0:	e016      	b.n	8014100 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fd fec3 	bl	8011e62 <get_fat>
 80140dc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80140de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d802      	bhi.n	80140ea <f_open+0x2de>
 80140e4:	2302      	movs	r3, #2
 80140e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80140ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140f0:	d102      	bne.n	80140f8 <f_open+0x2ec>
 80140f2:	2301      	movs	r3, #1
 80140f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80140f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80140fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014100:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014104:	2b00      	cmp	r3, #0
 8014106:	d103      	bne.n	8014110 <f_open+0x304>
 8014108:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801410a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801410c:	429a      	cmp	r2, r3
 801410e:	d8e0      	bhi.n	80140d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014114:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014116:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801411a:	2b00      	cmp	r3, #0
 801411c:	d131      	bne.n	8014182 <f_open+0x376>
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	899b      	ldrh	r3, [r3, #12]
 8014122:	461a      	mov	r2, r3
 8014124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014126:	fbb3 f1f2 	udiv	r1, r3, r2
 801412a:	fb01 f202 	mul.w	r2, r1, r2
 801412e:	1a9b      	subs	r3, r3, r2
 8014130:	2b00      	cmp	r3, #0
 8014132:	d026      	beq.n	8014182 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014138:	4618      	mov	r0, r3
 801413a:	f7fd fe73 	bl	8011e24 <clust2sect>
 801413e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014142:	2b00      	cmp	r3, #0
 8014144:	d103      	bne.n	801414e <f_open+0x342>
						res = FR_INT_ERR;
 8014146:	2302      	movs	r3, #2
 8014148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801414c:	e019      	b.n	8014182 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	899b      	ldrh	r3, [r3, #12]
 8014152:	461a      	mov	r2, r3
 8014154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014156:	fbb3 f2f2 	udiv	r2, r3, r2
 801415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801415c:	441a      	add	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	7858      	ldrb	r0, [r3, #1]
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	6a1a      	ldr	r2, [r3, #32]
 8014170:	2301      	movs	r3, #1
 8014172:	f7fd faa9 	bl	80116c8 <disk_read>
 8014176:	4603      	mov	r3, r0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d002      	beq.n	8014182 <f_open+0x376>
 801417c:	2301      	movs	r3, #1
 801417e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014182:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014186:	2b00      	cmp	r3, #0
 8014188:	d002      	beq.n	8014190 <f_open+0x384>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014190:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014194:	4618      	mov	r0, r3
 8014196:	3768      	adds	r7, #104	@ 0x68
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08e      	sub	sp, #56	@ 0x38
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	2200      	movs	r2, #0
 80141b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f107 0214 	add.w	r2, r7, #20
 80141ba:	4611      	mov	r1, r2
 80141bc:	4618      	mov	r0, r3
 80141be:	f7ff fda9 	bl	8013d14 <validate>
 80141c2:	4603      	mov	r3, r0
 80141c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80141c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d107      	bne.n	80141e0 <f_read+0x44>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	7d5b      	ldrb	r3, [r3, #21]
 80141d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80141d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d002      	beq.n	80141e6 <f_read+0x4a>
 80141e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80141e4:	e135      	b.n	8014452 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	7d1b      	ldrb	r3, [r3, #20]
 80141ea:	f003 0301 	and.w	r3, r3, #1
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d101      	bne.n	80141f6 <f_read+0x5a>
 80141f2:	2307      	movs	r3, #7
 80141f4:	e12d      	b.n	8014452 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	68da      	ldr	r2, [r3, #12]
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	699b      	ldr	r3, [r3, #24]
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	6a3b      	ldr	r3, [r7, #32]
 8014206:	429a      	cmp	r2, r3
 8014208:	f240 811e 	bls.w	8014448 <f_read+0x2ac>
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014210:	e11a      	b.n	8014448 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	699b      	ldr	r3, [r3, #24]
 8014216:	697a      	ldr	r2, [r7, #20]
 8014218:	8992      	ldrh	r2, [r2, #12]
 801421a:	fbb3 f1f2 	udiv	r1, r3, r2
 801421e:	fb01 f202 	mul.w	r2, r1, r2
 8014222:	1a9b      	subs	r3, r3, r2
 8014224:	2b00      	cmp	r3, #0
 8014226:	f040 80d5 	bne.w	80143d4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	699b      	ldr	r3, [r3, #24]
 801422e:	697a      	ldr	r2, [r7, #20]
 8014230:	8992      	ldrh	r2, [r2, #12]
 8014232:	fbb3 f3f2 	udiv	r3, r3, r2
 8014236:	697a      	ldr	r2, [r7, #20]
 8014238:	8952      	ldrh	r2, [r2, #10]
 801423a:	3a01      	subs	r2, #1
 801423c:	4013      	ands	r3, r2
 801423e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d12f      	bne.n	80142a6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	699b      	ldr	r3, [r3, #24]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d103      	bne.n	8014256 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	689b      	ldr	r3, [r3, #8]
 8014252:	633b      	str	r3, [r7, #48]	@ 0x30
 8014254:	e013      	b.n	801427e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801425a:	2b00      	cmp	r3, #0
 801425c:	d007      	beq.n	801426e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	699b      	ldr	r3, [r3, #24]
 8014262:	4619      	mov	r1, r3
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f7fe f8e6 	bl	8012436 <clmt_clust>
 801426a:	6338      	str	r0, [r7, #48]	@ 0x30
 801426c:	e007      	b.n	801427e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	69db      	ldr	r3, [r3, #28]
 8014274:	4619      	mov	r1, r3
 8014276:	4610      	mov	r0, r2
 8014278:	f7fd fdf3 	bl	8011e62 <get_fat>
 801427c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014280:	2b01      	cmp	r3, #1
 8014282:	d804      	bhi.n	801428e <f_read+0xf2>
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2202      	movs	r2, #2
 8014288:	755a      	strb	r2, [r3, #21]
 801428a:	2302      	movs	r3, #2
 801428c:	e0e1      	b.n	8014452 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014294:	d104      	bne.n	80142a0 <f_read+0x104>
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2201      	movs	r2, #1
 801429a:	755a      	strb	r2, [r3, #21]
 801429c:	2301      	movs	r3, #1
 801429e:	e0d8      	b.n	8014452 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80142a6:	697a      	ldr	r2, [r7, #20]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	69db      	ldr	r3, [r3, #28]
 80142ac:	4619      	mov	r1, r3
 80142ae:	4610      	mov	r0, r2
 80142b0:	f7fd fdb8 	bl	8011e24 <clust2sect>
 80142b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d104      	bne.n	80142c6 <f_read+0x12a>
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2202      	movs	r2, #2
 80142c0:	755a      	strb	r2, [r3, #21]
 80142c2:	2302      	movs	r3, #2
 80142c4:	e0c5      	b.n	8014452 <f_read+0x2b6>
			sect += csect;
 80142c6:	69ba      	ldr	r2, [r7, #24]
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	4413      	add	r3, r2
 80142cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	899b      	ldrh	r3, [r3, #12]
 80142d2:	461a      	mov	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80142da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80142dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d041      	beq.n	8014366 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80142e2:	69fa      	ldr	r2, [r7, #28]
 80142e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e6:	4413      	add	r3, r2
 80142e8:	697a      	ldr	r2, [r7, #20]
 80142ea:	8952      	ldrh	r2, [r2, #10]
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d905      	bls.n	80142fc <f_read+0x160>
					cc = fs->csize - csect;
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	895b      	ldrh	r3, [r3, #10]
 80142f4:	461a      	mov	r2, r3
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	7858      	ldrb	r0, [r3, #1]
 8014300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014302:	69ba      	ldr	r2, [r7, #24]
 8014304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014306:	f7fd f9df 	bl	80116c8 <disk_read>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d004      	beq.n	801431a <f_read+0x17e>
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2201      	movs	r2, #1
 8014314:	755a      	strb	r2, [r3, #21]
 8014316:	2301      	movs	r3, #1
 8014318:	e09b      	b.n	8014452 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	7d1b      	ldrb	r3, [r3, #20]
 801431e:	b25b      	sxtb	r3, r3
 8014320:	2b00      	cmp	r3, #0
 8014322:	da18      	bge.n	8014356 <f_read+0x1ba>
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6a1a      	ldr	r2, [r3, #32]
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801432e:	429a      	cmp	r2, r3
 8014330:	d911      	bls.n	8014356 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	6a1a      	ldr	r2, [r3, #32]
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	1ad3      	subs	r3, r2, r3
 801433a:	697a      	ldr	r2, [r7, #20]
 801433c:	8992      	ldrh	r2, [r2, #12]
 801433e:	fb02 f303 	mul.w	r3, r2, r3
 8014342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014344:	18d0      	adds	r0, r2, r3
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	899b      	ldrh	r3, [r3, #12]
 8014350:	461a      	mov	r2, r3
 8014352:	f7fd fa9a 	bl	801188a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	899b      	ldrh	r3, [r3, #12]
 801435a:	461a      	mov	r2, r3
 801435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801435e:	fb02 f303 	mul.w	r3, r2, r3
 8014362:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8014364:	e05c      	b.n	8014420 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6a1b      	ldr	r3, [r3, #32]
 801436a:	69ba      	ldr	r2, [r7, #24]
 801436c:	429a      	cmp	r2, r3
 801436e:	d02e      	beq.n	80143ce <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	7d1b      	ldrb	r3, [r3, #20]
 8014374:	b25b      	sxtb	r3, r3
 8014376:	2b00      	cmp	r3, #0
 8014378:	da18      	bge.n	80143ac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	7858      	ldrb	r0, [r3, #1]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6a1a      	ldr	r2, [r3, #32]
 8014388:	2301      	movs	r3, #1
 801438a:	f7fd f9bd 	bl	8011708 <disk_write>
 801438e:	4603      	mov	r3, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	d004      	beq.n	801439e <f_read+0x202>
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2201      	movs	r2, #1
 8014398:	755a      	strb	r2, [r3, #21]
 801439a:	2301      	movs	r3, #1
 801439c:	e059      	b.n	8014452 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	7d1b      	ldrb	r3, [r3, #20]
 80143a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	7858      	ldrb	r0, [r3, #1]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80143b6:	2301      	movs	r3, #1
 80143b8:	69ba      	ldr	r2, [r7, #24]
 80143ba:	f7fd f985 	bl	80116c8 <disk_read>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d004      	beq.n	80143ce <f_read+0x232>
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2201      	movs	r2, #1
 80143c8:	755a      	strb	r2, [r3, #21]
 80143ca:	2301      	movs	r3, #1
 80143cc:	e041      	b.n	8014452 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	899b      	ldrh	r3, [r3, #12]
 80143d8:	4618      	mov	r0, r3
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	699b      	ldr	r3, [r3, #24]
 80143de:	697a      	ldr	r2, [r7, #20]
 80143e0:	8992      	ldrh	r2, [r2, #12]
 80143e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80143e6:	fb01 f202 	mul.w	r2, r1, r2
 80143ea:	1a9b      	subs	r3, r3, r2
 80143ec:	1ac3      	subs	r3, r0, r3
 80143ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80143f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d901      	bls.n	80143fc <f_read+0x260>
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	699b      	ldr	r3, [r3, #24]
 8014406:	697a      	ldr	r2, [r7, #20]
 8014408:	8992      	ldrh	r2, [r2, #12]
 801440a:	fbb3 f0f2 	udiv	r0, r3, r2
 801440e:	fb00 f202 	mul.w	r2, r0, r2
 8014412:	1a9b      	subs	r3, r3, r2
 8014414:	440b      	add	r3, r1
 8014416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014418:	4619      	mov	r1, r3
 801441a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801441c:	f7fd fa35 	bl	801188a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014424:	4413      	add	r3, r2
 8014426:	627b      	str	r3, [r7, #36]	@ 0x24
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	699a      	ldr	r2, [r3, #24]
 801442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801442e:	441a      	add	r2, r3
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	619a      	str	r2, [r3, #24]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443a:	441a      	add	r2, r3
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	601a      	str	r2, [r3, #0]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014444:	1ad3      	subs	r3, r2, r3
 8014446:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	f47f aee1 	bne.w	8014212 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3738      	adds	r7, #56	@ 0x38
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b08c      	sub	sp, #48	@ 0x30
 801445e:	af00      	add	r7, sp, #0
 8014460:	60f8      	str	r0, [r7, #12]
 8014462:	60b9      	str	r1, [r7, #8]
 8014464:	607a      	str	r2, [r7, #4]
 8014466:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	2200      	movs	r2, #0
 8014470:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f107 0210 	add.w	r2, r7, #16
 8014478:	4611      	mov	r1, r2
 801447a:	4618      	mov	r0, r3
 801447c:	f7ff fc4a 	bl	8013d14 <validate>
 8014480:	4603      	mov	r3, r0
 8014482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801448a:	2b00      	cmp	r3, #0
 801448c:	d107      	bne.n	801449e <f_write+0x44>
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	7d5b      	ldrb	r3, [r3, #21]
 8014492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801449a:	2b00      	cmp	r3, #0
 801449c:	d002      	beq.n	80144a4 <f_write+0x4a>
 801449e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80144a2:	e16a      	b.n	801477a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	7d1b      	ldrb	r3, [r3, #20]
 80144a8:	f003 0302 	and.w	r3, r3, #2
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d101      	bne.n	80144b4 <f_write+0x5a>
 80144b0:	2307      	movs	r3, #7
 80144b2:	e162      	b.n	801477a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	699a      	ldr	r2, [r3, #24]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	441a      	add	r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	699b      	ldr	r3, [r3, #24]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	f080 814c 	bcs.w	801475e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	699b      	ldr	r3, [r3, #24]
 80144ca:	43db      	mvns	r3, r3
 80144cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80144ce:	e146      	b.n	801475e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	699b      	ldr	r3, [r3, #24]
 80144d4:	693a      	ldr	r2, [r7, #16]
 80144d6:	8992      	ldrh	r2, [r2, #12]
 80144d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80144dc:	fb01 f202 	mul.w	r2, r1, r2
 80144e0:	1a9b      	subs	r3, r3, r2
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	f040 80f1 	bne.w	80146ca <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	699b      	ldr	r3, [r3, #24]
 80144ec:	693a      	ldr	r2, [r7, #16]
 80144ee:	8992      	ldrh	r2, [r2, #12]
 80144f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80144f4:	693a      	ldr	r2, [r7, #16]
 80144f6:	8952      	ldrh	r2, [r2, #10]
 80144f8:	3a01      	subs	r2, #1
 80144fa:	4013      	ands	r3, r2
 80144fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d143      	bne.n	801458c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	699b      	ldr	r3, [r3, #24]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d10c      	bne.n	8014526 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014514:	2b00      	cmp	r3, #0
 8014516:	d11a      	bne.n	801454e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2100      	movs	r1, #0
 801451c:	4618      	mov	r0, r3
 801451e:	f7fd fef2 	bl	8012306 <create_chain>
 8014522:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014524:	e013      	b.n	801454e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801452a:	2b00      	cmp	r3, #0
 801452c:	d007      	beq.n	801453e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	699b      	ldr	r3, [r3, #24]
 8014532:	4619      	mov	r1, r3
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f7fd ff7e 	bl	8012436 <clmt_clust>
 801453a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801453c:	e007      	b.n	801454e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801453e:	68fa      	ldr	r2, [r7, #12]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	69db      	ldr	r3, [r3, #28]
 8014544:	4619      	mov	r1, r3
 8014546:	4610      	mov	r0, r2
 8014548:	f7fd fedd 	bl	8012306 <create_chain>
 801454c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 8109 	beq.w	8014768 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014558:	2b01      	cmp	r3, #1
 801455a:	d104      	bne.n	8014566 <f_write+0x10c>
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2202      	movs	r2, #2
 8014560:	755a      	strb	r2, [r3, #21]
 8014562:	2302      	movs	r3, #2
 8014564:	e109      	b.n	801477a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801456c:	d104      	bne.n	8014578 <f_write+0x11e>
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2201      	movs	r2, #1
 8014572:	755a      	strb	r2, [r3, #21]
 8014574:	2301      	movs	r3, #1
 8014576:	e100      	b.n	801477a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801457c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	689b      	ldr	r3, [r3, #8]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d102      	bne.n	801458c <f_write+0x132>
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801458a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	7d1b      	ldrb	r3, [r3, #20]
 8014590:	b25b      	sxtb	r3, r3
 8014592:	2b00      	cmp	r3, #0
 8014594:	da18      	bge.n	80145c8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	7858      	ldrb	r0, [r3, #1]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6a1a      	ldr	r2, [r3, #32]
 80145a4:	2301      	movs	r3, #1
 80145a6:	f7fd f8af 	bl	8011708 <disk_write>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d004      	beq.n	80145ba <f_write+0x160>
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2201      	movs	r2, #1
 80145b4:	755a      	strb	r2, [r3, #21]
 80145b6:	2301      	movs	r3, #1
 80145b8:	e0df      	b.n	801477a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	7d1b      	ldrb	r3, [r3, #20]
 80145be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145c2:	b2da      	uxtb	r2, r3
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80145c8:	693a      	ldr	r2, [r7, #16]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	69db      	ldr	r3, [r3, #28]
 80145ce:	4619      	mov	r1, r3
 80145d0:	4610      	mov	r0, r2
 80145d2:	f7fd fc27 	bl	8011e24 <clust2sect>
 80145d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d104      	bne.n	80145e8 <f_write+0x18e>
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2202      	movs	r2, #2
 80145e2:	755a      	strb	r2, [r3, #21]
 80145e4:	2302      	movs	r3, #2
 80145e6:	e0c8      	b.n	801477a <f_write+0x320>
			sect += csect;
 80145e8:	697a      	ldr	r2, [r7, #20]
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	4413      	add	r3, r2
 80145ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	899b      	ldrh	r3, [r3, #12]
 80145f4:	461a      	mov	r2, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80145fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80145fe:	6a3b      	ldr	r3, [r7, #32]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d043      	beq.n	801468c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014604:	69ba      	ldr	r2, [r7, #24]
 8014606:	6a3b      	ldr	r3, [r7, #32]
 8014608:	4413      	add	r3, r2
 801460a:	693a      	ldr	r2, [r7, #16]
 801460c:	8952      	ldrh	r2, [r2, #10]
 801460e:	4293      	cmp	r3, r2
 8014610:	d905      	bls.n	801461e <f_write+0x1c4>
					cc = fs->csize - csect;
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	895b      	ldrh	r3, [r3, #10]
 8014616:	461a      	mov	r2, r3
 8014618:	69bb      	ldr	r3, [r7, #24]
 801461a:	1ad3      	subs	r3, r2, r3
 801461c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	7858      	ldrb	r0, [r3, #1]
 8014622:	6a3b      	ldr	r3, [r7, #32]
 8014624:	697a      	ldr	r2, [r7, #20]
 8014626:	69f9      	ldr	r1, [r7, #28]
 8014628:	f7fd f86e 	bl	8011708 <disk_write>
 801462c:	4603      	mov	r3, r0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d004      	beq.n	801463c <f_write+0x1e2>
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2201      	movs	r2, #1
 8014636:	755a      	strb	r2, [r3, #21]
 8014638:	2301      	movs	r3, #1
 801463a:	e09e      	b.n	801477a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6a1a      	ldr	r2, [r3, #32]
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	6a3a      	ldr	r2, [r7, #32]
 8014646:	429a      	cmp	r2, r3
 8014648:	d918      	bls.n	801467c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6a1a      	ldr	r2, [r3, #32]
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	1ad3      	subs	r3, r2, r3
 8014658:	693a      	ldr	r2, [r7, #16]
 801465a:	8992      	ldrh	r2, [r2, #12]
 801465c:	fb02 f303 	mul.w	r3, r2, r3
 8014660:	69fa      	ldr	r2, [r7, #28]
 8014662:	18d1      	adds	r1, r2, r3
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	899b      	ldrh	r3, [r3, #12]
 8014668:	461a      	mov	r2, r3
 801466a:	f7fd f90e 	bl	801188a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	7d1b      	ldrb	r3, [r3, #20]
 8014672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014676:	b2da      	uxtb	r2, r3
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	899b      	ldrh	r3, [r3, #12]
 8014680:	461a      	mov	r2, r3
 8014682:	6a3b      	ldr	r3, [r7, #32]
 8014684:	fb02 f303 	mul.w	r3, r2, r3
 8014688:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801468a:	e04b      	b.n	8014724 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6a1b      	ldr	r3, [r3, #32]
 8014690:	697a      	ldr	r2, [r7, #20]
 8014692:	429a      	cmp	r2, r3
 8014694:	d016      	beq.n	80146c4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	699a      	ldr	r2, [r3, #24]
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801469e:	429a      	cmp	r2, r3
 80146a0:	d210      	bcs.n	80146c4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	7858      	ldrb	r0, [r3, #1]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146ac:	2301      	movs	r3, #1
 80146ae:	697a      	ldr	r2, [r7, #20]
 80146b0:	f7fd f80a 	bl	80116c8 <disk_read>
 80146b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d004      	beq.n	80146c4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2201      	movs	r2, #1
 80146be:	755a      	strb	r2, [r3, #21]
 80146c0:	2301      	movs	r3, #1
 80146c2:	e05a      	b.n	801477a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	697a      	ldr	r2, [r7, #20]
 80146c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	899b      	ldrh	r3, [r3, #12]
 80146ce:	4618      	mov	r0, r3
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	699b      	ldr	r3, [r3, #24]
 80146d4:	693a      	ldr	r2, [r7, #16]
 80146d6:	8992      	ldrh	r2, [r2, #12]
 80146d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80146dc:	fb01 f202 	mul.w	r2, r1, r2
 80146e0:	1a9b      	subs	r3, r3, r2
 80146e2:	1ac3      	subs	r3, r0, r3
 80146e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80146e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d901      	bls.n	80146f2 <f_write+0x298>
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	699b      	ldr	r3, [r3, #24]
 80146fc:	693a      	ldr	r2, [r7, #16]
 80146fe:	8992      	ldrh	r2, [r2, #12]
 8014700:	fbb3 f0f2 	udiv	r0, r3, r2
 8014704:	fb00 f202 	mul.w	r2, r0, r2
 8014708:	1a9b      	subs	r3, r3, r2
 801470a:	440b      	add	r3, r1
 801470c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801470e:	69f9      	ldr	r1, [r7, #28]
 8014710:	4618      	mov	r0, r3
 8014712:	f7fd f8ba 	bl	801188a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	7d1b      	ldrb	r3, [r3, #20]
 801471a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801471e:	b2da      	uxtb	r2, r3
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014724:	69fa      	ldr	r2, [r7, #28]
 8014726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014728:	4413      	add	r3, r2
 801472a:	61fb      	str	r3, [r7, #28]
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	699a      	ldr	r2, [r3, #24]
 8014730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014732:	441a      	add	r2, r3
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	619a      	str	r2, [r3, #24]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	68da      	ldr	r2, [r3, #12]
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	699b      	ldr	r3, [r3, #24]
 8014740:	429a      	cmp	r2, r3
 8014742:	bf38      	it	cc
 8014744:	461a      	movcc	r2, r3
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	60da      	str	r2, [r3, #12]
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014750:	441a      	add	r2, r3
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2b00      	cmp	r3, #0
 8014762:	f47f aeb5 	bne.w	80144d0 <f_write+0x76>
 8014766:	e000      	b.n	801476a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014768:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	7d1b      	ldrb	r3, [r3, #20]
 801476e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014772:	b2da      	uxtb	r2, r3
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014778:	2300      	movs	r3, #0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3730      	adds	r7, #48	@ 0x30
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b086      	sub	sp, #24
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f107 0208 	add.w	r2, r7, #8
 8014790:	4611      	mov	r1, r2
 8014792:	4618      	mov	r0, r3
 8014794:	f7ff fabe 	bl	8013d14 <validate>
 8014798:	4603      	mov	r3, r0
 801479a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801479c:	7dfb      	ldrb	r3, [r7, #23]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d168      	bne.n	8014874 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	7d1b      	ldrb	r3, [r3, #20]
 80147a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d062      	beq.n	8014874 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	7d1b      	ldrb	r3, [r3, #20]
 80147b2:	b25b      	sxtb	r3, r3
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	da15      	bge.n	80147e4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	7858      	ldrb	r0, [r3, #1]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6a1a      	ldr	r2, [r3, #32]
 80147c6:	2301      	movs	r3, #1
 80147c8:	f7fc ff9e 	bl	8011708 <disk_write>
 80147cc:	4603      	mov	r3, r0
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d001      	beq.n	80147d6 <f_sync+0x54>
 80147d2:	2301      	movs	r3, #1
 80147d4:	e04f      	b.n	8014876 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	7d1b      	ldrb	r3, [r3, #20]
 80147da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147de:	b2da      	uxtb	r2, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80147e4:	f7fc fa0c 	bl	8010c00 <get_fattime>
 80147e8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80147ea:	68ba      	ldr	r2, [r7, #8]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147f0:	4619      	mov	r1, r3
 80147f2:	4610      	mov	r0, r2
 80147f4:	f7fd fa78 	bl	8011ce8 <move_window>
 80147f8:	4603      	mov	r3, r0
 80147fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80147fc:	7dfb      	ldrb	r3, [r7, #23]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d138      	bne.n	8014874 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014806:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	330b      	adds	r3, #11
 801480c:	781a      	ldrb	r2, [r3, #0]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	330b      	adds	r3, #11
 8014812:	f042 0220 	orr.w	r2, r2, #32
 8014816:	b2d2      	uxtb	r2, r2
 8014818:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6818      	ldr	r0, [r3, #0]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	461a      	mov	r2, r3
 8014824:	68f9      	ldr	r1, [r7, #12]
 8014826:	f7fe f803 	bl	8012830 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	f103 021c 	add.w	r2, r3, #28
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	4619      	mov	r1, r3
 8014836:	4610      	mov	r0, r2
 8014838:	f7fc fffb 	bl	8011832 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	3316      	adds	r3, #22
 8014840:	6939      	ldr	r1, [r7, #16]
 8014842:	4618      	mov	r0, r3
 8014844:	f7fc fff5 	bl	8011832 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	3312      	adds	r3, #18
 801484c:	2100      	movs	r1, #0
 801484e:	4618      	mov	r0, r3
 8014850:	f7fc ffd4 	bl	80117fc <st_word>
					fs->wflag = 1;
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2201      	movs	r2, #1
 8014858:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	4618      	mov	r0, r3
 801485e:	f7fd fa71 	bl	8011d44 <sync_fs>
 8014862:	4603      	mov	r3, r0
 8014864:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	7d1b      	ldrb	r3, [r3, #20]
 801486a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801486e:	b2da      	uxtb	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014874:	7dfb      	ldrb	r3, [r7, #23]
}
 8014876:	4618      	mov	r0, r3
 8014878:	3718      	adds	r7, #24
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b084      	sub	sp, #16
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff ff7b 	bl	8014782 <f_sync>
 801488c:	4603      	mov	r3, r0
 801488e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014890:	7bfb      	ldrb	r3, [r7, #15]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d118      	bne.n	80148c8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f107 0208 	add.w	r2, r7, #8
 801489c:	4611      	mov	r1, r2
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff fa38 	bl	8013d14 <validate>
 80148a4:	4603      	mov	r3, r0
 80148a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80148a8:	7bfb      	ldrb	r3, [r7, #15]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d10c      	bne.n	80148c8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	691b      	ldr	r3, [r3, #16]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fd f974 	bl	8011ba0 <dec_lock>
 80148b8:	4603      	mov	r3, r0
 80148ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80148bc:	7bfb      	ldrb	r3, [r7, #15]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d102      	bne.n	80148c8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80148d2:	b590      	push	{r4, r7, lr}
 80148d4:	b093      	sub	sp, #76	@ 0x4c
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80148da:	f107 010c 	add.w	r1, r7, #12
 80148de:	1d3b      	adds	r3, r7, #4
 80148e0:	2200      	movs	r2, #0
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7fe ff8e 	bl	8013804 <find_volume>
 80148e8:	4603      	mov	r3, r0
 80148ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80148ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d131      	bne.n	801495a <f_chdir+0x88>
		dj.obj.fs = fs;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80148fa:	687a      	ldr	r2, [r7, #4]
 80148fc:	f107 0310 	add.w	r3, r7, #16
 8014900:	4611      	mov	r1, r2
 8014902:	4618      	mov	r0, r3
 8014904:	f7fe fe4e 	bl	80135a4 <follow_path>
 8014908:	4603      	mov	r3, r0
 801490a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 801490e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014912:	2b00      	cmp	r3, #0
 8014914:	d11a      	bne.n	801494c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014916:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801491a:	b25b      	sxtb	r3, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	da03      	bge.n	8014928 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	69ba      	ldr	r2, [r7, #24]
 8014924:	61da      	str	r2, [r3, #28]
 8014926:	e011      	b.n	801494c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014928:	7dbb      	ldrb	r3, [r7, #22]
 801492a:	f003 0310 	and.w	r3, r3, #16
 801492e:	2b00      	cmp	r3, #0
 8014930:	d009      	beq.n	8014946 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014936:	68fc      	ldr	r4, [r7, #12]
 8014938:	4611      	mov	r1, r2
 801493a:	4618      	mov	r0, r3
 801493c:	f7fd ff59 	bl	80127f2 <ld_clust>
 8014940:	4603      	mov	r3, r0
 8014942:	61e3      	str	r3, [r4, #28]
 8014944:	e002      	b.n	801494c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014946:	2305      	movs	r3, #5
 8014948:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801494c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014950:	2b04      	cmp	r3, #4
 8014952:	d102      	bne.n	801495a <f_chdir+0x88>
 8014954:	2305      	movs	r3, #5
 8014956:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 801495a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801495e:	4618      	mov	r0, r3
 8014960:	374c      	adds	r7, #76	@ 0x4c
 8014962:	46bd      	mov	sp, r7
 8014964:	bd90      	pop	{r4, r7, pc}

08014966 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014966:	b580      	push	{r7, lr}
 8014968:	b090      	sub	sp, #64	@ 0x40
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
 801496e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f107 0208 	add.w	r2, r7, #8
 8014976:	4611      	mov	r1, r2
 8014978:	4618      	mov	r0, r3
 801497a:	f7ff f9cb 	bl	8013d14 <validate>
 801497e:	4603      	mov	r3, r0
 8014980:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014984:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014988:	2b00      	cmp	r3, #0
 801498a:	d103      	bne.n	8014994 <f_lseek+0x2e>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	7d5b      	ldrb	r3, [r3, #21]
 8014990:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014994:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <f_lseek+0x3c>
 801499c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80149a0:	e201      	b.n	8014da6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	f000 80d9 	beq.w	8014b5e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b2:	d15a      	bne.n	8014a6a <f_lseek+0x104>
			tbl = fp->cltbl;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149b8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80149ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149bc:	1d1a      	adds	r2, r3, #4
 80149be:	627a      	str	r2, [r7, #36]	@ 0x24
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	617b      	str	r3, [r7, #20]
 80149c4:	2302      	movs	r3, #2
 80149c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80149ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d03a      	beq.n	8014a4a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80149d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d6:	613b      	str	r3, [r7, #16]
 80149d8:	2300      	movs	r3, #0
 80149da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80149dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149de:	3302      	adds	r3, #2
 80149e0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80149e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e4:	60fb      	str	r3, [r7, #12]
 80149e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e8:	3301      	adds	r3, #1
 80149ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fd fa36 	bl	8011e62 <get_fat>
 80149f6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80149f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d804      	bhi.n	8014a08 <f_lseek+0xa2>
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2202      	movs	r2, #2
 8014a02:	755a      	strb	r2, [r3, #21]
 8014a04:	2302      	movs	r3, #2
 8014a06:	e1ce      	b.n	8014da6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a0e:	d104      	bne.n	8014a1a <f_lseek+0xb4>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2201      	movs	r2, #1
 8014a14:	755a      	strb	r2, [r3, #21]
 8014a16:	2301      	movs	r3, #1
 8014a18:	e1c5      	b.n	8014da6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d0de      	beq.n	80149e2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d809      	bhi.n	8014a40 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a2e:	1d1a      	adds	r2, r3, #4
 8014a30:	627a      	str	r2, [r7, #36]	@ 0x24
 8014a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a38:	1d1a      	adds	r2, r3, #4
 8014a3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8014a3c:	693a      	ldr	r2, [r7, #16]
 8014a3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	6a1b      	ldr	r3, [r3, #32]
 8014a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d3c4      	bcc.n	80149d4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d803      	bhi.n	8014a62 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	601a      	str	r2, [r3, #0]
 8014a60:	e19f      	b.n	8014da2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014a62:	2311      	movs	r3, #17
 8014a64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014a68:	e19b      	b.n	8014da2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d902      	bls.n	8014a7a <f_lseek+0x114>
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	683a      	ldr	r2, [r7, #0]
 8014a7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 818d 	beq.w	8014da2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	3b01      	subs	r3, #1
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7fd fcd1 	bl	8012436 <clmt_clust>
 8014a94:	4602      	mov	r2, r0
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014a9a:	68ba      	ldr	r2, [r7, #8]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	69db      	ldr	r3, [r3, #28]
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	4610      	mov	r0, r2
 8014aa4:	f7fd f9be 	bl	8011e24 <clust2sect>
 8014aa8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d104      	bne.n	8014aba <f_lseek+0x154>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2202      	movs	r2, #2
 8014ab4:	755a      	strb	r2, [r3, #21]
 8014ab6:	2302      	movs	r3, #2
 8014ab8:	e175      	b.n	8014da6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	3b01      	subs	r3, #1
 8014abe:	68ba      	ldr	r2, [r7, #8]
 8014ac0:	8992      	ldrh	r2, [r2, #12]
 8014ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ac6:	68ba      	ldr	r2, [r7, #8]
 8014ac8:	8952      	ldrh	r2, [r2, #10]
 8014aca:	3a01      	subs	r2, #1
 8014acc:	4013      	ands	r3, r2
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	699b      	ldr	r3, [r3, #24]
 8014ad8:	68ba      	ldr	r2, [r7, #8]
 8014ada:	8992      	ldrh	r2, [r2, #12]
 8014adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ae0:	fb01 f202 	mul.w	r2, r1, r2
 8014ae4:	1a9b      	subs	r3, r3, r2
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f000 815b 	beq.w	8014da2 <f_lseek+0x43c>
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6a1b      	ldr	r3, [r3, #32]
 8014af0:	69ba      	ldr	r2, [r7, #24]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	f000 8155 	beq.w	8014da2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	7d1b      	ldrb	r3, [r3, #20]
 8014afc:	b25b      	sxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	da18      	bge.n	8014b34 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	7858      	ldrb	r0, [r3, #1]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6a1a      	ldr	r2, [r3, #32]
 8014b10:	2301      	movs	r3, #1
 8014b12:	f7fc fdf9 	bl	8011708 <disk_write>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d004      	beq.n	8014b26 <f_lseek+0x1c0>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2201      	movs	r2, #1
 8014b20:	755a      	strb	r2, [r3, #21]
 8014b22:	2301      	movs	r3, #1
 8014b24:	e13f      	b.n	8014da6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	7d1b      	ldrb	r3, [r3, #20]
 8014b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b2e:	b2da      	uxtb	r2, r3
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	7858      	ldrb	r0, [r3, #1]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014b3e:	2301      	movs	r3, #1
 8014b40:	69ba      	ldr	r2, [r7, #24]
 8014b42:	f7fc fdc1 	bl	80116c8 <disk_read>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d004      	beq.n	8014b56 <f_lseek+0x1f0>
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2201      	movs	r2, #1
 8014b50:	755a      	strb	r2, [r3, #21]
 8014b52:	2301      	movs	r3, #1
 8014b54:	e127      	b.n	8014da6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	69ba      	ldr	r2, [r7, #24]
 8014b5a:	621a      	str	r2, [r3, #32]
 8014b5c:	e121      	b.n	8014da2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	683a      	ldr	r2, [r7, #0]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d908      	bls.n	8014b7a <f_lseek+0x214>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	7d1b      	ldrb	r3, [r3, #20]
 8014b6c:	f003 0302 	and.w	r3, r3, #2
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d102      	bne.n	8014b7a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	68db      	ldr	r3, [r3, #12]
 8014b78:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	699b      	ldr	r3, [r3, #24]
 8014b7e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b88:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	f000 80b5 	beq.w	8014cfc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	895b      	ldrh	r3, [r3, #10]
 8014b96:	461a      	mov	r2, r3
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	899b      	ldrh	r3, [r3, #12]
 8014b9c:	fb02 f303 	mul.w	r3, r2, r3
 8014ba0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014ba2:	6a3b      	ldr	r3, [r7, #32]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d01b      	beq.n	8014be0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	1e5a      	subs	r2, r3, #1
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8014bb2:	6a3b      	ldr	r3, [r7, #32]
 8014bb4:	1e59      	subs	r1, r3, #1
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d30f      	bcc.n	8014be0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014bc0:	6a3b      	ldr	r3, [r7, #32]
 8014bc2:	1e5a      	subs	r2, r3, #1
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	425b      	negs	r3, r3
 8014bc8:	401a      	ands	r2, r3
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	699b      	ldr	r3, [r3, #24]
 8014bd2:	683a      	ldr	r2, [r7, #0]
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	69db      	ldr	r3, [r3, #28]
 8014bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014bde:	e022      	b.n	8014c26 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	689b      	ldr	r3, [r3, #8]
 8014be4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d119      	bne.n	8014c20 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2100      	movs	r1, #0
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fd fb88 	bl	8012306 <create_chain>
 8014bf6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bfa:	2b01      	cmp	r3, #1
 8014bfc:	d104      	bne.n	8014c08 <f_lseek+0x2a2>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2202      	movs	r2, #2
 8014c02:	755a      	strb	r2, [r3, #21]
 8014c04:	2302      	movs	r3, #2
 8014c06:	e0ce      	b.n	8014da6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d104      	bne.n	8014c1a <f_lseek+0x2b4>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2201      	movs	r2, #1
 8014c14:	755a      	strb	r2, [r3, #21]
 8014c16:	2301      	movs	r3, #1
 8014c18:	e0c5      	b.n	8014da6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c1e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c24:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d067      	beq.n	8014cfc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014c2c:	e03a      	b.n	8014ca4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014c2e:	683a      	ldr	r2, [r7, #0]
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	603b      	str	r3, [r7, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	699a      	ldr	r2, [r3, #24]
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	441a      	add	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	7d1b      	ldrb	r3, [r3, #20]
 8014c46:	f003 0302 	and.w	r3, r3, #2
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d00b      	beq.n	8014c66 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7fd fb57 	bl	8012306 <create_chain>
 8014c58:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d108      	bne.n	8014c72 <f_lseek+0x30c>
							ofs = 0; break;
 8014c60:	2300      	movs	r3, #0
 8014c62:	603b      	str	r3, [r7, #0]
 8014c64:	e022      	b.n	8014cac <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fd f8f9 	bl	8011e62 <get_fat>
 8014c70:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c78:	d104      	bne.n	8014c84 <f_lseek+0x31e>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	755a      	strb	r2, [r3, #21]
 8014c80:	2301      	movs	r3, #1
 8014c82:	e090      	b.n	8014da6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d904      	bls.n	8014c94 <f_lseek+0x32e>
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	6a1b      	ldr	r3, [r3, #32]
 8014c8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d304      	bcc.n	8014c9e <f_lseek+0x338>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2202      	movs	r2, #2
 8014c98:	755a      	strb	r2, [r3, #21]
 8014c9a:	2302      	movs	r3, #2
 8014c9c:	e083      	b.n	8014da6 <f_lseek+0x440>
					fp->clust = clst;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014ca2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014ca4:	683a      	ldr	r2, [r7, #0]
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d8c0      	bhi.n	8014c2e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	699a      	ldr	r2, [r3, #24]
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	441a      	add	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	899b      	ldrh	r3, [r3, #12]
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cc4:	fb01 f202 	mul.w	r2, r1, r2
 8014cc8:	1a9b      	subs	r3, r3, r2
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d016      	beq.n	8014cfc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7fd f8a6 	bl	8011e24 <clust2sect>
 8014cd8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d104      	bne.n	8014cea <f_lseek+0x384>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2202      	movs	r2, #2
 8014ce4:	755a      	strb	r2, [r3, #21]
 8014ce6:	2302      	movs	r3, #2
 8014ce8:	e05d      	b.n	8014da6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	899b      	ldrh	r3, [r3, #12]
 8014cee:	461a      	mov	r2, r3
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014cf8:	4413      	add	r3, r2
 8014cfa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	699a      	ldr	r2, [r3, #24]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	68db      	ldr	r3, [r3, #12]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d90a      	bls.n	8014d1e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	699a      	ldr	r2, [r3, #24]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	7d1b      	ldrb	r3, [r3, #20]
 8014d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	699b      	ldr	r3, [r3, #24]
 8014d22:	68ba      	ldr	r2, [r7, #8]
 8014d24:	8992      	ldrh	r2, [r2, #12]
 8014d26:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d2a:	fb01 f202 	mul.w	r2, r1, r2
 8014d2e:	1a9b      	subs	r3, r3, r2
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d036      	beq.n	8014da2 <f_lseek+0x43c>
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6a1b      	ldr	r3, [r3, #32]
 8014d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d031      	beq.n	8014da2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	7d1b      	ldrb	r3, [r3, #20]
 8014d42:	b25b      	sxtb	r3, r3
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	da18      	bge.n	8014d7a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	7858      	ldrb	r0, [r3, #1]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6a1a      	ldr	r2, [r3, #32]
 8014d56:	2301      	movs	r3, #1
 8014d58:	f7fc fcd6 	bl	8011708 <disk_write>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d004      	beq.n	8014d6c <f_lseek+0x406>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2201      	movs	r2, #1
 8014d66:	755a      	strb	r2, [r3, #21]
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e01c      	b.n	8014da6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	7d1b      	ldrb	r3, [r3, #20]
 8014d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d74:	b2da      	uxtb	r2, r3
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	7858      	ldrb	r0, [r3, #1]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d84:	2301      	movs	r3, #1
 8014d86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014d88:	f7fc fc9e 	bl	80116c8 <disk_read>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d004      	beq.n	8014d9c <f_lseek+0x436>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2201      	movs	r2, #1
 8014d96:	755a      	strb	r2, [r3, #21]
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e004      	b.n	8014da6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014da0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014da2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3740      	adds	r7, #64	@ 0x40
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b0a0      	sub	sp, #128	@ 0x80
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014dba:	f107 010c 	add.w	r1, r7, #12
 8014dbe:	1d3b      	adds	r3, r7, #4
 8014dc0:	2202      	movs	r2, #2
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fe fd1e 	bl	8013804 <find_volume>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8014dd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f040 80a4 	bne.w	8014f24 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014de2:	4611      	mov	r1, r2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fe fbdd 	bl	80135a4 <follow_path>
 8014dea:	4603      	mov	r3, r0
 8014dec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014df0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d108      	bne.n	8014e0a <f_unlink+0x5c>
 8014df8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8014dfc:	f003 0320 	and.w	r3, r3, #32
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d002      	beq.n	8014e0a <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014e04:	2306      	movs	r3, #6
 8014e06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014e0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d108      	bne.n	8014e24 <f_unlink+0x76>
 8014e12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014e16:	2102      	movs	r1, #2
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7fc fdb5 	bl	8011988 <chk_lock>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014e24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d17b      	bne.n	8014f24 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014e2c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8014e30:	b25b      	sxtb	r3, r3
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	da03      	bge.n	8014e3e <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014e36:	2306      	movs	r3, #6
 8014e38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8014e3c:	e008      	b.n	8014e50 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014e3e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8014e42:	f003 0301 	and.w	r3, r3, #1
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d002      	beq.n	8014e50 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014e4a:	2307      	movs	r3, #7
 8014e4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8014e50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d13d      	bne.n	8014ed4 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014e5c:	4611      	mov	r1, r2
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7fd fcc7 	bl	80127f2 <ld_clust>
 8014e64:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014e66:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8014e6a:	f003 0310 	and.w	r3, r3, #16
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d030      	beq.n	8014ed4 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	69db      	ldr	r3, [r3, #28]
 8014e76:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d103      	bne.n	8014e84 <f_unlink+0xd6>
						res = FR_DENIED;
 8014e7c:	2307      	movs	r3, #7
 8014e7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8014e82:	e027      	b.n	8014ed4 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e8a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014e8c:	f107 0310 	add.w	r3, r7, #16
 8014e90:	2100      	movs	r1, #0
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7fd fb07 	bl	80124a6 <dir_sdi>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8014e9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d116      	bne.n	8014ed4 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014ea6:	f107 0310 	add.w	r3, r7, #16
 8014eaa:	2100      	movs	r1, #0
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fd feca 	bl	8012c46 <dir_read>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014eb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <f_unlink+0x118>
 8014ec0:	2307      	movs	r3, #7
 8014ec2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014ec6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014eca:	2b04      	cmp	r3, #4
 8014ecc:	d102      	bne.n	8014ed4 <f_unlink+0x126>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8014ed4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d123      	bne.n	8014f24 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014edc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7fe f90f 	bl	8013104 <dir_remove>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014eec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10c      	bne.n	8014f0e <f_unlink+0x160>
 8014ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d009      	beq.n	8014f0e <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014efa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014efe:	2200      	movs	r2, #0
 8014f00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fd f99a 	bl	801223c <remove_chain>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014f0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d106      	bne.n	8014f24 <f_unlink+0x176>
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7fc ff13 	bl	8011d44 <sync_fs>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014f24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3780      	adds	r7, #128	@ 0x80
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b098      	sub	sp, #96	@ 0x60
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014f38:	f107 010c 	add.w	r1, r7, #12
 8014f3c:	1d3b      	adds	r3, r7, #4
 8014f3e:	2202      	movs	r2, #2
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7fe fc5f 	bl	8013804 <find_volume>
 8014f46:	4603      	mov	r3, r0
 8014f48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f040 80ff 	bne.w	8015158 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	f107 0310 	add.w	r3, r7, #16
 8014f60:	4611      	mov	r1, r2
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fe fb1e 	bl	80135a4 <follow_path>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d102      	bne.n	8014f7c <f_mkdir+0x4c>
 8014f76:	2308      	movs	r3, #8
 8014f78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f80:	2b04      	cmp	r3, #4
 8014f82:	d108      	bne.n	8014f96 <f_mkdir+0x66>
 8014f84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f88:	f003 0320 	and.w	r3, r3, #32
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d002      	beq.n	8014f96 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014f90:	2306      	movs	r3, #6
 8014f92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f9a:	2b04      	cmp	r3, #4
 8014f9c:	f040 80dc 	bne.w	8015158 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014fa0:	f107 0310 	add.w	r3, r7, #16
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fd f9ad 	bl	8012306 <create_chain>
 8014fac:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	895b      	ldrh	r3, [r3, #10]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	899b      	ldrh	r3, [r3, #12]
 8014fb8:	fb02 f303 	mul.w	r3, r2, r3
 8014fbc:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d102      	bne.n	8014fd0 <f_mkdir+0xa0>
 8014fca:	2307      	movs	r3, #7
 8014fcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8014fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d102      	bne.n	8014fdc <f_mkdir+0xac>
 8014fd6:	2302      	movs	r3, #2
 8014fd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fe2:	d102      	bne.n	8014fea <f_mkdir+0xba>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014fea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d106      	bne.n	8015000 <f_mkdir+0xd0>
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fc fe33 	bl	8011c60 <sync_window>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8015000:	f7fb fdfe 	bl	8010c00 <get_fattime>
 8015004:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801500a:	2b00      	cmp	r3, #0
 801500c:	d16c      	bne.n	80150e8 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015012:	4618      	mov	r0, r3
 8015014:	f7fc ff06 	bl	8011e24 <clust2sect>
 8015018:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	333c      	adds	r3, #60	@ 0x3c
 801501e:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	899b      	ldrh	r3, [r3, #12]
 8015024:	461a      	mov	r2, r3
 8015026:	2100      	movs	r1, #0
 8015028:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801502a:	f7fc fc4f 	bl	80118cc <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801502e:	220b      	movs	r2, #11
 8015030:	2120      	movs	r1, #32
 8015032:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015034:	f7fc fc4a 	bl	80118cc <mem_set>
					dir[DIR_Name] = '.';
 8015038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801503a:	222e      	movs	r2, #46	@ 0x2e
 801503c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801503e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015040:	330b      	adds	r3, #11
 8015042:	2210      	movs	r2, #16
 8015044:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015048:	3316      	adds	r3, #22
 801504a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801504c:	4618      	mov	r0, r3
 801504e:	f7fc fbf0 	bl	8011832 <st_dword>
					st_clust(fs, dir, dcl);
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015056:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015058:	4618      	mov	r0, r3
 801505a:	f7fd fbe9 	bl	8012830 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801505e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015060:	3320      	adds	r3, #32
 8015062:	2220      	movs	r2, #32
 8015064:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015066:	4618      	mov	r0, r3
 8015068:	f7fc fc0f 	bl	801188a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801506c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801506e:	3321      	adds	r3, #33	@ 0x21
 8015070:	222e      	movs	r2, #46	@ 0x2e
 8015072:	701a      	strb	r2, [r3, #0]
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	2b03      	cmp	r3, #3
 801507e:	d106      	bne.n	801508e <f_mkdir+0x15e>
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015086:	429a      	cmp	r2, r3
 8015088:	d101      	bne.n	801508e <f_mkdir+0x15e>
 801508a:	2300      	movs	r3, #0
 801508c:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801508e:	68f8      	ldr	r0, [r7, #12]
 8015090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015092:	3320      	adds	r3, #32
 8015094:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015096:	4619      	mov	r1, r3
 8015098:	f7fd fbca 	bl	8012830 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	895b      	ldrh	r3, [r3, #10]
 80150a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80150a2:	e01c      	b.n	80150de <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 80150a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150a6:	1c5a      	adds	r2, r3, #1
 80150a8:	657a      	str	r2, [r7, #84]	@ 0x54
 80150aa:	68fa      	ldr	r2, [r7, #12]
 80150ac:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	2201      	movs	r2, #1
 80150b2:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7fc fdd2 	bl	8011c60 <sync_window>
 80150bc:	4603      	mov	r3, r0
 80150be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 80150c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d10d      	bne.n	80150e6 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	899b      	ldrh	r3, [r3, #12]
 80150ce:	461a      	mov	r2, r3
 80150d0:	2100      	movs	r1, #0
 80150d2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80150d4:	f7fc fbfa 	bl	80118cc <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80150d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150da:	3b01      	subs	r3, #1
 80150dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80150de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d1df      	bne.n	80150a4 <f_mkdir+0x174>
 80150e4:	e000      	b.n	80150e8 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 80150e6:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80150e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d107      	bne.n	8015100 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80150f0:	f107 0310 	add.w	r3, r7, #16
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd ff0d 	bl	8012f14 <dir_register>
 80150fa:	4603      	mov	r3, r0
 80150fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8015100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015104:	2b00      	cmp	r3, #0
 8015106:	d120      	bne.n	801514a <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801510a:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801510c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801510e:	3316      	adds	r3, #22
 8015110:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015112:	4618      	mov	r0, r3
 8015114:	f7fc fb8d 	bl	8011832 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801511c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd fb86 	bl	8012830 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015126:	330b      	adds	r3, #11
 8015128:	2210      	movs	r2, #16
 801512a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2201      	movs	r2, #1
 8015130:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015132:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10e      	bne.n	8015158 <f_mkdir+0x228>
					res = sync_fs(fs);
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	4618      	mov	r0, r3
 801513e:	f7fc fe01 	bl	8011d44 <sync_fs>
 8015142:	4603      	mov	r3, r0
 8015144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015148:	e006      	b.n	8015158 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801514a:	f107 0310 	add.w	r3, r7, #16
 801514e:	2200      	movs	r2, #0
 8015150:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015152:	4618      	mov	r0, r3
 8015154:	f7fd f872 	bl	801223c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015158:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801515c:	4618      	mov	r0, r3
 801515e:	3760      	adds	r7, #96	@ 0x60
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8015170:	78fb      	ldrb	r3, [r7, #3]
 8015172:	2b0a      	cmp	r3, #10
 8015174:	d103      	bne.n	801517e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015176:	210d      	movs	r1, #13
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f7ff fff3 	bl	8015164 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2b00      	cmp	r3, #0
 8015188:	db25      	blt.n	80151d6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	1c5a      	adds	r2, r3, #1
 801518e:	60fa      	str	r2, [r7, #12]
 8015190:	687a      	ldr	r2, [r7, #4]
 8015192:	4413      	add	r3, r2
 8015194:	78fa      	ldrb	r2, [r7, #3]
 8015196:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b3c      	cmp	r3, #60	@ 0x3c
 801519c:	dd12      	ble.n	80151c4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6818      	ldr	r0, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f103 010c 	add.w	r1, r3, #12
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	f107 0308 	add.w	r3, r7, #8
 80151ae:	f7ff f954 	bl	801445a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80151b2:	68ba      	ldr	r2, [r7, #8]
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d101      	bne.n	80151be <putc_bfd+0x5a>
 80151ba:	2300      	movs	r3, #0
 80151bc:	e001      	b.n	80151c2 <putc_bfd+0x5e>
 80151be:	f04f 33ff 	mov.w	r3, #4294967295
 80151c2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	68fa      	ldr	r2, [r7, #12]
 80151c8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	1c5a      	adds	r2, r3, #1
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	609a      	str	r2, [r3, #8]
 80151d4:	e000      	b.n	80151d8 <putc_bfd+0x74>
	if (i < 0) return;
 80151d6:	bf00      	nop
}
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	db16      	blt.n	801521c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6818      	ldr	r0, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f103 010c 	add.w	r1, r3, #12
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	461a      	mov	r2, r3
 80151fe:	f107 030c 	add.w	r3, r7, #12
 8015202:	f7ff f92a 	bl	801445a <f_write>
 8015206:	4603      	mov	r3, r0
 8015208:	2b00      	cmp	r3, #0
 801520a:	d107      	bne.n	801521c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	4293      	cmp	r3, r2
 8015214:	d102      	bne.n	801521c <putc_flush+0x3e>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	689b      	ldr	r3, [r3, #8]
 801521a:	e001      	b.n	8015220 <putc_flush+0x42>
	return EOF;
 801521c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015220:	4618      	mov	r0, r3
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	683a      	ldr	r2, [r7, #0]
 8015236:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2200      	movs	r2, #0
 801523c:	605a      	str	r2, [r3, #4]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	685a      	ldr	r2, [r3, #4]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	609a      	str	r2, [r3, #8]
}
 8015246:	bf00      	nop
 8015248:	370c      	adds	r7, #12
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr
	...

08015254 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8015254:	b40e      	push	{r1, r2, r3}
 8015256:	b580      	push	{r7, lr}
 8015258:	b0a7      	sub	sp, #156	@ 0x9c
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801525e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015262:	6879      	ldr	r1, [r7, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	f7ff ffdf 	bl	8015228 <putc_init>

	va_start(arp, fmt);
 801526a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801526e:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8015270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015274:	1c5a      	adds	r2, r3, #1
 8015276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8015280:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015284:	2b00      	cmp	r3, #0
 8015286:	f000 81f2 	beq.w	801566e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801528a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801528e:	2b25      	cmp	r3, #37	@ 0x25
 8015290:	d008      	beq.n	80152a4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8015292:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8015296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801529a:	4611      	mov	r1, r2
 801529c:	4618      	mov	r0, r3
 801529e:	f7ff ff61 	bl	8015164 <putc_bfd>
			continue;
 80152a2:	e1e3      	b.n	801566c <f_printf+0x418>
		}
		w = f = 0;
 80152a4:	2300      	movs	r3, #0
 80152a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80152aa:	2300      	movs	r3, #0
 80152ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80152b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80152b4:	1c5a      	adds	r2, r3, #1
 80152b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80152c0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152c4:	2b30      	cmp	r3, #48	@ 0x30
 80152c6:	d10b      	bne.n	80152e0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80152c8:	2301      	movs	r3, #1
 80152ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80152ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80152d2:	1c5a      	adds	r2, r3, #1
 80152d4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80152de:	e024      	b.n	801532a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80152e0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80152e6:	d120      	bne.n	801532a <f_printf+0xd6>
				f = 2; c = *fmt++;
 80152e8:	2302      	movs	r3, #2
 80152ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80152ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80152f2:	1c5a      	adds	r2, r3, #1
 80152f4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80152fe:	e014      	b.n	801532a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8015300:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015304:	4613      	mov	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4413      	add	r3, r2
 801530a:	005b      	lsls	r3, r3, #1
 801530c:	461a      	mov	r2, r3
 801530e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015312:	4413      	add	r3, r2
 8015314:	3b30      	subs	r3, #48	@ 0x30
 8015316:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 801531a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801531e:	1c5a      	adds	r2, r3, #1
 8015320:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 801532a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801532e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015330:	d903      	bls.n	801533a <f_printf+0xe6>
 8015332:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015336:	2b39      	cmp	r3, #57	@ 0x39
 8015338:	d9e2      	bls.n	8015300 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801533a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801533e:	2b6c      	cmp	r3, #108	@ 0x6c
 8015340:	d003      	beq.n	801534a <f_printf+0xf6>
 8015342:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015346:	2b4c      	cmp	r3, #76	@ 0x4c
 8015348:	d10d      	bne.n	8015366 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801534a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801534e:	f043 0304 	orr.w	r3, r3, #4
 8015352:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8015356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801535a:	1c5a      	adds	r2, r3, #1
 801535c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015360:	781b      	ldrb	r3, [r3, #0]
 8015362:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8015366:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801536a:	2b00      	cmp	r3, #0
 801536c:	f000 8181 	beq.w	8015672 <f_printf+0x41e>
		d = c;
 8015370:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015374:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8015378:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801537c:	2b60      	cmp	r3, #96	@ 0x60
 801537e:	d908      	bls.n	8015392 <f_printf+0x13e>
 8015380:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015384:	2b7a      	cmp	r3, #122	@ 0x7a
 8015386:	d804      	bhi.n	8015392 <f_printf+0x13e>
 8015388:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801538c:	3b20      	subs	r3, #32
 801538e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8015392:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015396:	3b42      	subs	r3, #66	@ 0x42
 8015398:	2b16      	cmp	r3, #22
 801539a:	f200 8098 	bhi.w	80154ce <f_printf+0x27a>
 801539e:	a201      	add	r2, pc, #4	@ (adr r2, 80153a4 <f_printf+0x150>)
 80153a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a4:	080154af 	.word	0x080154af
 80153a8:	08015497 	.word	0x08015497
 80153ac:	080154bf 	.word	0x080154bf
 80153b0:	080154cf 	.word	0x080154cf
 80153b4:	080154cf 	.word	0x080154cf
 80153b8:	080154cf 	.word	0x080154cf
 80153bc:	080154cf 	.word	0x080154cf
 80153c0:	080154cf 	.word	0x080154cf
 80153c4:	080154cf 	.word	0x080154cf
 80153c8:	080154cf 	.word	0x080154cf
 80153cc:	080154cf 	.word	0x080154cf
 80153d0:	080154cf 	.word	0x080154cf
 80153d4:	080154cf 	.word	0x080154cf
 80153d8:	080154b7 	.word	0x080154b7
 80153dc:	080154cf 	.word	0x080154cf
 80153e0:	080154cf 	.word	0x080154cf
 80153e4:	080154cf 	.word	0x080154cf
 80153e8:	08015401 	.word	0x08015401
 80153ec:	080154cf 	.word	0x080154cf
 80153f0:	080154bf 	.word	0x080154bf
 80153f4:	080154cf 	.word	0x080154cf
 80153f8:	080154cf 	.word	0x080154cf
 80153fc:	080154c7 	.word	0x080154c7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8015400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015402:	1d1a      	adds	r2, r3, #4
 8015404:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801540a:	2300      	movs	r3, #0
 801540c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015410:	e004      	b.n	801541c <f_printf+0x1c8>
 8015412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015416:	3301      	adds	r3, #1
 8015418:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801541c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801541e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015422:	4413      	add	r3, r2
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d1f3      	bne.n	8015412 <f_printf+0x1be>
			if (!(f & 2)) {
 801542a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801542e:	f003 0302 	and.w	r3, r3, #2
 8015432:	2b00      	cmp	r3, #0
 8015434:	d11a      	bne.n	801546c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8015436:	e005      	b.n	8015444 <f_printf+0x1f0>
 8015438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801543c:	2120      	movs	r1, #32
 801543e:	4618      	mov	r0, r3
 8015440:	f7ff fe90 	bl	8015164 <putc_bfd>
 8015444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015448:	1c5a      	adds	r2, r3, #1
 801544a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801544e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015452:	429a      	cmp	r2, r3
 8015454:	d8f0      	bhi.n	8015438 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8015456:	e009      	b.n	801546c <f_printf+0x218>
 8015458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801545a:	1c5a      	adds	r2, r3, #1
 801545c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801545e:	781a      	ldrb	r2, [r3, #0]
 8015460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015464:	4611      	mov	r1, r2
 8015466:	4618      	mov	r0, r3
 8015468:	f7ff fe7c 	bl	8015164 <putc_bfd>
 801546c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d1f1      	bne.n	8015458 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8015474:	e005      	b.n	8015482 <f_printf+0x22e>
 8015476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801547a:	2120      	movs	r1, #32
 801547c:	4618      	mov	r0, r3
 801547e:	f7ff fe71 	bl	8015164 <putc_bfd>
 8015482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015486:	1c5a      	adds	r2, r3, #1
 8015488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801548c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015490:	429a      	cmp	r2, r3
 8015492:	d8f0      	bhi.n	8015476 <f_printf+0x222>
			continue;
 8015494:	e0ea      	b.n	801566c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8015496:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015498:	1d1a      	adds	r2, r3, #4
 801549a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	b2da      	uxtb	r2, r3
 80154a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154a4:	4611      	mov	r1, r2
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7ff fe5c 	bl	8015164 <putc_bfd>
 80154ac:	e0de      	b.n	801566c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80154ae:	2302      	movs	r3, #2
 80154b0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80154b4:	e014      	b.n	80154e0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80154b6:	2308      	movs	r3, #8
 80154b8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80154bc:	e010      	b.n	80154e0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80154be:	230a      	movs	r3, #10
 80154c0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80154c4:	e00c      	b.n	80154e0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80154c6:	2310      	movs	r3, #16
 80154c8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80154cc:	e008      	b.n	80154e0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80154ce:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80154d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154d6:	4611      	mov	r1, r2
 80154d8:	4618      	mov	r0, r3
 80154da:	f7ff fe43 	bl	8015164 <putc_bfd>
 80154de:	e0c5      	b.n	801566c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80154e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80154e4:	f003 0304 	and.w	r3, r3, #4
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d004      	beq.n	80154f6 <f_printf+0x2a2>
 80154ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80154ee:	1d1a      	adds	r2, r3, #4
 80154f0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	e00c      	b.n	8015510 <f_printf+0x2bc>
 80154f6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80154fa:	2b44      	cmp	r3, #68	@ 0x44
 80154fc:	d104      	bne.n	8015508 <f_printf+0x2b4>
 80154fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015500:	1d1a      	adds	r2, r3, #4
 8015502:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	e003      	b.n	8015510 <f_printf+0x2bc>
 8015508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801550a:	1d1a      	adds	r2, r3, #4
 801550c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8015514:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015518:	2b44      	cmp	r3, #68	@ 0x44
 801551a:	d10e      	bne.n	801553a <f_printf+0x2e6>
 801551c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015520:	2b00      	cmp	r3, #0
 8015522:	da0a      	bge.n	801553a <f_printf+0x2e6>
			v = 0 - v;
 8015524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015528:	425b      	negs	r3, r3
 801552a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 801552e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015532:	f043 0308 	orr.w	r3, r3, #8
 8015536:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 801553a:	2300      	movs	r3, #0
 801553c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8015540:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8015544:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015548:	fbb3 f1f2 	udiv	r1, r3, r2
 801554c:	fb01 f202 	mul.w	r2, r1, r2
 8015550:	1a9b      	subs	r3, r3, r2
 8015552:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8015556:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 801555a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8015566:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801556a:	2b09      	cmp	r3, #9
 801556c:	d90b      	bls.n	8015586 <f_printf+0x332>
 801556e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015572:	2b78      	cmp	r3, #120	@ 0x78
 8015574:	d101      	bne.n	801557a <f_printf+0x326>
 8015576:	2227      	movs	r2, #39	@ 0x27
 8015578:	e000      	b.n	801557c <f_printf+0x328>
 801557a:	2207      	movs	r2, #7
 801557c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015580:	4413      	add	r3, r2
 8015582:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8015586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801558a:	1c5a      	adds	r2, r3, #1
 801558c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8015590:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015594:	3230      	adds	r2, #48	@ 0x30
 8015596:	b2d2      	uxtb	r2, r2
 8015598:	3398      	adds	r3, #152	@ 0x98
 801559a:	443b      	add	r3, r7
 801559c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80155a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d003      	beq.n	80155b0 <f_printf+0x35c>
 80155a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155ac:	2b1f      	cmp	r3, #31
 80155ae:	d9c7      	bls.n	8015540 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80155b0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80155b4:	f003 0308 	and.w	r3, r3, #8
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d009      	beq.n	80155d0 <f_printf+0x37c>
 80155bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80155c6:	3398      	adds	r3, #152	@ 0x98
 80155c8:	443b      	add	r3, r7
 80155ca:	222d      	movs	r2, #45	@ 0x2d
 80155cc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80155d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80155d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80155dc:	f003 0301 	and.w	r3, r3, #1
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d001      	beq.n	80155e8 <f_printf+0x394>
 80155e4:	2330      	movs	r3, #48	@ 0x30
 80155e6:	e000      	b.n	80155ea <f_printf+0x396>
 80155e8:	2320      	movs	r3, #32
 80155ea:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80155ee:	e007      	b.n	8015600 <f_printf+0x3ac>
 80155f0:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80155f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80155f8:	4611      	mov	r1, r2
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff fdb2 	bl	8015164 <putc_bfd>
 8015600:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015604:	f003 0302 	and.w	r3, r3, #2
 8015608:	2b00      	cmp	r3, #0
 801560a:	d108      	bne.n	801561e <f_printf+0x3ca>
 801560c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015610:	1c5a      	adds	r2, r3, #1
 8015612:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015616:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801561a:	429a      	cmp	r2, r3
 801561c:	d8e8      	bhi.n	80155f0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801561e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015622:	3b01      	subs	r3, #1
 8015624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015628:	f107 020c 	add.w	r2, r7, #12
 801562c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015630:	4413      	add	r3, r2
 8015632:	781a      	ldrb	r2, [r3, #0]
 8015634:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015638:	4611      	mov	r1, r2
 801563a:	4618      	mov	r0, r3
 801563c:	f7ff fd92 	bl	8015164 <putc_bfd>
		} while (i);
 8015640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015644:	2b00      	cmp	r3, #0
 8015646:	d1ea      	bne.n	801561e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8015648:	e007      	b.n	801565a <f_printf+0x406>
 801564a:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801564e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015652:	4611      	mov	r1, r2
 8015654:	4618      	mov	r0, r3
 8015656:	f7ff fd85 	bl	8015164 <putc_bfd>
 801565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801565e:	1c5a      	adds	r2, r3, #1
 8015660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015664:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015668:	429a      	cmp	r2, r3
 801566a:	d8ee      	bhi.n	801564a <f_printf+0x3f6>
		c = *fmt++;
 801566c:	e600      	b.n	8015270 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801566e:	bf00      	nop
 8015670:	e000      	b.n	8015674 <f_printf+0x420>
		if (!c) break;
 8015672:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015678:	4618      	mov	r0, r3
 801567a:	f7ff fdb0 	bl	80151de <putc_flush>
 801567e:	4603      	mov	r3, r0
}
 8015680:	4618      	mov	r0, r3
 8015682:	379c      	adds	r7, #156	@ 0x9c
 8015684:	46bd      	mov	sp, r7
 8015686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801568a:	b003      	add	sp, #12
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop

08015690 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015690:	b480      	push	{r7}
 8015692:	b087      	sub	sp, #28
 8015694:	af00      	add	r7, sp, #0
 8015696:	60f8      	str	r0, [r7, #12]
 8015698:	60b9      	str	r1, [r7, #8]
 801569a:	4613      	mov	r3, r2
 801569c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801569e:	2301      	movs	r3, #1
 80156a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80156a2:	2300      	movs	r3, #0
 80156a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80156a6:	4b1f      	ldr	r3, [pc, #124]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156a8:	7a5b      	ldrb	r3, [r3, #9]
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d131      	bne.n	8015714 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80156b0:	4b1c      	ldr	r3, [pc, #112]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156b2:	7a5b      	ldrb	r3, [r3, #9]
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	461a      	mov	r2, r3
 80156b8:	4b1a      	ldr	r3, [pc, #104]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156ba:	2100      	movs	r1, #0
 80156bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80156be:	4b19      	ldr	r3, [pc, #100]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156c0:	7a5b      	ldrb	r3, [r3, #9]
 80156c2:	b2db      	uxtb	r3, r3
 80156c4:	4a17      	ldr	r2, [pc, #92]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	4413      	add	r3, r2
 80156ca:	68fa      	ldr	r2, [r7, #12]
 80156cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80156ce:	4b15      	ldr	r3, [pc, #84]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156d0:	7a5b      	ldrb	r3, [r3, #9]
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	461a      	mov	r2, r3
 80156d6:	4b13      	ldr	r3, [pc, #76]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156d8:	4413      	add	r3, r2
 80156da:	79fa      	ldrb	r2, [r7, #7]
 80156dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80156de:	4b11      	ldr	r3, [pc, #68]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156e0:	7a5b      	ldrb	r3, [r3, #9]
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	1c5a      	adds	r2, r3, #1
 80156e6:	b2d1      	uxtb	r1, r2
 80156e8:	4a0e      	ldr	r2, [pc, #56]	@ (8015724 <FATFS_LinkDriverEx+0x94>)
 80156ea:	7251      	strb	r1, [r2, #9]
 80156ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80156ee:	7dbb      	ldrb	r3, [r7, #22]
 80156f0:	3330      	adds	r3, #48	@ 0x30
 80156f2:	b2da      	uxtb	r2, r3
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	3301      	adds	r3, #1
 80156fc:	223a      	movs	r2, #58	@ 0x3a
 80156fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	3302      	adds	r3, #2
 8015704:	222f      	movs	r2, #47	@ 0x2f
 8015706:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	3303      	adds	r3, #3
 801570c:	2200      	movs	r2, #0
 801570e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015714:	7dfb      	ldrb	r3, [r7, #23]
}
 8015716:	4618      	mov	r0, r3
 8015718:	371c      	adds	r7, #28
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr
 8015722:	bf00      	nop
 8015724:	24005654 	.word	0x24005654

08015728 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015732:	2200      	movs	r2, #0
 8015734:	6839      	ldr	r1, [r7, #0]
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f7ff ffaa 	bl	8015690 <FATFS_LinkDriverEx>
 801573c:	4603      	mov	r3, r0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
	...

08015748 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015748:	b480      	push	{r7}
 801574a:	b085      	sub	sp, #20
 801574c:	af00      	add	r7, sp, #0
 801574e:	4603      	mov	r3, r0
 8015750:	6039      	str	r1, [r7, #0]
 8015752:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015754:	88fb      	ldrh	r3, [r7, #6]
 8015756:	2b7f      	cmp	r3, #127	@ 0x7f
 8015758:	d802      	bhi.n	8015760 <ff_convert+0x18>
		c = chr;
 801575a:	88fb      	ldrh	r3, [r7, #6]
 801575c:	81fb      	strh	r3, [r7, #14]
 801575e:	e025      	b.n	80157ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d00b      	beq.n	801577e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015766:	88fb      	ldrh	r3, [r7, #6]
 8015768:	2bff      	cmp	r3, #255	@ 0xff
 801576a:	d805      	bhi.n	8015778 <ff_convert+0x30>
 801576c:	88fb      	ldrh	r3, [r7, #6]
 801576e:	3b80      	subs	r3, #128	@ 0x80
 8015770:	4a12      	ldr	r2, [pc, #72]	@ (80157bc <ff_convert+0x74>)
 8015772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015776:	e000      	b.n	801577a <ff_convert+0x32>
 8015778:	2300      	movs	r3, #0
 801577a:	81fb      	strh	r3, [r7, #14]
 801577c:	e016      	b.n	80157ac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801577e:	2300      	movs	r3, #0
 8015780:	81fb      	strh	r3, [r7, #14]
 8015782:	e009      	b.n	8015798 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015784:	89fb      	ldrh	r3, [r7, #14]
 8015786:	4a0d      	ldr	r2, [pc, #52]	@ (80157bc <ff_convert+0x74>)
 8015788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801578c:	88fa      	ldrh	r2, [r7, #6]
 801578e:	429a      	cmp	r2, r3
 8015790:	d006      	beq.n	80157a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015792:	89fb      	ldrh	r3, [r7, #14]
 8015794:	3301      	adds	r3, #1
 8015796:	81fb      	strh	r3, [r7, #14]
 8015798:	89fb      	ldrh	r3, [r7, #14]
 801579a:	2b7f      	cmp	r3, #127	@ 0x7f
 801579c:	d9f2      	bls.n	8015784 <ff_convert+0x3c>
 801579e:	e000      	b.n	80157a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80157a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80157a2:	89fb      	ldrh	r3, [r7, #14]
 80157a4:	3380      	adds	r3, #128	@ 0x80
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	b2db      	uxtb	r3, r3
 80157aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80157ac:	89fb      	ldrh	r3, [r7, #14]
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3714      	adds	r7, #20
 80157b2:	46bd      	mov	sp, r7
 80157b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b8:	4770      	bx	lr
 80157ba:	bf00      	nop
 80157bc:	08018964 	.word	0x08018964

080157c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80157c0:	b480      	push	{r7}
 80157c2:	b087      	sub	sp, #28
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	4603      	mov	r3, r0
 80157c8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80157ca:	88fb      	ldrh	r3, [r7, #6]
 80157cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80157d0:	d201      	bcs.n	80157d6 <ff_wtoupper+0x16>
 80157d2:	4b3e      	ldr	r3, [pc, #248]	@ (80158cc <ff_wtoupper+0x10c>)
 80157d4:	e000      	b.n	80157d8 <ff_wtoupper+0x18>
 80157d6:	4b3e      	ldr	r3, [pc, #248]	@ (80158d0 <ff_wtoupper+0x110>)
 80157d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	1c9a      	adds	r2, r3, #2
 80157de:	617a      	str	r2, [r7, #20]
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80157e4:	8a7b      	ldrh	r3, [r7, #18]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d068      	beq.n	80158bc <ff_wtoupper+0xfc>
 80157ea:	88fa      	ldrh	r2, [r7, #6]
 80157ec:	8a7b      	ldrh	r3, [r7, #18]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d364      	bcc.n	80158bc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	1c9a      	adds	r2, r3, #2
 80157f6:	617a      	str	r2, [r7, #20]
 80157f8:	881b      	ldrh	r3, [r3, #0]
 80157fa:	823b      	strh	r3, [r7, #16]
 80157fc:	8a3b      	ldrh	r3, [r7, #16]
 80157fe:	0a1b      	lsrs	r3, r3, #8
 8015800:	81fb      	strh	r3, [r7, #14]
 8015802:	8a3b      	ldrh	r3, [r7, #16]
 8015804:	b2db      	uxtb	r3, r3
 8015806:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015808:	88fa      	ldrh	r2, [r7, #6]
 801580a:	8a79      	ldrh	r1, [r7, #18]
 801580c:	8a3b      	ldrh	r3, [r7, #16]
 801580e:	440b      	add	r3, r1
 8015810:	429a      	cmp	r2, r3
 8015812:	da49      	bge.n	80158a8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015814:	89fb      	ldrh	r3, [r7, #14]
 8015816:	2b08      	cmp	r3, #8
 8015818:	d84f      	bhi.n	80158ba <ff_wtoupper+0xfa>
 801581a:	a201      	add	r2, pc, #4	@ (adr r2, 8015820 <ff_wtoupper+0x60>)
 801581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015820:	08015845 	.word	0x08015845
 8015824:	08015857 	.word	0x08015857
 8015828:	0801586d 	.word	0x0801586d
 801582c:	08015875 	.word	0x08015875
 8015830:	0801587d 	.word	0x0801587d
 8015834:	08015885 	.word	0x08015885
 8015838:	0801588d 	.word	0x0801588d
 801583c:	08015895 	.word	0x08015895
 8015840:	0801589d 	.word	0x0801589d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015844:	88fa      	ldrh	r2, [r7, #6]
 8015846:	8a7b      	ldrh	r3, [r7, #18]
 8015848:	1ad3      	subs	r3, r2, r3
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	697a      	ldr	r2, [r7, #20]
 801584e:	4413      	add	r3, r2
 8015850:	881b      	ldrh	r3, [r3, #0]
 8015852:	80fb      	strh	r3, [r7, #6]
 8015854:	e027      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015856:	88fa      	ldrh	r2, [r7, #6]
 8015858:	8a7b      	ldrh	r3, [r7, #18]
 801585a:	1ad3      	subs	r3, r2, r3
 801585c:	b29b      	uxth	r3, r3
 801585e:	f003 0301 	and.w	r3, r3, #1
 8015862:	b29b      	uxth	r3, r3
 8015864:	88fa      	ldrh	r2, [r7, #6]
 8015866:	1ad3      	subs	r3, r2, r3
 8015868:	80fb      	strh	r3, [r7, #6]
 801586a:	e01c      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801586c:	88fb      	ldrh	r3, [r7, #6]
 801586e:	3b10      	subs	r3, #16
 8015870:	80fb      	strh	r3, [r7, #6]
 8015872:	e018      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015874:	88fb      	ldrh	r3, [r7, #6]
 8015876:	3b20      	subs	r3, #32
 8015878:	80fb      	strh	r3, [r7, #6]
 801587a:	e014      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801587c:	88fb      	ldrh	r3, [r7, #6]
 801587e:	3b30      	subs	r3, #48	@ 0x30
 8015880:	80fb      	strh	r3, [r7, #6]
 8015882:	e010      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015884:	88fb      	ldrh	r3, [r7, #6]
 8015886:	3b1a      	subs	r3, #26
 8015888:	80fb      	strh	r3, [r7, #6]
 801588a:	e00c      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801588c:	88fb      	ldrh	r3, [r7, #6]
 801588e:	3308      	adds	r3, #8
 8015890:	80fb      	strh	r3, [r7, #6]
 8015892:	e008      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015894:	88fb      	ldrh	r3, [r7, #6]
 8015896:	3b50      	subs	r3, #80	@ 0x50
 8015898:	80fb      	strh	r3, [r7, #6]
 801589a:	e004      	b.n	80158a6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801589c:	88fb      	ldrh	r3, [r7, #6]
 801589e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80158a2:	80fb      	strh	r3, [r7, #6]
 80158a4:	bf00      	nop
			}
			break;
 80158a6:	e008      	b.n	80158ba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80158a8:	89fb      	ldrh	r3, [r7, #14]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d195      	bne.n	80157da <ff_wtoupper+0x1a>
 80158ae:	8a3b      	ldrh	r3, [r7, #16]
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	697a      	ldr	r2, [r7, #20]
 80158b4:	4413      	add	r3, r2
 80158b6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80158b8:	e78f      	b.n	80157da <ff_wtoupper+0x1a>
			break;
 80158ba:	bf00      	nop
	}

	return chr;
 80158bc:	88fb      	ldrh	r3, [r7, #6]
}
 80158be:	4618      	mov	r0, r3
 80158c0:	371c      	adds	r7, #28
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop
 80158cc:	08018a64 	.word	0x08018a64
 80158d0:	08018c58 	.word	0x08018c58

080158d4 <atof>:
 80158d4:	2100      	movs	r1, #0
 80158d6:	f000 bdb9 	b.w	801644c <strtod>

080158da <atoi>:
 80158da:	220a      	movs	r2, #10
 80158dc:	2100      	movs	r1, #0
 80158de:	f000 be3b 	b.w	8016558 <strtol>

080158e2 <sulp>:
 80158e2:	b570      	push	{r4, r5, r6, lr}
 80158e4:	4604      	mov	r4, r0
 80158e6:	460d      	mov	r5, r1
 80158e8:	4616      	mov	r6, r2
 80158ea:	ec45 4b10 	vmov	d0, r4, r5
 80158ee:	f001 ffa3 	bl	8017838 <__ulp>
 80158f2:	b17e      	cbz	r6, 8015914 <sulp+0x32>
 80158f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80158f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	dd09      	ble.n	8015914 <sulp+0x32>
 8015900:	051b      	lsls	r3, r3, #20
 8015902:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015906:	2000      	movs	r0, #0
 8015908:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801590c:	ec41 0b17 	vmov	d7, r0, r1
 8015910:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015914:	bd70      	pop	{r4, r5, r6, pc}
	...

08015918 <_strtod_l>:
 8015918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	ed2d 8b0a 	vpush	{d8-d12}
 8015920:	b097      	sub	sp, #92	@ 0x5c
 8015922:	4688      	mov	r8, r1
 8015924:	920e      	str	r2, [sp, #56]	@ 0x38
 8015926:	2200      	movs	r2, #0
 8015928:	9212      	str	r2, [sp, #72]	@ 0x48
 801592a:	9005      	str	r0, [sp, #20]
 801592c:	f04f 0a00 	mov.w	sl, #0
 8015930:	f04f 0b00 	mov.w	fp, #0
 8015934:	460a      	mov	r2, r1
 8015936:	9211      	str	r2, [sp, #68]	@ 0x44
 8015938:	7811      	ldrb	r1, [r2, #0]
 801593a:	292b      	cmp	r1, #43	@ 0x2b
 801593c:	d04c      	beq.n	80159d8 <_strtod_l+0xc0>
 801593e:	d839      	bhi.n	80159b4 <_strtod_l+0x9c>
 8015940:	290d      	cmp	r1, #13
 8015942:	d833      	bhi.n	80159ac <_strtod_l+0x94>
 8015944:	2908      	cmp	r1, #8
 8015946:	d833      	bhi.n	80159b0 <_strtod_l+0x98>
 8015948:	2900      	cmp	r1, #0
 801594a:	d03c      	beq.n	80159c6 <_strtod_l+0xae>
 801594c:	2200      	movs	r2, #0
 801594e:	9208      	str	r2, [sp, #32]
 8015950:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015952:	782a      	ldrb	r2, [r5, #0]
 8015954:	2a30      	cmp	r2, #48	@ 0x30
 8015956:	f040 80b7 	bne.w	8015ac8 <_strtod_l+0x1b0>
 801595a:	786a      	ldrb	r2, [r5, #1]
 801595c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015960:	2a58      	cmp	r2, #88	@ 0x58
 8015962:	d170      	bne.n	8015a46 <_strtod_l+0x12e>
 8015964:	9302      	str	r3, [sp, #8]
 8015966:	9b08      	ldr	r3, [sp, #32]
 8015968:	9301      	str	r3, [sp, #4]
 801596a:	ab12      	add	r3, sp, #72	@ 0x48
 801596c:	9300      	str	r3, [sp, #0]
 801596e:	4a90      	ldr	r2, [pc, #576]	@ (8015bb0 <_strtod_l+0x298>)
 8015970:	9805      	ldr	r0, [sp, #20]
 8015972:	ab13      	add	r3, sp, #76	@ 0x4c
 8015974:	a911      	add	r1, sp, #68	@ 0x44
 8015976:	f001 f861 	bl	8016a3c <__gethex>
 801597a:	f010 060f 	ands.w	r6, r0, #15
 801597e:	4604      	mov	r4, r0
 8015980:	d005      	beq.n	801598e <_strtod_l+0x76>
 8015982:	2e06      	cmp	r6, #6
 8015984:	d12a      	bne.n	80159dc <_strtod_l+0xc4>
 8015986:	3501      	adds	r5, #1
 8015988:	2300      	movs	r3, #0
 801598a:	9511      	str	r5, [sp, #68]	@ 0x44
 801598c:	9308      	str	r3, [sp, #32]
 801598e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015990:	2b00      	cmp	r3, #0
 8015992:	f040 8537 	bne.w	8016404 <_strtod_l+0xaec>
 8015996:	9b08      	ldr	r3, [sp, #32]
 8015998:	ec4b ab10 	vmov	d0, sl, fp
 801599c:	b1cb      	cbz	r3, 80159d2 <_strtod_l+0xba>
 801599e:	eeb1 0b40 	vneg.f64	d0, d0
 80159a2:	b017      	add	sp, #92	@ 0x5c
 80159a4:	ecbd 8b0a 	vpop	{d8-d12}
 80159a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ac:	2920      	cmp	r1, #32
 80159ae:	d1cd      	bne.n	801594c <_strtod_l+0x34>
 80159b0:	3201      	adds	r2, #1
 80159b2:	e7c0      	b.n	8015936 <_strtod_l+0x1e>
 80159b4:	292d      	cmp	r1, #45	@ 0x2d
 80159b6:	d1c9      	bne.n	801594c <_strtod_l+0x34>
 80159b8:	2101      	movs	r1, #1
 80159ba:	9108      	str	r1, [sp, #32]
 80159bc:	1c51      	adds	r1, r2, #1
 80159be:	9111      	str	r1, [sp, #68]	@ 0x44
 80159c0:	7852      	ldrb	r2, [r2, #1]
 80159c2:	2a00      	cmp	r2, #0
 80159c4:	d1c4      	bne.n	8015950 <_strtod_l+0x38>
 80159c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159c8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	f040 8517 	bne.w	8016400 <_strtod_l+0xae8>
 80159d2:	ec4b ab10 	vmov	d0, sl, fp
 80159d6:	e7e4      	b.n	80159a2 <_strtod_l+0x8a>
 80159d8:	2100      	movs	r1, #0
 80159da:	e7ee      	b.n	80159ba <_strtod_l+0xa2>
 80159dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80159de:	b13a      	cbz	r2, 80159f0 <_strtod_l+0xd8>
 80159e0:	2135      	movs	r1, #53	@ 0x35
 80159e2:	a814      	add	r0, sp, #80	@ 0x50
 80159e4:	f002 f81f 	bl	8017a26 <__copybits>
 80159e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80159ea:	9805      	ldr	r0, [sp, #20]
 80159ec:	f001 fbf8 	bl	80171e0 <_Bfree>
 80159f0:	1e73      	subs	r3, r6, #1
 80159f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80159f4:	2b04      	cmp	r3, #4
 80159f6:	d806      	bhi.n	8015a06 <_strtod_l+0xee>
 80159f8:	e8df f003 	tbb	[pc, r3]
 80159fc:	201d0314 	.word	0x201d0314
 8015a00:	14          	.byte	0x14
 8015a01:	00          	.byte	0x00
 8015a02:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015a06:	05e3      	lsls	r3, r4, #23
 8015a08:	bf48      	it	mi
 8015a0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015a0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015a12:	0d1b      	lsrs	r3, r3, #20
 8015a14:	051b      	lsls	r3, r3, #20
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d1b9      	bne.n	801598e <_strtod_l+0x76>
 8015a1a:	f000 ff19 	bl	8016850 <__errno>
 8015a1e:	2322      	movs	r3, #34	@ 0x22
 8015a20:	6003      	str	r3, [r0, #0]
 8015a22:	e7b4      	b.n	801598e <_strtod_l+0x76>
 8015a24:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015a28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015a2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015a30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015a34:	e7e7      	b.n	8015a06 <_strtod_l+0xee>
 8015a36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015bb8 <_strtod_l+0x2a0>
 8015a3a:	e7e4      	b.n	8015a06 <_strtod_l+0xee>
 8015a3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015a40:	f04f 3aff 	mov.w	sl, #4294967295
 8015a44:	e7df      	b.n	8015a06 <_strtod_l+0xee>
 8015a46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a48:	1c5a      	adds	r2, r3, #1
 8015a4a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a4c:	785b      	ldrb	r3, [r3, #1]
 8015a4e:	2b30      	cmp	r3, #48	@ 0x30
 8015a50:	d0f9      	beq.n	8015a46 <_strtod_l+0x12e>
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d09b      	beq.n	801598e <_strtod_l+0x76>
 8015a56:	2301      	movs	r3, #1
 8015a58:	9307      	str	r3, [sp, #28]
 8015a5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a5e:	2300      	movs	r3, #0
 8015a60:	9306      	str	r3, [sp, #24]
 8015a62:	4699      	mov	r9, r3
 8015a64:	461d      	mov	r5, r3
 8015a66:	220a      	movs	r2, #10
 8015a68:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015a6a:	7804      	ldrb	r4, [r0, #0]
 8015a6c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015a70:	b2d9      	uxtb	r1, r3
 8015a72:	2909      	cmp	r1, #9
 8015a74:	d92a      	bls.n	8015acc <_strtod_l+0x1b4>
 8015a76:	494f      	ldr	r1, [pc, #316]	@ (8015bb4 <_strtod_l+0x29c>)
 8015a78:	2201      	movs	r2, #1
 8015a7a:	f000 fe91 	bl	80167a0 <strncmp>
 8015a7e:	b398      	cbz	r0, 8015ae8 <_strtod_l+0x1d0>
 8015a80:	2000      	movs	r0, #0
 8015a82:	4622      	mov	r2, r4
 8015a84:	462b      	mov	r3, r5
 8015a86:	4607      	mov	r7, r0
 8015a88:	4601      	mov	r1, r0
 8015a8a:	2a65      	cmp	r2, #101	@ 0x65
 8015a8c:	d001      	beq.n	8015a92 <_strtod_l+0x17a>
 8015a8e:	2a45      	cmp	r2, #69	@ 0x45
 8015a90:	d118      	bne.n	8015ac4 <_strtod_l+0x1ac>
 8015a92:	b91b      	cbnz	r3, 8015a9c <_strtod_l+0x184>
 8015a94:	9b07      	ldr	r3, [sp, #28]
 8015a96:	4303      	orrs	r3, r0
 8015a98:	d095      	beq.n	80159c6 <_strtod_l+0xae>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015aa0:	f108 0201 	add.w	r2, r8, #1
 8015aa4:	9211      	str	r2, [sp, #68]	@ 0x44
 8015aa6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015aaa:	2a2b      	cmp	r2, #43	@ 0x2b
 8015aac:	d074      	beq.n	8015b98 <_strtod_l+0x280>
 8015aae:	2a2d      	cmp	r2, #45	@ 0x2d
 8015ab0:	d07a      	beq.n	8015ba8 <_strtod_l+0x290>
 8015ab2:	f04f 0e00 	mov.w	lr, #0
 8015ab6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015aba:	2c09      	cmp	r4, #9
 8015abc:	f240 8082 	bls.w	8015bc4 <_strtod_l+0x2ac>
 8015ac0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015ac4:	2400      	movs	r4, #0
 8015ac6:	e09d      	b.n	8015c04 <_strtod_l+0x2ec>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	e7c5      	b.n	8015a58 <_strtod_l+0x140>
 8015acc:	2d08      	cmp	r5, #8
 8015ace:	bfc8      	it	gt
 8015ad0:	9906      	ldrgt	r1, [sp, #24]
 8015ad2:	f100 0001 	add.w	r0, r0, #1
 8015ad6:	bfca      	itet	gt
 8015ad8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015adc:	fb02 3909 	mlale	r9, r2, r9, r3
 8015ae0:	9306      	strgt	r3, [sp, #24]
 8015ae2:	3501      	adds	r5, #1
 8015ae4:	9011      	str	r0, [sp, #68]	@ 0x44
 8015ae6:	e7bf      	b.n	8015a68 <_strtod_l+0x150>
 8015ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015aea:	1c5a      	adds	r2, r3, #1
 8015aec:	9211      	str	r2, [sp, #68]	@ 0x44
 8015aee:	785a      	ldrb	r2, [r3, #1]
 8015af0:	b3bd      	cbz	r5, 8015b62 <_strtod_l+0x24a>
 8015af2:	4607      	mov	r7, r0
 8015af4:	462b      	mov	r3, r5
 8015af6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015afa:	2909      	cmp	r1, #9
 8015afc:	d912      	bls.n	8015b24 <_strtod_l+0x20c>
 8015afe:	2101      	movs	r1, #1
 8015b00:	e7c3      	b.n	8015a8a <_strtod_l+0x172>
 8015b02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b04:	1c5a      	adds	r2, r3, #1
 8015b06:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b08:	785a      	ldrb	r2, [r3, #1]
 8015b0a:	3001      	adds	r0, #1
 8015b0c:	2a30      	cmp	r2, #48	@ 0x30
 8015b0e:	d0f8      	beq.n	8015b02 <_strtod_l+0x1ea>
 8015b10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015b14:	2b08      	cmp	r3, #8
 8015b16:	f200 847a 	bhi.w	801640e <_strtod_l+0xaf6>
 8015b1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b1e:	4607      	mov	r7, r0
 8015b20:	2000      	movs	r0, #0
 8015b22:	4603      	mov	r3, r0
 8015b24:	3a30      	subs	r2, #48	@ 0x30
 8015b26:	f100 0101 	add.w	r1, r0, #1
 8015b2a:	d014      	beq.n	8015b56 <_strtod_l+0x23e>
 8015b2c:	440f      	add	r7, r1
 8015b2e:	469c      	mov	ip, r3
 8015b30:	f04f 0e0a 	mov.w	lr, #10
 8015b34:	f10c 0401 	add.w	r4, ip, #1
 8015b38:	1ae6      	subs	r6, r4, r3
 8015b3a:	42b1      	cmp	r1, r6
 8015b3c:	dc13      	bgt.n	8015b66 <_strtod_l+0x24e>
 8015b3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8015b42:	1819      	adds	r1, r3, r0
 8015b44:	2908      	cmp	r1, #8
 8015b46:	f103 0301 	add.w	r3, r3, #1
 8015b4a:	4403      	add	r3, r0
 8015b4c:	dc19      	bgt.n	8015b82 <_strtod_l+0x26a>
 8015b4e:	210a      	movs	r1, #10
 8015b50:	fb01 2909 	mla	r9, r1, r9, r2
 8015b54:	2100      	movs	r1, #0
 8015b56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b58:	1c50      	adds	r0, r2, #1
 8015b5a:	9011      	str	r0, [sp, #68]	@ 0x44
 8015b5c:	7852      	ldrb	r2, [r2, #1]
 8015b5e:	4608      	mov	r0, r1
 8015b60:	e7c9      	b.n	8015af6 <_strtod_l+0x1de>
 8015b62:	4628      	mov	r0, r5
 8015b64:	e7d2      	b.n	8015b0c <_strtod_l+0x1f4>
 8015b66:	f1bc 0f08 	cmp.w	ip, #8
 8015b6a:	dc03      	bgt.n	8015b74 <_strtod_l+0x25c>
 8015b6c:	fb0e f909 	mul.w	r9, lr, r9
 8015b70:	46a4      	mov	ip, r4
 8015b72:	e7df      	b.n	8015b34 <_strtod_l+0x21c>
 8015b74:	2c10      	cmp	r4, #16
 8015b76:	bfde      	ittt	le
 8015b78:	9e06      	ldrle	r6, [sp, #24]
 8015b7a:	fb0e f606 	mulle.w	r6, lr, r6
 8015b7e:	9606      	strle	r6, [sp, #24]
 8015b80:	e7f6      	b.n	8015b70 <_strtod_l+0x258>
 8015b82:	290f      	cmp	r1, #15
 8015b84:	bfdf      	itttt	le
 8015b86:	9806      	ldrle	r0, [sp, #24]
 8015b88:	210a      	movle	r1, #10
 8015b8a:	fb01 2200 	mlale	r2, r1, r0, r2
 8015b8e:	9206      	strle	r2, [sp, #24]
 8015b90:	e7e0      	b.n	8015b54 <_strtod_l+0x23c>
 8015b92:	2700      	movs	r7, #0
 8015b94:	2101      	movs	r1, #1
 8015b96:	e77d      	b.n	8015a94 <_strtod_l+0x17c>
 8015b98:	f04f 0e00 	mov.w	lr, #0
 8015b9c:	f108 0202 	add.w	r2, r8, #2
 8015ba0:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ba2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015ba6:	e786      	b.n	8015ab6 <_strtod_l+0x19e>
 8015ba8:	f04f 0e01 	mov.w	lr, #1
 8015bac:	e7f6      	b.n	8015b9c <_strtod_l+0x284>
 8015bae:	bf00      	nop
 8015bb0:	08018e90 	.word	0x08018e90
 8015bb4:	08018d14 	.word	0x08018d14
 8015bb8:	7ff00000 	.word	0x7ff00000
 8015bbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015bbe:	1c54      	adds	r4, r2, #1
 8015bc0:	9411      	str	r4, [sp, #68]	@ 0x44
 8015bc2:	7852      	ldrb	r2, [r2, #1]
 8015bc4:	2a30      	cmp	r2, #48	@ 0x30
 8015bc6:	d0f9      	beq.n	8015bbc <_strtod_l+0x2a4>
 8015bc8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015bcc:	2c08      	cmp	r4, #8
 8015bce:	f63f af79 	bhi.w	8015ac4 <_strtod_l+0x1ac>
 8015bd2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015bd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015bda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015bdc:	1c54      	adds	r4, r2, #1
 8015bde:	9411      	str	r4, [sp, #68]	@ 0x44
 8015be0:	7852      	ldrb	r2, [r2, #1]
 8015be2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8015be6:	2e09      	cmp	r6, #9
 8015be8:	d937      	bls.n	8015c5a <_strtod_l+0x342>
 8015bea:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8015bec:	1ba4      	subs	r4, r4, r6
 8015bee:	2c08      	cmp	r4, #8
 8015bf0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015bf4:	dc02      	bgt.n	8015bfc <_strtod_l+0x2e4>
 8015bf6:	4564      	cmp	r4, ip
 8015bf8:	bfa8      	it	ge
 8015bfa:	4664      	movge	r4, ip
 8015bfc:	f1be 0f00 	cmp.w	lr, #0
 8015c00:	d000      	beq.n	8015c04 <_strtod_l+0x2ec>
 8015c02:	4264      	negs	r4, r4
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d14d      	bne.n	8015ca4 <_strtod_l+0x38c>
 8015c08:	9b07      	ldr	r3, [sp, #28]
 8015c0a:	4318      	orrs	r0, r3
 8015c0c:	f47f aebf 	bne.w	801598e <_strtod_l+0x76>
 8015c10:	2900      	cmp	r1, #0
 8015c12:	f47f aed8 	bne.w	80159c6 <_strtod_l+0xae>
 8015c16:	2a69      	cmp	r2, #105	@ 0x69
 8015c18:	d027      	beq.n	8015c6a <_strtod_l+0x352>
 8015c1a:	dc24      	bgt.n	8015c66 <_strtod_l+0x34e>
 8015c1c:	2a49      	cmp	r2, #73	@ 0x49
 8015c1e:	d024      	beq.n	8015c6a <_strtod_l+0x352>
 8015c20:	2a4e      	cmp	r2, #78	@ 0x4e
 8015c22:	f47f aed0 	bne.w	80159c6 <_strtod_l+0xae>
 8015c26:	4997      	ldr	r1, [pc, #604]	@ (8015e84 <_strtod_l+0x56c>)
 8015c28:	a811      	add	r0, sp, #68	@ 0x44
 8015c2a:	f001 f929 	bl	8016e80 <__match>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	f43f aec9 	beq.w	80159c6 <_strtod_l+0xae>
 8015c34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	2b28      	cmp	r3, #40	@ 0x28
 8015c3a:	d12d      	bne.n	8015c98 <_strtod_l+0x380>
 8015c3c:	4992      	ldr	r1, [pc, #584]	@ (8015e88 <_strtod_l+0x570>)
 8015c3e:	aa14      	add	r2, sp, #80	@ 0x50
 8015c40:	a811      	add	r0, sp, #68	@ 0x44
 8015c42:	f001 f931 	bl	8016ea8 <__hexnan>
 8015c46:	2805      	cmp	r0, #5
 8015c48:	d126      	bne.n	8015c98 <_strtod_l+0x380>
 8015c4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015c4c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015c50:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015c54:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015c58:	e699      	b.n	801598e <_strtod_l+0x76>
 8015c5a:	240a      	movs	r4, #10
 8015c5c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015c60:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015c64:	e7b9      	b.n	8015bda <_strtod_l+0x2c2>
 8015c66:	2a6e      	cmp	r2, #110	@ 0x6e
 8015c68:	e7db      	b.n	8015c22 <_strtod_l+0x30a>
 8015c6a:	4988      	ldr	r1, [pc, #544]	@ (8015e8c <_strtod_l+0x574>)
 8015c6c:	a811      	add	r0, sp, #68	@ 0x44
 8015c6e:	f001 f907 	bl	8016e80 <__match>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	f43f aea7 	beq.w	80159c6 <_strtod_l+0xae>
 8015c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c7a:	4985      	ldr	r1, [pc, #532]	@ (8015e90 <_strtod_l+0x578>)
 8015c7c:	3b01      	subs	r3, #1
 8015c7e:	a811      	add	r0, sp, #68	@ 0x44
 8015c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c82:	f001 f8fd 	bl	8016e80 <__match>
 8015c86:	b910      	cbnz	r0, 8015c8e <_strtod_l+0x376>
 8015c88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c8a:	3301      	adds	r3, #1
 8015c8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c8e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015ea4 <_strtod_l+0x58c>
 8015c92:	f04f 0a00 	mov.w	sl, #0
 8015c96:	e67a      	b.n	801598e <_strtod_l+0x76>
 8015c98:	487e      	ldr	r0, [pc, #504]	@ (8015e94 <_strtod_l+0x57c>)
 8015c9a:	f000 fe15 	bl	80168c8 <nan>
 8015c9e:	ec5b ab10 	vmov	sl, fp, d0
 8015ca2:	e674      	b.n	801598e <_strtod_l+0x76>
 8015ca4:	ee07 9a90 	vmov	s15, r9
 8015ca8:	1be2      	subs	r2, r4, r7
 8015caa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015cae:	2d00      	cmp	r5, #0
 8015cb0:	bf08      	it	eq
 8015cb2:	461d      	moveq	r5, r3
 8015cb4:	2b10      	cmp	r3, #16
 8015cb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cb8:	461a      	mov	r2, r3
 8015cba:	bfa8      	it	ge
 8015cbc:	2210      	movge	r2, #16
 8015cbe:	2b09      	cmp	r3, #9
 8015cc0:	ec5b ab17 	vmov	sl, fp, d7
 8015cc4:	dc15      	bgt.n	8015cf2 <_strtod_l+0x3da>
 8015cc6:	1be1      	subs	r1, r4, r7
 8015cc8:	2900      	cmp	r1, #0
 8015cca:	f43f ae60 	beq.w	801598e <_strtod_l+0x76>
 8015cce:	eba4 0107 	sub.w	r1, r4, r7
 8015cd2:	dd72      	ble.n	8015dba <_strtod_l+0x4a2>
 8015cd4:	2916      	cmp	r1, #22
 8015cd6:	dc59      	bgt.n	8015d8c <_strtod_l+0x474>
 8015cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8015e98 <_strtod_l+0x580>)
 8015cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ce0:	ed93 7b00 	vldr	d7, [r3]
 8015ce4:	ec4b ab16 	vmov	d6, sl, fp
 8015ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015cec:	ec5b ab17 	vmov	sl, fp, d7
 8015cf0:	e64d      	b.n	801598e <_strtod_l+0x76>
 8015cf2:	4969      	ldr	r1, [pc, #420]	@ (8015e98 <_strtod_l+0x580>)
 8015cf4:	eddd 6a06 	vldr	s13, [sp, #24]
 8015cf8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015cfc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015d00:	2b0f      	cmp	r3, #15
 8015d02:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015d06:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015d0a:	ec5b ab16 	vmov	sl, fp, d6
 8015d0e:	ddda      	ble.n	8015cc6 <_strtod_l+0x3ae>
 8015d10:	1a9a      	subs	r2, r3, r2
 8015d12:	1be1      	subs	r1, r4, r7
 8015d14:	440a      	add	r2, r1
 8015d16:	2a00      	cmp	r2, #0
 8015d18:	f340 8094 	ble.w	8015e44 <_strtod_l+0x52c>
 8015d1c:	f012 000f 	ands.w	r0, r2, #15
 8015d20:	d00a      	beq.n	8015d38 <_strtod_l+0x420>
 8015d22:	495d      	ldr	r1, [pc, #372]	@ (8015e98 <_strtod_l+0x580>)
 8015d24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015d28:	ed91 7b00 	vldr	d7, [r1]
 8015d2c:	ec4b ab16 	vmov	d6, sl, fp
 8015d30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d34:	ec5b ab17 	vmov	sl, fp, d7
 8015d38:	f032 020f 	bics.w	r2, r2, #15
 8015d3c:	d073      	beq.n	8015e26 <_strtod_l+0x50e>
 8015d3e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015d42:	dd47      	ble.n	8015dd4 <_strtod_l+0x4bc>
 8015d44:	2400      	movs	r4, #0
 8015d46:	4625      	mov	r5, r4
 8015d48:	9407      	str	r4, [sp, #28]
 8015d4a:	4626      	mov	r6, r4
 8015d4c:	9a05      	ldr	r2, [sp, #20]
 8015d4e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015ea4 <_strtod_l+0x58c>
 8015d52:	2322      	movs	r3, #34	@ 0x22
 8015d54:	6013      	str	r3, [r2, #0]
 8015d56:	f04f 0a00 	mov.w	sl, #0
 8015d5a:	9b07      	ldr	r3, [sp, #28]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f43f ae16 	beq.w	801598e <_strtod_l+0x76>
 8015d62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015d64:	9805      	ldr	r0, [sp, #20]
 8015d66:	f001 fa3b 	bl	80171e0 <_Bfree>
 8015d6a:	9805      	ldr	r0, [sp, #20]
 8015d6c:	4631      	mov	r1, r6
 8015d6e:	f001 fa37 	bl	80171e0 <_Bfree>
 8015d72:	9805      	ldr	r0, [sp, #20]
 8015d74:	4629      	mov	r1, r5
 8015d76:	f001 fa33 	bl	80171e0 <_Bfree>
 8015d7a:	9907      	ldr	r1, [sp, #28]
 8015d7c:	9805      	ldr	r0, [sp, #20]
 8015d7e:	f001 fa2f 	bl	80171e0 <_Bfree>
 8015d82:	9805      	ldr	r0, [sp, #20]
 8015d84:	4621      	mov	r1, r4
 8015d86:	f001 fa2b 	bl	80171e0 <_Bfree>
 8015d8a:	e600      	b.n	801598e <_strtod_l+0x76>
 8015d8c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015d90:	1be0      	subs	r0, r4, r7
 8015d92:	4281      	cmp	r1, r0
 8015d94:	dbbc      	blt.n	8015d10 <_strtod_l+0x3f8>
 8015d96:	4a40      	ldr	r2, [pc, #256]	@ (8015e98 <_strtod_l+0x580>)
 8015d98:	f1c3 030f 	rsb	r3, r3, #15
 8015d9c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015da0:	ed91 7b00 	vldr	d7, [r1]
 8015da4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015da6:	ec4b ab16 	vmov	d6, sl, fp
 8015daa:	1acb      	subs	r3, r1, r3
 8015dac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015db0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015db4:	ed92 6b00 	vldr	d6, [r2]
 8015db8:	e796      	b.n	8015ce8 <_strtod_l+0x3d0>
 8015dba:	3116      	adds	r1, #22
 8015dbc:	dba8      	blt.n	8015d10 <_strtod_l+0x3f8>
 8015dbe:	4b36      	ldr	r3, [pc, #216]	@ (8015e98 <_strtod_l+0x580>)
 8015dc0:	1b3c      	subs	r4, r7, r4
 8015dc2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015dc6:	ed94 7b00 	vldr	d7, [r4]
 8015dca:	ec4b ab16 	vmov	d6, sl, fp
 8015dce:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015dd2:	e78b      	b.n	8015cec <_strtod_l+0x3d4>
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	ec4b ab17 	vmov	d7, sl, fp
 8015dda:	4e30      	ldr	r6, [pc, #192]	@ (8015e9c <_strtod_l+0x584>)
 8015ddc:	1112      	asrs	r2, r2, #4
 8015dde:	4601      	mov	r1, r0
 8015de0:	2a01      	cmp	r2, #1
 8015de2:	dc23      	bgt.n	8015e2c <_strtod_l+0x514>
 8015de4:	b108      	cbz	r0, 8015dea <_strtod_l+0x4d2>
 8015de6:	ec5b ab17 	vmov	sl, fp, d7
 8015dea:	4a2c      	ldr	r2, [pc, #176]	@ (8015e9c <_strtod_l+0x584>)
 8015dec:	482c      	ldr	r0, [pc, #176]	@ (8015ea0 <_strtod_l+0x588>)
 8015dee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015df2:	ed92 7b00 	vldr	d7, [r2]
 8015df6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015dfa:	ec4b ab16 	vmov	d6, sl, fp
 8015dfe:	4a29      	ldr	r2, [pc, #164]	@ (8015ea4 <_strtod_l+0x58c>)
 8015e00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e04:	ee17 1a90 	vmov	r1, s15
 8015e08:	400a      	ands	r2, r1
 8015e0a:	4282      	cmp	r2, r0
 8015e0c:	ec5b ab17 	vmov	sl, fp, d7
 8015e10:	d898      	bhi.n	8015d44 <_strtod_l+0x42c>
 8015e12:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015e16:	4282      	cmp	r2, r0
 8015e18:	bf86      	itte	hi
 8015e1a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015ea8 <_strtod_l+0x590>
 8015e1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015e22:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015e26:	2200      	movs	r2, #0
 8015e28:	9206      	str	r2, [sp, #24]
 8015e2a:	e076      	b.n	8015f1a <_strtod_l+0x602>
 8015e2c:	f012 0f01 	tst.w	r2, #1
 8015e30:	d004      	beq.n	8015e3c <_strtod_l+0x524>
 8015e32:	ed96 6b00 	vldr	d6, [r6]
 8015e36:	2001      	movs	r0, #1
 8015e38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e3c:	3101      	adds	r1, #1
 8015e3e:	1052      	asrs	r2, r2, #1
 8015e40:	3608      	adds	r6, #8
 8015e42:	e7cd      	b.n	8015de0 <_strtod_l+0x4c8>
 8015e44:	d0ef      	beq.n	8015e26 <_strtod_l+0x50e>
 8015e46:	4252      	negs	r2, r2
 8015e48:	f012 000f 	ands.w	r0, r2, #15
 8015e4c:	d00a      	beq.n	8015e64 <_strtod_l+0x54c>
 8015e4e:	4912      	ldr	r1, [pc, #72]	@ (8015e98 <_strtod_l+0x580>)
 8015e50:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015e54:	ed91 7b00 	vldr	d7, [r1]
 8015e58:	ec4b ab16 	vmov	d6, sl, fp
 8015e5c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015e60:	ec5b ab17 	vmov	sl, fp, d7
 8015e64:	1112      	asrs	r2, r2, #4
 8015e66:	d0de      	beq.n	8015e26 <_strtod_l+0x50e>
 8015e68:	2a1f      	cmp	r2, #31
 8015e6a:	dd1f      	ble.n	8015eac <_strtod_l+0x594>
 8015e6c:	2400      	movs	r4, #0
 8015e6e:	4625      	mov	r5, r4
 8015e70:	9407      	str	r4, [sp, #28]
 8015e72:	4626      	mov	r6, r4
 8015e74:	9a05      	ldr	r2, [sp, #20]
 8015e76:	2322      	movs	r3, #34	@ 0x22
 8015e78:	f04f 0a00 	mov.w	sl, #0
 8015e7c:	f04f 0b00 	mov.w	fp, #0
 8015e80:	6013      	str	r3, [r2, #0]
 8015e82:	e76a      	b.n	8015d5a <_strtod_l+0x442>
 8015e84:	08018d1f 	.word	0x08018d1f
 8015e88:	08018e7c 	.word	0x08018e7c
 8015e8c:	08018d16 	.word	0x08018d16
 8015e90:	08018d19 	.word	0x08018d19
 8015e94:	08018e46 	.word	0x08018e46
 8015e98:	08019008 	.word	0x08019008
 8015e9c:	08018fe0 	.word	0x08018fe0
 8015ea0:	7ca00000 	.word	0x7ca00000
 8015ea4:	7ff00000 	.word	0x7ff00000
 8015ea8:	7fefffff 	.word	0x7fefffff
 8015eac:	f012 0110 	ands.w	r1, r2, #16
 8015eb0:	bf18      	it	ne
 8015eb2:	216a      	movne	r1, #106	@ 0x6a
 8015eb4:	9106      	str	r1, [sp, #24]
 8015eb6:	ec4b ab17 	vmov	d7, sl, fp
 8015eba:	49af      	ldr	r1, [pc, #700]	@ (8016178 <_strtod_l+0x860>)
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	07d6      	lsls	r6, r2, #31
 8015ec0:	d504      	bpl.n	8015ecc <_strtod_l+0x5b4>
 8015ec2:	ed91 6b00 	vldr	d6, [r1]
 8015ec6:	2001      	movs	r0, #1
 8015ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ecc:	1052      	asrs	r2, r2, #1
 8015ece:	f101 0108 	add.w	r1, r1, #8
 8015ed2:	d1f4      	bne.n	8015ebe <_strtod_l+0x5a6>
 8015ed4:	b108      	cbz	r0, 8015eda <_strtod_l+0x5c2>
 8015ed6:	ec5b ab17 	vmov	sl, fp, d7
 8015eda:	9a06      	ldr	r2, [sp, #24]
 8015edc:	b1b2      	cbz	r2, 8015f0c <_strtod_l+0x5f4>
 8015ede:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015ee2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015ee6:	2a00      	cmp	r2, #0
 8015ee8:	4658      	mov	r0, fp
 8015eea:	dd0f      	ble.n	8015f0c <_strtod_l+0x5f4>
 8015eec:	2a1f      	cmp	r2, #31
 8015eee:	dd55      	ble.n	8015f9c <_strtod_l+0x684>
 8015ef0:	2a34      	cmp	r2, #52	@ 0x34
 8015ef2:	bfde      	ittt	le
 8015ef4:	f04f 32ff 	movle.w	r2, #4294967295
 8015ef8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015efc:	408a      	lslle	r2, r1
 8015efe:	f04f 0a00 	mov.w	sl, #0
 8015f02:	bfcc      	ite	gt
 8015f04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015f08:	ea02 0b00 	andle.w	fp, r2, r0
 8015f0c:	ec4b ab17 	vmov	d7, sl, fp
 8015f10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f18:	d0a8      	beq.n	8015e6c <_strtod_l+0x554>
 8015f1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015f1c:	9805      	ldr	r0, [sp, #20]
 8015f1e:	f8cd 9000 	str.w	r9, [sp]
 8015f22:	462a      	mov	r2, r5
 8015f24:	f001 f9c4 	bl	80172b0 <__s2b>
 8015f28:	9007      	str	r0, [sp, #28]
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	f43f af0a 	beq.w	8015d44 <_strtod_l+0x42c>
 8015f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f32:	1b3f      	subs	r7, r7, r4
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	bfb4      	ite	lt
 8015f38:	463b      	movlt	r3, r7
 8015f3a:	2300      	movge	r3, #0
 8015f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f40:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8016168 <_strtod_l+0x850>
 8015f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f48:	2400      	movs	r4, #0
 8015f4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f4c:	4625      	mov	r5, r4
 8015f4e:	9b07      	ldr	r3, [sp, #28]
 8015f50:	9805      	ldr	r0, [sp, #20]
 8015f52:	6859      	ldr	r1, [r3, #4]
 8015f54:	f001 f904 	bl	8017160 <_Balloc>
 8015f58:	4606      	mov	r6, r0
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	f43f aef6 	beq.w	8015d4c <_strtod_l+0x434>
 8015f60:	9b07      	ldr	r3, [sp, #28]
 8015f62:	691a      	ldr	r2, [r3, #16]
 8015f64:	ec4b ab19 	vmov	d9, sl, fp
 8015f68:	3202      	adds	r2, #2
 8015f6a:	f103 010c 	add.w	r1, r3, #12
 8015f6e:	0092      	lsls	r2, r2, #2
 8015f70:	300c      	adds	r0, #12
 8015f72:	f000 fc9a 	bl	80168aa <memcpy>
 8015f76:	eeb0 0b49 	vmov.f64	d0, d9
 8015f7a:	9805      	ldr	r0, [sp, #20]
 8015f7c:	aa14      	add	r2, sp, #80	@ 0x50
 8015f7e:	a913      	add	r1, sp, #76	@ 0x4c
 8015f80:	f001 fcca 	bl	8017918 <__d2b>
 8015f84:	9012      	str	r0, [sp, #72]	@ 0x48
 8015f86:	2800      	cmp	r0, #0
 8015f88:	f43f aee0 	beq.w	8015d4c <_strtod_l+0x434>
 8015f8c:	9805      	ldr	r0, [sp, #20]
 8015f8e:	2101      	movs	r1, #1
 8015f90:	f001 fa24 	bl	80173dc <__i2b>
 8015f94:	4605      	mov	r5, r0
 8015f96:	b940      	cbnz	r0, 8015faa <_strtod_l+0x692>
 8015f98:	2500      	movs	r5, #0
 8015f9a:	e6d7      	b.n	8015d4c <_strtod_l+0x434>
 8015f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8015fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8015fa4:	ea02 0a0a 	and.w	sl, r2, sl
 8015fa8:	e7b0      	b.n	8015f0c <_strtod_l+0x5f4>
 8015faa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015fac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015fae:	2f00      	cmp	r7, #0
 8015fb0:	bfab      	itete	ge
 8015fb2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015fb4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015fb6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015fba:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015fbe:	bfac      	ite	ge
 8015fc0:	eb07 0903 	addge.w	r9, r7, r3
 8015fc4:	eba3 0807 	sublt.w	r8, r3, r7
 8015fc8:	9b06      	ldr	r3, [sp, #24]
 8015fca:	1aff      	subs	r7, r7, r3
 8015fcc:	4417      	add	r7, r2
 8015fce:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015fd2:	4a6a      	ldr	r2, [pc, #424]	@ (801617c <_strtod_l+0x864>)
 8015fd4:	3f01      	subs	r7, #1
 8015fd6:	4297      	cmp	r7, r2
 8015fd8:	da51      	bge.n	801607e <_strtod_l+0x766>
 8015fda:	1bd1      	subs	r1, r2, r7
 8015fdc:	291f      	cmp	r1, #31
 8015fde:	eba3 0301 	sub.w	r3, r3, r1
 8015fe2:	f04f 0201 	mov.w	r2, #1
 8015fe6:	dc3e      	bgt.n	8016066 <_strtod_l+0x74e>
 8015fe8:	408a      	lsls	r2, r1
 8015fea:	920c      	str	r2, [sp, #48]	@ 0x30
 8015fec:	2200      	movs	r2, #0
 8015fee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015ff0:	eb09 0703 	add.w	r7, r9, r3
 8015ff4:	4498      	add	r8, r3
 8015ff6:	9b06      	ldr	r3, [sp, #24]
 8015ff8:	45b9      	cmp	r9, r7
 8015ffa:	4498      	add	r8, r3
 8015ffc:	464b      	mov	r3, r9
 8015ffe:	bfa8      	it	ge
 8016000:	463b      	movge	r3, r7
 8016002:	4543      	cmp	r3, r8
 8016004:	bfa8      	it	ge
 8016006:	4643      	movge	r3, r8
 8016008:	2b00      	cmp	r3, #0
 801600a:	bfc2      	ittt	gt
 801600c:	1aff      	subgt	r7, r7, r3
 801600e:	eba8 0803 	subgt.w	r8, r8, r3
 8016012:	eba9 0903 	subgt.w	r9, r9, r3
 8016016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016018:	2b00      	cmp	r3, #0
 801601a:	dd16      	ble.n	801604a <_strtod_l+0x732>
 801601c:	4629      	mov	r1, r5
 801601e:	9805      	ldr	r0, [sp, #20]
 8016020:	461a      	mov	r2, r3
 8016022:	f001 fa93 	bl	801754c <__pow5mult>
 8016026:	4605      	mov	r5, r0
 8016028:	2800      	cmp	r0, #0
 801602a:	d0b5      	beq.n	8015f98 <_strtod_l+0x680>
 801602c:	4601      	mov	r1, r0
 801602e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016030:	9805      	ldr	r0, [sp, #20]
 8016032:	f001 f9e9 	bl	8017408 <__multiply>
 8016036:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016038:	2800      	cmp	r0, #0
 801603a:	f43f ae87 	beq.w	8015d4c <_strtod_l+0x434>
 801603e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016040:	9805      	ldr	r0, [sp, #20]
 8016042:	f001 f8cd 	bl	80171e0 <_Bfree>
 8016046:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016048:	9312      	str	r3, [sp, #72]	@ 0x48
 801604a:	2f00      	cmp	r7, #0
 801604c:	dc1b      	bgt.n	8016086 <_strtod_l+0x76e>
 801604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016050:	2b00      	cmp	r3, #0
 8016052:	dd21      	ble.n	8016098 <_strtod_l+0x780>
 8016054:	4631      	mov	r1, r6
 8016056:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016058:	9805      	ldr	r0, [sp, #20]
 801605a:	f001 fa77 	bl	801754c <__pow5mult>
 801605e:	4606      	mov	r6, r0
 8016060:	b9d0      	cbnz	r0, 8016098 <_strtod_l+0x780>
 8016062:	2600      	movs	r6, #0
 8016064:	e672      	b.n	8015d4c <_strtod_l+0x434>
 8016066:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801606a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801606e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016072:	37e2      	adds	r7, #226	@ 0xe2
 8016074:	fa02 f107 	lsl.w	r1, r2, r7
 8016078:	910b      	str	r1, [sp, #44]	@ 0x2c
 801607a:	920c      	str	r2, [sp, #48]	@ 0x30
 801607c:	e7b8      	b.n	8015ff0 <_strtod_l+0x6d8>
 801607e:	2200      	movs	r2, #0
 8016080:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016082:	2201      	movs	r2, #1
 8016084:	e7f9      	b.n	801607a <_strtod_l+0x762>
 8016086:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016088:	9805      	ldr	r0, [sp, #20]
 801608a:	463a      	mov	r2, r7
 801608c:	f001 fab8 	bl	8017600 <__lshift>
 8016090:	9012      	str	r0, [sp, #72]	@ 0x48
 8016092:	2800      	cmp	r0, #0
 8016094:	d1db      	bne.n	801604e <_strtod_l+0x736>
 8016096:	e659      	b.n	8015d4c <_strtod_l+0x434>
 8016098:	f1b8 0f00 	cmp.w	r8, #0
 801609c:	dd07      	ble.n	80160ae <_strtod_l+0x796>
 801609e:	4631      	mov	r1, r6
 80160a0:	9805      	ldr	r0, [sp, #20]
 80160a2:	4642      	mov	r2, r8
 80160a4:	f001 faac 	bl	8017600 <__lshift>
 80160a8:	4606      	mov	r6, r0
 80160aa:	2800      	cmp	r0, #0
 80160ac:	d0d9      	beq.n	8016062 <_strtod_l+0x74a>
 80160ae:	f1b9 0f00 	cmp.w	r9, #0
 80160b2:	dd08      	ble.n	80160c6 <_strtod_l+0x7ae>
 80160b4:	4629      	mov	r1, r5
 80160b6:	9805      	ldr	r0, [sp, #20]
 80160b8:	464a      	mov	r2, r9
 80160ba:	f001 faa1 	bl	8017600 <__lshift>
 80160be:	4605      	mov	r5, r0
 80160c0:	2800      	cmp	r0, #0
 80160c2:	f43f ae43 	beq.w	8015d4c <_strtod_l+0x434>
 80160c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80160c8:	9805      	ldr	r0, [sp, #20]
 80160ca:	4632      	mov	r2, r6
 80160cc:	f001 fb20 	bl	8017710 <__mdiff>
 80160d0:	4604      	mov	r4, r0
 80160d2:	2800      	cmp	r0, #0
 80160d4:	f43f ae3a 	beq.w	8015d4c <_strtod_l+0x434>
 80160d8:	2300      	movs	r3, #0
 80160da:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80160de:	60c3      	str	r3, [r0, #12]
 80160e0:	4629      	mov	r1, r5
 80160e2:	f001 faf9 	bl	80176d8 <__mcmp>
 80160e6:	2800      	cmp	r0, #0
 80160e8:	da4c      	bge.n	8016184 <_strtod_l+0x86c>
 80160ea:	ea58 080a 	orrs.w	r8, r8, sl
 80160ee:	d172      	bne.n	80161d6 <_strtod_l+0x8be>
 80160f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d16e      	bne.n	80161d6 <_strtod_l+0x8be>
 80160f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80160fc:	0d1b      	lsrs	r3, r3, #20
 80160fe:	051b      	lsls	r3, r3, #20
 8016100:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016104:	d967      	bls.n	80161d6 <_strtod_l+0x8be>
 8016106:	6963      	ldr	r3, [r4, #20]
 8016108:	b913      	cbnz	r3, 8016110 <_strtod_l+0x7f8>
 801610a:	6923      	ldr	r3, [r4, #16]
 801610c:	2b01      	cmp	r3, #1
 801610e:	dd62      	ble.n	80161d6 <_strtod_l+0x8be>
 8016110:	4621      	mov	r1, r4
 8016112:	2201      	movs	r2, #1
 8016114:	9805      	ldr	r0, [sp, #20]
 8016116:	f001 fa73 	bl	8017600 <__lshift>
 801611a:	4629      	mov	r1, r5
 801611c:	4604      	mov	r4, r0
 801611e:	f001 fadb 	bl	80176d8 <__mcmp>
 8016122:	2800      	cmp	r0, #0
 8016124:	dd57      	ble.n	80161d6 <_strtod_l+0x8be>
 8016126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801612a:	9a06      	ldr	r2, [sp, #24]
 801612c:	0d1b      	lsrs	r3, r3, #20
 801612e:	051b      	lsls	r3, r3, #20
 8016130:	2a00      	cmp	r2, #0
 8016132:	d06e      	beq.n	8016212 <_strtod_l+0x8fa>
 8016134:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016138:	d86b      	bhi.n	8016212 <_strtod_l+0x8fa>
 801613a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801613e:	f67f ae99 	bls.w	8015e74 <_strtod_l+0x55c>
 8016142:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8016170 <_strtod_l+0x858>
 8016146:	ec4b ab16 	vmov	d6, sl, fp
 801614a:	4b0d      	ldr	r3, [pc, #52]	@ (8016180 <_strtod_l+0x868>)
 801614c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016150:	ee17 2a90 	vmov	r2, s15
 8016154:	4013      	ands	r3, r2
 8016156:	ec5b ab17 	vmov	sl, fp, d7
 801615a:	2b00      	cmp	r3, #0
 801615c:	f47f ae01 	bne.w	8015d62 <_strtod_l+0x44a>
 8016160:	9a05      	ldr	r2, [sp, #20]
 8016162:	2322      	movs	r3, #34	@ 0x22
 8016164:	6013      	str	r3, [r2, #0]
 8016166:	e5fc      	b.n	8015d62 <_strtod_l+0x44a>
 8016168:	ffc00000 	.word	0xffc00000
 801616c:	41dfffff 	.word	0x41dfffff
 8016170:	00000000 	.word	0x00000000
 8016174:	39500000 	.word	0x39500000
 8016178:	08018ea8 	.word	0x08018ea8
 801617c:	fffffc02 	.word	0xfffffc02
 8016180:	7ff00000 	.word	0x7ff00000
 8016184:	46d9      	mov	r9, fp
 8016186:	d15d      	bne.n	8016244 <_strtod_l+0x92c>
 8016188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801618c:	f1b8 0f00 	cmp.w	r8, #0
 8016190:	d02a      	beq.n	80161e8 <_strtod_l+0x8d0>
 8016192:	4aa9      	ldr	r2, [pc, #676]	@ (8016438 <_strtod_l+0xb20>)
 8016194:	4293      	cmp	r3, r2
 8016196:	d12a      	bne.n	80161ee <_strtod_l+0x8d6>
 8016198:	9b06      	ldr	r3, [sp, #24]
 801619a:	4652      	mov	r2, sl
 801619c:	b1fb      	cbz	r3, 80161de <_strtod_l+0x8c6>
 801619e:	4ba7      	ldr	r3, [pc, #668]	@ (801643c <_strtod_l+0xb24>)
 80161a0:	ea0b 0303 	and.w	r3, fp, r3
 80161a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80161a8:	f04f 31ff 	mov.w	r1, #4294967295
 80161ac:	d81a      	bhi.n	80161e4 <_strtod_l+0x8cc>
 80161ae:	0d1b      	lsrs	r3, r3, #20
 80161b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80161b4:	fa01 f303 	lsl.w	r3, r1, r3
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d118      	bne.n	80161ee <_strtod_l+0x8d6>
 80161bc:	4ba0      	ldr	r3, [pc, #640]	@ (8016440 <_strtod_l+0xb28>)
 80161be:	4599      	cmp	r9, r3
 80161c0:	d102      	bne.n	80161c8 <_strtod_l+0x8b0>
 80161c2:	3201      	adds	r2, #1
 80161c4:	f43f adc2 	beq.w	8015d4c <_strtod_l+0x434>
 80161c8:	4b9c      	ldr	r3, [pc, #624]	@ (801643c <_strtod_l+0xb24>)
 80161ca:	ea09 0303 	and.w	r3, r9, r3
 80161ce:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80161d2:	f04f 0a00 	mov.w	sl, #0
 80161d6:	9b06      	ldr	r3, [sp, #24]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d1b2      	bne.n	8016142 <_strtod_l+0x82a>
 80161dc:	e5c1      	b.n	8015d62 <_strtod_l+0x44a>
 80161de:	f04f 33ff 	mov.w	r3, #4294967295
 80161e2:	e7e9      	b.n	80161b8 <_strtod_l+0x8a0>
 80161e4:	460b      	mov	r3, r1
 80161e6:	e7e7      	b.n	80161b8 <_strtod_l+0x8a0>
 80161e8:	ea53 030a 	orrs.w	r3, r3, sl
 80161ec:	d09b      	beq.n	8016126 <_strtod_l+0x80e>
 80161ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80161f0:	b1c3      	cbz	r3, 8016224 <_strtod_l+0x90c>
 80161f2:	ea13 0f09 	tst.w	r3, r9
 80161f6:	d0ee      	beq.n	80161d6 <_strtod_l+0x8be>
 80161f8:	9a06      	ldr	r2, [sp, #24]
 80161fa:	4650      	mov	r0, sl
 80161fc:	4659      	mov	r1, fp
 80161fe:	f1b8 0f00 	cmp.w	r8, #0
 8016202:	d013      	beq.n	801622c <_strtod_l+0x914>
 8016204:	f7ff fb6d 	bl	80158e2 <sulp>
 8016208:	ee39 7b00 	vadd.f64	d7, d9, d0
 801620c:	ec5b ab17 	vmov	sl, fp, d7
 8016210:	e7e1      	b.n	80161d6 <_strtod_l+0x8be>
 8016212:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016216:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801621a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801621e:	f04f 3aff 	mov.w	sl, #4294967295
 8016222:	e7d8      	b.n	80161d6 <_strtod_l+0x8be>
 8016224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016226:	ea13 0f0a 	tst.w	r3, sl
 801622a:	e7e4      	b.n	80161f6 <_strtod_l+0x8de>
 801622c:	f7ff fb59 	bl	80158e2 <sulp>
 8016230:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016234:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623c:	ec5b ab10 	vmov	sl, fp, d0
 8016240:	d1c9      	bne.n	80161d6 <_strtod_l+0x8be>
 8016242:	e617      	b.n	8015e74 <_strtod_l+0x55c>
 8016244:	4629      	mov	r1, r5
 8016246:	4620      	mov	r0, r4
 8016248:	f001 fbbe 	bl	80179c8 <__ratio>
 801624c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016250:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016258:	d85d      	bhi.n	8016316 <_strtod_l+0x9fe>
 801625a:	f1b8 0f00 	cmp.w	r8, #0
 801625e:	d164      	bne.n	801632a <_strtod_l+0xa12>
 8016260:	f1ba 0f00 	cmp.w	sl, #0
 8016264:	d14b      	bne.n	80162fe <_strtod_l+0x9e6>
 8016266:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801626a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801626e:	2b00      	cmp	r3, #0
 8016270:	d160      	bne.n	8016334 <_strtod_l+0xa1c>
 8016272:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8016276:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627e:	d401      	bmi.n	8016284 <_strtod_l+0x96c>
 8016280:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016284:	eeb1 ab48 	vneg.f64	d10, d8
 8016288:	486c      	ldr	r0, [pc, #432]	@ (801643c <_strtod_l+0xb24>)
 801628a:	496e      	ldr	r1, [pc, #440]	@ (8016444 <_strtod_l+0xb2c>)
 801628c:	ea09 0700 	and.w	r7, r9, r0
 8016290:	428f      	cmp	r7, r1
 8016292:	ec53 2b1a 	vmov	r2, r3, d10
 8016296:	d17d      	bne.n	8016394 <_strtod_l+0xa7c>
 8016298:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801629c:	ec4b ab1c 	vmov	d12, sl, fp
 80162a0:	eeb0 0b4c 	vmov.f64	d0, d12
 80162a4:	f001 fac8 	bl	8017838 <__ulp>
 80162a8:	4864      	ldr	r0, [pc, #400]	@ (801643c <_strtod_l+0xb24>)
 80162aa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80162ae:	ee1c 3a90 	vmov	r3, s25
 80162b2:	4a65      	ldr	r2, [pc, #404]	@ (8016448 <_strtod_l+0xb30>)
 80162b4:	ea03 0100 	and.w	r1, r3, r0
 80162b8:	4291      	cmp	r1, r2
 80162ba:	ec5b ab1c 	vmov	sl, fp, d12
 80162be:	d93c      	bls.n	801633a <_strtod_l+0xa22>
 80162c0:	ee19 2a90 	vmov	r2, s19
 80162c4:	4b5e      	ldr	r3, [pc, #376]	@ (8016440 <_strtod_l+0xb28>)
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d104      	bne.n	80162d4 <_strtod_l+0x9bc>
 80162ca:	ee19 3a10 	vmov	r3, s18
 80162ce:	3301      	adds	r3, #1
 80162d0:	f43f ad3c 	beq.w	8015d4c <_strtod_l+0x434>
 80162d4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8016440 <_strtod_l+0xb28>
 80162d8:	f04f 3aff 	mov.w	sl, #4294967295
 80162dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80162de:	9805      	ldr	r0, [sp, #20]
 80162e0:	f000 ff7e 	bl	80171e0 <_Bfree>
 80162e4:	9805      	ldr	r0, [sp, #20]
 80162e6:	4631      	mov	r1, r6
 80162e8:	f000 ff7a 	bl	80171e0 <_Bfree>
 80162ec:	9805      	ldr	r0, [sp, #20]
 80162ee:	4629      	mov	r1, r5
 80162f0:	f000 ff76 	bl	80171e0 <_Bfree>
 80162f4:	9805      	ldr	r0, [sp, #20]
 80162f6:	4621      	mov	r1, r4
 80162f8:	f000 ff72 	bl	80171e0 <_Bfree>
 80162fc:	e627      	b.n	8015f4e <_strtod_l+0x636>
 80162fe:	f1ba 0f01 	cmp.w	sl, #1
 8016302:	d103      	bne.n	801630c <_strtod_l+0x9f4>
 8016304:	f1bb 0f00 	cmp.w	fp, #0
 8016308:	f43f adb4 	beq.w	8015e74 <_strtod_l+0x55c>
 801630c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016310:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016314:	e7b8      	b.n	8016288 <_strtod_l+0x970>
 8016316:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801631a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801631e:	f1b8 0f00 	cmp.w	r8, #0
 8016322:	d0af      	beq.n	8016284 <_strtod_l+0x96c>
 8016324:	eeb0 ab48 	vmov.f64	d10, d8
 8016328:	e7ae      	b.n	8016288 <_strtod_l+0x970>
 801632a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801632e:	eeb0 8b4a 	vmov.f64	d8, d10
 8016332:	e7a9      	b.n	8016288 <_strtod_l+0x970>
 8016334:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016338:	e7a6      	b.n	8016288 <_strtod_l+0x970>
 801633a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801633e:	9b06      	ldr	r3, [sp, #24]
 8016340:	46d9      	mov	r9, fp
 8016342:	2b00      	cmp	r3, #0
 8016344:	d1ca      	bne.n	80162dc <_strtod_l+0x9c4>
 8016346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801634a:	0d1b      	lsrs	r3, r3, #20
 801634c:	051b      	lsls	r3, r3, #20
 801634e:	429f      	cmp	r7, r3
 8016350:	d1c4      	bne.n	80162dc <_strtod_l+0x9c4>
 8016352:	ec51 0b18 	vmov	r0, r1, d8
 8016356:	f7ea fa4f 	bl	80007f8 <__aeabi_d2lz>
 801635a:	f7ea f9b7 	bl	80006cc <__aeabi_l2d>
 801635e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016362:	ec41 0b17 	vmov	d7, r0, r1
 8016366:	ea49 090a 	orr.w	r9, r9, sl
 801636a:	ea59 0908 	orrs.w	r9, r9, r8
 801636e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016372:	d03c      	beq.n	80163ee <_strtod_l+0xad6>
 8016374:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016420 <_strtod_l+0xb08>
 8016378:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016380:	f53f acef 	bmi.w	8015d62 <_strtod_l+0x44a>
 8016384:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8016428 <_strtod_l+0xb10>
 8016388:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016390:	dda4      	ble.n	80162dc <_strtod_l+0x9c4>
 8016392:	e4e6      	b.n	8015d62 <_strtod_l+0x44a>
 8016394:	9906      	ldr	r1, [sp, #24]
 8016396:	b1e1      	cbz	r1, 80163d2 <_strtod_l+0xaba>
 8016398:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801639c:	d819      	bhi.n	80163d2 <_strtod_l+0xaba>
 801639e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80163a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163a6:	d811      	bhi.n	80163cc <_strtod_l+0xab4>
 80163a8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80163ac:	ee18 3a10 	vmov	r3, s16
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	bf38      	it	cc
 80163b4:	2301      	movcc	r3, #1
 80163b6:	ee08 3a10 	vmov	s16, r3
 80163ba:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80163be:	f1b8 0f00 	cmp.w	r8, #0
 80163c2:	d111      	bne.n	80163e8 <_strtod_l+0xad0>
 80163c4:	eeb1 7b48 	vneg.f64	d7, d8
 80163c8:	ec53 2b17 	vmov	r2, r3, d7
 80163cc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80163d0:	1bcb      	subs	r3, r1, r7
 80163d2:	eeb0 0b49 	vmov.f64	d0, d9
 80163d6:	ec43 2b1a 	vmov	d10, r2, r3
 80163da:	f001 fa2d 	bl	8017838 <__ulp>
 80163de:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80163e2:	ec5b ab19 	vmov	sl, fp, d9
 80163e6:	e7aa      	b.n	801633e <_strtod_l+0xa26>
 80163e8:	eeb0 7b48 	vmov.f64	d7, d8
 80163ec:	e7ec      	b.n	80163c8 <_strtod_l+0xab0>
 80163ee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8016430 <_strtod_l+0xb18>
 80163f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80163f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fa:	f57f af6f 	bpl.w	80162dc <_strtod_l+0x9c4>
 80163fe:	e4b0      	b.n	8015d62 <_strtod_l+0x44a>
 8016400:	2300      	movs	r3, #0
 8016402:	9308      	str	r3, [sp, #32]
 8016404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016406:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016408:	6013      	str	r3, [r2, #0]
 801640a:	f7ff bac4 	b.w	8015996 <_strtod_l+0x7e>
 801640e:	2a65      	cmp	r2, #101	@ 0x65
 8016410:	f43f abbf 	beq.w	8015b92 <_strtod_l+0x27a>
 8016414:	2a45      	cmp	r2, #69	@ 0x45
 8016416:	f43f abbc 	beq.w	8015b92 <_strtod_l+0x27a>
 801641a:	2101      	movs	r1, #1
 801641c:	f7ff bbf4 	b.w	8015c08 <_strtod_l+0x2f0>
 8016420:	94a03595 	.word	0x94a03595
 8016424:	3fdfffff 	.word	0x3fdfffff
 8016428:	35afe535 	.word	0x35afe535
 801642c:	3fe00000 	.word	0x3fe00000
 8016430:	94a03595 	.word	0x94a03595
 8016434:	3fcfffff 	.word	0x3fcfffff
 8016438:	000fffff 	.word	0x000fffff
 801643c:	7ff00000 	.word	0x7ff00000
 8016440:	7fefffff 	.word	0x7fefffff
 8016444:	7fe00000 	.word	0x7fe00000
 8016448:	7c9fffff 	.word	0x7c9fffff

0801644c <strtod>:
 801644c:	460a      	mov	r2, r1
 801644e:	4601      	mov	r1, r0
 8016450:	4802      	ldr	r0, [pc, #8]	@ (801645c <strtod+0x10>)
 8016452:	4b03      	ldr	r3, [pc, #12]	@ (8016460 <strtod+0x14>)
 8016454:	6800      	ldr	r0, [r0, #0]
 8016456:	f7ff ba5f 	b.w	8015918 <_strtod_l>
 801645a:	bf00      	nop
 801645c:	24000260 	.word	0x24000260
 8016460:	240000f4 	.word	0x240000f4

08016464 <_strtol_l.isra.0>:
 8016464:	2b24      	cmp	r3, #36	@ 0x24
 8016466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801646a:	4686      	mov	lr, r0
 801646c:	4690      	mov	r8, r2
 801646e:	d801      	bhi.n	8016474 <_strtol_l.isra.0+0x10>
 8016470:	2b01      	cmp	r3, #1
 8016472:	d106      	bne.n	8016482 <_strtol_l.isra.0+0x1e>
 8016474:	f000 f9ec 	bl	8016850 <__errno>
 8016478:	2316      	movs	r3, #22
 801647a:	6003      	str	r3, [r0, #0]
 801647c:	2000      	movs	r0, #0
 801647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016482:	4834      	ldr	r0, [pc, #208]	@ (8016554 <_strtol_l.isra.0+0xf0>)
 8016484:	460d      	mov	r5, r1
 8016486:	462a      	mov	r2, r5
 8016488:	f815 4b01 	ldrb.w	r4, [r5], #1
 801648c:	5d06      	ldrb	r6, [r0, r4]
 801648e:	f016 0608 	ands.w	r6, r6, #8
 8016492:	d1f8      	bne.n	8016486 <_strtol_l.isra.0+0x22>
 8016494:	2c2d      	cmp	r4, #45	@ 0x2d
 8016496:	d110      	bne.n	80164ba <_strtol_l.isra.0+0x56>
 8016498:	782c      	ldrb	r4, [r5, #0]
 801649a:	2601      	movs	r6, #1
 801649c:	1c95      	adds	r5, r2, #2
 801649e:	f033 0210 	bics.w	r2, r3, #16
 80164a2:	d115      	bne.n	80164d0 <_strtol_l.isra.0+0x6c>
 80164a4:	2c30      	cmp	r4, #48	@ 0x30
 80164a6:	d10d      	bne.n	80164c4 <_strtol_l.isra.0+0x60>
 80164a8:	782a      	ldrb	r2, [r5, #0]
 80164aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80164ae:	2a58      	cmp	r2, #88	@ 0x58
 80164b0:	d108      	bne.n	80164c4 <_strtol_l.isra.0+0x60>
 80164b2:	786c      	ldrb	r4, [r5, #1]
 80164b4:	3502      	adds	r5, #2
 80164b6:	2310      	movs	r3, #16
 80164b8:	e00a      	b.n	80164d0 <_strtol_l.isra.0+0x6c>
 80164ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80164bc:	bf04      	itt	eq
 80164be:	782c      	ldrbeq	r4, [r5, #0]
 80164c0:	1c95      	addeq	r5, r2, #2
 80164c2:	e7ec      	b.n	801649e <_strtol_l.isra.0+0x3a>
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d1f6      	bne.n	80164b6 <_strtol_l.isra.0+0x52>
 80164c8:	2c30      	cmp	r4, #48	@ 0x30
 80164ca:	bf14      	ite	ne
 80164cc:	230a      	movne	r3, #10
 80164ce:	2308      	moveq	r3, #8
 80164d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80164d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80164d8:	2200      	movs	r2, #0
 80164da:	fbbc f9f3 	udiv	r9, ip, r3
 80164de:	4610      	mov	r0, r2
 80164e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80164e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80164e8:	2f09      	cmp	r7, #9
 80164ea:	d80f      	bhi.n	801650c <_strtol_l.isra.0+0xa8>
 80164ec:	463c      	mov	r4, r7
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	dd1b      	ble.n	801652a <_strtol_l.isra.0+0xc6>
 80164f2:	1c57      	adds	r7, r2, #1
 80164f4:	d007      	beq.n	8016506 <_strtol_l.isra.0+0xa2>
 80164f6:	4581      	cmp	r9, r0
 80164f8:	d314      	bcc.n	8016524 <_strtol_l.isra.0+0xc0>
 80164fa:	d101      	bne.n	8016500 <_strtol_l.isra.0+0x9c>
 80164fc:	45a2      	cmp	sl, r4
 80164fe:	db11      	blt.n	8016524 <_strtol_l.isra.0+0xc0>
 8016500:	fb00 4003 	mla	r0, r0, r3, r4
 8016504:	2201      	movs	r2, #1
 8016506:	f815 4b01 	ldrb.w	r4, [r5], #1
 801650a:	e7eb      	b.n	80164e4 <_strtol_l.isra.0+0x80>
 801650c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016510:	2f19      	cmp	r7, #25
 8016512:	d801      	bhi.n	8016518 <_strtol_l.isra.0+0xb4>
 8016514:	3c37      	subs	r4, #55	@ 0x37
 8016516:	e7ea      	b.n	80164ee <_strtol_l.isra.0+0x8a>
 8016518:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801651c:	2f19      	cmp	r7, #25
 801651e:	d804      	bhi.n	801652a <_strtol_l.isra.0+0xc6>
 8016520:	3c57      	subs	r4, #87	@ 0x57
 8016522:	e7e4      	b.n	80164ee <_strtol_l.isra.0+0x8a>
 8016524:	f04f 32ff 	mov.w	r2, #4294967295
 8016528:	e7ed      	b.n	8016506 <_strtol_l.isra.0+0xa2>
 801652a:	1c53      	adds	r3, r2, #1
 801652c:	d108      	bne.n	8016540 <_strtol_l.isra.0+0xdc>
 801652e:	2322      	movs	r3, #34	@ 0x22
 8016530:	f8ce 3000 	str.w	r3, [lr]
 8016534:	4660      	mov	r0, ip
 8016536:	f1b8 0f00 	cmp.w	r8, #0
 801653a:	d0a0      	beq.n	801647e <_strtol_l.isra.0+0x1a>
 801653c:	1e69      	subs	r1, r5, #1
 801653e:	e006      	b.n	801654e <_strtol_l.isra.0+0xea>
 8016540:	b106      	cbz	r6, 8016544 <_strtol_l.isra.0+0xe0>
 8016542:	4240      	negs	r0, r0
 8016544:	f1b8 0f00 	cmp.w	r8, #0
 8016548:	d099      	beq.n	801647e <_strtol_l.isra.0+0x1a>
 801654a:	2a00      	cmp	r2, #0
 801654c:	d1f6      	bne.n	801653c <_strtol_l.isra.0+0xd8>
 801654e:	f8c8 1000 	str.w	r1, [r8]
 8016552:	e794      	b.n	801647e <_strtol_l.isra.0+0x1a>
 8016554:	08018ed1 	.word	0x08018ed1

08016558 <strtol>:
 8016558:	4613      	mov	r3, r2
 801655a:	460a      	mov	r2, r1
 801655c:	4601      	mov	r1, r0
 801655e:	4802      	ldr	r0, [pc, #8]	@ (8016568 <strtol+0x10>)
 8016560:	6800      	ldr	r0, [r0, #0]
 8016562:	f7ff bf7f 	b.w	8016464 <_strtol_l.isra.0>
 8016566:	bf00      	nop
 8016568:	24000260 	.word	0x24000260

0801656c <std>:
 801656c:	2300      	movs	r3, #0
 801656e:	b510      	push	{r4, lr}
 8016570:	4604      	mov	r4, r0
 8016572:	e9c0 3300 	strd	r3, r3, [r0]
 8016576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801657a:	6083      	str	r3, [r0, #8]
 801657c:	8181      	strh	r1, [r0, #12]
 801657e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016580:	81c2      	strh	r2, [r0, #14]
 8016582:	6183      	str	r3, [r0, #24]
 8016584:	4619      	mov	r1, r3
 8016586:	2208      	movs	r2, #8
 8016588:	305c      	adds	r0, #92	@ 0x5c
 801658a:	f000 f8f4 	bl	8016776 <memset>
 801658e:	4b0d      	ldr	r3, [pc, #52]	@ (80165c4 <std+0x58>)
 8016590:	6263      	str	r3, [r4, #36]	@ 0x24
 8016592:	4b0d      	ldr	r3, [pc, #52]	@ (80165c8 <std+0x5c>)
 8016594:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016596:	4b0d      	ldr	r3, [pc, #52]	@ (80165cc <std+0x60>)
 8016598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801659a:	4b0d      	ldr	r3, [pc, #52]	@ (80165d0 <std+0x64>)
 801659c:	6323      	str	r3, [r4, #48]	@ 0x30
 801659e:	4b0d      	ldr	r3, [pc, #52]	@ (80165d4 <std+0x68>)
 80165a0:	6224      	str	r4, [r4, #32]
 80165a2:	429c      	cmp	r4, r3
 80165a4:	d006      	beq.n	80165b4 <std+0x48>
 80165a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80165aa:	4294      	cmp	r4, r2
 80165ac:	d002      	beq.n	80165b4 <std+0x48>
 80165ae:	33d0      	adds	r3, #208	@ 0xd0
 80165b0:	429c      	cmp	r4, r3
 80165b2:	d105      	bne.n	80165c0 <std+0x54>
 80165b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80165b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165bc:	f000 b972 	b.w	80168a4 <__retarget_lock_init_recursive>
 80165c0:	bd10      	pop	{r4, pc}
 80165c2:	bf00      	nop
 80165c4:	080166f1 	.word	0x080166f1
 80165c8:	08016713 	.word	0x08016713
 80165cc:	0801674b 	.word	0x0801674b
 80165d0:	0801676f 	.word	0x0801676f
 80165d4:	24005660 	.word	0x24005660

080165d8 <stdio_exit_handler>:
 80165d8:	4a02      	ldr	r2, [pc, #8]	@ (80165e4 <stdio_exit_handler+0xc>)
 80165da:	4903      	ldr	r1, [pc, #12]	@ (80165e8 <stdio_exit_handler+0x10>)
 80165dc:	4803      	ldr	r0, [pc, #12]	@ (80165ec <stdio_exit_handler+0x14>)
 80165de:	f000 b869 	b.w	80166b4 <_fwalk_sglue>
 80165e2:	bf00      	nop
 80165e4:	240000e8 	.word	0x240000e8
 80165e8:	08017bd1 	.word	0x08017bd1
 80165ec:	24000264 	.word	0x24000264

080165f0 <cleanup_stdio>:
 80165f0:	6841      	ldr	r1, [r0, #4]
 80165f2:	4b0c      	ldr	r3, [pc, #48]	@ (8016624 <cleanup_stdio+0x34>)
 80165f4:	4299      	cmp	r1, r3
 80165f6:	b510      	push	{r4, lr}
 80165f8:	4604      	mov	r4, r0
 80165fa:	d001      	beq.n	8016600 <cleanup_stdio+0x10>
 80165fc:	f001 fae8 	bl	8017bd0 <_fflush_r>
 8016600:	68a1      	ldr	r1, [r4, #8]
 8016602:	4b09      	ldr	r3, [pc, #36]	@ (8016628 <cleanup_stdio+0x38>)
 8016604:	4299      	cmp	r1, r3
 8016606:	d002      	beq.n	801660e <cleanup_stdio+0x1e>
 8016608:	4620      	mov	r0, r4
 801660a:	f001 fae1 	bl	8017bd0 <_fflush_r>
 801660e:	68e1      	ldr	r1, [r4, #12]
 8016610:	4b06      	ldr	r3, [pc, #24]	@ (801662c <cleanup_stdio+0x3c>)
 8016612:	4299      	cmp	r1, r3
 8016614:	d004      	beq.n	8016620 <cleanup_stdio+0x30>
 8016616:	4620      	mov	r0, r4
 8016618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801661c:	f001 bad8 	b.w	8017bd0 <_fflush_r>
 8016620:	bd10      	pop	{r4, pc}
 8016622:	bf00      	nop
 8016624:	24005660 	.word	0x24005660
 8016628:	240056c8 	.word	0x240056c8
 801662c:	24005730 	.word	0x24005730

08016630 <global_stdio_init.part.0>:
 8016630:	b510      	push	{r4, lr}
 8016632:	4b0b      	ldr	r3, [pc, #44]	@ (8016660 <global_stdio_init.part.0+0x30>)
 8016634:	4c0b      	ldr	r4, [pc, #44]	@ (8016664 <global_stdio_init.part.0+0x34>)
 8016636:	4a0c      	ldr	r2, [pc, #48]	@ (8016668 <global_stdio_init.part.0+0x38>)
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	4620      	mov	r0, r4
 801663c:	2200      	movs	r2, #0
 801663e:	2104      	movs	r1, #4
 8016640:	f7ff ff94 	bl	801656c <std>
 8016644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016648:	2201      	movs	r2, #1
 801664a:	2109      	movs	r1, #9
 801664c:	f7ff ff8e 	bl	801656c <std>
 8016650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016654:	2202      	movs	r2, #2
 8016656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801665a:	2112      	movs	r1, #18
 801665c:	f7ff bf86 	b.w	801656c <std>
 8016660:	24005798 	.word	0x24005798
 8016664:	24005660 	.word	0x24005660
 8016668:	080165d9 	.word	0x080165d9

0801666c <__sfp_lock_acquire>:
 801666c:	4801      	ldr	r0, [pc, #4]	@ (8016674 <__sfp_lock_acquire+0x8>)
 801666e:	f000 b91a 	b.w	80168a6 <__retarget_lock_acquire_recursive>
 8016672:	bf00      	nop
 8016674:	240057a1 	.word	0x240057a1

08016678 <__sfp_lock_release>:
 8016678:	4801      	ldr	r0, [pc, #4]	@ (8016680 <__sfp_lock_release+0x8>)
 801667a:	f000 b915 	b.w	80168a8 <__retarget_lock_release_recursive>
 801667e:	bf00      	nop
 8016680:	240057a1 	.word	0x240057a1

08016684 <__sinit>:
 8016684:	b510      	push	{r4, lr}
 8016686:	4604      	mov	r4, r0
 8016688:	f7ff fff0 	bl	801666c <__sfp_lock_acquire>
 801668c:	6a23      	ldr	r3, [r4, #32]
 801668e:	b11b      	cbz	r3, 8016698 <__sinit+0x14>
 8016690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016694:	f7ff bff0 	b.w	8016678 <__sfp_lock_release>
 8016698:	4b04      	ldr	r3, [pc, #16]	@ (80166ac <__sinit+0x28>)
 801669a:	6223      	str	r3, [r4, #32]
 801669c:	4b04      	ldr	r3, [pc, #16]	@ (80166b0 <__sinit+0x2c>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d1f5      	bne.n	8016690 <__sinit+0xc>
 80166a4:	f7ff ffc4 	bl	8016630 <global_stdio_init.part.0>
 80166a8:	e7f2      	b.n	8016690 <__sinit+0xc>
 80166aa:	bf00      	nop
 80166ac:	080165f1 	.word	0x080165f1
 80166b0:	24005798 	.word	0x24005798

080166b4 <_fwalk_sglue>:
 80166b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166b8:	4607      	mov	r7, r0
 80166ba:	4688      	mov	r8, r1
 80166bc:	4614      	mov	r4, r2
 80166be:	2600      	movs	r6, #0
 80166c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80166c4:	f1b9 0901 	subs.w	r9, r9, #1
 80166c8:	d505      	bpl.n	80166d6 <_fwalk_sglue+0x22>
 80166ca:	6824      	ldr	r4, [r4, #0]
 80166cc:	2c00      	cmp	r4, #0
 80166ce:	d1f7      	bne.n	80166c0 <_fwalk_sglue+0xc>
 80166d0:	4630      	mov	r0, r6
 80166d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166d6:	89ab      	ldrh	r3, [r5, #12]
 80166d8:	2b01      	cmp	r3, #1
 80166da:	d907      	bls.n	80166ec <_fwalk_sglue+0x38>
 80166dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80166e0:	3301      	adds	r3, #1
 80166e2:	d003      	beq.n	80166ec <_fwalk_sglue+0x38>
 80166e4:	4629      	mov	r1, r5
 80166e6:	4638      	mov	r0, r7
 80166e8:	47c0      	blx	r8
 80166ea:	4306      	orrs	r6, r0
 80166ec:	3568      	adds	r5, #104	@ 0x68
 80166ee:	e7e9      	b.n	80166c4 <_fwalk_sglue+0x10>

080166f0 <__sread>:
 80166f0:	b510      	push	{r4, lr}
 80166f2:	460c      	mov	r4, r1
 80166f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166f8:	f000 f886 	bl	8016808 <_read_r>
 80166fc:	2800      	cmp	r0, #0
 80166fe:	bfab      	itete	ge
 8016700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016702:	89a3      	ldrhlt	r3, [r4, #12]
 8016704:	181b      	addge	r3, r3, r0
 8016706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801670a:	bfac      	ite	ge
 801670c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801670e:	81a3      	strhlt	r3, [r4, #12]
 8016710:	bd10      	pop	{r4, pc}

08016712 <__swrite>:
 8016712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016716:	461f      	mov	r7, r3
 8016718:	898b      	ldrh	r3, [r1, #12]
 801671a:	05db      	lsls	r3, r3, #23
 801671c:	4605      	mov	r5, r0
 801671e:	460c      	mov	r4, r1
 8016720:	4616      	mov	r6, r2
 8016722:	d505      	bpl.n	8016730 <__swrite+0x1e>
 8016724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016728:	2302      	movs	r3, #2
 801672a:	2200      	movs	r2, #0
 801672c:	f000 f85a 	bl	80167e4 <_lseek_r>
 8016730:	89a3      	ldrh	r3, [r4, #12]
 8016732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801673a:	81a3      	strh	r3, [r4, #12]
 801673c:	4632      	mov	r2, r6
 801673e:	463b      	mov	r3, r7
 8016740:	4628      	mov	r0, r5
 8016742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016746:	f000 b871 	b.w	801682c <_write_r>

0801674a <__sseek>:
 801674a:	b510      	push	{r4, lr}
 801674c:	460c      	mov	r4, r1
 801674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016752:	f000 f847 	bl	80167e4 <_lseek_r>
 8016756:	1c43      	adds	r3, r0, #1
 8016758:	89a3      	ldrh	r3, [r4, #12]
 801675a:	bf15      	itete	ne
 801675c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801675e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016766:	81a3      	strheq	r3, [r4, #12]
 8016768:	bf18      	it	ne
 801676a:	81a3      	strhne	r3, [r4, #12]
 801676c:	bd10      	pop	{r4, pc}

0801676e <__sclose>:
 801676e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016772:	f000 b827 	b.w	80167c4 <_close_r>

08016776 <memset>:
 8016776:	4402      	add	r2, r0
 8016778:	4603      	mov	r3, r0
 801677a:	4293      	cmp	r3, r2
 801677c:	d100      	bne.n	8016780 <memset+0xa>
 801677e:	4770      	bx	lr
 8016780:	f803 1b01 	strb.w	r1, [r3], #1
 8016784:	e7f9      	b.n	801677a <memset+0x4>

08016786 <strchr>:
 8016786:	b2c9      	uxtb	r1, r1
 8016788:	4603      	mov	r3, r0
 801678a:	4618      	mov	r0, r3
 801678c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016790:	b112      	cbz	r2, 8016798 <strchr+0x12>
 8016792:	428a      	cmp	r2, r1
 8016794:	d1f9      	bne.n	801678a <strchr+0x4>
 8016796:	4770      	bx	lr
 8016798:	2900      	cmp	r1, #0
 801679a:	bf18      	it	ne
 801679c:	2000      	movne	r0, #0
 801679e:	4770      	bx	lr

080167a0 <strncmp>:
 80167a0:	b510      	push	{r4, lr}
 80167a2:	b16a      	cbz	r2, 80167c0 <strncmp+0x20>
 80167a4:	3901      	subs	r1, #1
 80167a6:	1884      	adds	r4, r0, r2
 80167a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d103      	bne.n	80167bc <strncmp+0x1c>
 80167b4:	42a0      	cmp	r0, r4
 80167b6:	d001      	beq.n	80167bc <strncmp+0x1c>
 80167b8:	2a00      	cmp	r2, #0
 80167ba:	d1f5      	bne.n	80167a8 <strncmp+0x8>
 80167bc:	1ad0      	subs	r0, r2, r3
 80167be:	bd10      	pop	{r4, pc}
 80167c0:	4610      	mov	r0, r2
 80167c2:	e7fc      	b.n	80167be <strncmp+0x1e>

080167c4 <_close_r>:
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	4d06      	ldr	r5, [pc, #24]	@ (80167e0 <_close_r+0x1c>)
 80167c8:	2300      	movs	r3, #0
 80167ca:	4604      	mov	r4, r0
 80167cc:	4608      	mov	r0, r1
 80167ce:	602b      	str	r3, [r5, #0]
 80167d0:	f7ed ff52 	bl	8004678 <_close>
 80167d4:	1c43      	adds	r3, r0, #1
 80167d6:	d102      	bne.n	80167de <_close_r+0x1a>
 80167d8:	682b      	ldr	r3, [r5, #0]
 80167da:	b103      	cbz	r3, 80167de <_close_r+0x1a>
 80167dc:	6023      	str	r3, [r4, #0]
 80167de:	bd38      	pop	{r3, r4, r5, pc}
 80167e0:	2400579c 	.word	0x2400579c

080167e4 <_lseek_r>:
 80167e4:	b538      	push	{r3, r4, r5, lr}
 80167e6:	4d07      	ldr	r5, [pc, #28]	@ (8016804 <_lseek_r+0x20>)
 80167e8:	4604      	mov	r4, r0
 80167ea:	4608      	mov	r0, r1
 80167ec:	4611      	mov	r1, r2
 80167ee:	2200      	movs	r2, #0
 80167f0:	602a      	str	r2, [r5, #0]
 80167f2:	461a      	mov	r2, r3
 80167f4:	f7ed ff67 	bl	80046c6 <_lseek>
 80167f8:	1c43      	adds	r3, r0, #1
 80167fa:	d102      	bne.n	8016802 <_lseek_r+0x1e>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	b103      	cbz	r3, 8016802 <_lseek_r+0x1e>
 8016800:	6023      	str	r3, [r4, #0]
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	2400579c 	.word	0x2400579c

08016808 <_read_r>:
 8016808:	b538      	push	{r3, r4, r5, lr}
 801680a:	4d07      	ldr	r5, [pc, #28]	@ (8016828 <_read_r+0x20>)
 801680c:	4604      	mov	r4, r0
 801680e:	4608      	mov	r0, r1
 8016810:	4611      	mov	r1, r2
 8016812:	2200      	movs	r2, #0
 8016814:	602a      	str	r2, [r5, #0]
 8016816:	461a      	mov	r2, r3
 8016818:	f7ed fef5 	bl	8004606 <_read>
 801681c:	1c43      	adds	r3, r0, #1
 801681e:	d102      	bne.n	8016826 <_read_r+0x1e>
 8016820:	682b      	ldr	r3, [r5, #0]
 8016822:	b103      	cbz	r3, 8016826 <_read_r+0x1e>
 8016824:	6023      	str	r3, [r4, #0]
 8016826:	bd38      	pop	{r3, r4, r5, pc}
 8016828:	2400579c 	.word	0x2400579c

0801682c <_write_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4d07      	ldr	r5, [pc, #28]	@ (801684c <_write_r+0x20>)
 8016830:	4604      	mov	r4, r0
 8016832:	4608      	mov	r0, r1
 8016834:	4611      	mov	r1, r2
 8016836:	2200      	movs	r2, #0
 8016838:	602a      	str	r2, [r5, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	f7ed ff00 	bl	8004640 <_write>
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	d102      	bne.n	801684a <_write_r+0x1e>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	b103      	cbz	r3, 801684a <_write_r+0x1e>
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	2400579c 	.word	0x2400579c

08016850 <__errno>:
 8016850:	4b01      	ldr	r3, [pc, #4]	@ (8016858 <__errno+0x8>)
 8016852:	6818      	ldr	r0, [r3, #0]
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	24000260 	.word	0x24000260

0801685c <__libc_init_array>:
 801685c:	b570      	push	{r4, r5, r6, lr}
 801685e:	4d0d      	ldr	r5, [pc, #52]	@ (8016894 <__libc_init_array+0x38>)
 8016860:	4c0d      	ldr	r4, [pc, #52]	@ (8016898 <__libc_init_array+0x3c>)
 8016862:	1b64      	subs	r4, r4, r5
 8016864:	10a4      	asrs	r4, r4, #2
 8016866:	2600      	movs	r6, #0
 8016868:	42a6      	cmp	r6, r4
 801686a:	d109      	bne.n	8016880 <__libc_init_array+0x24>
 801686c:	4d0b      	ldr	r5, [pc, #44]	@ (801689c <__libc_init_array+0x40>)
 801686e:	4c0c      	ldr	r4, [pc, #48]	@ (80168a0 <__libc_init_array+0x44>)
 8016870:	f001 ff92 	bl	8018798 <_init>
 8016874:	1b64      	subs	r4, r4, r5
 8016876:	10a4      	asrs	r4, r4, #2
 8016878:	2600      	movs	r6, #0
 801687a:	42a6      	cmp	r6, r4
 801687c:	d105      	bne.n	801688a <__libc_init_array+0x2e>
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	f855 3b04 	ldr.w	r3, [r5], #4
 8016884:	4798      	blx	r3
 8016886:	3601      	adds	r6, #1
 8016888:	e7ee      	b.n	8016868 <__libc_init_array+0xc>
 801688a:	f855 3b04 	ldr.w	r3, [r5], #4
 801688e:	4798      	blx	r3
 8016890:	3601      	adds	r6, #1
 8016892:	e7f2      	b.n	801687a <__libc_init_array+0x1e>
 8016894:	08019968 	.word	0x08019968
 8016898:	08019968 	.word	0x08019968
 801689c:	08019968 	.word	0x08019968
 80168a0:	0801996c 	.word	0x0801996c

080168a4 <__retarget_lock_init_recursive>:
 80168a4:	4770      	bx	lr

080168a6 <__retarget_lock_acquire_recursive>:
 80168a6:	4770      	bx	lr

080168a8 <__retarget_lock_release_recursive>:
 80168a8:	4770      	bx	lr

080168aa <memcpy>:
 80168aa:	440a      	add	r2, r1
 80168ac:	4291      	cmp	r1, r2
 80168ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80168b2:	d100      	bne.n	80168b6 <memcpy+0xc>
 80168b4:	4770      	bx	lr
 80168b6:	b510      	push	{r4, lr}
 80168b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168c0:	4291      	cmp	r1, r2
 80168c2:	d1f9      	bne.n	80168b8 <memcpy+0xe>
 80168c4:	bd10      	pop	{r4, pc}
	...

080168c8 <nan>:
 80168c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80168d0 <nan+0x8>
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	00000000 	.word	0x00000000
 80168d4:	7ff80000 	.word	0x7ff80000

080168d8 <_free_r>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	4605      	mov	r5, r0
 80168dc:	2900      	cmp	r1, #0
 80168de:	d041      	beq.n	8016964 <_free_r+0x8c>
 80168e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168e4:	1f0c      	subs	r4, r1, #4
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfb8      	it	lt
 80168ea:	18e4      	addlt	r4, r4, r3
 80168ec:	f000 fc2c 	bl	8017148 <__malloc_lock>
 80168f0:	4a1d      	ldr	r2, [pc, #116]	@ (8016968 <_free_r+0x90>)
 80168f2:	6813      	ldr	r3, [r2, #0]
 80168f4:	b933      	cbnz	r3, 8016904 <_free_r+0x2c>
 80168f6:	6063      	str	r3, [r4, #4]
 80168f8:	6014      	str	r4, [r2, #0]
 80168fa:	4628      	mov	r0, r5
 80168fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016900:	f000 bc28 	b.w	8017154 <__malloc_unlock>
 8016904:	42a3      	cmp	r3, r4
 8016906:	d908      	bls.n	801691a <_free_r+0x42>
 8016908:	6820      	ldr	r0, [r4, #0]
 801690a:	1821      	adds	r1, r4, r0
 801690c:	428b      	cmp	r3, r1
 801690e:	bf01      	itttt	eq
 8016910:	6819      	ldreq	r1, [r3, #0]
 8016912:	685b      	ldreq	r3, [r3, #4]
 8016914:	1809      	addeq	r1, r1, r0
 8016916:	6021      	streq	r1, [r4, #0]
 8016918:	e7ed      	b.n	80168f6 <_free_r+0x1e>
 801691a:	461a      	mov	r2, r3
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	b10b      	cbz	r3, 8016924 <_free_r+0x4c>
 8016920:	42a3      	cmp	r3, r4
 8016922:	d9fa      	bls.n	801691a <_free_r+0x42>
 8016924:	6811      	ldr	r1, [r2, #0]
 8016926:	1850      	adds	r0, r2, r1
 8016928:	42a0      	cmp	r0, r4
 801692a:	d10b      	bne.n	8016944 <_free_r+0x6c>
 801692c:	6820      	ldr	r0, [r4, #0]
 801692e:	4401      	add	r1, r0
 8016930:	1850      	adds	r0, r2, r1
 8016932:	4283      	cmp	r3, r0
 8016934:	6011      	str	r1, [r2, #0]
 8016936:	d1e0      	bne.n	80168fa <_free_r+0x22>
 8016938:	6818      	ldr	r0, [r3, #0]
 801693a:	685b      	ldr	r3, [r3, #4]
 801693c:	6053      	str	r3, [r2, #4]
 801693e:	4408      	add	r0, r1
 8016940:	6010      	str	r0, [r2, #0]
 8016942:	e7da      	b.n	80168fa <_free_r+0x22>
 8016944:	d902      	bls.n	801694c <_free_r+0x74>
 8016946:	230c      	movs	r3, #12
 8016948:	602b      	str	r3, [r5, #0]
 801694a:	e7d6      	b.n	80168fa <_free_r+0x22>
 801694c:	6820      	ldr	r0, [r4, #0]
 801694e:	1821      	adds	r1, r4, r0
 8016950:	428b      	cmp	r3, r1
 8016952:	bf04      	itt	eq
 8016954:	6819      	ldreq	r1, [r3, #0]
 8016956:	685b      	ldreq	r3, [r3, #4]
 8016958:	6063      	str	r3, [r4, #4]
 801695a:	bf04      	itt	eq
 801695c:	1809      	addeq	r1, r1, r0
 801695e:	6021      	streq	r1, [r4, #0]
 8016960:	6054      	str	r4, [r2, #4]
 8016962:	e7ca      	b.n	80168fa <_free_r+0x22>
 8016964:	bd38      	pop	{r3, r4, r5, pc}
 8016966:	bf00      	nop
 8016968:	240057a8 	.word	0x240057a8

0801696c <rshift>:
 801696c:	6903      	ldr	r3, [r0, #16]
 801696e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016976:	ea4f 1261 	mov.w	r2, r1, asr #5
 801697a:	f100 0414 	add.w	r4, r0, #20
 801697e:	dd45      	ble.n	8016a0c <rshift+0xa0>
 8016980:	f011 011f 	ands.w	r1, r1, #31
 8016984:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016988:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801698c:	d10c      	bne.n	80169a8 <rshift+0x3c>
 801698e:	f100 0710 	add.w	r7, r0, #16
 8016992:	4629      	mov	r1, r5
 8016994:	42b1      	cmp	r1, r6
 8016996:	d334      	bcc.n	8016a02 <rshift+0x96>
 8016998:	1a9b      	subs	r3, r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	1eea      	subs	r2, r5, #3
 801699e:	4296      	cmp	r6, r2
 80169a0:	bf38      	it	cc
 80169a2:	2300      	movcc	r3, #0
 80169a4:	4423      	add	r3, r4
 80169a6:	e015      	b.n	80169d4 <rshift+0x68>
 80169a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80169ac:	f1c1 0820 	rsb	r8, r1, #32
 80169b0:	40cf      	lsrs	r7, r1
 80169b2:	f105 0e04 	add.w	lr, r5, #4
 80169b6:	46a1      	mov	r9, r4
 80169b8:	4576      	cmp	r6, lr
 80169ba:	46f4      	mov	ip, lr
 80169bc:	d815      	bhi.n	80169ea <rshift+0x7e>
 80169be:	1a9a      	subs	r2, r3, r2
 80169c0:	0092      	lsls	r2, r2, #2
 80169c2:	3a04      	subs	r2, #4
 80169c4:	3501      	adds	r5, #1
 80169c6:	42ae      	cmp	r6, r5
 80169c8:	bf38      	it	cc
 80169ca:	2200      	movcc	r2, #0
 80169cc:	18a3      	adds	r3, r4, r2
 80169ce:	50a7      	str	r7, [r4, r2]
 80169d0:	b107      	cbz	r7, 80169d4 <rshift+0x68>
 80169d2:	3304      	adds	r3, #4
 80169d4:	1b1a      	subs	r2, r3, r4
 80169d6:	42a3      	cmp	r3, r4
 80169d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80169dc:	bf08      	it	eq
 80169de:	2300      	moveq	r3, #0
 80169e0:	6102      	str	r2, [r0, #16]
 80169e2:	bf08      	it	eq
 80169e4:	6143      	streq	r3, [r0, #20]
 80169e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169ea:	f8dc c000 	ldr.w	ip, [ip]
 80169ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80169f2:	ea4c 0707 	orr.w	r7, ip, r7
 80169f6:	f849 7b04 	str.w	r7, [r9], #4
 80169fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80169fe:	40cf      	lsrs	r7, r1
 8016a00:	e7da      	b.n	80169b8 <rshift+0x4c>
 8016a02:	f851 cb04 	ldr.w	ip, [r1], #4
 8016a06:	f847 cf04 	str.w	ip, [r7, #4]!
 8016a0a:	e7c3      	b.n	8016994 <rshift+0x28>
 8016a0c:	4623      	mov	r3, r4
 8016a0e:	e7e1      	b.n	80169d4 <rshift+0x68>

08016a10 <__hexdig_fun>:
 8016a10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016a14:	2b09      	cmp	r3, #9
 8016a16:	d802      	bhi.n	8016a1e <__hexdig_fun+0xe>
 8016a18:	3820      	subs	r0, #32
 8016a1a:	b2c0      	uxtb	r0, r0
 8016a1c:	4770      	bx	lr
 8016a1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016a22:	2b05      	cmp	r3, #5
 8016a24:	d801      	bhi.n	8016a2a <__hexdig_fun+0x1a>
 8016a26:	3847      	subs	r0, #71	@ 0x47
 8016a28:	e7f7      	b.n	8016a1a <__hexdig_fun+0xa>
 8016a2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016a2e:	2b05      	cmp	r3, #5
 8016a30:	d801      	bhi.n	8016a36 <__hexdig_fun+0x26>
 8016a32:	3827      	subs	r0, #39	@ 0x27
 8016a34:	e7f1      	b.n	8016a1a <__hexdig_fun+0xa>
 8016a36:	2000      	movs	r0, #0
 8016a38:	4770      	bx	lr
	...

08016a3c <__gethex>:
 8016a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a40:	b085      	sub	sp, #20
 8016a42:	468a      	mov	sl, r1
 8016a44:	9302      	str	r3, [sp, #8]
 8016a46:	680b      	ldr	r3, [r1, #0]
 8016a48:	9001      	str	r0, [sp, #4]
 8016a4a:	4690      	mov	r8, r2
 8016a4c:	1c9c      	adds	r4, r3, #2
 8016a4e:	46a1      	mov	r9, r4
 8016a50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016a54:	2830      	cmp	r0, #48	@ 0x30
 8016a56:	d0fa      	beq.n	8016a4e <__gethex+0x12>
 8016a58:	eba9 0303 	sub.w	r3, r9, r3
 8016a5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016a60:	f7ff ffd6 	bl	8016a10 <__hexdig_fun>
 8016a64:	4605      	mov	r5, r0
 8016a66:	2800      	cmp	r0, #0
 8016a68:	d168      	bne.n	8016b3c <__gethex+0x100>
 8016a6a:	49a0      	ldr	r1, [pc, #640]	@ (8016cec <__gethex+0x2b0>)
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	4648      	mov	r0, r9
 8016a70:	f7ff fe96 	bl	80167a0 <strncmp>
 8016a74:	4607      	mov	r7, r0
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d167      	bne.n	8016b4a <__gethex+0x10e>
 8016a7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016a7e:	4626      	mov	r6, r4
 8016a80:	f7ff ffc6 	bl	8016a10 <__hexdig_fun>
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d062      	beq.n	8016b4e <__gethex+0x112>
 8016a88:	4623      	mov	r3, r4
 8016a8a:	7818      	ldrb	r0, [r3, #0]
 8016a8c:	2830      	cmp	r0, #48	@ 0x30
 8016a8e:	4699      	mov	r9, r3
 8016a90:	f103 0301 	add.w	r3, r3, #1
 8016a94:	d0f9      	beq.n	8016a8a <__gethex+0x4e>
 8016a96:	f7ff ffbb 	bl	8016a10 <__hexdig_fun>
 8016a9a:	fab0 f580 	clz	r5, r0
 8016a9e:	096d      	lsrs	r5, r5, #5
 8016aa0:	f04f 0b01 	mov.w	fp, #1
 8016aa4:	464a      	mov	r2, r9
 8016aa6:	4616      	mov	r6, r2
 8016aa8:	3201      	adds	r2, #1
 8016aaa:	7830      	ldrb	r0, [r6, #0]
 8016aac:	f7ff ffb0 	bl	8016a10 <__hexdig_fun>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d1f8      	bne.n	8016aa6 <__gethex+0x6a>
 8016ab4:	498d      	ldr	r1, [pc, #564]	@ (8016cec <__gethex+0x2b0>)
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	4630      	mov	r0, r6
 8016aba:	f7ff fe71 	bl	80167a0 <strncmp>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d13f      	bne.n	8016b42 <__gethex+0x106>
 8016ac2:	b944      	cbnz	r4, 8016ad6 <__gethex+0x9a>
 8016ac4:	1c74      	adds	r4, r6, #1
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	4616      	mov	r6, r2
 8016aca:	3201      	adds	r2, #1
 8016acc:	7830      	ldrb	r0, [r6, #0]
 8016ace:	f7ff ff9f 	bl	8016a10 <__hexdig_fun>
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	d1f8      	bne.n	8016ac8 <__gethex+0x8c>
 8016ad6:	1ba4      	subs	r4, r4, r6
 8016ad8:	00a7      	lsls	r7, r4, #2
 8016ada:	7833      	ldrb	r3, [r6, #0]
 8016adc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016ae0:	2b50      	cmp	r3, #80	@ 0x50
 8016ae2:	d13e      	bne.n	8016b62 <__gethex+0x126>
 8016ae4:	7873      	ldrb	r3, [r6, #1]
 8016ae6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016ae8:	d033      	beq.n	8016b52 <__gethex+0x116>
 8016aea:	2b2d      	cmp	r3, #45	@ 0x2d
 8016aec:	d034      	beq.n	8016b58 <__gethex+0x11c>
 8016aee:	1c71      	adds	r1, r6, #1
 8016af0:	2400      	movs	r4, #0
 8016af2:	7808      	ldrb	r0, [r1, #0]
 8016af4:	f7ff ff8c 	bl	8016a10 <__hexdig_fun>
 8016af8:	1e43      	subs	r3, r0, #1
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	2b18      	cmp	r3, #24
 8016afe:	d830      	bhi.n	8016b62 <__gethex+0x126>
 8016b00:	f1a0 0210 	sub.w	r2, r0, #16
 8016b04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016b08:	f7ff ff82 	bl	8016a10 <__hexdig_fun>
 8016b0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016b10:	fa5f fc8c 	uxtb.w	ip, ip
 8016b14:	f1bc 0f18 	cmp.w	ip, #24
 8016b18:	f04f 030a 	mov.w	r3, #10
 8016b1c:	d91e      	bls.n	8016b5c <__gethex+0x120>
 8016b1e:	b104      	cbz	r4, 8016b22 <__gethex+0xe6>
 8016b20:	4252      	negs	r2, r2
 8016b22:	4417      	add	r7, r2
 8016b24:	f8ca 1000 	str.w	r1, [sl]
 8016b28:	b1ed      	cbz	r5, 8016b66 <__gethex+0x12a>
 8016b2a:	f1bb 0f00 	cmp.w	fp, #0
 8016b2e:	bf0c      	ite	eq
 8016b30:	2506      	moveq	r5, #6
 8016b32:	2500      	movne	r5, #0
 8016b34:	4628      	mov	r0, r5
 8016b36:	b005      	add	sp, #20
 8016b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b3c:	2500      	movs	r5, #0
 8016b3e:	462c      	mov	r4, r5
 8016b40:	e7b0      	b.n	8016aa4 <__gethex+0x68>
 8016b42:	2c00      	cmp	r4, #0
 8016b44:	d1c7      	bne.n	8016ad6 <__gethex+0x9a>
 8016b46:	4627      	mov	r7, r4
 8016b48:	e7c7      	b.n	8016ada <__gethex+0x9e>
 8016b4a:	464e      	mov	r6, r9
 8016b4c:	462f      	mov	r7, r5
 8016b4e:	2501      	movs	r5, #1
 8016b50:	e7c3      	b.n	8016ada <__gethex+0x9e>
 8016b52:	2400      	movs	r4, #0
 8016b54:	1cb1      	adds	r1, r6, #2
 8016b56:	e7cc      	b.n	8016af2 <__gethex+0xb6>
 8016b58:	2401      	movs	r4, #1
 8016b5a:	e7fb      	b.n	8016b54 <__gethex+0x118>
 8016b5c:	fb03 0002 	mla	r0, r3, r2, r0
 8016b60:	e7ce      	b.n	8016b00 <__gethex+0xc4>
 8016b62:	4631      	mov	r1, r6
 8016b64:	e7de      	b.n	8016b24 <__gethex+0xe8>
 8016b66:	eba6 0309 	sub.w	r3, r6, r9
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	4629      	mov	r1, r5
 8016b6e:	2b07      	cmp	r3, #7
 8016b70:	dc0a      	bgt.n	8016b88 <__gethex+0x14c>
 8016b72:	9801      	ldr	r0, [sp, #4]
 8016b74:	f000 faf4 	bl	8017160 <_Balloc>
 8016b78:	4604      	mov	r4, r0
 8016b7a:	b940      	cbnz	r0, 8016b8e <__gethex+0x152>
 8016b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8016cf0 <__gethex+0x2b4>)
 8016b7e:	4602      	mov	r2, r0
 8016b80:	21e4      	movs	r1, #228	@ 0xe4
 8016b82:	485c      	ldr	r0, [pc, #368]	@ (8016cf4 <__gethex+0x2b8>)
 8016b84:	f001 f85c 	bl	8017c40 <__assert_func>
 8016b88:	3101      	adds	r1, #1
 8016b8a:	105b      	asrs	r3, r3, #1
 8016b8c:	e7ef      	b.n	8016b6e <__gethex+0x132>
 8016b8e:	f100 0a14 	add.w	sl, r0, #20
 8016b92:	2300      	movs	r3, #0
 8016b94:	4655      	mov	r5, sl
 8016b96:	469b      	mov	fp, r3
 8016b98:	45b1      	cmp	r9, r6
 8016b9a:	d337      	bcc.n	8016c0c <__gethex+0x1d0>
 8016b9c:	f845 bb04 	str.w	fp, [r5], #4
 8016ba0:	eba5 050a 	sub.w	r5, r5, sl
 8016ba4:	10ad      	asrs	r5, r5, #2
 8016ba6:	6125      	str	r5, [r4, #16]
 8016ba8:	4658      	mov	r0, fp
 8016baa:	f000 fbcb 	bl	8017344 <__hi0bits>
 8016bae:	016d      	lsls	r5, r5, #5
 8016bb0:	f8d8 6000 	ldr.w	r6, [r8]
 8016bb4:	1a2d      	subs	r5, r5, r0
 8016bb6:	42b5      	cmp	r5, r6
 8016bb8:	dd54      	ble.n	8016c64 <__gethex+0x228>
 8016bba:	1bad      	subs	r5, r5, r6
 8016bbc:	4629      	mov	r1, r5
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f000 ff54 	bl	8017a6c <__any_on>
 8016bc4:	4681      	mov	r9, r0
 8016bc6:	b178      	cbz	r0, 8016be8 <__gethex+0x1ac>
 8016bc8:	1e6b      	subs	r3, r5, #1
 8016bca:	1159      	asrs	r1, r3, #5
 8016bcc:	f003 021f 	and.w	r2, r3, #31
 8016bd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016bd4:	f04f 0901 	mov.w	r9, #1
 8016bd8:	fa09 f202 	lsl.w	r2, r9, r2
 8016bdc:	420a      	tst	r2, r1
 8016bde:	d003      	beq.n	8016be8 <__gethex+0x1ac>
 8016be0:	454b      	cmp	r3, r9
 8016be2:	dc36      	bgt.n	8016c52 <__gethex+0x216>
 8016be4:	f04f 0902 	mov.w	r9, #2
 8016be8:	4629      	mov	r1, r5
 8016bea:	4620      	mov	r0, r4
 8016bec:	f7ff febe 	bl	801696c <rshift>
 8016bf0:	442f      	add	r7, r5
 8016bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016bf6:	42bb      	cmp	r3, r7
 8016bf8:	da42      	bge.n	8016c80 <__gethex+0x244>
 8016bfa:	9801      	ldr	r0, [sp, #4]
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	f000 faef 	bl	80171e0 <_Bfree>
 8016c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c04:	2300      	movs	r3, #0
 8016c06:	6013      	str	r3, [r2, #0]
 8016c08:	25a3      	movs	r5, #163	@ 0xa3
 8016c0a:	e793      	b.n	8016b34 <__gethex+0xf8>
 8016c0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016c10:	2a2e      	cmp	r2, #46	@ 0x2e
 8016c12:	d012      	beq.n	8016c3a <__gethex+0x1fe>
 8016c14:	2b20      	cmp	r3, #32
 8016c16:	d104      	bne.n	8016c22 <__gethex+0x1e6>
 8016c18:	f845 bb04 	str.w	fp, [r5], #4
 8016c1c:	f04f 0b00 	mov.w	fp, #0
 8016c20:	465b      	mov	r3, fp
 8016c22:	7830      	ldrb	r0, [r6, #0]
 8016c24:	9303      	str	r3, [sp, #12]
 8016c26:	f7ff fef3 	bl	8016a10 <__hexdig_fun>
 8016c2a:	9b03      	ldr	r3, [sp, #12]
 8016c2c:	f000 000f 	and.w	r0, r0, #15
 8016c30:	4098      	lsls	r0, r3
 8016c32:	ea4b 0b00 	orr.w	fp, fp, r0
 8016c36:	3304      	adds	r3, #4
 8016c38:	e7ae      	b.n	8016b98 <__gethex+0x15c>
 8016c3a:	45b1      	cmp	r9, r6
 8016c3c:	d8ea      	bhi.n	8016c14 <__gethex+0x1d8>
 8016c3e:	492b      	ldr	r1, [pc, #172]	@ (8016cec <__gethex+0x2b0>)
 8016c40:	9303      	str	r3, [sp, #12]
 8016c42:	2201      	movs	r2, #1
 8016c44:	4630      	mov	r0, r6
 8016c46:	f7ff fdab 	bl	80167a0 <strncmp>
 8016c4a:	9b03      	ldr	r3, [sp, #12]
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d1e1      	bne.n	8016c14 <__gethex+0x1d8>
 8016c50:	e7a2      	b.n	8016b98 <__gethex+0x15c>
 8016c52:	1ea9      	subs	r1, r5, #2
 8016c54:	4620      	mov	r0, r4
 8016c56:	f000 ff09 	bl	8017a6c <__any_on>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d0c2      	beq.n	8016be4 <__gethex+0x1a8>
 8016c5e:	f04f 0903 	mov.w	r9, #3
 8016c62:	e7c1      	b.n	8016be8 <__gethex+0x1ac>
 8016c64:	da09      	bge.n	8016c7a <__gethex+0x23e>
 8016c66:	1b75      	subs	r5, r6, r5
 8016c68:	4621      	mov	r1, r4
 8016c6a:	9801      	ldr	r0, [sp, #4]
 8016c6c:	462a      	mov	r2, r5
 8016c6e:	f000 fcc7 	bl	8017600 <__lshift>
 8016c72:	1b7f      	subs	r7, r7, r5
 8016c74:	4604      	mov	r4, r0
 8016c76:	f100 0a14 	add.w	sl, r0, #20
 8016c7a:	f04f 0900 	mov.w	r9, #0
 8016c7e:	e7b8      	b.n	8016bf2 <__gethex+0x1b6>
 8016c80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016c84:	42bd      	cmp	r5, r7
 8016c86:	dd6f      	ble.n	8016d68 <__gethex+0x32c>
 8016c88:	1bed      	subs	r5, r5, r7
 8016c8a:	42ae      	cmp	r6, r5
 8016c8c:	dc34      	bgt.n	8016cf8 <__gethex+0x2bc>
 8016c8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c92:	2b02      	cmp	r3, #2
 8016c94:	d022      	beq.n	8016cdc <__gethex+0x2a0>
 8016c96:	2b03      	cmp	r3, #3
 8016c98:	d024      	beq.n	8016ce4 <__gethex+0x2a8>
 8016c9a:	2b01      	cmp	r3, #1
 8016c9c:	d115      	bne.n	8016cca <__gethex+0x28e>
 8016c9e:	42ae      	cmp	r6, r5
 8016ca0:	d113      	bne.n	8016cca <__gethex+0x28e>
 8016ca2:	2e01      	cmp	r6, #1
 8016ca4:	d10b      	bne.n	8016cbe <__gethex+0x282>
 8016ca6:	9a02      	ldr	r2, [sp, #8]
 8016ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016cac:	6013      	str	r3, [r2, #0]
 8016cae:	2301      	movs	r3, #1
 8016cb0:	6123      	str	r3, [r4, #16]
 8016cb2:	f8ca 3000 	str.w	r3, [sl]
 8016cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cb8:	2562      	movs	r5, #98	@ 0x62
 8016cba:	601c      	str	r4, [r3, #0]
 8016cbc:	e73a      	b.n	8016b34 <__gethex+0xf8>
 8016cbe:	1e71      	subs	r1, r6, #1
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	f000 fed3 	bl	8017a6c <__any_on>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d1ed      	bne.n	8016ca6 <__gethex+0x26a>
 8016cca:	9801      	ldr	r0, [sp, #4]
 8016ccc:	4621      	mov	r1, r4
 8016cce:	f000 fa87 	bl	80171e0 <_Bfree>
 8016cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	6013      	str	r3, [r2, #0]
 8016cd8:	2550      	movs	r5, #80	@ 0x50
 8016cda:	e72b      	b.n	8016b34 <__gethex+0xf8>
 8016cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d1f3      	bne.n	8016cca <__gethex+0x28e>
 8016ce2:	e7e0      	b.n	8016ca6 <__gethex+0x26a>
 8016ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d1dd      	bne.n	8016ca6 <__gethex+0x26a>
 8016cea:	e7ee      	b.n	8016cca <__gethex+0x28e>
 8016cec:	08018d14 	.word	0x08018d14
 8016cf0:	08018d2a 	.word	0x08018d2a
 8016cf4:	08018d3b 	.word	0x08018d3b
 8016cf8:	1e6f      	subs	r7, r5, #1
 8016cfa:	f1b9 0f00 	cmp.w	r9, #0
 8016cfe:	d130      	bne.n	8016d62 <__gethex+0x326>
 8016d00:	b127      	cbz	r7, 8016d0c <__gethex+0x2d0>
 8016d02:	4639      	mov	r1, r7
 8016d04:	4620      	mov	r0, r4
 8016d06:	f000 feb1 	bl	8017a6c <__any_on>
 8016d0a:	4681      	mov	r9, r0
 8016d0c:	117a      	asrs	r2, r7, #5
 8016d0e:	2301      	movs	r3, #1
 8016d10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016d14:	f007 071f 	and.w	r7, r7, #31
 8016d18:	40bb      	lsls	r3, r7
 8016d1a:	4213      	tst	r3, r2
 8016d1c:	4629      	mov	r1, r5
 8016d1e:	4620      	mov	r0, r4
 8016d20:	bf18      	it	ne
 8016d22:	f049 0902 	orrne.w	r9, r9, #2
 8016d26:	f7ff fe21 	bl	801696c <rshift>
 8016d2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016d2e:	1b76      	subs	r6, r6, r5
 8016d30:	2502      	movs	r5, #2
 8016d32:	f1b9 0f00 	cmp.w	r9, #0
 8016d36:	d047      	beq.n	8016dc8 <__gethex+0x38c>
 8016d38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d3c:	2b02      	cmp	r3, #2
 8016d3e:	d015      	beq.n	8016d6c <__gethex+0x330>
 8016d40:	2b03      	cmp	r3, #3
 8016d42:	d017      	beq.n	8016d74 <__gethex+0x338>
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	d109      	bne.n	8016d5c <__gethex+0x320>
 8016d48:	f019 0f02 	tst.w	r9, #2
 8016d4c:	d006      	beq.n	8016d5c <__gethex+0x320>
 8016d4e:	f8da 3000 	ldr.w	r3, [sl]
 8016d52:	ea49 0903 	orr.w	r9, r9, r3
 8016d56:	f019 0f01 	tst.w	r9, #1
 8016d5a:	d10e      	bne.n	8016d7a <__gethex+0x33e>
 8016d5c:	f045 0510 	orr.w	r5, r5, #16
 8016d60:	e032      	b.n	8016dc8 <__gethex+0x38c>
 8016d62:	f04f 0901 	mov.w	r9, #1
 8016d66:	e7d1      	b.n	8016d0c <__gethex+0x2d0>
 8016d68:	2501      	movs	r5, #1
 8016d6a:	e7e2      	b.n	8016d32 <__gethex+0x2f6>
 8016d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d6e:	f1c3 0301 	rsb	r3, r3, #1
 8016d72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d0f0      	beq.n	8016d5c <__gethex+0x320>
 8016d7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d7e:	f104 0314 	add.w	r3, r4, #20
 8016d82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016d86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016d8a:	f04f 0c00 	mov.w	ip, #0
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016d98:	d01b      	beq.n	8016dd2 <__gethex+0x396>
 8016d9a:	3201      	adds	r2, #1
 8016d9c:	6002      	str	r2, [r0, #0]
 8016d9e:	2d02      	cmp	r5, #2
 8016da0:	f104 0314 	add.w	r3, r4, #20
 8016da4:	d13c      	bne.n	8016e20 <__gethex+0x3e4>
 8016da6:	f8d8 2000 	ldr.w	r2, [r8]
 8016daa:	3a01      	subs	r2, #1
 8016dac:	42b2      	cmp	r2, r6
 8016dae:	d109      	bne.n	8016dc4 <__gethex+0x388>
 8016db0:	1171      	asrs	r1, r6, #5
 8016db2:	2201      	movs	r2, #1
 8016db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016db8:	f006 061f 	and.w	r6, r6, #31
 8016dbc:	fa02 f606 	lsl.w	r6, r2, r6
 8016dc0:	421e      	tst	r6, r3
 8016dc2:	d13a      	bne.n	8016e3a <__gethex+0x3fe>
 8016dc4:	f045 0520 	orr.w	r5, r5, #32
 8016dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dca:	601c      	str	r4, [r3, #0]
 8016dcc:	9b02      	ldr	r3, [sp, #8]
 8016dce:	601f      	str	r7, [r3, #0]
 8016dd0:	e6b0      	b.n	8016b34 <__gethex+0xf8>
 8016dd2:	4299      	cmp	r1, r3
 8016dd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8016dd8:	d8d9      	bhi.n	8016d8e <__gethex+0x352>
 8016dda:	68a3      	ldr	r3, [r4, #8]
 8016ddc:	459b      	cmp	fp, r3
 8016dde:	db17      	blt.n	8016e10 <__gethex+0x3d4>
 8016de0:	6861      	ldr	r1, [r4, #4]
 8016de2:	9801      	ldr	r0, [sp, #4]
 8016de4:	3101      	adds	r1, #1
 8016de6:	f000 f9bb 	bl	8017160 <_Balloc>
 8016dea:	4681      	mov	r9, r0
 8016dec:	b918      	cbnz	r0, 8016df6 <__gethex+0x3ba>
 8016dee:	4b1a      	ldr	r3, [pc, #104]	@ (8016e58 <__gethex+0x41c>)
 8016df0:	4602      	mov	r2, r0
 8016df2:	2184      	movs	r1, #132	@ 0x84
 8016df4:	e6c5      	b.n	8016b82 <__gethex+0x146>
 8016df6:	6922      	ldr	r2, [r4, #16]
 8016df8:	3202      	adds	r2, #2
 8016dfa:	f104 010c 	add.w	r1, r4, #12
 8016dfe:	0092      	lsls	r2, r2, #2
 8016e00:	300c      	adds	r0, #12
 8016e02:	f7ff fd52 	bl	80168aa <memcpy>
 8016e06:	4621      	mov	r1, r4
 8016e08:	9801      	ldr	r0, [sp, #4]
 8016e0a:	f000 f9e9 	bl	80171e0 <_Bfree>
 8016e0e:	464c      	mov	r4, r9
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	1c5a      	adds	r2, r3, #1
 8016e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016e18:	6122      	str	r2, [r4, #16]
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	615a      	str	r2, [r3, #20]
 8016e1e:	e7be      	b.n	8016d9e <__gethex+0x362>
 8016e20:	6922      	ldr	r2, [r4, #16]
 8016e22:	455a      	cmp	r2, fp
 8016e24:	dd0b      	ble.n	8016e3e <__gethex+0x402>
 8016e26:	2101      	movs	r1, #1
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f7ff fd9f 	bl	801696c <rshift>
 8016e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e32:	3701      	adds	r7, #1
 8016e34:	42bb      	cmp	r3, r7
 8016e36:	f6ff aee0 	blt.w	8016bfa <__gethex+0x1be>
 8016e3a:	2501      	movs	r5, #1
 8016e3c:	e7c2      	b.n	8016dc4 <__gethex+0x388>
 8016e3e:	f016 061f 	ands.w	r6, r6, #31
 8016e42:	d0fa      	beq.n	8016e3a <__gethex+0x3fe>
 8016e44:	4453      	add	r3, sl
 8016e46:	f1c6 0620 	rsb	r6, r6, #32
 8016e4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016e4e:	f000 fa79 	bl	8017344 <__hi0bits>
 8016e52:	42b0      	cmp	r0, r6
 8016e54:	dbe7      	blt.n	8016e26 <__gethex+0x3ea>
 8016e56:	e7f0      	b.n	8016e3a <__gethex+0x3fe>
 8016e58:	08018d2a 	.word	0x08018d2a

08016e5c <L_shift>:
 8016e5c:	f1c2 0208 	rsb	r2, r2, #8
 8016e60:	0092      	lsls	r2, r2, #2
 8016e62:	b570      	push	{r4, r5, r6, lr}
 8016e64:	f1c2 0620 	rsb	r6, r2, #32
 8016e68:	6843      	ldr	r3, [r0, #4]
 8016e6a:	6804      	ldr	r4, [r0, #0]
 8016e6c:	fa03 f506 	lsl.w	r5, r3, r6
 8016e70:	432c      	orrs	r4, r5
 8016e72:	40d3      	lsrs	r3, r2
 8016e74:	6004      	str	r4, [r0, #0]
 8016e76:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e7a:	4288      	cmp	r0, r1
 8016e7c:	d3f4      	bcc.n	8016e68 <L_shift+0xc>
 8016e7e:	bd70      	pop	{r4, r5, r6, pc}

08016e80 <__match>:
 8016e80:	b530      	push	{r4, r5, lr}
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	3301      	adds	r3, #1
 8016e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e8a:	b914      	cbnz	r4, 8016e92 <__match+0x12>
 8016e8c:	6003      	str	r3, [r0, #0]
 8016e8e:	2001      	movs	r0, #1
 8016e90:	bd30      	pop	{r4, r5, pc}
 8016e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016e9a:	2d19      	cmp	r5, #25
 8016e9c:	bf98      	it	ls
 8016e9e:	3220      	addls	r2, #32
 8016ea0:	42a2      	cmp	r2, r4
 8016ea2:	d0f0      	beq.n	8016e86 <__match+0x6>
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	e7f3      	b.n	8016e90 <__match+0x10>

08016ea8 <__hexnan>:
 8016ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eac:	680b      	ldr	r3, [r1, #0]
 8016eae:	6801      	ldr	r1, [r0, #0]
 8016eb0:	115e      	asrs	r6, r3, #5
 8016eb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016eb6:	f013 031f 	ands.w	r3, r3, #31
 8016eba:	b087      	sub	sp, #28
 8016ebc:	bf18      	it	ne
 8016ebe:	3604      	addne	r6, #4
 8016ec0:	2500      	movs	r5, #0
 8016ec2:	1f37      	subs	r7, r6, #4
 8016ec4:	4682      	mov	sl, r0
 8016ec6:	4690      	mov	r8, r2
 8016ec8:	9301      	str	r3, [sp, #4]
 8016eca:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ece:	46b9      	mov	r9, r7
 8016ed0:	463c      	mov	r4, r7
 8016ed2:	9502      	str	r5, [sp, #8]
 8016ed4:	46ab      	mov	fp, r5
 8016ed6:	784a      	ldrb	r2, [r1, #1]
 8016ed8:	1c4b      	adds	r3, r1, #1
 8016eda:	9303      	str	r3, [sp, #12]
 8016edc:	b342      	cbz	r2, 8016f30 <__hexnan+0x88>
 8016ede:	4610      	mov	r0, r2
 8016ee0:	9105      	str	r1, [sp, #20]
 8016ee2:	9204      	str	r2, [sp, #16]
 8016ee4:	f7ff fd94 	bl	8016a10 <__hexdig_fun>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d151      	bne.n	8016f90 <__hexnan+0xe8>
 8016eec:	9a04      	ldr	r2, [sp, #16]
 8016eee:	9905      	ldr	r1, [sp, #20]
 8016ef0:	2a20      	cmp	r2, #32
 8016ef2:	d818      	bhi.n	8016f26 <__hexnan+0x7e>
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	459b      	cmp	fp, r3
 8016ef8:	dd13      	ble.n	8016f22 <__hexnan+0x7a>
 8016efa:	454c      	cmp	r4, r9
 8016efc:	d206      	bcs.n	8016f0c <__hexnan+0x64>
 8016efe:	2d07      	cmp	r5, #7
 8016f00:	dc04      	bgt.n	8016f0c <__hexnan+0x64>
 8016f02:	462a      	mov	r2, r5
 8016f04:	4649      	mov	r1, r9
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7ff ffa8 	bl	8016e5c <L_shift>
 8016f0c:	4544      	cmp	r4, r8
 8016f0e:	d952      	bls.n	8016fb6 <__hexnan+0x10e>
 8016f10:	2300      	movs	r3, #0
 8016f12:	f1a4 0904 	sub.w	r9, r4, #4
 8016f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f1a:	f8cd b008 	str.w	fp, [sp, #8]
 8016f1e:	464c      	mov	r4, r9
 8016f20:	461d      	mov	r5, r3
 8016f22:	9903      	ldr	r1, [sp, #12]
 8016f24:	e7d7      	b.n	8016ed6 <__hexnan+0x2e>
 8016f26:	2a29      	cmp	r2, #41	@ 0x29
 8016f28:	d157      	bne.n	8016fda <__hexnan+0x132>
 8016f2a:	3102      	adds	r1, #2
 8016f2c:	f8ca 1000 	str.w	r1, [sl]
 8016f30:	f1bb 0f00 	cmp.w	fp, #0
 8016f34:	d051      	beq.n	8016fda <__hexnan+0x132>
 8016f36:	454c      	cmp	r4, r9
 8016f38:	d206      	bcs.n	8016f48 <__hexnan+0xa0>
 8016f3a:	2d07      	cmp	r5, #7
 8016f3c:	dc04      	bgt.n	8016f48 <__hexnan+0xa0>
 8016f3e:	462a      	mov	r2, r5
 8016f40:	4649      	mov	r1, r9
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff ff8a 	bl	8016e5c <L_shift>
 8016f48:	4544      	cmp	r4, r8
 8016f4a:	d936      	bls.n	8016fba <__hexnan+0x112>
 8016f4c:	f1a8 0204 	sub.w	r2, r8, #4
 8016f50:	4623      	mov	r3, r4
 8016f52:	f853 1b04 	ldr.w	r1, [r3], #4
 8016f56:	f842 1f04 	str.w	r1, [r2, #4]!
 8016f5a:	429f      	cmp	r7, r3
 8016f5c:	d2f9      	bcs.n	8016f52 <__hexnan+0xaa>
 8016f5e:	1b3b      	subs	r3, r7, r4
 8016f60:	f023 0303 	bic.w	r3, r3, #3
 8016f64:	3304      	adds	r3, #4
 8016f66:	3401      	adds	r4, #1
 8016f68:	3e03      	subs	r6, #3
 8016f6a:	42b4      	cmp	r4, r6
 8016f6c:	bf88      	it	hi
 8016f6e:	2304      	movhi	r3, #4
 8016f70:	4443      	add	r3, r8
 8016f72:	2200      	movs	r2, #0
 8016f74:	f843 2b04 	str.w	r2, [r3], #4
 8016f78:	429f      	cmp	r7, r3
 8016f7a:	d2fb      	bcs.n	8016f74 <__hexnan+0xcc>
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	b91b      	cbnz	r3, 8016f88 <__hexnan+0xe0>
 8016f80:	4547      	cmp	r7, r8
 8016f82:	d128      	bne.n	8016fd6 <__hexnan+0x12e>
 8016f84:	2301      	movs	r3, #1
 8016f86:	603b      	str	r3, [r7, #0]
 8016f88:	2005      	movs	r0, #5
 8016f8a:	b007      	add	sp, #28
 8016f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f90:	3501      	adds	r5, #1
 8016f92:	2d08      	cmp	r5, #8
 8016f94:	f10b 0b01 	add.w	fp, fp, #1
 8016f98:	dd06      	ble.n	8016fa8 <__hexnan+0x100>
 8016f9a:	4544      	cmp	r4, r8
 8016f9c:	d9c1      	bls.n	8016f22 <__hexnan+0x7a>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	f844 3c04 	str.w	r3, [r4, #-4]
 8016fa4:	2501      	movs	r5, #1
 8016fa6:	3c04      	subs	r4, #4
 8016fa8:	6822      	ldr	r2, [r4, #0]
 8016faa:	f000 000f 	and.w	r0, r0, #15
 8016fae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016fb2:	6020      	str	r0, [r4, #0]
 8016fb4:	e7b5      	b.n	8016f22 <__hexnan+0x7a>
 8016fb6:	2508      	movs	r5, #8
 8016fb8:	e7b3      	b.n	8016f22 <__hexnan+0x7a>
 8016fba:	9b01      	ldr	r3, [sp, #4]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d0dd      	beq.n	8016f7c <__hexnan+0xd4>
 8016fc0:	f1c3 0320 	rsb	r3, r3, #32
 8016fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc8:	40da      	lsrs	r2, r3
 8016fca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016fce:	4013      	ands	r3, r2
 8016fd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8016fd4:	e7d2      	b.n	8016f7c <__hexnan+0xd4>
 8016fd6:	3f04      	subs	r7, #4
 8016fd8:	e7d0      	b.n	8016f7c <__hexnan+0xd4>
 8016fda:	2004      	movs	r0, #4
 8016fdc:	e7d5      	b.n	8016f8a <__hexnan+0xe2>
	...

08016fe0 <sbrk_aligned>:
 8016fe0:	b570      	push	{r4, r5, r6, lr}
 8016fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8017020 <sbrk_aligned+0x40>)
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	6831      	ldr	r1, [r6, #0]
 8016fe8:	4605      	mov	r5, r0
 8016fea:	b911      	cbnz	r1, 8016ff2 <sbrk_aligned+0x12>
 8016fec:	f000 fe18 	bl	8017c20 <_sbrk_r>
 8016ff0:	6030      	str	r0, [r6, #0]
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 fe13 	bl	8017c20 <_sbrk_r>
 8016ffa:	1c43      	adds	r3, r0, #1
 8016ffc:	d103      	bne.n	8017006 <sbrk_aligned+0x26>
 8016ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8017002:	4620      	mov	r0, r4
 8017004:	bd70      	pop	{r4, r5, r6, pc}
 8017006:	1cc4      	adds	r4, r0, #3
 8017008:	f024 0403 	bic.w	r4, r4, #3
 801700c:	42a0      	cmp	r0, r4
 801700e:	d0f8      	beq.n	8017002 <sbrk_aligned+0x22>
 8017010:	1a21      	subs	r1, r4, r0
 8017012:	4628      	mov	r0, r5
 8017014:	f000 fe04 	bl	8017c20 <_sbrk_r>
 8017018:	3001      	adds	r0, #1
 801701a:	d1f2      	bne.n	8017002 <sbrk_aligned+0x22>
 801701c:	e7ef      	b.n	8016ffe <sbrk_aligned+0x1e>
 801701e:	bf00      	nop
 8017020:	240057a4 	.word	0x240057a4

08017024 <_malloc_r>:
 8017024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017028:	1ccd      	adds	r5, r1, #3
 801702a:	f025 0503 	bic.w	r5, r5, #3
 801702e:	3508      	adds	r5, #8
 8017030:	2d0c      	cmp	r5, #12
 8017032:	bf38      	it	cc
 8017034:	250c      	movcc	r5, #12
 8017036:	2d00      	cmp	r5, #0
 8017038:	4606      	mov	r6, r0
 801703a:	db01      	blt.n	8017040 <_malloc_r+0x1c>
 801703c:	42a9      	cmp	r1, r5
 801703e:	d904      	bls.n	801704a <_malloc_r+0x26>
 8017040:	230c      	movs	r3, #12
 8017042:	6033      	str	r3, [r6, #0]
 8017044:	2000      	movs	r0, #0
 8017046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801704a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017120 <_malloc_r+0xfc>
 801704e:	f000 f87b 	bl	8017148 <__malloc_lock>
 8017052:	f8d8 3000 	ldr.w	r3, [r8]
 8017056:	461c      	mov	r4, r3
 8017058:	bb44      	cbnz	r4, 80170ac <_malloc_r+0x88>
 801705a:	4629      	mov	r1, r5
 801705c:	4630      	mov	r0, r6
 801705e:	f7ff ffbf 	bl	8016fe0 <sbrk_aligned>
 8017062:	1c43      	adds	r3, r0, #1
 8017064:	4604      	mov	r4, r0
 8017066:	d158      	bne.n	801711a <_malloc_r+0xf6>
 8017068:	f8d8 4000 	ldr.w	r4, [r8]
 801706c:	4627      	mov	r7, r4
 801706e:	2f00      	cmp	r7, #0
 8017070:	d143      	bne.n	80170fa <_malloc_r+0xd6>
 8017072:	2c00      	cmp	r4, #0
 8017074:	d04b      	beq.n	801710e <_malloc_r+0xea>
 8017076:	6823      	ldr	r3, [r4, #0]
 8017078:	4639      	mov	r1, r7
 801707a:	4630      	mov	r0, r6
 801707c:	eb04 0903 	add.w	r9, r4, r3
 8017080:	f000 fdce 	bl	8017c20 <_sbrk_r>
 8017084:	4581      	cmp	r9, r0
 8017086:	d142      	bne.n	801710e <_malloc_r+0xea>
 8017088:	6821      	ldr	r1, [r4, #0]
 801708a:	1a6d      	subs	r5, r5, r1
 801708c:	4629      	mov	r1, r5
 801708e:	4630      	mov	r0, r6
 8017090:	f7ff ffa6 	bl	8016fe0 <sbrk_aligned>
 8017094:	3001      	adds	r0, #1
 8017096:	d03a      	beq.n	801710e <_malloc_r+0xea>
 8017098:	6823      	ldr	r3, [r4, #0]
 801709a:	442b      	add	r3, r5
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	f8d8 3000 	ldr.w	r3, [r8]
 80170a2:	685a      	ldr	r2, [r3, #4]
 80170a4:	bb62      	cbnz	r2, 8017100 <_malloc_r+0xdc>
 80170a6:	f8c8 7000 	str.w	r7, [r8]
 80170aa:	e00f      	b.n	80170cc <_malloc_r+0xa8>
 80170ac:	6822      	ldr	r2, [r4, #0]
 80170ae:	1b52      	subs	r2, r2, r5
 80170b0:	d420      	bmi.n	80170f4 <_malloc_r+0xd0>
 80170b2:	2a0b      	cmp	r2, #11
 80170b4:	d917      	bls.n	80170e6 <_malloc_r+0xc2>
 80170b6:	1961      	adds	r1, r4, r5
 80170b8:	42a3      	cmp	r3, r4
 80170ba:	6025      	str	r5, [r4, #0]
 80170bc:	bf18      	it	ne
 80170be:	6059      	strne	r1, [r3, #4]
 80170c0:	6863      	ldr	r3, [r4, #4]
 80170c2:	bf08      	it	eq
 80170c4:	f8c8 1000 	streq.w	r1, [r8]
 80170c8:	5162      	str	r2, [r4, r5]
 80170ca:	604b      	str	r3, [r1, #4]
 80170cc:	4630      	mov	r0, r6
 80170ce:	f000 f841 	bl	8017154 <__malloc_unlock>
 80170d2:	f104 000b 	add.w	r0, r4, #11
 80170d6:	1d23      	adds	r3, r4, #4
 80170d8:	f020 0007 	bic.w	r0, r0, #7
 80170dc:	1ac2      	subs	r2, r0, r3
 80170de:	bf1c      	itt	ne
 80170e0:	1a1b      	subne	r3, r3, r0
 80170e2:	50a3      	strne	r3, [r4, r2]
 80170e4:	e7af      	b.n	8017046 <_malloc_r+0x22>
 80170e6:	6862      	ldr	r2, [r4, #4]
 80170e8:	42a3      	cmp	r3, r4
 80170ea:	bf0c      	ite	eq
 80170ec:	f8c8 2000 	streq.w	r2, [r8]
 80170f0:	605a      	strne	r2, [r3, #4]
 80170f2:	e7eb      	b.n	80170cc <_malloc_r+0xa8>
 80170f4:	4623      	mov	r3, r4
 80170f6:	6864      	ldr	r4, [r4, #4]
 80170f8:	e7ae      	b.n	8017058 <_malloc_r+0x34>
 80170fa:	463c      	mov	r4, r7
 80170fc:	687f      	ldr	r7, [r7, #4]
 80170fe:	e7b6      	b.n	801706e <_malloc_r+0x4a>
 8017100:	461a      	mov	r2, r3
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	42a3      	cmp	r3, r4
 8017106:	d1fb      	bne.n	8017100 <_malloc_r+0xdc>
 8017108:	2300      	movs	r3, #0
 801710a:	6053      	str	r3, [r2, #4]
 801710c:	e7de      	b.n	80170cc <_malloc_r+0xa8>
 801710e:	230c      	movs	r3, #12
 8017110:	6033      	str	r3, [r6, #0]
 8017112:	4630      	mov	r0, r6
 8017114:	f000 f81e 	bl	8017154 <__malloc_unlock>
 8017118:	e794      	b.n	8017044 <_malloc_r+0x20>
 801711a:	6005      	str	r5, [r0, #0]
 801711c:	e7d6      	b.n	80170cc <_malloc_r+0xa8>
 801711e:	bf00      	nop
 8017120:	240057a8 	.word	0x240057a8

08017124 <__ascii_mbtowc>:
 8017124:	b082      	sub	sp, #8
 8017126:	b901      	cbnz	r1, 801712a <__ascii_mbtowc+0x6>
 8017128:	a901      	add	r1, sp, #4
 801712a:	b142      	cbz	r2, 801713e <__ascii_mbtowc+0x1a>
 801712c:	b14b      	cbz	r3, 8017142 <__ascii_mbtowc+0x1e>
 801712e:	7813      	ldrb	r3, [r2, #0]
 8017130:	600b      	str	r3, [r1, #0]
 8017132:	7812      	ldrb	r2, [r2, #0]
 8017134:	1e10      	subs	r0, r2, #0
 8017136:	bf18      	it	ne
 8017138:	2001      	movne	r0, #1
 801713a:	b002      	add	sp, #8
 801713c:	4770      	bx	lr
 801713e:	4610      	mov	r0, r2
 8017140:	e7fb      	b.n	801713a <__ascii_mbtowc+0x16>
 8017142:	f06f 0001 	mvn.w	r0, #1
 8017146:	e7f8      	b.n	801713a <__ascii_mbtowc+0x16>

08017148 <__malloc_lock>:
 8017148:	4801      	ldr	r0, [pc, #4]	@ (8017150 <__malloc_lock+0x8>)
 801714a:	f7ff bbac 	b.w	80168a6 <__retarget_lock_acquire_recursive>
 801714e:	bf00      	nop
 8017150:	240057a0 	.word	0x240057a0

08017154 <__malloc_unlock>:
 8017154:	4801      	ldr	r0, [pc, #4]	@ (801715c <__malloc_unlock+0x8>)
 8017156:	f7ff bba7 	b.w	80168a8 <__retarget_lock_release_recursive>
 801715a:	bf00      	nop
 801715c:	240057a0 	.word	0x240057a0

08017160 <_Balloc>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	69c6      	ldr	r6, [r0, #28]
 8017164:	4604      	mov	r4, r0
 8017166:	460d      	mov	r5, r1
 8017168:	b976      	cbnz	r6, 8017188 <_Balloc+0x28>
 801716a:	2010      	movs	r0, #16
 801716c:	f000 fd9a 	bl	8017ca4 <malloc>
 8017170:	4602      	mov	r2, r0
 8017172:	61e0      	str	r0, [r4, #28]
 8017174:	b920      	cbnz	r0, 8017180 <_Balloc+0x20>
 8017176:	4b18      	ldr	r3, [pc, #96]	@ (80171d8 <_Balloc+0x78>)
 8017178:	4818      	ldr	r0, [pc, #96]	@ (80171dc <_Balloc+0x7c>)
 801717a:	216b      	movs	r1, #107	@ 0x6b
 801717c:	f000 fd60 	bl	8017c40 <__assert_func>
 8017180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017184:	6006      	str	r6, [r0, #0]
 8017186:	60c6      	str	r6, [r0, #12]
 8017188:	69e6      	ldr	r6, [r4, #28]
 801718a:	68f3      	ldr	r3, [r6, #12]
 801718c:	b183      	cbz	r3, 80171b0 <_Balloc+0x50>
 801718e:	69e3      	ldr	r3, [r4, #28]
 8017190:	68db      	ldr	r3, [r3, #12]
 8017192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017196:	b9b8      	cbnz	r0, 80171c8 <_Balloc+0x68>
 8017198:	2101      	movs	r1, #1
 801719a:	fa01 f605 	lsl.w	r6, r1, r5
 801719e:	1d72      	adds	r2, r6, #5
 80171a0:	0092      	lsls	r2, r2, #2
 80171a2:	4620      	mov	r0, r4
 80171a4:	f000 fd6a 	bl	8017c7c <_calloc_r>
 80171a8:	b160      	cbz	r0, 80171c4 <_Balloc+0x64>
 80171aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80171ae:	e00e      	b.n	80171ce <_Balloc+0x6e>
 80171b0:	2221      	movs	r2, #33	@ 0x21
 80171b2:	2104      	movs	r1, #4
 80171b4:	4620      	mov	r0, r4
 80171b6:	f000 fd61 	bl	8017c7c <_calloc_r>
 80171ba:	69e3      	ldr	r3, [r4, #28]
 80171bc:	60f0      	str	r0, [r6, #12]
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d1e4      	bne.n	801718e <_Balloc+0x2e>
 80171c4:	2000      	movs	r0, #0
 80171c6:	bd70      	pop	{r4, r5, r6, pc}
 80171c8:	6802      	ldr	r2, [r0, #0]
 80171ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80171ce:	2300      	movs	r3, #0
 80171d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80171d4:	e7f7      	b.n	80171c6 <_Balloc+0x66>
 80171d6:	bf00      	nop
 80171d8:	08018d9b 	.word	0x08018d9b
 80171dc:	08018db2 	.word	0x08018db2

080171e0 <_Bfree>:
 80171e0:	b570      	push	{r4, r5, r6, lr}
 80171e2:	69c6      	ldr	r6, [r0, #28]
 80171e4:	4605      	mov	r5, r0
 80171e6:	460c      	mov	r4, r1
 80171e8:	b976      	cbnz	r6, 8017208 <_Bfree+0x28>
 80171ea:	2010      	movs	r0, #16
 80171ec:	f000 fd5a 	bl	8017ca4 <malloc>
 80171f0:	4602      	mov	r2, r0
 80171f2:	61e8      	str	r0, [r5, #28]
 80171f4:	b920      	cbnz	r0, 8017200 <_Bfree+0x20>
 80171f6:	4b09      	ldr	r3, [pc, #36]	@ (801721c <_Bfree+0x3c>)
 80171f8:	4809      	ldr	r0, [pc, #36]	@ (8017220 <_Bfree+0x40>)
 80171fa:	218f      	movs	r1, #143	@ 0x8f
 80171fc:	f000 fd20 	bl	8017c40 <__assert_func>
 8017200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017204:	6006      	str	r6, [r0, #0]
 8017206:	60c6      	str	r6, [r0, #12]
 8017208:	b13c      	cbz	r4, 801721a <_Bfree+0x3a>
 801720a:	69eb      	ldr	r3, [r5, #28]
 801720c:	6862      	ldr	r2, [r4, #4]
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017214:	6021      	str	r1, [r4, #0]
 8017216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801721a:	bd70      	pop	{r4, r5, r6, pc}
 801721c:	08018d9b 	.word	0x08018d9b
 8017220:	08018db2 	.word	0x08018db2

08017224 <__multadd>:
 8017224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017228:	690d      	ldr	r5, [r1, #16]
 801722a:	4607      	mov	r7, r0
 801722c:	460c      	mov	r4, r1
 801722e:	461e      	mov	r6, r3
 8017230:	f101 0c14 	add.w	ip, r1, #20
 8017234:	2000      	movs	r0, #0
 8017236:	f8dc 3000 	ldr.w	r3, [ip]
 801723a:	b299      	uxth	r1, r3
 801723c:	fb02 6101 	mla	r1, r2, r1, r6
 8017240:	0c1e      	lsrs	r6, r3, #16
 8017242:	0c0b      	lsrs	r3, r1, #16
 8017244:	fb02 3306 	mla	r3, r2, r6, r3
 8017248:	b289      	uxth	r1, r1
 801724a:	3001      	adds	r0, #1
 801724c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017250:	4285      	cmp	r5, r0
 8017252:	f84c 1b04 	str.w	r1, [ip], #4
 8017256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801725a:	dcec      	bgt.n	8017236 <__multadd+0x12>
 801725c:	b30e      	cbz	r6, 80172a2 <__multadd+0x7e>
 801725e:	68a3      	ldr	r3, [r4, #8]
 8017260:	42ab      	cmp	r3, r5
 8017262:	dc19      	bgt.n	8017298 <__multadd+0x74>
 8017264:	6861      	ldr	r1, [r4, #4]
 8017266:	4638      	mov	r0, r7
 8017268:	3101      	adds	r1, #1
 801726a:	f7ff ff79 	bl	8017160 <_Balloc>
 801726e:	4680      	mov	r8, r0
 8017270:	b928      	cbnz	r0, 801727e <__multadd+0x5a>
 8017272:	4602      	mov	r2, r0
 8017274:	4b0c      	ldr	r3, [pc, #48]	@ (80172a8 <__multadd+0x84>)
 8017276:	480d      	ldr	r0, [pc, #52]	@ (80172ac <__multadd+0x88>)
 8017278:	21ba      	movs	r1, #186	@ 0xba
 801727a:	f000 fce1 	bl	8017c40 <__assert_func>
 801727e:	6922      	ldr	r2, [r4, #16]
 8017280:	3202      	adds	r2, #2
 8017282:	f104 010c 	add.w	r1, r4, #12
 8017286:	0092      	lsls	r2, r2, #2
 8017288:	300c      	adds	r0, #12
 801728a:	f7ff fb0e 	bl	80168aa <memcpy>
 801728e:	4621      	mov	r1, r4
 8017290:	4638      	mov	r0, r7
 8017292:	f7ff ffa5 	bl	80171e0 <_Bfree>
 8017296:	4644      	mov	r4, r8
 8017298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801729c:	3501      	adds	r5, #1
 801729e:	615e      	str	r6, [r3, #20]
 80172a0:	6125      	str	r5, [r4, #16]
 80172a2:	4620      	mov	r0, r4
 80172a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172a8:	08018d2a 	.word	0x08018d2a
 80172ac:	08018db2 	.word	0x08018db2

080172b0 <__s2b>:
 80172b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172b4:	460c      	mov	r4, r1
 80172b6:	4615      	mov	r5, r2
 80172b8:	461f      	mov	r7, r3
 80172ba:	2209      	movs	r2, #9
 80172bc:	3308      	adds	r3, #8
 80172be:	4606      	mov	r6, r0
 80172c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80172c4:	2100      	movs	r1, #0
 80172c6:	2201      	movs	r2, #1
 80172c8:	429a      	cmp	r2, r3
 80172ca:	db09      	blt.n	80172e0 <__s2b+0x30>
 80172cc:	4630      	mov	r0, r6
 80172ce:	f7ff ff47 	bl	8017160 <_Balloc>
 80172d2:	b940      	cbnz	r0, 80172e6 <__s2b+0x36>
 80172d4:	4602      	mov	r2, r0
 80172d6:	4b19      	ldr	r3, [pc, #100]	@ (801733c <__s2b+0x8c>)
 80172d8:	4819      	ldr	r0, [pc, #100]	@ (8017340 <__s2b+0x90>)
 80172da:	21d3      	movs	r1, #211	@ 0xd3
 80172dc:	f000 fcb0 	bl	8017c40 <__assert_func>
 80172e0:	0052      	lsls	r2, r2, #1
 80172e2:	3101      	adds	r1, #1
 80172e4:	e7f0      	b.n	80172c8 <__s2b+0x18>
 80172e6:	9b08      	ldr	r3, [sp, #32]
 80172e8:	6143      	str	r3, [r0, #20]
 80172ea:	2d09      	cmp	r5, #9
 80172ec:	f04f 0301 	mov.w	r3, #1
 80172f0:	6103      	str	r3, [r0, #16]
 80172f2:	dd16      	ble.n	8017322 <__s2b+0x72>
 80172f4:	f104 0909 	add.w	r9, r4, #9
 80172f8:	46c8      	mov	r8, r9
 80172fa:	442c      	add	r4, r5
 80172fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017300:	4601      	mov	r1, r0
 8017302:	3b30      	subs	r3, #48	@ 0x30
 8017304:	220a      	movs	r2, #10
 8017306:	4630      	mov	r0, r6
 8017308:	f7ff ff8c 	bl	8017224 <__multadd>
 801730c:	45a0      	cmp	r8, r4
 801730e:	d1f5      	bne.n	80172fc <__s2b+0x4c>
 8017310:	f1a5 0408 	sub.w	r4, r5, #8
 8017314:	444c      	add	r4, r9
 8017316:	1b2d      	subs	r5, r5, r4
 8017318:	1963      	adds	r3, r4, r5
 801731a:	42bb      	cmp	r3, r7
 801731c:	db04      	blt.n	8017328 <__s2b+0x78>
 801731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017322:	340a      	adds	r4, #10
 8017324:	2509      	movs	r5, #9
 8017326:	e7f6      	b.n	8017316 <__s2b+0x66>
 8017328:	f814 3b01 	ldrb.w	r3, [r4], #1
 801732c:	4601      	mov	r1, r0
 801732e:	3b30      	subs	r3, #48	@ 0x30
 8017330:	220a      	movs	r2, #10
 8017332:	4630      	mov	r0, r6
 8017334:	f7ff ff76 	bl	8017224 <__multadd>
 8017338:	e7ee      	b.n	8017318 <__s2b+0x68>
 801733a:	bf00      	nop
 801733c:	08018d2a 	.word	0x08018d2a
 8017340:	08018db2 	.word	0x08018db2

08017344 <__hi0bits>:
 8017344:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017348:	4603      	mov	r3, r0
 801734a:	bf36      	itet	cc
 801734c:	0403      	lslcc	r3, r0, #16
 801734e:	2000      	movcs	r0, #0
 8017350:	2010      	movcc	r0, #16
 8017352:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017356:	bf3c      	itt	cc
 8017358:	021b      	lslcc	r3, r3, #8
 801735a:	3008      	addcc	r0, #8
 801735c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017360:	bf3c      	itt	cc
 8017362:	011b      	lslcc	r3, r3, #4
 8017364:	3004      	addcc	r0, #4
 8017366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801736a:	bf3c      	itt	cc
 801736c:	009b      	lslcc	r3, r3, #2
 801736e:	3002      	addcc	r0, #2
 8017370:	2b00      	cmp	r3, #0
 8017372:	db05      	blt.n	8017380 <__hi0bits+0x3c>
 8017374:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017378:	f100 0001 	add.w	r0, r0, #1
 801737c:	bf08      	it	eq
 801737e:	2020      	moveq	r0, #32
 8017380:	4770      	bx	lr

08017382 <__lo0bits>:
 8017382:	6803      	ldr	r3, [r0, #0]
 8017384:	4602      	mov	r2, r0
 8017386:	f013 0007 	ands.w	r0, r3, #7
 801738a:	d00b      	beq.n	80173a4 <__lo0bits+0x22>
 801738c:	07d9      	lsls	r1, r3, #31
 801738e:	d421      	bmi.n	80173d4 <__lo0bits+0x52>
 8017390:	0798      	lsls	r0, r3, #30
 8017392:	bf49      	itett	mi
 8017394:	085b      	lsrmi	r3, r3, #1
 8017396:	089b      	lsrpl	r3, r3, #2
 8017398:	2001      	movmi	r0, #1
 801739a:	6013      	strmi	r3, [r2, #0]
 801739c:	bf5c      	itt	pl
 801739e:	6013      	strpl	r3, [r2, #0]
 80173a0:	2002      	movpl	r0, #2
 80173a2:	4770      	bx	lr
 80173a4:	b299      	uxth	r1, r3
 80173a6:	b909      	cbnz	r1, 80173ac <__lo0bits+0x2a>
 80173a8:	0c1b      	lsrs	r3, r3, #16
 80173aa:	2010      	movs	r0, #16
 80173ac:	b2d9      	uxtb	r1, r3
 80173ae:	b909      	cbnz	r1, 80173b4 <__lo0bits+0x32>
 80173b0:	3008      	adds	r0, #8
 80173b2:	0a1b      	lsrs	r3, r3, #8
 80173b4:	0719      	lsls	r1, r3, #28
 80173b6:	bf04      	itt	eq
 80173b8:	091b      	lsreq	r3, r3, #4
 80173ba:	3004      	addeq	r0, #4
 80173bc:	0799      	lsls	r1, r3, #30
 80173be:	bf04      	itt	eq
 80173c0:	089b      	lsreq	r3, r3, #2
 80173c2:	3002      	addeq	r0, #2
 80173c4:	07d9      	lsls	r1, r3, #31
 80173c6:	d403      	bmi.n	80173d0 <__lo0bits+0x4e>
 80173c8:	085b      	lsrs	r3, r3, #1
 80173ca:	f100 0001 	add.w	r0, r0, #1
 80173ce:	d003      	beq.n	80173d8 <__lo0bits+0x56>
 80173d0:	6013      	str	r3, [r2, #0]
 80173d2:	4770      	bx	lr
 80173d4:	2000      	movs	r0, #0
 80173d6:	4770      	bx	lr
 80173d8:	2020      	movs	r0, #32
 80173da:	4770      	bx	lr

080173dc <__i2b>:
 80173dc:	b510      	push	{r4, lr}
 80173de:	460c      	mov	r4, r1
 80173e0:	2101      	movs	r1, #1
 80173e2:	f7ff febd 	bl	8017160 <_Balloc>
 80173e6:	4602      	mov	r2, r0
 80173e8:	b928      	cbnz	r0, 80173f6 <__i2b+0x1a>
 80173ea:	4b05      	ldr	r3, [pc, #20]	@ (8017400 <__i2b+0x24>)
 80173ec:	4805      	ldr	r0, [pc, #20]	@ (8017404 <__i2b+0x28>)
 80173ee:	f240 1145 	movw	r1, #325	@ 0x145
 80173f2:	f000 fc25 	bl	8017c40 <__assert_func>
 80173f6:	2301      	movs	r3, #1
 80173f8:	6144      	str	r4, [r0, #20]
 80173fa:	6103      	str	r3, [r0, #16]
 80173fc:	bd10      	pop	{r4, pc}
 80173fe:	bf00      	nop
 8017400:	08018d2a 	.word	0x08018d2a
 8017404:	08018db2 	.word	0x08018db2

08017408 <__multiply>:
 8017408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801740c:	4617      	mov	r7, r2
 801740e:	690a      	ldr	r2, [r1, #16]
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	429a      	cmp	r2, r3
 8017414:	bfa8      	it	ge
 8017416:	463b      	movge	r3, r7
 8017418:	4689      	mov	r9, r1
 801741a:	bfa4      	itt	ge
 801741c:	460f      	movge	r7, r1
 801741e:	4699      	movge	r9, r3
 8017420:	693d      	ldr	r5, [r7, #16]
 8017422:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	6879      	ldr	r1, [r7, #4]
 801742a:	eb05 060a 	add.w	r6, r5, sl
 801742e:	42b3      	cmp	r3, r6
 8017430:	b085      	sub	sp, #20
 8017432:	bfb8      	it	lt
 8017434:	3101      	addlt	r1, #1
 8017436:	f7ff fe93 	bl	8017160 <_Balloc>
 801743a:	b930      	cbnz	r0, 801744a <__multiply+0x42>
 801743c:	4602      	mov	r2, r0
 801743e:	4b41      	ldr	r3, [pc, #260]	@ (8017544 <__multiply+0x13c>)
 8017440:	4841      	ldr	r0, [pc, #260]	@ (8017548 <__multiply+0x140>)
 8017442:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017446:	f000 fbfb 	bl	8017c40 <__assert_func>
 801744a:	f100 0414 	add.w	r4, r0, #20
 801744e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8017452:	4623      	mov	r3, r4
 8017454:	2200      	movs	r2, #0
 8017456:	4573      	cmp	r3, lr
 8017458:	d320      	bcc.n	801749c <__multiply+0x94>
 801745a:	f107 0814 	add.w	r8, r7, #20
 801745e:	f109 0114 	add.w	r1, r9, #20
 8017462:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8017466:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801746a:	9302      	str	r3, [sp, #8]
 801746c:	1beb      	subs	r3, r5, r7
 801746e:	3b15      	subs	r3, #21
 8017470:	f023 0303 	bic.w	r3, r3, #3
 8017474:	3304      	adds	r3, #4
 8017476:	3715      	adds	r7, #21
 8017478:	42bd      	cmp	r5, r7
 801747a:	bf38      	it	cc
 801747c:	2304      	movcc	r3, #4
 801747e:	9301      	str	r3, [sp, #4]
 8017480:	9b02      	ldr	r3, [sp, #8]
 8017482:	9103      	str	r1, [sp, #12]
 8017484:	428b      	cmp	r3, r1
 8017486:	d80c      	bhi.n	80174a2 <__multiply+0x9a>
 8017488:	2e00      	cmp	r6, #0
 801748a:	dd03      	ble.n	8017494 <__multiply+0x8c>
 801748c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017490:	2b00      	cmp	r3, #0
 8017492:	d055      	beq.n	8017540 <__multiply+0x138>
 8017494:	6106      	str	r6, [r0, #16]
 8017496:	b005      	add	sp, #20
 8017498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749c:	f843 2b04 	str.w	r2, [r3], #4
 80174a0:	e7d9      	b.n	8017456 <__multiply+0x4e>
 80174a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80174a6:	f1ba 0f00 	cmp.w	sl, #0
 80174aa:	d01f      	beq.n	80174ec <__multiply+0xe4>
 80174ac:	46c4      	mov	ip, r8
 80174ae:	46a1      	mov	r9, r4
 80174b0:	2700      	movs	r7, #0
 80174b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80174b6:	f8d9 3000 	ldr.w	r3, [r9]
 80174ba:	fa1f fb82 	uxth.w	fp, r2
 80174be:	b29b      	uxth	r3, r3
 80174c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80174c4:	443b      	add	r3, r7
 80174c6:	f8d9 7000 	ldr.w	r7, [r9]
 80174ca:	0c12      	lsrs	r2, r2, #16
 80174cc:	0c3f      	lsrs	r7, r7, #16
 80174ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80174d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174dc:	4565      	cmp	r5, ip
 80174de:	f849 3b04 	str.w	r3, [r9], #4
 80174e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80174e6:	d8e4      	bhi.n	80174b2 <__multiply+0xaa>
 80174e8:	9b01      	ldr	r3, [sp, #4]
 80174ea:	50e7      	str	r7, [r4, r3]
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80174f2:	3104      	adds	r1, #4
 80174f4:	f1b9 0f00 	cmp.w	r9, #0
 80174f8:	d020      	beq.n	801753c <__multiply+0x134>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	4647      	mov	r7, r8
 80174fe:	46a4      	mov	ip, r4
 8017500:	f04f 0a00 	mov.w	sl, #0
 8017504:	f8b7 b000 	ldrh.w	fp, [r7]
 8017508:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801750c:	fb09 220b 	mla	r2, r9, fp, r2
 8017510:	4452      	add	r2, sl
 8017512:	b29b      	uxth	r3, r3
 8017514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017518:	f84c 3b04 	str.w	r3, [ip], #4
 801751c:	f857 3b04 	ldr.w	r3, [r7], #4
 8017520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017524:	f8bc 3000 	ldrh.w	r3, [ip]
 8017528:	fb09 330a 	mla	r3, r9, sl, r3
 801752c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8017530:	42bd      	cmp	r5, r7
 8017532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017536:	d8e5      	bhi.n	8017504 <__multiply+0xfc>
 8017538:	9a01      	ldr	r2, [sp, #4]
 801753a:	50a3      	str	r3, [r4, r2]
 801753c:	3404      	adds	r4, #4
 801753e:	e79f      	b.n	8017480 <__multiply+0x78>
 8017540:	3e01      	subs	r6, #1
 8017542:	e7a1      	b.n	8017488 <__multiply+0x80>
 8017544:	08018d2a 	.word	0x08018d2a
 8017548:	08018db2 	.word	0x08018db2

0801754c <__pow5mult>:
 801754c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017550:	4615      	mov	r5, r2
 8017552:	f012 0203 	ands.w	r2, r2, #3
 8017556:	4607      	mov	r7, r0
 8017558:	460e      	mov	r6, r1
 801755a:	d007      	beq.n	801756c <__pow5mult+0x20>
 801755c:	4c25      	ldr	r4, [pc, #148]	@ (80175f4 <__pow5mult+0xa8>)
 801755e:	3a01      	subs	r2, #1
 8017560:	2300      	movs	r3, #0
 8017562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017566:	f7ff fe5d 	bl	8017224 <__multadd>
 801756a:	4606      	mov	r6, r0
 801756c:	10ad      	asrs	r5, r5, #2
 801756e:	d03d      	beq.n	80175ec <__pow5mult+0xa0>
 8017570:	69fc      	ldr	r4, [r7, #28]
 8017572:	b97c      	cbnz	r4, 8017594 <__pow5mult+0x48>
 8017574:	2010      	movs	r0, #16
 8017576:	f000 fb95 	bl	8017ca4 <malloc>
 801757a:	4602      	mov	r2, r0
 801757c:	61f8      	str	r0, [r7, #28]
 801757e:	b928      	cbnz	r0, 801758c <__pow5mult+0x40>
 8017580:	4b1d      	ldr	r3, [pc, #116]	@ (80175f8 <__pow5mult+0xac>)
 8017582:	481e      	ldr	r0, [pc, #120]	@ (80175fc <__pow5mult+0xb0>)
 8017584:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017588:	f000 fb5a 	bl	8017c40 <__assert_func>
 801758c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017590:	6004      	str	r4, [r0, #0]
 8017592:	60c4      	str	r4, [r0, #12]
 8017594:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801759c:	b94c      	cbnz	r4, 80175b2 <__pow5mult+0x66>
 801759e:	f240 2171 	movw	r1, #625	@ 0x271
 80175a2:	4638      	mov	r0, r7
 80175a4:	f7ff ff1a 	bl	80173dc <__i2b>
 80175a8:	2300      	movs	r3, #0
 80175aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80175ae:	4604      	mov	r4, r0
 80175b0:	6003      	str	r3, [r0, #0]
 80175b2:	f04f 0900 	mov.w	r9, #0
 80175b6:	07eb      	lsls	r3, r5, #31
 80175b8:	d50a      	bpl.n	80175d0 <__pow5mult+0x84>
 80175ba:	4631      	mov	r1, r6
 80175bc:	4622      	mov	r2, r4
 80175be:	4638      	mov	r0, r7
 80175c0:	f7ff ff22 	bl	8017408 <__multiply>
 80175c4:	4631      	mov	r1, r6
 80175c6:	4680      	mov	r8, r0
 80175c8:	4638      	mov	r0, r7
 80175ca:	f7ff fe09 	bl	80171e0 <_Bfree>
 80175ce:	4646      	mov	r6, r8
 80175d0:	106d      	asrs	r5, r5, #1
 80175d2:	d00b      	beq.n	80175ec <__pow5mult+0xa0>
 80175d4:	6820      	ldr	r0, [r4, #0]
 80175d6:	b938      	cbnz	r0, 80175e8 <__pow5mult+0x9c>
 80175d8:	4622      	mov	r2, r4
 80175da:	4621      	mov	r1, r4
 80175dc:	4638      	mov	r0, r7
 80175de:	f7ff ff13 	bl	8017408 <__multiply>
 80175e2:	6020      	str	r0, [r4, #0]
 80175e4:	f8c0 9000 	str.w	r9, [r0]
 80175e8:	4604      	mov	r4, r0
 80175ea:	e7e4      	b.n	80175b6 <__pow5mult+0x6a>
 80175ec:	4630      	mov	r0, r6
 80175ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175f2:	bf00      	nop
 80175f4:	08018fd4 	.word	0x08018fd4
 80175f8:	08018d9b 	.word	0x08018d9b
 80175fc:	08018db2 	.word	0x08018db2

08017600 <__lshift>:
 8017600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017604:	460c      	mov	r4, r1
 8017606:	6849      	ldr	r1, [r1, #4]
 8017608:	6923      	ldr	r3, [r4, #16]
 801760a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801760e:	68a3      	ldr	r3, [r4, #8]
 8017610:	4607      	mov	r7, r0
 8017612:	4691      	mov	r9, r2
 8017614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017618:	f108 0601 	add.w	r6, r8, #1
 801761c:	42b3      	cmp	r3, r6
 801761e:	db0b      	blt.n	8017638 <__lshift+0x38>
 8017620:	4638      	mov	r0, r7
 8017622:	f7ff fd9d 	bl	8017160 <_Balloc>
 8017626:	4605      	mov	r5, r0
 8017628:	b948      	cbnz	r0, 801763e <__lshift+0x3e>
 801762a:	4602      	mov	r2, r0
 801762c:	4b28      	ldr	r3, [pc, #160]	@ (80176d0 <__lshift+0xd0>)
 801762e:	4829      	ldr	r0, [pc, #164]	@ (80176d4 <__lshift+0xd4>)
 8017630:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017634:	f000 fb04 	bl	8017c40 <__assert_func>
 8017638:	3101      	adds	r1, #1
 801763a:	005b      	lsls	r3, r3, #1
 801763c:	e7ee      	b.n	801761c <__lshift+0x1c>
 801763e:	2300      	movs	r3, #0
 8017640:	f100 0114 	add.w	r1, r0, #20
 8017644:	f100 0210 	add.w	r2, r0, #16
 8017648:	4618      	mov	r0, r3
 801764a:	4553      	cmp	r3, sl
 801764c:	db33      	blt.n	80176b6 <__lshift+0xb6>
 801764e:	6920      	ldr	r0, [r4, #16]
 8017650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017654:	f104 0314 	add.w	r3, r4, #20
 8017658:	f019 091f 	ands.w	r9, r9, #31
 801765c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017664:	d02b      	beq.n	80176be <__lshift+0xbe>
 8017666:	f1c9 0e20 	rsb	lr, r9, #32
 801766a:	468a      	mov	sl, r1
 801766c:	2200      	movs	r2, #0
 801766e:	6818      	ldr	r0, [r3, #0]
 8017670:	fa00 f009 	lsl.w	r0, r0, r9
 8017674:	4310      	orrs	r0, r2
 8017676:	f84a 0b04 	str.w	r0, [sl], #4
 801767a:	f853 2b04 	ldr.w	r2, [r3], #4
 801767e:	459c      	cmp	ip, r3
 8017680:	fa22 f20e 	lsr.w	r2, r2, lr
 8017684:	d8f3      	bhi.n	801766e <__lshift+0x6e>
 8017686:	ebac 0304 	sub.w	r3, ip, r4
 801768a:	3b15      	subs	r3, #21
 801768c:	f023 0303 	bic.w	r3, r3, #3
 8017690:	3304      	adds	r3, #4
 8017692:	f104 0015 	add.w	r0, r4, #21
 8017696:	4560      	cmp	r0, ip
 8017698:	bf88      	it	hi
 801769a:	2304      	movhi	r3, #4
 801769c:	50ca      	str	r2, [r1, r3]
 801769e:	b10a      	cbz	r2, 80176a4 <__lshift+0xa4>
 80176a0:	f108 0602 	add.w	r6, r8, #2
 80176a4:	3e01      	subs	r6, #1
 80176a6:	4638      	mov	r0, r7
 80176a8:	612e      	str	r6, [r5, #16]
 80176aa:	4621      	mov	r1, r4
 80176ac:	f7ff fd98 	bl	80171e0 <_Bfree>
 80176b0:	4628      	mov	r0, r5
 80176b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80176ba:	3301      	adds	r3, #1
 80176bc:	e7c5      	b.n	801764a <__lshift+0x4a>
 80176be:	3904      	subs	r1, #4
 80176c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80176c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80176c8:	459c      	cmp	ip, r3
 80176ca:	d8f9      	bhi.n	80176c0 <__lshift+0xc0>
 80176cc:	e7ea      	b.n	80176a4 <__lshift+0xa4>
 80176ce:	bf00      	nop
 80176d0:	08018d2a 	.word	0x08018d2a
 80176d4:	08018db2 	.word	0x08018db2

080176d8 <__mcmp>:
 80176d8:	690a      	ldr	r2, [r1, #16]
 80176da:	4603      	mov	r3, r0
 80176dc:	6900      	ldr	r0, [r0, #16]
 80176de:	1a80      	subs	r0, r0, r2
 80176e0:	b530      	push	{r4, r5, lr}
 80176e2:	d10e      	bne.n	8017702 <__mcmp+0x2a>
 80176e4:	3314      	adds	r3, #20
 80176e6:	3114      	adds	r1, #20
 80176e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80176ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80176f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80176f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80176f8:	4295      	cmp	r5, r2
 80176fa:	d003      	beq.n	8017704 <__mcmp+0x2c>
 80176fc:	d205      	bcs.n	801770a <__mcmp+0x32>
 80176fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017702:	bd30      	pop	{r4, r5, pc}
 8017704:	42a3      	cmp	r3, r4
 8017706:	d3f3      	bcc.n	80176f0 <__mcmp+0x18>
 8017708:	e7fb      	b.n	8017702 <__mcmp+0x2a>
 801770a:	2001      	movs	r0, #1
 801770c:	e7f9      	b.n	8017702 <__mcmp+0x2a>
	...

08017710 <__mdiff>:
 8017710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	4689      	mov	r9, r1
 8017716:	4606      	mov	r6, r0
 8017718:	4611      	mov	r1, r2
 801771a:	4648      	mov	r0, r9
 801771c:	4614      	mov	r4, r2
 801771e:	f7ff ffdb 	bl	80176d8 <__mcmp>
 8017722:	1e05      	subs	r5, r0, #0
 8017724:	d112      	bne.n	801774c <__mdiff+0x3c>
 8017726:	4629      	mov	r1, r5
 8017728:	4630      	mov	r0, r6
 801772a:	f7ff fd19 	bl	8017160 <_Balloc>
 801772e:	4602      	mov	r2, r0
 8017730:	b928      	cbnz	r0, 801773e <__mdiff+0x2e>
 8017732:	4b3f      	ldr	r3, [pc, #252]	@ (8017830 <__mdiff+0x120>)
 8017734:	f240 2137 	movw	r1, #567	@ 0x237
 8017738:	483e      	ldr	r0, [pc, #248]	@ (8017834 <__mdiff+0x124>)
 801773a:	f000 fa81 	bl	8017c40 <__assert_func>
 801773e:	2301      	movs	r3, #1
 8017740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017744:	4610      	mov	r0, r2
 8017746:	b003      	add	sp, #12
 8017748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801774c:	bfbc      	itt	lt
 801774e:	464b      	movlt	r3, r9
 8017750:	46a1      	movlt	r9, r4
 8017752:	4630      	mov	r0, r6
 8017754:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017758:	bfba      	itte	lt
 801775a:	461c      	movlt	r4, r3
 801775c:	2501      	movlt	r5, #1
 801775e:	2500      	movge	r5, #0
 8017760:	f7ff fcfe 	bl	8017160 <_Balloc>
 8017764:	4602      	mov	r2, r0
 8017766:	b918      	cbnz	r0, 8017770 <__mdiff+0x60>
 8017768:	4b31      	ldr	r3, [pc, #196]	@ (8017830 <__mdiff+0x120>)
 801776a:	f240 2145 	movw	r1, #581	@ 0x245
 801776e:	e7e3      	b.n	8017738 <__mdiff+0x28>
 8017770:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017774:	6926      	ldr	r6, [r4, #16]
 8017776:	60c5      	str	r5, [r0, #12]
 8017778:	f109 0310 	add.w	r3, r9, #16
 801777c:	f109 0514 	add.w	r5, r9, #20
 8017780:	f104 0e14 	add.w	lr, r4, #20
 8017784:	f100 0b14 	add.w	fp, r0, #20
 8017788:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801778c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017790:	9301      	str	r3, [sp, #4]
 8017792:	46d9      	mov	r9, fp
 8017794:	f04f 0c00 	mov.w	ip, #0
 8017798:	9b01      	ldr	r3, [sp, #4]
 801779a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801779e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80177a2:	9301      	str	r3, [sp, #4]
 80177a4:	fa1f f38a 	uxth.w	r3, sl
 80177a8:	4619      	mov	r1, r3
 80177aa:	b283      	uxth	r3, r0
 80177ac:	1acb      	subs	r3, r1, r3
 80177ae:	0c00      	lsrs	r0, r0, #16
 80177b0:	4463      	add	r3, ip
 80177b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80177b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80177c0:	4576      	cmp	r6, lr
 80177c2:	f849 3b04 	str.w	r3, [r9], #4
 80177c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80177ca:	d8e5      	bhi.n	8017798 <__mdiff+0x88>
 80177cc:	1b33      	subs	r3, r6, r4
 80177ce:	3b15      	subs	r3, #21
 80177d0:	f023 0303 	bic.w	r3, r3, #3
 80177d4:	3415      	adds	r4, #21
 80177d6:	3304      	adds	r3, #4
 80177d8:	42a6      	cmp	r6, r4
 80177da:	bf38      	it	cc
 80177dc:	2304      	movcc	r3, #4
 80177de:	441d      	add	r5, r3
 80177e0:	445b      	add	r3, fp
 80177e2:	461e      	mov	r6, r3
 80177e4:	462c      	mov	r4, r5
 80177e6:	4544      	cmp	r4, r8
 80177e8:	d30e      	bcc.n	8017808 <__mdiff+0xf8>
 80177ea:	f108 0103 	add.w	r1, r8, #3
 80177ee:	1b49      	subs	r1, r1, r5
 80177f0:	f021 0103 	bic.w	r1, r1, #3
 80177f4:	3d03      	subs	r5, #3
 80177f6:	45a8      	cmp	r8, r5
 80177f8:	bf38      	it	cc
 80177fa:	2100      	movcc	r1, #0
 80177fc:	440b      	add	r3, r1
 80177fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017802:	b191      	cbz	r1, 801782a <__mdiff+0x11a>
 8017804:	6117      	str	r7, [r2, #16]
 8017806:	e79d      	b.n	8017744 <__mdiff+0x34>
 8017808:	f854 1b04 	ldr.w	r1, [r4], #4
 801780c:	46e6      	mov	lr, ip
 801780e:	0c08      	lsrs	r0, r1, #16
 8017810:	fa1c fc81 	uxtah	ip, ip, r1
 8017814:	4471      	add	r1, lr
 8017816:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801781a:	b289      	uxth	r1, r1
 801781c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017820:	f846 1b04 	str.w	r1, [r6], #4
 8017824:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017828:	e7dd      	b.n	80177e6 <__mdiff+0xd6>
 801782a:	3f01      	subs	r7, #1
 801782c:	e7e7      	b.n	80177fe <__mdiff+0xee>
 801782e:	bf00      	nop
 8017830:	08018d2a 	.word	0x08018d2a
 8017834:	08018db2 	.word	0x08018db2

08017838 <__ulp>:
 8017838:	b082      	sub	sp, #8
 801783a:	ed8d 0b00 	vstr	d0, [sp]
 801783e:	9a01      	ldr	r2, [sp, #4]
 8017840:	4b0f      	ldr	r3, [pc, #60]	@ (8017880 <__ulp+0x48>)
 8017842:	4013      	ands	r3, r2
 8017844:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017848:	2b00      	cmp	r3, #0
 801784a:	dc08      	bgt.n	801785e <__ulp+0x26>
 801784c:	425b      	negs	r3, r3
 801784e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017852:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017856:	da04      	bge.n	8017862 <__ulp+0x2a>
 8017858:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801785c:	4113      	asrs	r3, r2
 801785e:	2200      	movs	r2, #0
 8017860:	e008      	b.n	8017874 <__ulp+0x3c>
 8017862:	f1a2 0314 	sub.w	r3, r2, #20
 8017866:	2b1e      	cmp	r3, #30
 8017868:	bfda      	itte	le
 801786a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801786e:	40da      	lsrle	r2, r3
 8017870:	2201      	movgt	r2, #1
 8017872:	2300      	movs	r3, #0
 8017874:	4619      	mov	r1, r3
 8017876:	4610      	mov	r0, r2
 8017878:	ec41 0b10 	vmov	d0, r0, r1
 801787c:	b002      	add	sp, #8
 801787e:	4770      	bx	lr
 8017880:	7ff00000 	.word	0x7ff00000

08017884 <__b2d>:
 8017884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017888:	6906      	ldr	r6, [r0, #16]
 801788a:	f100 0814 	add.w	r8, r0, #20
 801788e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017892:	1f37      	subs	r7, r6, #4
 8017894:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017898:	4610      	mov	r0, r2
 801789a:	f7ff fd53 	bl	8017344 <__hi0bits>
 801789e:	f1c0 0320 	rsb	r3, r0, #32
 80178a2:	280a      	cmp	r0, #10
 80178a4:	600b      	str	r3, [r1, #0]
 80178a6:	491b      	ldr	r1, [pc, #108]	@ (8017914 <__b2d+0x90>)
 80178a8:	dc15      	bgt.n	80178d6 <__b2d+0x52>
 80178aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80178ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80178b2:	45b8      	cmp	r8, r7
 80178b4:	ea43 0501 	orr.w	r5, r3, r1
 80178b8:	bf34      	ite	cc
 80178ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80178be:	2300      	movcs	r3, #0
 80178c0:	3015      	adds	r0, #21
 80178c2:	fa02 f000 	lsl.w	r0, r2, r0
 80178c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80178ca:	4303      	orrs	r3, r0
 80178cc:	461c      	mov	r4, r3
 80178ce:	ec45 4b10 	vmov	d0, r4, r5
 80178d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178d6:	45b8      	cmp	r8, r7
 80178d8:	bf3a      	itte	cc
 80178da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80178de:	f1a6 0708 	subcc.w	r7, r6, #8
 80178e2:	2300      	movcs	r3, #0
 80178e4:	380b      	subs	r0, #11
 80178e6:	d012      	beq.n	801790e <__b2d+0x8a>
 80178e8:	f1c0 0120 	rsb	r1, r0, #32
 80178ec:	fa23 f401 	lsr.w	r4, r3, r1
 80178f0:	4082      	lsls	r2, r0
 80178f2:	4322      	orrs	r2, r4
 80178f4:	4547      	cmp	r7, r8
 80178f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80178fa:	bf8c      	ite	hi
 80178fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017900:	2200      	movls	r2, #0
 8017902:	4083      	lsls	r3, r0
 8017904:	40ca      	lsrs	r2, r1
 8017906:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801790a:	4313      	orrs	r3, r2
 801790c:	e7de      	b.n	80178cc <__b2d+0x48>
 801790e:	ea42 0501 	orr.w	r5, r2, r1
 8017912:	e7db      	b.n	80178cc <__b2d+0x48>
 8017914:	3ff00000 	.word	0x3ff00000

08017918 <__d2b>:
 8017918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801791c:	460f      	mov	r7, r1
 801791e:	2101      	movs	r1, #1
 8017920:	ec59 8b10 	vmov	r8, r9, d0
 8017924:	4616      	mov	r6, r2
 8017926:	f7ff fc1b 	bl	8017160 <_Balloc>
 801792a:	4604      	mov	r4, r0
 801792c:	b930      	cbnz	r0, 801793c <__d2b+0x24>
 801792e:	4602      	mov	r2, r0
 8017930:	4b23      	ldr	r3, [pc, #140]	@ (80179c0 <__d2b+0xa8>)
 8017932:	4824      	ldr	r0, [pc, #144]	@ (80179c4 <__d2b+0xac>)
 8017934:	f240 310f 	movw	r1, #783	@ 0x30f
 8017938:	f000 f982 	bl	8017c40 <__assert_func>
 801793c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017944:	b10d      	cbz	r5, 801794a <__d2b+0x32>
 8017946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801794a:	9301      	str	r3, [sp, #4]
 801794c:	f1b8 0300 	subs.w	r3, r8, #0
 8017950:	d023      	beq.n	801799a <__d2b+0x82>
 8017952:	4668      	mov	r0, sp
 8017954:	9300      	str	r3, [sp, #0]
 8017956:	f7ff fd14 	bl	8017382 <__lo0bits>
 801795a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801795e:	b1d0      	cbz	r0, 8017996 <__d2b+0x7e>
 8017960:	f1c0 0320 	rsb	r3, r0, #32
 8017964:	fa02 f303 	lsl.w	r3, r2, r3
 8017968:	430b      	orrs	r3, r1
 801796a:	40c2      	lsrs	r2, r0
 801796c:	6163      	str	r3, [r4, #20]
 801796e:	9201      	str	r2, [sp, #4]
 8017970:	9b01      	ldr	r3, [sp, #4]
 8017972:	61a3      	str	r3, [r4, #24]
 8017974:	2b00      	cmp	r3, #0
 8017976:	bf0c      	ite	eq
 8017978:	2201      	moveq	r2, #1
 801797a:	2202      	movne	r2, #2
 801797c:	6122      	str	r2, [r4, #16]
 801797e:	b1a5      	cbz	r5, 80179aa <__d2b+0x92>
 8017980:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017984:	4405      	add	r5, r0
 8017986:	603d      	str	r5, [r7, #0]
 8017988:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801798c:	6030      	str	r0, [r6, #0]
 801798e:	4620      	mov	r0, r4
 8017990:	b003      	add	sp, #12
 8017992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017996:	6161      	str	r1, [r4, #20]
 8017998:	e7ea      	b.n	8017970 <__d2b+0x58>
 801799a:	a801      	add	r0, sp, #4
 801799c:	f7ff fcf1 	bl	8017382 <__lo0bits>
 80179a0:	9b01      	ldr	r3, [sp, #4]
 80179a2:	6163      	str	r3, [r4, #20]
 80179a4:	3020      	adds	r0, #32
 80179a6:	2201      	movs	r2, #1
 80179a8:	e7e8      	b.n	801797c <__d2b+0x64>
 80179aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80179ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80179b2:	6038      	str	r0, [r7, #0]
 80179b4:	6918      	ldr	r0, [r3, #16]
 80179b6:	f7ff fcc5 	bl	8017344 <__hi0bits>
 80179ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80179be:	e7e5      	b.n	801798c <__d2b+0x74>
 80179c0:	08018d2a 	.word	0x08018d2a
 80179c4:	08018db2 	.word	0x08018db2

080179c8 <__ratio>:
 80179c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179cc:	4688      	mov	r8, r1
 80179ce:	4669      	mov	r1, sp
 80179d0:	4681      	mov	r9, r0
 80179d2:	f7ff ff57 	bl	8017884 <__b2d>
 80179d6:	a901      	add	r1, sp, #4
 80179d8:	4640      	mov	r0, r8
 80179da:	ec55 4b10 	vmov	r4, r5, d0
 80179de:	f7ff ff51 	bl	8017884 <__b2d>
 80179e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80179e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80179ea:	1ad2      	subs	r2, r2, r3
 80179ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80179f0:	1a5b      	subs	r3, r3, r1
 80179f2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80179f6:	ec57 6b10 	vmov	r6, r7, d0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	bfd6      	itet	le
 80179fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017a02:	462a      	movgt	r2, r5
 8017a04:	463a      	movle	r2, r7
 8017a06:	46ab      	mov	fp, r5
 8017a08:	46a2      	mov	sl, r4
 8017a0a:	bfce      	itee	gt
 8017a0c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017a10:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017a14:	ee00 3a90 	vmovle	s1, r3
 8017a18:	ec4b ab17 	vmov	d7, sl, fp
 8017a1c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017a20:	b003      	add	sp, #12
 8017a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a26 <__copybits>:
 8017a26:	3901      	subs	r1, #1
 8017a28:	b570      	push	{r4, r5, r6, lr}
 8017a2a:	1149      	asrs	r1, r1, #5
 8017a2c:	6914      	ldr	r4, [r2, #16]
 8017a2e:	3101      	adds	r1, #1
 8017a30:	f102 0314 	add.w	r3, r2, #20
 8017a34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017a38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017a3c:	1f05      	subs	r5, r0, #4
 8017a3e:	42a3      	cmp	r3, r4
 8017a40:	d30c      	bcc.n	8017a5c <__copybits+0x36>
 8017a42:	1aa3      	subs	r3, r4, r2
 8017a44:	3b11      	subs	r3, #17
 8017a46:	f023 0303 	bic.w	r3, r3, #3
 8017a4a:	3211      	adds	r2, #17
 8017a4c:	42a2      	cmp	r2, r4
 8017a4e:	bf88      	it	hi
 8017a50:	2300      	movhi	r3, #0
 8017a52:	4418      	add	r0, r3
 8017a54:	2300      	movs	r3, #0
 8017a56:	4288      	cmp	r0, r1
 8017a58:	d305      	bcc.n	8017a66 <__copybits+0x40>
 8017a5a:	bd70      	pop	{r4, r5, r6, pc}
 8017a5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017a60:	f845 6f04 	str.w	r6, [r5, #4]!
 8017a64:	e7eb      	b.n	8017a3e <__copybits+0x18>
 8017a66:	f840 3b04 	str.w	r3, [r0], #4
 8017a6a:	e7f4      	b.n	8017a56 <__copybits+0x30>

08017a6c <__any_on>:
 8017a6c:	f100 0214 	add.w	r2, r0, #20
 8017a70:	6900      	ldr	r0, [r0, #16]
 8017a72:	114b      	asrs	r3, r1, #5
 8017a74:	4298      	cmp	r0, r3
 8017a76:	b510      	push	{r4, lr}
 8017a78:	db11      	blt.n	8017a9e <__any_on+0x32>
 8017a7a:	dd0a      	ble.n	8017a92 <__any_on+0x26>
 8017a7c:	f011 011f 	ands.w	r1, r1, #31
 8017a80:	d007      	beq.n	8017a92 <__any_on+0x26>
 8017a82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017a86:	fa24 f001 	lsr.w	r0, r4, r1
 8017a8a:	fa00 f101 	lsl.w	r1, r0, r1
 8017a8e:	428c      	cmp	r4, r1
 8017a90:	d10b      	bne.n	8017aaa <__any_on+0x3e>
 8017a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d803      	bhi.n	8017aa2 <__any_on+0x36>
 8017a9a:	2000      	movs	r0, #0
 8017a9c:	bd10      	pop	{r4, pc}
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	e7f7      	b.n	8017a92 <__any_on+0x26>
 8017aa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017aa6:	2900      	cmp	r1, #0
 8017aa8:	d0f5      	beq.n	8017a96 <__any_on+0x2a>
 8017aaa:	2001      	movs	r0, #1
 8017aac:	e7f6      	b.n	8017a9c <__any_on+0x30>

08017aae <__ascii_wctomb>:
 8017aae:	4603      	mov	r3, r0
 8017ab0:	4608      	mov	r0, r1
 8017ab2:	b141      	cbz	r1, 8017ac6 <__ascii_wctomb+0x18>
 8017ab4:	2aff      	cmp	r2, #255	@ 0xff
 8017ab6:	d904      	bls.n	8017ac2 <__ascii_wctomb+0x14>
 8017ab8:	228a      	movs	r2, #138	@ 0x8a
 8017aba:	601a      	str	r2, [r3, #0]
 8017abc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ac0:	4770      	bx	lr
 8017ac2:	700a      	strb	r2, [r1, #0]
 8017ac4:	2001      	movs	r0, #1
 8017ac6:	4770      	bx	lr

08017ac8 <__sflush_r>:
 8017ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad0:	0716      	lsls	r6, r2, #28
 8017ad2:	4605      	mov	r5, r0
 8017ad4:	460c      	mov	r4, r1
 8017ad6:	d454      	bmi.n	8017b82 <__sflush_r+0xba>
 8017ad8:	684b      	ldr	r3, [r1, #4]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	dc02      	bgt.n	8017ae4 <__sflush_r+0x1c>
 8017ade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	dd48      	ble.n	8017b76 <__sflush_r+0xae>
 8017ae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ae6:	2e00      	cmp	r6, #0
 8017ae8:	d045      	beq.n	8017b76 <__sflush_r+0xae>
 8017aea:	2300      	movs	r3, #0
 8017aec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017af0:	682f      	ldr	r7, [r5, #0]
 8017af2:	6a21      	ldr	r1, [r4, #32]
 8017af4:	602b      	str	r3, [r5, #0]
 8017af6:	d030      	beq.n	8017b5a <__sflush_r+0x92>
 8017af8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017afa:	89a3      	ldrh	r3, [r4, #12]
 8017afc:	0759      	lsls	r1, r3, #29
 8017afe:	d505      	bpl.n	8017b0c <__sflush_r+0x44>
 8017b00:	6863      	ldr	r3, [r4, #4]
 8017b02:	1ad2      	subs	r2, r2, r3
 8017b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b06:	b10b      	cbz	r3, 8017b0c <__sflush_r+0x44>
 8017b08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b0a:	1ad2      	subs	r2, r2, r3
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b10:	6a21      	ldr	r1, [r4, #32]
 8017b12:	4628      	mov	r0, r5
 8017b14:	47b0      	blx	r6
 8017b16:	1c43      	adds	r3, r0, #1
 8017b18:	89a3      	ldrh	r3, [r4, #12]
 8017b1a:	d106      	bne.n	8017b2a <__sflush_r+0x62>
 8017b1c:	6829      	ldr	r1, [r5, #0]
 8017b1e:	291d      	cmp	r1, #29
 8017b20:	d82b      	bhi.n	8017b7a <__sflush_r+0xb2>
 8017b22:	4a2a      	ldr	r2, [pc, #168]	@ (8017bcc <__sflush_r+0x104>)
 8017b24:	40ca      	lsrs	r2, r1
 8017b26:	07d6      	lsls	r6, r2, #31
 8017b28:	d527      	bpl.n	8017b7a <__sflush_r+0xb2>
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	6062      	str	r2, [r4, #4]
 8017b2e:	04d9      	lsls	r1, r3, #19
 8017b30:	6922      	ldr	r2, [r4, #16]
 8017b32:	6022      	str	r2, [r4, #0]
 8017b34:	d504      	bpl.n	8017b40 <__sflush_r+0x78>
 8017b36:	1c42      	adds	r2, r0, #1
 8017b38:	d101      	bne.n	8017b3e <__sflush_r+0x76>
 8017b3a:	682b      	ldr	r3, [r5, #0]
 8017b3c:	b903      	cbnz	r3, 8017b40 <__sflush_r+0x78>
 8017b3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b42:	602f      	str	r7, [r5, #0]
 8017b44:	b1b9      	cbz	r1, 8017b76 <__sflush_r+0xae>
 8017b46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b4a:	4299      	cmp	r1, r3
 8017b4c:	d002      	beq.n	8017b54 <__sflush_r+0x8c>
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f7fe fec2 	bl	80168d8 <_free_r>
 8017b54:	2300      	movs	r3, #0
 8017b56:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b58:	e00d      	b.n	8017b76 <__sflush_r+0xae>
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	4628      	mov	r0, r5
 8017b5e:	47b0      	blx	r6
 8017b60:	4602      	mov	r2, r0
 8017b62:	1c50      	adds	r0, r2, #1
 8017b64:	d1c9      	bne.n	8017afa <__sflush_r+0x32>
 8017b66:	682b      	ldr	r3, [r5, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d0c6      	beq.n	8017afa <__sflush_r+0x32>
 8017b6c:	2b1d      	cmp	r3, #29
 8017b6e:	d001      	beq.n	8017b74 <__sflush_r+0xac>
 8017b70:	2b16      	cmp	r3, #22
 8017b72:	d11e      	bne.n	8017bb2 <__sflush_r+0xea>
 8017b74:	602f      	str	r7, [r5, #0]
 8017b76:	2000      	movs	r0, #0
 8017b78:	e022      	b.n	8017bc0 <__sflush_r+0xf8>
 8017b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b7e:	b21b      	sxth	r3, r3
 8017b80:	e01b      	b.n	8017bba <__sflush_r+0xf2>
 8017b82:	690f      	ldr	r7, [r1, #16]
 8017b84:	2f00      	cmp	r7, #0
 8017b86:	d0f6      	beq.n	8017b76 <__sflush_r+0xae>
 8017b88:	0793      	lsls	r3, r2, #30
 8017b8a:	680e      	ldr	r6, [r1, #0]
 8017b8c:	bf08      	it	eq
 8017b8e:	694b      	ldreq	r3, [r1, #20]
 8017b90:	600f      	str	r7, [r1, #0]
 8017b92:	bf18      	it	ne
 8017b94:	2300      	movne	r3, #0
 8017b96:	eba6 0807 	sub.w	r8, r6, r7
 8017b9a:	608b      	str	r3, [r1, #8]
 8017b9c:	f1b8 0f00 	cmp.w	r8, #0
 8017ba0:	dde9      	ble.n	8017b76 <__sflush_r+0xae>
 8017ba2:	6a21      	ldr	r1, [r4, #32]
 8017ba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017ba6:	4643      	mov	r3, r8
 8017ba8:	463a      	mov	r2, r7
 8017baa:	4628      	mov	r0, r5
 8017bac:	47b0      	blx	r6
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	dc08      	bgt.n	8017bc4 <__sflush_r+0xfc>
 8017bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bba:	81a3      	strh	r3, [r4, #12]
 8017bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bc4:	4407      	add	r7, r0
 8017bc6:	eba8 0800 	sub.w	r8, r8, r0
 8017bca:	e7e7      	b.n	8017b9c <__sflush_r+0xd4>
 8017bcc:	20400001 	.word	0x20400001

08017bd0 <_fflush_r>:
 8017bd0:	b538      	push	{r3, r4, r5, lr}
 8017bd2:	690b      	ldr	r3, [r1, #16]
 8017bd4:	4605      	mov	r5, r0
 8017bd6:	460c      	mov	r4, r1
 8017bd8:	b913      	cbnz	r3, 8017be0 <_fflush_r+0x10>
 8017bda:	2500      	movs	r5, #0
 8017bdc:	4628      	mov	r0, r5
 8017bde:	bd38      	pop	{r3, r4, r5, pc}
 8017be0:	b118      	cbz	r0, 8017bea <_fflush_r+0x1a>
 8017be2:	6a03      	ldr	r3, [r0, #32]
 8017be4:	b90b      	cbnz	r3, 8017bea <_fflush_r+0x1a>
 8017be6:	f7fe fd4d 	bl	8016684 <__sinit>
 8017bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d0f3      	beq.n	8017bda <_fflush_r+0xa>
 8017bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017bf4:	07d0      	lsls	r0, r2, #31
 8017bf6:	d404      	bmi.n	8017c02 <_fflush_r+0x32>
 8017bf8:	0599      	lsls	r1, r3, #22
 8017bfa:	d402      	bmi.n	8017c02 <_fflush_r+0x32>
 8017bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017bfe:	f7fe fe52 	bl	80168a6 <__retarget_lock_acquire_recursive>
 8017c02:	4628      	mov	r0, r5
 8017c04:	4621      	mov	r1, r4
 8017c06:	f7ff ff5f 	bl	8017ac8 <__sflush_r>
 8017c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c0c:	07da      	lsls	r2, r3, #31
 8017c0e:	4605      	mov	r5, r0
 8017c10:	d4e4      	bmi.n	8017bdc <_fflush_r+0xc>
 8017c12:	89a3      	ldrh	r3, [r4, #12]
 8017c14:	059b      	lsls	r3, r3, #22
 8017c16:	d4e1      	bmi.n	8017bdc <_fflush_r+0xc>
 8017c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c1a:	f7fe fe45 	bl	80168a8 <__retarget_lock_release_recursive>
 8017c1e:	e7dd      	b.n	8017bdc <_fflush_r+0xc>

08017c20 <_sbrk_r>:
 8017c20:	b538      	push	{r3, r4, r5, lr}
 8017c22:	4d06      	ldr	r5, [pc, #24]	@ (8017c3c <_sbrk_r+0x1c>)
 8017c24:	2300      	movs	r3, #0
 8017c26:	4604      	mov	r4, r0
 8017c28:	4608      	mov	r0, r1
 8017c2a:	602b      	str	r3, [r5, #0]
 8017c2c:	f7ec fd58 	bl	80046e0 <_sbrk>
 8017c30:	1c43      	adds	r3, r0, #1
 8017c32:	d102      	bne.n	8017c3a <_sbrk_r+0x1a>
 8017c34:	682b      	ldr	r3, [r5, #0]
 8017c36:	b103      	cbz	r3, 8017c3a <_sbrk_r+0x1a>
 8017c38:	6023      	str	r3, [r4, #0]
 8017c3a:	bd38      	pop	{r3, r4, r5, pc}
 8017c3c:	2400579c 	.word	0x2400579c

08017c40 <__assert_func>:
 8017c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c42:	4614      	mov	r4, r2
 8017c44:	461a      	mov	r2, r3
 8017c46:	4b09      	ldr	r3, [pc, #36]	@ (8017c6c <__assert_func+0x2c>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4605      	mov	r5, r0
 8017c4c:	68d8      	ldr	r0, [r3, #12]
 8017c4e:	b14c      	cbz	r4, 8017c64 <__assert_func+0x24>
 8017c50:	4b07      	ldr	r3, [pc, #28]	@ (8017c70 <__assert_func+0x30>)
 8017c52:	9100      	str	r1, [sp, #0]
 8017c54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c58:	4906      	ldr	r1, [pc, #24]	@ (8017c74 <__assert_func+0x34>)
 8017c5a:	462b      	mov	r3, r5
 8017c5c:	f000 f82a 	bl	8017cb4 <fiprintf>
 8017c60:	f000 f83a 	bl	8017cd8 <abort>
 8017c64:	4b04      	ldr	r3, [pc, #16]	@ (8017c78 <__assert_func+0x38>)
 8017c66:	461c      	mov	r4, r3
 8017c68:	e7f3      	b.n	8017c52 <__assert_func+0x12>
 8017c6a:	bf00      	nop
 8017c6c:	24000260 	.word	0x24000260
 8017c70:	08018e0b 	.word	0x08018e0b
 8017c74:	08018e18 	.word	0x08018e18
 8017c78:	08018e46 	.word	0x08018e46

08017c7c <_calloc_r>:
 8017c7c:	b570      	push	{r4, r5, r6, lr}
 8017c7e:	fba1 5402 	umull	r5, r4, r1, r2
 8017c82:	b934      	cbnz	r4, 8017c92 <_calloc_r+0x16>
 8017c84:	4629      	mov	r1, r5
 8017c86:	f7ff f9cd 	bl	8017024 <_malloc_r>
 8017c8a:	4606      	mov	r6, r0
 8017c8c:	b928      	cbnz	r0, 8017c9a <_calloc_r+0x1e>
 8017c8e:	4630      	mov	r0, r6
 8017c90:	bd70      	pop	{r4, r5, r6, pc}
 8017c92:	220c      	movs	r2, #12
 8017c94:	6002      	str	r2, [r0, #0]
 8017c96:	2600      	movs	r6, #0
 8017c98:	e7f9      	b.n	8017c8e <_calloc_r+0x12>
 8017c9a:	462a      	mov	r2, r5
 8017c9c:	4621      	mov	r1, r4
 8017c9e:	f7fe fd6a 	bl	8016776 <memset>
 8017ca2:	e7f4      	b.n	8017c8e <_calloc_r+0x12>

08017ca4 <malloc>:
 8017ca4:	4b02      	ldr	r3, [pc, #8]	@ (8017cb0 <malloc+0xc>)
 8017ca6:	4601      	mov	r1, r0
 8017ca8:	6818      	ldr	r0, [r3, #0]
 8017caa:	f7ff b9bb 	b.w	8017024 <_malloc_r>
 8017cae:	bf00      	nop
 8017cb0:	24000260 	.word	0x24000260

08017cb4 <fiprintf>:
 8017cb4:	b40e      	push	{r1, r2, r3}
 8017cb6:	b503      	push	{r0, r1, lr}
 8017cb8:	4601      	mov	r1, r0
 8017cba:	ab03      	add	r3, sp, #12
 8017cbc:	4805      	ldr	r0, [pc, #20]	@ (8017cd4 <fiprintf+0x20>)
 8017cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cc2:	6800      	ldr	r0, [r0, #0]
 8017cc4:	9301      	str	r3, [sp, #4]
 8017cc6:	f000 f837 	bl	8017d38 <_vfiprintf_r>
 8017cca:	b002      	add	sp, #8
 8017ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cd0:	b003      	add	sp, #12
 8017cd2:	4770      	bx	lr
 8017cd4:	24000260 	.word	0x24000260

08017cd8 <abort>:
 8017cd8:	b508      	push	{r3, lr}
 8017cda:	2006      	movs	r0, #6
 8017cdc:	f000 fb8c 	bl	80183f8 <raise>
 8017ce0:	2001      	movs	r0, #1
 8017ce2:	f7ec fc85 	bl	80045f0 <_exit>

08017ce6 <__sfputc_r>:
 8017ce6:	6893      	ldr	r3, [r2, #8]
 8017ce8:	3b01      	subs	r3, #1
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	b410      	push	{r4}
 8017cee:	6093      	str	r3, [r2, #8]
 8017cf0:	da08      	bge.n	8017d04 <__sfputc_r+0x1e>
 8017cf2:	6994      	ldr	r4, [r2, #24]
 8017cf4:	42a3      	cmp	r3, r4
 8017cf6:	db01      	blt.n	8017cfc <__sfputc_r+0x16>
 8017cf8:	290a      	cmp	r1, #10
 8017cfa:	d103      	bne.n	8017d04 <__sfputc_r+0x1e>
 8017cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d00:	f000 babe 	b.w	8018280 <__swbuf_r>
 8017d04:	6813      	ldr	r3, [r2, #0]
 8017d06:	1c58      	adds	r0, r3, #1
 8017d08:	6010      	str	r0, [r2, #0]
 8017d0a:	7019      	strb	r1, [r3, #0]
 8017d0c:	4608      	mov	r0, r1
 8017d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d12:	4770      	bx	lr

08017d14 <__sfputs_r>:
 8017d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d16:	4606      	mov	r6, r0
 8017d18:	460f      	mov	r7, r1
 8017d1a:	4614      	mov	r4, r2
 8017d1c:	18d5      	adds	r5, r2, r3
 8017d1e:	42ac      	cmp	r4, r5
 8017d20:	d101      	bne.n	8017d26 <__sfputs_r+0x12>
 8017d22:	2000      	movs	r0, #0
 8017d24:	e007      	b.n	8017d36 <__sfputs_r+0x22>
 8017d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d2a:	463a      	mov	r2, r7
 8017d2c:	4630      	mov	r0, r6
 8017d2e:	f7ff ffda 	bl	8017ce6 <__sfputc_r>
 8017d32:	1c43      	adds	r3, r0, #1
 8017d34:	d1f3      	bne.n	8017d1e <__sfputs_r+0xa>
 8017d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017d38 <_vfiprintf_r>:
 8017d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3c:	460d      	mov	r5, r1
 8017d3e:	b09d      	sub	sp, #116	@ 0x74
 8017d40:	4614      	mov	r4, r2
 8017d42:	4698      	mov	r8, r3
 8017d44:	4606      	mov	r6, r0
 8017d46:	b118      	cbz	r0, 8017d50 <_vfiprintf_r+0x18>
 8017d48:	6a03      	ldr	r3, [r0, #32]
 8017d4a:	b90b      	cbnz	r3, 8017d50 <_vfiprintf_r+0x18>
 8017d4c:	f7fe fc9a 	bl	8016684 <__sinit>
 8017d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d52:	07d9      	lsls	r1, r3, #31
 8017d54:	d405      	bmi.n	8017d62 <_vfiprintf_r+0x2a>
 8017d56:	89ab      	ldrh	r3, [r5, #12]
 8017d58:	059a      	lsls	r2, r3, #22
 8017d5a:	d402      	bmi.n	8017d62 <_vfiprintf_r+0x2a>
 8017d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d5e:	f7fe fda2 	bl	80168a6 <__retarget_lock_acquire_recursive>
 8017d62:	89ab      	ldrh	r3, [r5, #12]
 8017d64:	071b      	lsls	r3, r3, #28
 8017d66:	d501      	bpl.n	8017d6c <_vfiprintf_r+0x34>
 8017d68:	692b      	ldr	r3, [r5, #16]
 8017d6a:	b99b      	cbnz	r3, 8017d94 <_vfiprintf_r+0x5c>
 8017d6c:	4629      	mov	r1, r5
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f000 fac4 	bl	80182fc <__swsetup_r>
 8017d74:	b170      	cbz	r0, 8017d94 <_vfiprintf_r+0x5c>
 8017d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d78:	07dc      	lsls	r4, r3, #31
 8017d7a:	d504      	bpl.n	8017d86 <_vfiprintf_r+0x4e>
 8017d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d80:	b01d      	add	sp, #116	@ 0x74
 8017d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d86:	89ab      	ldrh	r3, [r5, #12]
 8017d88:	0598      	lsls	r0, r3, #22
 8017d8a:	d4f7      	bmi.n	8017d7c <_vfiprintf_r+0x44>
 8017d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d8e:	f7fe fd8b 	bl	80168a8 <__retarget_lock_release_recursive>
 8017d92:	e7f3      	b.n	8017d7c <_vfiprintf_r+0x44>
 8017d94:	2300      	movs	r3, #0
 8017d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d98:	2320      	movs	r3, #32
 8017d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017da2:	2330      	movs	r3, #48	@ 0x30
 8017da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017f54 <_vfiprintf_r+0x21c>
 8017da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017dac:	f04f 0901 	mov.w	r9, #1
 8017db0:	4623      	mov	r3, r4
 8017db2:	469a      	mov	sl, r3
 8017db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017db8:	b10a      	cbz	r2, 8017dbe <_vfiprintf_r+0x86>
 8017dba:	2a25      	cmp	r2, #37	@ 0x25
 8017dbc:	d1f9      	bne.n	8017db2 <_vfiprintf_r+0x7a>
 8017dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8017dc2:	d00b      	beq.n	8017ddc <_vfiprintf_r+0xa4>
 8017dc4:	465b      	mov	r3, fp
 8017dc6:	4622      	mov	r2, r4
 8017dc8:	4629      	mov	r1, r5
 8017dca:	4630      	mov	r0, r6
 8017dcc:	f7ff ffa2 	bl	8017d14 <__sfputs_r>
 8017dd0:	3001      	adds	r0, #1
 8017dd2:	f000 80a7 	beq.w	8017f24 <_vfiprintf_r+0x1ec>
 8017dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017dd8:	445a      	add	r2, fp
 8017dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	f000 809f 	beq.w	8017f24 <_vfiprintf_r+0x1ec>
 8017de6:	2300      	movs	r3, #0
 8017de8:	f04f 32ff 	mov.w	r2, #4294967295
 8017dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017df0:	f10a 0a01 	add.w	sl, sl, #1
 8017df4:	9304      	str	r3, [sp, #16]
 8017df6:	9307      	str	r3, [sp, #28]
 8017df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017dfe:	4654      	mov	r4, sl
 8017e00:	2205      	movs	r2, #5
 8017e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e06:	4853      	ldr	r0, [pc, #332]	@ (8017f54 <_vfiprintf_r+0x21c>)
 8017e08:	f7e8 fa82 	bl	8000310 <memchr>
 8017e0c:	9a04      	ldr	r2, [sp, #16]
 8017e0e:	b9d8      	cbnz	r0, 8017e48 <_vfiprintf_r+0x110>
 8017e10:	06d1      	lsls	r1, r2, #27
 8017e12:	bf44      	itt	mi
 8017e14:	2320      	movmi	r3, #32
 8017e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e1a:	0713      	lsls	r3, r2, #28
 8017e1c:	bf44      	itt	mi
 8017e1e:	232b      	movmi	r3, #43	@ 0x2b
 8017e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e24:	f89a 3000 	ldrb.w	r3, [sl]
 8017e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e2a:	d015      	beq.n	8017e58 <_vfiprintf_r+0x120>
 8017e2c:	9a07      	ldr	r2, [sp, #28]
 8017e2e:	4654      	mov	r4, sl
 8017e30:	2000      	movs	r0, #0
 8017e32:	f04f 0c0a 	mov.w	ip, #10
 8017e36:	4621      	mov	r1, r4
 8017e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e3c:	3b30      	subs	r3, #48	@ 0x30
 8017e3e:	2b09      	cmp	r3, #9
 8017e40:	d94b      	bls.n	8017eda <_vfiprintf_r+0x1a2>
 8017e42:	b1b0      	cbz	r0, 8017e72 <_vfiprintf_r+0x13a>
 8017e44:	9207      	str	r2, [sp, #28]
 8017e46:	e014      	b.n	8017e72 <_vfiprintf_r+0x13a>
 8017e48:	eba0 0308 	sub.w	r3, r0, r8
 8017e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8017e50:	4313      	orrs	r3, r2
 8017e52:	9304      	str	r3, [sp, #16]
 8017e54:	46a2      	mov	sl, r4
 8017e56:	e7d2      	b.n	8017dfe <_vfiprintf_r+0xc6>
 8017e58:	9b03      	ldr	r3, [sp, #12]
 8017e5a:	1d19      	adds	r1, r3, #4
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	9103      	str	r1, [sp, #12]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	bfbb      	ittet	lt
 8017e64:	425b      	neglt	r3, r3
 8017e66:	f042 0202 	orrlt.w	r2, r2, #2
 8017e6a:	9307      	strge	r3, [sp, #28]
 8017e6c:	9307      	strlt	r3, [sp, #28]
 8017e6e:	bfb8      	it	lt
 8017e70:	9204      	strlt	r2, [sp, #16]
 8017e72:	7823      	ldrb	r3, [r4, #0]
 8017e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e76:	d10a      	bne.n	8017e8e <_vfiprintf_r+0x156>
 8017e78:	7863      	ldrb	r3, [r4, #1]
 8017e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e7c:	d132      	bne.n	8017ee4 <_vfiprintf_r+0x1ac>
 8017e7e:	9b03      	ldr	r3, [sp, #12]
 8017e80:	1d1a      	adds	r2, r3, #4
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	9203      	str	r2, [sp, #12]
 8017e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e8a:	3402      	adds	r4, #2
 8017e8c:	9305      	str	r3, [sp, #20]
 8017e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017f64 <_vfiprintf_r+0x22c>
 8017e92:	7821      	ldrb	r1, [r4, #0]
 8017e94:	2203      	movs	r2, #3
 8017e96:	4650      	mov	r0, sl
 8017e98:	f7e8 fa3a 	bl	8000310 <memchr>
 8017e9c:	b138      	cbz	r0, 8017eae <_vfiprintf_r+0x176>
 8017e9e:	9b04      	ldr	r3, [sp, #16]
 8017ea0:	eba0 000a 	sub.w	r0, r0, sl
 8017ea4:	2240      	movs	r2, #64	@ 0x40
 8017ea6:	4082      	lsls	r2, r0
 8017ea8:	4313      	orrs	r3, r2
 8017eaa:	3401      	adds	r4, #1
 8017eac:	9304      	str	r3, [sp, #16]
 8017eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017eb2:	4829      	ldr	r0, [pc, #164]	@ (8017f58 <_vfiprintf_r+0x220>)
 8017eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017eb8:	2206      	movs	r2, #6
 8017eba:	f7e8 fa29 	bl	8000310 <memchr>
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d03f      	beq.n	8017f42 <_vfiprintf_r+0x20a>
 8017ec2:	4b26      	ldr	r3, [pc, #152]	@ (8017f5c <_vfiprintf_r+0x224>)
 8017ec4:	bb1b      	cbnz	r3, 8017f0e <_vfiprintf_r+0x1d6>
 8017ec6:	9b03      	ldr	r3, [sp, #12]
 8017ec8:	3307      	adds	r3, #7
 8017eca:	f023 0307 	bic.w	r3, r3, #7
 8017ece:	3308      	adds	r3, #8
 8017ed0:	9303      	str	r3, [sp, #12]
 8017ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ed4:	443b      	add	r3, r7
 8017ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ed8:	e76a      	b.n	8017db0 <_vfiprintf_r+0x78>
 8017eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ede:	460c      	mov	r4, r1
 8017ee0:	2001      	movs	r0, #1
 8017ee2:	e7a8      	b.n	8017e36 <_vfiprintf_r+0xfe>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	3401      	adds	r4, #1
 8017ee8:	9305      	str	r3, [sp, #20]
 8017eea:	4619      	mov	r1, r3
 8017eec:	f04f 0c0a 	mov.w	ip, #10
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ef6:	3a30      	subs	r2, #48	@ 0x30
 8017ef8:	2a09      	cmp	r2, #9
 8017efa:	d903      	bls.n	8017f04 <_vfiprintf_r+0x1cc>
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d0c6      	beq.n	8017e8e <_vfiprintf_r+0x156>
 8017f00:	9105      	str	r1, [sp, #20]
 8017f02:	e7c4      	b.n	8017e8e <_vfiprintf_r+0x156>
 8017f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f08:	4604      	mov	r4, r0
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	e7f0      	b.n	8017ef0 <_vfiprintf_r+0x1b8>
 8017f0e:	ab03      	add	r3, sp, #12
 8017f10:	9300      	str	r3, [sp, #0]
 8017f12:	462a      	mov	r2, r5
 8017f14:	4b12      	ldr	r3, [pc, #72]	@ (8017f60 <_vfiprintf_r+0x228>)
 8017f16:	a904      	add	r1, sp, #16
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f3af 8000 	nop.w
 8017f1e:	4607      	mov	r7, r0
 8017f20:	1c78      	adds	r0, r7, #1
 8017f22:	d1d6      	bne.n	8017ed2 <_vfiprintf_r+0x19a>
 8017f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f26:	07d9      	lsls	r1, r3, #31
 8017f28:	d405      	bmi.n	8017f36 <_vfiprintf_r+0x1fe>
 8017f2a:	89ab      	ldrh	r3, [r5, #12]
 8017f2c:	059a      	lsls	r2, r3, #22
 8017f2e:	d402      	bmi.n	8017f36 <_vfiprintf_r+0x1fe>
 8017f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f32:	f7fe fcb9 	bl	80168a8 <__retarget_lock_release_recursive>
 8017f36:	89ab      	ldrh	r3, [r5, #12]
 8017f38:	065b      	lsls	r3, r3, #25
 8017f3a:	f53f af1f 	bmi.w	8017d7c <_vfiprintf_r+0x44>
 8017f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f40:	e71e      	b.n	8017d80 <_vfiprintf_r+0x48>
 8017f42:	ab03      	add	r3, sp, #12
 8017f44:	9300      	str	r3, [sp, #0]
 8017f46:	462a      	mov	r2, r5
 8017f48:	4b05      	ldr	r3, [pc, #20]	@ (8017f60 <_vfiprintf_r+0x228>)
 8017f4a:	a904      	add	r1, sp, #16
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	f000 f879 	bl	8018044 <_printf_i>
 8017f52:	e7e4      	b.n	8017f1e <_vfiprintf_r+0x1e6>
 8017f54:	08018e47 	.word	0x08018e47
 8017f58:	08018e51 	.word	0x08018e51
 8017f5c:	00000000 	.word	0x00000000
 8017f60:	08017d15 	.word	0x08017d15
 8017f64:	08018e4d 	.word	0x08018e4d

08017f68 <_printf_common>:
 8017f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f6c:	4616      	mov	r6, r2
 8017f6e:	4698      	mov	r8, r3
 8017f70:	688a      	ldr	r2, [r1, #8]
 8017f72:	690b      	ldr	r3, [r1, #16]
 8017f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	bfb8      	it	lt
 8017f7c:	4613      	movlt	r3, r2
 8017f7e:	6033      	str	r3, [r6, #0]
 8017f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017f84:	4607      	mov	r7, r0
 8017f86:	460c      	mov	r4, r1
 8017f88:	b10a      	cbz	r2, 8017f8e <_printf_common+0x26>
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	6033      	str	r3, [r6, #0]
 8017f8e:	6823      	ldr	r3, [r4, #0]
 8017f90:	0699      	lsls	r1, r3, #26
 8017f92:	bf42      	ittt	mi
 8017f94:	6833      	ldrmi	r3, [r6, #0]
 8017f96:	3302      	addmi	r3, #2
 8017f98:	6033      	strmi	r3, [r6, #0]
 8017f9a:	6825      	ldr	r5, [r4, #0]
 8017f9c:	f015 0506 	ands.w	r5, r5, #6
 8017fa0:	d106      	bne.n	8017fb0 <_printf_common+0x48>
 8017fa2:	f104 0a19 	add.w	sl, r4, #25
 8017fa6:	68e3      	ldr	r3, [r4, #12]
 8017fa8:	6832      	ldr	r2, [r6, #0]
 8017faa:	1a9b      	subs	r3, r3, r2
 8017fac:	42ab      	cmp	r3, r5
 8017fae:	dc26      	bgt.n	8017ffe <_printf_common+0x96>
 8017fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017fb4:	6822      	ldr	r2, [r4, #0]
 8017fb6:	3b00      	subs	r3, #0
 8017fb8:	bf18      	it	ne
 8017fba:	2301      	movne	r3, #1
 8017fbc:	0692      	lsls	r2, r2, #26
 8017fbe:	d42b      	bmi.n	8018018 <_printf_common+0xb0>
 8017fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017fc4:	4641      	mov	r1, r8
 8017fc6:	4638      	mov	r0, r7
 8017fc8:	47c8      	blx	r9
 8017fca:	3001      	adds	r0, #1
 8017fcc:	d01e      	beq.n	801800c <_printf_common+0xa4>
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	6922      	ldr	r2, [r4, #16]
 8017fd2:	f003 0306 	and.w	r3, r3, #6
 8017fd6:	2b04      	cmp	r3, #4
 8017fd8:	bf02      	ittt	eq
 8017fda:	68e5      	ldreq	r5, [r4, #12]
 8017fdc:	6833      	ldreq	r3, [r6, #0]
 8017fde:	1aed      	subeq	r5, r5, r3
 8017fe0:	68a3      	ldr	r3, [r4, #8]
 8017fe2:	bf0c      	ite	eq
 8017fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fe8:	2500      	movne	r5, #0
 8017fea:	4293      	cmp	r3, r2
 8017fec:	bfc4      	itt	gt
 8017fee:	1a9b      	subgt	r3, r3, r2
 8017ff0:	18ed      	addgt	r5, r5, r3
 8017ff2:	2600      	movs	r6, #0
 8017ff4:	341a      	adds	r4, #26
 8017ff6:	42b5      	cmp	r5, r6
 8017ff8:	d11a      	bne.n	8018030 <_printf_common+0xc8>
 8017ffa:	2000      	movs	r0, #0
 8017ffc:	e008      	b.n	8018010 <_printf_common+0xa8>
 8017ffe:	2301      	movs	r3, #1
 8018000:	4652      	mov	r2, sl
 8018002:	4641      	mov	r1, r8
 8018004:	4638      	mov	r0, r7
 8018006:	47c8      	blx	r9
 8018008:	3001      	adds	r0, #1
 801800a:	d103      	bne.n	8018014 <_printf_common+0xac>
 801800c:	f04f 30ff 	mov.w	r0, #4294967295
 8018010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018014:	3501      	adds	r5, #1
 8018016:	e7c6      	b.n	8017fa6 <_printf_common+0x3e>
 8018018:	18e1      	adds	r1, r4, r3
 801801a:	1c5a      	adds	r2, r3, #1
 801801c:	2030      	movs	r0, #48	@ 0x30
 801801e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018022:	4422      	add	r2, r4
 8018024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801802c:	3302      	adds	r3, #2
 801802e:	e7c7      	b.n	8017fc0 <_printf_common+0x58>
 8018030:	2301      	movs	r3, #1
 8018032:	4622      	mov	r2, r4
 8018034:	4641      	mov	r1, r8
 8018036:	4638      	mov	r0, r7
 8018038:	47c8      	blx	r9
 801803a:	3001      	adds	r0, #1
 801803c:	d0e6      	beq.n	801800c <_printf_common+0xa4>
 801803e:	3601      	adds	r6, #1
 8018040:	e7d9      	b.n	8017ff6 <_printf_common+0x8e>
	...

08018044 <_printf_i>:
 8018044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018048:	7e0f      	ldrb	r7, [r1, #24]
 801804a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801804c:	2f78      	cmp	r7, #120	@ 0x78
 801804e:	4691      	mov	r9, r2
 8018050:	4680      	mov	r8, r0
 8018052:	460c      	mov	r4, r1
 8018054:	469a      	mov	sl, r3
 8018056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801805a:	d807      	bhi.n	801806c <_printf_i+0x28>
 801805c:	2f62      	cmp	r7, #98	@ 0x62
 801805e:	d80a      	bhi.n	8018076 <_printf_i+0x32>
 8018060:	2f00      	cmp	r7, #0
 8018062:	f000 80d1 	beq.w	8018208 <_printf_i+0x1c4>
 8018066:	2f58      	cmp	r7, #88	@ 0x58
 8018068:	f000 80b8 	beq.w	80181dc <_printf_i+0x198>
 801806c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018074:	e03a      	b.n	80180ec <_printf_i+0xa8>
 8018076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801807a:	2b15      	cmp	r3, #21
 801807c:	d8f6      	bhi.n	801806c <_printf_i+0x28>
 801807e:	a101      	add	r1, pc, #4	@ (adr r1, 8018084 <_printf_i+0x40>)
 8018080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018084:	080180dd 	.word	0x080180dd
 8018088:	080180f1 	.word	0x080180f1
 801808c:	0801806d 	.word	0x0801806d
 8018090:	0801806d 	.word	0x0801806d
 8018094:	0801806d 	.word	0x0801806d
 8018098:	0801806d 	.word	0x0801806d
 801809c:	080180f1 	.word	0x080180f1
 80180a0:	0801806d 	.word	0x0801806d
 80180a4:	0801806d 	.word	0x0801806d
 80180a8:	0801806d 	.word	0x0801806d
 80180ac:	0801806d 	.word	0x0801806d
 80180b0:	080181ef 	.word	0x080181ef
 80180b4:	0801811b 	.word	0x0801811b
 80180b8:	080181a9 	.word	0x080181a9
 80180bc:	0801806d 	.word	0x0801806d
 80180c0:	0801806d 	.word	0x0801806d
 80180c4:	08018211 	.word	0x08018211
 80180c8:	0801806d 	.word	0x0801806d
 80180cc:	0801811b 	.word	0x0801811b
 80180d0:	0801806d 	.word	0x0801806d
 80180d4:	0801806d 	.word	0x0801806d
 80180d8:	080181b1 	.word	0x080181b1
 80180dc:	6833      	ldr	r3, [r6, #0]
 80180de:	1d1a      	adds	r2, r3, #4
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	6032      	str	r2, [r6, #0]
 80180e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80180ec:	2301      	movs	r3, #1
 80180ee:	e09c      	b.n	801822a <_printf_i+0x1e6>
 80180f0:	6833      	ldr	r3, [r6, #0]
 80180f2:	6820      	ldr	r0, [r4, #0]
 80180f4:	1d19      	adds	r1, r3, #4
 80180f6:	6031      	str	r1, [r6, #0]
 80180f8:	0606      	lsls	r6, r0, #24
 80180fa:	d501      	bpl.n	8018100 <_printf_i+0xbc>
 80180fc:	681d      	ldr	r5, [r3, #0]
 80180fe:	e003      	b.n	8018108 <_printf_i+0xc4>
 8018100:	0645      	lsls	r5, r0, #25
 8018102:	d5fb      	bpl.n	80180fc <_printf_i+0xb8>
 8018104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018108:	2d00      	cmp	r5, #0
 801810a:	da03      	bge.n	8018114 <_printf_i+0xd0>
 801810c:	232d      	movs	r3, #45	@ 0x2d
 801810e:	426d      	negs	r5, r5
 8018110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018114:	4858      	ldr	r0, [pc, #352]	@ (8018278 <_printf_i+0x234>)
 8018116:	230a      	movs	r3, #10
 8018118:	e011      	b.n	801813e <_printf_i+0xfa>
 801811a:	6821      	ldr	r1, [r4, #0]
 801811c:	6833      	ldr	r3, [r6, #0]
 801811e:	0608      	lsls	r0, r1, #24
 8018120:	f853 5b04 	ldr.w	r5, [r3], #4
 8018124:	d402      	bmi.n	801812c <_printf_i+0xe8>
 8018126:	0649      	lsls	r1, r1, #25
 8018128:	bf48      	it	mi
 801812a:	b2ad      	uxthmi	r5, r5
 801812c:	2f6f      	cmp	r7, #111	@ 0x6f
 801812e:	4852      	ldr	r0, [pc, #328]	@ (8018278 <_printf_i+0x234>)
 8018130:	6033      	str	r3, [r6, #0]
 8018132:	bf14      	ite	ne
 8018134:	230a      	movne	r3, #10
 8018136:	2308      	moveq	r3, #8
 8018138:	2100      	movs	r1, #0
 801813a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801813e:	6866      	ldr	r6, [r4, #4]
 8018140:	60a6      	str	r6, [r4, #8]
 8018142:	2e00      	cmp	r6, #0
 8018144:	db05      	blt.n	8018152 <_printf_i+0x10e>
 8018146:	6821      	ldr	r1, [r4, #0]
 8018148:	432e      	orrs	r6, r5
 801814a:	f021 0104 	bic.w	r1, r1, #4
 801814e:	6021      	str	r1, [r4, #0]
 8018150:	d04b      	beq.n	80181ea <_printf_i+0x1a6>
 8018152:	4616      	mov	r6, r2
 8018154:	fbb5 f1f3 	udiv	r1, r5, r3
 8018158:	fb03 5711 	mls	r7, r3, r1, r5
 801815c:	5dc7      	ldrb	r7, [r0, r7]
 801815e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018162:	462f      	mov	r7, r5
 8018164:	42bb      	cmp	r3, r7
 8018166:	460d      	mov	r5, r1
 8018168:	d9f4      	bls.n	8018154 <_printf_i+0x110>
 801816a:	2b08      	cmp	r3, #8
 801816c:	d10b      	bne.n	8018186 <_printf_i+0x142>
 801816e:	6823      	ldr	r3, [r4, #0]
 8018170:	07df      	lsls	r7, r3, #31
 8018172:	d508      	bpl.n	8018186 <_printf_i+0x142>
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	6861      	ldr	r1, [r4, #4]
 8018178:	4299      	cmp	r1, r3
 801817a:	bfde      	ittt	le
 801817c:	2330      	movle	r3, #48	@ 0x30
 801817e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018182:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018186:	1b92      	subs	r2, r2, r6
 8018188:	6122      	str	r2, [r4, #16]
 801818a:	f8cd a000 	str.w	sl, [sp]
 801818e:	464b      	mov	r3, r9
 8018190:	aa03      	add	r2, sp, #12
 8018192:	4621      	mov	r1, r4
 8018194:	4640      	mov	r0, r8
 8018196:	f7ff fee7 	bl	8017f68 <_printf_common>
 801819a:	3001      	adds	r0, #1
 801819c:	d14a      	bne.n	8018234 <_printf_i+0x1f0>
 801819e:	f04f 30ff 	mov.w	r0, #4294967295
 80181a2:	b004      	add	sp, #16
 80181a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	f043 0320 	orr.w	r3, r3, #32
 80181ae:	6023      	str	r3, [r4, #0]
 80181b0:	4832      	ldr	r0, [pc, #200]	@ (801827c <_printf_i+0x238>)
 80181b2:	2778      	movs	r7, #120	@ 0x78
 80181b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80181b8:	6823      	ldr	r3, [r4, #0]
 80181ba:	6831      	ldr	r1, [r6, #0]
 80181bc:	061f      	lsls	r7, r3, #24
 80181be:	f851 5b04 	ldr.w	r5, [r1], #4
 80181c2:	d402      	bmi.n	80181ca <_printf_i+0x186>
 80181c4:	065f      	lsls	r7, r3, #25
 80181c6:	bf48      	it	mi
 80181c8:	b2ad      	uxthmi	r5, r5
 80181ca:	6031      	str	r1, [r6, #0]
 80181cc:	07d9      	lsls	r1, r3, #31
 80181ce:	bf44      	itt	mi
 80181d0:	f043 0320 	orrmi.w	r3, r3, #32
 80181d4:	6023      	strmi	r3, [r4, #0]
 80181d6:	b11d      	cbz	r5, 80181e0 <_printf_i+0x19c>
 80181d8:	2310      	movs	r3, #16
 80181da:	e7ad      	b.n	8018138 <_printf_i+0xf4>
 80181dc:	4826      	ldr	r0, [pc, #152]	@ (8018278 <_printf_i+0x234>)
 80181de:	e7e9      	b.n	80181b4 <_printf_i+0x170>
 80181e0:	6823      	ldr	r3, [r4, #0]
 80181e2:	f023 0320 	bic.w	r3, r3, #32
 80181e6:	6023      	str	r3, [r4, #0]
 80181e8:	e7f6      	b.n	80181d8 <_printf_i+0x194>
 80181ea:	4616      	mov	r6, r2
 80181ec:	e7bd      	b.n	801816a <_printf_i+0x126>
 80181ee:	6833      	ldr	r3, [r6, #0]
 80181f0:	6825      	ldr	r5, [r4, #0]
 80181f2:	6961      	ldr	r1, [r4, #20]
 80181f4:	1d18      	adds	r0, r3, #4
 80181f6:	6030      	str	r0, [r6, #0]
 80181f8:	062e      	lsls	r6, r5, #24
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	d501      	bpl.n	8018202 <_printf_i+0x1be>
 80181fe:	6019      	str	r1, [r3, #0]
 8018200:	e002      	b.n	8018208 <_printf_i+0x1c4>
 8018202:	0668      	lsls	r0, r5, #25
 8018204:	d5fb      	bpl.n	80181fe <_printf_i+0x1ba>
 8018206:	8019      	strh	r1, [r3, #0]
 8018208:	2300      	movs	r3, #0
 801820a:	6123      	str	r3, [r4, #16]
 801820c:	4616      	mov	r6, r2
 801820e:	e7bc      	b.n	801818a <_printf_i+0x146>
 8018210:	6833      	ldr	r3, [r6, #0]
 8018212:	1d1a      	adds	r2, r3, #4
 8018214:	6032      	str	r2, [r6, #0]
 8018216:	681e      	ldr	r6, [r3, #0]
 8018218:	6862      	ldr	r2, [r4, #4]
 801821a:	2100      	movs	r1, #0
 801821c:	4630      	mov	r0, r6
 801821e:	f7e8 f877 	bl	8000310 <memchr>
 8018222:	b108      	cbz	r0, 8018228 <_printf_i+0x1e4>
 8018224:	1b80      	subs	r0, r0, r6
 8018226:	6060      	str	r0, [r4, #4]
 8018228:	6863      	ldr	r3, [r4, #4]
 801822a:	6123      	str	r3, [r4, #16]
 801822c:	2300      	movs	r3, #0
 801822e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018232:	e7aa      	b.n	801818a <_printf_i+0x146>
 8018234:	6923      	ldr	r3, [r4, #16]
 8018236:	4632      	mov	r2, r6
 8018238:	4649      	mov	r1, r9
 801823a:	4640      	mov	r0, r8
 801823c:	47d0      	blx	sl
 801823e:	3001      	adds	r0, #1
 8018240:	d0ad      	beq.n	801819e <_printf_i+0x15a>
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	079b      	lsls	r3, r3, #30
 8018246:	d413      	bmi.n	8018270 <_printf_i+0x22c>
 8018248:	68e0      	ldr	r0, [r4, #12]
 801824a:	9b03      	ldr	r3, [sp, #12]
 801824c:	4298      	cmp	r0, r3
 801824e:	bfb8      	it	lt
 8018250:	4618      	movlt	r0, r3
 8018252:	e7a6      	b.n	80181a2 <_printf_i+0x15e>
 8018254:	2301      	movs	r3, #1
 8018256:	4632      	mov	r2, r6
 8018258:	4649      	mov	r1, r9
 801825a:	4640      	mov	r0, r8
 801825c:	47d0      	blx	sl
 801825e:	3001      	adds	r0, #1
 8018260:	d09d      	beq.n	801819e <_printf_i+0x15a>
 8018262:	3501      	adds	r5, #1
 8018264:	68e3      	ldr	r3, [r4, #12]
 8018266:	9903      	ldr	r1, [sp, #12]
 8018268:	1a5b      	subs	r3, r3, r1
 801826a:	42ab      	cmp	r3, r5
 801826c:	dcf2      	bgt.n	8018254 <_printf_i+0x210>
 801826e:	e7eb      	b.n	8018248 <_printf_i+0x204>
 8018270:	2500      	movs	r5, #0
 8018272:	f104 0619 	add.w	r6, r4, #25
 8018276:	e7f5      	b.n	8018264 <_printf_i+0x220>
 8018278:	08018e58 	.word	0x08018e58
 801827c:	08018e69 	.word	0x08018e69

08018280 <__swbuf_r>:
 8018280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018282:	460e      	mov	r6, r1
 8018284:	4614      	mov	r4, r2
 8018286:	4605      	mov	r5, r0
 8018288:	b118      	cbz	r0, 8018292 <__swbuf_r+0x12>
 801828a:	6a03      	ldr	r3, [r0, #32]
 801828c:	b90b      	cbnz	r3, 8018292 <__swbuf_r+0x12>
 801828e:	f7fe f9f9 	bl	8016684 <__sinit>
 8018292:	69a3      	ldr	r3, [r4, #24]
 8018294:	60a3      	str	r3, [r4, #8]
 8018296:	89a3      	ldrh	r3, [r4, #12]
 8018298:	071a      	lsls	r2, r3, #28
 801829a:	d501      	bpl.n	80182a0 <__swbuf_r+0x20>
 801829c:	6923      	ldr	r3, [r4, #16]
 801829e:	b943      	cbnz	r3, 80182b2 <__swbuf_r+0x32>
 80182a0:	4621      	mov	r1, r4
 80182a2:	4628      	mov	r0, r5
 80182a4:	f000 f82a 	bl	80182fc <__swsetup_r>
 80182a8:	b118      	cbz	r0, 80182b2 <__swbuf_r+0x32>
 80182aa:	f04f 37ff 	mov.w	r7, #4294967295
 80182ae:	4638      	mov	r0, r7
 80182b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182b2:	6823      	ldr	r3, [r4, #0]
 80182b4:	6922      	ldr	r2, [r4, #16]
 80182b6:	1a98      	subs	r0, r3, r2
 80182b8:	6963      	ldr	r3, [r4, #20]
 80182ba:	b2f6      	uxtb	r6, r6
 80182bc:	4283      	cmp	r3, r0
 80182be:	4637      	mov	r7, r6
 80182c0:	dc05      	bgt.n	80182ce <__swbuf_r+0x4e>
 80182c2:	4621      	mov	r1, r4
 80182c4:	4628      	mov	r0, r5
 80182c6:	f7ff fc83 	bl	8017bd0 <_fflush_r>
 80182ca:	2800      	cmp	r0, #0
 80182cc:	d1ed      	bne.n	80182aa <__swbuf_r+0x2a>
 80182ce:	68a3      	ldr	r3, [r4, #8]
 80182d0:	3b01      	subs	r3, #1
 80182d2:	60a3      	str	r3, [r4, #8]
 80182d4:	6823      	ldr	r3, [r4, #0]
 80182d6:	1c5a      	adds	r2, r3, #1
 80182d8:	6022      	str	r2, [r4, #0]
 80182da:	701e      	strb	r6, [r3, #0]
 80182dc:	6962      	ldr	r2, [r4, #20]
 80182de:	1c43      	adds	r3, r0, #1
 80182e0:	429a      	cmp	r2, r3
 80182e2:	d004      	beq.n	80182ee <__swbuf_r+0x6e>
 80182e4:	89a3      	ldrh	r3, [r4, #12]
 80182e6:	07db      	lsls	r3, r3, #31
 80182e8:	d5e1      	bpl.n	80182ae <__swbuf_r+0x2e>
 80182ea:	2e0a      	cmp	r6, #10
 80182ec:	d1df      	bne.n	80182ae <__swbuf_r+0x2e>
 80182ee:	4621      	mov	r1, r4
 80182f0:	4628      	mov	r0, r5
 80182f2:	f7ff fc6d 	bl	8017bd0 <_fflush_r>
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d0d9      	beq.n	80182ae <__swbuf_r+0x2e>
 80182fa:	e7d6      	b.n	80182aa <__swbuf_r+0x2a>

080182fc <__swsetup_r>:
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	4b29      	ldr	r3, [pc, #164]	@ (80183a4 <__swsetup_r+0xa8>)
 8018300:	4605      	mov	r5, r0
 8018302:	6818      	ldr	r0, [r3, #0]
 8018304:	460c      	mov	r4, r1
 8018306:	b118      	cbz	r0, 8018310 <__swsetup_r+0x14>
 8018308:	6a03      	ldr	r3, [r0, #32]
 801830a:	b90b      	cbnz	r3, 8018310 <__swsetup_r+0x14>
 801830c:	f7fe f9ba 	bl	8016684 <__sinit>
 8018310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018314:	0719      	lsls	r1, r3, #28
 8018316:	d422      	bmi.n	801835e <__swsetup_r+0x62>
 8018318:	06da      	lsls	r2, r3, #27
 801831a:	d407      	bmi.n	801832c <__swsetup_r+0x30>
 801831c:	2209      	movs	r2, #9
 801831e:	602a      	str	r2, [r5, #0]
 8018320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018324:	81a3      	strh	r3, [r4, #12]
 8018326:	f04f 30ff 	mov.w	r0, #4294967295
 801832a:	e033      	b.n	8018394 <__swsetup_r+0x98>
 801832c:	0758      	lsls	r0, r3, #29
 801832e:	d512      	bpl.n	8018356 <__swsetup_r+0x5a>
 8018330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018332:	b141      	cbz	r1, 8018346 <__swsetup_r+0x4a>
 8018334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018338:	4299      	cmp	r1, r3
 801833a:	d002      	beq.n	8018342 <__swsetup_r+0x46>
 801833c:	4628      	mov	r0, r5
 801833e:	f7fe facb 	bl	80168d8 <_free_r>
 8018342:	2300      	movs	r3, #0
 8018344:	6363      	str	r3, [r4, #52]	@ 0x34
 8018346:	89a3      	ldrh	r3, [r4, #12]
 8018348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801834c:	81a3      	strh	r3, [r4, #12]
 801834e:	2300      	movs	r3, #0
 8018350:	6063      	str	r3, [r4, #4]
 8018352:	6923      	ldr	r3, [r4, #16]
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	89a3      	ldrh	r3, [r4, #12]
 8018358:	f043 0308 	orr.w	r3, r3, #8
 801835c:	81a3      	strh	r3, [r4, #12]
 801835e:	6923      	ldr	r3, [r4, #16]
 8018360:	b94b      	cbnz	r3, 8018376 <__swsetup_r+0x7a>
 8018362:	89a3      	ldrh	r3, [r4, #12]
 8018364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801836c:	d003      	beq.n	8018376 <__swsetup_r+0x7a>
 801836e:	4621      	mov	r1, r4
 8018370:	4628      	mov	r0, r5
 8018372:	f000 f883 	bl	801847c <__smakebuf_r>
 8018376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801837a:	f013 0201 	ands.w	r2, r3, #1
 801837e:	d00a      	beq.n	8018396 <__swsetup_r+0x9a>
 8018380:	2200      	movs	r2, #0
 8018382:	60a2      	str	r2, [r4, #8]
 8018384:	6962      	ldr	r2, [r4, #20]
 8018386:	4252      	negs	r2, r2
 8018388:	61a2      	str	r2, [r4, #24]
 801838a:	6922      	ldr	r2, [r4, #16]
 801838c:	b942      	cbnz	r2, 80183a0 <__swsetup_r+0xa4>
 801838e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018392:	d1c5      	bne.n	8018320 <__swsetup_r+0x24>
 8018394:	bd38      	pop	{r3, r4, r5, pc}
 8018396:	0799      	lsls	r1, r3, #30
 8018398:	bf58      	it	pl
 801839a:	6962      	ldrpl	r2, [r4, #20]
 801839c:	60a2      	str	r2, [r4, #8]
 801839e:	e7f4      	b.n	801838a <__swsetup_r+0x8e>
 80183a0:	2000      	movs	r0, #0
 80183a2:	e7f7      	b.n	8018394 <__swsetup_r+0x98>
 80183a4:	24000260 	.word	0x24000260

080183a8 <_raise_r>:
 80183a8:	291f      	cmp	r1, #31
 80183aa:	b538      	push	{r3, r4, r5, lr}
 80183ac:	4605      	mov	r5, r0
 80183ae:	460c      	mov	r4, r1
 80183b0:	d904      	bls.n	80183bc <_raise_r+0x14>
 80183b2:	2316      	movs	r3, #22
 80183b4:	6003      	str	r3, [r0, #0]
 80183b6:	f04f 30ff 	mov.w	r0, #4294967295
 80183ba:	bd38      	pop	{r3, r4, r5, pc}
 80183bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80183be:	b112      	cbz	r2, 80183c6 <_raise_r+0x1e>
 80183c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183c4:	b94b      	cbnz	r3, 80183da <_raise_r+0x32>
 80183c6:	4628      	mov	r0, r5
 80183c8:	f000 f830 	bl	801842c <_getpid_r>
 80183cc:	4622      	mov	r2, r4
 80183ce:	4601      	mov	r1, r0
 80183d0:	4628      	mov	r0, r5
 80183d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183d6:	f000 b817 	b.w	8018408 <_kill_r>
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d00a      	beq.n	80183f4 <_raise_r+0x4c>
 80183de:	1c59      	adds	r1, r3, #1
 80183e0:	d103      	bne.n	80183ea <_raise_r+0x42>
 80183e2:	2316      	movs	r3, #22
 80183e4:	6003      	str	r3, [r0, #0]
 80183e6:	2001      	movs	r0, #1
 80183e8:	e7e7      	b.n	80183ba <_raise_r+0x12>
 80183ea:	2100      	movs	r1, #0
 80183ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80183f0:	4620      	mov	r0, r4
 80183f2:	4798      	blx	r3
 80183f4:	2000      	movs	r0, #0
 80183f6:	e7e0      	b.n	80183ba <_raise_r+0x12>

080183f8 <raise>:
 80183f8:	4b02      	ldr	r3, [pc, #8]	@ (8018404 <raise+0xc>)
 80183fa:	4601      	mov	r1, r0
 80183fc:	6818      	ldr	r0, [r3, #0]
 80183fe:	f7ff bfd3 	b.w	80183a8 <_raise_r>
 8018402:	bf00      	nop
 8018404:	24000260 	.word	0x24000260

08018408 <_kill_r>:
 8018408:	b538      	push	{r3, r4, r5, lr}
 801840a:	4d07      	ldr	r5, [pc, #28]	@ (8018428 <_kill_r+0x20>)
 801840c:	2300      	movs	r3, #0
 801840e:	4604      	mov	r4, r0
 8018410:	4608      	mov	r0, r1
 8018412:	4611      	mov	r1, r2
 8018414:	602b      	str	r3, [r5, #0]
 8018416:	f7ec f8db 	bl	80045d0 <_kill>
 801841a:	1c43      	adds	r3, r0, #1
 801841c:	d102      	bne.n	8018424 <_kill_r+0x1c>
 801841e:	682b      	ldr	r3, [r5, #0]
 8018420:	b103      	cbz	r3, 8018424 <_kill_r+0x1c>
 8018422:	6023      	str	r3, [r4, #0]
 8018424:	bd38      	pop	{r3, r4, r5, pc}
 8018426:	bf00      	nop
 8018428:	2400579c 	.word	0x2400579c

0801842c <_getpid_r>:
 801842c:	f7ec b8c8 	b.w	80045c0 <_getpid>

08018430 <__swhatbuf_r>:
 8018430:	b570      	push	{r4, r5, r6, lr}
 8018432:	460c      	mov	r4, r1
 8018434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018438:	2900      	cmp	r1, #0
 801843a:	b096      	sub	sp, #88	@ 0x58
 801843c:	4615      	mov	r5, r2
 801843e:	461e      	mov	r6, r3
 8018440:	da0d      	bge.n	801845e <__swhatbuf_r+0x2e>
 8018442:	89a3      	ldrh	r3, [r4, #12]
 8018444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018448:	f04f 0100 	mov.w	r1, #0
 801844c:	bf14      	ite	ne
 801844e:	2340      	movne	r3, #64	@ 0x40
 8018450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018454:	2000      	movs	r0, #0
 8018456:	6031      	str	r1, [r6, #0]
 8018458:	602b      	str	r3, [r5, #0]
 801845a:	b016      	add	sp, #88	@ 0x58
 801845c:	bd70      	pop	{r4, r5, r6, pc}
 801845e:	466a      	mov	r2, sp
 8018460:	f000 f848 	bl	80184f4 <_fstat_r>
 8018464:	2800      	cmp	r0, #0
 8018466:	dbec      	blt.n	8018442 <__swhatbuf_r+0x12>
 8018468:	9901      	ldr	r1, [sp, #4]
 801846a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801846e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018472:	4259      	negs	r1, r3
 8018474:	4159      	adcs	r1, r3
 8018476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801847a:	e7eb      	b.n	8018454 <__swhatbuf_r+0x24>

0801847c <__smakebuf_r>:
 801847c:	898b      	ldrh	r3, [r1, #12]
 801847e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018480:	079d      	lsls	r5, r3, #30
 8018482:	4606      	mov	r6, r0
 8018484:	460c      	mov	r4, r1
 8018486:	d507      	bpl.n	8018498 <__smakebuf_r+0x1c>
 8018488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	6123      	str	r3, [r4, #16]
 8018490:	2301      	movs	r3, #1
 8018492:	6163      	str	r3, [r4, #20]
 8018494:	b003      	add	sp, #12
 8018496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018498:	ab01      	add	r3, sp, #4
 801849a:	466a      	mov	r2, sp
 801849c:	f7ff ffc8 	bl	8018430 <__swhatbuf_r>
 80184a0:	9f00      	ldr	r7, [sp, #0]
 80184a2:	4605      	mov	r5, r0
 80184a4:	4639      	mov	r1, r7
 80184a6:	4630      	mov	r0, r6
 80184a8:	f7fe fdbc 	bl	8017024 <_malloc_r>
 80184ac:	b948      	cbnz	r0, 80184c2 <__smakebuf_r+0x46>
 80184ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184b2:	059a      	lsls	r2, r3, #22
 80184b4:	d4ee      	bmi.n	8018494 <__smakebuf_r+0x18>
 80184b6:	f023 0303 	bic.w	r3, r3, #3
 80184ba:	f043 0302 	orr.w	r3, r3, #2
 80184be:	81a3      	strh	r3, [r4, #12]
 80184c0:	e7e2      	b.n	8018488 <__smakebuf_r+0xc>
 80184c2:	89a3      	ldrh	r3, [r4, #12]
 80184c4:	6020      	str	r0, [r4, #0]
 80184c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	9b01      	ldr	r3, [sp, #4]
 80184ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184d2:	b15b      	cbz	r3, 80184ec <__smakebuf_r+0x70>
 80184d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184d8:	4630      	mov	r0, r6
 80184da:	f000 f81d 	bl	8018518 <_isatty_r>
 80184de:	b128      	cbz	r0, 80184ec <__smakebuf_r+0x70>
 80184e0:	89a3      	ldrh	r3, [r4, #12]
 80184e2:	f023 0303 	bic.w	r3, r3, #3
 80184e6:	f043 0301 	orr.w	r3, r3, #1
 80184ea:	81a3      	strh	r3, [r4, #12]
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	431d      	orrs	r5, r3
 80184f0:	81a5      	strh	r5, [r4, #12]
 80184f2:	e7cf      	b.n	8018494 <__smakebuf_r+0x18>

080184f4 <_fstat_r>:
 80184f4:	b538      	push	{r3, r4, r5, lr}
 80184f6:	4d07      	ldr	r5, [pc, #28]	@ (8018514 <_fstat_r+0x20>)
 80184f8:	2300      	movs	r3, #0
 80184fa:	4604      	mov	r4, r0
 80184fc:	4608      	mov	r0, r1
 80184fe:	4611      	mov	r1, r2
 8018500:	602b      	str	r3, [r5, #0]
 8018502:	f7ec f8c5 	bl	8004690 <_fstat>
 8018506:	1c43      	adds	r3, r0, #1
 8018508:	d102      	bne.n	8018510 <_fstat_r+0x1c>
 801850a:	682b      	ldr	r3, [r5, #0]
 801850c:	b103      	cbz	r3, 8018510 <_fstat_r+0x1c>
 801850e:	6023      	str	r3, [r4, #0]
 8018510:	bd38      	pop	{r3, r4, r5, pc}
 8018512:	bf00      	nop
 8018514:	2400579c 	.word	0x2400579c

08018518 <_isatty_r>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4d06      	ldr	r5, [pc, #24]	@ (8018534 <_isatty_r+0x1c>)
 801851c:	2300      	movs	r3, #0
 801851e:	4604      	mov	r4, r0
 8018520:	4608      	mov	r0, r1
 8018522:	602b      	str	r3, [r5, #0]
 8018524:	f7ec f8c4 	bl	80046b0 <_isatty>
 8018528:	1c43      	adds	r3, r0, #1
 801852a:	d102      	bne.n	8018532 <_isatty_r+0x1a>
 801852c:	682b      	ldr	r3, [r5, #0]
 801852e:	b103      	cbz	r3, 8018532 <_isatty_r+0x1a>
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	bd38      	pop	{r3, r4, r5, pc}
 8018534:	2400579c 	.word	0x2400579c

08018538 <log>:
 8018538:	b4f0      	push	{r4, r5, r6, r7}
 801853a:	ee10 0a90 	vmov	r0, s1
 801853e:	ee10 3a10 	vmov	r3, s0
 8018542:	f04f 34ff 	mov.w	r4, #4294967295
 8018546:	429c      	cmp	r4, r3
 8018548:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 801854c:	4c72      	ldr	r4, [pc, #456]	@ (8018718 <log+0x1e0>)
 801854e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8018552:	418c      	sbcs	r4, r1
 8018554:	ed2d 8b02 	vpush	{d8}
 8018558:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801855c:	d35a      	bcc.n	8018614 <log+0xdc>
 801855e:	4a6f      	ldr	r2, [pc, #444]	@ (801871c <log+0x1e4>)
 8018560:	4290      	cmp	r0, r2
 8018562:	bf08      	it	eq
 8018564:	2b00      	cmpeq	r3, #0
 8018566:	f000 80c7 	beq.w	80186f8 <log+0x1c0>
 801856a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801856e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018572:	4b6b      	ldr	r3, [pc, #428]	@ (8018720 <log+0x1e8>)
 8018574:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018578:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801857c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018580:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8018584:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018588:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801858c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018590:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018594:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018598:	eea5 6b00 	vfma.f64	d6, d5, d0
 801859c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80185a0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80185a4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80185a8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80185ac:	eea3 5b00 	vfma.f64	d5, d3, d0
 80185b0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80185b4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80185b8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80185bc:	eea3 5b04 	vfma.f64	d5, d3, d4
 80185c0:	eea5 6b04 	vfma.f64	d6, d5, d4
 80185c4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80185c8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80185cc:	eeb0 2b47 	vmov.f64	d2, d7
 80185d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8018700 <log+0x1c8>
 80185d4:	eeb0 6b40 	vmov.f64	d6, d0
 80185d8:	eeb0 3b40 	vmov.f64	d3, d0
 80185dc:	eea0 6b07 	vfma.f64	d6, d0, d7
 80185e0:	eea0 6b47 	vfms.f64	d6, d0, d7
 80185e4:	ee30 8b46 	vsub.f64	d8, d0, d6
 80185e8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80185ec:	eea1 3b05 	vfma.f64	d3, d1, d5
 80185f0:	ee30 7b43 	vsub.f64	d7, d0, d3
 80185f4:	ee30 0b06 	vadd.f64	d0, d0, d6
 80185f8:	eea1 7b05 	vfma.f64	d7, d1, d5
 80185fc:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018600:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018604:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018608:	ee33 0b07 	vadd.f64	d0, d3, d7
 801860c:	ecbd 8b02 	vpop	{d8}
 8018610:	bcf0      	pop	{r4, r5, r6, r7}
 8018612:	4770      	bx	lr
 8018614:	f1a2 0410 	sub.w	r4, r2, #16
 8018618:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801861c:	428c      	cmp	r4, r1
 801861e:	d923      	bls.n	8018668 <log+0x130>
 8018620:	18d9      	adds	r1, r3, r3
 8018622:	eb40 0400 	adc.w	r4, r0, r0
 8018626:	4321      	orrs	r1, r4
 8018628:	d105      	bne.n	8018636 <log+0xfe>
 801862a:	ecbd 8b02 	vpop	{d8}
 801862e:	2001      	movs	r0, #1
 8018630:	bcf0      	pop	{r4, r5, r6, r7}
 8018632:	f000 b889 	b.w	8018748 <__math_divzero>
 8018636:	493b      	ldr	r1, [pc, #236]	@ (8018724 <log+0x1ec>)
 8018638:	4288      	cmp	r0, r1
 801863a:	bf08      	it	eq
 801863c:	2b00      	cmpeq	r3, #0
 801863e:	d0e5      	beq.n	801860c <log+0xd4>
 8018640:	0413      	lsls	r3, r2, #16
 8018642:	d403      	bmi.n	801864c <log+0x114>
 8018644:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018648:	4393      	bics	r3, r2
 801864a:	d104      	bne.n	8018656 <log+0x11e>
 801864c:	ecbd 8b02 	vpop	{d8}
 8018650:	bcf0      	pop	{r4, r5, r6, r7}
 8018652:	f000 b891 	b.w	8018778 <__math_invalid>
 8018656:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018708 <log+0x1d0>
 801865a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801865e:	ec53 2b17 	vmov	r2, r3, d7
 8018662:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018666:	4613      	mov	r3, r2
 8018668:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 801866c:	492c      	ldr	r1, [pc, #176]	@ (8018720 <log+0x1e8>)
 801866e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018672:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018676:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801867a:	ea4f 5c12 	mov.w	ip, r2, lsr #20
 801867e:	eb01 1504 	add.w	r5, r1, r4, lsl #4
 8018682:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 8018686:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
 801868a:	1e1e      	subs	r6, r3, #0
 801868c:	eba0 070c 	sub.w	r7, r0, ip
 8018690:	ec47 6b16 	vmov	d6, r6, r7
 8018694:	1512      	asrs	r2, r2, #20
 8018696:	eea7 5b06 	vfma.f64	d5, d7, d6
 801869a:	ee07 2a90 	vmov	s15, r2
 801869e:	ee25 2b05 	vmul.f64	d2, d5, d5
 80186a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80186a6:	ed91 4b00 	vldr	d4, [r1]
 80186aa:	ee25 1b02 	vmul.f64	d1, d5, d2
 80186ae:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
 80186b2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80186b6:	ee35 4b07 	vadd.f64	d4, d5, d7
 80186ba:	ee37 0b44 	vsub.f64	d0, d7, d4
 80186be:	ed91 7b02 	vldr	d7, [r1, #8]
 80186c2:	ee30 0b05 	vadd.f64	d0, d0, d5
 80186c6:	eea7 0b06 	vfma.f64	d0, d7, d6
 80186ca:	ed91 7b04 	vldr	d7, [r1, #16]
 80186ce:	ed91 6b08 	vldr	d6, [r1, #32]
 80186d2:	eea7 0b02 	vfma.f64	d0, d7, d2
 80186d6:	ed91 7b06 	vldr	d7, [r1, #24]
 80186da:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80186de:	eea6 7b05 	vfma.f64	d7, d6, d5
 80186e2:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80186e6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80186ea:	eea6 7b02 	vfma.f64	d7, d6, d2
 80186ee:	eea1 0b07 	vfma.f64	d0, d1, d7
 80186f2:	ee30 0b04 	vadd.f64	d0, d0, d4
 80186f6:	e789      	b.n	801860c <log+0xd4>
 80186f8:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018710 <log+0x1d8>
 80186fc:	e786      	b.n	801860c <log+0xd4>
 80186fe:	bf00      	nop
 8018700:	00000000 	.word	0x00000000
 8018704:	41a00000 	.word	0x41a00000
 8018708:	00000000 	.word	0x00000000
 801870c:	43300000 	.word	0x43300000
	...
 8018718:	000308ff 	.word	0x000308ff
 801871c:	3ff00000 	.word	0x3ff00000
 8018720:	080190d0 	.word	0x080190d0
 8018724:	7ff00000 	.word	0x7ff00000

08018728 <with_errno>:
 8018728:	b510      	push	{r4, lr}
 801872a:	ed2d 8b02 	vpush	{d8}
 801872e:	eeb0 8b40 	vmov.f64	d8, d0
 8018732:	4604      	mov	r4, r0
 8018734:	f7fe f88c 	bl	8016850 <__errno>
 8018738:	eeb0 0b48 	vmov.f64	d0, d8
 801873c:	ecbd 8b02 	vpop	{d8}
 8018740:	6004      	str	r4, [r0, #0]
 8018742:	bd10      	pop	{r4, pc}
 8018744:	0000      	movs	r0, r0
	...

08018748 <__math_divzero>:
 8018748:	b082      	sub	sp, #8
 801874a:	2800      	cmp	r0, #0
 801874c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018750:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018754:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018758:	ed8d 7b00 	vstr	d7, [sp]
 801875c:	ed9d 0b00 	vldr	d0, [sp]
 8018760:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018770 <__math_divzero+0x28>
 8018764:	2022      	movs	r0, #34	@ 0x22
 8018766:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801876a:	b002      	add	sp, #8
 801876c:	f7ff bfdc 	b.w	8018728 <with_errno>
	...

08018778 <__math_invalid>:
 8018778:	eeb0 7b40 	vmov.f64	d7, d0
 801877c:	eeb4 7b47 	vcmp.f64	d7, d7
 8018780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018784:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018788:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801878c:	d602      	bvs.n	8018794 <__math_invalid+0x1c>
 801878e:	2021      	movs	r0, #33	@ 0x21
 8018790:	f7ff bfca 	b.w	8018728 <with_errno>
 8018794:	4770      	bx	lr
	...

08018798 <_init>:
 8018798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801879a:	bf00      	nop
 801879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801879e:	bc08      	pop	{r3}
 80187a0:	469e      	mov	lr, r3
 80187a2:	4770      	bx	lr

080187a4 <_fini>:
 80187a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187a6:	bf00      	nop
 80187a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187aa:	bc08      	pop	{r3}
 80187ac:	469e      	mov	lr, r3
 80187ae:	4770      	bx	lr
