
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018620  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080188d0  080188d0  000198d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019660  08019660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019668  08019668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801966c  0801966c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  08019670  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000654c  24000290  08019900  0001b290  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240067dc  08019900  0001b7dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033d66  00000000  00000000  0001b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000072b4  00000000  00000000  0004f024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027c0  00000000  00000000  000562d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ebe  00000000  00000000  00058a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bb27  00000000  00000000  0005a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c3d6  00000000  00000000  0009647d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160e70  00000000  00000000  000d2853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002336c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b760  00000000  00000000  00233708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0023ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080188b8 	.word	0x080188b8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	080188b8 	.word	0x080188b8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3e:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <BMP280_write+0x54>)
 8000b40:	f008 fa28 	bl	8008f94 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	2201      	movs	r2, #1
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <BMP280_write+0x58>)
 8000b56:	f00b faa9 	bl	800c0ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b5a:	1db9      	adds	r1, r7, #6
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <BMP280_write+0x58>)
 8000b62:	f00b faa3 	bl	800c0ac <HAL_SPI_Transmit>

	BMP280_unselect();
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <BMP280_write+0x54>)
 8000b6e:	f008 fa11 	bl	8008f94 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	2400235c 	.word	0x2400235c

08000b84 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <BMP280_read+0x54>)
 8000ba0:	f008 f9f8 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000ba4:	f107 010f 	add.w	r1, r7, #15
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <BMP280_read+0x58>)
 8000bae:	f00b fa7d 	bl	800c0ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000bb2:	f107 010f 	add.w	r1, r7, #15
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <BMP280_read+0x58>)
 8000bbc:	f00b fc64 	bl	800c488 <HAL_SPI_Receive>
	BMP280_unselect();
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <BMP280_read+0x54>)
 8000bc8:	f008 f9e4 	bl	8008f94 <HAL_GPIO_WritePin>

	return Buffer;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	2400235c 	.word	0x2400235c

08000be0 <BMP280_config>:

void BMP280_config(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000be4:	2157      	movs	r1, #87	@ 0x57
 8000be6:	20f4      	movs	r0, #244	@ 0xf4
 8000be8:	f7ff ff9e 	bl	8000b28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000bec:	2110      	movs	r1, #16
 8000bee:	20f5      	movs	r0, #245	@ 0xf5
 8000bf0:	f7ff ff9a 	bl	8000b28 <BMP280_write>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000bfe:	2388      	movs	r3, #136	@ 0x88
 8000c00:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c1e:	f008 f9b9 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c22:	f107 011f 	add.w	r1, r7, #31
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c2c:	f00b fa3e 	bl	800c0ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c30:	1d39      	adds	r1, r7, #4
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	2218      	movs	r2, #24
 8000c36:	483e      	ldr	r0, [pc, #248]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c38:	f00b fc26 	bl	800c488 <HAL_SPI_Receive>
	BMP280_unselect();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	483a      	ldr	r0, [pc, #232]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c44:	f008 f9a6 	bl	8008f94 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	793b      	ldrb	r3, [r7, #4]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <BMP280_calibrationData+0x13c>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <BMP280_calibrationData+0x140>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000c6e:	7a7b      	ldrb	r3, [r7, #9]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <BMP280_calibrationData+0x144>)
 8000c7e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <BMP280_calibrationData+0x148>)
 8000c92:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <BMP280_calibrationData+0x14c>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <BMP280_calibrationData+0x150>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <BMP280_calibrationData+0x154>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7cbb      	ldrb	r3, [r7, #18]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <BMP280_calibrationData+0x158>)
 8000cda:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000cdc:	7d7b      	ldrb	r3, [r7, #21]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	7d3b      	ldrb	r3, [r7, #20]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <BMP280_calibrationData+0x15c>)
 8000cec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <BMP280_calibrationData+0x160>)
 8000cfe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000d00:	7e7b      	ldrb	r3, [r7, #25]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	7e3b      	ldrb	r3, [r7, #24]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <BMP280_calibrationData+0x164>)
 8000d10:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7ebb      	ldrb	r3, [r7, #26]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <BMP280_calibrationData+0x168>)
 8000d22:	801a      	strh	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	2400235c 	.word	0x2400235c
 8000d34:	240002c0 	.word	0x240002c0
 8000d38:	240002c4 	.word	0x240002c4
 8000d3c:	240002c6 	.word	0x240002c6
 8000d40:	240002c2 	.word	0x240002c2
 8000d44:	240002c8 	.word	0x240002c8
 8000d48:	240002ca 	.word	0x240002ca
 8000d4c:	240002cc 	.word	0x240002cc
 8000d50:	240002ce 	.word	0x240002ce
 8000d54:	240002d0 	.word	0x240002d0
 8000d58:	240002d2 	.word	0x240002d2
 8000d5c:	240002d4 	.word	0x240002d4
 8000d60:	240002d6 	.word	0x240002d6

08000d64 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000d6a:	23f7      	movs	r3, #247	@ 0xf7
 8000d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000d7e:	f008 f909 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d8a:	f00b f98f 	bl	800c0ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000d8e:	4639      	mov	r1, r7
 8000d90:	2364      	movs	r3, #100	@ 0x64
 8000d92:	2206      	movs	r2, #6
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d96:	f00b fb77 	bl	800c488 <HAL_SPI_Receive>
	BMP280_unselect();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000da2:	f008 f8f7 	bl	8008f94 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	031a      	lsls	r2, r3, #12
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4313      	orrs	r3, r2
 8000db0:	78ba      	ldrb	r2, [r7, #2]
 8000db2:	0912      	lsrs	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4313      	orrs	r3, r2
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <BMP280_readRawValues+0x80>)
 8000dba:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	031a      	lsls	r2, r3, #12
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	797a      	ldrb	r2, [r7, #5]
 8000dc8:	0912      	lsrs	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <BMP280_readRawValues+0x84>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	2400235c 	.word	0x2400235c
 8000de4:	240002dc 	.word	0x240002dc
 8000de8:	240002d8 	.word	0x240002d8

08000dec <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <BMP280_measureT+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	10da      	asrs	r2, r3, #3
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <BMP280_measureT+0x78>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <BMP280_measureT+0x7c>)
 8000e04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	12db      	asrs	r3, r3, #11
 8000e0e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	111b      	asrs	r3, r3, #4
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	1112      	asrs	r2, r2, #4
 8000e1e:	4911      	ldr	r1, [pc, #68]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e20:	8809      	ldrh	r1, [r1, #0]
 8000e22:	1a52      	subs	r2, r2, r1
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	131b      	asrs	r3, r3, #12
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <BMP280_measureT+0x80>)
 8000e2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	139b      	asrs	r3, r3, #14
 8000e36:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e40:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3380      	adds	r3, #128	@ 0x80
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	60fb      	str	r3, [r7, #12]
	return T;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	240002d8 	.word	0x240002d8
 8000e64:	240002c0 	.word	0x240002c0
 8000e68:	240002c4 	.word	0x240002c4
 8000e6c:	240002c6 	.word	0x240002c6
 8000e70:	240002e0 	.word	0x240002e0

08000e74 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e78:	b0ca      	sub	sp, #296	@ 0x128
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e80:	4baf      	ldr	r3, [pc, #700]	@ (8001140 <BMP280_measureP+0x2cc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	461c      	mov	r4, r3
 8000e88:	4615      	mov	r5, r2
 8000e8a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e8e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e92:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e96:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9e:	fb03 f102 	mul.w	r1, r3, r2
 8000ea2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	18ca      	adds	r2, r1, r3
 8000eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eb4:	fba3 8903 	umull	r8, r9, r3, r3
 8000eb8:	eb02 0309 	add.w	r3, r2, r9
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8001144 <BMP280_measureP+0x2d0>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	17da      	asrs	r2, r3, #31
 8000ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ed0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	fb03 f209 	mul.w	r2, r3, r9
 8000eda:	460b      	mov	r3, r1
 8000edc:	fb08 f303 	mul.w	r3, r8, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000eec:	460a      	mov	r2, r1
 8000eee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000efc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000f00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000f04:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000f08:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <BMP280_measureP+0x2d4>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	17da      	asrs	r2, r3, #31
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f16:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f1e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f22:	462a      	mov	r2, r5
 8000f24:	fb02 f203 	mul.w	r2, r2, r3
 8000f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f38:	4621      	mov	r1, r4
 8000f3a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	460b      	mov	r3, r1
 8000f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f5e:	462b      	mov	r3, r5
 8000f60:	0459      	lsls	r1, r3, #17
 8000f62:	4623      	mov	r3, r4
 8000f64:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f68:	4623      	mov	r3, r4
 8000f6a:	0458      	lsls	r0, r3, #17
 8000f6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f74:	414b      	adcs	r3, r1
 8000f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f78:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000f80:	4b72      	ldr	r3, [pc, #456]	@ (800114c <BMP280_measureP+0x2d8>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	17da      	asrs	r2, r3, #31
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f8e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fa6:	1814      	adds	r4, r2, r0
 8000fa8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000faa:	414b      	adcs	r3, r1
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000fb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fbe:	fb03 f102 	mul.w	r1, r3, r2
 8000fc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	18ca      	adds	r2, r1, r3
 8000fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fd4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fec:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <BMP280_measureP+0x2dc>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	17da      	asrs	r2, r3, #31
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ffe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001002:	462b      	mov	r3, r5
 8001004:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001008:	4642      	mov	r2, r8
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	464b      	mov	r3, r9
 8001010:	4621      	mov	r1, r4
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	4641      	mov	r1, r8
 800101c:	fba2 1201 	umull	r1, r2, r2, r1
 8001020:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001024:	460a      	mov	r2, r1
 8001026:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800102a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800102e:	4413      	add	r3, r2
 8001030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001040:	4623      	mov	r3, r4
 8001042:	0a18      	lsrs	r0, r3, #8
 8001044:	462b      	mov	r3, r5
 8001046:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800104a:	462b      	mov	r3, r5
 800104c:	1219      	asrs	r1, r3, #8
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <BMP280_measureP+0x2e0>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	b21b      	sxth	r3, r3
 8001056:	17da      	asrs	r2, r3, #31
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800105c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001064:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001068:	464a      	mov	r2, r9
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001072:	4644      	mov	r4, r8
 8001074:	fb04 f303 	mul.w	r3, r4, r3
 8001078:	441a      	add	r2, r3
 800107a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800107e:	4644      	mov	r4, r8
 8001080:	fba3 4304 	umull	r4, r3, r3, r4
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001088:	4623      	mov	r3, r4
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800108e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80010a4:	464c      	mov	r4, r9
 80010a6:	0323      	lsls	r3, r4, #12
 80010a8:	4644      	mov	r4, r8
 80010aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010ae:	4644      	mov	r4, r8
 80010b0:	0322      	lsls	r2, r4, #12
 80010b2:	1884      	adds	r4, r0, r2
 80010b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80010b6:	eb41 0303 	adc.w	r3, r1, r3
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80010bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80010c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <BMP280_measureP+0x2e4>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010e8:	462b      	mov	r3, r5
 80010ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010ee:	4642      	mov	r2, r8
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	464b      	mov	r3, r9
 80010f6:	4621      	mov	r1, r4
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	4622      	mov	r2, r4
 8001100:	4641      	mov	r1, r8
 8001102:	fba2 1201 	umull	r1, r2, r2, r1
 8001106:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800110a:	460a      	mov	r2, r1
 800110c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001110:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001114:	4413      	add	r3, r2
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001126:	4629      	mov	r1, r5
 8001128:	104a      	asrs	r2, r1, #1
 800112a:	4629      	mov	r1, r5
 800112c:	17cb      	asrs	r3, r1, #31
 800112e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001132:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001136:	4313      	orrs	r3, r2
 8001138:	d110      	bne.n	800115c <BMP280_measureP+0x2e8>
	{
	return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e154      	b.n	80013e8 <BMP280_measureP+0x574>
 800113e:	bf00      	nop
 8001140:	240002e0 	.word	0x240002e0
 8001144:	240002d0 	.word	0x240002d0
 8001148:	240002ce 	.word	0x240002ce
 800114c:	240002cc 	.word	0x240002cc
 8001150:	240002ca 	.word	0x240002ca
 8001154:	240002c8 	.word	0x240002c8
 8001158:	240002c2 	.word	0x240002c2
	}
	p = 1048576-adc_P;
 800115c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001160:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001164:	17da      	asrs	r2, r3, #31
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800116a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800116e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001172:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001176:	105b      	asrs	r3, r3, #1
 8001178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800117c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001186:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800118a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800118e:	4621      	mov	r1, r4
 8001190:	1a89      	subs	r1, r1, r2
 8001192:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001194:	4629      	mov	r1, r5
 8001196:	eb61 0303 	sbc.w	r3, r1, r3
 800119a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80011a0:	4622      	mov	r2, r4
 80011a2:	462b      	mov	r3, r5
 80011a4:	1891      	adds	r1, r2, r2
 80011a6:	6239      	str	r1, [r7, #32]
 80011a8:	415b      	adcs	r3, r3
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	4621      	mov	r1, r4
 80011b2:	1851      	adds	r1, r2, r1
 80011b4:	61b9      	str	r1, [r7, #24]
 80011b6:	4629      	mov	r1, r5
 80011b8:	414b      	adcs	r3, r1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c8:	4649      	mov	r1, r9
 80011ca:	018b      	lsls	r3, r1, #6
 80011cc:	4641      	mov	r1, r8
 80011ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011d2:	4641      	mov	r1, r8
 80011d4:	018a      	lsls	r2, r1, #6
 80011d6:	4641      	mov	r1, r8
 80011d8:	1889      	adds	r1, r1, r2
 80011da:	6139      	str	r1, [r7, #16]
 80011dc:	4649      	mov	r1, r9
 80011de:	eb43 0101 	adc.w	r1, r3, r1
 80011e2:	6179      	str	r1, [r7, #20]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011f0:	4649      	mov	r1, r9
 80011f2:	008b      	lsls	r3, r1, #2
 80011f4:	4641      	mov	r1, r8
 80011f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011fa:	4641      	mov	r1, r8
 80011fc:	008a      	lsls	r2, r1, #2
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	4603      	mov	r3, r0
 8001204:	4622      	mov	r2, r4
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	460b      	mov	r3, r1
 800120c:	462a      	mov	r2, r5
 800120e:	eb42 0303 	adc.w	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001220:	4649      	mov	r1, r9
 8001222:	008b      	lsls	r3, r1, #2
 8001224:	4641      	mov	r1, r8
 8001226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800122a:	4641      	mov	r1, r8
 800122c:	008a      	lsls	r2, r1, #2
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4603      	mov	r3, r0
 8001234:	4622      	mov	r2, r4
 8001236:	189b      	adds	r3, r3, r2
 8001238:	673b      	str	r3, [r7, #112]	@ 0x70
 800123a:	462b      	mov	r3, r5
 800123c:	460a      	mov	r2, r1
 800123e:	eb42 0303 	adc.w	r3, r2, r3
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
 8001244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800124c:	f7ff fa6c 	bl	8000728 <__aeabi_ldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001258:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <BMP280_measureP+0x580>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001264:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001266:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0b50      	lsrs	r0, r2, #13
 8001274:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001278:	1359      	asrs	r1, r3, #13
 800127a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800127e:	462b      	mov	r3, r5
 8001280:	fb00 f203 	mul.w	r2, r0, r3
 8001284:	4623      	mov	r3, r4
 8001286:	fb03 f301 	mul.w	r3, r3, r1
 800128a:	4413      	add	r3, r2
 800128c:	4622      	mov	r2, r4
 800128e:	fba2 1200 	umull	r1, r2, r2, r0
 8001292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001296:	460a      	mov	r2, r1
 8001298:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800129c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80012a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0b50      	lsrs	r0, r2, #13
 80012b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b8:	1359      	asrs	r1, r3, #13
 80012ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80012be:	462b      	mov	r3, r5
 80012c0:	fb00 f203 	mul.w	r2, r0, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	fb03 f301 	mul.w	r3, r3, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4622      	mov	r2, r4
 80012ce:	fba2 1200 	umull	r1, r2, r2, r0
 80012d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012d6:	460a      	mov	r2, r1
 80012d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012e0:	4413      	add	r3, r2
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012f2:	4621      	mov	r1, r4
 80012f4:	0e4a      	lsrs	r2, r1, #25
 80012f6:	4629      	mov	r1, r5
 80012f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012fc:	4629      	mov	r1, r5
 80012fe:	164b      	asrs	r3, r1, #25
 8001300:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <BMP280_measureP+0x584>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001310:	667a      	str	r2, [r7, #100]	@ 0x64
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800131a:	462a      	mov	r2, r5
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001324:	4621      	mov	r1, r4
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001330:	4621      	mov	r1, r4
 8001332:	fba2 1201 	umull	r1, r2, r2, r1
 8001336:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800133a:	460a      	mov	r2, r1
 800133c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001340:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001356:	4621      	mov	r1, r4
 8001358:	0cca      	lsrs	r2, r1, #19
 800135a:	4629      	mov	r1, r5
 800135c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001360:	4629      	mov	r1, r5
 8001362:	14cb      	asrs	r3, r1, #19
 8001364:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800136c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001370:	1884      	adds	r4, r0, r2
 8001372:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001374:	eb41 0303 	adc.w	r3, r1, r3
 8001378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800137e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001382:	4621      	mov	r1, r4
 8001384:	1889      	adds	r1, r1, r2
 8001386:	6539      	str	r1, [r7, #80]	@ 0x50
 8001388:	4629      	mov	r1, r5
 800138a:	eb43 0101 	adc.w	r1, r3, r1
 800138e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800139c:	4623      	mov	r3, r4
 800139e:	0a18      	lsrs	r0, r3, #8
 80013a0:	462b      	mov	r3, r5
 80013a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a6:	462b      	mov	r3, r5
 80013a8:	1219      	asrs	r1, r3, #8
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <BMP280_measureP+0x588>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013c4:	464c      	mov	r4, r9
 80013c6:	0123      	lsls	r3, r4, #4
 80013c8:	4644      	mov	r4, r8
 80013ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ce:	4644      	mov	r4, r8
 80013d0:	0122      	lsls	r2, r4, #4
 80013d2:	1884      	adds	r4, r0, r2
 80013d4:	603c      	str	r4, [r7, #0]
 80013d6:	eb41 0303 	adc.w	r3, r1, r3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f4:	240002d6 	.word	0x240002d6
 80013f8:	240002d4 	.word	0x240002d4
 80013fc:	240002d2 	.word	0x240002d2

08001400 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <BMP280_measureH+0x14>
 8001410:	2300      	movs	r3, #0
 8001412:	e03d      	b.n	8001490 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <BMP280_measureH+0x98>
 8001422:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001426:	eeb0 0b46 	vmov.f64	d0, d6
 800142a:	f017 f919 	bl	8018660 <log>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	eeb1 7b47 	vneg.f64	d7, d7
 8001436:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800143a:	ed97 7b06 	vldr	d7, [r7, #24]
 800143e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d101      	bne.n	800144c <BMP280_measureH+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e021      	b.n	8001490 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014a0 <BMP280_measureH+0xa0>
 800145a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800145e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80014a8 <BMP280_measureH+0xa8>
 8001462:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001466:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014b0 <BMP280_measureH+0xb0>
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8001472:	ed97 5b06 	vldr	d5, [r7, #24]
 8001476:	ed97 6b04 	vldr	d6, [r7, #16]
 800147a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8001482:	ed97 7b02 	vldr	d7, [r7, #8]
 8001486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	b29b      	uxth	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00000000 	.word	0x00000000
 800149c:	40f8bcd0 	.word	0x40f8bcd0
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40590000 	.word	0x40590000
 80014a8:	66666666 	.word	0x66666666
 80014ac:	40711266 	.word	0x40711266
 80014b0:	ca402a92 	.word	0xca402a92
 80014b4:	3fa17e3e 	.word	0x3fa17e3e

080014b8 <BMP280_init>:

void BMP280_init(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <BMP280_init+0x40>)
 80014c4:	f007 fd66 	bl	8008f94 <HAL_GPIO_WritePin>
	BMP280_config();
 80014c8:	f7ff fb8a 	bl	8000be0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80014cc:	2089      	movs	r0, #137	@ 0x89
 80014ce:	f7ff fb59 	bl	8000b84 <BMP280_read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <BMP280_init+0x44>)
 80014d8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80014da:	f7ff fb8d 	bl	8000bf8 <BMP280_calibrationData>
	BMP280_readRawValues();
 80014de:	f7ff fc41 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <BMP280_init+0x48>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc80 	bl	8000dec <BMP280_measureT>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <BMP280_init+0x44>)
 80014f0:	6093      	str	r3, [r2, #8]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58020400 	.word	0x58020400
 80014fc:	240002ac 	.word	0x240002ac
 8001500:	240002d8 	.word	0x240002d8

08001504 <BMP280_calculate>:

void BMP280_calculate(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001508:	2089      	movs	r0, #137	@ 0x89
 800150a:	f7ff fb3b 	bl	8000b84 <BMP280_read>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <BMP280_calculate+0x68>)
 8001514:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001516:	f7ff fc25 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <BMP280_calculate+0x6c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc64 	bl	8000dec <BMP280_measureT>
 8001524:	4603      	mov	r3, r0
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <BMP280_calculate+0x68>)
 8001528:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <BMP280_calculate+0x70>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fca0 	bl	8000e74 <BMP280_measureP>
 8001534:	4603      	mov	r3, r0
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <BMP280_calculate+0x68>)
 800153a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <BMP280_calculate+0x68>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <BMP280_calculate+0x68>)
 8001542:	6892      	ldr	r2, [r2, #8]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff5a 	bl	8001400 <BMP280_measureH>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <BMP280_calculate+0x68>)
 8001552:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <BMP280_calculate+0x68>)
 8001556:	8a1a      	ldrh	r2, [r3, #16]
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <BMP280_calculate+0x68>)
 800155a:	8a5b      	ldrh	r3, [r3, #18]
 800155c:	429a      	cmp	r2, r3
 800155e:	d903      	bls.n	8001568 <BMP280_calculate+0x64>
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <BMP280_calculate+0x68>)
 8001562:	8a1a      	ldrh	r2, [r3, #16]
 8001564:	4b01      	ldr	r3, [pc, #4]	@ (800156c <BMP280_calculate+0x68>)
 8001566:	825a      	strh	r2, [r3, #18]
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240002ac 	.word	0x240002ac
 8001570:	240002d8 	.word	0x240002d8
 8001574:	240002dc 	.word	0x240002dc

08001578 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <bno055_delay+0x24>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4413      	add	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <bno055_delay+0x24>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	240003e7 	.word	0x240003e7

080015a0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80015b0:	23aa      	movs	r3, #170	@ 0xaa
 80015b2:	723b      	strb	r3, [r7, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	727b      	strb	r3, [r7, #9]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	72bb      	strb	r3, [r7, #10]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <BNO_Read+0x44>)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	2204      	movs	r2, #4
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <BNO_Read+0x48>)
 80015d0:	f00c ff06 	bl	800e3e0 <HAL_UART_Transmit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	240002e4 	.word	0x240002e4
 80015e8:	2400268c 	.word	0x2400268c

080015ec <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80015fc:	23aa      	movs	r3, #170	@ 0xaa
 80015fe:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001610:	f107 0108 	add.w	r1, r7, #8
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2205      	movs	r2, #5
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <BNO_Write+0x40>)
 800161a:	f00c fee1 	bl	800e3e0 <HAL_UART_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2400268c 	.word	0x2400268c

08001630 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001630:	b580      	push	{r7, lr}
 8001632:	b0c4      	sub	sp, #272	@ 0x110
 8001634:	af00      	add	r7, sp, #0
 8001636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001644:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8001658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001660:	22aa      	movs	r2, #170	@ 0xaa
 8001662:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8001664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166c:	2200      	movs	r2, #0
 800166e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001678:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800167c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8001684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001690:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8001698:	2300      	movs	r3, #0
 800169a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169e:	e015      	b.n	80016cc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b4:	3304      	adds	r3, #4
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016bc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3e0      	bcc.n	80016a0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80016de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 010c 	add.w	r1, r7, #12
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <BNO_Write_MB+0xe0>)
 80016f6:	f00c fe73 	bl	800e3e0 <HAL_UART_Transmit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001700:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001704:	4618      	mov	r0, r3
 8001706:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2400268c 	.word	0x2400268c
 8001714:	00000000 	.word	0x00000000

08001718 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800171c:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b55      	cmp	r3, #85	@ 0x55
 8001722:	f300 8247 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001726:	2b35      	cmp	r3, #53	@ 0x35
 8001728:	da0a      	bge.n	8001740 <BNO_Page0Adress+0x28>
 800172a:	2b08      	cmp	r3, #8
 800172c:	f000 814a 	beq.w	80019c4 <BNO_Page0Adress+0x2ac>
 8001730:	2b08      	cmp	r3, #8
 8001732:	f300 823f 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d04c      	beq.n	80017d4 <BNO_Page0Adress+0xbc>
 800173a:	2b07      	cmp	r3, #7
 800173c:	d065      	beq.n	800180a <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800173e:	e239      	b.n	8001bb4 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001740:	3b35      	subs	r3, #53	@ 0x35
 8001742:	2b20      	cmp	r3, #32
 8001744:	f200 8236 	bhi.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <BNO_Page0Adress+0x38>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001853 	.word	0x08001853
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001bb5 	.word	0x08001bb5
 800175c:	08001bb5 	.word	0x08001bb5
 8001760:	0800182f 	.word	0x0800182f
 8001764:	08001bb5 	.word	0x08001bb5
 8001768:	0800181d 	.word	0x0800181d
 800176c:	08001bb5 	.word	0x08001bb5
 8001770:	08001841 	.word	0x08001841
 8001774:	08001bb5 	.word	0x08001bb5
 8001778:	08001bb5 	.word	0x08001bb5
 800177c:	08001bb5 	.word	0x08001bb5
 8001780:	08001bb5 	.word	0x08001bb5
 8001784:	08001bb5 	.word	0x08001bb5
 8001788:	08001bb5 	.word	0x08001bb5
 800178c:	08001bb5 	.word	0x08001bb5
 8001790:	08001bb5 	.word	0x08001bb5
 8001794:	08001bb5 	.word	0x08001bb5
 8001798:	08001bb5 	.word	0x08001bb5
 800179c:	08001bb5 	.word	0x08001bb5
 80017a0:	08001bb5 	.word	0x08001bb5
 80017a4:	08001bb5 	.word	0x08001bb5
 80017a8:	08001bb5 	.word	0x08001bb5
 80017ac:	08001bb5 	.word	0x08001bb5
 80017b0:	08001bb5 	.word	0x08001bb5
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	08001bb5 	.word	0x08001bb5
 80017bc:	08001bb5 	.word	0x08001bb5
 80017c0:	08001bb5 	.word	0x08001bb5
 80017c4:	08001bb5 	.word	0x08001bb5
 80017c8:	08001bb5 	.word	0x08001bb5
 80017cc:	08001bb5 	.word	0x08001bb5
 80017d0:	080018ab 	.word	0x080018ab
			if(BNO_RxBuffer[1] != 160) return;
 80017d4:	4b78      	ldr	r3, [pc, #480]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80017da:	f040 81ed 	bne.w	8001bb8 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e0:	785a      	ldrb	r2, [r3, #1]
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017e4:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e8:	789a      	ldrb	r2, [r3, #2]
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017ec:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017f0:	78da      	ldrb	r2, [r3, #3]
 80017f2:	4b72      	ldr	r3, [pc, #456]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017fa:	791a      	ldrb	r2, [r3, #4]
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001804:	220b      	movs	r2, #11
 8001806:	701a      	strb	r2, [r3, #0]
			break;
 8001808:	e1d7      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800180c:	785a      	ldrb	r2, [r3, #1]
 800180e:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001810:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001814:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001816:	220b      	movs	r2, #11
 8001818:	701a      	strb	r2, [r3, #0]
			break;
 800181a:	e1ce      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800181e:	785a      	ldrb	r2, [r3, #1]
 8001820:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001828:	220b      	movs	r2, #11
 800182a:	701a      	strb	r2, [r3, #0]
			break;
 800182c:	e1c5      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001830:	785a      	ldrb	r2, [r3, #1]
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001834:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800183a:	220b      	movs	r2, #11
 800183c:	701a      	strb	r2, [r3, #0]
			break;
 800183e:	e1bc      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001840:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001846:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800184c:	220b      	movs	r2, #11
 800184e:	701a      	strb	r2, [r3, #0]
			break;
 8001850:	e1b3      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001854:	785a      	ldrb	r2, [r3, #1]
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001858:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001866:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800187a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800188e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800189e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	701a      	strb	r2, [r3, #0]
			break;
 80018a8:	e187      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018be:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018d6:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018dc:	799b      	ldrb	r3, [r3, #6]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018fc:	79db      	ldrb	r3, [r3, #7]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001906:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800190c:	7a9b      	ldrb	r3, [r3, #10]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001914:	7a5b      	ldrb	r3, [r3, #9]
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800191e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001936:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800193c:	7b9b      	ldrb	r3, [r3, #14]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800194e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001954:	7c1b      	ldrb	r3, [r3, #16]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800195c:	7bdb      	ldrb	r3, [r3, #15]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001966:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800196c:	7c9b      	ldrb	r3, [r3, #18]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001974:	7c5b      	ldrb	r3, [r3, #17]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800197e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800198c:	7cdb      	ldrb	r3, [r3, #19]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001998:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800199e:	7d9b      	ldrb	r3, [r3, #22]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80019a6:	7d5b      	ldrb	r3, [r3, #21]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80019b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 80019b6:	e100      	b.n	8001bba <BNO_Page0Adress+0x4a2>
 80019b8:	240002e4 	.word	0x240002e4
 80019bc:	240003f0 	.word	0x240003f0
 80019c0:	240003e5 	.word	0x240003e5
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80019c4:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b80      	ldr	r3, [pc, #512]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019de:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 80019e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 80019e8:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80019ec:	4b78      	ldr	r3, [pc, #480]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a06:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	4b71      	ldr	r3, [pc, #452]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a10:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a14:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a1e:	795b      	ldrb	r3, [r3, #5]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a38:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001a3c:	4b64      	ldr	r3, [pc, #400]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a56:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a60:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a66:	7a9b      	ldrb	r3, [r3, #10]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a7e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a88:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a96:	7adb      	ldrb	r3, [r3, #11]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aae:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ab0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001ab4:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001abe:	7b5b      	ldrb	r3, [r3, #13]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ace:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ad2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ad8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ade:	7c1b      	ldrb	r3, [r3, #16]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af6:	eeb1 6b47 	vneg.f64	d6, d7
 8001afa:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b04:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b0a:	7c9b      	ldrb	r3, [r3, #18]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b12:	7c5b      	ldrb	r3, [r3, #17]
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b22:	eeb1 6b47 	vneg.f64	d6, d7
 8001b26:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b30:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b36:	7d1b      	ldrb	r3, [r3, #20]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b3e:	7cdb      	ldrb	r3, [r3, #19]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b4e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b58:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b5e:	7d9b      	ldrb	r3, [r3, #22]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b66:	7d5b      	ldrb	r3, [r3, #21]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b76:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b80:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b8e:	7ddb      	ldrb	r3, [r3, #23]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b9e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ba8:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <BNO_Page0Adress+0x4c0>)
 8001bae:	220b      	movs	r2, #11
 8001bb0:	701a      	strb	r2, [r3, #0]
			break;
 8001bb2:	e002      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001bb8:	bf00      	nop
	}
}
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40590000 	.word	0x40590000
 8001bd0:	240002e4 	.word	0x240002e4
 8001bd4:	240003f0 	.word	0x240003f0
 8001bd8:	240003e5 	.word	0x240003e5

08001bdc <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d108      	bne.n	8001bfa <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001be8:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001bea:	785a      	ldrb	r2, [r3, #1]
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <BNO_Page1Adress+0x30>)
 8001bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <BNO_Page1Adress+0x34>)
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	701a      	strb	r2, [r3, #0]
			break;
 8001bf8:	e000      	b.n	8001bfc <BNO_Page1Adress+0x20>

		default:
			break;
 8001bfa:	bf00      	nop
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	240002e4 	.word	0x240002e4
 8001c0c:	240003f0 	.word	0x240003f0
 8001c10:	240003e5 	.word	0x240003e5

08001c14 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <BNO_EmptyingBuffer+0x30>)
 8001c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <BNO_EmptyingBuffer+0x14>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c26:	e005      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001c28:	f7ff fd76 	bl	8001718 <BNO_Page0Adress>
			break;
 8001c2c:	e002      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001c2e:	f7ff ffd5 	bl	8001bdc <BNO_Page1Adress>
			break;
 8001c32:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001c34:	22ff      	movs	r2, #255	@ 0xff
 8001c36:	2100      	movs	r1, #0
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <BNO_EmptyingBuffer+0x34>)
 8001c3a:	f014 fe24 	bl	8016886 <memset>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	240003f0 	.word	0x240003f0
 8001c48:	240002e4 	.word	0x240002e4

08001c4c <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001c50:	2120      	movs	r1, #32
 8001c52:	203f      	movs	r0, #63	@ 0x3f
 8001c54:	f7ff fcca 	bl	80015ec <BNO_Write>
	bno055_delay(70);
 8001c58:	2046      	movs	r0, #70	@ 0x46
 8001c5a:	f7ff fc8d 	bl	8001578 <bno055_delay>
	IMU.ID = 0x00;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <BNO_SWReset+0x24>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <BNO_SWReset+0x28>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240003f0 	.word	0x240003f0
 8001c74:	240003e8 	.word	0x240003e8

08001c78 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	203d      	movs	r0, #61	@ 0x3d
 8001c88:	f7ff fcb0 	bl	80015ec <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001c92:	2005      	movs	r0, #5
 8001c94:	f7ff fc70 	bl	8001578 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001c98:	e002      	b.n	8001ca0 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff fc6c 	bl	8001578 <bno055_delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ffe3 	bl	8001c78 <bno055_setOperationMode>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f7ff ffdc 	bl	8001c78 <bno055_setOperationMode>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001cc8:	2116      	movs	r1, #22
 8001cca:	2055      	movs	r0, #85	@ 0x55
 8001ccc:	f7ff fc68 	bl	80015a0 <BNO_Read>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2206      	movs	r2, #6
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <BNO_SetCalibrationData+0x60>)
 8001ce2:	f014 fe6a 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	3306      	adds	r3, #6
 8001cea:	2206      	movs	r2, #6
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <BNO_SetCalibrationData+0x64>)
 8001cf0:	f014 fe63 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <BNO_SetCalibrationData+0x68>)
 8001cfe:	f014 fe5c 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001d02:	463b      	mov	r3, r7
 8001d04:	3312      	adds	r3, #18
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d0c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d10:	463b      	mov	r3, r7
 8001d12:	3314      	adds	r3, #20
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d1a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	461a      	mov	r2, r3
 8001d22:	2116      	movs	r1, #22
 8001d24:	2055      	movs	r0, #85	@ 0x55
 8001d26:	f7ff fc83 	bl	8001630 <BNO_Write_MB>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000486 	.word	0x24000486
 8001d38:	24000480 	.word	0x24000480
 8001d3c:	2400047a 	.word	0x2400047a
 8001d40:	240003f0 	.word	0x240003f0

08001d44 <BNO_Init>:

void BNO_Init(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <BNO_Init+0x2c>)
 8001d4e:	f007 f921 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <BNO_Init+0x30>)
 8001d5a:	f007 f91b 	bl	8008f94 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001d5e:	2064      	movs	r0, #100	@ 0x64
 8001d60:	f7ff fc0a 	bl	8001578 <bno055_delay>

	BNO_CurrentState = Reset;
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <BNO_Init+0x34>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58020c00 	.word	0x58020c00
 8001d74:	58020400 	.word	0x58020400
 8001d78:	240003e8 	.word	0x240003e8

08001d7c <BNO_Config>:

void BNO_Config(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <BNO_Config+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d839      	bhi.n	8001dfc <BNO_Config+0x80>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <BNO_Config+0x14>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001db1 	.word	0x08001db1
 8001d98:	08001dbd 	.word	0x08001dbd
 8001d9c:	08001ddf 	.word	0x08001ddf
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001da0:	2100      	movs	r1, #0
 8001da2:	203f      	movs	r0, #63	@ 0x3f
 8001da4:	f7ff fc22 	bl	80015ec <BNO_Write>
			ConfigFlag = 1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <BNO_Config+0x88>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
			break;
 8001dae:	e026      	b.n	8001dfe <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001db0:	f7ff ff7a 	bl	8001ca8 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <BNO_Config+0x88>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
			break;
 8001dba:	e020      	b.n	8001dfe <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	203d      	movs	r0, #61	@ 0x3d
 8001dc0:	f7ff fbee 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <BNO_Config+0x8c>)
 8001dc6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <BNO_Config+0x88>)
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001dd4:	e013      	b.n	8001dfe <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <BNO_Config+0x88>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e00f      	b.n	8001dfe <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbdd 	bl	80015a0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <BNO_Config+0x8c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dec:	d102      	bne.n	8001df4 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <BNO_Config+0x90>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <BNO_Config+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			break;
 8001dfa:	e000      	b.n	8001dfe <BNO_Config+0x82>
		default:
			break;
 8001dfc:	bf00      	nop
	}

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	24000490 	.word	0x24000490
 8001e08:	240003f0 	.word	0x240003f0
 8001e0c:	240003e8 	.word	0x240003e8

08001e10 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b07      	cmp	r3, #7
 8001e1a:	d870      	bhi.n	8001efe <BNO_CalibrationStatus+0xee>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <BNO_CalibrationStatus+0x14>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e99 	.word	0x08001e99
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ee1 	.word	0x08001ee1
 8001e40:	08001ef3 	.word	0x08001ef3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e44:	2100      	movs	r1, #0
 8001e46:	203f      	movs	r0, #63	@ 0x3f
 8001e48:	f7ff fbd0 	bl	80015ec <BNO_Write>
			CalibrationFlag = 1;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
			break;
 8001e52:	e059      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001e54:	f7ff ff2f 	bl	8001cb6 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e053      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	203d      	movs	r0, #61	@ 0x3d
 8001e64:	f7ff fb9c 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001e6a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d10e      	bne.n	8001e90 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <BNO_CalibrationStatus+0x108>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001e86:	e03f      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
			break;
 8001e8e:	e03b      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
			break;
 8001e96:	e037      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2035      	movs	r0, #53	@ 0x35
 8001e9c:	f7ff fb80 	bl	80015a0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ea2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d12d      	bne.n	8001f06 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb0:	e029      	b.n	8001f06 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001eb2:	f7ff fef9 	bl	8001ca8 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eb8:	2205      	movs	r2, #5
 8001eba:	701a      	strb	r2, [r3, #0]
			break;
 8001ebc:	e024      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	203d      	movs	r0, #61	@ 0x3d
 8001ec2:	f7ff fb6d 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ec8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001ed6:	e017      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eda:	2204      	movs	r2, #4
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e013      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001ee0:	f7ff fef0 	bl	8001cc4 <BNO_GetCalibrationData>
			Calibrated = 1;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			break;
 8001ef0:	e00a      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001ef2:	f7ff feef 	bl	8001cd4 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
			break;
 8001efc:	e004      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001efe:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			break;
 8001f04:	e000      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			break;
 8001f06:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24000491 	.word	0x24000491
 8001f10:	240003f0 	.word	0x240003f0
 8001f14:	24000000 	.word	0x24000000
 8001f18:	240003e8 	.word	0x240003e8

08001f1c <BNO_GetData>:

void BNO_GetData(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f20:	2118      	movs	r1, #24
 8001f22:	2008      	movs	r0, #8
 8001f24:	f7ff fb3c 	bl	80015a0 <BNO_Read>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <BNO_Receive+0xbc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <BNO_Receive+0xc0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2bff      	cmp	r3, #255	@ 0xff
 8001f42:	d027      	beq.n	8001f94 <BNO_Receive+0x68>
 8001f44:	2bff      	cmp	r3, #255	@ 0xff
 8001f46:	dc46      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f48:	2bee      	cmp	r3, #238	@ 0xee
 8001f4a:	d017      	beq.n	8001f7c <BNO_Receive+0x50>
 8001f4c:	2bee      	cmp	r3, #238	@ 0xee
 8001f4e:	dc42      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <BNO_Receive+0x2e>
 8001f54:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f56:	d00a      	beq.n	8001f6e <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001f58:	e03d      	b.n	8001fd6 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f5e:	d002      	beq.n	8001f66 <BNO_Receive+0x3a>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2bee      	cmp	r3, #238	@ 0xee
 8001f64:	d139      	bne.n	8001fda <BNO_Receive+0xae>
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <BNO_Receive+0xc0>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	7013      	strb	r3, [r2, #0]
			break;
 8001f6c:	e035      	b.n	8001fda <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001f6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <BNO_Receive+0xc0>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e031      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <BNO_Receive+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001f88:	22ff      	movs	r2, #255	@ 0xff
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f8e:	f014 fc7a 	bl	8016886 <memset>
			break;
 8001f92:	e025      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <BNO_Receive+0xd0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4917      	ldr	r1, [pc, #92]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <BNO_Receive+0xd0>)
 8001faa:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d112      	bne.n	8001fde <BNO_Receive+0xb2>
				Counter = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <BNO_Receive+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001fcc:	220b      	movs	r2, #11
 8001fce:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001fd0:	f7ff fe20 	bl	8001c14 <BNO_EmptyingBuffer>
			break;
 8001fd4:	e003      	b.n	8001fde <BNO_Receive+0xb2>
			break;
 8001fd6:	bf00      	nop
 8001fd8:	e002      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fde:	bf00      	nop
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	240003e6 	.word	0x240003e6
 8001fec:	240003e4 	.word	0x240003e4
 8001ff0:	24000492 	.word	0x24000492
 8001ff4:	240003e5 	.word	0x240003e5
 8001ff8:	240002e4 	.word	0x240002e4
 8001ffc:	24000493 	.word	0x24000493

08002000 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <BNO_FaultManager+0x54>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d90f      	bls.n	800202e <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 800200e:	4812      	ldr	r0, [pc, #72]	@ (8002058 <BNO_FaultManager+0x58>)
 8002010:	f003 f9ac 	bl	800536c <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <BNO_FaultManager+0x5c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800201a:	2201      	movs	r2, #1
 800201c:	4910      	ldr	r1, [pc, #64]	@ (8002060 <BNO_FaultManager+0x60>)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <BNO_FaultManager+0x58>)
 8002020:	f00c fb4c 	bl	800e6bc <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002024:	22ff      	movs	r2, #255	@ 0xff
 8002026:	2100      	movs	r1, #0
 8002028:	480e      	ldr	r0, [pc, #56]	@ (8002064 <BNO_FaultManager+0x64>)
 800202a:	f014 fc2c 	bl	8016886 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <BNO_FaultManager+0x68>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d10a      	bne.n	800204c <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <BNO_FaultManager+0x58>)
 8002042:	f00c fa5b 	bl	800e4fc <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <BNO_FaultManager+0x68>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
	}
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	240003e6 	.word	0x240003e6
 8002058:	2400268c 	.word	0x2400268c
 800205c:	240003e4 	.word	0x240003e4
 8002060:	240003e3 	.word	0x240003e3
 8002064:	240002e4 	.word	0x240002e4
 8002068:	240003e5 	.word	0x240003e5

0800206c <BNO_Tasks>:

void BNO_Tasks(void){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <BNO_Tasks+0x74>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d128      	bne.n	80020ca <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <BNO_Tasks+0x78>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d81c      	bhi.n	80020ba <BNO_Tasks+0x4e>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <BNO_Tasks+0x1c>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	0800209d 	.word	0x0800209d
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020af 	.word	0x080020af
 8002094:	080020b5 	.word	0x080020b5
 8002098:	080020a3 	.word	0x080020a3
			case Init:
				BNO_Init();
 800209c:	f7ff fe52 	bl	8001d44 <BNO_Init>
				break;
 80020a0:	e00c      	b.n	80020bc <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 80020a2:	f7ff fdd3 	bl	8001c4c <BNO_SWReset>
			break;
 80020a6:	e009      	b.n	80020bc <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 80020a8:	f7ff fe68 	bl	8001d7c <BNO_Config>
				break;
 80020ac:	e006      	b.n	80020bc <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 80020ae:	f7ff feaf 	bl	8001e10 <BNO_CalibrationStatus>
				break;
 80020b2:	e003      	b.n	80020bc <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 80020b4:	f7ff ff32 	bl	8001f1c <BNO_GetData>
				break;
 80020b8:	e000      	b.n	80020bc <BNO_Tasks+0x50>

			default:
				break;
 80020ba:	bf00      	nop
		}
		++BNO_ComsCounter;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e005      	b.n	80020d6 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <BNO_Tasks+0x74>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <BNO_Tasks+0x74>)
 80020d4:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80020d6:	f7ff ff93 	bl	8002000 <BNO_FaultManager>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	240003e7 	.word	0x240003e7
 80020e4:	240003e8 	.word	0x240003e8
 80020e8:	240003e6 	.word	0x240003e6

080020ec <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80020ec:	b084      	sub	sp, #16
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	f107 001c 	add.w	r0, r7, #28
 80020fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80020fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <LED_blink+0x20>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d010      	beq.n	800212c <LED_blink+0x40>
 800210a:	e01f      	b.n	800214c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 800210c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800210e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002110:	429a      	cmp	r2, r3
 8002112:	d31f      	bcc.n	8002154 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	8c39      	ldrh	r1, [r7, #32]
 8002118:	2201      	movs	r2, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f006 ff3a 	bl	8008f94 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800212a:	e013      	b.n	8002154 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800212c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800212e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002130:	429a      	cmp	r2, r3
 8002132:	d311      	bcc.n	8002158 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	8c39      	ldrh	r1, [r7, #32]
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f006 ff2a 	bl	8008f94 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800214a:	e005      	b.n	8002158 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8002152:	e002      	b.n	800215a <LED_blink+0x6e>
				break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <LED_blink+0x6e>
				break;
 8002158:	bf00      	nop
		}

	LED.count++;
 800215a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800215c:	3301      	adds	r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	461c      	mov	r4, r3
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800217a:	b004      	add	sp, #16
 800217c:	4770      	bx	lr

0800217e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800217e:	b084      	sub	sp, #16
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af02      	add	r7, sp, #8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	f107 001c 	add.w	r0, r7, #28
 800218c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8002190:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002194:	2b01      	cmp	r3, #1
 8002196:	d117      	bne.n	80021c8 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LED_Rutine+0x28>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80021a4:	e018      	b.n	80021d8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	8c39      	ldrh	r1, [r7, #32]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 fef1 	bl	8008f94 <HAL_GPIO_WritePin>
				break;
 80021b2:	e011      	b.n	80021d8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 80021b4:	f107 001c 	add.w	r0, r7, #28
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	f7ff ff93 	bl	80020ec <LED_blink>
				break;
 80021c6:	e007      	b.n	80021d8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	8c39      	ldrh	r1, [r7, #32]
 80021cc:	2200      	movs	r2, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f006 fee0 	bl	8008f94 <HAL_GPIO_WritePin>
		LED.count = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	461c      	mov	r4, r3
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr

080021f4 <LED_Tasks>:

void LED_Tasks (void){
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80021fa:	4c24      	ldr	r4, [pc, #144]	@ (800228c <LED_Tasks+0x98>)
 80021fc:	4638      	mov	r0, r7
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <LED_Tasks+0x98>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	f7ff ffba 	bl	800217e <LED_Rutine>
 800220a:	463b      	mov	r3, r7
 800220c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8002212:	4c1e      	ldr	r4, [pc, #120]	@ (800228c <LED_Tasks+0x98>)
 8002214:	4638      	mov	r0, r7
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <LED_Tasks+0x98>)
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	3310      	adds	r3, #16
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	f7ff ffad 	bl	800217e <LED_Rutine>
 8002224:	3410      	adds	r4, #16
 8002226:	463b      	mov	r3, r7
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800222e:	4c17      	ldr	r4, [pc, #92]	@ (800228c <LED_Tasks+0x98>)
 8002230:	4638      	mov	r0, r7
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <LED_Tasks+0x98>)
 8002234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	3320      	adds	r3, #32
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	f7ff ff9f 	bl	800217e <LED_Rutine>
 8002240:	3420      	adds	r4, #32
 8002242:	463b      	mov	r3, r7
 8002244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800224a:	4c10      	ldr	r4, [pc, #64]	@ (800228c <LED_Tasks+0x98>)
 800224c:	4638      	mov	r0, r7
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <LED_Tasks+0x98>)
 8002250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	3330      	adds	r3, #48	@ 0x30
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	f7ff ff91 	bl	800217e <LED_Rutine>
 800225c:	3430      	adds	r4, #48	@ 0x30
 800225e:	463b      	mov	r3, r7
 8002260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8002266:	4c09      	ldr	r4, [pc, #36]	@ (800228c <LED_Tasks+0x98>)
 8002268:	4638      	mov	r0, r7
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <LED_Tasks+0x98>)
 800226c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	3340      	adds	r3, #64	@ 0x40
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	f7ff ff83 	bl	800217e <LED_Rutine>
 8002278:	3440      	adds	r4, #64	@ 0x40
 800227a:	463b      	mov	r3, r7
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	24000004 	.word	0x24000004

08002290 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8002294:	2205      	movs	r2, #5
 8002296:	4903      	ldr	r1, [pc, #12]	@ (80022a4 <LR03_AT+0x14>)
 8002298:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <LR03_AT+0x18>)
 800229a:	f00c f92f 	bl	800e4fc <HAL_UART_Transmit_IT>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	080188d0 	.word	0x080188d0
 80022a8:	24002720 	.word	0x24002720

080022ac <LR03_Level>:

void LR03_Level(uint8_t Level){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	d901      	bls.n	80022c0 <LR03_Level+0x14>
 80022bc:	2307      	movs	r3, #7
 80022be:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <LR03_Level+0x1e>
 80022c6:	2301      	movs	r3, #1
 80022c8:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	3330      	adds	r3, #48	@ 0x30
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <LR03_Level+0x3c>)
 80022d2:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 80022d4:	220b      	movs	r2, #11
 80022d6:	4904      	ldr	r1, [pc, #16]	@ (80022e8 <LR03_Level+0x3c>)
 80022d8:	4804      	ldr	r0, [pc, #16]	@ (80022ec <LR03_Level+0x40>)
 80022da:	f00c f90f 	bl	800e4fc <HAL_UART_Transmit_IT>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	24000054 	.word	0x24000054
 80022ec:	24002720 	.word	0x24002720

080022f0 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <LR03_Receive+0x30>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <LR03_Receive+0x34>)
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <LR03_Receive+0x30>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <LR03_Receive+0x30>)
 8002310:	701a      	strb	r2, [r3, #0]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	24000595 	.word	0x24000595
 8002324:	24000494 	.word	0x24000494

08002328 <LR03_StateMachine>:

void LR03_StateMachine(void){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

	switch (Test_1) {
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <LR03_StateMachine+0x2c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d002      	beq.n	800233a <LR03_StateMachine+0x12>
 8002334:	2b02      	cmp	r3, #2
 8002336:	d003      	beq.n	8002340 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8002338:	e006      	b.n	8002348 <LR03_StateMachine+0x20>
			LR03_AT();
 800233a:	f7ff ffa9 	bl	8002290 <LR03_AT>
			break;
 800233e:	e003      	b.n	8002348 <LR03_StateMachine+0x20>
			LR03_Level(7);
 8002340:	2007      	movs	r0, #7
 8002342:	f7ff ffb3 	bl	80022ac <LR03_Level>
			break;
 8002346:	bf00      	nop
	}
	Test_1 = 0;
 8002348:	4b02      	ldr	r3, [pc, #8]	@ (8002354 <LR03_StateMachine+0x2c>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	24000594 	.word	0x24000594

08002358 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 800235c:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <PWM_Assing+0xb0>)
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8002366:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <PWM_Assing+0xb0>)
 8002368:	885a      	ldrh	r2, [r3, #2]
 800236a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8002370:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <PWM_Assing+0xb0>)
 8002372:	889a      	ldrh	r2, [r3, #4]
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <PWM_Assing+0xb4>)
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <PWM_Assing+0xb0>)
 800237a:	88da      	ldrh	r2, [r3, #6]
 800237c:	4b23      	ldr	r3, [pc, #140]	@ (800240c <PWM_Assing+0xb4>)
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <PWM_Assing+0xb0>)
 8002382:	891a      	ldrh	r2, [r3, #8]
 8002384:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <PWM_Assing+0xb8>)
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8002388:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <PWM_Assing+0xb0>)
 800238a:	895a      	ldrh	r2, [r3, #10]
 800238c:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <PWM_Assing+0xb8>)
 800238e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <PWM_Assing+0xb0>)
 8002392:	899a      	ldrh	r2, [r3, #12]
 8002394:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <PWM_Assing+0xb8>)
 8002396:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <PWM_Assing+0xb0>)
 800239a:	89da      	ldrh	r2, [r3, #14]
 800239c:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <PWM_Assing+0xb8>)
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <PWM_Assing+0xb0>)
 80023a2:	8a1a      	ldrh	r2, [r3, #16]
 80023a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80023aa:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <PWM_Assing+0xb0>)
 80023ac:	8a5a      	ldrh	r2, [r3, #18]
 80023ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023b4:	2100      	movs	r1, #0
 80023b6:	4817      	ldr	r0, [pc, #92]	@ (8002414 <PWM_Assing+0xbc>)
 80023b8:	f00b f822 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023bc:	2104      	movs	r1, #4
 80023be:	4815      	ldr	r0, [pc, #84]	@ (8002414 <PWM_Assing+0xbc>)
 80023c0:	f00b f81e 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023c4:	2108      	movs	r1, #8
 80023c6:	4813      	ldr	r0, [pc, #76]	@ (8002414 <PWM_Assing+0xbc>)
 80023c8:	f00b f81a 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80023cc:	210c      	movs	r1, #12
 80023ce:	4811      	ldr	r0, [pc, #68]	@ (8002414 <PWM_Assing+0xbc>)
 80023d0:	f00b f816 	bl	800d400 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80023d4:	2100      	movs	r1, #0
 80023d6:	4810      	ldr	r0, [pc, #64]	@ (8002418 <PWM_Assing+0xc0>)
 80023d8:	f00b f812 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80023dc:	2104      	movs	r1, #4
 80023de:	480e      	ldr	r0, [pc, #56]	@ (8002418 <PWM_Assing+0xc0>)
 80023e0:	f00b f80e 	bl	800d400 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80023e4:	2100      	movs	r1, #0
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <PWM_Assing+0xc4>)
 80023e8:	f00b f80a 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80023ec:	2104      	movs	r1, #4
 80023ee:	480b      	ldr	r0, [pc, #44]	@ (800241c <PWM_Assing+0xc4>)
 80023f0:	f00b f806 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80023f4:	2108      	movs	r1, #8
 80023f6:	4809      	ldr	r0, [pc, #36]	@ (800241c <PWM_Assing+0xc4>)
 80023f8:	f00b f802 	bl	800d400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80023fc:	210c      	movs	r1, #12
 80023fe:	4807      	ldr	r0, [pc, #28]	@ (800241c <PWM_Assing+0xc4>)
 8002400:	f00a fffe 	bl	800d400 <HAL_TIM_PWM_Start>
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	24000060 	.word	0x24000060
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800
 8002414:	24002434 	.word	0x24002434
 8002418:	24002480 	.word	0x24002480
 800241c:	240024cc 	.word	0x240024cc

08002420 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8002424:	2201      	movs	r2, #1
 8002426:	4903      	ldr	r1, [pc, #12]	@ (8002434 <SBUS_init+0x14>)
 8002428:	4803      	ldr	r0, [pc, #12]	@ (8002438 <SBUS_init+0x18>)
 800242a:	f00c f947 	bl	800e6bc <HAL_UART_Receive_DMA>

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	240005b1 	.word	0x240005b1
 8002438:	240025f8 	.word	0x240025f8

0800243c <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <SBUS_Receive+0x8c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <SBUS_Receive+0x18>
 800244e:	2b01      	cmp	r3, #1
 8002450:	d017      	beq.n	8002482 <SBUS_Receive+0x46>
 8002452:	e02f      	b.n	80024b4 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	d10f      	bne.n	800247a <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <SBUS_Receive+0x90>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <SBUS_Receive+0x94>)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8002466:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <SBUS_Receive+0x8c>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
				RxCount++;
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <SBUS_Receive+0x90>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <SBUS_Receive+0x90>)
 8002476:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8002478:	e021      	b.n	80024be <SBUS_Receive+0x82>
				RxCount = 0;
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <SBUS_Receive+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			break;
 8002480:	e01d      	b.n	80024be <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8002482:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <SBUS_Receive+0x90>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <SBUS_Receive+0x94>)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800248e:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <SBUS_Receive+0x90>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <SBUS_Receive+0x90>)
 8002498:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <SBUS_Receive+0x90>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b18      	cmp	r3, #24
 80024a0:	d10c      	bne.n	80024bc <SBUS_Receive+0x80>
				RxCount = 0;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <SBUS_Receive+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <SBUS_Receive+0x8c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80024ae:	f000 f845 	bl	800253c <SBUS_getData>
			}
			break;
 80024b2:	e003      	b.n	80024bc <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SBUS_Receive+0x8c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
			break;
 80024ba:	e000      	b.n	80024be <SBUS_Receive+0x82>
			break;
 80024bc:	bf00      	nop
	}
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	240005b2 	.word	0x240005b2
 80024cc:	240005b3 	.word	0x240005b3
 80024d0:	24000598 	.word	0x24000598

080024d4 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <Temp_BypassFunct+0x60>)
 80024da:	885a      	ldrh	r2, [r3, #2]
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <Temp_BypassFunct+0x64>)
 80024de:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <Temp_BypassFunct+0x60>)
 80024e2:	889a      	ldrh	r2, [r3, #4]
 80024e4:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <Temp_BypassFunct+0x64>)
 80024e6:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <Temp_BypassFunct+0x60>)
 80024ea:	88da      	ldrh	r2, [r3, #6]
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <Temp_BypassFunct+0x64>)
 80024ee:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <Temp_BypassFunct+0x60>)
 80024f2:	891a      	ldrh	r2, [r3, #8]
 80024f4:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <Temp_BypassFunct+0x64>)
 80024f6:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <Temp_BypassFunct+0x60>)
 80024fa:	895a      	ldrh	r2, [r3, #10]
 80024fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <Temp_BypassFunct+0x64>)
 80024fe:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <Temp_BypassFunct+0x60>)
 8002502:	899a      	ldrh	r2, [r3, #12]
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <Temp_BypassFunct+0x64>)
 8002506:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <Temp_BypassFunct+0x60>)
 800250a:	89da      	ldrh	r2, [r3, #14]
 800250c:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <Temp_BypassFunct+0x64>)
 800250e:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <Temp_BypassFunct+0x60>)
 8002512:	8a1a      	ldrh	r2, [r3, #16]
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <Temp_BypassFunct+0x64>)
 8002516:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <Temp_BypassFunct+0x60>)
 800251a:	8a5a      	ldrh	r2, [r3, #18]
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <Temp_BypassFunct+0x64>)
 800251e:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <Temp_BypassFunct+0x60>)
 8002522:	8a9a      	ldrh	r2, [r3, #20]
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <Temp_BypassFunct+0x64>)
 8002526:	825a      	strh	r2, [r3, #18]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	24000074 	.word	0x24000074
 8002538:	24000060 	.word	0x24000060

0800253c <SBUS_getData>:

void SBUS_getData(void){
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8002540:	4b95      	ldr	r3, [pc, #596]	@ (8002798 <SBUS_getData+0x25c>)
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	b21a      	sxth	r2, r3
 8002546:	4b94      	ldr	r3, [pc, #592]	@ (8002798 <SBUS_getData+0x25c>)
 8002548:	789b      	ldrb	r3, [r3, #2]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b21b      	sxth	r3, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b90      	ldr	r3, [pc, #576]	@ (800279c <SBUS_getData+0x260>)
 800255c:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800255e:	4b8e      	ldr	r3, [pc, #568]	@ (8002798 <SBUS_getData+0x25c>)
 8002560:	789b      	ldrb	r3, [r3, #2]
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	b21a      	sxth	r2, r3
 8002568:	4b8b      	ldr	r3, [pc, #556]	@ (8002798 <SBUS_getData+0x25c>)
 800256a:	78db      	ldrb	r3, [r3, #3]
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	b21b      	sxth	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b21b      	sxth	r3, r3
 8002574:	b29b      	uxth	r3, r3
 8002576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b87      	ldr	r3, [pc, #540]	@ (800279c <SBUS_getData+0x260>)
 800257e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8002580:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <SBUS_getData+0x25c>)
 8002582:	78db      	ldrb	r3, [r3, #3]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	b2db      	uxtb	r3, r3
 8002588:	b21a      	sxth	r2, r3
 800258a:	4b83      	ldr	r3, [pc, #524]	@ (8002798 <SBUS_getData+0x25c>)
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21a      	sxth	r2, r3
 8002596:	4b80      	ldr	r3, [pc, #512]	@ (8002798 <SBUS_getData+0x25c>)
 8002598:	795b      	ldrb	r3, [r3, #5]
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b7c      	ldr	r3, [pc, #496]	@ (800279c <SBUS_getData+0x260>)
 80025ac:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80025ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002798 <SBUS_getData+0x25c>)
 80025b0:	795b      	ldrb	r3, [r3, #5]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	4b77      	ldr	r3, [pc, #476]	@ (8002798 <SBUS_getData+0x25c>)
 80025ba:	799b      	ldrb	r3, [r3, #6]
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b73      	ldr	r3, [pc, #460]	@ (800279c <SBUS_getData+0x260>)
 80025ce:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80025d0:	4b71      	ldr	r3, [pc, #452]	@ (8002798 <SBUS_getData+0x25c>)
 80025d2:	799b      	ldrb	r3, [r3, #6]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	b21a      	sxth	r2, r3
 80025da:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <SBUS_getData+0x25c>)
 80025dc:	79db      	ldrb	r3, [r3, #7]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b6b      	ldr	r3, [pc, #428]	@ (800279c <SBUS_getData+0x260>)
 80025f0:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 80025f2:	4b69      	ldr	r3, [pc, #420]	@ (8002798 <SBUS_getData+0x25c>)
 80025f4:	79db      	ldrb	r3, [r3, #7]
 80025f6:	09db      	lsrs	r3, r3, #7
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <SBUS_getData+0x25c>)
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21a      	sxth	r2, r3
 8002608:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <SBUS_getData+0x25c>)
 800260a:	7a5b      	ldrb	r3, [r3, #9]
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	b21b      	sxth	r3, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	b21b      	sxth	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b5f      	ldr	r3, [pc, #380]	@ (800279c <SBUS_getData+0x260>)
 800261e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8002620:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <SBUS_getData+0x25c>)
 8002622:	7a5b      	ldrb	r3, [r3, #9]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	b21a      	sxth	r2, r3
 800262a:	4b5b      	ldr	r3, [pc, #364]	@ (8002798 <SBUS_getData+0x25c>)
 800262c:	7a9b      	ldrb	r3, [r3, #10]
 800262e:	019b      	lsls	r3, r3, #6
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b57      	ldr	r3, [pc, #348]	@ (800279c <SBUS_getData+0x260>)
 8002640:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8002642:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <SBUS_getData+0x25c>)
 8002644:	7a9b      	ldrb	r3, [r3, #10]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b52      	ldr	r3, [pc, #328]	@ (8002798 <SBUS_getData+0x25c>)
 800264e:	7adb      	ldrb	r3, [r3, #11]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	b21b      	sxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b21b      	sxth	r3, r3
 8002658:	b29b      	uxth	r3, r3
 800265a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b4e      	ldr	r3, [pc, #312]	@ (800279c <SBUS_getData+0x260>)
 8002662:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8002664:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <SBUS_getData+0x25c>)
 8002666:	7b1b      	ldrb	r3, [r3, #12]
 8002668:	b21a      	sxth	r2, r3
 800266a:	4b4b      	ldr	r3, [pc, #300]	@ (8002798 <SBUS_getData+0x25c>)
 800266c:	7b5b      	ldrb	r3, [r3, #13]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	b29b      	uxth	r3, r3
 8002678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <SBUS_getData+0x260>)
 8002680:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8002682:	4b45      	ldr	r3, [pc, #276]	@ (8002798 <SBUS_getData+0x25c>)
 8002684:	7b5b      	ldrb	r3, [r3, #13]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	b21a      	sxth	r2, r3
 800268c:	4b42      	ldr	r3, [pc, #264]	@ (8002798 <SBUS_getData+0x25c>)
 800268e:	7b9b      	ldrb	r3, [r3, #14]
 8002690:	015b      	lsls	r3, r3, #5
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b3e      	ldr	r3, [pc, #248]	@ (800279c <SBUS_getData+0x260>)
 80026a2:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80026a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002798 <SBUS_getData+0x25c>)
 80026a6:	7b9b      	ldrb	r3, [r3, #14]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <SBUS_getData+0x25c>)
 80026b0:	7bdb      	ldrb	r3, [r3, #15]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <SBUS_getData+0x25c>)
 80026bc:	7c1b      	ldrb	r3, [r3, #16]
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <SBUS_getData+0x260>)
 80026d0:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80026d2:	4b31      	ldr	r3, [pc, #196]	@ (8002798 <SBUS_getData+0x25c>)
 80026d4:	7c1b      	ldrb	r3, [r3, #16]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002798 <SBUS_getData+0x25c>)
 80026de:	7c5b      	ldrb	r3, [r3, #17]
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <SBUS_getData+0x260>)
 80026f2:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 80026f4:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <SBUS_getData+0x25c>)
 80026f6:	7c5b      	ldrb	r3, [r3, #17]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b26      	ldr	r3, [pc, #152]	@ (8002798 <SBUS_getData+0x25c>)
 8002700:	7c9b      	ldrb	r3, [r3, #18]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b21b      	sxth	r3, r3
 800270a:	b29b      	uxth	r3, r3
 800270c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b22      	ldr	r3, [pc, #136]	@ (800279c <SBUS_getData+0x260>)
 8002714:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <SBUS_getData+0x25c>)
 8002718:	7c9b      	ldrb	r3, [r3, #18]
 800271a:	09db      	lsrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <SBUS_getData+0x25c>)
 8002722:	7cdb      	ldrb	r3, [r3, #19]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	b21b      	sxth	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b21a      	sxth	r2, r3
 800272c:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <SBUS_getData+0x25c>)
 800272e:	7d1b      	ldrb	r3, [r3, #20]
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21b      	sxth	r3, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <SBUS_getData+0x260>)
 8002742:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <SBUS_getData+0x25c>)
 8002746:	7d1b      	ldrb	r3, [r3, #20]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b21a      	sxth	r2, r3
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <SBUS_getData+0x25c>)
 8002750:	7d5b      	ldrb	r3, [r3, #21]
 8002752:	019b      	lsls	r3, r3, #6
 8002754:	b21b      	sxth	r3, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	b21b      	sxth	r3, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <SBUS_getData+0x260>)
 8002764:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8002766:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <SBUS_getData+0x25c>)
 8002768:	7d5b      	ldrb	r3, [r3, #21]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	b21a      	sxth	r2, r3
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <SBUS_getData+0x25c>)
 8002772:	7d9b      	ldrb	r3, [r3, #22]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b21b      	sxth	r3, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <SBUS_getData+0x260>)
 8002786:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <SBUS_getData+0x260>)
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002794:	e00a      	b.n	80027ac <SBUS_getData+0x270>
 8002796:	bf00      	nop
 8002798:	24000598 	.word	0x24000598
 800279c:	24000074 	.word	0x24000074
 80027a0:	43b00000 	.word	0x43b00000
 80027a4:	44a80000 	.word	0x44a80000
 80027a8:	447a0000 	.word	0x447a0000
 80027ac:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80027a0 <SBUS_getData+0x264>
 80027b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027b4:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80027a4 <SBUS_getData+0x268>
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80027a8 <SBUS_getData+0x26c>
 80027c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4bd1      	ldr	r3, [pc, #836]	@ (8002b1c <SBUS_getData+0x5e0>)
 80027d6:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80027d8:	4bd0      	ldr	r3, [pc, #832]	@ (8002b1c <SBUS_getData+0x5e0>)
 80027da:	889b      	ldrh	r3, [r3, #4]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e4:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002b20 <SBUS_getData+0x5e4>
 80027e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027ec:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002b24 <SBUS_getData+0x5e8>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002b28 <SBUS_getData+0x5ec>
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002800:	ee17 3a90 	vmov	r3, s15
 8002804:	b29b      	uxth	r3, r3
 8002806:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800280a:	b29a      	uxth	r2, r3
 800280c:	4bc3      	ldr	r3, [pc, #780]	@ (8002b1c <SBUS_getData+0x5e0>)
 800280e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8002810:	4bc2      	ldr	r3, [pc, #776]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002812:	88db      	ldrh	r3, [r3, #6]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281c:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002b20 <SBUS_getData+0x5e4>
 8002820:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002824:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002b24 <SBUS_getData+0x5e8>
 8002828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282c:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002b28 <SBUS_getData+0x5ec>
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002838:	ee17 3a90 	vmov	r3, s15
 800283c:	b29b      	uxth	r3, r3
 800283e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002842:	b29a      	uxth	r2, r3
 8002844:	4bb5      	ldr	r3, [pc, #724]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002846:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8002848:	4bb4      	ldr	r3, [pc, #720]	@ (8002b1c <SBUS_getData+0x5e0>)
 800284a:	891b      	ldrh	r3, [r3, #8]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002b20 <SBUS_getData+0x5e4>
 8002858:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800285c:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002b24 <SBUS_getData+0x5e8>
 8002860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002864:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002b28 <SBUS_getData+0x5ec>
 8002868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002870:	ee17 3a90 	vmov	r3, s15
 8002874:	b29b      	uxth	r3, r3
 8002876:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800287a:	b29a      	uxth	r2, r3
 800287c:	4ba7      	ldr	r3, [pc, #668]	@ (8002b1c <SBUS_getData+0x5e0>)
 800287e:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8002880:	4ba6      	ldr	r3, [pc, #664]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002882:	895b      	ldrh	r3, [r3, #10]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002b20 <SBUS_getData+0x5e4>
 8002890:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002894:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b24 <SBUS_getData+0x5e8>
 8002898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289c:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002b28 <SBUS_getData+0x5ec>
 80028a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 3a90 	vmov	r3, s15
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b99      	ldr	r3, [pc, #612]	@ (8002b1c <SBUS_getData+0x5e0>)
 80028b6:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80028b8:	4b98      	ldr	r3, [pc, #608]	@ (8002b1c <SBUS_getData+0x5e0>)
 80028ba:	899b      	ldrh	r3, [r3, #12]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002b20 <SBUS_getData+0x5e4>
 80028c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028cc:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b24 <SBUS_getData+0x5e8>
 80028d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d4:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002b28 <SBUS_getData+0x5ec>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b8b      	ldr	r3, [pc, #556]	@ (8002b1c <SBUS_getData+0x5e0>)
 80028ee:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 80028f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002b1c <SBUS_getData+0x5e0>)
 80028f2:	89db      	ldrh	r3, [r3, #14]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002b20 <SBUS_getData+0x5e4>
 8002900:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002904:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002b24 <SBUS_getData+0x5e8>
 8002908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002b28 <SBUS_getData+0x5ec>
 8002910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002918:	ee17 3a90 	vmov	r3, s15
 800291c:	b29b      	uxth	r3, r3
 800291e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002926:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8002928:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <SBUS_getData+0x5e0>)
 800292a:	8a1b      	ldrh	r3, [r3, #16]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002b20 <SBUS_getData+0x5e4>
 8002938:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800293c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b24 <SBUS_getData+0x5e8>
 8002940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002944:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002b28 <SBUS_getData+0x5ec>
 8002948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800294c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002950:	ee17 3a90 	vmov	r3, s15
 8002954:	b29b      	uxth	r3, r3
 8002956:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <SBUS_getData+0x5e0>)
 800295e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8002960:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002962:	8a5b      	ldrh	r3, [r3, #18]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002b20 <SBUS_getData+0x5e4>
 8002970:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002974:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002b24 <SBUS_getData+0x5e8>
 8002978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297c:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002b28 <SBUS_getData+0x5ec>
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002988:	ee17 3a90 	vmov	r3, s15
 800298c:	b29b      	uxth	r3, r3
 800298e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002996:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8002998:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <SBUS_getData+0x5e0>)
 800299a:	8a9b      	ldrh	r3, [r3, #20]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002b20 <SBUS_getData+0x5e4>
 80029a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029ac:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002b24 <SBUS_getData+0x5e8>
 80029b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b4:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002b28 <SBUS_getData+0x5ec>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 3a90 	vmov	r3, s15
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <SBUS_getData+0x5e0>)
 80029ce:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80029d0:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <SBUS_getData+0x5e0>)
 80029d2:	8adb      	ldrh	r3, [r3, #22]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029dc:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002b20 <SBUS_getData+0x5e4>
 80029e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e4:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b24 <SBUS_getData+0x5e8>
 80029e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ec:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002b28 <SBUS_getData+0x5ec>
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b45      	ldr	r3, [pc, #276]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a06:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a0a:	8b1b      	ldrh	r3, [r3, #24]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a14:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002b20 <SBUS_getData+0x5e4>
 8002a18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a1c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002b24 <SBUS_getData+0x5e8>
 8002a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a24:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002b28 <SBUS_getData+0x5ec>
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a3e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002a40:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a42:	8b5b      	ldrh	r3, [r3, #26]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002b20 <SBUS_getData+0x5e4>
 8002a50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a54:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002b24 <SBUS_getData+0x5e8>
 8002a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a5c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002b28 <SBUS_getData+0x5ec>
 8002a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a68:	ee17 3a90 	vmov	r3, s15
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a76:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002a7a:	8b9b      	ldrh	r3, [r3, #28]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a84:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002b20 <SBUS_getData+0x5e4>
 8002a88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a8c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002b24 <SBUS_getData+0x5e8>
 8002a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a94:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002b28 <SBUS_getData+0x5ec>
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa0:	ee17 3a90 	vmov	r3, s15
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002aae:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002ab2:	8bdb      	ldrh	r3, [r3, #30]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b20 <SBUS_getData+0x5e4>
 8002ac0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ac4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002b24 <SBUS_getData+0x5e8>
 8002ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002acc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002b28 <SBUS_getData+0x5ec>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad8:	ee17 3a90 	vmov	r3, s15
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002ae6:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <SBUS_getData+0x5e0>)
 8002aea:	8c1b      	ldrh	r3, [r3, #32]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002b20 <SBUS_getData+0x5e4>
 8002af8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002afc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002b24 <SBUS_getData+0x5e8>
 8002b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b04:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b28 <SBUS_getData+0x5ec>
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b10:	ee17 3a90 	vmov	r3, s15
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b1a:	e007      	b.n	8002b2c <SBUS_getData+0x5f0>
 8002b1c:	24000074 	.word	0x24000074
 8002b20:	43b00000 	.word	0x43b00000
 8002b24:	44a80000 	.word	0x44a80000
 8002b28:	447a0000 	.word	0x447a0000
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b30:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b34:	7dda      	ldrb	r2, [r3, #23]
 8002b36:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b38:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b3c:	7ddb      	ldrb	r3, [r3, #23]
 8002b3e:	2b07      	cmp	r3, #7
 8002b40:	d90a      	bls.n	8002b58 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b44:	7ddb      	ldrb	r3, [r3, #23]
 8002b46:	3b08      	subs	r3, #8
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b4c:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002b4e:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b50:	2235      	movs	r2, #53	@ 0x35
 8002b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002b56:	e003      	b.n	8002b60 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b5a:	22aa      	movs	r2, #170	@ 0xaa
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002b60:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b62:	7ddb      	ldrb	r3, [r3, #23]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d90a      	bls.n	8002b7e <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b6a:	7ddb      	ldrb	r3, [r3, #23]
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b72:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b76:	2210      	movs	r2, #16
 8002b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b7c:	e003      	b.n	8002b86 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b80:	22aa      	movs	r2, #170	@ 0xaa
 8002b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002b86:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b88:	7ddb      	ldrb	r3, [r3, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d90a      	bls.n	8002ba4 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b90:	7ddb      	ldrb	r3, [r3, #23]
 8002b92:	3b02      	subs	r3, #2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002b98:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002ba2:	e003      	b.n	8002bac <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <SBUS_getData+0x6a0>)
 8002bae:	7ddb      	ldrb	r3, [r3, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002bbc:	e003      	b.n	8002bc6 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002bc6:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <SBUS_getData+0x69c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002bce:	f7ff fc81 	bl	80024d4 <Temp_BypassFunct>

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	24000074 	.word	0x24000074
 8002bdc:	24000598 	.word	0x24000598

08002be0 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002be6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002bea:	2bff      	cmp	r3, #255	@ 0xff
 8002bec:	d00c      	beq.n	8002c08 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002bf0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002bfa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002c00:	22aa      	movs	r2, #170	@ 0xaa
 8002c02:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002c06:	e007      	b.n	8002c18 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SBUS_IntegrityVerification+0x44>)
 8002c12:	2235      	movs	r2, #53	@ 0x35
 8002c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	24000074 	.word	0x24000074

08002c28 <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e28 <SD_blackbox_refresh+0x200>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7e      	ldr	r2, [pc, #504]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c32:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002c34:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c3a:	497c      	ldr	r1, [pc, #496]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c3c:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 8002c40:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c46:	4979      	ldr	r1, [pc, #484]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002c4c:	4b78      	ldr	r3, [pc, #480]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c52:	4976      	ldr	r1, [pc, #472]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c54:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002c58:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c5a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002c5e:	4973      	ldr	r1, [pc, #460]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c60:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002c64:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c66:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002c6a:	4970      	ldr	r1, [pc, #448]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 8002c70:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002c72:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002c76:	496d      	ldr	r1, [pc, #436]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c78:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002c7c:	496b      	ldr	r1, [pc, #428]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002c8a:	4968      	ldr	r1, [pc, #416]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002c98:	4964      	ldr	r1, [pc, #400]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002ca6:	4b62      	ldr	r3, [pc, #392]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002ca8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002cac:	495f      	ldr	r1, [pc, #380]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cae:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002cb4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002cb8:	495c      	ldr	r1, [pc, #368]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002e30 <SD_blackbox_refresh+0x208>)
 8002cc0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002cc4:	4959      	ldr	r1, [pc, #356]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cc6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002cca:	4b5a      	ldr	r3, [pc, #360]	@ (8002e34 <SD_blackbox_refresh+0x20c>)
 8002ccc:	8a1a      	ldrh	r2, [r3, #16]
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cd0:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 8002cd4:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 8002cda:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 8002ce0:	4b52      	ldr	r3, [pc, #328]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 8002ce8:	4b52      	ldr	r3, [pc, #328]	@ (8002e34 <SD_blackbox_refresh+0x20c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002cf0:	4b51      	ldr	r3, [pc, #324]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cf6:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002d02:	4b4d      	ldr	r3, [pc, #308]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d04:	885a      	ldrh	r2, [r3, #2]
 8002d06:	4b49      	ldr	r3, [pc, #292]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d08:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d0e:	889a      	ldrh	r2, [r3, #4]
 8002d10:	4b46      	ldr	r3, [pc, #280]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d12:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002d16:	4b48      	ldr	r3, [pc, #288]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d18:	88da      	ldrh	r2, [r3, #6]
 8002d1a:	4b44      	ldr	r3, [pc, #272]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d1c:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002d20:	4b45      	ldr	r3, [pc, #276]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d22:	891a      	ldrh	r2, [r3, #8]
 8002d24:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d26:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002d2a:	4b43      	ldr	r3, [pc, #268]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d2c:	895a      	ldrh	r2, [r3, #10]
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d30:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002d34:	4b40      	ldr	r3, [pc, #256]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d36:	899a      	ldrh	r2, [r3, #12]
 8002d38:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d3a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d40:	89da      	ldrh	r2, [r3, #14]
 8002d42:	4b3a      	ldr	r3, [pc, #232]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d44:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002d48:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d4a:	8a1a      	ldrh	r2, [r3, #16]
 8002d4c:	4b37      	ldr	r3, [pc, #220]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d4e:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002d52:	4b39      	ldr	r3, [pc, #228]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d54:	8a5a      	ldrh	r2, [r3, #18]
 8002d56:	4b35      	ldr	r3, [pc, #212]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d58:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d5e:	8a9a      	ldrh	r2, [r3, #20]
 8002d60:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d62:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d68:	8ada      	ldrh	r2, [r3, #22]
 8002d6a:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d6c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002d70:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d72:	8b1a      	ldrh	r2, [r3, #24]
 8002d74:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d76:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d7c:	8b5a      	ldrh	r2, [r3, #26]
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d80:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002d84:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d86:	8b9a      	ldrh	r2, [r3, #28]
 8002d88:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d8a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d90:	8bda      	ldrh	r2, [r3, #30]
 8002d92:	4b26      	ldr	r3, [pc, #152]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d94:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002d98:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002d9a:	8c1a      	ldrh	r2, [r3, #32]
 8002d9c:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002d9e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002da2:	4b25      	ldr	r3, [pc, #148]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002da4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002da8:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002daa:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002dae:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <SD_blackbox_refresh+0x210>)
 8002db0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002db6:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002dc0:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002dc6:	885a      	ldrh	r2, [r3, #2]
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002dca:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002dd0:	889a      	ldrh	r2, [r3, #4]
 8002dd2:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002dd4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002dda:	88da      	ldrh	r2, [r3, #6]
 8002ddc:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002dde:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002de4:	891a      	ldrh	r2, [r3, #8]
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002de8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002dee:	895a      	ldrh	r2, [r3, #10]
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002df2:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002df8:	899a      	ldrh	r2, [r3, #12]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002dfc:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002e02:	89da      	ldrh	r2, [r3, #14]
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002e06:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002e0c:	8a1a      	ldrh	r2, [r3, #16]
 8002e0e:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002e10:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <SD_blackbox_refresh+0x214>)
 8002e16:	8a5a      	ldrh	r2, [r3, #18]
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <SD_blackbox_refresh+0x204>)
 8002e1a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	240022d0 	.word	0x240022d0
 8002e2c:	240017e0 	.word	0x240017e0
 8002e30:	240003f0 	.word	0x240003f0
 8002e34:	240002ac 	.word	0x240002ac
 8002e38:	24000074 	.word	0x24000074
 8002e3c:	24000060 	.word	0x24000060

08002e40 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8002e46:	f7ff feef 	bl	8002c28 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <SD_blackbox_write+0xa4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <SD_blackbox_write+0xa8>)
 8002e50:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8002e52:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <SD_blackbox_write+0xac>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4613      	mov	r3, r2
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	4a24      	ldr	r2, [pc, #144]	@ (8002ef0 <SD_blackbox_write+0xb0>)
 8002e60:	4413      	add	r3, r2
 8002e62:	22b0      	movs	r2, #176	@ 0xb0
 8002e64:	4920      	ldr	r1, [pc, #128]	@ (8002ee8 <SD_blackbox_write+0xa8>)
 8002e66:	4618      	mov	r0, r3
 8002e68:	f013 fda7 	bl	80169ba <memcpy>

	if(WriteCount == 15){
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <SD_blackbox_write+0xac>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d129      	bne.n	8002ec8 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8002e74:	2300      	movs	r3, #0
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	e00d      	b.n	8002e96 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <SD_blackbox_write+0xb0>)
 8002e84:	1899      	adds	r1, r3, r2
 8002e86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <SD_blackbox_write+0xb4>)
 8002e88:	22b0      	movs	r2, #176	@ 0xb0
 8002e8a:	481b      	ldr	r0, [pc, #108]	@ (8002ef8 <SD_blackbox_write+0xb8>)
 8002e8c:	f010 f8af 	bl	8012fee <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	3301      	adds	r3, #1
 8002e94:	71fb      	strb	r3, [r7, #7]
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d9ee      	bls.n	8002e7a <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8002e9c:	4816      	ldr	r0, [pc, #88]	@ (8002ef8 <SD_blackbox_write+0xb8>)
 8002e9e:	f010 fa4a 	bl	8013336 <f_sync>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <SD_blackbox_write+0xbc>)
 8002ea8:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <SD_blackbox_write+0xac>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <SD_blackbox_write+0xc0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <SD_blackbox_write+0xc0>)
 8002eba:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <SD_blackbox_write+0xa4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a08      	ldr	r2, [pc, #32]	@ (8002ee4 <SD_blackbox_write+0xa4>)
 8002ec4:	6013      	str	r3, [r2, #0]
		return;
 8002ec6:	e00a      	b.n	8002ede <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <SD_blackbox_write+0xac>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <SD_blackbox_write+0xac>)
 8002ed2:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <SD_blackbox_write+0xa4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a02      	ldr	r2, [pc, #8]	@ (8002ee4 <SD_blackbox_write+0xa4>)
 8002edc:	6013      	str	r3, [r2, #0]
}
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	24001890 	.word	0x24001890
 8002ee8:	240017e0 	.word	0x240017e0
 8002eec:	24001894 	.word	0x24001894
 8002ef0:	240007ec 	.word	0x240007ec
 8002ef4:	240007e8 	.word	0x240007e8
 8002ef8:	240005b4 	.word	0x240005b4
 8002efc:	240007e4 	.word	0x240007e4
 8002f00:	24001896 	.word	0x24001896

08002f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <MX_DMA_Init+0x5c>)
 8002f0c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002f10:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <MX_DMA_Init+0x5c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_DMA_Init+0x5c>)
 8002f1c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2105      	movs	r1, #5
 8002f2c:	200b      	movs	r0, #11
 8002f2e:	f002 fb93 	bl	8005658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002f32:	200b      	movs	r0, #11
 8002f34:	f002 fbaa 	bl	800568c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	200c      	movs	r0, #12
 8002f3e:	f002 fb8b 	bl	8005658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f42:	200c      	movs	r0, #12
 8002f44:	f002 fba2 	bl	800568c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	200d      	movs	r0, #13
 8002f4e:	f002 fb83 	bl	8005658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f52:	200d      	movs	r0, #13
 8002f54:	f002 fb9a 	bl	800568c <HAL_NVIC_EnableIRQ>

}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58024400 	.word	0x58024400

08002f64 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <MX_FDCAN1_Init+0xc4>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002f80:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002f86:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f8e:	2210      	movs	r2, #16
 8002f90:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002f92:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002f98:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002f9e:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002fc2:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002fc8:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002fee:	2204      	movs	r2, #4
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002ffe:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8003006:	2200      	movs	r2, #0
 8003008:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 800300c:	2204      	movs	r2, #4
 800300e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003010:	4804      	ldr	r0, [pc, #16]	@ (8003024 <MX_FDCAN1_Init+0xc0>)
 8003012:	f005 faab 	bl	800856c <HAL_FDCAN_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800301c:	f001 f82e 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	24001898 	.word	0x24001898
 8003028:	4000a000 	.word	0x4000a000

0800302c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b0ba      	sub	sp, #232	@ 0xe8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	22c0      	movs	r2, #192	@ 0xc0
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f013 fc1a 	bl	8016886 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2f      	ldr	r2, [pc, #188]	@ (8003114 <HAL_FDCAN_MspInit+0xe8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d157      	bne.n	800310c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800305c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003068:	2304      	movs	r3, #4
 800306a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 800306c:	2308      	movs	r3, #8
 800306e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003078:	2302      	movs	r3, #2
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800307c:	23c0      	movs	r3, #192	@ 0xc0
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8003088:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f007 f905 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80030a0:	f000 ffec 	bl	800407c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80030a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80030aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80030b4:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030b6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030c8:	4a13      	ldr	r2, [pc, #76]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80030d2:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_FDCAN_MspInit+0xec>)
 80030d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80030e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80030fa:	2309      	movs	r3, #9
 80030fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003104:	4619      	mov	r1, r3
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <HAL_FDCAN_MspInit+0xf0>)
 8003108:	f005 fd94 	bl	8008c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800310c:	bf00      	nop
 800310e:	37e8      	adds	r7, #232	@ 0xe8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	4000a000 	.word	0x4000a000
 8003118:	58024400 	.word	0x58024400
 800311c:	58020000 	.word	0x58020000

08003120 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a07      	ldr	r2, [pc, #28]	@ (800314c <vApplicationGetIdleTaskMemory+0x2c>)
 8003130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4a06      	ldr	r2, [pc, #24]	@ (8003150 <vApplicationGetIdleTaskMemory+0x30>)
 8003136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2280      	movs	r2, #128	@ 0x80
 800313c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	24001944 	.word	0x24001944
 8003150:	24001998 	.word	0x24001998

08003154 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b096      	sub	sp, #88	@ 0x58
 8003158:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 800315a:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <MX_FREERTOS_Init+0x7c>)
 800315c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003160:	461d      	mov	r5, r3
 8003162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003166:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800316a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 800316e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f010 fa13 	bl	80135a0 <osThreadCreate>
 800317a:	4603      	mov	r3, r0
 800317c:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <MX_FREERTOS_Init+0x80>)
 800317e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8003180:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <MX_FREERTOS_Init+0x84>)
 8003182:	f107 0420 	add.w	r4, r7, #32
 8003186:	461d      	mov	r5, r3
 8003188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8003194:	f107 0320 	add.w	r3, r7, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f010 fa00 	bl	80135a0 <osThreadCreate>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4a0e      	ldr	r2, [pc, #56]	@ (80031dc <MX_FREERTOS_Init+0x88>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80031a6:	4b0e      	ldr	r3, [pc, #56]	@ (80031e0 <MX_FREERTOS_Init+0x8c>)
 80031a8:	1d3c      	adds	r4, r7, #4
 80031aa:	461d      	mov	r5, r3
 80031ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f010 f9ef 	bl	80135a0 <osThreadCreate>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4a07      	ldr	r2, [pc, #28]	@ (80031e4 <MX_FREERTOS_Init+0x90>)
 80031c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80031c8:	bf00      	nop
 80031ca:	3758      	adds	r7, #88	@ 0x58
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bdb0      	pop	{r4, r5, r7, pc}
 80031d0:	080188e4 	.word	0x080188e4
 80031d4:	24001938 	.word	0x24001938
 80031d8:	0801890c 	.word	0x0801890c
 80031dc:	2400193c 	.word	0x2400193c
 80031e0:	08018934 	.word	0x08018934
 80031e4:	24001940 	.word	0x24001940

080031e8 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
  for(;;)
  {
	TimeOn_Counter++;
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <fTask_1ms+0x28>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a06      	ldr	r2, [pc, #24]	@ (8003210 <fTask_1ms+0x28>)
 80031f8:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 80031fa:	f7fe fffb 	bl	80021f4 <LED_Tasks>
	SBUS_IntegrityVerification();
 80031fe:	f7ff fcef 	bl	8002be0 <SBUS_IntegrityVerification>
	NMEA_process_task();
 8003202:	f000 fdaf 	bl	8003d64 <NMEA_process_task>
    osDelay(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f010 fa16 	bl	8013638 <osDelay>
	TimeOn_Counter++;
 800320c:	bf00      	nop
 800320e:	e7ef      	b.n	80031f0 <fTask_1ms+0x8>
 8003210:	240022d0 	.word	0x240022d0

08003214 <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 800321c:	f7fe ff26 	bl	800206c <BNO_Tasks>
	BMP280_calculate();
 8003220:	f7fe f970 	bl	8001504 <BMP280_calculate>

	PWM_Assing();
 8003224:	f7ff f898 	bl	8002358 <PWM_Assing>
	SD_blackbox_write();
 8003228:	f7ff fe0a 	bl	8002e40 <SD_blackbox_write>
    osDelay(10);
 800322c:	200a      	movs	r0, #10
 800322e:	f010 fa03 	bl	8013638 <osDelay>
	BNO_Tasks();
 8003232:	bf00      	nop
 8003234:	e7f2      	b.n	800321c <fTask_10ms+0x8>

08003236 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 800323e:	f7ff f873 	bl	8002328 <LR03_StateMachine>
    osDelay(100);
 8003242:	2064      	movs	r0, #100	@ 0x64
 8003244:	f010 f9f8 	bl	8013638 <osDelay>
	LR03_StateMachine();
 8003248:	bf00      	nop
 800324a:	e7f8      	b.n	800323e <fTask_100ms+0x8>

0800324c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	@ 0x28
 8003250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	4b4e      	ldr	r3, [pc, #312]	@ (800339c <MX_GPIO_Init+0x150>)
 8003264:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003268:	4a4c      	ldr	r2, [pc, #304]	@ (800339c <MX_GPIO_Init+0x150>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003272:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <MX_GPIO_Init+0x150>)
 8003274:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003280:	4b46      	ldr	r3, [pc, #280]	@ (800339c <MX_GPIO_Init+0x150>)
 8003282:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003286:	4a45      	ldr	r2, [pc, #276]	@ (800339c <MX_GPIO_Init+0x150>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003290:	4b42      	ldr	r3, [pc, #264]	@ (800339c <MX_GPIO_Init+0x150>)
 8003292:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	4b3f      	ldr	r3, [pc, #252]	@ (800339c <MX_GPIO_Init+0x150>)
 80032a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032a4:	4a3d      	ldr	r2, [pc, #244]	@ (800339c <MX_GPIO_Init+0x150>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <MX_GPIO_Init+0x150>)
 80032b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032bc:	4b37      	ldr	r3, [pc, #220]	@ (800339c <MX_GPIO_Init+0x150>)
 80032be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032c2:	4a36      	ldr	r2, [pc, #216]	@ (800339c <MX_GPIO_Init+0x150>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032cc:	4b33      	ldr	r3, [pc, #204]	@ (800339c <MX_GPIO_Init+0x150>)
 80032ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80032da:	2200      	movs	r2, #0
 80032dc:	f242 010f 	movw	r1, #8207	@ 0x200f
 80032e0:	482f      	ldr	r0, [pc, #188]	@ (80033a0 <MX_GPIO_Init+0x154>)
 80032e2:	f005 fe57 	bl	8008f94 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2110      	movs	r1, #16
 80032ea:	482e      	ldr	r0, [pc, #184]	@ (80033a4 <MX_GPIO_Init+0x158>)
 80032ec:	f005 fe52 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80032f0:	2200      	movs	r2, #0
 80032f2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80032f6:	482c      	ldr	r0, [pc, #176]	@ (80033a8 <MX_GPIO_Init+0x15c>)
 80032f8:	f005 fe4c 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2104      	movs	r1, #4
 8003300:	482a      	ldr	r0, [pc, #168]	@ (80033ac <MX_GPIO_Init+0x160>)
 8003302:	f005 fe47 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8003306:	f242 030f 	movw	r3, #8207	@ 0x200f
 800330a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330c:	2301      	movs	r3, #1
 800330e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4619      	mov	r1, r3
 800331e:	4820      	ldr	r0, [pc, #128]	@ (80033a0 <MX_GPIO_Init+0x154>)
 8003320:	f005 fc88 	bl	8008c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003324:	2310      	movs	r3, #16
 8003326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	481a      	ldr	r0, [pc, #104]	@ (80033a4 <MX_GPIO_Init+0x158>)
 800333c:	f005 fc7a 	bl	8008c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8003340:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	4619      	mov	r1, r3
 8003358:	4813      	ldr	r0, [pc, #76]	@ (80033a8 <MX_GPIO_Init+0x15c>)
 800335a:	f005 fc6b 	bl	8008c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800335e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	480b      	ldr	r0, [pc, #44]	@ (80033a0 <MX_GPIO_Init+0x154>)
 8003374:	f005 fc5e 	bl	8008c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003378:	2304      	movs	r3, #4
 800337a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337c:	2301      	movs	r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	4807      	ldr	r0, [pc, #28]	@ (80033ac <MX_GPIO_Init+0x160>)
 8003390:	f005 fc50 	bl	8008c34 <HAL_GPIO_Init>

}
 8003394:	bf00      	nop
 8003396:	3728      	adds	r7, #40	@ 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	58020800 	.word	0x58020800
 80033a4:	58020000 	.word	0x58020000
 80033a8:	58020400 	.word	0x58020400
 80033ac:	58020c00 	.word	0x58020c00

080033b0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <MX_I2C3_Init+0x78>)
 80033b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <MX_I2C3_Init+0x7c>)
 80033be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80033c0:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033c6:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033cc:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80033d2:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033de:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033ea:	480e      	ldr	r0, [pc, #56]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033ec:	f005 fdec 	bl	8008fc8 <HAL_I2C_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80033f6:	f000 fe41 	bl	800407c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033fa:	2100      	movs	r1, #0
 80033fc:	4809      	ldr	r0, [pc, #36]	@ (8003424 <MX_I2C3_Init+0x74>)
 80033fe:	f005 fe7f 	bl	8009100 <HAL_I2CEx_ConfigAnalogFilter>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003408:	f000 fe38 	bl	800407c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800340c:	2100      	movs	r1, #0
 800340e:	4805      	ldr	r0, [pc, #20]	@ (8003424 <MX_I2C3_Init+0x74>)
 8003410:	f005 fec1 	bl	8009196 <HAL_I2CEx_ConfigDigitalFilter>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800341a:	f000 fe2f 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	24001b98 	.word	0x24001b98
 8003428:	40005c00 	.word	0x40005c00
 800342c:	20b0ccff 	.word	0x20b0ccff

08003430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b0bc      	sub	sp, #240	@ 0xf0
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	22c0      	movs	r2, #192	@ 0xc0
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f013 fa18 	bl	8016886 <memset>
  if(i2cHandle->Instance==I2C3)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a39      	ldr	r2, [pc, #228]	@ (8003540 <HAL_I2C_MspInit+0x110>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d16b      	bne.n	8003538 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003460:	f04f 0208 	mov.w	r2, #8
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003472:	f107 0318 	add.w	r3, r7, #24
 8003476:	4618      	mov	r0, r3
 8003478:	f006 ff14 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003482:	f000 fdfb 	bl	800407c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 8003488:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800348c:	4a2d      	ldr	r2, [pc, #180]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003496:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 8003498:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 80034a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034aa:	4a26      	ldr	r2, [pc, #152]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80034b4:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 80034b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ca:	2312      	movs	r3, #18
 80034cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034dc:	2304      	movs	r3, #4
 80034de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034e6:	4619      	mov	r1, r3
 80034e8:	4817      	ldr	r0, [pc, #92]	@ (8003548 <HAL_I2C_MspInit+0x118>)
 80034ea:	f005 fba3 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f6:	2312      	movs	r3, #18
 80034f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003508:	2304      	movs	r3, #4
 800350a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003512:	4619      	mov	r1, r3
 8003514:	480d      	ldr	r0, [pc, #52]	@ (800354c <HAL_I2C_MspInit+0x11c>)
 8003516:	f005 fb8d 	bl	8008c34 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 800351c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003520:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 8003522:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003526:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_I2C_MspInit+0x114>)
 800352c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003538:	bf00      	nop
 800353a:	37f0      	adds	r7, #240	@ 0xf0
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40005c00 	.word	0x40005c00
 8003544:	58024400 	.word	0x58024400
 8003548:	58020800 	.word	0x58020800
 800354c:	58020000 	.word	0x58020000

08003550 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b0b2      	sub	sp, #200	@ 0xc8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8003568:	4ba9      	ldr	r3, [pc, #676]	@ (8003810 <NMEA_parser+0x2b0>)
 800356a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800356e:	461d      	mov	r5, r3
 8003570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003580:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	2280      	movs	r2, #128	@ 0x80
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f013 f977 	bl	8016886 <memset>
	fields[num++]=message;
 8003598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	33c8      	adds	r3, #200	@ 0xc8
 80035a6:	443b      	add	r3, r7
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80035ae:	e00f      	b.n	80035d0 <NMEA_parser+0x70>
		*message++ = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80035ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	33c8      	adds	r3, #200	@ 0xc8
 80035c8:	443b      	add	r3, r7
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80035d0:	212c      	movs	r1, #44	@ 0x2c
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f013 f95f 	bl	8016896 <strchr>
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e7      	bne.n	80035b0 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	498c      	ldr	r1, [pc, #560]	@ (8003814 <NMEA_parser+0x2b4>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc fe83 	bl	80002f0 <strcmp>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11e      	bne.n	800362e <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f012 f9f8 	bl	80159e8 <atof>
 80035f8:	eeb0 7b40 	vmov.f64	d7, d0
 80035fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003600:	4b83      	ldr	r3, [pc, #524]	@ (8003810 <NMEA_parser+0x2b0>)
 8003602:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <NMEA_parser+0x2b0>)
 800360c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4618      	mov	r0, r3
 8003612:	f012 f9e9 	bl	80159e8 <atof>
 8003616:	eeb0 7b40 	vmov.f64	d7, d0
 800361a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800361e:	4b7c      	ldr	r3, [pc, #496]	@ (8003810 <NMEA_parser+0x2b0>)
 8003620:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	4b79      	ldr	r3, [pc, #484]	@ (8003810 <NMEA_parser+0x2b0>)
 800362a:	751a      	strb	r2, [r3, #20]
 800362c:	e10d      	b.n	800384a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4979      	ldr	r1, [pc, #484]	@ (8003818 <NMEA_parser+0x2b8>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc fe5c 	bl	80002f0 <strcmp>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d130      	bne.n	80036a0 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4618      	mov	r0, r3
 8003642:	f012 f9d1 	bl	80159e8 <atof>
 8003646:	eeb0 7b40 	vmov.f64	d7, d0
 800364a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800364e:	4b70      	ldr	r3, [pc, #448]	@ (8003810 <NMEA_parser+0x2b0>)
 8003650:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	4618      	mov	r0, r3
 8003658:	f012 f9c9 	bl	80159ee <atoi>
 800365c:	4603      	mov	r3, r0
 800365e:	4a6c      	ldr	r2, [pc, #432]	@ (8003810 <NMEA_parser+0x2b0>)
 8003660:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4618      	mov	r0, r3
 8003666:	f012 f9bf 	bl	80159e8 <atof>
 800366a:	eeb0 7b40 	vmov.f64	d7, d0
 800366e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003672:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <NMEA_parser+0x2b0>)
 8003674:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <NMEA_parser+0x2b0>)
 800367e:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	4618      	mov	r0, r3
 8003684:	f012 f9b0 	bl	80159e8 <atof>
 8003688:	eeb0 7b40 	vmov.f64	d7, d0
 800368c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003690:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <NMEA_parser+0x2b0>)
 8003692:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	4b5d      	ldr	r3, [pc, #372]	@ (8003810 <NMEA_parser+0x2b0>)
 800369c:	751a      	strb	r2, [r3, #20]
 800369e:	e0d4      	b.n	800384a <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	495e      	ldr	r1, [pc, #376]	@ (800381c <NMEA_parser+0x2bc>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc fe23 	bl	80002f0 <strcmp>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f012 f99b 	bl	80159ee <atoi>
 80036b8:	ee07 0a90 	vmov	s15, r0
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	4b53      	ldr	r3, [pc, #332]	@ (8003810 <NMEA_parser+0x2b0>)
 80036c2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	4618      	mov	r0, r3
 80036ca:	f012 f990 	bl	80159ee <atoi>
 80036ce:	ee07 0a90 	vmov	s15, r0
 80036d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <NMEA_parser+0x2b0>)
 80036d8:	edc3 7a08 	vstr	s15, [r3, #32]
 80036dc:	e0b5      	b.n	800384a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	494f      	ldr	r1, [pc, #316]	@ (8003820 <NMEA_parser+0x2c0>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc fe04 	bl	80002f0 <strcmp>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15c      	bne.n	80037a8 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f012 f979 	bl	80159e8 <atof>
 80036f6:	eeb0 7b40 	vmov.f64	d7, d0
 80036fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036fe:	4b44      	ldr	r3, [pc, #272]	@ (8003810 <NMEA_parser+0x2b0>)
 8003700:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	4618      	mov	r0, r3
 8003708:	f012 f96e 	bl	80159e8 <atof>
 800370c:	eeb0 7b40 	vmov.f64	d7, d0
 8003710:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003714:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <NMEA_parser+0x2b0>)
 8003716:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	4b3c      	ldr	r3, [pc, #240]	@ (8003810 <NMEA_parser+0x2b0>)
 8003720:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4618      	mov	r0, r3
 8003726:	f012 f95f 	bl	80159e8 <atof>
 800372a:	eeb0 7b40 	vmov.f64	d7, d0
 800372e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003732:	4b37      	ldr	r3, [pc, #220]	@ (8003810 <NMEA_parser+0x2b0>)
 8003734:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b34      	ldr	r3, [pc, #208]	@ (8003810 <NMEA_parser+0x2b0>)
 800373e:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f012 f953 	bl	80159ee <atoi>
 8003748:	4603      	mov	r3, r0
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <NMEA_parser+0x2b0>)
 800374e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	4618      	mov	r0, r3
 8003756:	f012 f94a 	bl	80159ee <atoi>
 800375a:	4603      	mov	r3, r0
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <NMEA_parser+0x2b0>)
 8003760:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	4618      	mov	r0, r3
 8003768:	f012 f93e 	bl	80159e8 <atof>
 800376c:	eeb0 7b40 	vmov.f64	d7, d0
 8003770:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003774:	4b26      	ldr	r3, [pc, #152]	@ (8003810 <NMEA_parser+0x2b0>)
 8003776:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	4618      	mov	r0, r3
 800377e:	f012 f933 	bl	80159e8 <atof>
 8003782:	eeb0 7b40 	vmov.f64	d7, d0
 8003786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378a:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <NMEA_parser+0x2b0>)
 800378c:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8003790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f012 f928 	bl	80159e8 <atof>
 8003798:	eeb0 7b40 	vmov.f64	d7, d0
 800379c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <NMEA_parser+0x2b0>)
 80037a2:	edc3 7a07 	vstr	s15, [r3, #28]
 80037a6:	e050      	b.n	800384a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	491e      	ldr	r1, [pc, #120]	@ (8003824 <NMEA_parser+0x2c4>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fd9f 	bl	80002f0 <strcmp>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d137      	bne.n	8003828 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f012 f917 	bl	80159ee <atoi>
 80037c0:	4603      	mov	r3, r0
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <NMEA_parser+0x2b0>)
 80037c6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80037ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037cc:	4618      	mov	r0, r3
 80037ce:	f012 f90b 	bl	80159e8 <atof>
 80037d2:	eeb0 7b40 	vmov.f64	d7, d0
 80037d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037da:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <NMEA_parser+0x2b0>)
 80037dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 80037e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f012 f900 	bl	80159e8 <atof>
 80037e8:	eeb0 7b40 	vmov.f64	d7, d0
 80037ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037f0:	4b07      	ldr	r3, [pc, #28]	@ (8003810 <NMEA_parser+0x2b0>)
 80037f2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 80037f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f8:	4618      	mov	r0, r3
 80037fa:	f012 f8f5 	bl	80159e8 <atof>
 80037fe:	eeb0 7b40 	vmov.f64	d7, d0
 8003802:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003806:	4b02      	ldr	r3, [pc, #8]	@ (8003810 <NMEA_parser+0x2b0>)
 8003808:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 800380c:	e01d      	b.n	800384a <NMEA_parser+0x2ea>
 800380e:	bf00      	nop
 8003810:	24002294 	.word	0x24002294
 8003814:	08018950 	.word	0x08018950
 8003818:	08018958 	.word	0x08018958
 800381c:	08018960 	.word	0x08018960
 8003820:	08018968 	.word	0x08018968
 8003824:	08018970 	.word	0x08018970

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4931      	ldr	r1, [pc, #196]	@ (80038f0 <NMEA_parser+0x390>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fd5f 	bl	80002f0 <strcmp>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4618      	mov	r0, r3
 800383c:	f012 f8d7 	bl	80159ee <atoi>
 8003840:	4603      	mov	r3, r0
 8003842:	b2da      	uxtb	r2, r3
 8003844:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <NMEA_parser+0x394>)
 8003846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800384a:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <NMEA_parser+0x394>)
 800384c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003850:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385c:	ee17 3a90 	vmov	r3, s15
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfb8      	it	lt
 8003864:	425b      	neglt	r3, r3
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386e:	4b22      	ldr	r3, [pc, #136]	@ (80038f8 <NMEA_parser+0x398>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	dd02      	ble.n	8003884 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 800387e:	4b1f      	ldr	r3, [pc, #124]	@ (80038fc <NMEA_parser+0x39c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8003884:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <NMEA_parser+0x394>)
 8003886:	ed93 7a08 	vldr	s14, [r3, #32]
 800388a:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <NMEA_parser+0x3a0>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	dd0c      	ble.n	80038b4 <NMEA_parser+0x354>
 800389a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <NMEA_parser+0x3a0>)
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	d802      	bhi.n	80038b4 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <NMEA_parser+0x3a4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80038b4:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <NMEA_parser+0x394>)
 80038b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80038ba:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <NMEA_parser+0x3a0>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	d400      	bmi.n	80038cc <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80038ca:	e00d      	b.n	80038e8 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80038cc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <NMEA_parser+0x3a0>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	da00      	bge.n	80038e2 <NMEA_parser+0x382>
}
 80038e0:	e002      	b.n	80038e8 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <NMEA_parser+0x3a8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4798      	blx	r3
}
 80038e8:	bf00      	nop
 80038ea:	37c8      	adds	r7, #200	@ 0xc8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdb0      	pop	{r4, r5, r7, pc}
 80038f0:	08018978 	.word	0x08018978
 80038f4:	24002294 	.word	0x24002294
 80038f8:	2400227c 	.word	0x2400227c
 80038fc:	24002278 	.word	0x24002278
 8003900:	24002284 	.word	0x24002284
 8003904:	24002280 	.word	0x24002280
 8003908:	24002288 	.word	0x24002288

0800390c <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	460a      	mov	r2, r1
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	4613      	mov	r3, r2
 800391a:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	2b39      	cmp	r3, #57	@ 0x39
 8003920:	d803      	bhi.n	800392a <hx2int+0x1e>
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	3b30      	subs	r3, #48	@ 0x30
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	e002      	b.n	8003930 <hx2int+0x24>
	else n2=n2-'A'+10;
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	3b37      	subs	r3, #55	@ 0x37
 800392e:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8003930:	79bb      	ldrb	r3, [r7, #6]
 8003932:	2b39      	cmp	r3, #57	@ 0x39
 8003934:	d803      	bhi.n	800393e <hx2int+0x32>
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	3b30      	subs	r3, #48	@ 0x30
 800393a:	71bb      	strb	r3, [r7, #6]
 800393c:	e002      	b.n	8003944 <hx2int+0x38>
	else n1=n1-'A'+10;
 800393e:	79bb      	ldrb	r3, [r7, #6]
 8003940:	3b37      	subs	r3, #55	@ 0x37
 8003942:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	b2da      	uxtb	r2, r3
 800394a:	79bb      	ldrb	r3, [r7, #6]
 800394c:	4413      	add	r3, r2
 800394e:	b2db      	uxtb	r3, r3

}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8003968:	2300      	movs	r3, #0
 800396a:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 800396c:	e009      	b.n	8003982 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	73fa      	strb	r2, [r7, #15]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	4053      	eors	r3, r2
 8003980:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b2a      	cmp	r3, #42	@ 0x2a
 800398c:	d002      	beq.n	8003994 <NMEA_checksum_clc+0x38>
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b7d      	cmp	r3, #125	@ 0x7d
 8003992:	d9ec      	bls.n	800396e <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	3301      	adds	r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	7818      	ldrb	r0, [r3, #0]
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3302      	adds	r3, #2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7ff ffaf 	bl	800390c <hx2int>
 80039ae:	4603      	mov	r3, r0
 80039b0:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 80039b2:	7b7a      	ldrb	r2, [r7, #13]
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 80039ba:	2302      	movs	r3, #2
 80039bc:	e000      	b.n	80039c0 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 80039be:	2300      	movs	r3, #0


}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
	int index = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 80039d2:	e005      	b.n	80039e0 <NMEA_read_line+0x18>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	4a2b      	ldr	r2, [pc, #172]	@ (8003a88 <NMEA_read_line+0xc0>)
 80039dc:	2100      	movs	r1, #0
 80039de:	54d1      	strb	r1, [r2, r3]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80039e4:	ddf6      	ble.n	80039d4 <NMEA_read_line+0xc>

	index = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 80039ea:	e01c      	b.n	8003a26 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 80039ec:	4b27      	ldr	r3, [pc, #156]	@ (8003a8c <NMEA_read_line+0xc4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a27      	ldr	r2, [pc, #156]	@ (8003a90 <NMEA_read_line+0xc8>)
 80039f2:	5cd1      	ldrb	r1, [r2, r3]
 80039f4:	4a24      	ldr	r2, [pc, #144]	@ (8003a88 <NMEA_read_line+0xc0>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	460a      	mov	r2, r1
 80039fc:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 80039fe:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <NMEA_read_line+0xc8>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003a08:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	425a      	negs	r2, r3
 8003a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a18:	bf58      	it	pl
 8003a1a:	4253      	negpl	r3, r2
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a1e:	6013      	str	r3, [r2, #0]
		++index;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3301      	adds	r3, #1
 8003a24:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003a26:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <NMEA_read_line+0xc8>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	d002      	beq.n	8003a38 <NMEA_read_line+0x70>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a36:	ddd9      	ble.n	80039ec <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <NMEA_read_line+0xc8>)
 8003a3e:	5cd1      	ldrb	r1, [r2, r3]
 8003a40:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <NMEA_read_line+0xc0>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	460a      	mov	r2, r1
 8003a48:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	@ (8003a90 <NMEA_read_line+0xc8>)
 8003a50:	2100      	movs	r1, #0
 8003a52:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	425a      	negs	r2, r3
 8003a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a64:	bf58      	it	pl
 8003a66:	4253      	negpl	r3, r2
 8003a68:	4a08      	ldr	r2, [pc, #32]	@ (8003a8c <NMEA_read_line+0xc4>)
 8003a6a:	6013      	str	r3, [r2, #0]
	++index;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <NMEA_read_line+0xcc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a06      	ldr	r2, [pc, #24]	@ (8003a94 <NMEA_read_line+0xcc>)
 8003a7a:	6013      	str	r3, [r2, #0]

}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	240021ec 	.word	0x240021ec
 8003a8c:	24002270 	.word	0x24002270
 8003a90:	24001dec 	.word	0x24001dec
 8003a94:	24002274 	.word	0x24002274

08003a98 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	f001 fcfc 	bl	80054a0 <HAL_Delay>
	NMEA_huart=huart;
 8003aa8:	4a12      	ldr	r2, [pc, #72]	@ (8003af4 <NMEA_init+0x5c>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <NMEA_init+0x60>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8003af4 <NMEA_init+0x5c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <NMEA_init+0x5c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0210 	orr.w	r2, r2, #16
 8003ac6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <NMEA_init+0x5c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad0:	490a      	ldr	r1, [pc, #40]	@ (8003afc <NMEA_init+0x64>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f00a fdf2 	bl	800e6bc <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <NMEA_init+0x68>)
 8003ada:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <NMEA_init+0x6c>)
 8003adc:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8003ade:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <NMEA_init+0x70>)
 8003ae0:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <NMEA_init+0x6c>)
 8003ae2:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <NMEA_init+0x74>)
 8003ae6:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <NMEA_init+0x6c>)
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2400228c 	.word	0x2400228c
 8003af8:	24002290 	.word	0x24002290
 8003afc:	24001bec 	.word	0x24001bec
 8003b00:	24002278 	.word	0x24002278
 8003b04:	08003551 	.word	0x08003551
 8003b08:	24002280 	.word	0x24002280
 8003b0c:	24002288 	.word	0x24002288

08003b10 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	425a      	negs	r2, r3
 8003b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b2a:	bf58      	it	pl
 8003b2c:	4253      	negpl	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d130      	bne.n	8003ba0 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003b3e:	e010      	b.n	8003b62 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a24      	ldr	r2, [pc, #144]	@ (8003bd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003b46:	2100      	movs	r1, #0
 8003b48:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	425a      	negs	r2, r3
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b5a:	bf58      	it	pl
 8003b5c:	4253      	negpl	r3, r2
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b60:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003b68:	5cd3      	ldrb	r3, [r2, r3]
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d005      	beq.n	8003b7a <NMEA_UART_DMA_get_char+0x6a>
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003b74:	5cd3      	ldrb	r3, [r2, r3]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e2      	bne.n	8003b40 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003b80:	2100      	movs	r1, #0
 8003b82:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	425a      	negs	r2, r3
 8003b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b94:	bf58      	it	pl
 8003b96:	4253      	negpl	r3, r2
 8003b98:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd4 <NMEA_UART_DMA_get_char+0xc4>)
 8003b9a:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	490c      	ldr	r1, [pc, #48]	@ (8003bd8 <NMEA_UART_DMA_get_char+0xc8>)
 8003ba6:	79fa      	ldrb	r2, [r7, #7]
 8003ba8:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8003baa:	4a09      	ldr	r2, [pc, #36]	@ (8003bd0 <NMEA_UART_DMA_get_char+0xc0>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b0a      	cmp	r3, #10
 8003bb4:	d104      	bne.n	8003bc0 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <NMEA_UART_DMA_get_char+0xcc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <NMEA_UART_DMA_get_char+0xcc>)
 8003bbe:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2400226c 	.word	0x2400226c
 8003bd4:	24002270 	.word	0x24002270
 8003bd8:	24001dec 	.word	0x24001dec
 8003bdc:	24002274 	.word	0x24002274

08003be0 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <NMEA_UART_DMA_copy_buffer+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d059      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a48      	ldr	r2, [pc, #288]	@ (8003d20 <NMEA_UART_DMA_copy_buffer+0x140>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d053      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c02:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a46      	ldr	r2, [pc, #280]	@ (8003d24 <NMEA_UART_DMA_copy_buffer+0x144>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d04d      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c0e:	4b42      	ldr	r3, [pc, #264]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a44      	ldr	r2, [pc, #272]	@ (8003d28 <NMEA_UART_DMA_copy_buffer+0x148>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d047      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <NMEA_UART_DMA_copy_buffer+0x14c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d041      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c26:	4b3c      	ldr	r3, [pc, #240]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a40      	ldr	r2, [pc, #256]	@ (8003d30 <NMEA_UART_DMA_copy_buffer+0x150>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d03b      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c32:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3e      	ldr	r2, [pc, #248]	@ (8003d34 <NMEA_UART_DMA_copy_buffer+0x154>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d035      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3c      	ldr	r2, [pc, #240]	@ (8003d38 <NMEA_UART_DMA_copy_buffer+0x158>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02f      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c4a:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3a      	ldr	r2, [pc, #232]	@ (8003d3c <NMEA_UART_DMA_copy_buffer+0x15c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d029      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a38      	ldr	r2, [pc, #224]	@ (8003d40 <NMEA_UART_DMA_copy_buffer+0x160>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c62:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a36      	ldr	r2, [pc, #216]	@ (8003d44 <NMEA_UART_DMA_copy_buffer+0x164>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a34      	ldr	r2, [pc, #208]	@ (8003d48 <NMEA_UART_DMA_copy_buffer+0x168>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d017      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c7a:	4b27      	ldr	r3, [pc, #156]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <NMEA_UART_DMA_copy_buffer+0x16c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d011      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c86:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <NMEA_UART_DMA_copy_buffer+0x170>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c92:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2e      	ldr	r2, [pc, #184]	@ (8003d54 <NMEA_UART_DMA_copy_buffer+0x174>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d005      	beq.n	8003caa <NMEA_UART_DMA_copy_buffer+0xca>
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d58 <NMEA_UART_DMA_copy_buffer+0x178>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d106      	bne.n	8003cb8 <NMEA_UART_DMA_copy_buffer+0xd8>
 8003caa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003cb6:	e005      	b.n	8003cc4 <NMEA_UART_DMA_copy_buffer+0xe4>
 8003cb8:	4b17      	ldr	r3, [pc, #92]	@ (8003d18 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003cc4:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	e013      	b.n	8003cf4 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8003ccc:	4a23      	ldr	r2, [pc, #140]	@ (8003d5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff1b 	bl	8003b10 <NMEA_UART_DMA_get_char>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4413      	add	r3, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dbe7      	blt.n	8003ccc <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <NMEA_UART_DMA_copy_buffer+0x180>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d04:	4915      	ldr	r1, [pc, #84]	@ (8003d5c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d06:	4618      	mov	r0, r3
 8003d08:	f00a fcd8 	bl	800e6bc <HAL_UART_Receive_DMA>
	return stat;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	24002290 	.word	0x24002290
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	24001bec 	.word	0x24001bec
 8003d60:	2400228c 	.word	0x2400228c

08003d64 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003d6e:	e00d      	b.n	8003d8c <NMEA_process_task+0x28>
		NMEA_read_line();
 8003d70:	f7ff fe2a 	bl	80039c8 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8003d74:	480a      	ldr	r0, [pc, #40]	@ (8003da0 <NMEA_process_task+0x3c>)
 8003d76:	f7ff fdf1 	bl	800395c <NMEA_checksum_clc>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8003d80:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <NMEA_process_task+0x3c>)
 8003d82:	f7ff fbed 	bl	8003560 <NMEA_parser>
 8003d86:	e001      	b.n	8003d8c <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <NMEA_process_task+0x40>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dced      	bgt.n	8003d70 <NMEA_process_task+0xc>
	}
	return stat;
 8003d94:	79fb      	ldrb	r3, [r7, #7]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	240021ec 	.word	0x240021ec
 8003da4:	24002274 	.word	0x24002274

08003da8 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <user_UART_IDLE_IT_handler+0x40>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d10d      	bne.n	8003dde <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8003dc2:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <user_UART_IDLE_IT_handler+0x40>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <user_UART_IDLE_IT_handler+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00a fcbf 	bl	800e754 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003dd6:	f7ff ff03 	bl	8003be0 <NMEA_UART_DMA_copy_buffer>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8003dde:	79fb      	ldrb	r3, [r7, #7]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	2400228c 	.word	0x2400228c

08003dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003df0:	f000 f906 	bl	8004000 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003df4:	f001 faf8 	bl	80053e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003df8:	f000 f842 	bl	8003e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dfc:	f7ff fa26 	bl	800324c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e00:	f7ff f880 	bl	8002f04 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003e04:	f7ff f8ae 	bl	8002f64 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003e08:	f7ff fad2 	bl	80033b0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003e0c:	f000 f93c 	bl	8004088 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003e10:	f000 f990 	bl	8004134 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003e14:	f000 fcc8 	bl	80047a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e18:	f000 fd42 	bl	80048a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e1c:	f000 fda6 	bl	800496c <MX_TIM4_Init>
  MX_UART4_Init();
 8003e20:	f000 ff5e 	bl	8004ce0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003e24:	f000 ffa8 	bl	8004d78 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003e28:	f001 f842 	bl	8004eb0 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003e2c:	f000 fe1a 	bl	8004a64 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8003e30:	f000 fff2 	bl	8004e18 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003e34:	f00d fe7e 	bl	8011b34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003e38:	f7fd fb3e 	bl	80014b8 <BMP280_init>
  //SD_init();
  SBUS_init();
 8003e3c:	f7fe faf0 	bl	8002420 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003e40:	2201      	movs	r2, #1
 8003e42:	4909      	ldr	r1, [pc, #36]	@ (8003e68 <main+0x7c>)
 8003e44:	4809      	ldr	r0, [pc, #36]	@ (8003e6c <main+0x80>)
 8003e46:	f00a fc39 	bl	800e6bc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <main+0x84>)
 8003e4e:	4809      	ldr	r0, [pc, #36]	@ (8003e74 <main+0x88>)
 8003e50:	f00a fbe8 	bl	800e624 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8003e54:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <main+0x8c>)
 8003e56:	4809      	ldr	r0, [pc, #36]	@ (8003e7c <main+0x90>)
 8003e58:	f7ff fe1e 	bl	8003a98 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003e5c:	f7ff f97a 	bl	8003154 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e60:	f00f fb97 	bl	8013592 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <main+0x78>
 8003e68:	240003e3 	.word	0x240003e3
 8003e6c:	2400268c 	.word	0x2400268c
 8003e70:	240022cc 	.word	0x240022cc
 8003e74:	24002720 	.word	0x24002720
 8003e78:	240027b4 	.word	0x240027b4
 8003e7c:	24002564 	.word	0x24002564

08003e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b09c      	sub	sp, #112	@ 0x70
 8003e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e8a:	224c      	movs	r2, #76	@ 0x4c
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f012 fcf9 	bl	8016886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2220      	movs	r2, #32
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f012 fcf3 	bl	8016886 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8003ea0:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <SystemClock_Config+0xe4>)
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f005 f9c0 	bl	8009230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <SystemClock_Config+0xe8>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <SystemClock_Config+0xe8>)
 8003eba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ebe:	6193      	str	r3, [r2, #24]
 8003ec0:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <SystemClock_Config+0xe8>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003ecc:	bf00      	nop
 8003ece:	4b26      	ldr	r3, [pc, #152]	@ (8003f68 <SystemClock_Config+0xe8>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eda:	d1f8      	bne.n	8003ece <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003edc:	2302      	movs	r3, #2
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003ee4:	2340      	movs	r3, #64	@ 0x40
 8003ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003eec:	2300      	movs	r3, #0
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003ef4:	2323      	movs	r3, #35	@ 0x23
 8003ef6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003efc:	2302      	movs	r3, #2
 8003efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f00:	2302      	movs	r3, #2
 8003f02:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003f04:	230c      	movs	r3, #12
 8003f06:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f14:	4618      	mov	r0, r3
 8003f16:	f005 f9c5 	bl	80092a4 <HAL_RCC_OscConfig>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003f20:	f000 f8ac 	bl	800407c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f24:	233f      	movs	r3, #63	@ 0x3f
 8003f26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003f34:	2340      	movs	r3, #64	@ 0x40
 8003f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003f38:	2340      	movs	r3, #64	@ 0x40
 8003f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003f42:	2340      	movs	r3, #64	@ 0x40
 8003f44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	2106      	movs	r1, #6
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f005 fddc 	bl	8009b08 <HAL_RCC_ClockConfig>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003f56:	f000 f891 	bl	800407c <Error_Handler>
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3770      	adds	r7, #112	@ 0x70
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	58024800 	.word	0x58024800

08003f6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a18      	ldr	r2, [pc, #96]	@ (8003fdc <HAL_UART_RxCpltCallback+0x70>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10a      	bne.n	8003f94 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <HAL_UART_RxCpltCallback+0x74>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fa5a 	bl	800243c <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4915      	ldr	r1, [pc, #84]	@ (8003fe0 <HAL_UART_RxCpltCallback+0x74>)
 8003f8c:	4815      	ldr	r0, [pc, #84]	@ (8003fe4 <HAL_UART_RxCpltCallback+0x78>)
 8003f8e:	f00a fb95 	bl	800e6bc <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8003f92:	e01e      	b.n	8003fd2 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <HAL_UART_RxCpltCallback+0x7c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8003f9e:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <HAL_UART_RxCpltCallback+0x80>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd ffc2 	bl	8001f2c <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4910      	ldr	r1, [pc, #64]	@ (8003fec <HAL_UART_RxCpltCallback+0x80>)
 8003fac:	4810      	ldr	r0, [pc, #64]	@ (8003ff0 <HAL_UART_RxCpltCallback+0x84>)
 8003fae:	f00a fb85 	bl	800e6bc <HAL_UART_Receive_DMA>
}
 8003fb2:	e00e      	b.n	8003fd2 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff4 <HAL_UART_RxCpltCallback+0x88>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d109      	bne.n	8003fd2 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_UART_RxCpltCallback+0x8c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f994 	bl	80022f0 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	490b      	ldr	r1, [pc, #44]	@ (8003ff8 <HAL_UART_RxCpltCallback+0x8c>)
 8003fcc:	480b      	ldr	r0, [pc, #44]	@ (8003ffc <HAL_UART_RxCpltCallback+0x90>)
 8003fce:	f00a fb29 	bl	800e624 <HAL_UART_Receive_IT>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	240005b1 	.word	0x240005b1
 8003fe4:	240025f8 	.word	0x240025f8
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	240003e3 	.word	0x240003e3
 8003ff0:	2400268c 	.word	0x2400268c
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	240022cc 	.word	0x240022cc
 8003ffc:	24002720 	.word	0x24002720

08004000 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004006:	463b      	mov	r3, r7
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004012:	f001 fb49 	bl	80056a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004016:	2301      	movs	r3, #1
 8004018:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800401a:	2300      	movs	r3, #0
 800401c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004022:	231f      	movs	r3, #31
 8004024:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004026:	2387      	movs	r3, #135	@ 0x87
 8004028:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800402a:	2300      	movs	r3, #0
 800402c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800402e:	2300      	movs	r3, #0
 8004030:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004032:	2301      	movs	r3, #1
 8004034:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004036:	2301      	movs	r3, #1
 8004038:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004042:	463b      	mov	r3, r7
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fb67 	bl	8005718 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800404a:	2004      	movs	r0, #4
 800404c:	f001 fb44 	bl	80056d8 <HAL_MPU_Enable>

}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800406a:	f001 f9f9 	bl	8005460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40014800 	.word	0x40014800

0800407c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004080:	b672      	cpsid	i
}
 8004082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <Error_Handler+0x8>

08004088 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800408c:	4b27      	ldr	r3, [pc, #156]	@ (800412c <MX_SPI1_Init+0xa4>)
 800408e:	4a28      	ldr	r2, [pc, #160]	@ (8004130 <MX_SPI1_Init+0xa8>)
 8004090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004092:	4b26      	ldr	r3, [pc, #152]	@ (800412c <MX_SPI1_Init+0xa4>)
 8004094:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800409a:	4b24      	ldr	r3, [pc, #144]	@ (800412c <MX_SPI1_Init+0xa4>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040a2:	2207      	movs	r2, #7
 80040a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a6:	4b21      	ldr	r3, [pc, #132]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040ac:	4b1f      	ldr	r3, [pc, #124]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80040ba:	4b1c      	ldr	r3, [pc, #112]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040bc:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80040c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040c2:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040c8:	4b18      	ldr	r3, [pc, #96]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ce:	4b17      	ldr	r3, [pc, #92]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80040d4:	4b15      	ldr	r3, [pc, #84]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80040fa:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <MX_SPI1_Init+0xa4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004100:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <MX_SPI1_Init+0xa4>)
 8004102:	2200      	movs	r2, #0
 8004104:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004106:	4b09      	ldr	r3, [pc, #36]	@ (800412c <MX_SPI1_Init+0xa4>)
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800410c:	4b07      	ldr	r3, [pc, #28]	@ (800412c <MX_SPI1_Init+0xa4>)
 800410e:	2200      	movs	r2, #0
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004112:	4b06      	ldr	r3, [pc, #24]	@ (800412c <MX_SPI1_Init+0xa4>)
 8004114:	2200      	movs	r2, #0
 8004116:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004118:	4804      	ldr	r0, [pc, #16]	@ (800412c <MX_SPI1_Init+0xa4>)
 800411a:	f007 fea3 	bl	800be64 <HAL_SPI_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8004124:	f7ff ffaa 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	240022d4 	.word	0x240022d4
 8004130:	40013000 	.word	0x40013000

08004134 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004138:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 800413a:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <MX_SPI2_Init+0xa8>)
 800413c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800413e:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004140:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004144:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800414c:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 800414e:	2207      	movs	r2, #7
 8004150:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004152:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004158:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004160:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004164:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004166:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004168:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800416c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800416e:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004170:	2200      	movs	r2, #0
 8004172:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004174:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004176:	2200      	movs	r2, #0
 8004178:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417a:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 800417c:	2200      	movs	r2, #0
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004180:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004182:	2200      	movs	r2, #0
 8004184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004186:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004188:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004190:	2200      	movs	r2, #0
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 8004196:	2200      	movs	r2, #0
 8004198:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80041a6:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041c4:	4804      	ldr	r0, [pc, #16]	@ (80041d8 <MX_SPI2_Init+0xa4>)
 80041c6:	f007 fe4d 	bl	800be64 <HAL_SPI_Init>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80041d0:	f7ff ff54 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2400235c 	.word	0x2400235c
 80041dc:	40003800 	.word	0x40003800

080041e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b0bc      	sub	sp, #240	@ 0xf0
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f8:	f107 0318 	add.w	r3, r7, #24
 80041fc:	22c0      	movs	r2, #192	@ 0xc0
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f012 fb40 	bl	8016886 <memset>
  if(spiHandle->Instance==SPI1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4c      	ldr	r2, [pc, #304]	@ (800433c <HAL_SPI_MspInit+0x15c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d145      	bne.n	800429c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004210:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800421c:	2300      	movs	r3, #0
 800421e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004220:	f107 0318 	add.w	r3, r7, #24
 8004224:	4618      	mov	r0, r3
 8004226:	f006 f83d 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004230:	f7ff ff24 	bl	800407c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004234:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 8004236:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800423a:	4a41      	ldr	r2, [pc, #260]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 800423c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004240:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004244:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 8004246:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800424a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 8004254:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004258:	4a39      	ldr	r2, [pc, #228]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004262:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 8004264:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004270:	23e0      	movs	r3, #224	@ 0xe0
 8004272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004288:	2305      	movs	r3, #5
 800428a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004292:	4619      	mov	r1, r3
 8004294:	482b      	ldr	r0, [pc, #172]	@ (8004344 <HAL_SPI_MspInit+0x164>)
 8004296:	f004 fccd 	bl	8008c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800429a:	e04a      	b.n	8004332 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a29      	ldr	r2, [pc, #164]	@ (8004348 <HAL_SPI_MspInit+0x168>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d145      	bne.n	8004332 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80042a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b6:	f107 0318 	add.w	r3, r7, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 fff2 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80042c6:	f7ff fed9 	bl	800407c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80042da:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80042e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e8:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042ee:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_SPI_MspInit+0x160>)
 80042fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8004306:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004320:	2305      	movs	r3, #5
 8004322:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004326:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800432a:	4619      	mov	r1, r3
 800432c:	4807      	ldr	r0, [pc, #28]	@ (800434c <HAL_SPI_MspInit+0x16c>)
 800432e:	f004 fc81 	bl	8008c34 <HAL_GPIO_Init>
}
 8004332:	bf00      	nop
 8004334:	37f0      	adds	r7, #240	@ 0xf0
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40013000 	.word	0x40013000
 8004340:	58024400 	.word	0x58024400
 8004344:	58020000 	.word	0x58020000
 8004348:	40003800 	.word	0x40003800
 800434c:	58020400 	.word	0x58020400

08004350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <HAL_MspInit+0x38>)
 8004358:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800435c:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <HAL_MspInit+0x38>)
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_MspInit+0x38>)
 8004368:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004374:	2200      	movs	r2, #0
 8004376:	210f      	movs	r1, #15
 8004378:	f06f 0001 	mvn.w	r0, #1
 800437c:	f001 f96c 	bl	8005658 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	58024400 	.word	0x58024400

0800438c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	@ 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d844      	bhi.n	8004424 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800439a:	2200      	movs	r2, #0
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	2076      	movs	r0, #118	@ 0x76
 80043a0:	f001 f95a 	bl	8005658 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80043a4:	2076      	movs	r0, #118	@ 0x76
 80043a6:	f001 f971 	bl	800568c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80043aa:	4a24      	ldr	r2, [pc, #144]	@ (800443c <HAL_InitTick+0xb0>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80043b0:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <HAL_InitTick+0xb4>)
 80043b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80043b6:	4a22      	ldr	r2, [pc, #136]	@ (8004440 <HAL_InitTick+0xb4>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043bc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <HAL_InitTick+0xb4>)
 80043c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80043c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043ce:	f107 020c 	add.w	r2, r7, #12
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f005 ff21 	bl	800a220 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80043de:	f005 ff09 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 80043e2:	4603      	mov	r3, r0
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <HAL_InitTick+0xb8>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	0c9b      	lsrs	r3, r3, #18
 80043f2:	3b01      	subs	r3, #1
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <HAL_InitTick+0xbc>)
 80043f8:	4a14      	ldr	r2, [pc, #80]	@ (800444c <HAL_InitTick+0xc0>)
 80043fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <HAL_InitTick+0xbc>)
 80043fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004402:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004404:	4a10      	ldr	r2, [pc, #64]	@ (8004448 <HAL_InitTick+0xbc>)
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800440a:	4b0f      	ldr	r3, [pc, #60]	@ (8004448 <HAL_InitTick+0xbc>)
 800440c:	2200      	movs	r2, #0
 800440e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <HAL_InitTick+0xbc>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8004416:	480c      	ldr	r0, [pc, #48]	@ (8004448 <HAL_InitTick+0xbc>)
 8004418:	f008 fecb 	bl	800d1b2 <HAL_TIM_Base_Init>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_InitTick+0xa6>
 8004422:	e001      	b.n	8004428 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e005      	b.n	8004434 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8004428:	4807      	ldr	r0, [pc, #28]	@ (8004448 <HAL_InitTick+0xbc>)
 800442a:	f008 ff19 	bl	800d260 <HAL_TIM_Base_Start_IT>
 800442e:	4603      	mov	r3, r0
 8004430:	e000      	b.n	8004434 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	3738      	adds	r7, #56	@ 0x38
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	240000a4 	.word	0x240000a4
 8004440:	58024400 	.word	0x58024400
 8004444:	431bde83 	.word	0x431bde83
 8004448:	240023e4 	.word	0x240023e4
 800444c:	40014800 	.word	0x40014800

08004450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <NMI_Handler+0x4>

08004458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <HardFault_Handler+0x4>

08004460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <MemManage_Handler+0x4>

08004468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <BusFault_Handler+0x4>

08004470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <UsageFault_Handler+0x4>

08004478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800448c:	4802      	ldr	r0, [pc, #8]	@ (8004498 <DMA1_Stream0_IRQHandler+0x10>)
 800448e:	f002 fcdf 	bl	8006e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	2400282c 	.word	0x2400282c

0800449c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044a0:	4802      	ldr	r0, [pc, #8]	@ (80044ac <DMA1_Stream1_IRQHandler+0x10>)
 80044a2:	f002 fcd5 	bl	8006e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	240028a4 	.word	0x240028a4

080044b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80044b4:	4802      	ldr	r0, [pc, #8]	@ (80044c0 <DMA1_Stream2_IRQHandler+0x10>)
 80044b6:	f002 fccb 	bl	8006e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	240027b4 	.word	0x240027b4

080044c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044c8:	4802      	ldr	r0, [pc, #8]	@ (80044d4 <USART1_IRQHandler+0x10>)
 80044ca:	f00a fb15 	bl	800eaf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	240025f8 	.word	0x240025f8

080044d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044dc:	4802      	ldr	r0, [pc, #8]	@ (80044e8 <USART3_IRQHandler+0x10>)
 80044de:	f00a fb0b 	bl	800eaf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2400268c 	.word	0x2400268c

080044ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 80044f0:	f7ff fc5a 	bl	8003da8 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <UART4_IRQHandler+0x14>)
 80044f6:	f00a faff 	bl	800eaf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	24002564 	.word	0x24002564

08004504 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <USART6_IRQHandler+0x10>)
 800450a:	f00a faf5 	bl	800eaf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	24002720 	.word	0x24002720

08004518 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800451c:	4802      	ldr	r0, [pc, #8]	@ (8004528 <TIM17_IRQHandler+0x10>)
 800451e:	f009 f87d 	bl	800d61c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	240023e4 	.word	0x240023e4

0800452c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return 1;
 8004530:	2301      	movs	r3, #1
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <_kill>:

int _kill(int pid, int sig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004546:	f012 fa0b 	bl	8016960 <__errno>
 800454a:	4603      	mov	r3, r0
 800454c:	2216      	movs	r2, #22
 800454e:	601a      	str	r2, [r3, #0]
  return -1;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_exit>:

void _exit (int status)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004564:	f04f 31ff 	mov.w	r1, #4294967295
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffe7 	bl	800453c <_kill>
  while (1) {}    /* Make sure we hang here */
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <_exit+0x12>

08004572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e00a      	b.n	800459a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004584:	f3af 8000 	nop.w
 8004588:	4601      	mov	r1, r0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	60ba      	str	r2, [r7, #8]
 8004590:	b2ca      	uxtb	r2, r1
 8004592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	dbf0      	blt.n	8004584 <_read+0x12>
  }

  return len;
 80045a2:	687b      	ldr	r3, [r7, #4]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e009      	b.n	80045d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	60ba      	str	r2, [r7, #8]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dbf1      	blt.n	80045be <_write+0x12>
  }
  return len;
 80045da:	687b      	ldr	r3, [r7, #4]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_close>:

int _close(int file)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800460c:	605a      	str	r2, [r3, #4]
  return 0;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_isatty>:

int _isatty(int file)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004624:	2301      	movs	r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004654:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <_sbrk+0x5c>)
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <_sbrk+0x60>)
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004660:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <_sbrk+0x64>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004668:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <_sbrk+0x64>)
 800466a:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <_sbrk+0x68>)
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800466e:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <_sbrk+0x64>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d207      	bcs.n	800468c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800467c:	f012 f970 	bl	8016960 <__errno>
 8004680:	4603      	mov	r3, r0
 8004682:	220c      	movs	r2, #12
 8004684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	e009      	b.n	80046a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800468c:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <_sbrk+0x64>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <_sbrk+0x64>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	4a05      	ldr	r2, [pc, #20]	@ (80046b0 <_sbrk+0x64>)
 800469c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	24100000 	.word	0x24100000
 80046ac:	00000400 	.word	0x00000400
 80046b0:	24002430 	.word	0x24002430
 80046b4:	240067e0 	.word	0x240067e0

080046b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046bc:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <SystemInit+0xd0>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <SystemInit+0xd0>)
 80046c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046cc:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <SystemInit+0xd4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d807      	bhi.n	80046e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046d8:	4b2c      	ldr	r3, [pc, #176]	@ (800478c <SystemInit+0xd4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 030f 	bic.w	r3, r3, #15
 80046e0:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <SystemInit+0xd4>)
 80046e2:	f043 0303 	orr.w	r3, r3, #3
 80046e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046e8:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <SystemInit+0xd8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a28      	ldr	r2, [pc, #160]	@ (8004790 <SystemInit+0xd8>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046f4:	4b26      	ldr	r3, [pc, #152]	@ (8004790 <SystemInit+0xd8>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80046fa:	4b25      	ldr	r3, [pc, #148]	@ (8004790 <SystemInit+0xd8>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4924      	ldr	r1, [pc, #144]	@ (8004790 <SystemInit+0xd8>)
 8004700:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <SystemInit+0xdc>)
 8004702:	4013      	ands	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004706:	4b21      	ldr	r3, [pc, #132]	@ (800478c <SystemInit+0xd4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <SystemInit+0xd4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 030f 	bic.w	r3, r3, #15
 800471a:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <SystemInit+0xd4>)
 800471c:	f043 0303 	orr.w	r3, r3, #3
 8004720:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <SystemInit+0xd8>)
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <SystemInit+0xd8>)
 800472a:	2200      	movs	r2, #0
 800472c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800472e:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <SystemInit+0xd8>)
 8004730:	2200      	movs	r2, #0
 8004732:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004734:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <SystemInit+0xd8>)
 8004736:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <SystemInit+0xe0>)
 8004738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800473a:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <SystemInit+0xd8>)
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <SystemInit+0xe4>)
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <SystemInit+0xd8>)
 8004742:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <SystemInit+0xe8>)
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004746:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <SystemInit+0xd8>)
 8004748:	2200      	movs	r2, #0
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <SystemInit+0xd8>)
 800474e:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <SystemInit+0xe8>)
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004752:	4b0f      	ldr	r3, [pc, #60]	@ (8004790 <SystemInit+0xd8>)
 8004754:	2200      	movs	r2, #0
 8004756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004758:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <SystemInit+0xd8>)
 800475a:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <SystemInit+0xe8>)
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <SystemInit+0xd8>)
 8004760:	2200      	movs	r2, #0
 8004762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <SystemInit+0xd8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <SystemInit+0xd8>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800476e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <SystemInit+0xd8>)
 8004772:	2200      	movs	r2, #0
 8004774:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <SystemInit+0xec>)
 8004778:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800477c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00
 800478c:	52002000 	.word	0x52002000
 8004790:	58024400 	.word	0x58024400
 8004794:	eaf6ed7f 	.word	0xeaf6ed7f
 8004798:	02020200 	.word	0x02020200
 800479c:	01ff0000 	.word	0x01ff0000
 80047a0:	01010280 	.word	0x01010280
 80047a4:	52004000 	.word	0x52004000

080047a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ae:	f107 031c 	add.w	r3, r7, #28
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047ba:	463b      	mov	r3, r7
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
 80047c8:	615a      	str	r2, [r3, #20]
 80047ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047cc:	4b33      	ldr	r3, [pc, #204]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80047d4:	4b31      	ldr	r3, [pc, #196]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047d6:	f240 1217 	movw	r2, #279	@ 0x117
 80047da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047dc:	4b2f      	ldr	r3, [pc, #188]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80047e2:	4b2e      	ldr	r3, [pc, #184]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047e4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80047e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ea:	4b2c      	ldr	r3, [pc, #176]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047f0:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047f2:	2280      	movs	r2, #128	@ 0x80
 80047f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047f6:	4829      	ldr	r0, [pc, #164]	@ (800489c <MX_TIM2_Init+0xf4>)
 80047f8:	f008 fdaa 	bl	800d350 <HAL_TIM_PWM_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004802:	f7ff fc3b 	bl	800407c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800480e:	f107 031c 	add.w	r3, r7, #28
 8004812:	4619      	mov	r1, r3
 8004814:	4821      	ldr	r0, [pc, #132]	@ (800489c <MX_TIM2_Init+0xf4>)
 8004816:	f009 fce7 	bl	800e1e8 <HAL_TIMEx_MasterConfigSynchronization>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8004820:	f7ff fc2c 	bl	800407c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004824:	2360      	movs	r3, #96	@ 0x60
 8004826:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004834:	463b      	mov	r3, r7
 8004836:	2200      	movs	r2, #0
 8004838:	4619      	mov	r1, r3
 800483a:	4818      	ldr	r0, [pc, #96]	@ (800489c <MX_TIM2_Init+0xf4>)
 800483c:	f008 fff6 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8004846:	f7ff fc19 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800484a:	463b      	mov	r3, r7
 800484c:	2204      	movs	r2, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4812      	ldr	r0, [pc, #72]	@ (800489c <MX_TIM2_Init+0xf4>)
 8004852:	f008 ffeb 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800485c:	f7ff fc0e 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004860:	463b      	mov	r3, r7
 8004862:	2208      	movs	r2, #8
 8004864:	4619      	mov	r1, r3
 8004866:	480d      	ldr	r0, [pc, #52]	@ (800489c <MX_TIM2_Init+0xf4>)
 8004868:	f008 ffe0 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8004872:	f7ff fc03 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004876:	463b      	mov	r3, r7
 8004878:	220c      	movs	r2, #12
 800487a:	4619      	mov	r1, r3
 800487c:	4807      	ldr	r0, [pc, #28]	@ (800489c <MX_TIM2_Init+0xf4>)
 800487e:	f008 ffd5 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8004888:	f7ff fbf8 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800488c:	4803      	ldr	r0, [pc, #12]	@ (800489c <MX_TIM2_Init+0xf4>)
 800488e:	f000 f97d 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 8004892:	bf00      	nop
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	24002434 	.word	0x24002434

080048a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048a6:	f107 031c 	add.w	r3, r7, #28
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048b2:	463b      	mov	r3, r7
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	611a      	str	r2, [r3, #16]
 80048c0:	615a      	str	r2, [r3, #20]
 80048c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048c4:	4b27      	ldr	r3, [pc, #156]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048c6:	4a28      	ldr	r2, [pc, #160]	@ (8004968 <MX_TIM3_Init+0xc8>)
 80048c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80048ca:	4b26      	ldr	r3, [pc, #152]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048cc:	f240 1217 	movw	r2, #279	@ 0x117
 80048d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d2:	4b24      	ldr	r3, [pc, #144]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80048d8:	4b22      	ldr	r3, [pc, #136]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048da:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80048de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e0:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048e8:	2280      	movs	r2, #128	@ 0x80
 80048ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80048ec:	481d      	ldr	r0, [pc, #116]	@ (8004964 <MX_TIM3_Init+0xc4>)
 80048ee:	f008 fd2f 	bl	800d350 <HAL_TIM_PWM_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80048f8:	f7ff fbc0 	bl	800407c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004904:	f107 031c 	add.w	r3, r7, #28
 8004908:	4619      	mov	r1, r3
 800490a:	4816      	ldr	r0, [pc, #88]	@ (8004964 <MX_TIM3_Init+0xc4>)
 800490c:	f009 fc6c 	bl	800e1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004916:	f7ff fbb1 	bl	800407c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800491a:	2360      	movs	r3, #96	@ 0x60
 800491c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800492a:	463b      	mov	r3, r7
 800492c:	2200      	movs	r2, #0
 800492e:	4619      	mov	r1, r3
 8004930:	480c      	ldr	r0, [pc, #48]	@ (8004964 <MX_TIM3_Init+0xc4>)
 8004932:	f008 ff7b 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800493c:	f7ff fb9e 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004940:	463b      	mov	r3, r7
 8004942:	2204      	movs	r2, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4807      	ldr	r0, [pc, #28]	@ (8004964 <MX_TIM3_Init+0xc4>)
 8004948:	f008 ff70 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8004952:	f7ff fb93 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004956:	4803      	ldr	r0, [pc, #12]	@ (8004964 <MX_TIM3_Init+0xc4>)
 8004958:	f000 f918 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 800495c:	bf00      	nop
 800495e:	3728      	adds	r7, #40	@ 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	24002480 	.word	0x24002480
 8004968:	40000400 	.word	0x40000400

0800496c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	@ 0x28
 8004970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004972:	f107 031c 	add.w	r3, r7, #28
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800497e:	463b      	mov	r3, r7
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
 800498c:	615a      	str	r2, [r3, #20]
 800498e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004990:	4b32      	ldr	r3, [pc, #200]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004992:	4a33      	ldr	r2, [pc, #204]	@ (8004a60 <MX_TIM4_Init+0xf4>)
 8004994:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8004996:	4b31      	ldr	r3, [pc, #196]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004998:	f240 1217 	movw	r2, #279	@ 0x117
 800499c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800499e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80049a4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049a6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80049aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ac:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049b2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049b4:	2280      	movs	r2, #128	@ 0x80
 80049b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80049b8:	4828      	ldr	r0, [pc, #160]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049ba:	f008 fcc9 	bl	800d350 <HAL_TIM_PWM_Init>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80049c4:	f7ff fb5a 	bl	800407c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049d0:	f107 031c 	add.w	r3, r7, #28
 80049d4:	4619      	mov	r1, r3
 80049d6:	4821      	ldr	r0, [pc, #132]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049d8:	f009 fc06 	bl	800e1e8 <HAL_TIMEx_MasterConfigSynchronization>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80049e2:	f7ff fb4b 	bl	800407c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049e6:	2360      	movs	r3, #96	@ 0x60
 80049e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049f6:	463b      	mov	r3, r7
 80049f8:	2200      	movs	r2, #0
 80049fa:	4619      	mov	r1, r3
 80049fc:	4817      	ldr	r0, [pc, #92]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 80049fe:	f008 ff15 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004a08:	f7ff fb38 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	2204      	movs	r2, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4812      	ldr	r0, [pc, #72]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004a14:	f008 ff0a 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004a1e:	f7ff fb2d 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a22:	463b      	mov	r3, r7
 8004a24:	2208      	movs	r2, #8
 8004a26:	4619      	mov	r1, r3
 8004a28:	480c      	ldr	r0, [pc, #48]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004a2a:	f008 feff 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004a34:	f7ff fb22 	bl	800407c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a38:	463b      	mov	r3, r7
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4807      	ldr	r0, [pc, #28]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004a40:	f008 fef4 	bl	800d82c <HAL_TIM_PWM_ConfigChannel>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004a4a:	f7ff fb17 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a4e:	4803      	ldr	r0, [pc, #12]	@ (8004a5c <MX_TIM4_Init+0xf0>)
 8004a50:	f000 f89c 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 8004a54:	bf00      	nop
 8004a56:	3728      	adds	r7, #40	@ 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	240024cc 	.word	0x240024cc
 8004a60:	40000800 	.word	0x40000800

08004a64 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004a68:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa8 <MX_TIM13_Init+0x44>)
 8004a6c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a70:	f240 1217 	movw	r2, #279	@ 0x117
 8004a74:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a82:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a84:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a8c:	2280      	movs	r2, #128	@ 0x80
 8004a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004a90:	4804      	ldr	r0, [pc, #16]	@ (8004aa4 <MX_TIM13_Init+0x40>)
 8004a92:	f008 fb8e 	bl	800d1b2 <HAL_TIM_Base_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004a9c:	f7ff faee 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	24002518 	.word	0x24002518
 8004aa8:	40001c00 	.word	0x40001c00

08004aac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d10f      	bne.n	8004ade <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004abe:	4b1f      	ldr	r3, [pc, #124]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004ac0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004ace:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004ad0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004adc:	e028      	b.n	8004b30 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <HAL_TIM_PWM_MspInit+0x94>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10f      	bne.n	8004b08 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ae8:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004aea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004af8:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004afa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	e013      	b.n	8004b30 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b44 <HAL_TIM_PWM_MspInit+0x98>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004b14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004b18:	4a08      	ldr	r2, [pc, #32]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x90>)
 8004b24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800

08004b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a0b      	ldr	r2, [pc, #44]	@ (8004b84 <HAL_TIM_Base_MspInit+0x3c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_TIM_Base_MspInit+0x40>)
 8004b5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004b60:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <HAL_TIM_Base_MspInit+0x40>)
 8004b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b66:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004b6a:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <HAL_TIM_Base_MspInit+0x40>)
 8004b6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40001c00 	.word	0x40001c00
 8004b88:	58024400 	.word	0x58024400

08004b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08c      	sub	sp, #48	@ 0x30
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 031c 	add.w	r3, r7, #28
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bac:	d13f      	bne.n	8004c2e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004bb4:	4a45      	ldr	r2, [pc, #276]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004bbe:	4b43      	ldr	r3, [pc, #268]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004bea:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c00:	f107 031c 	add.w	r3, r7, #28
 8004c04:	4619      	mov	r1, r3
 8004c06:	4832      	ldr	r0, [pc, #200]	@ (8004cd0 <HAL_TIM_MspPostInit+0x144>)
 8004c08:	f004 f814 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c10:	2302      	movs	r3, #2
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	4619      	mov	r1, r3
 8004c26:	482b      	ldr	r0, [pc, #172]	@ (8004cd4 <HAL_TIM_MspPostInit+0x148>)
 8004c28:	f004 f804 	bl	8008c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004c2c:	e049      	b.n	8004cc2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a29      	ldr	r2, [pc, #164]	@ (8004cd8 <HAL_TIM_MspPostInit+0x14c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d11f      	bne.n	8004c78 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004c3e:	4a23      	ldr	r2, [pc, #140]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c40:	f043 0302 	orr.w	r3, r3, #2
 8004c44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004c48:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c56:	2330      	movs	r3, #48	@ 0x30
 8004c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c66:	2302      	movs	r3, #2
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6a:	f107 031c 	add.w	r3, r7, #28
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4818      	ldr	r0, [pc, #96]	@ (8004cd4 <HAL_TIM_MspPostInit+0x148>)
 8004c72:	f003 ffdf 	bl	8008c34 <HAL_GPIO_Init>
}
 8004c76:	e024      	b.n	8004cc2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_TIM_MspPostInit+0x150>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d11f      	bne.n	8004cc2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004c88:	4a10      	ldr	r2, [pc, #64]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_TIM_MspPostInit+0x140>)
 8004c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004ca0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4805      	ldr	r0, [pc, #20]	@ (8004cd4 <HAL_TIM_MspPostInit+0x148>)
 8004cbe:	f003 ffb9 	bl	8008c34 <HAL_GPIO_Init>
}
 8004cc2:	bf00      	nop
 8004cc4:	3730      	adds	r7, #48	@ 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	58020000 	.word	0x58020000
 8004cd4:	58020400 	.word	0x58020400
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800

08004ce0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004ce4:	4b22      	ldr	r3, [pc, #136]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004ce6:	4a23      	ldr	r2, [pc, #140]	@ (8004d74 <MX_UART4_Init+0x94>)
 8004ce8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004cea:	4b21      	ldr	r3, [pc, #132]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004cec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004cf0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d04:	4b1a      	ldr	r3, [pc, #104]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d06:	220c      	movs	r2, #12
 8004d08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0a:	4b19      	ldr	r3, [pc, #100]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d10:	4b17      	ldr	r3, [pc, #92]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d16:	4b16      	ldr	r3, [pc, #88]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d1c:	4b14      	ldr	r3, [pc, #80]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d22:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d28:	4811      	ldr	r0, [pc, #68]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d2a:	f009 fb09 	bl	800e340 <HAL_UART_Init>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004d34:	f7ff f9a2 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d38:	2100      	movs	r1, #0
 8004d3a:	480d      	ldr	r0, [pc, #52]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d3c:	f00c fe2f 	bl	801199e <HAL_UARTEx_SetTxFifoThreshold>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004d46:	f7ff f999 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4808      	ldr	r0, [pc, #32]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d4e:	f00c fe64 	bl	8011a1a <HAL_UARTEx_SetRxFifoThreshold>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004d58:	f7ff f990 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004d5c:	4804      	ldr	r0, [pc, #16]	@ (8004d70 <MX_UART4_Init+0x90>)
 8004d5e:	f00c fde5 	bl	801192c <HAL_UARTEx_DisableFifoMode>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004d68:	f7ff f988 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	24002564 	.word	0x24002564
 8004d74:	40004c00 	.word	0x40004c00

08004d78 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d7c:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004d7e:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <MX_USART1_UART_Init+0x98>)
 8004d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004d82:	4b22      	ldr	r3, [pc, #136]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004d84:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <MX_USART1_UART_Init+0x9c>)
 8004d86:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004d8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d90:	4b1e      	ldr	r3, [pc, #120]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004d96:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004da0:	220c      	movs	r2, #12
 8004da2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da4:	4b19      	ldr	r3, [pc, #100]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004daa:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004db0:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dc2:	4812      	ldr	r0, [pc, #72]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004dc4:	f009 fabc 	bl	800e340 <HAL_UART_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004dce:	f7ff f955 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	480d      	ldr	r0, [pc, #52]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004dd6:	f00c fde2 	bl	801199e <HAL_UARTEx_SetTxFifoThreshold>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004de0:	f7ff f94c 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004de4:	2100      	movs	r1, #0
 8004de6:	4809      	ldr	r0, [pc, #36]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004de8:	f00c fe17 	bl	8011a1a <HAL_UARTEx_SetRxFifoThreshold>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004df2:	f7ff f943 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004df6:	4805      	ldr	r0, [pc, #20]	@ (8004e0c <MX_USART1_UART_Init+0x94>)
 8004df8:	f00c fd98 	bl	801192c <HAL_UARTEx_DisableFifoMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004e02:	f7ff f93b 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	240025f8 	.word	0x240025f8
 8004e10:	40011000 	.word	0x40011000
 8004e14:	000186a0 	.word	0x000186a0

08004e18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e1c:	4b22      	ldr	r3, [pc, #136]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e1e:	4a23      	ldr	r2, [pc, #140]	@ (8004eac <MX_USART3_UART_Init+0x94>)
 8004e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e22:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e36:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e3e:	220c      	movs	r2, #12
 8004e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e42:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e48:	4b17      	ldr	r3, [pc, #92]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e54:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e60:	4811      	ldr	r0, [pc, #68]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e62:	f009 fa6d 	bl	800e340 <HAL_UART_Init>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004e6c:	f7ff f906 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e70:	2100      	movs	r1, #0
 8004e72:	480d      	ldr	r0, [pc, #52]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e74:	f00c fd93 	bl	801199e <HAL_UARTEx_SetTxFifoThreshold>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004e7e:	f7ff f8fd 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e82:	2100      	movs	r1, #0
 8004e84:	4808      	ldr	r0, [pc, #32]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e86:	f00c fdc8 	bl	8011a1a <HAL_UARTEx_SetRxFifoThreshold>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004e90:	f7ff f8f4 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004e94:	4804      	ldr	r0, [pc, #16]	@ (8004ea8 <MX_USART3_UART_Init+0x90>)
 8004e96:	f00c fd49 	bl	801192c <HAL_UARTEx_DisableFifoMode>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004ea0:	f7ff f8ec 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	2400268c 	.word	0x2400268c
 8004eac:	40004800 	.word	0x40004800

08004eb0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004eb4:	4b22      	ldr	r3, [pc, #136]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004eb6:	4a23      	ldr	r2, [pc, #140]	@ (8004f44 <MX_USART6_UART_Init+0x94>)
 8004eb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004eba:	4b21      	ldr	r3, [pc, #132]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ec0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ed6:	220c      	movs	r2, #12
 8004ed8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eda:	4b19      	ldr	r3, [pc, #100]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ee0:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ee6:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004eec:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004ef8:	4811      	ldr	r0, [pc, #68]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004efa:	f009 fa21 	bl	800e340 <HAL_UART_Init>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004f04:	f7ff f8ba 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f08:	2100      	movs	r1, #0
 8004f0a:	480d      	ldr	r0, [pc, #52]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004f0c:	f00c fd47 	bl	801199e <HAL_UARTEx_SetTxFifoThreshold>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004f16:	f7ff f8b1 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4808      	ldr	r0, [pc, #32]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004f1e:	f00c fd7c 	bl	8011a1a <HAL_UARTEx_SetRxFifoThreshold>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004f28:	f7ff f8a8 	bl	800407c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004f2c:	4804      	ldr	r0, [pc, #16]	@ (8004f40 <MX_USART6_UART_Init+0x90>)
 8004f2e:	f00c fcfd 	bl	801192c <HAL_UARTEx_DisableFifoMode>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004f38:	f7ff f8a0 	bl	800407c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f3c:	bf00      	nop
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	24002720 	.word	0x24002720
 8004f44:	40011400 	.word	0x40011400

08004f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b0c0      	sub	sp, #256	@ 0x100
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f50:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	60da      	str	r2, [r3, #12]
 8004f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f64:	22c0      	movs	r2, #192	@ 0xc0
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f011 fc8c 	bl	8016886 <memset>
  if(uartHandle->Instance==UART4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a82      	ldr	r2, [pc, #520]	@ (800517c <HAL_UART_MspInit+0x234>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d17c      	bne.n	8005072 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004f78:	f04f 0202 	mov.w	r2, #2
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f005 f988 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004f9a:	f7ff f86f 	bl	800407c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004f9e:	4b78      	ldr	r3, [pc, #480]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fa0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004fa4:	4a76      	ldr	r2, [pc, #472]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004faa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004fae:	4b74      	ldr	r3, [pc, #464]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fbc:	4b70      	ldr	r3, [pc, #448]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005180 <HAL_UART_MspInit+0x238>)
 8004fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4861      	ldr	r0, [pc, #388]	@ (8005184 <HAL_UART_MspInit+0x23c>)
 8005000:	f003 fe18 	bl	8008c34 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005004:	4b60      	ldr	r3, [pc, #384]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005006:	4a61      	ldr	r2, [pc, #388]	@ (800518c <HAL_UART_MspInit+0x244>)
 8005008:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800500a:	4b5f      	ldr	r3, [pc, #380]	@ (8005188 <HAL_UART_MspInit+0x240>)
 800500c:	223f      	movs	r2, #63	@ 0x3f
 800500e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005010:	4b5d      	ldr	r3, [pc, #372]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005016:	4b5c      	ldr	r3, [pc, #368]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005018:	2200      	movs	r2, #0
 800501a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800501c:	4b5a      	ldr	r3, [pc, #360]	@ (8005188 <HAL_UART_MspInit+0x240>)
 800501e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005022:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005024:	4b58      	ldr	r3, [pc, #352]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005026:	2200      	movs	r2, #0
 8005028:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800502a:	4b57      	ldr	r3, [pc, #348]	@ (8005188 <HAL_UART_MspInit+0x240>)
 800502c:	2200      	movs	r2, #0
 800502e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005030:	4b55      	ldr	r3, [pc, #340]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005036:	4b54      	ldr	r3, [pc, #336]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005038:	2200      	movs	r2, #0
 800503a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800503c:	4b52      	ldr	r3, [pc, #328]	@ (8005188 <HAL_UART_MspInit+0x240>)
 800503e:	2200      	movs	r2, #0
 8005040:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005042:	4851      	ldr	r0, [pc, #324]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005044:	f000 fba8 	bl	8005798 <HAL_DMA_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800504e:	f7ff f815 	bl	800407c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a4c      	ldr	r2, [pc, #304]	@ (8005188 <HAL_UART_MspInit+0x240>)
 8005056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800505a:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <HAL_UART_MspInit+0x240>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005060:	2200      	movs	r2, #0
 8005062:	2105      	movs	r1, #5
 8005064:	2034      	movs	r0, #52	@ 0x34
 8005066:	f000 faf7 	bl	8005658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800506a:	2034      	movs	r0, #52	@ 0x34
 800506c:	f000 fb0e 	bl	800568c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005070:	e16a      	b.n	8005348 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a46      	ldr	r2, [pc, #280]	@ (8005190 <HAL_UART_MspInit+0x248>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f040 808f 	bne.w	800519c <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800507e:	f04f 0201 	mov.w	r2, #1
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800508a:	2300      	movs	r3, #0
 800508c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005090:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005094:	4618      	mov	r0, r3
 8005096:	f005 f905 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80050a0:	f7fe ffec 	bl	800407c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a4:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80050aa:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050ac:	f043 0310 	orr.w	r3, r3, #16
 80050b0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80050b4:	4b32      	ldr	r3, [pc, #200]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80050d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_UART_MspInit+0x238>)
 80050d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80050e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80050e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	2302      	movs	r3, #2
 80050ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050fa:	2307      	movs	r3, #7
 80050fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005100:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005104:	4619      	mov	r1, r3
 8005106:	481f      	ldr	r0, [pc, #124]	@ (8005184 <HAL_UART_MspInit+0x23c>)
 8005108:	f003 fd94 	bl	8008c34 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800510c:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 800510e:	4a22      	ldr	r2, [pc, #136]	@ (8005198 <HAL_UART_MspInit+0x250>)
 8005110:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005112:	4b20      	ldr	r3, [pc, #128]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005114:	2229      	movs	r2, #41	@ 0x29
 8005116:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005118:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800511e:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005120:	2200      	movs	r2, #0
 8005122:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800512a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800512c:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 800512e:	2200      	movs	r2, #0
 8005130:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005132:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005134:	2200      	movs	r2, #0
 8005136:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005138:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 800513a:	2200      	movs	r2, #0
 800513c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800513e:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005140:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005144:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005146:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005148:	2200      	movs	r2, #0
 800514a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800514c:	4811      	ldr	r0, [pc, #68]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 800514e:	f000 fb23 	bl	8005798 <HAL_DMA_Init>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_UART_MspInit+0x214>
      Error_Handler();
 8005158:	f7fe ff90 	bl	800407c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0d      	ldr	r2, [pc, #52]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005164:	4a0b      	ldr	r2, [pc, #44]	@ (8005194 <HAL_UART_MspInit+0x24c>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800516a:	2200      	movs	r2, #0
 800516c:	2105      	movs	r1, #5
 800516e:	2025      	movs	r0, #37	@ 0x25
 8005170:	f000 fa72 	bl	8005658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005174:	2025      	movs	r0, #37	@ 0x25
 8005176:	f000 fa89 	bl	800568c <HAL_NVIC_EnableIRQ>
}
 800517a:	e0e5      	b.n	8005348 <HAL_UART_MspInit+0x400>
 800517c:	40004c00 	.word	0x40004c00
 8005180:	58024400 	.word	0x58024400
 8005184:	58020000 	.word	0x58020000
 8005188:	240027b4 	.word	0x240027b4
 800518c:	40020040 	.word	0x40020040
 8005190:	40011000 	.word	0x40011000
 8005194:	2400282c 	.word	0x2400282c
 8005198:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005354 <HAL_UART_MspInit+0x40c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d17d      	bne.n	80052a2 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80051a6:	f04f 0202 	mov.w	r2, #2
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051bc:	4618      	mov	r0, r3
 80051be:	f005 f871 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_MspInit+0x284>
      Error_Handler();
 80051c8:	f7fe ff58 	bl	800407c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80051cc:	4b62      	ldr	r3, [pc, #392]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80051d2:	4a61      	ldr	r2, [pc, #388]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051d8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80051dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051de:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80051e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80051f0:	4a59      	ldr	r2, [pc, #356]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80051fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800520c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005210:	2302      	movs	r3, #2
 8005212:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005222:	2307      	movs	r3, #7
 8005224:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005228:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800522c:	4619      	mov	r1, r3
 800522e:	484b      	ldr	r0, [pc, #300]	@ (800535c <HAL_UART_MspInit+0x414>)
 8005230:	f003 fd00 	bl	8008c34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005234:	4b4a      	ldr	r3, [pc, #296]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005236:	4a4b      	ldr	r2, [pc, #300]	@ (8005364 <HAL_UART_MspInit+0x41c>)
 8005238:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800523a:	4b49      	ldr	r3, [pc, #292]	@ (8005360 <HAL_UART_MspInit+0x418>)
 800523c:	222d      	movs	r2, #45	@ 0x2d
 800523e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005240:	4b47      	ldr	r3, [pc, #284]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005246:	4b46      	ldr	r3, [pc, #280]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005248:	2200      	movs	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800524c:	4b44      	ldr	r3, [pc, #272]	@ (8005360 <HAL_UART_MspInit+0x418>)
 800524e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005252:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005254:	4b42      	ldr	r3, [pc, #264]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005256:	2200      	movs	r2, #0
 8005258:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800525a:	4b41      	ldr	r3, [pc, #260]	@ (8005360 <HAL_UART_MspInit+0x418>)
 800525c:	2200      	movs	r2, #0
 800525e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005260:	4b3f      	ldr	r3, [pc, #252]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005262:	2200      	movs	r2, #0
 8005264:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005266:	4b3e      	ldr	r3, [pc, #248]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005268:	2200      	movs	r2, #0
 800526a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800526c:	4b3c      	ldr	r3, [pc, #240]	@ (8005360 <HAL_UART_MspInit+0x418>)
 800526e:	2200      	movs	r2, #0
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005272:	483b      	ldr	r0, [pc, #236]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005274:	f000 fa90 	bl	8005798 <HAL_DMA_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 800527e:	f7fe fefd 	bl	800407c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a36      	ldr	r2, [pc, #216]	@ (8005360 <HAL_UART_MspInit+0x418>)
 8005286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800528a:	4a35      	ldr	r2, [pc, #212]	@ (8005360 <HAL_UART_MspInit+0x418>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005290:	2200      	movs	r2, #0
 8005292:	2105      	movs	r1, #5
 8005294:	2027      	movs	r0, #39	@ 0x27
 8005296:	f000 f9df 	bl	8005658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800529a:	2027      	movs	r0, #39	@ 0x27
 800529c:	f000 f9f6 	bl	800568c <HAL_NVIC_EnableIRQ>
}
 80052a0:	e052      	b.n	8005348 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a30      	ldr	r2, [pc, #192]	@ (8005368 <HAL_UART_MspInit+0x420>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d14d      	bne.n	8005348 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80052ac:	f04f 0201 	mov.w	r2, #1
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052c2:	4618      	mov	r0, r3
 80052c4:	f004 ffee 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 80052ce:	f7fe fed5 	bl	800407c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80052d2:	4b21      	ldr	r3, [pc, #132]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80052d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80052d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80052da:	f043 0320 	orr.w	r3, r3, #32
 80052de:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80052e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80052e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80052f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80052f6:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_UART_MspInit+0x410>)
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005300:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_UART_MspInit+0x410>)
 8005302:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800530e:	23c0      	movs	r3, #192	@ 0xc0
 8005310:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	2302      	movs	r3, #2
 8005316:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8005326:	2307      	movs	r3, #7
 8005328:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005330:	4619      	mov	r1, r3
 8005332:	480a      	ldr	r0, [pc, #40]	@ (800535c <HAL_UART_MspInit+0x414>)
 8005334:	f003 fc7e 	bl	8008c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005338:	2200      	movs	r2, #0
 800533a:	2105      	movs	r1, #5
 800533c:	2047      	movs	r0, #71	@ 0x47
 800533e:	f000 f98b 	bl	8005658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005342:	2047      	movs	r0, #71	@ 0x47
 8005344:	f000 f9a2 	bl	800568c <HAL_NVIC_EnableIRQ>
}
 8005348:	bf00      	nop
 800534a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40004800 	.word	0x40004800
 8005358:	58024400 	.word	0x58024400
 800535c:	58020800 	.word	0x58020800
 8005360:	240028a4 	.word	0x240028a4
 8005364:	40020028 	.word	0x40020028
 8005368:	40011400 	.word	0x40011400

0800536c <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	220f      	movs	r2, #15
 800537a:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f009 fa7f 	bl	800e880 <HAL_UART_Abort_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8005388:	f7fe fe78 	bl	800407c <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005398:	f7ff f98e 	bl	80046b8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800539c:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800539e:	490d      	ldr	r1, [pc, #52]	@ (80053d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053a0:	4a0d      	ldr	r2, [pc, #52]	@ (80053d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053a4:	e002      	b.n	80053ac <LoopCopyDataInit>

080053a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053aa:	3304      	adds	r3, #4

080053ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80053ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053b0:	d3f9      	bcc.n	80053a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053b4:	4c0a      	ldr	r4, [pc, #40]	@ (80053e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80053b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053b8:	e001      	b.n	80053be <LoopFillZerobss>

080053ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053bc:	3204      	adds	r2, #4

080053be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053c0:	d3fb      	bcc.n	80053ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80053c2:	f011 fad3 	bl	801696c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053c6:	f7fe fd11 	bl	8003dec <main>
  bx  lr
 80053ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053cc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80053d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80053d4:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80053d8:	08019670 	.word	0x08019670
  ldr r2, =_sbss
 80053dc:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80053e0:	240067dc 	.word	0x240067dc

080053e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053e4:	e7fe      	b.n	80053e4 <ADC_IRQHandler>
	...

080053e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ee:	2003      	movs	r0, #3
 80053f0:	f000 f927 	bl	8005642 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80053f4:	f004 fd3e 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <HAL_Init+0x68>)
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	4913      	ldr	r1, [pc, #76]	@ (8005454 <HAL_Init+0x6c>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005412:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <HAL_Init+0x68>)
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <HAL_Init+0x6c>)
 800541c:	5cd3      	ldrb	r3, [r2, r3]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	4a0b      	ldr	r2, [pc, #44]	@ (8005458 <HAL_Init+0x70>)
 800542a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800542c:	4a0b      	ldr	r2, [pc, #44]	@ (800545c <HAL_Init+0x74>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005432:	200f      	movs	r0, #15
 8005434:	f7fe ffaa 	bl	800438c <HAL_InitTick>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e002      	b.n	8005448 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005442:	f7fe ff85 	bl	8004350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	58024400 	.word	0x58024400
 8005454:	080189d4 	.word	0x080189d4
 8005458:	240000a0 	.word	0x240000a0
 800545c:	2400009c 	.word	0x2400009c

08005460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005464:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <HAL_IncTick+0x20>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_IncTick+0x24>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4413      	add	r3, r2
 8005470:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <HAL_IncTick+0x24>)
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	240000a8 	.word	0x240000a8
 8005484:	2400291c 	.word	0x2400291c

08005488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return uwTick;
 800548c:	4b03      	ldr	r3, [pc, #12]	@ (800549c <HAL_GetTick+0x14>)
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2400291c 	.word	0x2400291c

080054a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054a8:	f7ff ffee 	bl	8005488 <HAL_GetTick>
 80054ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d005      	beq.n	80054c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ba:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <HAL_Delay+0x44>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054c6:	bf00      	nop
 80054c8:	f7ff ffde 	bl	8005488 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d8f7      	bhi.n	80054c8 <HAL_Delay+0x28>
  {
  }
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	240000a8 	.word	0x240000a8

080054e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <__NVIC_SetPriorityGrouping+0x40>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005504:	4013      	ands	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <__NVIC_SetPriorityGrouping+0x44>)
 8005512:	4313      	orrs	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005516:	4a04      	ldr	r2, [pc, #16]	@ (8005528 <__NVIC_SetPriorityGrouping+0x40>)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	60d3      	str	r3, [r2, #12]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	e000ed00 	.word	0xe000ed00
 800552c:	05fa0000 	.word	0x05fa0000

08005530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005534:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <__NVIC_GetPriorityGrouping+0x18>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 0307 	and.w	r3, r3, #7
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db0b      	blt.n	8005576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	4907      	ldr	r1, [pc, #28]	@ (8005584 <__NVIC_EnableIRQ+0x38>)
 8005566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2001      	movs	r0, #1
 800556e:	fa00 f202 	lsl.w	r2, r0, r2
 8005572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	e000e100 	.word	0xe000e100

08005588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	db0a      	blt.n	80055b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	490c      	ldr	r1, [pc, #48]	@ (80055d4 <__NVIC_SetPriority+0x4c>)
 80055a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	440b      	add	r3, r1
 80055ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055b0:	e00a      	b.n	80055c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4908      	ldr	r1, [pc, #32]	@ (80055d8 <__NVIC_SetPriority+0x50>)
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	3b04      	subs	r3, #4
 80055c0:	0112      	lsls	r2, r2, #4
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	440b      	add	r3, r1
 80055c6:	761a      	strb	r2, [r3, #24]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000e100 	.word	0xe000e100
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	@ 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f1c3 0307 	rsb	r3, r3, #7
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	bf28      	it	cs
 80055fa:	2304      	movcs	r3, #4
 80055fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3304      	adds	r3, #4
 8005602:	2b06      	cmp	r3, #6
 8005604:	d902      	bls.n	800560c <NVIC_EncodePriority+0x30>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3b03      	subs	r3, #3
 800560a:	e000      	b.n	800560e <NVIC_EncodePriority+0x32>
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	401a      	ands	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005624:	f04f 31ff 	mov.w	r1, #4294967295
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	43d9      	mvns	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005634:	4313      	orrs	r3, r2
         );
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	@ 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff ff4c 	bl	80054e8 <__NVIC_SetPriorityGrouping>
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005666:	f7ff ff63 	bl	8005530 <__NVIC_GetPriorityGrouping>
 800566a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	f7ff ffb3 	bl	80055dc <NVIC_EncodePriority>
 8005676:	4602      	mov	r2, r0
 8005678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff82 	bl	8005588 <__NVIC_SetPriority>
}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff ff56 	bl	800554c <__NVIC_EnableIRQ>
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80056ac:	f3bf 8f5f 	dmb	sy
}
 80056b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80056b2:	4b07      	ldr	r3, [pc, #28]	@ (80056d0 <HAL_MPU_Disable+0x28>)
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	4a06      	ldr	r2, [pc, #24]	@ (80056d0 <HAL_MPU_Disable+0x28>)
 80056b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80056be:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <HAL_MPU_Disable+0x2c>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	605a      	str	r2, [r3, #4]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000ed00 	.word	0xe000ed00
 80056d4:	e000ed90 	.word	0xe000ed90

080056d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80056e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005710 <HAL_MPU_Enable+0x38>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80056ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <HAL_MPU_Enable+0x3c>)
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <HAL_MPU_Enable+0x3c>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80056f6:	f3bf 8f4f 	dsb	sy
}
 80056fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056fc:	f3bf 8f6f 	isb	sy
}
 8005700:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000ed90 	.word	0xe000ed90
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	785a      	ldrb	r2, [r3, #1]
 8005724:	4b1b      	ldr	r3, [pc, #108]	@ (8005794 <HAL_MPU_ConfigRegion+0x7c>)
 8005726:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <HAL_MPU_ConfigRegion+0x7c>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <HAL_MPU_ConfigRegion+0x7c>)
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005734:	4a17      	ldr	r2, [pc, #92]	@ (8005794 <HAL_MPU_ConfigRegion+0x7c>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7b1b      	ldrb	r3, [r3, #12]
 8005740:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7adb      	ldrb	r3, [r3, #11]
 8005746:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7a9b      	ldrb	r3, [r3, #10]
 800574e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7b9b      	ldrb	r3, [r3, #14]
 800575e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7bdb      	ldrb	r3, [r3, #15]
 8005766:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7a5b      	ldrb	r3, [r3, #9]
 800576e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7a1b      	ldrb	r3, [r3, #8]
 8005776:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005778:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005780:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005782:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005784:	6113      	str	r3, [r2, #16]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	e000ed90 	.word	0xe000ed90

08005798 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057a0:	f7ff fe72 	bl	8005488 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e37d      	b.n	8005eac <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a66      	ldr	r2, [pc, #408]	@ (8005950 <HAL_DMA_Init+0x1b8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d04a      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a65      	ldr	r2, [pc, #404]	@ (8005954 <HAL_DMA_Init+0x1bc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d045      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a63      	ldr	r2, [pc, #396]	@ (8005958 <HAL_DMA_Init+0x1c0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d040      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a62      	ldr	r2, [pc, #392]	@ (800595c <HAL_DMA_Init+0x1c4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d03b      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a60      	ldr	r2, [pc, #384]	@ (8005960 <HAL_DMA_Init+0x1c8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d036      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005964 <HAL_DMA_Init+0x1cc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d031      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005968 <HAL_DMA_Init+0x1d0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d02c      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5c      	ldr	r2, [pc, #368]	@ (800596c <HAL_DMA_Init+0x1d4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d027      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5a      	ldr	r2, [pc, #360]	@ (8005970 <HAL_DMA_Init+0x1d8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d022      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a59      	ldr	r2, [pc, #356]	@ (8005974 <HAL_DMA_Init+0x1dc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01d      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a57      	ldr	r2, [pc, #348]	@ (8005978 <HAL_DMA_Init+0x1e0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a56      	ldr	r2, [pc, #344]	@ (800597c <HAL_DMA_Init+0x1e4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a54      	ldr	r2, [pc, #336]	@ (8005980 <HAL_DMA_Init+0x1e8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a53      	ldr	r2, [pc, #332]	@ (8005984 <HAL_DMA_Init+0x1ec>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a51      	ldr	r2, [pc, #324]	@ (8005988 <HAL_DMA_Init+0x1f0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_DMA_Init+0xb8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a50      	ldr	r2, [pc, #320]	@ (800598c <HAL_DMA_Init+0x1f4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Init+0xbc>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_DMA_Init+0xbe>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 813c 	beq.w	8005ad4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <HAL_DMA_Init+0x1b8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d04a      	beq.n	800590c <HAL_DMA_Init+0x174>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a36      	ldr	r2, [pc, #216]	@ (8005954 <HAL_DMA_Init+0x1bc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d045      	beq.n	800590c <HAL_DMA_Init+0x174>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a34      	ldr	r2, [pc, #208]	@ (8005958 <HAL_DMA_Init+0x1c0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d040      	beq.n	800590c <HAL_DMA_Init+0x174>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a33      	ldr	r2, [pc, #204]	@ (800595c <HAL_DMA_Init+0x1c4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d03b      	beq.n	800590c <HAL_DMA_Init+0x174>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a31      	ldr	r2, [pc, #196]	@ (8005960 <HAL_DMA_Init+0x1c8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d036      	beq.n	800590c <HAL_DMA_Init+0x174>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a30      	ldr	r2, [pc, #192]	@ (8005964 <HAL_DMA_Init+0x1cc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d031      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <HAL_DMA_Init+0x1d0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02c      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2d      	ldr	r2, [pc, #180]	@ (800596c <HAL_DMA_Init+0x1d4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d027      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005970 <HAL_DMA_Init+0x1d8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d022      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <HAL_DMA_Init+0x1dc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d01d      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	@ (8005978 <HAL_DMA_Init+0x1e0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d018      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a27      	ldr	r2, [pc, #156]	@ (800597c <HAL_DMA_Init+0x1e4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d013      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	@ (8005980 <HAL_DMA_Init+0x1e8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00e      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <HAL_DMA_Init+0x1ec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_DMA_Init+0x174>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	@ (8005988 <HAL_DMA_Init+0x1f0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_DMA_Init+0x174>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	@ (800598c <HAL_DMA_Init+0x1f4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d108      	bne.n	800591e <HAL_DMA_Init+0x186>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e007      	b.n	800592e <HAL_DMA_Init+0x196>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800592e:	e02f      	b.n	8005990 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005930:	f7ff fdaa 	bl	8005488 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b05      	cmp	r3, #5
 800593c:	d928      	bls.n	8005990 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2203      	movs	r2, #3
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e2ad      	b.n	8005eac <HAL_DMA_Init+0x714>
 8005950:	40020010 	.word	0x40020010
 8005954:	40020028 	.word	0x40020028
 8005958:	40020040 	.word	0x40020040
 800595c:	40020058 	.word	0x40020058
 8005960:	40020070 	.word	0x40020070
 8005964:	40020088 	.word	0x40020088
 8005968:	400200a0 	.word	0x400200a0
 800596c:	400200b8 	.word	0x400200b8
 8005970:	40020410 	.word	0x40020410
 8005974:	40020428 	.word	0x40020428
 8005978:	40020440 	.word	0x40020440
 800597c:	40020458 	.word	0x40020458
 8005980:	40020470 	.word	0x40020470
 8005984:	40020488 	.word	0x40020488
 8005988:	400204a0 	.word	0x400204a0
 800598c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1c8      	bne.n	8005930 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4b73      	ldr	r3, [pc, #460]	@ (8005b78 <HAL_DMA_Init+0x3e0>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d107      	bne.n	80059f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	4313      	orrs	r3, r2
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b28      	cmp	r3, #40	@ 0x28
 80059fa:	d903      	bls.n	8005a04 <HAL_DMA_Init+0x26c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a02:	d91f      	bls.n	8005a44 <HAL_DMA_Init+0x2ac>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a0a:	d903      	bls.n	8005a14 <HAL_DMA_Init+0x27c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b42      	cmp	r3, #66	@ 0x42
 8005a12:	d917      	bls.n	8005a44 <HAL_DMA_Init+0x2ac>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b46      	cmp	r3, #70	@ 0x46
 8005a1a:	d903      	bls.n	8005a24 <HAL_DMA_Init+0x28c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b48      	cmp	r3, #72	@ 0x48
 8005a22:	d90f      	bls.n	8005a44 <HAL_DMA_Init+0x2ac>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b4e      	cmp	r3, #78	@ 0x4e
 8005a2a:	d903      	bls.n	8005a34 <HAL_DMA_Init+0x29c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b52      	cmp	r3, #82	@ 0x52
 8005a32:	d907      	bls.n	8005a44 <HAL_DMA_Init+0x2ac>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b73      	cmp	r3, #115	@ 0x73
 8005a3a:	d905      	bls.n	8005a48 <HAL_DMA_Init+0x2b0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b77      	cmp	r3, #119	@ 0x77
 8005a42:	d801      	bhi.n	8005a48 <HAL_DMA_Init+0x2b0>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_DMA_Init+0x2b2>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a54:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d117      	bne.n	8005ab0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f002 fbe0 	bl	8008258 <DMA_CheckFifoParam>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2240      	movs	r2, #64	@ 0x40
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e1fd      	b.n	8005eac <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 fb1b 	bl	80080f4 <DMA_CalcBaseAndBitshift>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	223f      	movs	r2, #63	@ 0x3f
 8005acc:	409a      	lsls	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	609a      	str	r2, [r3, #8]
 8005ad2:	e0fd      	b.n	8005cd0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a28      	ldr	r2, [pc, #160]	@ (8005b7c <HAL_DMA_Init+0x3e4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a27      	ldr	r2, [pc, #156]	@ (8005b80 <HAL_DMA_Init+0x3e8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d045      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a25      	ldr	r2, [pc, #148]	@ (8005b84 <HAL_DMA_Init+0x3ec>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a24      	ldr	r2, [pc, #144]	@ (8005b88 <HAL_DMA_Init+0x3f0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d03b      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a22      	ldr	r2, [pc, #136]	@ (8005b8c <HAL_DMA_Init+0x3f4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d036      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a21      	ldr	r2, [pc, #132]	@ (8005b90 <HAL_DMA_Init+0x3f8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d031      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <HAL_DMA_Init+0x3fc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b98 <HAL_DMA_Init+0x400>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d027      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	@ (8005b9c <HAL_DMA_Init+0x404>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba0 <HAL_DMA_Init+0x408>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d01d      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a19      	ldr	r2, [pc, #100]	@ (8005ba4 <HAL_DMA_Init+0x40c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a18      	ldr	r2, [pc, #96]	@ (8005ba8 <HAL_DMA_Init+0x410>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <HAL_DMA_Init+0x414>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <HAL_DMA_Init+0x418>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <HAL_DMA_Init+0x41c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_Init+0x3dc>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a12      	ldr	r2, [pc, #72]	@ (8005bb8 <HAL_DMA_Init+0x420>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d123      	bne.n	8005bbc <HAL_DMA_Init+0x424>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e022      	b.n	8005bbe <HAL_DMA_Init+0x426>
 8005b78:	fe10803f 	.word	0xfe10803f
 8005b7c:	48022c08 	.word	0x48022c08
 8005b80:	48022c1c 	.word	0x48022c1c
 8005b84:	48022c30 	.word	0x48022c30
 8005b88:	48022c44 	.word	0x48022c44
 8005b8c:	48022c58 	.word	0x48022c58
 8005b90:	48022c6c 	.word	0x48022c6c
 8005b94:	48022c80 	.word	0x48022c80
 8005b98:	48022c94 	.word	0x48022c94
 8005b9c:	58025408 	.word	0x58025408
 8005ba0:	5802541c 	.word	0x5802541c
 8005ba4:	58025430 	.word	0x58025430
 8005ba8:	58025444 	.word	0x58025444
 8005bac:	58025458 	.word	0x58025458
 8005bb0:	5802546c 	.word	0x5802546c
 8005bb4:	58025480 	.word	0x58025480
 8005bb8:	58025494 	.word	0x58025494
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d07d      	beq.n	8005cbe <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dc4 <HAL_DMA_Init+0x62c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d021      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dc8 <HAL_DMA_Init+0x630>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01c      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a7c      	ldr	r2, [pc, #496]	@ (8005dcc <HAL_DMA_Init+0x634>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d017      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd0 <HAL_DMA_Init+0x638>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d012      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a79      	ldr	r2, [pc, #484]	@ (8005dd4 <HAL_DMA_Init+0x63c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00d      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a77      	ldr	r2, [pc, #476]	@ (8005dd8 <HAL_DMA_Init+0x640>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d008      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a76      	ldr	r2, [pc, #472]	@ (8005ddc <HAL_DMA_Init+0x644>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <HAL_DMA_Init+0x478>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a74      	ldr	r2, [pc, #464]	@ (8005de0 <HAL_DMA_Init+0x648>)
 8005c0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8005de4 <HAL_DMA_Init+0x64c>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b40      	cmp	r3, #64	@ 0x40
 8005c36:	d008      	beq.n	8005c4a <HAL_DMA_Init+0x4b2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b80      	cmp	r3, #128	@ 0x80
 8005c3e:	d102      	bne.n	8005c46 <HAL_DMA_Init+0x4ae>
 8005c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c44:	e002      	b.n	8005c4c <HAL_DMA_Init+0x4b4>
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_DMA_Init+0x4b4>
 8005c4a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c52:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c5a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c62:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c6a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c7a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4b55      	ldr	r3, [pc, #340]	@ (8005de8 <HAL_DMA_Init+0x650>)
 8005c92:	4413      	add	r3, r2
 8005c94:	4a55      	ldr	r2, [pc, #340]	@ (8005dec <HAL_DMA_Init+0x654>)
 8005c96:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	009a      	lsls	r2, r3, #2
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f002 fa26 	bl	80080f4 <DMA_CalcBaseAndBitshift>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	e008      	b.n	8005cd0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2240      	movs	r2, #64	@ 0x40
 8005cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0ed      	b.n	8005eac <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a46      	ldr	r2, [pc, #280]	@ (8005df0 <HAL_DMA_Init+0x658>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d072      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a45      	ldr	r2, [pc, #276]	@ (8005df4 <HAL_DMA_Init+0x65c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d06d      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a43      	ldr	r2, [pc, #268]	@ (8005df8 <HAL_DMA_Init+0x660>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d068      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a42      	ldr	r2, [pc, #264]	@ (8005dfc <HAL_DMA_Init+0x664>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d063      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a40      	ldr	r2, [pc, #256]	@ (8005e00 <HAL_DMA_Init+0x668>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d05e      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a3f      	ldr	r2, [pc, #252]	@ (8005e04 <HAL_DMA_Init+0x66c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d059      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3d      	ldr	r2, [pc, #244]	@ (8005e08 <HAL_DMA_Init+0x670>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d054      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e0c <HAL_DMA_Init+0x674>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d04f      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3a      	ldr	r2, [pc, #232]	@ (8005e10 <HAL_DMA_Init+0x678>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d04a      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a39      	ldr	r2, [pc, #228]	@ (8005e14 <HAL_DMA_Init+0x67c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d045      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a37      	ldr	r2, [pc, #220]	@ (8005e18 <HAL_DMA_Init+0x680>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d040      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a36      	ldr	r2, [pc, #216]	@ (8005e1c <HAL_DMA_Init+0x684>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d03b      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a34      	ldr	r2, [pc, #208]	@ (8005e20 <HAL_DMA_Init+0x688>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d036      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a33      	ldr	r2, [pc, #204]	@ (8005e24 <HAL_DMA_Init+0x68c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d031      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a31      	ldr	r2, [pc, #196]	@ (8005e28 <HAL_DMA_Init+0x690>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02c      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a30      	ldr	r2, [pc, #192]	@ (8005e2c <HAL_DMA_Init+0x694>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d027      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a13      	ldr	r2, [pc, #76]	@ (8005dc4 <HAL_DMA_Init+0x62c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d022      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a12      	ldr	r2, [pc, #72]	@ (8005dc8 <HAL_DMA_Init+0x630>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d01d      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a10      	ldr	r2, [pc, #64]	@ (8005dcc <HAL_DMA_Init+0x634>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd0 <HAL_DMA_Init+0x638>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd4 <HAL_DMA_Init+0x63c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd8 <HAL_DMA_Init+0x640>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ddc <HAL_DMA_Init+0x644>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_DMA_Init+0x628>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a09      	ldr	r2, [pc, #36]	@ (8005de0 <HAL_DMA_Init+0x648>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d137      	bne.n	8005e30 <HAL_DMA_Init+0x698>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e036      	b.n	8005e32 <HAL_DMA_Init+0x69a>
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	fffe000f 	.word	0xfffe000f
 8005de8:	a7fdabf8 	.word	0xa7fdabf8
 8005dec:	cccccccd 	.word	0xcccccccd
 8005df0:	40020010 	.word	0x40020010
 8005df4:	40020028 	.word	0x40020028
 8005df8:	40020040 	.word	0x40020040
 8005dfc:	40020058 	.word	0x40020058
 8005e00:	40020070 	.word	0x40020070
 8005e04:	40020088 	.word	0x40020088
 8005e08:	400200a0 	.word	0x400200a0
 8005e0c:	400200b8 	.word	0x400200b8
 8005e10:	40020410 	.word	0x40020410
 8005e14:	40020428 	.word	0x40020428
 8005e18:	40020440 	.word	0x40020440
 8005e1c:	40020458 	.word	0x40020458
 8005e20:	40020470 	.word	0x40020470
 8005e24:	40020488 	.word	0x40020488
 8005e28:	400204a0 	.word	0x400204a0
 8005e2c:	400204b8 	.word	0x400204b8
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d032      	beq.n	8005e9c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f002 fa8a 	bl	8008350 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b80      	cmp	r3, #128	@ 0x80
 8005e42:	d102      	bne.n	8005e4a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e5e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <HAL_DMA_Init+0x6f2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d80c      	bhi.n	8005e8a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f002 fb07 	bl	8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	e008      	b.n	8005e9c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e226      	b.n	800631e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_DMA_Start_IT+0x2a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e21f      	b.n	800631e <HAL_DMA_Start_IT+0x46a>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	f040 820a 	bne.w	8006308 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a68      	ldr	r2, [pc, #416]	@ (80060a8 <HAL_DMA_Start_IT+0x1f4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a66      	ldr	r2, [pc, #408]	@ (80060ac <HAL_DMA_Start_IT+0x1f8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a65      	ldr	r2, [pc, #404]	@ (80060b0 <HAL_DMA_Start_IT+0x1fc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a63      	ldr	r2, [pc, #396]	@ (80060b4 <HAL_DMA_Start_IT+0x200>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a62      	ldr	r2, [pc, #392]	@ (80060b8 <HAL_DMA_Start_IT+0x204>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a60      	ldr	r2, [pc, #384]	@ (80060bc <HAL_DMA_Start_IT+0x208>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5f      	ldr	r2, [pc, #380]	@ (80060c0 <HAL_DMA_Start_IT+0x20c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80060c4 <HAL_DMA_Start_IT+0x210>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5c      	ldr	r2, [pc, #368]	@ (80060c8 <HAL_DMA_Start_IT+0x214>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5a      	ldr	r2, [pc, #360]	@ (80060cc <HAL_DMA_Start_IT+0x218>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a59      	ldr	r2, [pc, #356]	@ (80060d0 <HAL_DMA_Start_IT+0x21c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a57      	ldr	r2, [pc, #348]	@ (80060d4 <HAL_DMA_Start_IT+0x220>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a56      	ldr	r2, [pc, #344]	@ (80060d8 <HAL_DMA_Start_IT+0x224>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a54      	ldr	r2, [pc, #336]	@ (80060dc <HAL_DMA_Start_IT+0x228>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a53      	ldr	r2, [pc, #332]	@ (80060e0 <HAL_DMA_Start_IT+0x22c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a51      	ldr	r2, [pc, #324]	@ (80060e4 <HAL_DMA_Start_IT+0x230>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <HAL_DMA_Start_IT+0x100>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e007      	b.n	8005fc4 <HAL_DMA_Start_IT+0x110>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 feae 	bl	8007d2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a34      	ldr	r2, [pc, #208]	@ (80060a8 <HAL_DMA_Start_IT+0x1f4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d04a      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a33      	ldr	r2, [pc, #204]	@ (80060ac <HAL_DMA_Start_IT+0x1f8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d045      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a31      	ldr	r2, [pc, #196]	@ (80060b0 <HAL_DMA_Start_IT+0x1fc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d040      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a30      	ldr	r2, [pc, #192]	@ (80060b4 <HAL_DMA_Start_IT+0x200>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d03b      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80060b8 <HAL_DMA_Start_IT+0x204>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d036      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2d      	ldr	r2, [pc, #180]	@ (80060bc <HAL_DMA_Start_IT+0x208>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d031      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2b      	ldr	r2, [pc, #172]	@ (80060c0 <HAL_DMA_Start_IT+0x20c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d02c      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <HAL_DMA_Start_IT+0x210>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d027      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a28      	ldr	r2, [pc, #160]	@ (80060c8 <HAL_DMA_Start_IT+0x214>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d022      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a27      	ldr	r2, [pc, #156]	@ (80060cc <HAL_DMA_Start_IT+0x218>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d01d      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a25      	ldr	r2, [pc, #148]	@ (80060d0 <HAL_DMA_Start_IT+0x21c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d018      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a24      	ldr	r2, [pc, #144]	@ (80060d4 <HAL_DMA_Start_IT+0x220>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a22      	ldr	r2, [pc, #136]	@ (80060d8 <HAL_DMA_Start_IT+0x224>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00e      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a21      	ldr	r2, [pc, #132]	@ (80060dc <HAL_DMA_Start_IT+0x228>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d009      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <HAL_DMA_Start_IT+0x22c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d004      	beq.n	8006070 <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1e      	ldr	r2, [pc, #120]	@ (80060e4 <HAL_DMA_Start_IT+0x230>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d101      	bne.n	8006074 <HAL_DMA_Start_IT+0x1c0>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <HAL_DMA_Start_IT+0x1c2>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d036      	beq.n	80060e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 021e 	bic.w	r2, r3, #30
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0216 	orr.w	r2, r2, #22
 800608c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03e      	beq.n	8006114 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0208 	orr.w	r2, r2, #8
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e035      	b.n	8006114 <HAL_DMA_Start_IT+0x260>
 80060a8:	40020010 	.word	0x40020010
 80060ac:	40020028 	.word	0x40020028
 80060b0:	40020040 	.word	0x40020040
 80060b4:	40020058 	.word	0x40020058
 80060b8:	40020070 	.word	0x40020070
 80060bc:	40020088 	.word	0x40020088
 80060c0:	400200a0 	.word	0x400200a0
 80060c4:	400200b8 	.word	0x400200b8
 80060c8:	40020410 	.word	0x40020410
 80060cc:	40020428 	.word	0x40020428
 80060d0:	40020440 	.word	0x40020440
 80060d4:	40020458 	.word	0x40020458
 80060d8:	40020470 	.word	0x40020470
 80060dc:	40020488 	.word	0x40020488
 80060e0:	400204a0 	.word	0x400204a0
 80060e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 020e 	bic.w	r2, r3, #14
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 020a 	orr.w	r2, r2, #10
 80060fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0204 	orr.w	r2, r2, #4
 8006112:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a83      	ldr	r2, [pc, #524]	@ (8006328 <HAL_DMA_Start_IT+0x474>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d072      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a82      	ldr	r2, [pc, #520]	@ (800632c <HAL_DMA_Start_IT+0x478>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d06d      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a80      	ldr	r2, [pc, #512]	@ (8006330 <HAL_DMA_Start_IT+0x47c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d068      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a7f      	ldr	r2, [pc, #508]	@ (8006334 <HAL_DMA_Start_IT+0x480>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d063      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7d      	ldr	r2, [pc, #500]	@ (8006338 <HAL_DMA_Start_IT+0x484>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d05e      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a7c      	ldr	r2, [pc, #496]	@ (800633c <HAL_DMA_Start_IT+0x488>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d059      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a7a      	ldr	r2, [pc, #488]	@ (8006340 <HAL_DMA_Start_IT+0x48c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d054      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a79      	ldr	r2, [pc, #484]	@ (8006344 <HAL_DMA_Start_IT+0x490>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d04f      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a77      	ldr	r2, [pc, #476]	@ (8006348 <HAL_DMA_Start_IT+0x494>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04a      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a76      	ldr	r2, [pc, #472]	@ (800634c <HAL_DMA_Start_IT+0x498>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d045      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a74      	ldr	r2, [pc, #464]	@ (8006350 <HAL_DMA_Start_IT+0x49c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d040      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a73      	ldr	r2, [pc, #460]	@ (8006354 <HAL_DMA_Start_IT+0x4a0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d03b      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a71      	ldr	r2, [pc, #452]	@ (8006358 <HAL_DMA_Start_IT+0x4a4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d036      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a70      	ldr	r2, [pc, #448]	@ (800635c <HAL_DMA_Start_IT+0x4a8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d031      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6e      	ldr	r2, [pc, #440]	@ (8006360 <HAL_DMA_Start_IT+0x4ac>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02c      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6d      	ldr	r2, [pc, #436]	@ (8006364 <HAL_DMA_Start_IT+0x4b0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d027      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6b      	ldr	r2, [pc, #428]	@ (8006368 <HAL_DMA_Start_IT+0x4b4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6a      	ldr	r2, [pc, #424]	@ (800636c <HAL_DMA_Start_IT+0x4b8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a68      	ldr	r2, [pc, #416]	@ (8006370 <HAL_DMA_Start_IT+0x4bc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a67      	ldr	r2, [pc, #412]	@ (8006374 <HAL_DMA_Start_IT+0x4c0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a65      	ldr	r2, [pc, #404]	@ (8006378 <HAL_DMA_Start_IT+0x4c4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a64      	ldr	r2, [pc, #400]	@ (800637c <HAL_DMA_Start_IT+0x4c8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a62      	ldr	r2, [pc, #392]	@ (8006380 <HAL_DMA_Start_IT+0x4cc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a61      	ldr	r2, [pc, #388]	@ (8006384 <HAL_DMA_Start_IT+0x4d0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <HAL_DMA_Start_IT+0x354>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_DMA_Start_IT+0x356>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01a      	beq.n	8006244 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800622a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800623e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006242:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a37      	ldr	r2, [pc, #220]	@ (8006328 <HAL_DMA_Start_IT+0x474>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d04a      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a36      	ldr	r2, [pc, #216]	@ (800632c <HAL_DMA_Start_IT+0x478>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d045      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a34      	ldr	r2, [pc, #208]	@ (8006330 <HAL_DMA_Start_IT+0x47c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d040      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a33      	ldr	r2, [pc, #204]	@ (8006334 <HAL_DMA_Start_IT+0x480>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d03b      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a31      	ldr	r2, [pc, #196]	@ (8006338 <HAL_DMA_Start_IT+0x484>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d036      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a30      	ldr	r2, [pc, #192]	@ (800633c <HAL_DMA_Start_IT+0x488>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d031      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2e      	ldr	r2, [pc, #184]	@ (8006340 <HAL_DMA_Start_IT+0x48c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d02c      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2d      	ldr	r2, [pc, #180]	@ (8006344 <HAL_DMA_Start_IT+0x490>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d027      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a2b      	ldr	r2, [pc, #172]	@ (8006348 <HAL_DMA_Start_IT+0x494>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d022      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2a      	ldr	r2, [pc, #168]	@ (800634c <HAL_DMA_Start_IT+0x498>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d01d      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a28      	ldr	r2, [pc, #160]	@ (8006350 <HAL_DMA_Start_IT+0x49c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d018      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a27      	ldr	r2, [pc, #156]	@ (8006354 <HAL_DMA_Start_IT+0x4a0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a25      	ldr	r2, [pc, #148]	@ (8006358 <HAL_DMA_Start_IT+0x4a4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00e      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a24      	ldr	r2, [pc, #144]	@ (800635c <HAL_DMA_Start_IT+0x4a8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d009      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <HAL_DMA_Start_IT+0x4ac>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a21      	ldr	r2, [pc, #132]	@ (8006364 <HAL_DMA_Start_IT+0x4b0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <HAL_DMA_Start_IT+0x442>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	e012      	b.n	800631c <HAL_DMA_Start_IT+0x468>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e009      	b.n	800631c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40020010 	.word	0x40020010
 800632c:	40020028 	.word	0x40020028
 8006330:	40020040 	.word	0x40020040
 8006334:	40020058 	.word	0x40020058
 8006338:	40020070 	.word	0x40020070
 800633c:	40020088 	.word	0x40020088
 8006340:	400200a0 	.word	0x400200a0
 8006344:	400200b8 	.word	0x400200b8
 8006348:	40020410 	.word	0x40020410
 800634c:	40020428 	.word	0x40020428
 8006350:	40020440 	.word	0x40020440
 8006354:	40020458 	.word	0x40020458
 8006358:	40020470 	.word	0x40020470
 800635c:	40020488 	.word	0x40020488
 8006360:	400204a0 	.word	0x400204a0
 8006364:	400204b8 	.word	0x400204b8
 8006368:	58025408 	.word	0x58025408
 800636c:	5802541c 	.word	0x5802541c
 8006370:	58025430 	.word	0x58025430
 8006374:	58025444 	.word	0x58025444
 8006378:	58025458 	.word	0x58025458
 800637c:	5802546c 	.word	0x5802546c
 8006380:	58025480 	.word	0x58025480
 8006384:	58025494 	.word	0x58025494

08006388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006390:	f7ff f87a 	bl	8005488 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e2dc      	b.n	800695a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d008      	beq.n	80063be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2280      	movs	r2, #128	@ 0x80
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e2cd      	b.n	800695a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a76      	ldr	r2, [pc, #472]	@ (800659c <HAL_DMA_Abort+0x214>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d04a      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a74      	ldr	r2, [pc, #464]	@ (80065a0 <HAL_DMA_Abort+0x218>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d045      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a73      	ldr	r2, [pc, #460]	@ (80065a4 <HAL_DMA_Abort+0x21c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d040      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a71      	ldr	r2, [pc, #452]	@ (80065a8 <HAL_DMA_Abort+0x220>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d03b      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a70      	ldr	r2, [pc, #448]	@ (80065ac <HAL_DMA_Abort+0x224>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d036      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6e      	ldr	r2, [pc, #440]	@ (80065b0 <HAL_DMA_Abort+0x228>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d031      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6d      	ldr	r2, [pc, #436]	@ (80065b4 <HAL_DMA_Abort+0x22c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d02c      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6b      	ldr	r2, [pc, #428]	@ (80065b8 <HAL_DMA_Abort+0x230>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d027      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6a      	ldr	r2, [pc, #424]	@ (80065bc <HAL_DMA_Abort+0x234>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a68      	ldr	r2, [pc, #416]	@ (80065c0 <HAL_DMA_Abort+0x238>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01d      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a67      	ldr	r2, [pc, #412]	@ (80065c4 <HAL_DMA_Abort+0x23c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a65      	ldr	r2, [pc, #404]	@ (80065c8 <HAL_DMA_Abort+0x240>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a64      	ldr	r2, [pc, #400]	@ (80065cc <HAL_DMA_Abort+0x244>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a62      	ldr	r2, [pc, #392]	@ (80065d0 <HAL_DMA_Abort+0x248>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a61      	ldr	r2, [pc, #388]	@ (80065d4 <HAL_DMA_Abort+0x24c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a5f      	ldr	r2, [pc, #380]	@ (80065d8 <HAL_DMA_Abort+0x250>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_DMA_Abort+0xda>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_DMA_Abort+0xdc>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d013      	beq.n	8006490 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 021e 	bic.w	r2, r2, #30
 8006476:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006486:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e00a      	b.n	80064a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 020e 	bic.w	r2, r2, #14
 800649e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3c      	ldr	r2, [pc, #240]	@ (800659c <HAL_DMA_Abort+0x214>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d072      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a3a      	ldr	r2, [pc, #232]	@ (80065a0 <HAL_DMA_Abort+0x218>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d06d      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a39      	ldr	r2, [pc, #228]	@ (80065a4 <HAL_DMA_Abort+0x21c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d068      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a37      	ldr	r2, [pc, #220]	@ (80065a8 <HAL_DMA_Abort+0x220>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d063      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a36      	ldr	r2, [pc, #216]	@ (80065ac <HAL_DMA_Abort+0x224>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d05e      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a34      	ldr	r2, [pc, #208]	@ (80065b0 <HAL_DMA_Abort+0x228>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d059      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a33      	ldr	r2, [pc, #204]	@ (80065b4 <HAL_DMA_Abort+0x22c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d054      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a31      	ldr	r2, [pc, #196]	@ (80065b8 <HAL_DMA_Abort+0x230>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d04f      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a30      	ldr	r2, [pc, #192]	@ (80065bc <HAL_DMA_Abort+0x234>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d04a      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2e      	ldr	r2, [pc, #184]	@ (80065c0 <HAL_DMA_Abort+0x238>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d045      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2d      	ldr	r2, [pc, #180]	@ (80065c4 <HAL_DMA_Abort+0x23c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d040      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2b      	ldr	r2, [pc, #172]	@ (80065c8 <HAL_DMA_Abort+0x240>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d03b      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2a      	ldr	r2, [pc, #168]	@ (80065cc <HAL_DMA_Abort+0x244>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d036      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a28      	ldr	r2, [pc, #160]	@ (80065d0 <HAL_DMA_Abort+0x248>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d031      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a27      	ldr	r2, [pc, #156]	@ (80065d4 <HAL_DMA_Abort+0x24c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d02c      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a25      	ldr	r2, [pc, #148]	@ (80065d8 <HAL_DMA_Abort+0x250>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d027      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a24      	ldr	r2, [pc, #144]	@ (80065dc <HAL_DMA_Abort+0x254>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a22      	ldr	r2, [pc, #136]	@ (80065e0 <HAL_DMA_Abort+0x258>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a21      	ldr	r2, [pc, #132]	@ (80065e4 <HAL_DMA_Abort+0x25c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1f      	ldr	r2, [pc, #124]	@ (80065e8 <HAL_DMA_Abort+0x260>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <HAL_DMA_Abort+0x264>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <HAL_DMA_Abort+0x268>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <HAL_DMA_Abort+0x26c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <HAL_DMA_Abort+0x270>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d132      	bne.n	80065fc <HAL_DMA_Abort+0x274>
 8006596:	2301      	movs	r3, #1
 8006598:	e031      	b.n	80065fe <HAL_DMA_Abort+0x276>
 800659a:	bf00      	nop
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
 80065dc:	58025408 	.word	0x58025408
 80065e0:	5802541c 	.word	0x5802541c
 80065e4:	58025430 	.word	0x58025430
 80065e8:	58025444 	.word	0x58025444
 80065ec:	58025458 	.word	0x58025458
 80065f0:	5802546c 	.word	0x5802546c
 80065f4:	58025480 	.word	0x58025480
 80065f8:	58025494 	.word	0x58025494
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006610:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6d      	ldr	r2, [pc, #436]	@ (80067cc <HAL_DMA_Abort+0x444>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6b      	ldr	r2, [pc, #428]	@ (80067d0 <HAL_DMA_Abort+0x448>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6a      	ldr	r2, [pc, #424]	@ (80067d4 <HAL_DMA_Abort+0x44c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a68      	ldr	r2, [pc, #416]	@ (80067d8 <HAL_DMA_Abort+0x450>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a67      	ldr	r2, [pc, #412]	@ (80067dc <HAL_DMA_Abort+0x454>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a65      	ldr	r2, [pc, #404]	@ (80067e0 <HAL_DMA_Abort+0x458>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a64      	ldr	r2, [pc, #400]	@ (80067e4 <HAL_DMA_Abort+0x45c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a62      	ldr	r2, [pc, #392]	@ (80067e8 <HAL_DMA_Abort+0x460>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a61      	ldr	r2, [pc, #388]	@ (80067ec <HAL_DMA_Abort+0x464>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5f      	ldr	r2, [pc, #380]	@ (80067f0 <HAL_DMA_Abort+0x468>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5e      	ldr	r2, [pc, #376]	@ (80067f4 <HAL_DMA_Abort+0x46c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5c      	ldr	r2, [pc, #368]	@ (80067f8 <HAL_DMA_Abort+0x470>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5b      	ldr	r2, [pc, #364]	@ (80067fc <HAL_DMA_Abort+0x474>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a59      	ldr	r2, [pc, #356]	@ (8006800 <HAL_DMA_Abort+0x478>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a58      	ldr	r2, [pc, #352]	@ (8006804 <HAL_DMA_Abort+0x47c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a56      	ldr	r2, [pc, #344]	@ (8006808 <HAL_DMA_Abort+0x480>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <HAL_DMA_Abort+0x33c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e007      	b.n	80066d4 <HAL_DMA_Abort+0x34c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066d4:	e013      	b.n	80066fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066d6:	f7fe fed7 	bl	8005488 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d90c      	bls.n	80066fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2203      	movs	r2, #3
 80066ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e12d      	b.n	800695a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2f      	ldr	r2, [pc, #188]	@ (80067cc <HAL_DMA_Abort+0x444>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04a      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2d      	ldr	r2, [pc, #180]	@ (80067d0 <HAL_DMA_Abort+0x448>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d045      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2c      	ldr	r2, [pc, #176]	@ (80067d4 <HAL_DMA_Abort+0x44c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d040      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2a      	ldr	r2, [pc, #168]	@ (80067d8 <HAL_DMA_Abort+0x450>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d03b      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <HAL_DMA_Abort+0x454>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d036      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a27      	ldr	r2, [pc, #156]	@ (80067e0 <HAL_DMA_Abort+0x458>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d031      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a26      	ldr	r2, [pc, #152]	@ (80067e4 <HAL_DMA_Abort+0x45c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d02c      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a24      	ldr	r2, [pc, #144]	@ (80067e8 <HAL_DMA_Abort+0x460>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d027      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a23      	ldr	r2, [pc, #140]	@ (80067ec <HAL_DMA_Abort+0x464>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_DMA_Abort+0x468>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a20      	ldr	r2, [pc, #128]	@ (80067f4 <HAL_DMA_Abort+0x46c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <HAL_DMA_Abort+0x470>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_DMA_Abort+0x474>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_DMA_Abort+0x478>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1a      	ldr	r2, [pc, #104]	@ (8006804 <HAL_DMA_Abort+0x47c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <HAL_DMA_Abort+0x480>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_DMA_Abort+0x426>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <HAL_DMA_Abort+0x428>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02b      	beq.n	800680c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	223f      	movs	r2, #63	@ 0x3f
 80067c4:	409a      	lsls	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	e02a      	b.n	8006822 <HAL_DMA_Abort+0x49a>
 80067cc:	40020010 	.word	0x40020010
 80067d0:	40020028 	.word	0x40020028
 80067d4:	40020040 	.word	0x40020040
 80067d8:	40020058 	.word	0x40020058
 80067dc:	40020070 	.word	0x40020070
 80067e0:	40020088 	.word	0x40020088
 80067e4:	400200a0 	.word	0x400200a0
 80067e8:	400200b8 	.word	0x400200b8
 80067ec:	40020410 	.word	0x40020410
 80067f0:	40020428 	.word	0x40020428
 80067f4:	40020440 	.word	0x40020440
 80067f8:	40020458 	.word	0x40020458
 80067fc:	40020470 	.word	0x40020470
 8006800:	40020488 	.word	0x40020488
 8006804:	400204a0 	.word	0x400204a0
 8006808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006810:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	2201      	movs	r2, #1
 800681c:	409a      	lsls	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a4f      	ldr	r2, [pc, #316]	@ (8006964 <HAL_DMA_Abort+0x5dc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d072      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a4d      	ldr	r2, [pc, #308]	@ (8006968 <HAL_DMA_Abort+0x5e0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d06d      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a4c      	ldr	r2, [pc, #304]	@ (800696c <HAL_DMA_Abort+0x5e4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d068      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a4a      	ldr	r2, [pc, #296]	@ (8006970 <HAL_DMA_Abort+0x5e8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d063      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a49      	ldr	r2, [pc, #292]	@ (8006974 <HAL_DMA_Abort+0x5ec>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d05e      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a47      	ldr	r2, [pc, #284]	@ (8006978 <HAL_DMA_Abort+0x5f0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d059      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a46      	ldr	r2, [pc, #280]	@ (800697c <HAL_DMA_Abort+0x5f4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d054      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a44      	ldr	r2, [pc, #272]	@ (8006980 <HAL_DMA_Abort+0x5f8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d04f      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a43      	ldr	r2, [pc, #268]	@ (8006984 <HAL_DMA_Abort+0x5fc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d04a      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a41      	ldr	r2, [pc, #260]	@ (8006988 <HAL_DMA_Abort+0x600>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d045      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a40      	ldr	r2, [pc, #256]	@ (800698c <HAL_DMA_Abort+0x604>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d040      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a3e      	ldr	r2, [pc, #248]	@ (8006990 <HAL_DMA_Abort+0x608>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d03b      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a3d      	ldr	r2, [pc, #244]	@ (8006994 <HAL_DMA_Abort+0x60c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d036      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3b      	ldr	r2, [pc, #236]	@ (8006998 <HAL_DMA_Abort+0x610>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d031      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3a      	ldr	r2, [pc, #232]	@ (800699c <HAL_DMA_Abort+0x614>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d02c      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a38      	ldr	r2, [pc, #224]	@ (80069a0 <HAL_DMA_Abort+0x618>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d027      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a37      	ldr	r2, [pc, #220]	@ (80069a4 <HAL_DMA_Abort+0x61c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a35      	ldr	r2, [pc, #212]	@ (80069a8 <HAL_DMA_Abort+0x620>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01d      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a34      	ldr	r2, [pc, #208]	@ (80069ac <HAL_DMA_Abort+0x624>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a32      	ldr	r2, [pc, #200]	@ (80069b0 <HAL_DMA_Abort+0x628>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a31      	ldr	r2, [pc, #196]	@ (80069b4 <HAL_DMA_Abort+0x62c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2f      	ldr	r2, [pc, #188]	@ (80069b8 <HAL_DMA_Abort+0x630>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2e      	ldr	r2, [pc, #184]	@ (80069bc <HAL_DMA_Abort+0x634>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <HAL_DMA_Abort+0x638>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d101      	bne.n	8006916 <HAL_DMA_Abort+0x58e>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <HAL_DMA_Abort+0x590>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006924:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800693c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006946:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40020010 	.word	0x40020010
 8006968:	40020028 	.word	0x40020028
 800696c:	40020040 	.word	0x40020040
 8006970:	40020058 	.word	0x40020058
 8006974:	40020070 	.word	0x40020070
 8006978:	40020088 	.word	0x40020088
 800697c:	400200a0 	.word	0x400200a0
 8006980:	400200b8 	.word	0x400200b8
 8006984:	40020410 	.word	0x40020410
 8006988:	40020428 	.word	0x40020428
 800698c:	40020440 	.word	0x40020440
 8006990:	40020458 	.word	0x40020458
 8006994:	40020470 	.word	0x40020470
 8006998:	40020488 	.word	0x40020488
 800699c:	400204a0 	.word	0x400204a0
 80069a0:	400204b8 	.word	0x400204b8
 80069a4:	58025408 	.word	0x58025408
 80069a8:	5802541c 	.word	0x5802541c
 80069ac:	58025430 	.word	0x58025430
 80069b0:	58025444 	.word	0x58025444
 80069b4:	58025458 	.word	0x58025458
 80069b8:	5802546c 	.word	0x5802546c
 80069bc:	58025480 	.word	0x58025480
 80069c0:	58025494 	.word	0x58025494

080069c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e237      	b.n	8006e46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d004      	beq.n	80069ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2280      	movs	r2, #128	@ 0x80
 80069e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e22c      	b.n	8006e46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5c      	ldr	r2, [pc, #368]	@ (8006b64 <HAL_DMA_Abort_IT+0x1a0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d04a      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006b68 <HAL_DMA_Abort_IT+0x1a4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d045      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a59      	ldr	r2, [pc, #356]	@ (8006b6c <HAL_DMA_Abort_IT+0x1a8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d040      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a58      	ldr	r2, [pc, #352]	@ (8006b70 <HAL_DMA_Abort_IT+0x1ac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d03b      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a56      	ldr	r2, [pc, #344]	@ (8006b74 <HAL_DMA_Abort_IT+0x1b0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d036      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a55      	ldr	r2, [pc, #340]	@ (8006b78 <HAL_DMA_Abort_IT+0x1b4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d031      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a53      	ldr	r2, [pc, #332]	@ (8006b7c <HAL_DMA_Abort_IT+0x1b8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d02c      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a52      	ldr	r2, [pc, #328]	@ (8006b80 <HAL_DMA_Abort_IT+0x1bc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d027      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a50      	ldr	r2, [pc, #320]	@ (8006b84 <HAL_DMA_Abort_IT+0x1c0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d022      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4f      	ldr	r2, [pc, #316]	@ (8006b88 <HAL_DMA_Abort_IT+0x1c4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d01d      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4d      	ldr	r2, [pc, #308]	@ (8006b8c <HAL_DMA_Abort_IT+0x1c8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d018      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b90 <HAL_DMA_Abort_IT+0x1cc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a4a      	ldr	r2, [pc, #296]	@ (8006b94 <HAL_DMA_Abort_IT+0x1d0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a49      	ldr	r2, [pc, #292]	@ (8006b98 <HAL_DMA_Abort_IT+0x1d4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a47      	ldr	r2, [pc, #284]	@ (8006b9c <HAL_DMA_Abort_IT+0x1d8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a46      	ldr	r2, [pc, #280]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_DMA_Abort_IT+0xcc>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_DMA_Abort_IT+0xce>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8086 	beq.w	8006ba4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8006b64 <HAL_DMA_Abort_IT+0x1a0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04a      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a2e      	ldr	r2, [pc, #184]	@ (8006b68 <HAL_DMA_Abort_IT+0x1a4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d045      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8006b6c <HAL_DMA_Abort_IT+0x1a8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d040      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8006b70 <HAL_DMA_Abort_IT+0x1ac>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d03b      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a29      	ldr	r2, [pc, #164]	@ (8006b74 <HAL_DMA_Abort_IT+0x1b0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d036      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a28      	ldr	r2, [pc, #160]	@ (8006b78 <HAL_DMA_Abort_IT+0x1b4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d031      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a26      	ldr	r2, [pc, #152]	@ (8006b7c <HAL_DMA_Abort_IT+0x1b8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d02c      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a25      	ldr	r2, [pc, #148]	@ (8006b80 <HAL_DMA_Abort_IT+0x1bc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d027      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a23      	ldr	r2, [pc, #140]	@ (8006b84 <HAL_DMA_Abort_IT+0x1c0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d022      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a22      	ldr	r2, [pc, #136]	@ (8006b88 <HAL_DMA_Abort_IT+0x1c4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d01d      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a20      	ldr	r2, [pc, #128]	@ (8006b8c <HAL_DMA_Abort_IT+0x1c8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1f      	ldr	r2, [pc, #124]	@ (8006b90 <HAL_DMA_Abort_IT+0x1cc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d013      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b94 <HAL_DMA_Abort_IT+0x1d0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1c      	ldr	r2, [pc, #112]	@ (8006b98 <HAL_DMA_Abort_IT+0x1d4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	@ (8006b9c <HAL_DMA_Abort_IT+0x1d8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_DMA_Abort_IT+0x17c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a19      	ldr	r2, [pc, #100]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d108      	bne.n	8006b52 <HAL_DMA_Abort_IT+0x18e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e178      	b.n	8006e44 <HAL_DMA_Abort_IT+0x480>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e16f      	b.n	8006e44 <HAL_DMA_Abort_IT+0x480>
 8006b64:	40020010 	.word	0x40020010
 8006b68:	40020028 	.word	0x40020028
 8006b6c:	40020040 	.word	0x40020040
 8006b70:	40020058 	.word	0x40020058
 8006b74:	40020070 	.word	0x40020070
 8006b78:	40020088 	.word	0x40020088
 8006b7c:	400200a0 	.word	0x400200a0
 8006b80:	400200b8 	.word	0x400200b8
 8006b84:	40020410 	.word	0x40020410
 8006b88:	40020428 	.word	0x40020428
 8006b8c:	40020440 	.word	0x40020440
 8006b90:	40020458 	.word	0x40020458
 8006b94:	40020470 	.word	0x40020470
 8006b98:	40020488 	.word	0x40020488
 8006b9c:	400204a0 	.word	0x400204a0
 8006ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 020e 	bic.w	r2, r2, #14
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8006d6c <HAL_DMA_Abort_IT+0x3a8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d04a      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8006d70 <HAL_DMA_Abort_IT+0x3ac>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d045      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a69      	ldr	r2, [pc, #420]	@ (8006d74 <HAL_DMA_Abort_IT+0x3b0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d040      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a68      	ldr	r2, [pc, #416]	@ (8006d78 <HAL_DMA_Abort_IT+0x3b4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d03b      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a66      	ldr	r2, [pc, #408]	@ (8006d7c <HAL_DMA_Abort_IT+0x3b8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d036      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a65      	ldr	r2, [pc, #404]	@ (8006d80 <HAL_DMA_Abort_IT+0x3bc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d031      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a63      	ldr	r2, [pc, #396]	@ (8006d84 <HAL_DMA_Abort_IT+0x3c0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d02c      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a62      	ldr	r2, [pc, #392]	@ (8006d88 <HAL_DMA_Abort_IT+0x3c4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d027      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a60      	ldr	r2, [pc, #384]	@ (8006d8c <HAL_DMA_Abort_IT+0x3c8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d022      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a5f      	ldr	r2, [pc, #380]	@ (8006d90 <HAL_DMA_Abort_IT+0x3cc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d01d      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8006d94 <HAL_DMA_Abort_IT+0x3d0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d018      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a5c      	ldr	r2, [pc, #368]	@ (8006d98 <HAL_DMA_Abort_IT+0x3d4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5a      	ldr	r2, [pc, #360]	@ (8006d9c <HAL_DMA_Abort_IT+0x3d8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00e      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a59      	ldr	r2, [pc, #356]	@ (8006da0 <HAL_DMA_Abort_IT+0x3dc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d009      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a57      	ldr	r2, [pc, #348]	@ (8006da4 <HAL_DMA_Abort_IT+0x3e0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d004      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x290>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a56      	ldr	r2, [pc, #344]	@ (8006da8 <HAL_DMA_Abort_IT+0x3e4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d108      	bne.n	8006c66 <HAL_DMA_Abort_IT+0x2a2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e007      	b.n	8006c76 <HAL_DMA_Abort_IT+0x2b2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d6c <HAL_DMA_Abort_IT+0x3a8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d072      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a3a      	ldr	r2, [pc, #232]	@ (8006d70 <HAL_DMA_Abort_IT+0x3ac>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d06d      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a39      	ldr	r2, [pc, #228]	@ (8006d74 <HAL_DMA_Abort_IT+0x3b0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d068      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a37      	ldr	r2, [pc, #220]	@ (8006d78 <HAL_DMA_Abort_IT+0x3b4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d063      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a36      	ldr	r2, [pc, #216]	@ (8006d7c <HAL_DMA_Abort_IT+0x3b8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d05e      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a34      	ldr	r2, [pc, #208]	@ (8006d80 <HAL_DMA_Abort_IT+0x3bc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d059      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a33      	ldr	r2, [pc, #204]	@ (8006d84 <HAL_DMA_Abort_IT+0x3c0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d054      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a31      	ldr	r2, [pc, #196]	@ (8006d88 <HAL_DMA_Abort_IT+0x3c4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d04f      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a30      	ldr	r2, [pc, #192]	@ (8006d8c <HAL_DMA_Abort_IT+0x3c8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d04a      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <HAL_DMA_Abort_IT+0x3cc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d045      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_DMA_Abort_IT+0x3d0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d040      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d98 <HAL_DMA_Abort_IT+0x3d4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d03b      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d9c <HAL_DMA_Abort_IT+0x3d8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d036      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	@ (8006da0 <HAL_DMA_Abort_IT+0x3dc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d031      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a27      	ldr	r2, [pc, #156]	@ (8006da4 <HAL_DMA_Abort_IT+0x3e0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d02c      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a25      	ldr	r2, [pc, #148]	@ (8006da8 <HAL_DMA_Abort_IT+0x3e4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d027      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a24      	ldr	r2, [pc, #144]	@ (8006dac <HAL_DMA_Abort_IT+0x3e8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a22      	ldr	r2, [pc, #136]	@ (8006db0 <HAL_DMA_Abort_IT+0x3ec>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01d      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <HAL_DMA_Abort_IT+0x3f0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <HAL_DMA_Abort_IT+0x3f4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	@ (8006dbc <HAL_DMA_Abort_IT+0x3f8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_DMA_Abort_IT+0x3fc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc4 <HAL_DMA_Abort_IT+0x400>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x3a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <HAL_DMA_Abort_IT+0x404>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d132      	bne.n	8006dcc <HAL_DMA_Abort_IT+0x408>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e031      	b.n	8006dce <HAL_DMA_Abort_IT+0x40a>
 8006d6a:	bf00      	nop
 8006d6c:	40020010 	.word	0x40020010
 8006d70:	40020028 	.word	0x40020028
 8006d74:	40020040 	.word	0x40020040
 8006d78:	40020058 	.word	0x40020058
 8006d7c:	40020070 	.word	0x40020070
 8006d80:	40020088 	.word	0x40020088
 8006d84:	400200a0 	.word	0x400200a0
 8006d88:	400200b8 	.word	0x400200b8
 8006d8c:	40020410 	.word	0x40020410
 8006d90:	40020428 	.word	0x40020428
 8006d94:	40020440 	.word	0x40020440
 8006d98:	40020458 	.word	0x40020458
 8006d9c:	40020470 	.word	0x40020470
 8006da0:	40020488 	.word	0x40020488
 8006da4:	400204a0 	.word	0x400204a0
 8006da8:	400204b8 	.word	0x400204b8
 8006dac:	58025408 	.word	0x58025408
 8006db0:	5802541c 	.word	0x5802541c
 8006db4:	58025430 	.word	0x58025430
 8006db8:	58025444 	.word	0x58025444
 8006dbc:	58025458 	.word	0x58025458
 8006dc0:	5802546c 	.word	0x5802546c
 8006dc4:	58025480 	.word	0x58025480
 8006dc8:	58025494 	.word	0x58025494
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d028      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006de0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2201      	movs	r2, #1
 8006df2:	409a      	lsls	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	@ 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e5c:	4b67      	ldr	r3, [pc, #412]	@ (8006ffc <HAL_DMA_IRQHandler+0x1ac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a67      	ldr	r2, [pc, #412]	@ (8007000 <HAL_DMA_IRQHandler+0x1b0>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	0a9b      	lsrs	r3, r3, #10
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a5f      	ldr	r2, [pc, #380]	@ (8007004 <HAL_DMA_IRQHandler+0x1b4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d04a      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a5d      	ldr	r2, [pc, #372]	@ (8007008 <HAL_DMA_IRQHandler+0x1b8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d045      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800700c <HAL_DMA_IRQHandler+0x1bc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d040      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8007010 <HAL_DMA_IRQHandler+0x1c0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d03b      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a59      	ldr	r2, [pc, #356]	@ (8007014 <HAL_DMA_IRQHandler+0x1c4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d036      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a57      	ldr	r2, [pc, #348]	@ (8007018 <HAL_DMA_IRQHandler+0x1c8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d031      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a56      	ldr	r2, [pc, #344]	@ (800701c <HAL_DMA_IRQHandler+0x1cc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d02c      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a54      	ldr	r2, [pc, #336]	@ (8007020 <HAL_DMA_IRQHandler+0x1d0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d027      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a53      	ldr	r2, [pc, #332]	@ (8007024 <HAL_DMA_IRQHandler+0x1d4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d022      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a51      	ldr	r2, [pc, #324]	@ (8007028 <HAL_DMA_IRQHandler+0x1d8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01d      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a50      	ldr	r2, [pc, #320]	@ (800702c <HAL_DMA_IRQHandler+0x1dc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d018      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8007030 <HAL_DMA_IRQHandler+0x1e0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d013      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a4d      	ldr	r2, [pc, #308]	@ (8007034 <HAL_DMA_IRQHandler+0x1e4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a4b      	ldr	r2, [pc, #300]	@ (8007038 <HAL_DMA_IRQHandler+0x1e8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d009      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4a      	ldr	r2, [pc, #296]	@ (800703c <HAL_DMA_IRQHandler+0x1ec>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d004      	beq.n	8006f22 <HAL_DMA_IRQHandler+0xd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a48      	ldr	r2, [pc, #288]	@ (8007040 <HAL_DMA_IRQHandler+0x1f0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d101      	bne.n	8006f26 <HAL_DMA_IRQHandler+0xd6>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <HAL_DMA_IRQHandler+0xd8>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 842b 	beq.w	8007784 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2208      	movs	r2, #8
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80a2 	beq.w	8007088 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2e      	ldr	r2, [pc, #184]	@ (8007004 <HAL_DMA_IRQHandler+0x1b4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d04a      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2d      	ldr	r2, [pc, #180]	@ (8007008 <HAL_DMA_IRQHandler+0x1b8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d045      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800700c <HAL_DMA_IRQHandler+0x1bc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d040      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2a      	ldr	r2, [pc, #168]	@ (8007010 <HAL_DMA_IRQHandler+0x1c0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d03b      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a28      	ldr	r2, [pc, #160]	@ (8007014 <HAL_DMA_IRQHandler+0x1c4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d036      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a27      	ldr	r2, [pc, #156]	@ (8007018 <HAL_DMA_IRQHandler+0x1c8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d031      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a25      	ldr	r2, [pc, #148]	@ (800701c <HAL_DMA_IRQHandler+0x1cc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d02c      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a24      	ldr	r2, [pc, #144]	@ (8007020 <HAL_DMA_IRQHandler+0x1d0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d027      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a22      	ldr	r2, [pc, #136]	@ (8007024 <HAL_DMA_IRQHandler+0x1d4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d022      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <HAL_DMA_IRQHandler+0x1d8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d01d      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1f      	ldr	r2, [pc, #124]	@ (800702c <HAL_DMA_IRQHandler+0x1dc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_DMA_IRQHandler+0x1e0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007034 <HAL_DMA_IRQHandler+0x1e4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_DMA_IRQHandler+0x1e8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a19      	ldr	r2, [pc, #100]	@ (800703c <HAL_DMA_IRQHandler+0x1ec>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x194>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a18      	ldr	r2, [pc, #96]	@ (8007040 <HAL_DMA_IRQHandler+0x1f0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d12f      	bne.n	8007044 <HAL_DMA_IRQHandler+0x1f4>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf14      	ite	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	2300      	moveq	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	e02e      	b.n	8007058 <HAL_DMA_IRQHandler+0x208>
 8006ffa:	bf00      	nop
 8006ffc:	2400009c 	.word	0x2400009c
 8007000:	1b4e81b5 	.word	0x1b4e81b5
 8007004:	40020010 	.word	0x40020010
 8007008:	40020028 	.word	0x40020028
 800700c:	40020040 	.word	0x40020040
 8007010:	40020058 	.word	0x40020058
 8007014:	40020070 	.word	0x40020070
 8007018:	40020088 	.word	0x40020088
 800701c:	400200a0 	.word	0x400200a0
 8007020:	400200b8 	.word	0x400200b8
 8007024:	40020410 	.word	0x40020410
 8007028:	40020428 	.word	0x40020428
 800702c:	40020440 	.word	0x40020440
 8007030:	40020458 	.word	0x40020458
 8007034:	40020470 	.word	0x40020470
 8007038:	40020488 	.word	0x40020488
 800703c:	400204a0 	.word	0x400204a0
 8007040:	400204b8 	.word	0x400204b8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf14      	ite	ne
 8007052:	2301      	movne	r3, #1
 8007054:	2300      	moveq	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d015      	beq.n	8007088 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0204 	bic.w	r2, r2, #4
 800706a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	2208      	movs	r2, #8
 8007076:	409a      	lsls	r2, r3
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007080:	f043 0201 	orr.w	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d06e      	beq.n	800717c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a69      	ldr	r2, [pc, #420]	@ (8007248 <HAL_DMA_IRQHandler+0x3f8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d04a      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a67      	ldr	r2, [pc, #412]	@ (800724c <HAL_DMA_IRQHandler+0x3fc>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d045      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a66      	ldr	r2, [pc, #408]	@ (8007250 <HAL_DMA_IRQHandler+0x400>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d040      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a64      	ldr	r2, [pc, #400]	@ (8007254 <HAL_DMA_IRQHandler+0x404>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d03b      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a63      	ldr	r2, [pc, #396]	@ (8007258 <HAL_DMA_IRQHandler+0x408>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d036      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a61      	ldr	r2, [pc, #388]	@ (800725c <HAL_DMA_IRQHandler+0x40c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d031      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a60      	ldr	r2, [pc, #384]	@ (8007260 <HAL_DMA_IRQHandler+0x410>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d02c      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5e      	ldr	r2, [pc, #376]	@ (8007264 <HAL_DMA_IRQHandler+0x414>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d027      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a5d      	ldr	r2, [pc, #372]	@ (8007268 <HAL_DMA_IRQHandler+0x418>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d022      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5b      	ldr	r2, [pc, #364]	@ (800726c <HAL_DMA_IRQHandler+0x41c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01d      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5a      	ldr	r2, [pc, #360]	@ (8007270 <HAL_DMA_IRQHandler+0x420>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d018      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a58      	ldr	r2, [pc, #352]	@ (8007274 <HAL_DMA_IRQHandler+0x424>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a57      	ldr	r2, [pc, #348]	@ (8007278 <HAL_DMA_IRQHandler+0x428>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a55      	ldr	r2, [pc, #340]	@ (800727c <HAL_DMA_IRQHandler+0x42c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a54      	ldr	r2, [pc, #336]	@ (8007280 <HAL_DMA_IRQHandler+0x430>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_DMA_IRQHandler+0x2ee>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a52      	ldr	r2, [pc, #328]	@ (8007284 <HAL_DMA_IRQHandler+0x434>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d10a      	bne.n	8007154 <HAL_DMA_IRQHandler+0x304>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	e003      	b.n	800715c <HAL_DMA_IRQHandler+0x30c>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	2201      	movs	r2, #1
 800716a:	409a      	lsls	r2, r3
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007174:	f043 0202 	orr.w	r2, r3, #2
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2204      	movs	r2, #4
 8007186:	409a      	lsls	r2, r3
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 808f 	beq.w	80072b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2c      	ldr	r2, [pc, #176]	@ (8007248 <HAL_DMA_IRQHandler+0x3f8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04a      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a2a      	ldr	r2, [pc, #168]	@ (800724c <HAL_DMA_IRQHandler+0x3fc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d045      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a29      	ldr	r2, [pc, #164]	@ (8007250 <HAL_DMA_IRQHandler+0x400>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d040      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a27      	ldr	r2, [pc, #156]	@ (8007254 <HAL_DMA_IRQHandler+0x404>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d03b      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a26      	ldr	r2, [pc, #152]	@ (8007258 <HAL_DMA_IRQHandler+0x408>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d036      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a24      	ldr	r2, [pc, #144]	@ (800725c <HAL_DMA_IRQHandler+0x40c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d031      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a23      	ldr	r2, [pc, #140]	@ (8007260 <HAL_DMA_IRQHandler+0x410>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d02c      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a21      	ldr	r2, [pc, #132]	@ (8007264 <HAL_DMA_IRQHandler+0x414>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d027      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a20      	ldr	r2, [pc, #128]	@ (8007268 <HAL_DMA_IRQHandler+0x418>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d022      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <HAL_DMA_IRQHandler+0x41c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01d      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007270 <HAL_DMA_IRQHandler+0x420>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_DMA_IRQHandler+0x424>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1a      	ldr	r2, [pc, #104]	@ (8007278 <HAL_DMA_IRQHandler+0x428>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a18      	ldr	r2, [pc, #96]	@ (800727c <HAL_DMA_IRQHandler+0x42c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a17      	ldr	r2, [pc, #92]	@ (8007280 <HAL_DMA_IRQHandler+0x430>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_DMA_IRQHandler+0x3e2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a15      	ldr	r2, [pc, #84]	@ (8007284 <HAL_DMA_IRQHandler+0x434>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d12a      	bne.n	8007288 <HAL_DMA_IRQHandler+0x438>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e023      	b.n	8007290 <HAL_DMA_IRQHandler+0x440>
 8007248:	40020010 	.word	0x40020010
 800724c:	40020028 	.word	0x40020028
 8007250:	40020040 	.word	0x40020040
 8007254:	40020058 	.word	0x40020058
 8007258:	40020070 	.word	0x40020070
 800725c:	40020088 	.word	0x40020088
 8007260:	400200a0 	.word	0x400200a0
 8007264:	400200b8 	.word	0x400200b8
 8007268:	40020410 	.word	0x40020410
 800726c:	40020428 	.word	0x40020428
 8007270:	40020440 	.word	0x40020440
 8007274:	40020458 	.word	0x40020458
 8007278:	40020470 	.word	0x40020470
 800727c:	40020488 	.word	0x40020488
 8007280:	400204a0 	.word	0x400204a0
 8007284:	400204b8 	.word	0x400204b8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00d      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	2204      	movs	r2, #4
 800729e:	409a      	lsls	r2, r3
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a8:	f043 0204 	orr.w	r2, r3, #4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2210      	movs	r2, #16
 80072ba:	409a      	lsls	r2, r3
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80a6 	beq.w	8007412 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a85      	ldr	r2, [pc, #532]	@ (80074e0 <HAL_DMA_IRQHandler+0x690>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d04a      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a83      	ldr	r2, [pc, #524]	@ (80074e4 <HAL_DMA_IRQHandler+0x694>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d045      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a82      	ldr	r2, [pc, #520]	@ (80074e8 <HAL_DMA_IRQHandler+0x698>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d040      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a80      	ldr	r2, [pc, #512]	@ (80074ec <HAL_DMA_IRQHandler+0x69c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d03b      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a7f      	ldr	r2, [pc, #508]	@ (80074f0 <HAL_DMA_IRQHandler+0x6a0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d036      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a7d      	ldr	r2, [pc, #500]	@ (80074f4 <HAL_DMA_IRQHandler+0x6a4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d031      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a7c      	ldr	r2, [pc, #496]	@ (80074f8 <HAL_DMA_IRQHandler+0x6a8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d02c      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a7a      	ldr	r2, [pc, #488]	@ (80074fc <HAL_DMA_IRQHandler+0x6ac>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d027      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a79      	ldr	r2, [pc, #484]	@ (8007500 <HAL_DMA_IRQHandler+0x6b0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d022      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a77      	ldr	r2, [pc, #476]	@ (8007504 <HAL_DMA_IRQHandler+0x6b4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01d      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a76      	ldr	r2, [pc, #472]	@ (8007508 <HAL_DMA_IRQHandler+0x6b8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d018      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a74      	ldr	r2, [pc, #464]	@ (800750c <HAL_DMA_IRQHandler+0x6bc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a73      	ldr	r2, [pc, #460]	@ (8007510 <HAL_DMA_IRQHandler+0x6c0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a71      	ldr	r2, [pc, #452]	@ (8007514 <HAL_DMA_IRQHandler+0x6c4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a70      	ldr	r2, [pc, #448]	@ (8007518 <HAL_DMA_IRQHandler+0x6c8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_DMA_IRQHandler+0x516>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a6e      	ldr	r2, [pc, #440]	@ (800751c <HAL_DMA_IRQHandler+0x6cc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d10a      	bne.n	800737c <HAL_DMA_IRQHandler+0x52c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e009      	b.n	8007390 <HAL_DMA_IRQHandler+0x540>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d03e      	beq.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2210      	movs	r2, #16
 800739e:	409a      	lsls	r2, r3
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d018      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d024      	beq.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	e01f      	b.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01b      	beq.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	e016      	b.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d107      	bne.n	8007402 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0208 	bic.w	r2, r2, #8
 8007400:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2220      	movs	r2, #32
 800741c:	409a      	lsls	r2, r3
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8110 	beq.w	8007648 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2c      	ldr	r2, [pc, #176]	@ (80074e0 <HAL_DMA_IRQHandler+0x690>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d04a      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2b      	ldr	r2, [pc, #172]	@ (80074e4 <HAL_DMA_IRQHandler+0x694>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d045      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a29      	ldr	r2, [pc, #164]	@ (80074e8 <HAL_DMA_IRQHandler+0x698>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d040      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a28      	ldr	r2, [pc, #160]	@ (80074ec <HAL_DMA_IRQHandler+0x69c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d03b      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a26      	ldr	r2, [pc, #152]	@ (80074f0 <HAL_DMA_IRQHandler+0x6a0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d036      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a25      	ldr	r2, [pc, #148]	@ (80074f4 <HAL_DMA_IRQHandler+0x6a4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d031      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a23      	ldr	r2, [pc, #140]	@ (80074f8 <HAL_DMA_IRQHandler+0x6a8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02c      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a22      	ldr	r2, [pc, #136]	@ (80074fc <HAL_DMA_IRQHandler+0x6ac>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d027      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a20      	ldr	r2, [pc, #128]	@ (8007500 <HAL_DMA_IRQHandler+0x6b0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d022      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <HAL_DMA_IRQHandler+0x6b4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d01d      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <HAL_DMA_IRQHandler+0x6b8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d018      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1c      	ldr	r2, [pc, #112]	@ (800750c <HAL_DMA_IRQHandler+0x6bc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007510 <HAL_DMA_IRQHandler+0x6c0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00e      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a19      	ldr	r2, [pc, #100]	@ (8007514 <HAL_DMA_IRQHandler+0x6c4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a17      	ldr	r2, [pc, #92]	@ (8007518 <HAL_DMA_IRQHandler+0x6c8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x678>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a16      	ldr	r2, [pc, #88]	@ (800751c <HAL_DMA_IRQHandler+0x6cc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d12b      	bne.n	8007520 <HAL_DMA_IRQHandler+0x6d0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf14      	ite	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	2300      	moveq	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	e02a      	b.n	8007534 <HAL_DMA_IRQHandler+0x6e4>
 80074de:	bf00      	nop
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8087 	beq.w	8007648 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	2220      	movs	r2, #32
 8007544:	409a      	lsls	r2, r3
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b04      	cmp	r3, #4
 8007554:	d139      	bne.n	80075ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0216 	bic.w	r2, r2, #22
 8007564:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695a      	ldr	r2, [r3, #20]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007574:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_DMA_IRQHandler+0x736>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0208 	bic.w	r2, r2, #8
 8007594:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	223f      	movs	r2, #63	@ 0x3f
 80075a0:	409a      	lsls	r2, r3
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 8382 	beq.w	8007cc4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
          }
          return;
 80075c8:	e37c      	b.n	8007cc4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d018      	beq.n	800760a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02c      	beq.n	8007648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
 80075f6:	e027      	b.n	8007648 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d023      	beq.n	8007648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
 8007608:	e01e      	b.n	8007648 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10f      	bne.n	8007638 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0210 	bic.w	r2, r2, #16
 8007626:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 833e 	beq.w	8007cce <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8088 	beq.w	8007770 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a89      	ldr	r2, [pc, #548]	@ (8007894 <HAL_DMA_IRQHandler+0xa44>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d04a      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a88      	ldr	r2, [pc, #544]	@ (8007898 <HAL_DMA_IRQHandler+0xa48>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d045      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a86      	ldr	r2, [pc, #536]	@ (800789c <HAL_DMA_IRQHandler+0xa4c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d040      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a85      	ldr	r2, [pc, #532]	@ (80078a0 <HAL_DMA_IRQHandler+0xa50>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d03b      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a83      	ldr	r2, [pc, #524]	@ (80078a4 <HAL_DMA_IRQHandler+0xa54>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d036      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a82      	ldr	r2, [pc, #520]	@ (80078a8 <HAL_DMA_IRQHandler+0xa58>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d031      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a80      	ldr	r2, [pc, #512]	@ (80078ac <HAL_DMA_IRQHandler+0xa5c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02c      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a7f      	ldr	r2, [pc, #508]	@ (80078b0 <HAL_DMA_IRQHandler+0xa60>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d027      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a7d      	ldr	r2, [pc, #500]	@ (80078b4 <HAL_DMA_IRQHandler+0xa64>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d022      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a7c      	ldr	r2, [pc, #496]	@ (80078b8 <HAL_DMA_IRQHandler+0xa68>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d01d      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a7a      	ldr	r2, [pc, #488]	@ (80078bc <HAL_DMA_IRQHandler+0xa6c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d018      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a79      	ldr	r2, [pc, #484]	@ (80078c0 <HAL_DMA_IRQHandler+0xa70>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a77      	ldr	r2, [pc, #476]	@ (80078c4 <HAL_DMA_IRQHandler+0xa74>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00e      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a76      	ldr	r2, [pc, #472]	@ (80078c8 <HAL_DMA_IRQHandler+0xa78>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d009      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a74      	ldr	r2, [pc, #464]	@ (80078cc <HAL_DMA_IRQHandler+0xa7c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_DMA_IRQHandler+0x8b8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a73      	ldr	r2, [pc, #460]	@ (80078d0 <HAL_DMA_IRQHandler+0xa80>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <HAL_DMA_IRQHandler+0x8ca>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e007      	b.n	800772a <HAL_DMA_IRQHandler+0x8da>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0201 	bic.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007732:	429a      	cmp	r2, r3
 8007734:	d307      	bcc.n	8007746 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f2      	bne.n	800772a <HAL_DMA_IRQHandler+0x8da>
 8007744:	e000      	b.n	8007748 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007746:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2203      	movs	r2, #3
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800775e:	e003      	b.n	8007768 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 82aa 	beq.w	8007cce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
 8007782:	e2a4      	b.n	8007cce <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a52      	ldr	r2, [pc, #328]	@ (80078d4 <HAL_DMA_IRQHandler+0xa84>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d04a      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a51      	ldr	r2, [pc, #324]	@ (80078d8 <HAL_DMA_IRQHandler+0xa88>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d045      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a4f      	ldr	r2, [pc, #316]	@ (80078dc <HAL_DMA_IRQHandler+0xa8c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d040      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a4e      	ldr	r2, [pc, #312]	@ (80078e0 <HAL_DMA_IRQHandler+0xa90>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d03b      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a4c      	ldr	r2, [pc, #304]	@ (80078e4 <HAL_DMA_IRQHandler+0xa94>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d036      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4b      	ldr	r2, [pc, #300]	@ (80078e8 <HAL_DMA_IRQHandler+0xa98>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d031      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a49      	ldr	r2, [pc, #292]	@ (80078ec <HAL_DMA_IRQHandler+0xa9c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d02c      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a48      	ldr	r2, [pc, #288]	@ (80078f0 <HAL_DMA_IRQHandler+0xaa0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d027      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a46      	ldr	r2, [pc, #280]	@ (80078f4 <HAL_DMA_IRQHandler+0xaa4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d022      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a45      	ldr	r2, [pc, #276]	@ (80078f8 <HAL_DMA_IRQHandler+0xaa8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d01d      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a43      	ldr	r2, [pc, #268]	@ (80078fc <HAL_DMA_IRQHandler+0xaac>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d018      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a42      	ldr	r2, [pc, #264]	@ (8007900 <HAL_DMA_IRQHandler+0xab0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a40      	ldr	r2, [pc, #256]	@ (8007904 <HAL_DMA_IRQHandler+0xab4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00e      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a3f      	ldr	r2, [pc, #252]	@ (8007908 <HAL_DMA_IRQHandler+0xab8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d009      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a3d      	ldr	r2, [pc, #244]	@ (800790c <HAL_DMA_IRQHandler+0xabc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d004      	beq.n	8007824 <HAL_DMA_IRQHandler+0x9d4>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3c      	ldr	r2, [pc, #240]	@ (8007910 <HAL_DMA_IRQHandler+0xac0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d101      	bne.n	8007828 <HAL_DMA_IRQHandler+0x9d8>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <HAL_DMA_IRQHandler+0x9da>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 824f 	beq.w	8007cce <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2204      	movs	r2, #4
 8007842:	409a      	lsls	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80dd 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xbb8>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80d7 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2204      	movs	r2, #4
 8007864:	409a      	lsls	r2, r3
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d059      	beq.n	8007928 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d14a      	bne.n	8007914 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8220 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007890:	e21a      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe78>
 8007892:	bf00      	nop
 8007894:	40020010 	.word	0x40020010
 8007898:	40020028 	.word	0x40020028
 800789c:	40020040 	.word	0x40020040
 80078a0:	40020058 	.word	0x40020058
 80078a4:	40020070 	.word	0x40020070
 80078a8:	40020088 	.word	0x40020088
 80078ac:	400200a0 	.word	0x400200a0
 80078b0:	400200b8 	.word	0x400200b8
 80078b4:	40020410 	.word	0x40020410
 80078b8:	40020428 	.word	0x40020428
 80078bc:	40020440 	.word	0x40020440
 80078c0:	40020458 	.word	0x40020458
 80078c4:	40020470 	.word	0x40020470
 80078c8:	40020488 	.word	0x40020488
 80078cc:	400204a0 	.word	0x400204a0
 80078d0:	400204b8 	.word	0x400204b8
 80078d4:	48022c08 	.word	0x48022c08
 80078d8:	48022c1c 	.word	0x48022c1c
 80078dc:	48022c30 	.word	0x48022c30
 80078e0:	48022c44 	.word	0x48022c44
 80078e4:	48022c58 	.word	0x48022c58
 80078e8:	48022c6c 	.word	0x48022c6c
 80078ec:	48022c80 	.word	0x48022c80
 80078f0:	48022c94 	.word	0x48022c94
 80078f4:	58025408 	.word	0x58025408
 80078f8:	5802541c 	.word	0x5802541c
 80078fc:	58025430 	.word	0x58025430
 8007900:	58025444 	.word	0x58025444
 8007904:	58025458 	.word	0x58025458
 8007908:	5802546c 	.word	0x5802546c
 800790c:	58025480 	.word	0x58025480
 8007910:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 81d5 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007926:	e1cf      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d160      	bne.n	80079f4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7f      	ldr	r2, [pc, #508]	@ (8007b34 <HAL_DMA_IRQHandler+0xce4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d04a      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a7d      	ldr	r2, [pc, #500]	@ (8007b38 <HAL_DMA_IRQHandler+0xce8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d045      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7c      	ldr	r2, [pc, #496]	@ (8007b3c <HAL_DMA_IRQHandler+0xcec>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d040      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a7a      	ldr	r2, [pc, #488]	@ (8007b40 <HAL_DMA_IRQHandler+0xcf0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d03b      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a79      	ldr	r2, [pc, #484]	@ (8007b44 <HAL_DMA_IRQHandler+0xcf4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d036      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a77      	ldr	r2, [pc, #476]	@ (8007b48 <HAL_DMA_IRQHandler+0xcf8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d031      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a76      	ldr	r2, [pc, #472]	@ (8007b4c <HAL_DMA_IRQHandler+0xcfc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d02c      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a74      	ldr	r2, [pc, #464]	@ (8007b50 <HAL_DMA_IRQHandler+0xd00>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d027      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a73      	ldr	r2, [pc, #460]	@ (8007b54 <HAL_DMA_IRQHandler+0xd04>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d022      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a71      	ldr	r2, [pc, #452]	@ (8007b58 <HAL_DMA_IRQHandler+0xd08>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d01d      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a70      	ldr	r2, [pc, #448]	@ (8007b5c <HAL_DMA_IRQHandler+0xd0c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d018      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007b60 <HAL_DMA_IRQHandler+0xd10>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007b64 <HAL_DMA_IRQHandler+0xd14>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007b68 <HAL_DMA_IRQHandler+0xd18>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a6a      	ldr	r2, [pc, #424]	@ (8007b6c <HAL_DMA_IRQHandler+0xd1c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xb82>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a68      	ldr	r2, [pc, #416]	@ (8007b70 <HAL_DMA_IRQHandler+0xd20>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d108      	bne.n	80079e4 <HAL_DMA_IRQHandler+0xb94>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0208 	bic.w	r2, r2, #8
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e007      	b.n	80079f4 <HAL_DMA_IRQHandler+0xba4>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0204 	bic.w	r2, r2, #4
 80079f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8165 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a06:	e15f      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2202      	movs	r2, #2
 8007a12:	409a      	lsls	r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80c5 	beq.w	8007ba8 <HAL_DMA_IRQHandler+0xd58>
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80bf 	beq.w	8007ba8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2202      	movs	r2, #2
 8007a34:	409a      	lsls	r2, r3
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 813a 	beq.w	8007ccc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a60:	e134      	b.n	8007ccc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8130 	beq.w	8007ccc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a74:	e12a      	b.n	8007ccc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8089 	bne.w	8007b94 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2b      	ldr	r2, [pc, #172]	@ (8007b34 <HAL_DMA_IRQHandler+0xce4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d04a      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a29      	ldr	r2, [pc, #164]	@ (8007b38 <HAL_DMA_IRQHandler+0xce8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d045      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a28      	ldr	r2, [pc, #160]	@ (8007b3c <HAL_DMA_IRQHandler+0xcec>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d040      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a26      	ldr	r2, [pc, #152]	@ (8007b40 <HAL_DMA_IRQHandler+0xcf0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d03b      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a25      	ldr	r2, [pc, #148]	@ (8007b44 <HAL_DMA_IRQHandler+0xcf4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d036      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a23      	ldr	r2, [pc, #140]	@ (8007b48 <HAL_DMA_IRQHandler+0xcf8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d031      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a22      	ldr	r2, [pc, #136]	@ (8007b4c <HAL_DMA_IRQHandler+0xcfc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d02c      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a20      	ldr	r2, [pc, #128]	@ (8007b50 <HAL_DMA_IRQHandler+0xd00>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d027      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b54 <HAL_DMA_IRQHandler+0xd04>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d022      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <HAL_DMA_IRQHandler+0xd08>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01d      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	@ (8007b5c <HAL_DMA_IRQHandler+0xd0c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d018      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b60 <HAL_DMA_IRQHandler+0xd10>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a19      	ldr	r2, [pc, #100]	@ (8007b64 <HAL_DMA_IRQHandler+0xd14>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00e      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <HAL_DMA_IRQHandler+0xd18>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d009      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a16      	ldr	r2, [pc, #88]	@ (8007b6c <HAL_DMA_IRQHandler+0xd1c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xcd2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a14      	ldr	r2, [pc, #80]	@ (8007b70 <HAL_DMA_IRQHandler+0xd20>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d128      	bne.n	8007b74 <HAL_DMA_IRQHandler+0xd24>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0214 	bic.w	r2, r2, #20
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	e027      	b.n	8007b84 <HAL_DMA_IRQHandler+0xd34>
 8007b34:	40020010 	.word	0x40020010
 8007b38:	40020028 	.word	0x40020028
 8007b3c:	40020040 	.word	0x40020040
 8007b40:	40020058 	.word	0x40020058
 8007b44:	40020070 	.word	0x40020070
 8007b48:	40020088 	.word	0x40020088
 8007b4c:	400200a0 	.word	0x400200a0
 8007b50:	400200b8 	.word	0x400200b8
 8007b54:	40020410 	.word	0x40020410
 8007b58:	40020428 	.word	0x40020428
 8007b5c:	40020440 	.word	0x40020440
 8007b60:	40020458 	.word	0x40020458
 8007b64:	40020470 	.word	0x40020470
 8007b68:	40020488 	.word	0x40020488
 8007b6c:	400204a0 	.word	0x400204a0
 8007b70:	400204b8 	.word	0x400204b8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 020a 	bic.w	r2, r2, #10
 8007b82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8097 	beq.w	8007ccc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba6:	e091      	b.n	8007ccc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	409a      	lsls	r2, r3
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8088 	beq.w	8007cce <HAL_DMA_IRQHandler+0xe7e>
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8082 	beq.w	8007cce <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a41      	ldr	r2, [pc, #260]	@ (8007cd4 <HAL_DMA_IRQHandler+0xe84>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d04a      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3f      	ldr	r2, [pc, #252]	@ (8007cd8 <HAL_DMA_IRQHandler+0xe88>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d045      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3e      	ldr	r2, [pc, #248]	@ (8007cdc <HAL_DMA_IRQHandler+0xe8c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d040      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3c      	ldr	r2, [pc, #240]	@ (8007ce0 <HAL_DMA_IRQHandler+0xe90>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d03b      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8007ce4 <HAL_DMA_IRQHandler+0xe94>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d036      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a39      	ldr	r2, [pc, #228]	@ (8007ce8 <HAL_DMA_IRQHandler+0xe98>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d031      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a38      	ldr	r2, [pc, #224]	@ (8007cec <HAL_DMA_IRQHandler+0xe9c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d02c      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a36      	ldr	r2, [pc, #216]	@ (8007cf0 <HAL_DMA_IRQHandler+0xea0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d027      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a35      	ldr	r2, [pc, #212]	@ (8007cf4 <HAL_DMA_IRQHandler+0xea4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d022      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a33      	ldr	r2, [pc, #204]	@ (8007cf8 <HAL_DMA_IRQHandler+0xea8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01d      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a32      	ldr	r2, [pc, #200]	@ (8007cfc <HAL_DMA_IRQHandler+0xeac>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d018      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a30      	ldr	r2, [pc, #192]	@ (8007d00 <HAL_DMA_IRQHandler+0xeb0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d013      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2f      	ldr	r2, [pc, #188]	@ (8007d04 <HAL_DMA_IRQHandler+0xeb4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00e      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a2d      	ldr	r2, [pc, #180]	@ (8007d08 <HAL_DMA_IRQHandler+0xeb8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d009      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8007d0c <HAL_DMA_IRQHandler+0xebc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <HAL_DMA_IRQHandler+0xe1a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a2a      	ldr	r2, [pc, #168]	@ (8007d10 <HAL_DMA_IRQHandler+0xec0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d108      	bne.n	8007c7c <HAL_DMA_IRQHandler+0xe2c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 021c 	bic.w	r2, r2, #28
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e007      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe3c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 020e 	bic.w	r2, r2, #14
 8007c8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
 8007cc2:	e004      	b.n	8007cce <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ccc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007cce:	3728      	adds	r7, #40	@ 0x28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40020010 	.word	0x40020010
 8007cd8:	40020028 	.word	0x40020028
 8007cdc:	40020040 	.word	0x40020040
 8007ce0:	40020058 	.word	0x40020058
 8007ce4:	40020070 	.word	0x40020070
 8007ce8:	40020088 	.word	0x40020088
 8007cec:	400200a0 	.word	0x400200a0
 8007cf0:	400200b8 	.word	0x400200b8
 8007cf4:	40020410 	.word	0x40020410
 8007cf8:	40020428 	.word	0x40020428
 8007cfc:	40020440 	.word	0x40020440
 8007d00:	40020458 	.word	0x40020458
 8007d04:	40020470 	.word	0x40020470
 8007d08:	40020488 	.word	0x40020488
 8007d0c:	400204a0 	.word	0x400204a0
 8007d10:	400204b8 	.word	0x400204b8

08007d14 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a7f      	ldr	r2, [pc, #508]	@ (8007f48 <DMA_SetConfig+0x21c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d072      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a7d      	ldr	r2, [pc, #500]	@ (8007f4c <DMA_SetConfig+0x220>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d06d      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8007f50 <DMA_SetConfig+0x224>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d068      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a7a      	ldr	r2, [pc, #488]	@ (8007f54 <DMA_SetConfig+0x228>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d063      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a79      	ldr	r2, [pc, #484]	@ (8007f58 <DMA_SetConfig+0x22c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d05e      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a77      	ldr	r2, [pc, #476]	@ (8007f5c <DMA_SetConfig+0x230>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d059      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a76      	ldr	r2, [pc, #472]	@ (8007f60 <DMA_SetConfig+0x234>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d054      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a74      	ldr	r2, [pc, #464]	@ (8007f64 <DMA_SetConfig+0x238>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d04f      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a73      	ldr	r2, [pc, #460]	@ (8007f68 <DMA_SetConfig+0x23c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d04a      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a71      	ldr	r2, [pc, #452]	@ (8007f6c <DMA_SetConfig+0x240>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d045      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a70      	ldr	r2, [pc, #448]	@ (8007f70 <DMA_SetConfig+0x244>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d040      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a6e      	ldr	r2, [pc, #440]	@ (8007f74 <DMA_SetConfig+0x248>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d03b      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8007f78 <DMA_SetConfig+0x24c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d036      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8007f7c <DMA_SetConfig+0x250>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d031      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8007f80 <DMA_SetConfig+0x254>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d02c      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a68      	ldr	r2, [pc, #416]	@ (8007f84 <DMA_SetConfig+0x258>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d027      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a67      	ldr	r2, [pc, #412]	@ (8007f88 <DMA_SetConfig+0x25c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d022      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a65      	ldr	r2, [pc, #404]	@ (8007f8c <DMA_SetConfig+0x260>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01d      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a64      	ldr	r2, [pc, #400]	@ (8007f90 <DMA_SetConfig+0x264>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a62      	ldr	r2, [pc, #392]	@ (8007f94 <DMA_SetConfig+0x268>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a61      	ldr	r2, [pc, #388]	@ (8007f98 <DMA_SetConfig+0x26c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8007f9c <DMA_SetConfig+0x270>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa0 <DMA_SetConfig+0x274>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <DMA_SetConfig+0x10a>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a5c      	ldr	r2, [pc, #368]	@ (8007fa4 <DMA_SetConfig+0x278>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <DMA_SetConfig+0x10e>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <DMA_SetConfig+0x110>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00d      	beq.n	8007e5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a39      	ldr	r2, [pc, #228]	@ (8007f48 <DMA_SetConfig+0x21c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d04a      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a38      	ldr	r2, [pc, #224]	@ (8007f4c <DMA_SetConfig+0x220>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d045      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a36      	ldr	r2, [pc, #216]	@ (8007f50 <DMA_SetConfig+0x224>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d040      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a35      	ldr	r2, [pc, #212]	@ (8007f54 <DMA_SetConfig+0x228>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d03b      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a33      	ldr	r2, [pc, #204]	@ (8007f58 <DMA_SetConfig+0x22c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d036      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a32      	ldr	r2, [pc, #200]	@ (8007f5c <DMA_SetConfig+0x230>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d031      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a30      	ldr	r2, [pc, #192]	@ (8007f60 <DMA_SetConfig+0x234>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d02c      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8007f64 <DMA_SetConfig+0x238>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d027      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007f68 <DMA_SetConfig+0x23c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d022      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a2c      	ldr	r2, [pc, #176]	@ (8007f6c <DMA_SetConfig+0x240>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d01d      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f70 <DMA_SetConfig+0x244>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d018      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a29      	ldr	r2, [pc, #164]	@ (8007f74 <DMA_SetConfig+0x248>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d013      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a27      	ldr	r2, [pc, #156]	@ (8007f78 <DMA_SetConfig+0x24c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00e      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a26      	ldr	r2, [pc, #152]	@ (8007f7c <DMA_SetConfig+0x250>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d009      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a24      	ldr	r2, [pc, #144]	@ (8007f80 <DMA_SetConfig+0x254>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <DMA_SetConfig+0x1d0>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <DMA_SetConfig+0x258>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d101      	bne.n	8007f00 <DMA_SetConfig+0x1d4>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <DMA_SetConfig+0x1d6>
 8007f00:	2300      	movs	r3, #0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d059      	beq.n	8007fba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	223f      	movs	r2, #63	@ 0x3f
 8007f10:	409a      	lsls	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b40      	cmp	r3, #64	@ 0x40
 8007f34:	d138      	bne.n	8007fa8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f46:	e0ae      	b.n	80080a6 <DMA_SetConfig+0x37a>
 8007f48:	40020010 	.word	0x40020010
 8007f4c:	40020028 	.word	0x40020028
 8007f50:	40020040 	.word	0x40020040
 8007f54:	40020058 	.word	0x40020058
 8007f58:	40020070 	.word	0x40020070
 8007f5c:	40020088 	.word	0x40020088
 8007f60:	400200a0 	.word	0x400200a0
 8007f64:	400200b8 	.word	0x400200b8
 8007f68:	40020410 	.word	0x40020410
 8007f6c:	40020428 	.word	0x40020428
 8007f70:	40020440 	.word	0x40020440
 8007f74:	40020458 	.word	0x40020458
 8007f78:	40020470 	.word	0x40020470
 8007f7c:	40020488 	.word	0x40020488
 8007f80:	400204a0 	.word	0x400204a0
 8007f84:	400204b8 	.word	0x400204b8
 8007f88:	58025408 	.word	0x58025408
 8007f8c:	5802541c 	.word	0x5802541c
 8007f90:	58025430 	.word	0x58025430
 8007f94:	58025444 	.word	0x58025444
 8007f98:	58025458 	.word	0x58025458
 8007f9c:	5802546c 	.word	0x5802546c
 8007fa0:	58025480 	.word	0x58025480
 8007fa4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	60da      	str	r2, [r3, #12]
}
 8007fb8:	e075      	b.n	80080a6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a3d      	ldr	r2, [pc, #244]	@ (80080b4 <DMA_SetConfig+0x388>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d04a      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80080b8 <DMA_SetConfig+0x38c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d045      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80080bc <DMA_SetConfig+0x390>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d040      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a38      	ldr	r2, [pc, #224]	@ (80080c0 <DMA_SetConfig+0x394>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d03b      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a37      	ldr	r2, [pc, #220]	@ (80080c4 <DMA_SetConfig+0x398>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d036      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a35      	ldr	r2, [pc, #212]	@ (80080c8 <DMA_SetConfig+0x39c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d031      	beq.n	800805a <DMA_SetConfig+0x32e>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a34      	ldr	r2, [pc, #208]	@ (80080cc <DMA_SetConfig+0x3a0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d02c      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a32      	ldr	r2, [pc, #200]	@ (80080d0 <DMA_SetConfig+0x3a4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d027      	beq.n	800805a <DMA_SetConfig+0x32e>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a31      	ldr	r2, [pc, #196]	@ (80080d4 <DMA_SetConfig+0x3a8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d022      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2f      	ldr	r2, [pc, #188]	@ (80080d8 <DMA_SetConfig+0x3ac>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01d      	beq.n	800805a <DMA_SetConfig+0x32e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2e      	ldr	r2, [pc, #184]	@ (80080dc <DMA_SetConfig+0x3b0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d018      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a2c      	ldr	r2, [pc, #176]	@ (80080e0 <DMA_SetConfig+0x3b4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d013      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a2b      	ldr	r2, [pc, #172]	@ (80080e4 <DMA_SetConfig+0x3b8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <DMA_SetConfig+0x32e>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a29      	ldr	r2, [pc, #164]	@ (80080e8 <DMA_SetConfig+0x3bc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a28      	ldr	r2, [pc, #160]	@ (80080ec <DMA_SetConfig+0x3c0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <DMA_SetConfig+0x32e>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a26      	ldr	r2, [pc, #152]	@ (80080f0 <DMA_SetConfig+0x3c4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d101      	bne.n	800805e <DMA_SetConfig+0x332>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <DMA_SetConfig+0x334>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d020      	beq.n	80080a6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b40      	cmp	r3, #64	@ 0x40
 8008082:	d108      	bne.n	8008096 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	60da      	str	r2, [r3, #12]
}
 8008094:	e007      	b.n	80080a6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	60da      	str	r2, [r3, #12]
}
 80080a6:	bf00      	nop
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	48022c08 	.word	0x48022c08
 80080b8:	48022c1c 	.word	0x48022c1c
 80080bc:	48022c30 	.word	0x48022c30
 80080c0:	48022c44 	.word	0x48022c44
 80080c4:	48022c58 	.word	0x48022c58
 80080c8:	48022c6c 	.word	0x48022c6c
 80080cc:	48022c80 	.word	0x48022c80
 80080d0:	48022c94 	.word	0x48022c94
 80080d4:	58025408 	.word	0x58025408
 80080d8:	5802541c 	.word	0x5802541c
 80080dc:	58025430 	.word	0x58025430
 80080e0:	58025444 	.word	0x58025444
 80080e4:	58025458 	.word	0x58025458
 80080e8:	5802546c 	.word	0x5802546c
 80080ec:	58025480 	.word	0x58025480
 80080f0:	58025494 	.word	0x58025494

080080f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a42      	ldr	r2, [pc, #264]	@ (800820c <DMA_CalcBaseAndBitshift+0x118>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d04a      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a41      	ldr	r2, [pc, #260]	@ (8008210 <DMA_CalcBaseAndBitshift+0x11c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d045      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a3f      	ldr	r2, [pc, #252]	@ (8008214 <DMA_CalcBaseAndBitshift+0x120>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d040      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a3e      	ldr	r2, [pc, #248]	@ (8008218 <DMA_CalcBaseAndBitshift+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d03b      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a3c      	ldr	r2, [pc, #240]	@ (800821c <DMA_CalcBaseAndBitshift+0x128>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d036      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a3b      	ldr	r2, [pc, #236]	@ (8008220 <DMA_CalcBaseAndBitshift+0x12c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d031      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a39      	ldr	r2, [pc, #228]	@ (8008224 <DMA_CalcBaseAndBitshift+0x130>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d02c      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a38      	ldr	r2, [pc, #224]	@ (8008228 <DMA_CalcBaseAndBitshift+0x134>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d027      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a36      	ldr	r2, [pc, #216]	@ (800822c <DMA_CalcBaseAndBitshift+0x138>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d022      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a35      	ldr	r2, [pc, #212]	@ (8008230 <DMA_CalcBaseAndBitshift+0x13c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d01d      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a33      	ldr	r2, [pc, #204]	@ (8008234 <DMA_CalcBaseAndBitshift+0x140>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d018      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a32      	ldr	r2, [pc, #200]	@ (8008238 <DMA_CalcBaseAndBitshift+0x144>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a30      	ldr	r2, [pc, #192]	@ (800823c <DMA_CalcBaseAndBitshift+0x148>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00e      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2f      	ldr	r2, [pc, #188]	@ (8008240 <DMA_CalcBaseAndBitshift+0x14c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2d      	ldr	r2, [pc, #180]	@ (8008244 <DMA_CalcBaseAndBitshift+0x150>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2c      	ldr	r2, [pc, #176]	@ (8008248 <DMA_CalcBaseAndBitshift+0x154>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d101      	bne.n	80081a0 <DMA_CalcBaseAndBitshift+0xac>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <DMA_CalcBaseAndBitshift+0xae>
 80081a0:	2300      	movs	r3, #0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d024      	beq.n	80081f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	3b10      	subs	r3, #16
 80081ae:	4a27      	ldr	r2, [pc, #156]	@ (800824c <DMA_CalcBaseAndBitshift+0x158>)
 80081b0:	fba2 2303 	umull	r2, r3, r2, r3
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	4a24      	ldr	r2, [pc, #144]	@ (8008250 <DMA_CalcBaseAndBitshift+0x15c>)
 80081c0:	5cd3      	ldrb	r3, [r2, r3]
 80081c2:	461a      	mov	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d908      	bls.n	80081e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008254 <DMA_CalcBaseAndBitshift+0x160>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80081de:	e00d      	b.n	80081fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008254 <DMA_CalcBaseAndBitshift+0x160>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ee:	e005      	b.n	80081fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	40020010 	.word	0x40020010
 8008210:	40020028 	.word	0x40020028
 8008214:	40020040 	.word	0x40020040
 8008218:	40020058 	.word	0x40020058
 800821c:	40020070 	.word	0x40020070
 8008220:	40020088 	.word	0x40020088
 8008224:	400200a0 	.word	0x400200a0
 8008228:	400200b8 	.word	0x400200b8
 800822c:	40020410 	.word	0x40020410
 8008230:	40020428 	.word	0x40020428
 8008234:	40020440 	.word	0x40020440
 8008238:	40020458 	.word	0x40020458
 800823c:	40020470 	.word	0x40020470
 8008240:	40020488 	.word	0x40020488
 8008244:	400204a0 	.word	0x400204a0
 8008248:	400204b8 	.word	0x400204b8
 800824c:	aaaaaaab 	.word	0xaaaaaaab
 8008250:	080189e4 	.word	0x080189e4
 8008254:	fffffc00 	.word	0xfffffc00

08008258 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d120      	bne.n	80082ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008270:	2b03      	cmp	r3, #3
 8008272:	d858      	bhi.n	8008326 <DMA_CheckFifoParam+0xce>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <DMA_CheckFifoParam+0x24>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829f 	.word	0x0800829f
 8008284:	0800828d 	.word	0x0800828d
 8008288:	08008327 	.word	0x08008327
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d048      	beq.n	800832a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800829c:	e045      	b.n	800832a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082a6:	d142      	bne.n	800832e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082ac:	e03f      	b.n	800832e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b6:	d123      	bne.n	8008300 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d838      	bhi.n	8008332 <DMA_CheckFifoParam+0xda>
 80082c0:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <DMA_CheckFifoParam+0x70>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082df 	.word	0x080082df
 80082d0:	080082d9 	.word	0x080082d9
 80082d4:	080082f1 	.word	0x080082f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
        break;
 80082dc:	e030      	b.n	8008340 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d025      	beq.n	8008336 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082ee:	e022      	b.n	8008336 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082f8:	d11f      	bne.n	800833a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082fe:	e01c      	b.n	800833a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008304:	2b02      	cmp	r3, #2
 8008306:	d902      	bls.n	800830e <DMA_CheckFifoParam+0xb6>
 8008308:	2b03      	cmp	r3, #3
 800830a:	d003      	beq.n	8008314 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800830c:	e018      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
        break;
 8008312:	e015      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00e      	beq.n	800833e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e00b      	b.n	800833e <DMA_CheckFifoParam+0xe6>
        break;
 8008326:	bf00      	nop
 8008328:	e00a      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800832a:	bf00      	nop
 800832c:	e008      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800832e:	bf00      	nop
 8008330:	e006      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 8008332:	bf00      	nop
 8008334:	e004      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 8008336:	bf00      	nop
 8008338:	e002      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800833a:	bf00      	nop
 800833c:	e000      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
    break;
 800833e:	bf00      	nop
    }
  }

  return status;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a38      	ldr	r2, [pc, #224]	@ (8008444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d022      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a36      	ldr	r2, [pc, #216]	@ (8008448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01d      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a35      	ldr	r2, [pc, #212]	@ (800844c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d018      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a33      	ldr	r2, [pc, #204]	@ (8008450 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a32      	ldr	r2, [pc, #200]	@ (8008454 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00e      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a30      	ldr	r2, [pc, #192]	@ (8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d009      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a2f      	ldr	r2, [pc, #188]	@ (800845c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d004      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01a      	beq.n	80083ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	3b08      	subs	r3, #8
 80083c0:	4a28      	ldr	r2, [pc, #160]	@ (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	091b      	lsrs	r3, r3, #4
 80083c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4b26      	ldr	r3, [pc, #152]	@ (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a24      	ldr	r2, [pc, #144]	@ (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2201      	movs	r2, #1
 80083e6:	409a      	lsls	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083ec:	e024      	b.n	8008438 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3b10      	subs	r3, #16
 80083f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80083f8:	fba2 2303 	umull	r2, r3, r2, r3
 80083fc:	091b      	lsrs	r3, r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4a1c      	ldr	r2, [pc, #112]	@ (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d806      	bhi.n	8008416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1b      	ldr	r2, [pc, #108]	@ (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d902      	bls.n	8008416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3308      	adds	r3, #8
 8008414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b18      	ldr	r3, [pc, #96]	@ (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a16      	ldr	r2, [pc, #88]	@ (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008428:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	58025408 	.word	0x58025408
 8008448:	5802541c 	.word	0x5802541c
 800844c:	58025430 	.word	0x58025430
 8008450:	58025444 	.word	0x58025444
 8008454:	58025458 	.word	0x58025458
 8008458:	5802546c 	.word	0x5802546c
 800845c:	58025480 	.word	0x58025480
 8008460:	58025494 	.word	0x58025494
 8008464:	cccccccd 	.word	0xcccccccd
 8008468:	16009600 	.word	0x16009600
 800846c:	58025880 	.word	0x58025880
 8008470:	aaaaaaab 	.word	0xaaaaaaab
 8008474:	400204b8 	.word	0x400204b8
 8008478:	4002040f 	.word	0x4002040f
 800847c:	10008200 	.word	0x10008200
 8008480:	40020880 	.word	0x40020880

08008484 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04a      	beq.n	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d847      	bhi.n	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a25      	ldr	r2, [pc, #148]	@ (800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d022      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a24      	ldr	r2, [pc, #144]	@ (8008540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d01d      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a22      	ldr	r2, [pc, #136]	@ (8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d018      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a21      	ldr	r2, [pc, #132]	@ (8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d013      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1f      	ldr	r2, [pc, #124]	@ (800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00e      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d009      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d101      	bne.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4b17      	ldr	r3, [pc, #92]	@ (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800850c:	671a      	str	r2, [r3, #112]	@ 0x70
 800850e:	e009      	b.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4b14      	ldr	r3, [pc, #80]	@ (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a11      	ldr	r2, [pc, #68]	@ (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008522:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b01      	subs	r3, #1
 8008528:	2201      	movs	r2, #1
 800852a:	409a      	lsls	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	58025408 	.word	0x58025408
 8008540:	5802541c 	.word	0x5802541c
 8008544:	58025430 	.word	0x58025430
 8008548:	58025444 	.word	0x58025444
 800854c:	58025458 	.word	0x58025458
 8008550:	5802546c 	.word	0x5802546c
 8008554:	58025480 	.word	0x58025480
 8008558:	58025494 	.word	0x58025494
 800855c:	1600963f 	.word	0x1600963f
 8008560:	58025940 	.word	0x58025940
 8008564:	1000823f 	.word	0x1000823f
 8008568:	40020940 	.word	0x40020940

0800856c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b098      	sub	sp, #96	@ 0x60
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008574:	4a84      	ldr	r2, [pc, #528]	@ (8008788 <HAL_FDCAN_Init+0x21c>)
 8008576:	f107 030c 	add.w	r3, r7, #12
 800857a:	4611      	mov	r1, r2
 800857c:	224c      	movs	r2, #76	@ 0x4c
 800857e:	4618      	mov	r0, r3
 8008580:	f00e fa1b 	bl	80169ba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e1c6      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a7e      	ldr	r2, [pc, #504]	@ (800878c <HAL_FDCAN_Init+0x220>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d106      	bne.n	80085a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fa fd36 	bl	800302c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0210 	bic.w	r2, r2, #16
 80085ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085d0:	f7fc ff5a 	bl	8005488 <HAL_GetTick>
 80085d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80085d6:	e014      	b.n	8008602 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80085d8:	f7fc ff56 	bl	8005488 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b0a      	cmp	r3, #10
 80085e4:	d90d      	bls.n	8008602 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085ec:	f043 0201 	orr.w	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e18c      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b08      	cmp	r3, #8
 800860e:	d0e3      	beq.n	80085d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008620:	f7fc ff32 	bl	8005488 <HAL_GetTick>
 8008624:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008626:	e014      	b.n	8008652 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008628:	f7fc ff2e 	bl	8005488 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b0a      	cmp	r3, #10
 8008634:	d90d      	bls.n	8008652 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800863c:	f043 0201 	orr.w	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2203      	movs	r2, #3
 800864a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e164      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0e3      	beq.n	8008628 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0202 	orr.w	r2, r2, #2
 800866e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d108      	bne.n	800868a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008686:	619a      	str	r2, [r3, #24]
 8008688:	e007      	b.n	800869a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008698:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c5b      	ldrb	r3, [r3, #17]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d108      	bne.n	80086b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086b0:	619a      	str	r2, [r3, #24]
 80086b2:	e007      	b.n	80086c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7c9b      	ldrb	r3, [r3, #18]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d108      	bne.n	80086de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086da:	619a      	str	r2, [r3, #24]
 80086dc:	e007      	b.n	80086ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008712:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0210 	bic.w	r2, r2, #16
 8008722:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d108      	bne.n	800873e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0204 	orr.w	r2, r2, #4
 800873a:	619a      	str	r2, [r3, #24]
 800873c:	e030      	b.n	80087a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02c      	beq.n	80087a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d020      	beq.n	8008790 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800875c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0210 	orr.w	r2, r2, #16
 800876c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d114      	bne.n	80087a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0220 	orr.w	r2, r2, #32
 8008784:	619a      	str	r2, [r3, #24]
 8008786:	e00b      	b.n	80087a0 <HAL_FDCAN_Init+0x234>
 8008788:	08018980 	.word	0x08018980
 800878c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0220 	orr.w	r2, r2, #32
 800879e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d4:	d115      	bne.n	8008802 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	3b01      	subs	r3, #1
 80087e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	3b01      	subs	r3, #1
 80087ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80087ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f6:	3b01      	subs	r3, #1
 80087f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80087fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008800:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008828:	4413      	add	r3, r2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d011      	beq.n	8008852 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008836:	f023 0107 	bic.w	r1, r3, #7
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	3360      	adds	r3, #96	@ 0x60
 8008842:	443b      	add	r3, r7
 8008844:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d011      	beq.n	800887e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008862:	f023 0107 	bic.w	r1, r3, #7
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	3360      	adds	r3, #96	@ 0x60
 800886e:	443b      	add	r3, r7
 8008870:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008882:	2b00      	cmp	r3, #0
 8008884:	d012      	beq.n	80088ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800888e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	3360      	adds	r3, #96	@ 0x60
 800889a:	443b      	add	r3, r7
 800889c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088a0:	011a      	lsls	r2, r3, #4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d012      	beq.n	80088da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	3360      	adds	r3, #96	@ 0x60
 80088c8:	443b      	add	r3, r7
 80088ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088ce:	021a      	lsls	r2, r3, #8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a11      	ldr	r2, [pc, #68]	@ (8008924 <HAL_FDCAN_Init+0x3b8>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d107      	bne.n	80088f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f022 0203 	bic.w	r2, r2, #3
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f80b 	bl	8008928 <FDCAN_CalcultateRamBlockAddresses>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008918:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800891c:	4618      	mov	r0, r3
 800891e:	3760      	adds	r7, #96	@ 0x60
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	4000a000 	.word	0x4000a000

08008928 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008934:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800893e:	4ba7      	ldr	r3, [pc, #668]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008940:	4013      	ands	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	0091      	lsls	r1, r2, #2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	430b      	orrs	r3, r1
 800894c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008958:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	041a      	lsls	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4413      	add	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800897e:	4b97      	ldr	r3, [pc, #604]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008980:	4013      	ands	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	0091      	lsls	r1, r2, #2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	430b      	orrs	r3, r1
 800898c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008998:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	041a      	lsls	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80089c0:	4b86      	ldr	r3, [pc, #536]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	0091      	lsls	r1, r2, #2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6812      	ldr	r2, [r2, #0]
 80089cc:	430b      	orrs	r3, r1
 80089ce:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089da:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	041a      	lsls	r2, r3, #16
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008a08:	4b74      	ldr	r3, [pc, #464]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	0091      	lsls	r1, r2, #2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	430b      	orrs	r3, r1
 8008a16:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a2a:	041a      	lsls	r2, r3, #16
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008a50:	4b62      	ldr	r3, [pc, #392]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	0091      	lsls	r1, r2, #2
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008a7c:	4b57      	ldr	r3, [pc, #348]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	0091      	lsls	r1, r2, #2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a96:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9e:	041a      	lsls	r2, r3, #16
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008abe:	4b47      	ldr	r3, [pc, #284]	@ (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	0091      	lsls	r1, r2, #2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	430b      	orrs	r3, r1
 8008acc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ad8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ae0:	041a      	lsls	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008af4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008afc:	061a      	lsls	r2, r3, #24
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b0c:	4b34      	ldr	r3, [pc, #208]	@ (8008be0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008b0e:	4413      	add	r3, r2
 8008b10:	009a      	lsls	r2, r3, #2
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	441a      	add	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	441a      	add	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008b48:	441a      	add	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b60:	441a      	add	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b78:	441a      	add	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd2:	4a04      	ldr	r2, [pc, #16]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d915      	bls.n	8008c04 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008bd8:	e006      	b.n	8008be8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008bda:	bf00      	nop
 8008bdc:	ffff0003 	.word	0xffff0003
 8008be0:	10002b00 	.word	0x10002b00
 8008be4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e010      	b.n	8008c26 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	e005      	b.n	8008c18 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3304      	adds	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3f3      	bcc.n	8008c0c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b089      	sub	sp, #36	@ 0x24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c42:	4b89      	ldr	r3, [pc, #548]	@ (8008e68 <HAL_GPIO_Init+0x234>)
 8008c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c46:	e194      	b.n	8008f72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	fa01 f303 	lsl.w	r3, r1, r3
 8008c54:	4013      	ands	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8186 	beq.w	8008f6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d005      	beq.n	8008c78 <HAL_GPIO_Init+0x44>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d130      	bne.n	8008cda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	2203      	movs	r2, #3
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cae:	2201      	movs	r2, #1
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	091b      	lsrs	r3, r3, #4
 8008cc4:	f003 0201 	and.w	r2, r3, #1
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d017      	beq.n	8008d16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689a      	ldr	r2, [r3, #8]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d123      	bne.n	8008d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	08da      	lsrs	r2, r3, #3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3208      	adds	r2, #8
 8008d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	220f      	movs	r2, #15
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	43db      	mvns	r3, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4013      	ands	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	691a      	ldr	r2, [r3, #16]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	08da      	lsrs	r2, r3, #3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3208      	adds	r2, #8
 8008d64:	69b9      	ldr	r1, [r7, #24]
 8008d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	2203      	movs	r2, #3
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 0203 	and.w	r2, r3, #3
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80e0 	beq.w	8008f6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dac:	4b2f      	ldr	r3, [pc, #188]	@ (8008e6c <HAL_GPIO_Init+0x238>)
 8008dae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008db2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e6c <HAL_GPIO_Init+0x238>)
 8008db4:	f043 0302 	orr.w	r3, r3, #2
 8008db8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8008dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8008e6c <HAL_GPIO_Init+0x238>)
 8008dbe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dca:	4a29      	ldr	r2, [pc, #164]	@ (8008e70 <HAL_GPIO_Init+0x23c>)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	220f      	movs	r2, #15
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	4013      	ands	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a20      	ldr	r2, [pc, #128]	@ (8008e74 <HAL_GPIO_Init+0x240>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d052      	beq.n	8008e9c <HAL_GPIO_Init+0x268>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a1f      	ldr	r2, [pc, #124]	@ (8008e78 <HAL_GPIO_Init+0x244>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d031      	beq.n	8008e62 <HAL_GPIO_Init+0x22e>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1e      	ldr	r2, [pc, #120]	@ (8008e7c <HAL_GPIO_Init+0x248>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d02b      	beq.n	8008e5e <HAL_GPIO_Init+0x22a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1d      	ldr	r2, [pc, #116]	@ (8008e80 <HAL_GPIO_Init+0x24c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d025      	beq.n	8008e5a <HAL_GPIO_Init+0x226>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a1c      	ldr	r2, [pc, #112]	@ (8008e84 <HAL_GPIO_Init+0x250>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01f      	beq.n	8008e56 <HAL_GPIO_Init+0x222>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a1b      	ldr	r2, [pc, #108]	@ (8008e88 <HAL_GPIO_Init+0x254>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d019      	beq.n	8008e52 <HAL_GPIO_Init+0x21e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1a      	ldr	r2, [pc, #104]	@ (8008e8c <HAL_GPIO_Init+0x258>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d013      	beq.n	8008e4e <HAL_GPIO_Init+0x21a>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a19      	ldr	r2, [pc, #100]	@ (8008e90 <HAL_GPIO_Init+0x25c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00d      	beq.n	8008e4a <HAL_GPIO_Init+0x216>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a18      	ldr	r2, [pc, #96]	@ (8008e94 <HAL_GPIO_Init+0x260>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <HAL_GPIO_Init+0x212>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a17      	ldr	r2, [pc, #92]	@ (8008e98 <HAL_GPIO_Init+0x264>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d101      	bne.n	8008e42 <HAL_GPIO_Init+0x20e>
 8008e3e:	2309      	movs	r3, #9
 8008e40:	e02d      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e42:	230a      	movs	r3, #10
 8008e44:	e02b      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e46:	2308      	movs	r3, #8
 8008e48:	e029      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e4a:	2307      	movs	r3, #7
 8008e4c:	e027      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e4e:	2306      	movs	r3, #6
 8008e50:	e025      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e52:	2305      	movs	r3, #5
 8008e54:	e023      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e56:	2304      	movs	r3, #4
 8008e58:	e021      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e01f      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e01d      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e01b      	b.n	8008e9e <HAL_GPIO_Init+0x26a>
 8008e66:	bf00      	nop
 8008e68:	58000080 	.word	0x58000080
 8008e6c:	58024400 	.word	0x58024400
 8008e70:	58000400 	.word	0x58000400
 8008e74:	58020000 	.word	0x58020000
 8008e78:	58020400 	.word	0x58020400
 8008e7c:	58020800 	.word	0x58020800
 8008e80:	58020c00 	.word	0x58020c00
 8008e84:	58021000 	.word	0x58021000
 8008e88:	58021400 	.word	0x58021400
 8008e8c:	58021800 	.word	0x58021800
 8008e90:	58021c00 	.word	0x58021c00
 8008e94:	58022000 	.word	0x58022000
 8008e98:	58022400 	.word	0x58022400
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	f002 0203 	and.w	r2, r2, #3
 8008ea4:	0092      	lsls	r2, r2, #2
 8008ea6:	4093      	lsls	r3, r2
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008eae:	4938      	ldr	r1, [pc, #224]	@ (8008f90 <HAL_GPIO_Init+0x35c>)
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	089b      	lsrs	r3, r3, #2
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	43db      	mvns	r3, r3
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	4013      	ands	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	43db      	mvns	r3, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f47f ae63 	bne.w	8008c48 <HAL_GPIO_Init+0x14>
  }
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	3724      	adds	r7, #36	@ 0x24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	58000400 	.word	0x58000400

08008f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	807b      	strh	r3, [r7, #2]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fa4:	787b      	ldrb	r3, [r7, #1]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008faa:	887a      	ldrh	r2, [r7, #2]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fb0:	e003      	b.n	8008fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fb2:	887b      	ldrh	r3, [r7, #2]
 8008fb4:	041a      	lsls	r2, r3, #16
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	619a      	str	r2, [r3, #24]
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e08b      	b.n	80090f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fa fa1e 	bl	8003430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	@ 0x24
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d107      	bne.n	8009042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	e006      	b.n	8009050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800904e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d108      	bne.n	800906a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	e007      	b.n	800907a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6859      	ldr	r1, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b1d      	ldr	r3, [pc, #116]	@ (80090fc <HAL_I2C_Init+0x134>)
 8009086:	430b      	orrs	r3, r1
 8009088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69d9      	ldr	r1, [r3, #28]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a1a      	ldr	r2, [r3, #32]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	02008000 	.word	0x02008000

08009100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b20      	cmp	r3, #32
 8009114:	d138      	bne.n	8009188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009120:	2302      	movs	r3, #2
 8009122:	e032      	b.n	800918a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2224      	movs	r2, #36	@ 0x24
 8009130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0201 	bic.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	e000      	b.n	800918a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009188:	2302      	movs	r3, #2
  }
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d139      	bne.n	8009220 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e033      	b.n	8009222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2224      	movs	r2, #36	@ 0x24
 80091c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 0201 	bic.w	r2, r2, #1
 80091d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	e000      	b.n	8009222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009220:	2302      	movs	r3, #2
  }
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009238:	4b19      	ldr	r3, [pc, #100]	@ (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b04      	cmp	r3, #4
 8009242:	d00a      	beq.n	800925a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009244:	4b16      	ldr	r3, [pc, #88]	@ (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d001      	beq.n	8009256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e01f      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	e01d      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800925a:	4b11      	ldr	r3, [pc, #68]	@ (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f023 0207 	bic.w	r2, r3, #7
 8009262:	490f      	ldr	r1, [pc, #60]	@ (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4313      	orrs	r3, r2
 8009268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800926a:	f7fc f90d 	bl	8005488 <HAL_GetTick>
 800926e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009270:	e009      	b.n	8009286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009272:	f7fc f909 	bl	8005488 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009280:	d901      	bls.n	8009286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e007      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009286:	4b06      	ldr	r3, [pc, #24]	@ (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009292:	d1ee      	bne.n	8009272 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	58024800 	.word	0x58024800

080092a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08c      	sub	sp, #48	@ 0x30
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f000 bc1f 	b.w	8009af6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80b3 	beq.w	800942c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092c6:	4b95      	ldr	r3, [pc, #596]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092d0:	4b92      	ldr	r3, [pc, #584]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80092d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d8:	2b10      	cmp	r3, #16
 80092da:	d007      	beq.n	80092ec <HAL_RCC_OscConfig+0x48>
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	2b18      	cmp	r3, #24
 80092e0:	d112      	bne.n	8009308 <HAL_RCC_OscConfig+0x64>
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d10d      	bne.n	8009308 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ec:	4b8b      	ldr	r3, [pc, #556]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8098 	beq.w	800942a <HAL_RCC_OscConfig+0x186>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 8093 	bne.w	800942a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e3f6      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009310:	d106      	bne.n	8009320 <HAL_RCC_OscConfig+0x7c>
 8009312:	4b82      	ldr	r3, [pc, #520]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a81      	ldr	r2, [pc, #516]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e058      	b.n	80093d2 <HAL_RCC_OscConfig+0x12e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d112      	bne.n	800934e <HAL_RCC_OscConfig+0xaa>
 8009328:	4b7c      	ldr	r3, [pc, #496]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a7b      	ldr	r2, [pc, #492]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800932e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	4b79      	ldr	r3, [pc, #484]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a78      	ldr	r2, [pc, #480]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800933a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	4b76      	ldr	r3, [pc, #472]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a75      	ldr	r2, [pc, #468]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	e041      	b.n	80093d2 <HAL_RCC_OscConfig+0x12e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009356:	d112      	bne.n	800937e <HAL_RCC_OscConfig+0xda>
 8009358:	4b70      	ldr	r3, [pc, #448]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a6f      	ldr	r2, [pc, #444]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800935e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	4b6d      	ldr	r3, [pc, #436]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a6c      	ldr	r2, [pc, #432]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800936a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	4b6a      	ldr	r3, [pc, #424]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a69      	ldr	r2, [pc, #420]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	e029      	b.n	80093d2 <HAL_RCC_OscConfig+0x12e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009386:	d112      	bne.n	80093ae <HAL_RCC_OscConfig+0x10a>
 8009388:	4b64      	ldr	r3, [pc, #400]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a63      	ldr	r2, [pc, #396]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800938e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	4b61      	ldr	r3, [pc, #388]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a60      	ldr	r2, [pc, #384]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800939a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	4b5e      	ldr	r3, [pc, #376]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a5d      	ldr	r2, [pc, #372]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	e011      	b.n	80093d2 <HAL_RCC_OscConfig+0x12e>
 80093ae:	4b5b      	ldr	r3, [pc, #364]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a5a      	ldr	r2, [pc, #360]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	4b58      	ldr	r3, [pc, #352]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a57      	ldr	r2, [pc, #348]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	4b55      	ldr	r3, [pc, #340]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a54      	ldr	r2, [pc, #336]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d013      	beq.n	8009402 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093da:	f7fc f855 	bl	8005488 <HAL_GetTick>
 80093de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093e0:	e008      	b.n	80093f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093e2:	f7fc f851 	bl	8005488 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b64      	cmp	r3, #100	@ 0x64
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e380      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093f4:	4b49      	ldr	r3, [pc, #292]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0f0      	beq.n	80093e2 <HAL_RCC_OscConfig+0x13e>
 8009400:	e014      	b.n	800942c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009402:	f7fc f841 	bl	8005488 <HAL_GetTick>
 8009406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800940a:	f7fc f83d 	bl	8005488 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b64      	cmp	r3, #100	@ 0x64
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e36c      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800941c:	4b3f      	ldr	r3, [pc, #252]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1f0      	bne.n	800940a <HAL_RCC_OscConfig+0x166>
 8009428:	e000      	b.n	800942c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800942a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 808c 	beq.w	8009552 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800943a:	4b38      	ldr	r3, [pc, #224]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009442:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009444:	4b35      	ldr	r3, [pc, #212]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d007      	beq.n	8009460 <HAL_RCC_OscConfig+0x1bc>
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2b18      	cmp	r3, #24
 8009454:	d137      	bne.n	80094c6 <HAL_RCC_OscConfig+0x222>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f003 0303 	and.w	r3, r3, #3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d132      	bne.n	80094c6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009460:	4b2e      	ldr	r3, [pc, #184]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <HAL_RCC_OscConfig+0x1d4>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e33e      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009478:	4b28      	ldr	r3, [pc, #160]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f023 0219 	bic.w	r2, r3, #25
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	4925      	ldr	r1, [pc, #148]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009486:	4313      	orrs	r3, r2
 8009488:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948a:	f7fb fffd 	bl	8005488 <HAL_GetTick>
 800948e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009490:	e008      	b.n	80094a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009492:	f7fb fff9 	bl	8005488 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d901      	bls.n	80094a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e328      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094a4:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094b0:	4b1a      	ldr	r3, [pc, #104]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	061b      	lsls	r3, r3, #24
 80094be:	4917      	ldr	r1, [pc, #92]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094c4:	e045      	b.n	8009552 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d028      	beq.n	8009520 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094ce:	4b13      	ldr	r3, [pc, #76]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f023 0219 	bic.w	r2, r3, #25
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	4910      	ldr	r1, [pc, #64]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e0:	f7fb ffd2 	bl	8005488 <HAL_GetTick>
 80094e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094e8:	f7fb ffce 	bl	8005488 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e2fd      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094fa:	4b08      	ldr	r3, [pc, #32]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f0      	beq.n	80094e8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009506:	4b05      	ldr	r3, [pc, #20]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	061b      	lsls	r3, r3, #24
 8009514:	4901      	ldr	r1, [pc, #4]	@ (800951c <HAL_RCC_OscConfig+0x278>)
 8009516:	4313      	orrs	r3, r2
 8009518:	604b      	str	r3, [r1, #4]
 800951a:	e01a      	b.n	8009552 <HAL_RCC_OscConfig+0x2ae>
 800951c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009520:	4b97      	ldr	r3, [pc, #604]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a96      	ldr	r2, [pc, #600]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009526:	f023 0301 	bic.w	r3, r3, #1
 800952a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800952c:	f7fb ffac 	bl	8005488 <HAL_GetTick>
 8009530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009532:	e008      	b.n	8009546 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009534:	f7fb ffa8 	bl	8005488 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d901      	bls.n	8009546 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e2d7      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009546:	4b8e      	ldr	r3, [pc, #568]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f0      	bne.n	8009534 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0310 	and.w	r3, r3, #16
 800955a:	2b00      	cmp	r3, #0
 800955c:	d06a      	beq.n	8009634 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800955e:	4b88      	ldr	r3, [pc, #544]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009568:	4b85      	ldr	r3, [pc, #532]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800956a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d007      	beq.n	8009584 <HAL_RCC_OscConfig+0x2e0>
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b18      	cmp	r3, #24
 8009578:	d11b      	bne.n	80095b2 <HAL_RCC_OscConfig+0x30e>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d116      	bne.n	80095b2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009584:	4b7e      	ldr	r3, [pc, #504]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <HAL_RCC_OscConfig+0x2f8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	2b80      	cmp	r3, #128	@ 0x80
 8009596:	d001      	beq.n	800959c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e2ac      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800959c:	4b78      	ldr	r3, [pc, #480]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	061b      	lsls	r3, r3, #24
 80095aa:	4975      	ldr	r1, [pc, #468]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095b0:	e040      	b.n	8009634 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d023      	beq.n	8009602 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095ba:	4b71      	ldr	r3, [pc, #452]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a70      	ldr	r2, [pc, #448]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c6:	f7fb ff5f 	bl	8005488 <HAL_GetTick>
 80095ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095cc:	e008      	b.n	80095e0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095ce:	f7fb ff5b 	bl	8005488 <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d901      	bls.n	80095e0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e28a      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095e0:	4b67      	ldr	r3, [pc, #412]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0f0      	beq.n	80095ce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095ec:	4b64      	ldr	r3, [pc, #400]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	061b      	lsls	r3, r3, #24
 80095fa:	4961      	ldr	r1, [pc, #388]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60cb      	str	r3, [r1, #12]
 8009600:	e018      	b.n	8009634 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009602:	4b5f      	ldr	r3, [pc, #380]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a5e      	ldr	r2, [pc, #376]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800960c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960e:	f7fb ff3b 	bl	8005488 <HAL_GetTick>
 8009612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009614:	e008      	b.n	8009628 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009616:	f7fb ff37 	bl	8005488 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e266      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009628:	4b55      	ldr	r3, [pc, #340]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f0      	bne.n	8009616 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0308 	and.w	r3, r3, #8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d036      	beq.n	80096ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d019      	beq.n	800967c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009648:	4b4d      	ldr	r3, [pc, #308]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800964a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800964c:	4a4c      	ldr	r2, [pc, #304]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009654:	f7fb ff18 	bl	8005488 <HAL_GetTick>
 8009658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800965a:	e008      	b.n	800966e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800965c:	f7fb ff14 	bl	8005488 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d901      	bls.n	800966e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e243      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800966e:	4b44      	ldr	r3, [pc, #272]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0f0      	beq.n	800965c <HAL_RCC_OscConfig+0x3b8>
 800967a:	e018      	b.n	80096ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800967c:	4b40      	ldr	r3, [pc, #256]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800967e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009680:	4a3f      	ldr	r2, [pc, #252]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009688:	f7fb fefe 	bl	8005488 <HAL_GetTick>
 800968c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800968e:	e008      	b.n	80096a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009690:	f7fb fefa 	bl	8005488 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e229      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096a2:	4b37      	ldr	r3, [pc, #220]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f0      	bne.n	8009690 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d036      	beq.n	8009728 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d019      	beq.n	80096f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096ce:	f7fb fedb 	bl	8005488 <HAL_GetTick>
 80096d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096d4:	e008      	b.n	80096e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096d6:	f7fb fed7 	bl	8005488 <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d901      	bls.n	80096e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e206      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096e8:	4b25      	ldr	r3, [pc, #148]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0f0      	beq.n	80096d6 <HAL_RCC_OscConfig+0x432>
 80096f4:	e018      	b.n	8009728 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096f6:	4b22      	ldr	r3, [pc, #136]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a21      	ldr	r2, [pc, #132]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 80096fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009700:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009702:	f7fb fec1 	bl	8005488 <HAL_GetTick>
 8009706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800970a:	f7fb febd 	bl	8005488 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e1ec      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800971c:	4b18      	ldr	r3, [pc, #96]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f0      	bne.n	800970a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80af 	beq.w	8009894 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009736:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <HAL_RCC_OscConfig+0x4e0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a12      	ldr	r2, [pc, #72]	@ (8009784 <HAL_RCC_OscConfig+0x4e0>)
 800973c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009740:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009742:	f7fb fea1 	bl	8005488 <HAL_GetTick>
 8009746:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009748:	e008      	b.n	800975c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800974a:	f7fb fe9d 	bl	8005488 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b64      	cmp	r3, #100	@ 0x64
 8009756:	d901      	bls.n	800975c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e1cc      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800975c:	4b09      	ldr	r3, [pc, #36]	@ (8009784 <HAL_RCC_OscConfig+0x4e0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f0      	beq.n	800974a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d10b      	bne.n	8009788 <HAL_RCC_OscConfig+0x4e4>
 8009770:	4b03      	ldr	r3, [pc, #12]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009774:	4a02      	ldr	r2, [pc, #8]	@ (8009780 <HAL_RCC_OscConfig+0x4dc>)
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	6713      	str	r3, [r2, #112]	@ 0x70
 800977c:	e05b      	b.n	8009836 <HAL_RCC_OscConfig+0x592>
 800977e:	bf00      	nop
 8009780:	58024400 	.word	0x58024400
 8009784:	58024800 	.word	0x58024800
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d112      	bne.n	80097b6 <HAL_RCC_OscConfig+0x512>
 8009790:	4b9d      	ldr	r3, [pc, #628]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009794:	4a9c      	ldr	r2, [pc, #624]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	6713      	str	r3, [r2, #112]	@ 0x70
 800979c:	4b9a      	ldr	r3, [pc, #616]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800979e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a0:	4a99      	ldr	r2, [pc, #612]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a8:	4b97      	ldr	r3, [pc, #604]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ac:	4a96      	ldr	r2, [pc, #600]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097ae:	f023 0304 	bic.w	r3, r3, #4
 80097b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80097b4:	e03f      	b.n	8009836 <HAL_RCC_OscConfig+0x592>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d112      	bne.n	80097e4 <HAL_RCC_OscConfig+0x540>
 80097be:	4b92      	ldr	r3, [pc, #584]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c2:	4a91      	ldr	r2, [pc, #580]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097c4:	f043 0304 	orr.w	r3, r3, #4
 80097c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80097ca:	4b8f      	ldr	r3, [pc, #572]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ce:	4a8e      	ldr	r2, [pc, #568]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80097d6:	4b8c      	ldr	r3, [pc, #560]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097da:	4a8b      	ldr	r2, [pc, #556]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097dc:	f043 0301 	orr.w	r3, r3, #1
 80097e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80097e2:	e028      	b.n	8009836 <HAL_RCC_OscConfig+0x592>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b85      	cmp	r3, #133	@ 0x85
 80097ea:	d112      	bne.n	8009812 <HAL_RCC_OscConfig+0x56e>
 80097ec:	4b86      	ldr	r3, [pc, #536]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097f0:	4a85      	ldr	r2, [pc, #532]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097f2:	f043 0304 	orr.w	r3, r3, #4
 80097f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097f8:	4b83      	ldr	r3, [pc, #524]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097fc:	4a82      	ldr	r2, [pc, #520]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80097fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009802:	6713      	str	r3, [r2, #112]	@ 0x70
 8009804:	4b80      	ldr	r3, [pc, #512]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009808:	4a7f      	ldr	r2, [pc, #508]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009810:	e011      	b.n	8009836 <HAL_RCC_OscConfig+0x592>
 8009812:	4b7d      	ldr	r3, [pc, #500]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009816:	4a7c      	ldr	r2, [pc, #496]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009818:	f023 0301 	bic.w	r3, r3, #1
 800981c:	6713      	str	r3, [r2, #112]	@ 0x70
 800981e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009822:	4a79      	ldr	r2, [pc, #484]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009824:	f023 0304 	bic.w	r3, r3, #4
 8009828:	6713      	str	r3, [r2, #112]	@ 0x70
 800982a:	4b77      	ldr	r3, [pc, #476]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800982c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800982e:	4a76      	ldr	r2, [pc, #472]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009834:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d015      	beq.n	800986a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983e:	f7fb fe23 	bl	8005488 <HAL_GetTick>
 8009842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009844:	e00a      	b.n	800985c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009846:	f7fb fe1f 	bl	8005488 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009854:	4293      	cmp	r3, r2
 8009856:	d901      	bls.n	800985c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e14c      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800985c:	4b6a      	ldr	r3, [pc, #424]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800985e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0ee      	beq.n	8009846 <HAL_RCC_OscConfig+0x5a2>
 8009868:	e014      	b.n	8009894 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986a:	f7fb fe0d 	bl	8005488 <HAL_GetTick>
 800986e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009870:	e00a      	b.n	8009888 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009872:	f7fb fe09 	bl	8005488 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009880:	4293      	cmp	r3, r2
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e136      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009888:	4b5f      	ldr	r3, [pc, #380]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800988a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1ee      	bne.n	8009872 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 812b 	beq.w	8009af4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800989e:	4b5a      	ldr	r3, [pc, #360]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098a6:	2b18      	cmp	r3, #24
 80098a8:	f000 80bb 	beq.w	8009a22 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	f040 8095 	bne.w	80099e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098b6:	4b54      	ldr	r3, [pc, #336]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a53      	ldr	r2, [pc, #332]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c2:	f7fb fde1 	bl	8005488 <HAL_GetTick>
 80098c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098c8:	e008      	b.n	80098dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ca:	f7fb fddd 	bl	8005488 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d901      	bls.n	80098dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e10c      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f0      	bne.n	80098ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098e8:	4b47      	ldr	r3, [pc, #284]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098ec:	4b47      	ldr	r3, [pc, #284]	@ (8009a0c <HAL_RCC_OscConfig+0x768>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80098f8:	0112      	lsls	r2, r2, #4
 80098fa:	430a      	orrs	r2, r1
 80098fc:	4942      	ldr	r1, [pc, #264]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	628b      	str	r3, [r1, #40]	@ 0x28
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009906:	3b01      	subs	r3, #1
 8009908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009910:	3b01      	subs	r3, #1
 8009912:	025b      	lsls	r3, r3, #9
 8009914:	b29b      	uxth	r3, r3
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991c:	3b01      	subs	r3, #1
 800991e:	041b      	lsls	r3, r3, #16
 8009920:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009924:	431a      	orrs	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992a:	3b01      	subs	r3, #1
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009932:	4935      	ldr	r1, [pc, #212]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009934:	4313      	orrs	r3, r2
 8009936:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009938:	4b33      	ldr	r3, [pc, #204]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	4a32      	ldr	r2, [pc, #200]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800993e:	f023 0301 	bic.w	r3, r3, #1
 8009942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009944:	4b30      	ldr	r3, [pc, #192]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009948:	4b31      	ldr	r3, [pc, #196]	@ (8009a10 <HAL_RCC_OscConfig+0x76c>)
 800994a:	4013      	ands	r3, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009950:	00d2      	lsls	r2, r2, #3
 8009952:	492d      	ldr	r1, [pc, #180]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009954:	4313      	orrs	r3, r2
 8009956:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009958:	4b2b      	ldr	r3, [pc, #172]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800995a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995c:	f023 020c 	bic.w	r2, r3, #12
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009964:	4928      	ldr	r1, [pc, #160]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009966:	4313      	orrs	r3, r2
 8009968:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800996a:	4b27      	ldr	r3, [pc, #156]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	f023 0202 	bic.w	r2, r3, #2
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	4924      	ldr	r1, [pc, #144]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009978:	4313      	orrs	r3, r2
 800997a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800997c:	4b22      	ldr	r3, [pc, #136]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	4a21      	ldr	r2, [pc, #132]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009988:	4b1f      	ldr	r3, [pc, #124]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998c:	4a1e      	ldr	r2, [pc, #120]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800998e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009994:	4b1c      	ldr	r3, [pc, #112]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 8009996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009998:	4a1b      	ldr	r2, [pc, #108]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 800999a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800999e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80099a0:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	4a18      	ldr	r2, [pc, #96]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099a6:	f043 0301 	orr.w	r3, r3, #1
 80099aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099ac:	4b16      	ldr	r3, [pc, #88]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a15      	ldr	r2, [pc, #84]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b8:	f7fb fd66 	bl	8005488 <HAL_GetTick>
 80099bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099be:	e008      	b.n	80099d2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099c0:	f7fb fd62 	bl	8005488 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e091      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCC_OscConfig+0x71c>
 80099de:	e089      	b.n	8009af4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099e0:	4b09      	ldr	r3, [pc, #36]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a08      	ldr	r2, [pc, #32]	@ (8009a08 <HAL_RCC_OscConfig+0x764>)
 80099e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ec:	f7fb fd4c 	bl	8005488 <HAL_GetTick>
 80099f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099f2:	e00f      	b.n	8009a14 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099f4:	f7fb fd48 	bl	8005488 <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d908      	bls.n	8009a14 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e077      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
 8009a06:	bf00      	nop
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	fffffc0c 	.word	0xfffffc0c
 8009a10:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a14:	4b3a      	ldr	r3, [pc, #232]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e9      	bne.n	80099f4 <HAL_RCC_OscConfig+0x750>
 8009a20:	e068      	b.n	8009af4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a22:	4b37      	ldr	r3, [pc, #220]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a28:	4b35      	ldr	r3, [pc, #212]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a2c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d031      	beq.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f003 0203 	and.w	r2, r3, #3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d12a      	bne.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	091b      	lsrs	r3, r3, #4
 8009a48:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d122      	bne.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d11a      	bne.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	0a5b      	lsrs	r3, r3, #9
 8009a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d111      	bne.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	0c1b      	lsrs	r3, r3, #16
 8009a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d108      	bne.n	8009a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	0e1b      	lsrs	r3, r3, #24
 8009a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d001      	beq.n	8009a9e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e02b      	b.n	8009af6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a9e:	4b18      	ldr	r3, [pc, #96]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d01f      	beq.n	8009af4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009ab4:	4b12      	ldr	r3, [pc, #72]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	4a11      	ldr	r2, [pc, #68]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009aba:	f023 0301 	bic.w	r3, r3, #1
 8009abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ac0:	f7fb fce2 	bl	8005488 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ac6:	bf00      	nop
 8009ac8:	f7fb fcde 	bl	8005488 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d0f9      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8009b04 <HAL_RCC_OscConfig+0x860>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ae0:	00d2      	lsls	r2, r2, #3
 8009ae2:	4907      	ldr	r1, [pc, #28]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aec:	4a04      	ldr	r2, [pc, #16]	@ (8009b00 <HAL_RCC_OscConfig+0x85c>)
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3730      	adds	r7, #48	@ 0x30
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	58024400 	.word	0x58024400
 8009b04:	ffff0007 	.word	0xffff0007

08009b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e19c      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d910      	bls.n	8009b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b2a:	4b87      	ldr	r3, [pc, #540]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f023 020f 	bic.w	r2, r3, #15
 8009b32:	4985      	ldr	r1, [pc, #532]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b3a:	4b83      	ldr	r3, [pc, #524]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 030f 	and.w	r3, r3, #15
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d001      	beq.n	8009b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e184      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d908      	bls.n	8009b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b68:	4b78      	ldr	r3, [pc, #480]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4975      	ldr	r1, [pc, #468]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695a      	ldr	r2, [r3, #20]
 8009b8a:	4b70      	ldr	r3, [pc, #448]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d908      	bls.n	8009ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b96:	4b6d      	ldr	r3, [pc, #436]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	496a      	ldr	r1, [pc, #424]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	4b64      	ldr	r3, [pc, #400]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d908      	bls.n	8009bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bc4:	4b61      	ldr	r3, [pc, #388]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	495e      	ldr	r1, [pc, #376]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69da      	ldr	r2, [r3, #28]
 8009be6:	4b59      	ldr	r3, [pc, #356]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d908      	bls.n	8009c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009bf2:	4b56      	ldr	r3, [pc, #344]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	4953      	ldr	r1, [pc, #332]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d010      	beq.n	8009c32 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	4b4d      	ldr	r3, [pc, #308]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d908      	bls.n	8009c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c20:	4b4a      	ldr	r3, [pc, #296]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	f023 020f 	bic.w	r2, r3, #15
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	4947      	ldr	r1, [pc, #284]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d055      	beq.n	8009cea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c3e:	4b43      	ldr	r3, [pc, #268]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	4940      	ldr	r1, [pc, #256]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d107      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c58:	4b3c      	ldr	r3, [pc, #240]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d121      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e0f6      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d107      	bne.n	8009c80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c70:	4b36      	ldr	r3, [pc, #216]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d115      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0ea      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d107      	bne.n	8009c98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c88:	4b30      	ldr	r3, [pc, #192]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e0de      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c98:	4b2c      	ldr	r3, [pc, #176]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0d6      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ca8:	4b28      	ldr	r3, [pc, #160]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f023 0207 	bic.w	r2, r3, #7
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4925      	ldr	r1, [pc, #148]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cba:	f7fb fbe5 	bl	8005488 <HAL_GetTick>
 8009cbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc0:	e00a      	b.n	8009cd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cc2:	f7fb fbe1 	bl	8005488 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d901      	bls.n	8009cd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e0be      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d1eb      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d010      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	4b14      	ldr	r3, [pc, #80]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d208      	bcs.n	8009d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d06:	4b11      	ldr	r3, [pc, #68]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	f023 020f 	bic.w	r2, r3, #15
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	490e      	ldr	r1, [pc, #56]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d18:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d214      	bcs.n	8009d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d26:	4b08      	ldr	r3, [pc, #32]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 020f 	bic.w	r2, r3, #15
 8009d2e:	4906      	ldr	r1, [pc, #24]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d36:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d005      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e086      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
 8009d48:	52002000 	.word	0x52002000
 8009d4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	4b3f      	ldr	r3, [pc, #252]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d208      	bcs.n	8009d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	4939      	ldr	r1, [pc, #228]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d010      	beq.n	8009dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695a      	ldr	r2, [r3, #20]
 8009d8e:	4b34      	ldr	r3, [pc, #208]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d208      	bcs.n	8009dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d9a:	4b31      	ldr	r3, [pc, #196]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	492e      	ldr	r1, [pc, #184]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d010      	beq.n	8009dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	4b28      	ldr	r3, [pc, #160]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d208      	bcs.n	8009dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009dc8:	4b25      	ldr	r3, [pc, #148]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	4922      	ldr	r1, [pc, #136]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69da      	ldr	r2, [r3, #28]
 8009dea:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d208      	bcs.n	8009e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009df6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	4917      	ldr	r1, [pc, #92]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009e08:	f000 f834 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	4b14      	ldr	r3, [pc, #80]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	4912      	ldr	r1, [pc, #72]	@ (8009e64 <HAL_RCC_ClockConfig+0x35c>)
 8009e1a:	5ccb      	ldrb	r3, [r1, r3]
 8009e1c:	f003 031f 	and.w	r3, r3, #31
 8009e20:	fa22 f303 	lsr.w	r3, r2, r3
 8009e24:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009e26:	4b0e      	ldr	r3, [pc, #56]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8009e64 <HAL_RCC_ClockConfig+0x35c>)
 8009e30:	5cd3      	ldrb	r3, [r2, r3]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e68 <HAL_RCC_ClockConfig+0x360>)
 8009e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e40:	4a0a      	ldr	r2, [pc, #40]	@ (8009e6c <HAL_RCC_ClockConfig+0x364>)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e46:	4b0a      	ldr	r3, [pc, #40]	@ (8009e70 <HAL_RCC_ClockConfig+0x368>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fa fa9e 	bl	800438c <HAL_InitTick>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	080189d4 	.word	0x080189d4
 8009e68:	240000a0 	.word	0x240000a0
 8009e6c:	2400009c 	.word	0x2400009c
 8009e70:	240000a4 	.word	0x240000a4

08009e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b089      	sub	sp, #36	@ 0x24
 8009e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e7a:	4bb3      	ldr	r3, [pc, #716]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e82:	2b18      	cmp	r3, #24
 8009e84:	f200 8155 	bhi.w	800a132 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ef5 	.word	0x08009ef5
 8009e94:	0800a133 	.word	0x0800a133
 8009e98:	0800a133 	.word	0x0800a133
 8009e9c:	0800a133 	.word	0x0800a133
 8009ea0:	0800a133 	.word	0x0800a133
 8009ea4:	0800a133 	.word	0x0800a133
 8009ea8:	0800a133 	.word	0x0800a133
 8009eac:	0800a133 	.word	0x0800a133
 8009eb0:	08009f1b 	.word	0x08009f1b
 8009eb4:	0800a133 	.word	0x0800a133
 8009eb8:	0800a133 	.word	0x0800a133
 8009ebc:	0800a133 	.word	0x0800a133
 8009ec0:	0800a133 	.word	0x0800a133
 8009ec4:	0800a133 	.word	0x0800a133
 8009ec8:	0800a133 	.word	0x0800a133
 8009ecc:	0800a133 	.word	0x0800a133
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	0800a133 	.word	0x0800a133
 8009ed8:	0800a133 	.word	0x0800a133
 8009edc:	0800a133 	.word	0x0800a133
 8009ee0:	0800a133 	.word	0x0800a133
 8009ee4:	0800a133 	.word	0x0800a133
 8009ee8:	0800a133 	.word	0x0800a133
 8009eec:	0800a133 	.word	0x0800a133
 8009ef0:	08009f27 	.word	0x08009f27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef4:	4b94      	ldr	r3, [pc, #592]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f00:	4b91      	ldr	r3, [pc, #580]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	08db      	lsrs	r3, r3, #3
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	4a90      	ldr	r2, [pc, #576]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f12:	e111      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f14:	4b8d      	ldr	r3, [pc, #564]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f16:	61bb      	str	r3, [r7, #24]
      break;
 8009f18:	e10e      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f1a:	4b8d      	ldr	r3, [pc, #564]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f1c:	61bb      	str	r3, [r7, #24]
      break;
 8009f1e:	e10b      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f20:	4b8c      	ldr	r3, [pc, #560]	@ (800a154 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f22:	61bb      	str	r3, [r7, #24]
      break;
 8009f24:	e108      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f26:	4b88      	ldr	r3, [pc, #544]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f30:	4b85      	ldr	r3, [pc, #532]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f34:	091b      	lsrs	r3, r3, #4
 8009f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f3c:	4b82      	ldr	r3, [pc, #520]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f46:	4b80      	ldr	r3, [pc, #512]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	fb02 f303 	mul.w	r3, r2, r3
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80e1 	beq.w	800a12c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	f000 8083 	beq.w	800a078 <HAL_RCC_GetSysClockFreq+0x204>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	f200 80a1 	bhi.w	800a0bc <HAL_RCC_GetSysClockFreq+0x248>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCC_GetSysClockFreq+0x114>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d056      	beq.n	800a034 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f86:	e099      	b.n	800a0bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f88:	4b6f      	ldr	r3, [pc, #444]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0320 	and.w	r3, r3, #32
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02d      	beq.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f94:	4b6c      	ldr	r3, [pc, #432]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	08db      	lsrs	r3, r3, #3
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	ee07 3a90 	vmov	s15, r3
 8009fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b62      	ldr	r3, [pc, #392]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009fee:	e087      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a15c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b51      	ldr	r3, [pc, #324]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a02 	vldr	s12, [r7, #8]
 800a016:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a032:	e065      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b40      	ldr	r3, [pc, #256]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a02 	vldr	s12, [r7, #8]
 800a05a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a076:	e043      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a164 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08a:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a09e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0ba:	e021      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a100:	4b11      	ldr	r3, [pc, #68]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a104:	0a5b      	lsrs	r3, r3, #9
 800a106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a10a:	3301      	adds	r3, #1
 800a10c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a118:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a124:	ee17 3a90 	vmov	r3, s15
 800a128:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a12a:	e005      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	61bb      	str	r3, [r7, #24]
      break;
 800a130:	e002      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a134:	61bb      	str	r3, [r7, #24]
      break;
 800a136:	bf00      	nop
  }

  return sysclockfreq;
 800a138:	69bb      	ldr	r3, [r7, #24]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3724      	adds	r7, #36	@ 0x24
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	58024400 	.word	0x58024400
 800a14c:	03d09000 	.word	0x03d09000
 800a150:	003d0900 	.word	0x003d0900
 800a154:	016e3600 	.word	0x016e3600
 800a158:	46000000 	.word	0x46000000
 800a15c:	4c742400 	.word	0x4c742400
 800a160:	4a742400 	.word	0x4a742400
 800a164:	4bb71b00 	.word	0x4bb71b00

0800a168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a16e:	f7ff fe81 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 800a172:	4602      	mov	r2, r0
 800a174:	4b10      	ldr	r3, [pc, #64]	@ (800a1b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	490f      	ldr	r1, [pc, #60]	@ (800a1bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a180:	5ccb      	ldrb	r3, [r1, r3]
 800a182:	f003 031f 	and.w	r3, r3, #31
 800a186:	fa22 f303 	lsr.w	r3, r2, r3
 800a18a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	4a09      	ldr	r2, [pc, #36]	@ (800a1bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a196:	5cd3      	ldrb	r3, [r2, r3]
 800a198:	f003 031f 	and.w	r3, r3, #31
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	4a07      	ldr	r2, [pc, #28]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1a6:	4a07      	ldr	r2, [pc, #28]	@ (800a1c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a1ac:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	080189d4 	.word	0x080189d4
 800a1c0:	240000a0 	.word	0x240000a0
 800a1c4:	2400009c 	.word	0x2400009c

0800a1c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a1cc:	f7ff ffcc 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	091b      	lsrs	r3, r3, #4
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	4904      	ldr	r1, [pc, #16]	@ (800a1f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	080189d4 	.word	0x080189d4

0800a1f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a1f8:	f7ff ffb6 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	4904      	ldr	r1, [pc, #16]	@ (800a21c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a214:	4618      	mov	r0, r3
 800a216:	bd80      	pop	{r7, pc}
 800a218:	58024400 	.word	0x58024400
 800a21c:	080189d4 	.word	0x080189d4

0800a220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	223f      	movs	r2, #63	@ 0x3f
 800a22e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a230:	4b1a      	ldr	r3, [pc, #104]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f003 0207 	and.w	r2, r3, #7
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800a23c:	4b17      	ldr	r3, [pc, #92]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800a248:	4b14      	ldr	r3, [pc, #80]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	f003 020f 	and.w	r2, r3, #15
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800a254:	4b11      	ldr	r3, [pc, #68]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800a260:	4b0e      	ldr	r3, [pc, #56]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800a26c:	4b0b      	ldr	r3, [pc, #44]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800a278:	4b08      	ldr	r3, [pc, #32]	@ (800a29c <HAL_RCC_GetClockConfig+0x7c>)
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a284:	4b06      	ldr	r3, [pc, #24]	@ (800a2a0 <HAL_RCC_GetClockConfig+0x80>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 020f 	and.w	r2, r3, #15
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	52002000 	.word	0x52002000

0800a2a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2a8:	b0c8      	sub	sp, #288	@ 0x120
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a2c8:	2500      	movs	r5, #0
 800a2ca:	ea54 0305 	orrs.w	r3, r4, r5
 800a2ce:	d049      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2da:	d02f      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a2dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2e0:	d828      	bhi.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2e6:	d01a      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a2e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ec:	d822      	bhi.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2f6:	d007      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2f8:	e01c      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2fa:	4ba7      	ldr	r3, [pc, #668]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fe:	4aa6      	ldr	r2, [pc, #664]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a306:	e01a      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a30c:	3308      	adds	r3, #8
 800a30e:	2102      	movs	r1, #2
 800a310:	4618      	mov	r0, r3
 800a312:	f001 fc43 	bl	800bb9c <RCCEx_PLL2_Config>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a31c:	e00f      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a322:	3328      	adds	r3, #40	@ 0x28
 800a324:	2102      	movs	r1, #2
 800a326:	4618      	mov	r0, r3
 800a328:	f001 fcea 	bl	800bd00 <RCCEx_PLL3_Config>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a332:	e004      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a33a:	e000      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a33e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a346:	4b94      	ldr	r3, [pc, #592]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a354:	4a90      	ldr	r2, [pc, #576]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a356:	430b      	orrs	r3, r1
 800a358:	6513      	str	r3, [r2, #80]	@ 0x50
 800a35a:	e003      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a35c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a360:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a370:	f04f 0900 	mov.w	r9, #0
 800a374:	ea58 0309 	orrs.w	r3, r8, r9
 800a378:	d047      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a37a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a380:	2b04      	cmp	r3, #4
 800a382:	d82a      	bhi.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3a1 	.word	0x0800a3a1
 800a390:	0800a3af 	.word	0x0800a3af
 800a394:	0800a3c5 	.word	0x0800a3c5
 800a398:	0800a3e3 	.word	0x0800a3e3
 800a39c:	0800a3e3 	.word	0x0800a3e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a4:	4a7c      	ldr	r2, [pc, #496]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3ac:	e01a      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 fbf0 	bl	800bb9c <RCCEx_PLL2_Config>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3c2:	e00f      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c8:	3328      	adds	r3, #40	@ 0x28
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f001 fc97 	bl	800bd00 <RCCEx_PLL3_Config>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3d8:	e004      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3e0:	e000      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3ec:	4b6a      	ldr	r3, [pc, #424]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f0:	f023 0107 	bic.w	r1, r3, #7
 800a3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3fa:	4a67      	ldr	r2, [pc, #412]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3fc:	430b      	orrs	r3, r1
 800a3fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800a400:	e003      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a406:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a416:	f04f 0b00 	mov.w	fp, #0
 800a41a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a41e:	d054      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a426:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a42a:	d036      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a42c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a430:	d82f      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a436:	d032      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43c:	d829      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a43e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a440:	d02f      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a442:	2bc0      	cmp	r3, #192	@ 0xc0
 800a444:	d825      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a446:	2b80      	cmp	r3, #128	@ 0x80
 800a448:	d018      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a44a:	2b80      	cmp	r3, #128	@ 0x80
 800a44c:	d821      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a452:	2b40      	cmp	r3, #64	@ 0x40
 800a454:	d007      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a456:	e01c      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a458:	4b4f      	ldr	r3, [pc, #316]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45c:	4a4e      	ldr	r2, [pc, #312]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a464:	e01e      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a46a:	3308      	adds	r3, #8
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 fb94 	bl	800bb9c <RCCEx_PLL2_Config>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a47a:	e013      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a480:	3328      	adds	r3, #40	@ 0x28
 800a482:	2100      	movs	r1, #0
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fc3b 	bl	800bd00 <RCCEx_PLL3_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a490:	e008      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a498:	e004      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a49a:	bf00      	nop
 800a49c:	e002      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a4a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10a      	bne.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a4ac:	4b3a      	ldr	r3, [pc, #232]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ba:	4a37      	ldr	r2, [pc, #220]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4c0:	e003      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a4d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a4e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	d05c      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a4f4:	d03b      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a4f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a4fa:	d834      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a4fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a500:	d037      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a506:	d82e      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a508:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a50c:	d033      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a50e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a512:	d828      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a518:	d01a      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a51a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a51e:	d822      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a528:	d007      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a52a:	e01c      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52c:	4b1a      	ldr	r3, [pc, #104]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	4a19      	ldr	r2, [pc, #100]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a538:	e01e      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a53e:	3308      	adds	r3, #8
 800a540:	2100      	movs	r1, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fb2a 	bl	800bb9c <RCCEx_PLL2_Config>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a54e:	e013      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a554:	3328      	adds	r3, #40	@ 0x28
 800a556:	2100      	movs	r1, #0
 800a558:	4618      	mov	r0, r3
 800a55a:	f001 fbd1 	bl	800bd00 <RCCEx_PLL3_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a564:	e008      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a56c:	e004      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a580:	4b05      	ldr	r3, [pc, #20]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a584:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58e:	4a02      	ldr	r2, [pc, #8]	@ (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a590:	430b      	orrs	r3, r1
 800a592:	6513      	str	r3, [r2, #80]	@ 0x50
 800a594:	e006      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a596:	bf00      	nop
 800a598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a5b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	d03a      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5ca:	2b30      	cmp	r3, #48	@ 0x30
 800a5cc:	d01f      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a5ce:	2b30      	cmp	r3, #48	@ 0x30
 800a5d0:	d819      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d00c      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d815      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d019      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a5de:	2b10      	cmp	r3, #16
 800a5e0:	d111      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5e2:	4bae      	ldr	r3, [pc, #696]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	4aad      	ldr	r2, [pc, #692]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5ee:	e011      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	2102      	movs	r1, #2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 facf 	bl	800bb9c <RCCEx_PLL2_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a604:	e006      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a612:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a61c:	4b9f      	ldr	r3, [pc, #636]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a61e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a620:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a62a:	4a9c      	ldr	r2, [pc, #624]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a62c:	430b      	orrs	r3, r1
 800a62e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a630:	e003      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a632:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a636:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a63a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a646:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a64a:	2300      	movs	r3, #0
 800a64c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a650:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a654:	460b      	mov	r3, r1
 800a656:	4313      	orrs	r3, r2
 800a658:	d051      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a65e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a664:	d035      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a66a:	d82e      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a66c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a670:	d031      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a672:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a676:	d828      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a67c:	d01a      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a67e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a682:	d822      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a68c:	d007      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a68e:	e01c      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a690:	4b82      	ldr	r3, [pc, #520]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a694:	4a81      	ldr	r2, [pc, #516]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a69a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a69c:	e01c      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 fa78 	bl	800bb9c <RCCEx_PLL2_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6b2:	e011      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6b8:	3328      	adds	r3, #40	@ 0x28
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f001 fb1f 	bl	800bd00 <RCCEx_PLL3_Config>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6c8:	e006      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a6d0:	e002      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a6d2:	bf00      	nop
 800a6d4:	e000      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6e0:	4b6e      	ldr	r3, [pc, #440]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ee:	4a6b      	ldr	r2, [pc, #428]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6f4:	e003      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a70a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a70e:	2300      	movs	r3, #0
 800a710:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a714:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a718:	460b      	mov	r3, r1
 800a71a:	4313      	orrs	r3, r2
 800a71c:	d053      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a728:	d033      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a72a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a72e:	d82c      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a730:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a734:	d02f      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a736:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a73a:	d826      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a73c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a740:	d02b      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a742:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a746:	d820      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a74c:	d012      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a752:	d81a      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a754:	2b00      	cmp	r3, #0
 800a756:	d022      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a75c:	d115      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a762:	3308      	adds	r3, #8
 800a764:	2101      	movs	r1, #1
 800a766:	4618      	mov	r0, r3
 800a768:	f001 fa18 	bl	800bb9c <RCCEx_PLL2_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a772:	e015      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a778:	3328      	adds	r3, #40	@ 0x28
 800a77a:	2101      	movs	r1, #1
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fabf 	bl	800bd00 <RCCEx_PLL3_Config>
 800a782:	4603      	mov	r3, r0
 800a784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a788:	e00a      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a790:	e006      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a792:	bf00      	nop
 800a794:	e004      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a796:	bf00      	nop
 800a798:	e002      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a79a:	bf00      	nop
 800a79c:	e000      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7a8:	4b3c      	ldr	r3, [pc, #240]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7b6:	4a39      	ldr	r2, [pc, #228]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7bc:	e003      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a7d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a7dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	d060      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a7f2:	d039      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a7f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a7f8:	d832      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7fe:	d035      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a804:	d82c      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a80a:	d031      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a810:	d826      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a816:	d02d      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a81c:	d820      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a822:	d012      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a828:	d81a      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d024      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a82e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a832:	d115      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a838:	3308      	adds	r3, #8
 800a83a:	2101      	movs	r1, #1
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 f9ad 	bl	800bb9c <RCCEx_PLL2_Config>
 800a842:	4603      	mov	r3, r0
 800a844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a848:	e017      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a84e:	3328      	adds	r3, #40	@ 0x28
 800a850:	2101      	movs	r1, #1
 800a852:	4618      	mov	r0, r3
 800a854:	f001 fa54 	bl	800bd00 <RCCEx_PLL3_Config>
 800a858:	4603      	mov	r3, r0
 800a85a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a85e:	e00c      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a866:	e008      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a868:	bf00      	nop
 800a86a:	e006      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a86c:	bf00      	nop
 800a86e:	e004      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a870:	bf00      	nop
 800a872:	e002      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a874:	bf00      	nop
 800a876:	e000      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a87a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10e      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a882:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a886:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a88e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a892:	4a02      	ldr	r2, [pc, #8]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a894:	430b      	orrs	r3, r1
 800a896:	6593      	str	r3, [r2, #88]	@ 0x58
 800a898:	e006      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a8b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d037      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d2:	d00e      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d8:	d816      	bhi.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d018      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8e2:	d111      	bne.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8e4:	4bc4      	ldr	r3, [pc, #784]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e8:	4ac3      	ldr	r2, [pc, #780]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8f0:	e00f      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f6:	3308      	adds	r3, #8
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 f94e 	bl	800bb9c <RCCEx_PLL2_Config>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a906:	e004      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a90e:	e000      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a910:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a912:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a91a:	4bb7      	ldr	r3, [pc, #732]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a91c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a91e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a928:	4ab3      	ldr	r2, [pc, #716]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a92a:	430b      	orrs	r3, r1
 800a92c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a92e:	e003      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a934:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a948:	2300      	movs	r3, #0
 800a94a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a94e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a952:	460b      	mov	r3, r1
 800a954:	4313      	orrs	r3, r2
 800a956:	d039      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a95c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d81c      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a962:	a201      	add	r2, pc, #4	@ (adr r2, 800a968 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a968:	0800a9a5 	.word	0x0800a9a5
 800a96c:	0800a979 	.word	0x0800a979
 800a970:	0800a987 	.word	0x0800a987
 800a974:	0800a9a5 	.word	0x0800a9a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a978:	4b9f      	ldr	r3, [pc, #636]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97c:	4a9e      	ldr	r2, [pc, #632]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a97e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a984:	e00f      	b.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98a:	3308      	adds	r3, #8
 800a98c:	2102      	movs	r1, #2
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 f904 	bl	800bb9c <RCCEx_PLL2_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a99a:	e004      	b.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a9a2:	e000      	b.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a9a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a9ae:	4b92      	ldr	r3, [pc, #584]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b2:	f023 0103 	bic.w	r1, r3, #3
 800a9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9bc:	4a8e      	ldr	r2, [pc, #568]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9c2:	e003      	b.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a9d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	f000 8099 	beq.w	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9ee:	4b83      	ldr	r3, [pc, #524]	@ (800abfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a82      	ldr	r2, [pc, #520]	@ (800abfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9fa:	f7fa fd45 	bl	8005488 <HAL_GetTick>
 800a9fe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa02:	e00b      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa04:	f7fa fd40 	bl	8005488 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b64      	cmp	r3, #100	@ 0x64
 800aa12:	d903      	bls.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa1a:	e005      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa1c:	4b77      	ldr	r3, [pc, #476]	@ (800abfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0ed      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aa28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d173      	bne.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa30:	4b71      	ldr	r3, [pc, #452]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa3c:	4053      	eors	r3, r2
 800aa3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d015      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa46:	4b6c      	ldr	r3, [pc, #432]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa52:	4b69      	ldr	r3, [pc, #420]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa56:	4a68      	ldr	r2, [pc, #416]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa5e:	4b66      	ldr	r3, [pc, #408]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa62:	4a65      	ldr	r2, [pc, #404]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa6a:	4a63      	ldr	r2, [pc, #396]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa7e:	d118      	bne.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa80:	f7fa fd02 	bl	8005488 <HAL_GetTick>
 800aa84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa88:	e00d      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa8a:	f7fa fcfd 	bl	8005488 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d903      	bls.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800aaa4:	e005      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaa6:	4b54      	ldr	r3, [pc, #336]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0eb      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d129      	bne.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aaba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aabe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaca:	d10e      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aacc:	4b4a      	ldr	r3, [pc, #296]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aadc:	091a      	lsrs	r2, r3, #4
 800aade:	4b48      	ldr	r3, [pc, #288]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	4a45      	ldr	r2, [pc, #276]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae4:	430b      	orrs	r3, r1
 800aae6:	6113      	str	r3, [r2, #16]
 800aae8:	e005      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aaea:	4b43      	ldr	r3, [pc, #268]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	4a42      	ldr	r2, [pc, #264]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aaf4:	6113      	str	r3, [r2, #16]
 800aaf6:	4b40      	ldr	r3, [pc, #256]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aafe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab06:	4a3c      	ldr	r2, [pc, #240]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab0c:	e008      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800ab16:	e003      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f002 0301 	and.w	r3, r2, #1
 800ab2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab30:	2300      	movs	r3, #0
 800ab32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f000 8090 	beq.w	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab4a:	2b28      	cmp	r3, #40	@ 0x28
 800ab4c:	d870      	bhi.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800ac39 	.word	0x0800ac39
 800ab58:	0800ac31 	.word	0x0800ac31
 800ab5c:	0800ac31 	.word	0x0800ac31
 800ab60:	0800ac31 	.word	0x0800ac31
 800ab64:	0800ac31 	.word	0x0800ac31
 800ab68:	0800ac31 	.word	0x0800ac31
 800ab6c:	0800ac31 	.word	0x0800ac31
 800ab70:	0800ac31 	.word	0x0800ac31
 800ab74:	0800ac05 	.word	0x0800ac05
 800ab78:	0800ac31 	.word	0x0800ac31
 800ab7c:	0800ac31 	.word	0x0800ac31
 800ab80:	0800ac31 	.word	0x0800ac31
 800ab84:	0800ac31 	.word	0x0800ac31
 800ab88:	0800ac31 	.word	0x0800ac31
 800ab8c:	0800ac31 	.word	0x0800ac31
 800ab90:	0800ac31 	.word	0x0800ac31
 800ab94:	0800ac1b 	.word	0x0800ac1b
 800ab98:	0800ac31 	.word	0x0800ac31
 800ab9c:	0800ac31 	.word	0x0800ac31
 800aba0:	0800ac31 	.word	0x0800ac31
 800aba4:	0800ac31 	.word	0x0800ac31
 800aba8:	0800ac31 	.word	0x0800ac31
 800abac:	0800ac31 	.word	0x0800ac31
 800abb0:	0800ac31 	.word	0x0800ac31
 800abb4:	0800ac39 	.word	0x0800ac39
 800abb8:	0800ac31 	.word	0x0800ac31
 800abbc:	0800ac31 	.word	0x0800ac31
 800abc0:	0800ac31 	.word	0x0800ac31
 800abc4:	0800ac31 	.word	0x0800ac31
 800abc8:	0800ac31 	.word	0x0800ac31
 800abcc:	0800ac31 	.word	0x0800ac31
 800abd0:	0800ac31 	.word	0x0800ac31
 800abd4:	0800ac39 	.word	0x0800ac39
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ac31 	.word	0x0800ac31
 800abe4:	0800ac31 	.word	0x0800ac31
 800abe8:	0800ac31 	.word	0x0800ac31
 800abec:	0800ac31 	.word	0x0800ac31
 800abf0:	0800ac31 	.word	0x0800ac31
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	58024400 	.word	0x58024400
 800abfc:	58024800 	.word	0x58024800
 800ac00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac08:	3308      	adds	r3, #8
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 ffc5 	bl	800bb9c <RCCEx_PLL2_Config>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac18:	e00f      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac1e:	3328      	adds	r3, #40	@ 0x28
 800ac20:	2101      	movs	r1, #1
 800ac22:	4618      	mov	r0, r3
 800ac24:	f001 f86c 	bl	800bd00 <RCCEx_PLL3_Config>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac2e:	e004      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac36:	e000      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ac38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10b      	bne.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac42:	4bc0      	ldr	r3, [pc, #768]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ac4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac52:	4abc      	ldr	r2, [pc, #752]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac54:	430b      	orrs	r3, r1
 800ac56:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac58:	e003      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f002 0302 	and.w	r3, r2, #2
 800ac6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	d043      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac8a:	2b05      	cmp	r3, #5
 800ac8c:	d824      	bhi.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800ac8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800ace1 	.word	0x0800ace1
 800ac98:	0800acad 	.word	0x0800acad
 800ac9c:	0800acc3 	.word	0x0800acc3
 800aca0:	0800ace1 	.word	0x0800ace1
 800aca4:	0800ace1 	.word	0x0800ace1
 800aca8:	0800ace1 	.word	0x0800ace1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb0:	3308      	adds	r3, #8
 800acb2:	2101      	movs	r1, #1
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 ff71 	bl	800bb9c <RCCEx_PLL2_Config>
 800acba:	4603      	mov	r3, r0
 800acbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acc0:	e00f      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acc6:	3328      	adds	r3, #40	@ 0x28
 800acc8:	2101      	movs	r1, #1
 800acca:	4618      	mov	r0, r3
 800accc:	f001 f818 	bl	800bd00 <RCCEx_PLL3_Config>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acd6:	e004      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800acde:	e000      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800ace0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10b      	bne.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acea:	4b96      	ldr	r3, [pc, #600]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acee:	f023 0107 	bic.w	r1, r3, #7
 800acf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acfa:	4a92      	ldr	r2, [pc, #584]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad00:	e003      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	f002 0304 	and.w	r3, r2, #4
 800ad16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4313      	orrs	r3, r2
 800ad28:	d043      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ad2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d824      	bhi.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800ad36:	a201      	add	r2, pc, #4	@ (adr r2, 800ad3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad89 	.word	0x0800ad89
 800ad40:	0800ad55 	.word	0x0800ad55
 800ad44:	0800ad6b 	.word	0x0800ad6b
 800ad48:	0800ad89 	.word	0x0800ad89
 800ad4c:	0800ad89 	.word	0x0800ad89
 800ad50:	0800ad89 	.word	0x0800ad89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad58:	3308      	adds	r3, #8
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 ff1d 	bl	800bb9c <RCCEx_PLL2_Config>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad68:	e00f      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad6e:	3328      	adds	r3, #40	@ 0x28
 800ad70:	2101      	movs	r1, #1
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 ffc4 	bl	800bd00 <RCCEx_PLL3_Config>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad7e:	e004      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad86:	e000      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800ad88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10b      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad92:	4b6c      	ldr	r3, [pc, #432]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ad94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad96:	f023 0107 	bic.w	r1, r3, #7
 800ad9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ada2:	4a68      	ldr	r2, [pc, #416]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6593      	str	r3, [r2, #88]	@ 0x58
 800ada8:	e003      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	f002 0320 	and.w	r3, r2, #32
 800adbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800adc2:	2300      	movs	r3, #0
 800adc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800adcc:	460b      	mov	r3, r1
 800adce:	4313      	orrs	r3, r2
 800add0:	d055      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800add2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800adda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adde:	d033      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ade0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ade4:	d82c      	bhi.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ade6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adea:	d02f      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800adec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf0:	d826      	bhi.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adf6:	d02b      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800adf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adfc:	d820      	bhi.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae02:	d012      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae08:	d81a      	bhi.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d022      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ae0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae12:	d115      	bne.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae18:	3308      	adds	r3, #8
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 febd 	bl	800bb9c <RCCEx_PLL2_Config>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae28:	e015      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae2e:	3328      	adds	r3, #40	@ 0x28
 800ae30:	2102      	movs	r1, #2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 ff64 	bl	800bd00 <RCCEx_PLL3_Config>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae3e:	e00a      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae46:	e006      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae48:	bf00      	nop
 800ae4a:	e004      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae4c:	bf00      	nop
 800ae4e:	e002      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae5e:	4b39      	ldr	r3, [pc, #228]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae6e:	4a35      	ldr	r2, [pc, #212]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae74:	e003      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ae8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	d058      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ae9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aea6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aeaa:	d033      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aeac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aeb0:	d82c      	bhi.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aeb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeb6:	d02f      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aeb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aebc:	d826      	bhi.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aec2:	d02b      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aec8:	d820      	bhi.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aeca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aece:	d012      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800aed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aed4:	d81a      	bhi.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d022      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800aeda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aede:	d115      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee4:	3308      	adds	r3, #8
 800aee6:	2100      	movs	r1, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fe57 	bl	800bb9c <RCCEx_PLL2_Config>
 800aeee:	4603      	mov	r3, r0
 800aef0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aef4:	e015      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aefa:	3328      	adds	r3, #40	@ 0x28
 800aefc:	2102      	movs	r1, #2
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fefe 	bl	800bd00 <RCCEx_PLL3_Config>
 800af04:	4603      	mov	r3, r0
 800af06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af0a:	e00a      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af12:	e006      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af14:	bf00      	nop
 800af16:	e004      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af18:	bf00      	nop
 800af1a:	e002      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10e      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af2a:	4b06      	ldr	r3, [pc, #24]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800af32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af3a:	4a02      	ldr	r2, [pc, #8]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af3c:	430b      	orrs	r3, r1
 800af3e:	6593      	str	r3, [r2, #88]	@ 0x58
 800af40:	e006      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af6a:	460b      	mov	r3, r1
 800af6c:	4313      	orrs	r3, r2
 800af6e:	d055      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800af78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af7c:	d033      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800af7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af82:	d82c      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af88:	d02f      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800af8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af8e:	d826      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af94:	d02b      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800af96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af9a:	d820      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afa0:	d012      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800afa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afa6:	d81a      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d022      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800afac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afb0:	d115      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb6:	3308      	adds	r3, #8
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fdee 	bl	800bb9c <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afc6:	e015      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afcc:	3328      	adds	r3, #40	@ 0x28
 800afce:	2102      	movs	r1, #2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fe95 	bl	800bd00 <RCCEx_PLL3_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afdc:	e00a      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afe4:	e006      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800affc:	4ba1      	ldr	r3, [pc, #644]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800affe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b000:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b008:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b00c:	4a9d      	ldr	r2, [pc, #628]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b00e:	430b      	orrs	r3, r1
 800b010:	6593      	str	r3, [r2, #88]	@ 0x58
 800b012:	e003      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b01c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f002 0308 	and.w	r3, r2, #8
 800b028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b036:	460b      	mov	r3, r1
 800b038:	4313      	orrs	r3, r2
 800b03a:	d01e      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b048:	d10c      	bne.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04e:	3328      	adds	r3, #40	@ 0x28
 800b050:	2102      	movs	r1, #2
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fe54 	bl	800bd00 <RCCEx_PLL3_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b064:	4b87      	ldr	r3, [pc, #540]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b068:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b06c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b074:	4a83      	ldr	r2, [pc, #524]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b076:	430b      	orrs	r3, r1
 800b078:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f002 0310 	and.w	r3, r2, #16
 800b086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b08a:	2300      	movs	r3, #0
 800b08c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b090:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b094:	460b      	mov	r3, r1
 800b096:	4313      	orrs	r3, r2
 800b098:	d01e      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b0a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0a6:	d10c      	bne.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ac:	3328      	adds	r3, #40	@ 0x28
 800b0ae:	2102      	movs	r1, #2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fe25 	bl	800bd00 <RCCEx_PLL3_Config>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0c2:	4b70      	ldr	r3, [pc, #448]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b0d2:	4a6c      	ldr	r2, [pc, #432]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b0e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	d03e      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b0f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b104:	d022      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b10a:	d81b      	bhi.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d003      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b114:	d00b      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b116:	e015      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b11c:	3308      	adds	r3, #8
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fd3b 	bl	800bb9c <RCCEx_PLL2_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b12c:	e00f      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b132:	3328      	adds	r3, #40	@ 0x28
 800b134:	2102      	movs	r1, #2
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fde2 	bl	800bd00 <RCCEx_PLL3_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b14a:	e000      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10b      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b156:	4b4b      	ldr	r3, [pc, #300]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b15a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b15e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b166:	4a47      	ldr	r2, [pc, #284]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b168:	430b      	orrs	r3, r1
 800b16a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b16c:	e003      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b172:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b182:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b184:	2300      	movs	r3, #0
 800b186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b188:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b18c:	460b      	mov	r3, r1
 800b18e:	4313      	orrs	r3, r2
 800b190:	d03b      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b19e:	d01f      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b1a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1a4:	d818      	bhi.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b1a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1aa:	d003      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b1ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1b0:	d007      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b1b2:	e011      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b4:	4b33      	ldr	r3, [pc, #204]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	4a32      	ldr	r2, [pc, #200]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1c0:	e00f      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c6:	3328      	adds	r3, #40	@ 0x28
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fd98 	bl	800bd00 <RCCEx_PLL3_Config>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1d6:	e004      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1de:	e000      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1ea:	4b26      	ldr	r3, [pc, #152]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fa:	4a22      	ldr	r2, [pc, #136]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800b200:	e003      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b206:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b216:	673b      	str	r3, [r7, #112]	@ 0x70
 800b218:	2300      	movs	r3, #0
 800b21a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b21c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b220:	460b      	mov	r3, r1
 800b222:	4313      	orrs	r3, r2
 800b224:	d034      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b234:	d007      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b236:	e011      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b238:	4b12      	ldr	r3, [pc, #72]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23c:	4a11      	ldr	r2, [pc, #68]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b23e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b244:	e00e      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b24a:	3308      	adds	r3, #8
 800b24c:	2102      	movs	r1, #2
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fca4 	bl	800bb9c <RCCEx_PLL2_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b25a:	e003      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b262:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b264:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10d      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b26c:	4b05      	ldr	r3, [pc, #20]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b26e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b270:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b27a:	4a02      	ldr	r2, [pc, #8]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b27c:	430b      	orrs	r3, r1
 800b27e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b280:	e006      	b.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b28c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b29c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b29e:	2300      	movs	r3, #0
 800b2a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	d00c      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b0:	3328      	adds	r3, #40	@ 0x28
 800b2b2:	2102      	movs	r1, #2
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fd23 	bl	800bd00 <RCCEx_PLL3_Config>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b2d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	d038      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ee:	d018      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b2f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2f4:	d811      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b2f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2fa:	d014      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b2fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b300:	d80b      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d011      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b30a:	d106      	bne.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b30c:	4bc3      	ldr	r3, [pc, #780]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b310:	4ac2      	ldr	r2, [pc, #776]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b318:	e008      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b320:	e004      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b322:	bf00      	nop
 800b324:	e002      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b326:	bf00      	nop
 800b328:	e000      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b32a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10b      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b334:	4bb9      	ldr	r3, [pc, #740]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b338:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b344:	4ab5      	ldr	r2, [pc, #724]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b346:	430b      	orrs	r3, r1
 800b348:	6553      	str	r3, [r2, #84]	@ 0x54
 800b34a:	e003      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b360:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b362:	2300      	movs	r3, #0
 800b364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b366:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b36a:	460b      	mov	r3, r1
 800b36c:	4313      	orrs	r3, r2
 800b36e:	d009      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b370:	4baa      	ldr	r3, [pc, #680]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b374:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b37c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b37e:	4aa7      	ldr	r2, [pc, #668]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b380:	430b      	orrs	r3, r1
 800b382:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b390:	653b      	str	r3, [r7, #80]	@ 0x50
 800b392:	2300      	movs	r3, #0
 800b394:	657b      	str	r3, [r7, #84]	@ 0x54
 800b396:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b39a:	460b      	mov	r3, r1
 800b39c:	4313      	orrs	r3, r2
 800b39e:	d009      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3a0:	4b9e      	ldr	r3, [pc, #632]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3ae:	4a9b      	ldr	r2, [pc, #620]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	d009      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b3d0:	4b92      	ldr	r3, [pc, #584]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3d4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3de:	4a8f      	ldr	r2, [pc, #572]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b3f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	d00e      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b400:	4b86      	ldr	r3, [pc, #536]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	4a85      	ldr	r2, [pc, #532]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b40a:	6113      	str	r3, [r2, #16]
 800b40c:	4b83      	ldr	r3, [pc, #524]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b40e:	6919      	ldr	r1, [r3, #16]
 800b410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b418:	4a80      	ldr	r2, [pc, #512]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b41a:	430b      	orrs	r3, r1
 800b41c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b42a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b42c:	2300      	movs	r3, #0
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b430:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b434:	460b      	mov	r3, r1
 800b436:	4313      	orrs	r3, r2
 800b438:	d009      	beq.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b43a:	4b78      	ldr	r3, [pc, #480]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b43c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b43e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b448:	4a74      	ldr	r2, [pc, #464]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b44a:	430b      	orrs	r3, r1
 800b44c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b45c:	2300      	movs	r3, #0
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b460:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d00a      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b46a:	4b6c      	ldr	r3, [pc, #432]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b46c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b46e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b47a:	4a68      	ldr	r2, [pc, #416]	@ (800b61c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b47c:	430b      	orrs	r3, r1
 800b47e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	2100      	movs	r1, #0
 800b48a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b492:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b496:	460b      	mov	r3, r1
 800b498:	4313      	orrs	r3, r2
 800b49a:	d011      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fb79 	bl	800bb9c <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6239      	str	r1, [r7, #32]
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	d011      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fb59 	bl	800bb9c <RCCEx_PLL2_Config>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	2100      	movs	r1, #0
 800b50a:	61b9      	str	r1, [r7, #24]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b516:	460b      	mov	r3, r1
 800b518:	4313      	orrs	r3, r2
 800b51a:	d011      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b520:	3308      	adds	r3, #8
 800b522:	2102      	movs	r1, #2
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fb39 	bl	800bb9c <RCCEx_PLL2_Config>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b53c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	2100      	movs	r1, #0
 800b54a:	6139      	str	r1, [r7, #16]
 800b54c:	f003 0308 	and.w	r3, r3, #8
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b556:	460b      	mov	r3, r1
 800b558:	4313      	orrs	r3, r2
 800b55a:	d011      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b560:	3328      	adds	r3, #40	@ 0x28
 800b562:	2100      	movs	r1, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fbcb 	bl	800bd00 <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b574:	2b00      	cmp	r3, #0
 800b576:	d003      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b57c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	2100      	movs	r1, #0
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	f003 0310 	and.w	r3, r3, #16
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b596:	460b      	mov	r3, r1
 800b598:	4313      	orrs	r3, r2
 800b59a:	d011      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a0:	3328      	adds	r3, #40	@ 0x28
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fbab 	bl	800bd00 <RCCEx_PLL3_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	6039      	str	r1, [r7, #0]
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	607b      	str	r3, [r7, #4]
 800b5d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	d011      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e0:	3328      	adds	r3, #40	@ 0x28
 800b5e2:	2102      	movs	r1, #2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fb8b 	bl	800bd00 <RCCEx_PLL3_Config>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b600:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	e000      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
}
 800b60e:	4618      	mov	r0, r3
 800b610:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b614:	46bd      	mov	sp, r7
 800b616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b61a:	bf00      	nop
 800b61c:	58024400 	.word	0x58024400

0800b620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b624:	f7fe fda0 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800b628:	4602      	mov	r2, r0
 800b62a:	4b06      	ldr	r3, [pc, #24]	@ (800b644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	091b      	lsrs	r3, r3, #4
 800b630:	f003 0307 	and.w	r3, r3, #7
 800b634:	4904      	ldr	r1, [pc, #16]	@ (800b648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b636:	5ccb      	ldrb	r3, [r1, r3]
 800b638:	f003 031f 	and.w	r3, r3, #31
 800b63c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b640:	4618      	mov	r0, r3
 800b642:	bd80      	pop	{r7, pc}
 800b644:	58024400 	.word	0x58024400
 800b648:	080189d4 	.word	0x080189d4

0800b64c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b089      	sub	sp, #36	@ 0x24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b654:	4ba1      	ldr	r3, [pc, #644]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b658:	f003 0303 	and.w	r3, r3, #3
 800b65c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b65e:	4b9f      	ldr	r3, [pc, #636]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b662:	0b1b      	lsrs	r3, r3, #12
 800b664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b66a:	4b9c      	ldr	r3, [pc, #624]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66e:	091b      	lsrs	r3, r3, #4
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b676:	4b99      	ldr	r3, [pc, #612]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b67a:	08db      	lsrs	r3, r3, #3
 800b67c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	fb02 f303 	mul.w	r3, r2, r3
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 8111 	beq.w	800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	f000 8083 	beq.w	800b7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	f200 80a1 	bhi.w	800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d056      	beq.n	800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6b6:	e099      	b.n	800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6b8:	4b88      	ldr	r3, [pc, #544]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d02d      	beq.n	800b720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6c4:	4b85      	ldr	r3, [pc, #532]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	08db      	lsrs	r3, r3, #3
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	4a84      	ldr	r2, [pc, #528]	@ (800b8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	ee07 3a90 	vmov	s15, r3
 800b6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ee:	4b7b      	ldr	r3, [pc, #492]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b70e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b71e:	e087      	b.n	800b830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b732:	4b6a      	ldr	r3, [pc, #424]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b742:	ed97 6a03 	vldr	s12, [r7, #12]
 800b746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b762:	e065      	b.n	800b830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b776:	4b59      	ldr	r3, [pc, #356]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b786:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7a6:	e043      	b.n	800b830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ba:	4b48      	ldr	r3, [pc, #288]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c2:	ee07 3a90 	vmov	s15, r3
 800b7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ea:	e021      	b.n	800b830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	ee07 3a90 	vmov	s15, r3
 800b7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7fe:	4b37      	ldr	r3, [pc, #220]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b82e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b830:	4b2a      	ldr	r3, [pc, #168]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b834:	0a5b      	lsrs	r3, r3, #9
 800b836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b84a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b84e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b856:	ee17 2a90 	vmov	r2, s15
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b85e:	4b1f      	ldr	r3, [pc, #124]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b862:	0c1b      	lsrs	r3, r3, #16
 800b864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b868:	ee07 3a90 	vmov	s15, r3
 800b86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b874:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b878:	edd7 6a07 	vldr	s13, [r7, #28]
 800b87c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b884:	ee17 2a90 	vmov	r2, s15
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b88c:	4b13      	ldr	r3, [pc, #76]	@ (800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b890:	0e1b      	lsrs	r3, r3, #24
 800b892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b2:	ee17 2a90 	vmov	r2, s15
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8ba:	e008      	b.n	800b8ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	609a      	str	r2, [r3, #8]
}
 800b8ce:	bf00      	nop
 800b8d0:	3724      	adds	r7, #36	@ 0x24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	03d09000 	.word	0x03d09000
 800b8e4:	46000000 	.word	0x46000000
 800b8e8:	4c742400 	.word	0x4c742400
 800b8ec:	4a742400 	.word	0x4a742400
 800b8f0:	4bb71b00 	.word	0x4bb71b00

0800b8f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b089      	sub	sp, #36	@ 0x24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8fc:	4ba1      	ldr	r3, [pc, #644]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b900:	f003 0303 	and.w	r3, r3, #3
 800b904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b906:	4b9f      	ldr	r3, [pc, #636]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	0d1b      	lsrs	r3, r3, #20
 800b90c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b912:	4b9c      	ldr	r3, [pc, #624]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b916:	0a1b      	lsrs	r3, r3, #8
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b91e:	4b99      	ldr	r3, [pc, #612]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b922:	08db      	lsrs	r3, r3, #3
 800b924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	fb02 f303 	mul.w	r3, r2, r3
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8111 	beq.w	800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	2b02      	cmp	r3, #2
 800b946:	f000 8083 	beq.w	800ba50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	f200 80a1 	bhi.w	800ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d056      	beq.n	800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b95e:	e099      	b.n	800ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b960:	4b88      	ldr	r3, [pc, #544]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0320 	and.w	r3, r3, #32
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d02d      	beq.n	800b9c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b96c:	4b85      	ldr	r3, [pc, #532]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	08db      	lsrs	r3, r3, #3
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	4a84      	ldr	r2, [pc, #528]	@ (800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b978:	fa22 f303 	lsr.w	r3, r2, r3
 800b97c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b996:	4b7b      	ldr	r3, [pc, #492]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99e:	ee07 3a90 	vmov	s15, r3
 800b9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9c6:	e087      	b.n	800bad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	ee07 3a90 	vmov	s15, r3
 800b9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9da:	4b6a      	ldr	r3, [pc, #424]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba0a:	e065      	b.n	800bad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	ee07 3a90 	vmov	s15, r3
 800ba12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba1e:	4b59      	ldr	r3, [pc, #356]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba4e:	e043      	b.n	800bad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bb98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba62:	4b48      	ldr	r3, [pc, #288]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6a:	ee07 3a90 	vmov	s15, r3
 800ba6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba92:	e021      	b.n	800bad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800baa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baa6:	4b37      	ldr	r3, [pc, #220]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800babe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bad8:	4b2a      	ldr	r3, [pc, #168]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800badc:	0a5b      	lsrs	r3, r3, #9
 800bade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800baf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafe:	ee17 2a90 	vmov	r2, s15
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb06:	4b1f      	ldr	r3, [pc, #124]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb0a:	0c1b      	lsrs	r3, r3, #16
 800bb0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb20:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb2c:	ee17 2a90 	vmov	r2, s15
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb34:	4b13      	ldr	r3, [pc, #76]	@ (800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb38:	0e1b      	lsrs	r3, r3, #24
 800bb3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb5a:	ee17 2a90 	vmov	r2, s15
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb62:	e008      	b.n	800bb76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	609a      	str	r2, [r3, #8]
}
 800bb76:	bf00      	nop
 800bb78:	3724      	adds	r7, #36	@ 0x24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	58024400 	.word	0x58024400
 800bb88:	03d09000 	.word	0x03d09000
 800bb8c:	46000000 	.word	0x46000000
 800bb90:	4c742400 	.word	0x4c742400
 800bb94:	4a742400 	.word	0x4a742400
 800bb98:	4bb71b00 	.word	0x4bb71b00

0800bb9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbaa:	4b53      	ldr	r3, [pc, #332]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d101      	bne.n	800bbba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e099      	b.n	800bcee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bbba:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a4e      	ldr	r2, [pc, #312]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bbc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbc6:	f7f9 fc5f 	bl	8005488 <HAL_GetTick>
 800bbca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbcc:	e008      	b.n	800bbe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbce:	f7f9 fc5b 	bl	8005488 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d901      	bls.n	800bbe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e086      	b.n	800bcee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbe0:	4b45      	ldr	r3, [pc, #276]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f0      	bne.n	800bbce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbec:	4b42      	ldr	r3, [pc, #264]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	031b      	lsls	r3, r3, #12
 800bbfa:	493f      	ldr	r1, [pc, #252]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	025b      	lsls	r3, r3, #9
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	061b      	lsls	r3, r3, #24
 800bc2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc30:	4931      	ldr	r1, [pc, #196]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bc36:	4b30      	ldr	r3, [pc, #192]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	492d      	ldr	r1, [pc, #180]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc48:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4c:	f023 0220 	bic.w	r2, r3, #32
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	4928      	ldr	r1, [pc, #160]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc5a:	4b27      	ldr	r3, [pc, #156]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	4a26      	ldr	r2, [pc, #152]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc60:	f023 0310 	bic.w	r3, r3, #16
 800bc64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc66:	4b24      	ldr	r3, [pc, #144]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc6a:	4b24      	ldr	r3, [pc, #144]	@ (800bcfc <RCCEx_PLL2_Config+0x160>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	69d2      	ldr	r2, [r2, #28]
 800bc72:	00d2      	lsls	r2, r2, #3
 800bc74:	4920      	ldr	r1, [pc, #128]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	4a1e      	ldr	r2, [pc, #120]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc80:	f043 0310 	orr.w	r3, r3, #16
 800bc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	4a19      	ldr	r2, [pc, #100]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bc92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc98:	e00f      	b.n	800bcba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d106      	bne.n	800bcae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bca0:	4b15      	ldr	r3, [pc, #84]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	4a14      	ldr	r2, [pc, #80]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcac:	e005      	b.n	800bcba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bcae:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb2:	4a11      	ldr	r2, [pc, #68]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bcb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bcb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bcba:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a0e      	ldr	r2, [pc, #56]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bcc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bcc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc6:	f7f9 fbdf 	bl	8005488 <HAL_GetTick>
 800bcca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bccc:	e008      	b.n	800bce0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bcce:	f7f9 fbdb 	bl	8005488 <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d901      	bls.n	800bce0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e006      	b.n	800bcee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bce0:	4b05      	ldr	r3, [pc, #20]	@ (800bcf8 <RCCEx_PLL2_Config+0x15c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0f0      	beq.n	800bcce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	58024400 	.word	0x58024400
 800bcfc:	ffff0007 	.word	0xffff0007

0800bd00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd0e:	4b53      	ldr	r3, [pc, #332]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d101      	bne.n	800bd1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e099      	b.n	800be52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bd1e:	4b4f      	ldr	r3, [pc, #316]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a4e      	ldr	r2, [pc, #312]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd2a:	f7f9 fbad 	bl	8005488 <HAL_GetTick>
 800bd2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd30:	e008      	b.n	800bd44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd32:	f7f9 fba9 	bl	8005488 <HAL_GetTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d901      	bls.n	800bd44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e086      	b.n	800be52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd44:	4b45      	ldr	r3, [pc, #276]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1f0      	bne.n	800bd32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bd50:	4b42      	ldr	r3, [pc, #264]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	051b      	lsls	r3, r3, #20
 800bd5e:	493f      	ldr	r1, [pc, #252]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	025b      	lsls	r3, r3, #9
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	041b      	lsls	r3, r3, #16
 800bd82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	061b      	lsls	r3, r3, #24
 800bd90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd94:	4931      	ldr	r1, [pc, #196]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd9a:	4b30      	ldr	r3, [pc, #192]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	492d      	ldr	r1, [pc, #180]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bdac:	4b2b      	ldr	r3, [pc, #172]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	4928      	ldr	r1, [pc, #160]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bdbe:	4b27      	ldr	r3, [pc, #156]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc2:	4a26      	ldr	r2, [pc, #152]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bdca:	4b24      	ldr	r3, [pc, #144]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdce:	4b24      	ldr	r3, [pc, #144]	@ (800be60 <RCCEx_PLL3_Config+0x160>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	69d2      	ldr	r2, [r2, #28]
 800bdd6:	00d2      	lsls	r2, r2, #3
 800bdd8:	4920      	ldr	r1, [pc, #128]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bdde:	4b1f      	ldr	r3, [pc, #124]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde2:	4a1e      	ldr	r2, [pc, #120]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bde4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bde8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d106      	bne.n	800bdfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bdf0:	4b1a      	ldr	r3, [pc, #104]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf4:	4a19      	ldr	r2, [pc, #100]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800bdf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bdfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdfc:	e00f      	b.n	800be1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d106      	bne.n	800be12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800be04:	4b15      	ldr	r3, [pc, #84]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be08:	4a14      	ldr	r2, [pc, #80]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be10:	e005      	b.n	800be1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800be12:	4b12      	ldr	r3, [pc, #72]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be16:	4a11      	ldr	r2, [pc, #68]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800be1e:	4b0f      	ldr	r3, [pc, #60]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a0e      	ldr	r2, [pc, #56]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be2a:	f7f9 fb2d 	bl	8005488 <HAL_GetTick>
 800be2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be30:	e008      	b.n	800be44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be32:	f7f9 fb29 	bl	8005488 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d901      	bls.n	800be44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e006      	b.n	800be52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be44:	4b05      	ldr	r3, [pc, #20]	@ (800be5c <RCCEx_PLL3_Config+0x15c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0f0      	beq.n	800be32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	58024400 	.word	0x58024400
 800be60:	ffff0007 	.word	0xffff0007

0800be64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e10f      	b.n	800c096 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a87      	ldr	r2, [pc, #540]	@ (800c0a0 <HAL_SPI_Init+0x23c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d00f      	beq.n	800bea6 <HAL_SPI_Init+0x42>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a86      	ldr	r2, [pc, #536]	@ (800c0a4 <HAL_SPI_Init+0x240>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d00a      	beq.n	800bea6 <HAL_SPI_Init+0x42>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a84      	ldr	r2, [pc, #528]	@ (800c0a8 <HAL_SPI_Init+0x244>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d005      	beq.n	800bea6 <HAL_SPI_Init+0x42>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b0f      	cmp	r3, #15
 800bea0:	d901      	bls.n	800bea6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e0f7      	b.n	800c096 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f001 f968 	bl	800d17c <SPI_GetPacketSize>
 800beac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a7b      	ldr	r2, [pc, #492]	@ (800c0a0 <HAL_SPI_Init+0x23c>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00c      	beq.n	800bed2 <HAL_SPI_Init+0x6e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a79      	ldr	r2, [pc, #484]	@ (800c0a4 <HAL_SPI_Init+0x240>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d007      	beq.n	800bed2 <HAL_SPI_Init+0x6e>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a78      	ldr	r2, [pc, #480]	@ (800c0a8 <HAL_SPI_Init+0x244>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d002      	beq.n	800bed2 <HAL_SPI_Init+0x6e>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b08      	cmp	r3, #8
 800bed0:	d811      	bhi.n	800bef6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bed6:	4a72      	ldr	r2, [pc, #456]	@ (800c0a0 <HAL_SPI_Init+0x23c>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d009      	beq.n	800bef0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a70      	ldr	r2, [pc, #448]	@ (800c0a4 <HAL_SPI_Init+0x240>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d004      	beq.n	800bef0 <HAL_SPI_Init+0x8c>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a6f      	ldr	r2, [pc, #444]	@ (800c0a8 <HAL_SPI_Init+0x244>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d104      	bne.n	800befa <HAL_SPI_Init+0x96>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b10      	cmp	r3, #16
 800bef4:	d901      	bls.n	800befa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e0cd      	b.n	800c096 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7f8 f966 	bl	80041e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 0201 	bic.w	r2, r2, #1
 800bf2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bf36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf40:	d119      	bne.n	800bf76 <HAL_SPI_Init+0x112>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf4a:	d103      	bne.n	800bf54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf64:	d107      	bne.n	800bf76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00f      	beq.n	800bfa2 <HAL_SPI_Init+0x13e>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b06      	cmp	r3, #6
 800bf88:	d90b      	bls.n	800bfa2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	e007      	b.n	800bfb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bfb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69da      	ldr	r2, [r3, #28]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	ea42 0103 	orr.w	r1, r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	431a      	orrs	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	431a      	orrs	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	431a      	orrs	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c006:	431a      	orrs	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	431a      	orrs	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c012:	ea42 0103 	orr.w	r1, r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d113      	bne.n	800c052 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c03c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c050:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f022 0201 	bic.w	r2, r2, #1
 800c060:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	40013000 	.word	0x40013000
 800c0a4:	40003800 	.word	0x40003800
 800c0a8:	40003c00 	.word	0x40003c00

0800c0ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af02      	add	r7, sp, #8
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	603b      	str	r3, [r7, #0]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3320      	adds	r3, #32
 800c0c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0c4:	f7f9 f9e0 	bl	8005488 <HAL_GetTick>
 800c0c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d001      	beq.n	800c0da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e1d1      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <HAL_SPI_Transmit+0x3a>
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e1c9      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d101      	bne.n	800c0f8 <HAL_SPI_Transmit+0x4c>
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	e1c2      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2203      	movs	r2, #3
 800c104:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c150:	d108      	bne.n	800c164 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	e009      	b.n	800c178 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c176:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	4b96      	ldr	r3, [pc, #600]	@ (800c3d8 <HAL_SPI_Transmit+0x32c>)
 800c180:	4013      	ands	r3, r2
 800c182:	88f9      	ldrh	r1, [r7, #6]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	6812      	ldr	r2, [r2, #0]
 800c188:	430b      	orrs	r3, r1
 800c18a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f042 0201 	orr.w	r2, r2, #1
 800c19a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1a4:	d107      	bne.n	800c1b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	2b0f      	cmp	r3, #15
 800c1bc:	d947      	bls.n	800c24e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c1be:	e03f      	b.n	800c240 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d114      	bne.n	800c1f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1de:	1d1a      	adds	r2, r3, #4
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c1f6:	e023      	b.n	800c240 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1f8:	f7f9 f946 	bl	8005488 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d803      	bhi.n	800c210 <HAL_SPI_Transmit+0x164>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d102      	bne.n	800c216 <HAL_SPI_Transmit+0x16a>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d114      	bne.n	800c240 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fee2 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e11e      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c246:	b29b      	uxth	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1b9      	bne.n	800c1c0 <HAL_SPI_Transmit+0x114>
 800c24c:	e0f1      	b.n	800c432 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	2b07      	cmp	r3, #7
 800c254:	f240 80e6 	bls.w	800c424 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c258:	e05d      	b.n	800c316 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	f003 0302 	and.w	r3, r3, #2
 800c264:	2b02      	cmp	r3, #2
 800c266:	d132      	bne.n	800c2ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c26e:	b29b      	uxth	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	d918      	bls.n	800c2a6 <HAL_SPI_Transmit+0x1fa>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d014      	beq.n	800c2a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c28c:	1d1a      	adds	r2, r3, #4
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c298:	b29b      	uxth	r3, r3
 800c29a:	3b02      	subs	r3, #2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c2a4:	e037      	b.n	800c316 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2aa:	881a      	ldrh	r2, [r3, #0]
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2b4:	1c9a      	adds	r2, r3, #2
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c2cc:	e023      	b.n	800c316 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ce:	f7f9 f8db 	bl	8005488 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d803      	bhi.n	800c2e6 <HAL_SPI_Transmit+0x23a>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e4:	d102      	bne.n	800c2ec <HAL_SPI_Transmit+0x240>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d114      	bne.n	800c316 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 fe77 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c312:	2303      	movs	r3, #3
 800c314:	e0b3      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d19b      	bne.n	800c25a <HAL_SPI_Transmit+0x1ae>
 800c322:	e086      	b.n	800c432 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d154      	bne.n	800c3dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c338:	b29b      	uxth	r3, r3
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	d918      	bls.n	800c370 <HAL_SPI_Transmit+0x2c4>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c342:	2b40      	cmp	r3, #64	@ 0x40
 800c344:	d914      	bls.n	800c370 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6812      	ldr	r2, [r2, #0]
 800c350:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c356:	1d1a      	adds	r2, r3, #4
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c362:	b29b      	uxth	r3, r3
 800c364:	3b04      	subs	r3, #4
 800c366:	b29a      	uxth	r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c36e:	e059      	b.n	800c424 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c376:	b29b      	uxth	r3, r3
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d917      	bls.n	800c3ac <HAL_SPI_Transmit+0x300>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c380:	2b00      	cmp	r3, #0
 800c382:	d013      	beq.n	800c3ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c388:	881a      	ldrh	r2, [r3, #0]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c392:	1c9a      	adds	r2, r3, #2
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	3b02      	subs	r3, #2
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3aa:	e03b      	b.n	800c424 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3320      	adds	r3, #32
 800c3b6:	7812      	ldrb	r2, [r2, #0]
 800c3b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3be:	1c5a      	adds	r2, r3, #1
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3d6:	e025      	b.n	800c424 <HAL_SPI_Transmit+0x378>
 800c3d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3dc:	f7f9 f854 	bl	8005488 <HAL_GetTick>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d803      	bhi.n	800c3f4 <HAL_SPI_Transmit+0x348>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f2:	d102      	bne.n	800c3fa <HAL_SPI_Transmit+0x34e>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d114      	bne.n	800c424 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 fdf0 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c406:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e02c      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f47f af79 	bne.w	800c324 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2200      	movs	r2, #0
 800c43a:	2108      	movs	r1, #8
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 fe6f 	bl	800d120 <SPI_WaitOnFlagUntilTimeout>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d007      	beq.n	800c458 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c44e:	f043 0220 	orr.w	r2, r3, #32
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fdc1 	bl	800cfe0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e000      	b.n	800c47e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c47c:	2300      	movs	r3, #0
  }
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop

0800c488 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	4613      	mov	r3, r2
 800c496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c49c:	095b      	lsrs	r3, r3, #5
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	3330      	adds	r3, #48	@ 0x30
 800c4aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4ac:	f7f8 ffec 	bl	8005488 <HAL_GetTick>
 800c4b0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d001      	beq.n	800c4c2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e250      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <HAL_SPI_Receive+0x46>
 800c4c8:	88fb      	ldrh	r3, [r7, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e248      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d101      	bne.n	800c4e0 <HAL_SPI_Receive+0x58>
 800c4dc:	2302      	movs	r3, #2
 800c4de:	e241      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2204      	movs	r2, #4
 800c4ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	88fa      	ldrh	r2, [r7, #6]
 800c502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	88fa      	ldrh	r2, [r7, #6]
 800c50a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c538:	d108      	bne.n	800c54c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	e009      	b.n	800c560 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c55e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	4b95      	ldr	r3, [pc, #596]	@ (800c7bc <HAL_SPI_Receive+0x334>)
 800c568:	4013      	ands	r3, r2
 800c56a:	88f9      	ldrh	r1, [r7, #6]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	6812      	ldr	r2, [r2, #0]
 800c570:	430b      	orrs	r3, r1
 800c572:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f042 0201 	orr.w	r2, r2, #1
 800c582:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c58c:	d107      	bne.n	800c59e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c59c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	2b0f      	cmp	r3, #15
 800c5a4:	d96c      	bls.n	800c680 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c5a6:	e064      	b.n	800c672 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d114      	bne.n	800c5e8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c5c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5e6:	e044      	b.n	800c672 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	8bfa      	ldrh	r2, [r7, #30]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d919      	bls.n	800c62a <HAL_SPI_Receive+0x1a2>
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d014      	beq.n	800c62a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c608:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c60a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	3b01      	subs	r3, #1
 800c620:	b29a      	uxth	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c628:	e023      	b.n	800c672 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c62a:	f7f8 ff2d 	bl	8005488 <HAL_GetTick>
 800c62e:	4602      	mov	r2, r0
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d803      	bhi.n	800c642 <HAL_SPI_Receive+0x1ba>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c640:	d102      	bne.n	800c648 <HAL_SPI_Receive+0x1c0>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d114      	bne.n	800c672 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f000 fcc9 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c654:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e178      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d194      	bne.n	800c5a8 <HAL_SPI_Receive+0x120>
 800c67e:	e15e      	b.n	800c93e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	2b07      	cmp	r3, #7
 800c686:	f240 8153 	bls.w	800c930 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c68a:	e08f      	b.n	800c7ac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d114      	bne.n	800c6cc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6a6:	69ba      	ldr	r2, [r7, #24]
 800c6a8:	8812      	ldrh	r2, [r2, #0]
 800c6aa:	b292      	uxth	r2, r2
 800c6ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6b2:	1c9a      	adds	r2, r3, #2
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6ca:	e06f      	b.n	800c7ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	8bfa      	ldrh	r2, [r7, #30]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d924      	bls.n	800c724 <HAL_SPI_Receive+0x29c>
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d01f      	beq.n	800c724 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6e8:	69ba      	ldr	r2, [r7, #24]
 800c6ea:	8812      	ldrh	r2, [r2, #0]
 800c6ec:	b292      	uxth	r2, r2
 800c6ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6f4:	1c9a      	adds	r2, r3, #2
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	8812      	ldrh	r2, [r2, #0]
 800c702:	b292      	uxth	r2, r2
 800c704:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c70a:	1c9a      	adds	r2, r3, #2
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b02      	subs	r3, #2
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c722:	e043      	b.n	800c7ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d119      	bne.n	800c764 <HAL_SPI_Receive+0x2dc>
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c73e:	69ba      	ldr	r2, [r7, #24]
 800c740:	8812      	ldrh	r2, [r2, #0]
 800c742:	b292      	uxth	r2, r2
 800c744:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c74a:	1c9a      	adds	r2, r3, #2
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c756:	b29b      	uxth	r3, r3
 800c758:	3b01      	subs	r3, #1
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c762:	e023      	b.n	800c7ac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c764:	f7f8 fe90 	bl	8005488 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d803      	bhi.n	800c77c <HAL_SPI_Receive+0x2f4>
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77a:	d102      	bne.n	800c782 <HAL_SPI_Receive+0x2fa>
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d114      	bne.n	800c7ac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 fc2c 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c78e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e0db      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f47f af69 	bne.w	800c68c <HAL_SPI_Receive+0x204>
 800c7ba:	e0c0      	b.n	800c93e <HAL_SPI_Receive+0x4b6>
 800c7bc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d117      	bne.n	800c806 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7e2:	7812      	ldrb	r2, [r2, #0]
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c804:	e094      	b.n	800c930 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	8bfa      	ldrh	r2, [r7, #30]
 800c810:	429a      	cmp	r2, r3
 800c812:	d946      	bls.n	800c8a2 <HAL_SPI_Receive+0x41a>
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d041      	beq.n	800c8a2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c82a:	7812      	ldrb	r2, [r2, #0]
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c846:	7812      	ldrb	r2, [r2, #0]
 800c848:	b2d2      	uxtb	r2, r2
 800c84a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c862:	7812      	ldrb	r2, [r2, #0]
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c87e:	7812      	ldrb	r2, [r2, #0]
 800c880:	b2d2      	uxtb	r2, r2
 800c882:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c894:	b29b      	uxth	r3, r3
 800c896:	3b04      	subs	r3, #4
 800c898:	b29a      	uxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8a0:	e046      	b.n	800c930 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d81c      	bhi.n	800c8e8 <HAL_SPI_Receive+0x460>
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d017      	beq.n	800c8e8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	b2d2      	uxtb	r2, r2
 800c8c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8e6:	e023      	b.n	800c930 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8e8:	f7f8 fdce 	bl	8005488 <HAL_GetTick>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d803      	bhi.n	800c900 <HAL_SPI_Receive+0x478>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fe:	d102      	bne.n	800c906 <HAL_SPI_Receive+0x47e>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d114      	bne.n	800c930 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f000 fb6a 	bl	800cfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c912:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c92c:	2303      	movs	r3, #3
 800c92e:	e019      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c936:	b29b      	uxth	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f47f af41 	bne.w	800c7c0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 fb4e 	bl	800cfe0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e000      	b.n	800c964 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c962:	2300      	movs	r3, #0
  }
}
 800c964:	4618      	mov	r0, r3
 800c966:	3720      	adds	r7, #32
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08e      	sub	sp, #56	@ 0x38
 800c970:	af02      	add	r7, sp, #8
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3320      	adds	r3, #32
 800c980:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3330      	adds	r3, #48	@ 0x30
 800c988:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	b29b      	uxth	r3, r3
 800c992:	3301      	adds	r3, #1
 800c994:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c996:	f7f8 fd77 	bl	8005488 <HAL_GetTick>
 800c99a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800c99c:	887b      	ldrh	r3, [r7, #2]
 800c99e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800c9a0:	887b      	ldrh	r3, [r7, #2]
 800c9a2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d001      	beq.n	800c9b4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	e310      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <HAL_SPI_TransmitReceive+0x5a>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <HAL_SPI_TransmitReceive+0x5a>
 800c9c0:	887b      	ldrh	r3, [r7, #2]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d101      	bne.n	800c9ca <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e305      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d101      	bne.n	800c9d8 <HAL_SPI_TransmitReceive+0x6c>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e2fe      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2205      	movs	r2, #5
 800c9e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	887a      	ldrh	r2, [r7, #2]
 800c9fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	887a      	ldrh	r2, [r7, #2]
 800ca02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	887a      	ldrh	r2, [r7, #2]
 800ca10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	887a      	ldrh	r2, [r7, #2]
 800ca18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800ca36:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a70      	ldr	r2, [pc, #448]	@ (800cc00 <HAL_SPI_TransmitReceive+0x294>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d009      	beq.n	800ca56 <HAL_SPI_TransmitReceive+0xea>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a6f      	ldr	r2, [pc, #444]	@ (800cc04 <HAL_SPI_TransmitReceive+0x298>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d004      	beq.n	800ca56 <HAL_SPI_TransmitReceive+0xea>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a6d      	ldr	r2, [pc, #436]	@ (800cc08 <HAL_SPI_TransmitReceive+0x29c>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d102      	bne.n	800ca5c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ca56:	2310      	movs	r3, #16
 800ca58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca5a:	e001      	b.n	800ca60 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	4b69      	ldr	r3, [pc, #420]	@ (800cc0c <HAL_SPI_TransmitReceive+0x2a0>)
 800ca68:	4013      	ands	r3, r2
 800ca6a:	8879      	ldrh	r1, [r7, #2]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	430b      	orrs	r3, r1
 800ca72:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f042 0201 	orr.w	r2, r2, #1
 800ca82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca8c:	d107      	bne.n	800ca9e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	2b0f      	cmp	r3, #15
 800caa4:	f240 80a2 	bls.w	800cbec <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800caa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caaa:	089b      	lsrs	r3, r3, #2
 800caac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800caae:	e094      	b.n	800cbda <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	695b      	ldr	r3, [r3, #20]
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d120      	bne.n	800cb00 <HAL_SPI_TransmitReceive+0x194>
 800cabe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01d      	beq.n	800cb00 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cac4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cac6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cacc:	429a      	cmp	r2, r3
 800cace:	d217      	bcs.n	800cb00 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6812      	ldr	r2, [r2, #0]
 800cada:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800caec:	b29b      	uxth	r3, r3
 800caee:	3b01      	subs	r3, #1
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cafe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cb08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d065      	beq.n	800cbda <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d118      	bne.n	800cb4e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb2c:	1d1a      	adds	r2, r3, #4
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb4c:	e045      	b.n	800cbda <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cb50:	8bfb      	ldrh	r3, [r7, #30]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d21d      	bcs.n	800cb92 <HAL_SPI_TransmitReceive+0x226>
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d018      	beq.n	800cb92 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb6a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb70:	1d1a      	adds	r2, r3, #4
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb90:	e023      	b.n	800cbda <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb92:	f7f8 fc79 	bl	8005488 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d803      	bhi.n	800cbaa <HAL_SPI_TransmitReceive+0x23e>
 800cba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba8:	d102      	bne.n	800cbb0 <HAL_SPI_TransmitReceive+0x244>
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d114      	bne.n	800cbda <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f000 fa15 	bl	800cfe0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e1fd      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cbda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f47f af67 	bne.w	800cab0 <HAL_SPI_TransmitReceive+0x144>
 800cbe2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f47f af63 	bne.w	800cab0 <HAL_SPI_TransmitReceive+0x144>
 800cbea:	e1ce      	b.n	800cf8a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	2b07      	cmp	r3, #7
 800cbf2:	f240 81c2 	bls.w	800cf7a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf8:	085b      	lsrs	r3, r3, #1
 800cbfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cbfc:	e0c9      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x426>
 800cbfe:	bf00      	nop
 800cc00:	40013000 	.word	0x40013000
 800cc04:	40003800 	.word	0x40003800
 800cc08:	40003c00 	.word	0x40003c00
 800cc0c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	f003 0302 	and.w	r3, r3, #2
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d11f      	bne.n	800cc5e <HAL_SPI_TransmitReceive+0x2f2>
 800cc1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01c      	beq.n	800cc5e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cc24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc26:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d216      	bcs.n	800cc5e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc34:	881a      	ldrh	r2, [r3, #0]
 800cc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc38:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc3e:	1c9a      	adds	r2, r3, #2
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cc66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 8092 	beq.w	800cd92 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d118      	bne.n	800ccae <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc80:	6a3a      	ldr	r2, [r7, #32]
 800cc82:	8812      	ldrh	r2, [r2, #0]
 800cc84:	b292      	uxth	r2, r2
 800cc86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc8c:	1c9a      	adds	r2, r3, #2
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccaa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ccac:	e071      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ccb0:	8bfb      	ldrh	r3, [r7, #30]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d228      	bcs.n	800cd08 <HAL_SPI_TransmitReceive+0x39c>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d023      	beq.n	800cd08 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccc4:	6a3a      	ldr	r2, [r7, #32]
 800ccc6:	8812      	ldrh	r2, [r2, #0]
 800ccc8:	b292      	uxth	r2, r2
 800ccca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd0:	1c9a      	adds	r2, r3, #2
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccda:	6a3a      	ldr	r2, [r7, #32]
 800ccdc:	8812      	ldrh	r2, [r2, #0]
 800ccde:	b292      	uxth	r2, r2
 800cce0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce6:	1c9a      	adds	r2, r3, #2
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	3b02      	subs	r3, #2
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd04:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd06:	e044      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cd08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d11d      	bne.n	800cd4a <HAL_SPI_TransmitReceive+0x3de>
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d018      	beq.n	800cd4a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd1c:	6a3a      	ldr	r2, [r7, #32]
 800cd1e:	8812      	ldrh	r2, [r2, #0]
 800cd20:	b292      	uxth	r2, r2
 800cd22:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd28:	1c9a      	adds	r2, r3, #2
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd46:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd48:	e023      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd4a:	f7f8 fb9d 	bl	8005488 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d803      	bhi.n	800cd62 <HAL_SPI_TransmitReceive+0x3f6>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d102      	bne.n	800cd68 <HAL_SPI_TransmitReceive+0x3fc>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d114      	bne.n	800cd92 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f000 f939 	bl	800cfe0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e121      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f af3b 	bne.w	800cc10 <HAL_SPI_TransmitReceive+0x2a4>
 800cd9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f47f af37 	bne.w	800cc10 <HAL_SPI_TransmitReceive+0x2a4>
 800cda2:	e0f2      	b.n	800cf8a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	695b      	ldr	r3, [r3, #20]
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d121      	bne.n	800cdf6 <HAL_SPI_TransmitReceive+0x48a>
 800cdb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01e      	beq.n	800cdf6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cdb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cdba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d218      	bcs.n	800cdf6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3320      	adds	r3, #32
 800cdce:	7812      	ldrb	r2, [r2, #0]
 800cdd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	3b01      	subs	r3, #1
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdf4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cdfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 80ba 	beq.w	800cf7a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d11b      	bne.n	800ce4c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce20:	7812      	ldrb	r2, [r2, #0]
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce48:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce4a:	e096      	b.n	800cf7a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce4e:	8bfb      	ldrh	r3, [r7, #30]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d24a      	bcs.n	800ceea <HAL_SPI_TransmitReceive+0x57e>
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d045      	beq.n	800ceea <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce6a:	7812      	ldrb	r2, [r2, #0]
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce86:	7812      	ldrb	r2, [r2, #0]
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea2:	7812      	ldrb	r2, [r2, #0]
 800cea4:	b2d2      	uxtb	r2, r2
 800cea6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceac:	1c5a      	adds	r2, r3, #1
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cebe:	7812      	ldrb	r2, [r2, #0]
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	3b04      	subs	r3, #4
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cee6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cee8:	e047      	b.n	800cf7a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ceea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d820      	bhi.n	800cf32 <HAL_SPI_TransmitReceive+0x5c6>
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d01b      	beq.n	800cf32 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf06:	7812      	ldrb	r2, [r2, #0]
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf30:	e023      	b.n	800cf7a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf32:	f7f8 faa9 	bl	8005488 <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d803      	bhi.n	800cf4a <HAL_SPI_TransmitReceive+0x5de>
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf48:	d102      	bne.n	800cf50 <HAL_SPI_TransmitReceive+0x5e4>
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d114      	bne.n	800cf7a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f845 	bl	800cfe0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e02d      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f47f af11 	bne.w	800cda4 <HAL_SPI_TransmitReceive+0x438>
 800cf82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f47f af0d 	bne.w	800cda4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf90:	2200      	movs	r2, #0
 800cf92:	2108      	movs	r1, #8
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f000 f8c3 	bl	800d120 <SPI_WaitOnFlagUntilTimeout>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d007      	beq.n	800cfb0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfa6:	f043 0220 	orr.w	r2, r3, #32
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f815 	bl	800cfe0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e000      	b.n	800cfd6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
  }
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3730      	adds	r7, #48	@ 0x30
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop

0800cfe0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f042 0208 	orr.w	r2, r2, #8
 800cffe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f042 0210 	orr.w	r2, r2, #16
 800d00e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f022 0201 	bic.w	r2, r2, #1
 800d01e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	6919      	ldr	r1, [r3, #16]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4b3c      	ldr	r3, [pc, #240]	@ (800d11c <SPI_CloseTransfer+0x13c>)
 800d02c:	400b      	ands	r3, r1
 800d02e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689a      	ldr	r2, [r3, #8]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d03e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b04      	cmp	r3, #4
 800d04a:	d014      	beq.n	800d076 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f003 0320 	and.w	r3, r3, #32
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00f      	beq.n	800d076 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d05c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	699a      	ldr	r2, [r3, #24]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f042 0220 	orr.w	r2, r2, #32
 800d074:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d014      	beq.n	800d0ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00f      	beq.n	800d0ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d092:	f043 0204 	orr.w	r2, r3, #4
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	699a      	ldr	r2, [r3, #24]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00f      	beq.n	800d0d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0bc:	f043 0201 	orr.w	r2, r3, #1
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	699a      	ldr	r2, [r3, #24]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00f      	beq.n	800d100 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0e6:	f043 0208 	orr.w	r2, r3, #8
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699a      	ldr	r2, [r3, #24]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d0fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d110:	bf00      	nop
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	fffffc90 	.word	0xfffffc90

0800d120 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	4613      	mov	r3, r2
 800d12e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d130:	e010      	b.n	800d154 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d132:	f7f8 f9a9 	bl	8005488 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d803      	bhi.n	800d14a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d148:	d102      	bne.n	800d150 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e00f      	b.n	800d174 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	695a      	ldr	r2, [r3, #20]
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	4013      	ands	r3, r2
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	429a      	cmp	r2, r3
 800d162:	bf0c      	ite	eq
 800d164:	2301      	moveq	r3, #1
 800d166:	2300      	movne	r3, #0
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	461a      	mov	r2, r3
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d0df      	beq.n	800d132 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d188:	095b      	lsrs	r3, r3, #5
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	3301      	adds	r3, #1
 800d194:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	3307      	adds	r3, #7
 800d19a:	08db      	lsrs	r3, r3, #3
 800d19c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e049      	b.n	800d258 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7f7 fcb5 	bl	8004b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f000 fc57 	bl	800daa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	d001      	beq.n	800d278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e054      	b.n	800d322 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68da      	ldr	r2, [r3, #12]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f042 0201 	orr.w	r2, r2, #1
 800d28e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a26      	ldr	r2, [pc, #152]	@ (800d330 <HAL_TIM_Base_Start_IT+0xd0>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d022      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2a2:	d01d      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a22      	ldr	r2, [pc, #136]	@ (800d334 <HAL_TIM_Base_Start_IT+0xd4>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d018      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a21      	ldr	r2, [pc, #132]	@ (800d338 <HAL_TIM_Base_Start_IT+0xd8>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d013      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a1f      	ldr	r2, [pc, #124]	@ (800d33c <HAL_TIM_Base_Start_IT+0xdc>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d00e      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a1e      	ldr	r2, [pc, #120]	@ (800d340 <HAL_TIM_Base_Start_IT+0xe0>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d009      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1c      	ldr	r2, [pc, #112]	@ (800d344 <HAL_TIM_Base_Start_IT+0xe4>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d004      	beq.n	800d2e0 <HAL_TIM_Base_Start_IT+0x80>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a1b      	ldr	r2, [pc, #108]	@ (800d348 <HAL_TIM_Base_Start_IT+0xe8>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d115      	bne.n	800d30c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689a      	ldr	r2, [r3, #8]
 800d2e6:	4b19      	ldr	r3, [pc, #100]	@ (800d34c <HAL_TIM_Base_Start_IT+0xec>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2b06      	cmp	r3, #6
 800d2f0:	d015      	beq.n	800d31e <HAL_TIM_Base_Start_IT+0xbe>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2f8:	d011      	beq.n	800d31e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f042 0201 	orr.w	r2, r2, #1
 800d308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d30a:	e008      	b.n	800d31e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0201 	orr.w	r2, r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	e000      	b.n	800d320 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d31e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	40010000 	.word	0x40010000
 800d334:	40000400 	.word	0x40000400
 800d338:	40000800 	.word	0x40000800
 800d33c:	40000c00 	.word	0x40000c00
 800d340:	40010400 	.word	0x40010400
 800d344:	40001800 	.word	0x40001800
 800d348:	40014000 	.word	0x40014000
 800d34c:	00010007 	.word	0x00010007

0800d350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e049      	b.n	800d3f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7f7 fb98 	bl	8004aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3304      	adds	r3, #4
 800d38c:	4619      	mov	r1, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	f000 fb88 	bl	800daa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d109      	bne.n	800d424 <HAL_TIM_PWM_Start+0x24>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b01      	cmp	r3, #1
 800d41a:	bf14      	ite	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	2300      	moveq	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	e03c      	b.n	800d49e <HAL_TIM_PWM_Start+0x9e>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2b04      	cmp	r3, #4
 800d428:	d109      	bne.n	800d43e <HAL_TIM_PWM_Start+0x3e>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b01      	cmp	r3, #1
 800d434:	bf14      	ite	ne
 800d436:	2301      	movne	r3, #1
 800d438:	2300      	moveq	r3, #0
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	e02f      	b.n	800d49e <HAL_TIM_PWM_Start+0x9e>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b08      	cmp	r3, #8
 800d442:	d109      	bne.n	800d458 <HAL_TIM_PWM_Start+0x58>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	bf14      	ite	ne
 800d450:	2301      	movne	r3, #1
 800d452:	2300      	moveq	r3, #0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	e022      	b.n	800d49e <HAL_TIM_PWM_Start+0x9e>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2b0c      	cmp	r3, #12
 800d45c:	d109      	bne.n	800d472 <HAL_TIM_PWM_Start+0x72>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b01      	cmp	r3, #1
 800d468:	bf14      	ite	ne
 800d46a:	2301      	movne	r3, #1
 800d46c:	2300      	moveq	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	e015      	b.n	800d49e <HAL_TIM_PWM_Start+0x9e>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	2b10      	cmp	r3, #16
 800d476:	d109      	bne.n	800d48c <HAL_TIM_PWM_Start+0x8c>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b01      	cmp	r3, #1
 800d482:	bf14      	ite	ne
 800d484:	2301      	movne	r3, #1
 800d486:	2300      	moveq	r3, #0
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	e008      	b.n	800d49e <HAL_TIM_PWM_Start+0x9e>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b01      	cmp	r3, #1
 800d496:	bf14      	ite	ne
 800d498:	2301      	movne	r3, #1
 800d49a:	2300      	moveq	r3, #0
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e0a1      	b.n	800d5ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d104      	bne.n	800d4b6 <HAL_TIM_PWM_Start+0xb6>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d4b4:	e023      	b.n	800d4fe <HAL_TIM_PWM_Start+0xfe>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b04      	cmp	r3, #4
 800d4ba:	d104      	bne.n	800d4c6 <HAL_TIM_PWM_Start+0xc6>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4c4:	e01b      	b.n	800d4fe <HAL_TIM_PWM_Start+0xfe>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d104      	bne.n	800d4d6 <HAL_TIM_PWM_Start+0xd6>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4d4:	e013      	b.n	800d4fe <HAL_TIM_PWM_Start+0xfe>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b0c      	cmp	r3, #12
 800d4da:	d104      	bne.n	800d4e6 <HAL_TIM_PWM_Start+0xe6>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4e4:	e00b      	b.n	800d4fe <HAL_TIM_PWM_Start+0xfe>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b10      	cmp	r3, #16
 800d4ea:	d104      	bne.n	800d4f6 <HAL_TIM_PWM_Start+0xf6>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4f4:	e003      	b.n	800d4fe <HAL_TIM_PWM_Start+0xfe>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2201      	movs	r2, #1
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fe48 	bl	800e19c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a38      	ldr	r2, [pc, #224]	@ (800d5f4 <HAL_TIM_PWM_Start+0x1f4>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d013      	beq.n	800d53e <HAL_TIM_PWM_Start+0x13e>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a37      	ldr	r2, [pc, #220]	@ (800d5f8 <HAL_TIM_PWM_Start+0x1f8>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d00e      	beq.n	800d53e <HAL_TIM_PWM_Start+0x13e>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a35      	ldr	r2, [pc, #212]	@ (800d5fc <HAL_TIM_PWM_Start+0x1fc>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d009      	beq.n	800d53e <HAL_TIM_PWM_Start+0x13e>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a34      	ldr	r2, [pc, #208]	@ (800d600 <HAL_TIM_PWM_Start+0x200>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d004      	beq.n	800d53e <HAL_TIM_PWM_Start+0x13e>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a32      	ldr	r2, [pc, #200]	@ (800d604 <HAL_TIM_PWM_Start+0x204>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d101      	bne.n	800d542 <HAL_TIM_PWM_Start+0x142>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <HAL_TIM_PWM_Start+0x144>
 800d542:	2300      	movs	r3, #0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d007      	beq.n	800d558 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d556:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a25      	ldr	r2, [pc, #148]	@ (800d5f4 <HAL_TIM_PWM_Start+0x1f4>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d022      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d56a:	d01d      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a25      	ldr	r2, [pc, #148]	@ (800d608 <HAL_TIM_PWM_Start+0x208>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d018      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a24      	ldr	r2, [pc, #144]	@ (800d60c <HAL_TIM_PWM_Start+0x20c>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d013      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a22      	ldr	r2, [pc, #136]	@ (800d610 <HAL_TIM_PWM_Start+0x210>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d00e      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f8 <HAL_TIM_PWM_Start+0x1f8>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d009      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a1e      	ldr	r2, [pc, #120]	@ (800d614 <HAL_TIM_PWM_Start+0x214>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d004      	beq.n	800d5a8 <HAL_TIM_PWM_Start+0x1a8>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a16      	ldr	r2, [pc, #88]	@ (800d5fc <HAL_TIM_PWM_Start+0x1fc>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d115      	bne.n	800d5d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	689a      	ldr	r2, [r3, #8]
 800d5ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d618 <HAL_TIM_PWM_Start+0x218>)
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b06      	cmp	r3, #6
 800d5b8:	d015      	beq.n	800d5e6 <HAL_TIM_PWM_Start+0x1e6>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5c0:	d011      	beq.n	800d5e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f042 0201 	orr.w	r2, r2, #1
 800d5d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d2:	e008      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f042 0201 	orr.w	r2, r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	e000      	b.n	800d5e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	40010000 	.word	0x40010000
 800d5f8:	40010400 	.word	0x40010400
 800d5fc:	40014000 	.word	0x40014000
 800d600:	40014400 	.word	0x40014400
 800d604:	40014800 	.word	0x40014800
 800d608:	40000400 	.word	0x40000400
 800d60c:	40000800 	.word	0x40000800
 800d610:	40000c00 	.word	0x40000c00
 800d614:	40001800 	.word	0x40001800
 800d618:	00010007 	.word	0x00010007

0800d61c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f003 0302 	and.w	r3, r3, #2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d020      	beq.n	800d680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f003 0302 	and.w	r3, r3, #2
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01b      	beq.n	800d680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f06f 0202 	mvn.w	r2, #2
 800d650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f9fe 	bl	800da68 <HAL_TIM_IC_CaptureCallback>
 800d66c:	e005      	b.n	800d67a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f9f0 	bl	800da54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa01 	bl	800da7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d020      	beq.n	800d6cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b00      	cmp	r3, #0
 800d692:	d01b      	beq.n	800d6cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f06f 0204 	mvn.w	r2, #4
 800d69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f9d8 	bl	800da68 <HAL_TIM_IC_CaptureCallback>
 800d6b8:	e005      	b.n	800d6c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f9ca 	bl	800da54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f9db 	bl	800da7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f003 0308 	and.w	r3, r3, #8
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d020      	beq.n	800d718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f003 0308 	and.w	r3, r3, #8
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01b      	beq.n	800d718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f06f 0208 	mvn.w	r2, #8
 800d6e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f9b2 	bl	800da68 <HAL_TIM_IC_CaptureCallback>
 800d704:	e005      	b.n	800d712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f9a4 	bl	800da54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f9b5 	bl	800da7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	f003 0310 	and.w	r3, r3, #16
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d020      	beq.n	800d764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f003 0310 	and.w	r3, r3, #16
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d01b      	beq.n	800d764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f06f 0210 	mvn.w	r2, #16
 800d734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2208      	movs	r2, #8
 800d73a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	69db      	ldr	r3, [r3, #28]
 800d742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f98c 	bl	800da68 <HAL_TIM_IC_CaptureCallback>
 800d750:	e005      	b.n	800d75e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f97e 	bl	800da54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f98f 	bl	800da7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d007      	beq.n	800d788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f06f 0201 	mvn.w	r2, #1
 800d780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7f6 fc68 	bl	8004058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d104      	bne.n	800d79c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00c      	beq.n	800d7b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fdb1 	bl	800e318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00c      	beq.n	800d7da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d007      	beq.n	800d7da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fda9 	bl	800e32c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00c      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d007      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f949 	bl	800da90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00c      	beq.n	800d822 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f003 0320 	and.w	r3, r3, #32
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d007      	beq.n	800d822 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f06f 0220 	mvn.w	r2, #32
 800d81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fd71 	bl	800e304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d842:	2b01      	cmp	r3, #1
 800d844:	d101      	bne.n	800d84a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d846:	2302      	movs	r3, #2
 800d848:	e0ff      	b.n	800da4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b14      	cmp	r3, #20
 800d856:	f200 80f0 	bhi.w	800da3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d85a:	a201      	add	r2, pc, #4	@ (adr r2, 800d860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800da3b 	.word	0x0800da3b
 800d868:	0800da3b 	.word	0x0800da3b
 800d86c:	0800da3b 	.word	0x0800da3b
 800d870:	0800d8f5 	.word	0x0800d8f5
 800d874:	0800da3b 	.word	0x0800da3b
 800d878:	0800da3b 	.word	0x0800da3b
 800d87c:	0800da3b 	.word	0x0800da3b
 800d880:	0800d937 	.word	0x0800d937
 800d884:	0800da3b 	.word	0x0800da3b
 800d888:	0800da3b 	.word	0x0800da3b
 800d88c:	0800da3b 	.word	0x0800da3b
 800d890:	0800d977 	.word	0x0800d977
 800d894:	0800da3b 	.word	0x0800da3b
 800d898:	0800da3b 	.word	0x0800da3b
 800d89c:	0800da3b 	.word	0x0800da3b
 800d8a0:	0800d9b9 	.word	0x0800d9b9
 800d8a4:	0800da3b 	.word	0x0800da3b
 800d8a8:	0800da3b 	.word	0x0800da3b
 800d8ac:	0800da3b 	.word	0x0800da3b
 800d8b0:	0800d9f9 	.word	0x0800d9f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68b9      	ldr	r1, [r7, #8]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f998 	bl	800dbf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	699a      	ldr	r2, [r3, #24]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f042 0208 	orr.w	r2, r2, #8
 800d8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	699a      	ldr	r2, [r3, #24]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f022 0204 	bic.w	r2, r2, #4
 800d8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6999      	ldr	r1, [r3, #24]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	691a      	ldr	r2, [r3, #16]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	619a      	str	r2, [r3, #24]
      break;
 800d8f2:	e0a5      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 fa08 	bl	800dd10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	699a      	ldr	r2, [r3, #24]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d90e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	699a      	ldr	r2, [r3, #24]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d91e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6999      	ldr	r1, [r3, #24]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	021a      	lsls	r2, r3, #8
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	619a      	str	r2, [r3, #24]
      break;
 800d934:	e084      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fa71 	bl	800de24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	69da      	ldr	r2, [r3, #28]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f042 0208 	orr.w	r2, r2, #8
 800d950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	69da      	ldr	r2, [r3, #28]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f022 0204 	bic.w	r2, r2, #4
 800d960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	69d9      	ldr	r1, [r3, #28]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	691a      	ldr	r2, [r3, #16]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	430a      	orrs	r2, r1
 800d972:	61da      	str	r2, [r3, #28]
      break;
 800d974:	e064      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68b9      	ldr	r1, [r7, #8]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 fad9 	bl	800df34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69da      	ldr	r2, [r3, #28]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	69da      	ldr	r2, [r3, #28]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	69d9      	ldr	r1, [r3, #28]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	021a      	lsls	r2, r3, #8
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	61da      	str	r2, [r3, #28]
      break;
 800d9b6:	e043      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68b9      	ldr	r1, [r7, #8]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 fb22 	bl	800e008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f042 0208 	orr.w	r2, r2, #8
 800d9d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0204 	bic.w	r2, r2, #4
 800d9e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	691a      	ldr	r2, [r3, #16]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	430a      	orrs	r2, r1
 800d9f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9f6:	e023      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68b9      	ldr	r1, [r7, #8]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 fb66 	bl	800e0d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	021a      	lsls	r2, r3, #8
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	430a      	orrs	r2, r1
 800da36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da38:	e002      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	75fb      	strb	r3, [r7, #23]
      break;
 800da3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da48:	7dfb      	ldrb	r3, [r7, #23]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop

0800da54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da5c:	bf00      	nop
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a46      	ldr	r2, [pc, #280]	@ (800dbd0 <TIM_Base_SetConfig+0x12c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d013      	beq.n	800dae4 <TIM_Base_SetConfig+0x40>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dac2:	d00f      	beq.n	800dae4 <TIM_Base_SetConfig+0x40>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a43      	ldr	r2, [pc, #268]	@ (800dbd4 <TIM_Base_SetConfig+0x130>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d00b      	beq.n	800dae4 <TIM_Base_SetConfig+0x40>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a42      	ldr	r2, [pc, #264]	@ (800dbd8 <TIM_Base_SetConfig+0x134>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d007      	beq.n	800dae4 <TIM_Base_SetConfig+0x40>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a41      	ldr	r2, [pc, #260]	@ (800dbdc <TIM_Base_SetConfig+0x138>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_Base_SetConfig+0x40>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a40      	ldr	r2, [pc, #256]	@ (800dbe0 <TIM_Base_SetConfig+0x13c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d108      	bne.n	800daf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a35      	ldr	r2, [pc, #212]	@ (800dbd0 <TIM_Base_SetConfig+0x12c>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d01f      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db04:	d01b      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a32      	ldr	r2, [pc, #200]	@ (800dbd4 <TIM_Base_SetConfig+0x130>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d017      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a31      	ldr	r2, [pc, #196]	@ (800dbd8 <TIM_Base_SetConfig+0x134>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d013      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a30      	ldr	r2, [pc, #192]	@ (800dbdc <TIM_Base_SetConfig+0x138>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d00f      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a2f      	ldr	r2, [pc, #188]	@ (800dbe0 <TIM_Base_SetConfig+0x13c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d00b      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a2e      	ldr	r2, [pc, #184]	@ (800dbe4 <TIM_Base_SetConfig+0x140>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d007      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a2d      	ldr	r2, [pc, #180]	@ (800dbe8 <TIM_Base_SetConfig+0x144>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d003      	beq.n	800db3e <TIM_Base_SetConfig+0x9a>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a2c      	ldr	r2, [pc, #176]	@ (800dbec <TIM_Base_SetConfig+0x148>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d108      	bne.n	800db50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	695b      	ldr	r3, [r3, #20]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	689a      	ldr	r2, [r3, #8]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a16      	ldr	r2, [pc, #88]	@ (800dbd0 <TIM_Base_SetConfig+0x12c>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d00f      	beq.n	800db9c <TIM_Base_SetConfig+0xf8>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4a18      	ldr	r2, [pc, #96]	@ (800dbe0 <TIM_Base_SetConfig+0x13c>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d00b      	beq.n	800db9c <TIM_Base_SetConfig+0xf8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a17      	ldr	r2, [pc, #92]	@ (800dbe4 <TIM_Base_SetConfig+0x140>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d007      	beq.n	800db9c <TIM_Base_SetConfig+0xf8>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a16      	ldr	r2, [pc, #88]	@ (800dbe8 <TIM_Base_SetConfig+0x144>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d003      	beq.n	800db9c <TIM_Base_SetConfig+0xf8>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a15      	ldr	r2, [pc, #84]	@ (800dbec <TIM_Base_SetConfig+0x148>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d103      	bne.n	800dba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	691a      	ldr	r2, [r3, #16]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d105      	bne.n	800dbc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	f023 0201 	bic.w	r2, r3, #1
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	611a      	str	r2, [r3, #16]
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	3714      	adds	r7, #20
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	40010000 	.word	0x40010000
 800dbd4:	40000400 	.word	0x40000400
 800dbd8:	40000800 	.word	0x40000800
 800dbdc:	40000c00 	.word	0x40000c00
 800dbe0:	40010400 	.word	0x40010400
 800dbe4:	40014000 	.word	0x40014000
 800dbe8:	40014400 	.word	0x40014400
 800dbec:	40014800 	.word	0x40014800

0800dbf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	f023 0201 	bic.w	r2, r3, #1
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4b37      	ldr	r3, [pc, #220]	@ (800dcf8 <TIM_OC1_SetConfig+0x108>)
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f023 0303 	bic.w	r3, r3, #3
 800dc26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f023 0302 	bic.w	r3, r3, #2
 800dc38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a2d      	ldr	r2, [pc, #180]	@ (800dcfc <TIM_OC1_SetConfig+0x10c>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d00f      	beq.n	800dc6c <TIM_OC1_SetConfig+0x7c>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a2c      	ldr	r2, [pc, #176]	@ (800dd00 <TIM_OC1_SetConfig+0x110>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00b      	beq.n	800dc6c <TIM_OC1_SetConfig+0x7c>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a2b      	ldr	r2, [pc, #172]	@ (800dd04 <TIM_OC1_SetConfig+0x114>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d007      	beq.n	800dc6c <TIM_OC1_SetConfig+0x7c>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a2a      	ldr	r2, [pc, #168]	@ (800dd08 <TIM_OC1_SetConfig+0x118>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d003      	beq.n	800dc6c <TIM_OC1_SetConfig+0x7c>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a29      	ldr	r2, [pc, #164]	@ (800dd0c <TIM_OC1_SetConfig+0x11c>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d10c      	bne.n	800dc86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	f023 0308 	bic.w	r3, r3, #8
 800dc72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f023 0304 	bic.w	r3, r3, #4
 800dc84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a1c      	ldr	r2, [pc, #112]	@ (800dcfc <TIM_OC1_SetConfig+0x10c>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d00f      	beq.n	800dcae <TIM_OC1_SetConfig+0xbe>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a1b      	ldr	r2, [pc, #108]	@ (800dd00 <TIM_OC1_SetConfig+0x110>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d00b      	beq.n	800dcae <TIM_OC1_SetConfig+0xbe>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a1a      	ldr	r2, [pc, #104]	@ (800dd04 <TIM_OC1_SetConfig+0x114>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d007      	beq.n	800dcae <TIM_OC1_SetConfig+0xbe>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a19      	ldr	r2, [pc, #100]	@ (800dd08 <TIM_OC1_SetConfig+0x118>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d003      	beq.n	800dcae <TIM_OC1_SetConfig+0xbe>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a18      	ldr	r2, [pc, #96]	@ (800dd0c <TIM_OC1_SetConfig+0x11c>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d111      	bne.n	800dcd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dcbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	699b      	ldr	r3, [r3, #24]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	621a      	str	r2, [r3, #32]
}
 800dcec:	bf00      	nop
 800dcee:	371c      	adds	r7, #28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	fffeff8f 	.word	0xfffeff8f
 800dcfc:	40010000 	.word	0x40010000
 800dd00:	40010400 	.word	0x40010400
 800dd04:	40014000 	.word	0x40014000
 800dd08:	40014400 	.word	0x40014400
 800dd0c:	40014800 	.word	0x40014800

0800dd10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a1b      	ldr	r3, [r3, #32]
 800dd1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	f023 0210 	bic.w	r2, r3, #16
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	4b34      	ldr	r3, [pc, #208]	@ (800de0c <TIM_OC2_SetConfig+0xfc>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f023 0320 	bic.w	r3, r3, #32
 800dd5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	011b      	lsls	r3, r3, #4
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a29      	ldr	r2, [pc, #164]	@ (800de10 <TIM_OC2_SetConfig+0x100>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <TIM_OC2_SetConfig+0x68>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a28      	ldr	r2, [pc, #160]	@ (800de14 <TIM_OC2_SetConfig+0x104>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d10d      	bne.n	800dd94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	011b      	lsls	r3, r3, #4
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a1e      	ldr	r2, [pc, #120]	@ (800de10 <TIM_OC2_SetConfig+0x100>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d00f      	beq.n	800ddbc <TIM_OC2_SetConfig+0xac>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a1d      	ldr	r2, [pc, #116]	@ (800de14 <TIM_OC2_SetConfig+0x104>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00b      	beq.n	800ddbc <TIM_OC2_SetConfig+0xac>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a1c      	ldr	r2, [pc, #112]	@ (800de18 <TIM_OC2_SetConfig+0x108>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d007      	beq.n	800ddbc <TIM_OC2_SetConfig+0xac>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a1b      	ldr	r2, [pc, #108]	@ (800de1c <TIM_OC2_SetConfig+0x10c>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d003      	beq.n	800ddbc <TIM_OC2_SetConfig+0xac>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a1a      	ldr	r2, [pc, #104]	@ (800de20 <TIM_OC2_SetConfig+0x110>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d113      	bne.n	800dde4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ddc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ddca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	621a      	str	r2, [r3, #32]
}
 800ddfe:	bf00      	nop
 800de00:	371c      	adds	r7, #28
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	feff8fff 	.word	0xfeff8fff
 800de10:	40010000 	.word	0x40010000
 800de14:	40010400 	.word	0x40010400
 800de18:	40014000 	.word	0x40014000
 800de1c:	40014400 	.word	0x40014400
 800de20:	40014800 	.word	0x40014800

0800de24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6a1b      	ldr	r3, [r3, #32]
 800de38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	69db      	ldr	r3, [r3, #28]
 800de4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	4b33      	ldr	r3, [pc, #204]	@ (800df1c <TIM_OC3_SetConfig+0xf8>)
 800de50:	4013      	ands	r3, r2
 800de52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f023 0303 	bic.w	r3, r3, #3
 800de5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	4313      	orrs	r3, r2
 800de64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	021b      	lsls	r3, r3, #8
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	4313      	orrs	r3, r2
 800de78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a28      	ldr	r2, [pc, #160]	@ (800df20 <TIM_OC3_SetConfig+0xfc>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d003      	beq.n	800de8a <TIM_OC3_SetConfig+0x66>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a27      	ldr	r2, [pc, #156]	@ (800df24 <TIM_OC3_SetConfig+0x100>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d10d      	bne.n	800dea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	021b      	lsls	r3, r3, #8
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a1d      	ldr	r2, [pc, #116]	@ (800df20 <TIM_OC3_SetConfig+0xfc>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d00f      	beq.n	800dece <TIM_OC3_SetConfig+0xaa>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a1c      	ldr	r2, [pc, #112]	@ (800df24 <TIM_OC3_SetConfig+0x100>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d00b      	beq.n	800dece <TIM_OC3_SetConfig+0xaa>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a1b      	ldr	r2, [pc, #108]	@ (800df28 <TIM_OC3_SetConfig+0x104>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d007      	beq.n	800dece <TIM_OC3_SetConfig+0xaa>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4a1a      	ldr	r2, [pc, #104]	@ (800df2c <TIM_OC3_SetConfig+0x108>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d003      	beq.n	800dece <TIM_OC3_SetConfig+0xaa>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a19      	ldr	r2, [pc, #100]	@ (800df30 <TIM_OC3_SetConfig+0x10c>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d113      	bne.n	800def6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ded4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dedc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	011b      	lsls	r3, r3, #4
 800dee4:	693a      	ldr	r2, [r7, #16]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	011b      	lsls	r3, r3, #4
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	4313      	orrs	r3, r2
 800def4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	621a      	str	r2, [r3, #32]
}
 800df10:	bf00      	nop
 800df12:	371c      	adds	r7, #28
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	fffeff8f 	.word	0xfffeff8f
 800df20:	40010000 	.word	0x40010000
 800df24:	40010400 	.word	0x40010400
 800df28:	40014000 	.word	0x40014000
 800df2c:	40014400 	.word	0x40014400
 800df30:	40014800 	.word	0x40014800

0800df34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a1b      	ldr	r3, [r3, #32]
 800df48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	4b24      	ldr	r3, [pc, #144]	@ (800dff0 <TIM_OC4_SetConfig+0xbc>)
 800df60:	4013      	ands	r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	021b      	lsls	r3, r3, #8
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	4313      	orrs	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	031b      	lsls	r3, r3, #12
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	4313      	orrs	r3, r2
 800df8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a19      	ldr	r2, [pc, #100]	@ (800dff4 <TIM_OC4_SetConfig+0xc0>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00f      	beq.n	800dfb4 <TIM_OC4_SetConfig+0x80>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a18      	ldr	r2, [pc, #96]	@ (800dff8 <TIM_OC4_SetConfig+0xc4>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d00b      	beq.n	800dfb4 <TIM_OC4_SetConfig+0x80>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a17      	ldr	r2, [pc, #92]	@ (800dffc <TIM_OC4_SetConfig+0xc8>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d007      	beq.n	800dfb4 <TIM_OC4_SetConfig+0x80>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a16      	ldr	r2, [pc, #88]	@ (800e000 <TIM_OC4_SetConfig+0xcc>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d003      	beq.n	800dfb4 <TIM_OC4_SetConfig+0x80>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a15      	ldr	r2, [pc, #84]	@ (800e004 <TIM_OC4_SetConfig+0xd0>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d109      	bne.n	800dfc8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dfba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	019b      	lsls	r3, r3, #6
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	621a      	str	r2, [r3, #32]
}
 800dfe2:	bf00      	nop
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	feff8fff 	.word	0xfeff8fff
 800dff4:	40010000 	.word	0x40010000
 800dff8:	40010400 	.word	0x40010400
 800dffc:	40014000 	.word	0x40014000
 800e000:	40014400 	.word	0x40014400
 800e004:	40014800 	.word	0x40014800

0800e008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4b21      	ldr	r3, [pc, #132]	@ (800e0b8 <TIM_OC5_SetConfig+0xb0>)
 800e034:	4013      	ands	r3, r2
 800e036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	041b      	lsls	r3, r3, #16
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	4313      	orrs	r3, r2
 800e054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a18      	ldr	r2, [pc, #96]	@ (800e0bc <TIM_OC5_SetConfig+0xb4>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d00f      	beq.n	800e07e <TIM_OC5_SetConfig+0x76>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a17      	ldr	r2, [pc, #92]	@ (800e0c0 <TIM_OC5_SetConfig+0xb8>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00b      	beq.n	800e07e <TIM_OC5_SetConfig+0x76>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a16      	ldr	r2, [pc, #88]	@ (800e0c4 <TIM_OC5_SetConfig+0xbc>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d007      	beq.n	800e07e <TIM_OC5_SetConfig+0x76>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a15      	ldr	r2, [pc, #84]	@ (800e0c8 <TIM_OC5_SetConfig+0xc0>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d003      	beq.n	800e07e <TIM_OC5_SetConfig+0x76>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a14      	ldr	r2, [pc, #80]	@ (800e0cc <TIM_OC5_SetConfig+0xc4>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d109      	bne.n	800e092 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	021b      	lsls	r3, r3, #8
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	4313      	orrs	r3, r2
 800e090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	685a      	ldr	r2, [r3, #4]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	621a      	str	r2, [r3, #32]
}
 800e0ac:	bf00      	nop
 800e0ae:	371c      	adds	r7, #28
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	fffeff8f 	.word	0xfffeff8f
 800e0bc:	40010000 	.word	0x40010000
 800e0c0:	40010400 	.word	0x40010400
 800e0c4:	40014000 	.word	0x40014000
 800e0c8:	40014400 	.word	0x40014400
 800e0cc:	40014800 	.word	0x40014800

0800e0d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	4b22      	ldr	r3, [pc, #136]	@ (800e184 <TIM_OC6_SetConfig+0xb4>)
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	021b      	lsls	r3, r3, #8
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	4313      	orrs	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	051b      	lsls	r3, r3, #20
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a19      	ldr	r2, [pc, #100]	@ (800e188 <TIM_OC6_SetConfig+0xb8>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d00f      	beq.n	800e148 <TIM_OC6_SetConfig+0x78>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a18      	ldr	r2, [pc, #96]	@ (800e18c <TIM_OC6_SetConfig+0xbc>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d00b      	beq.n	800e148 <TIM_OC6_SetConfig+0x78>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a17      	ldr	r2, [pc, #92]	@ (800e190 <TIM_OC6_SetConfig+0xc0>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d007      	beq.n	800e148 <TIM_OC6_SetConfig+0x78>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a16      	ldr	r2, [pc, #88]	@ (800e194 <TIM_OC6_SetConfig+0xc4>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d003      	beq.n	800e148 <TIM_OC6_SetConfig+0x78>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a15      	ldr	r2, [pc, #84]	@ (800e198 <TIM_OC6_SetConfig+0xc8>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d109      	bne.n	800e15c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e14e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	029b      	lsls	r3, r3, #10
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	4313      	orrs	r3, r2
 800e15a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	621a      	str	r2, [r3, #32]
}
 800e176:	bf00      	nop
 800e178:	371c      	adds	r7, #28
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	feff8fff 	.word	0xfeff8fff
 800e188:	40010000 	.word	0x40010000
 800e18c:	40010400 	.word	0x40010400
 800e190:	40014000 	.word	0x40014000
 800e194:	40014400 	.word	0x40014400
 800e198:	40014800 	.word	0x40014800

0800e19c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b087      	sub	sp, #28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f003 031f 	and.w	r3, r3, #31
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6a1a      	ldr	r2, [r3, #32]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	43db      	mvns	r3, r3
 800e1be:	401a      	ands	r2, r3
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6a1a      	ldr	r2, [r3, #32]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	f003 031f 	and.w	r3, r3, #31
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	621a      	str	r2, [r3, #32]
}
 800e1da:	bf00      	nop
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
	...

0800e1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d101      	bne.n	800e200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	e06d      	b.n	800e2dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2202      	movs	r2, #2
 800e20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a30      	ldr	r2, [pc, #192]	@ (800e2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d004      	beq.n	800e234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a2f      	ldr	r2, [pc, #188]	@ (800e2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d108      	bne.n	800e246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e23a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	4313      	orrs	r3, r2
 800e244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	4313      	orrs	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a20      	ldr	r2, [pc, #128]	@ (800e2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d022      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e272:	d01d      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a1d      	ldr	r2, [pc, #116]	@ (800e2f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d018      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a1c      	ldr	r2, [pc, #112]	@ (800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d013      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a1a      	ldr	r2, [pc, #104]	@ (800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d00e      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a15      	ldr	r2, [pc, #84]	@ (800e2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d009      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a16      	ldr	r2, [pc, #88]	@ (800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d004      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a15      	ldr	r2, [pc, #84]	@ (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d10c      	bne.n	800e2ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	40010000 	.word	0x40010000
 800e2ec:	40010400 	.word	0x40010400
 800e2f0:	40000400 	.word	0x40000400
 800e2f4:	40000800 	.word	0x40000800
 800e2f8:	40000c00 	.word	0x40000c00
 800e2fc:	40001800 	.word	0x40001800
 800e300:	40014000 	.word	0x40014000

0800e304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e334:	bf00      	nop
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	e042      	b.n	800e3d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7f6 fdef 	bl	8004f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2224      	movs	r2, #36	@ 0x24
 800e36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f022 0201 	bic.w	r2, r2, #1
 800e380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f001 fe0e 	bl	800ffac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 ff9f 	bl	800f2d4 <UART_SetConfig>
 800e396:	4603      	mov	r3, r0
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d101      	bne.n	800e3a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	e01b      	b.n	800e3d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	685a      	ldr	r2, [r3, #4]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e3ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	689a      	ldr	r2, [r3, #8]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e3be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f042 0201 	orr.w	r2, r2, #1
 800e3ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f001 fe8d 	bl	80100f0 <UART_CheckIdleState>
 800e3d6:	4603      	mov	r3, r0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08a      	sub	sp, #40	@ 0x28
 800e3e4:	af02      	add	r7, sp, #8
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	603b      	str	r3, [r7, #0]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3f6:	2b20      	cmp	r3, #32
 800e3f8:	d17b      	bne.n	800e4f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <HAL_UART_Transmit+0x26>
 800e400:	88fb      	ldrh	r3, [r7, #6]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e074      	b.n	800e4f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2221      	movs	r2, #33	@ 0x21
 800e416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e41a:	f7f7 f835 	bl	8005488 <HAL_GetTick>
 800e41e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	88fa      	ldrh	r2, [r7, #6]
 800e424:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	88fa      	ldrh	r2, [r7, #6]
 800e42c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e438:	d108      	bne.n	800e44c <HAL_UART_Transmit+0x6c>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	691b      	ldr	r3, [r3, #16]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d104      	bne.n	800e44c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	e003      	b.n	800e454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e450:	2300      	movs	r3, #0
 800e452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e454:	e030      	b.n	800e4b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2200      	movs	r2, #0
 800e45e:	2180      	movs	r1, #128	@ 0x80
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f001 feef 	bl	8010244 <UART_WaitOnFlagUntilTimeout>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2220      	movs	r2, #32
 800e470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e474:	2303      	movs	r3, #3
 800e476:	e03d      	b.n	800e4f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10b      	bne.n	800e496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e48c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	3302      	adds	r3, #2
 800e492:	61bb      	str	r3, [r7, #24]
 800e494:	e007      	b.n	800e4a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	781a      	ldrb	r2, [r3, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1c8      	bne.n	800e456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	2140      	movs	r1, #64	@ 0x40
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f001 feb8 	bl	8010244 <UART_WaitOnFlagUntilTimeout>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e006      	b.n	800e4f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2220      	movs	r2, #32
 800e4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e000      	b.n	800e4f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e4f2:	2302      	movs	r3, #2
  }
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b091      	sub	sp, #68	@ 0x44
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	4613      	mov	r3, r2
 800e508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e510:	2b20      	cmp	r3, #32
 800e512:	d178      	bne.n	800e606 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_UART_Transmit_IT+0x24>
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e071      	b.n	800e608 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	88fa      	ldrh	r2, [r7, #6]
 800e52e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	88fa      	ldrh	r2, [r7, #6]
 800e536:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2221      	movs	r2, #33	@ 0x21
 800e54c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e558:	d12a      	bne.n	800e5b0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e562:	d107      	bne.n	800e574 <HAL_UART_Transmit_IT+0x78>
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d103      	bne.n	800e574 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	4a29      	ldr	r2, [pc, #164]	@ (800e614 <HAL_UART_Transmit_IT+0x118>)
 800e570:	679a      	str	r2, [r3, #120]	@ 0x78
 800e572:	e002      	b.n	800e57a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	4a28      	ldr	r2, [pc, #160]	@ (800e618 <HAL_UART_Transmit_IT+0x11c>)
 800e578:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	3308      	adds	r3, #8
 800e580:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e584:	e853 3f00 	ldrex	r3, [r3]
 800e588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e590:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	3308      	adds	r3, #8
 800e598:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e59a:	637a      	str	r2, [r7, #52]	@ 0x34
 800e59c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5a2:	e841 2300 	strex	r3, r2, [r1]
 800e5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1e5      	bne.n	800e57a <HAL_UART_Transmit_IT+0x7e>
 800e5ae:	e028      	b.n	800e602 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5b8:	d107      	bne.n	800e5ca <HAL_UART_Transmit_IT+0xce>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	4a15      	ldr	r2, [pc, #84]	@ (800e61c <HAL_UART_Transmit_IT+0x120>)
 800e5c6:	679a      	str	r2, [r3, #120]	@ 0x78
 800e5c8:	e002      	b.n	800e5d0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4a14      	ldr	r2, [pc, #80]	@ (800e620 <HAL_UART_Transmit_IT+0x124>)
 800e5ce:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	e853 3f00 	ldrex	r3, [r3]
 800e5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ee:	623b      	str	r3, [r7, #32]
 800e5f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f2:	69f9      	ldr	r1, [r7, #28]
 800e5f4:	6a3a      	ldr	r2, [r7, #32]
 800e5f6:	e841 2300 	strex	r3, r2, [r1]
 800e5fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1e6      	bne.n	800e5d0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	e000      	b.n	800e608 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e606:	2302      	movs	r3, #2
  }
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3744      	adds	r7, #68	@ 0x44
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	08010d79 	.word	0x08010d79
 800e618:	08010c99 	.word	0x08010c99
 800e61c:	08010bd7 	.word	0x08010bd7
 800e620:	08010b1f 	.word	0x08010b1f

0800e624 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08a      	sub	sp, #40	@ 0x28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	4613      	mov	r3, r2
 800e630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e638:	2b20      	cmp	r3, #32
 800e63a:	d137      	bne.n	800e6ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d002      	beq.n	800e648 <HAL_UART_Receive_IT+0x24>
 800e642:	88fb      	ldrh	r3, [r7, #6]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	e030      	b.n	800e6ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a18      	ldr	r2, [pc, #96]	@ (800e6b8 <HAL_UART_Receive_IT+0x94>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d01f      	beq.n	800e69c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d018      	beq.n	800e69c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	e853 3f00 	ldrex	r3, [r3]
 800e676:	613b      	str	r3, [r7, #16]
   return(result);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e67e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	461a      	mov	r2, r3
 800e686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e688:	623b      	str	r3, [r7, #32]
 800e68a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68c:	69f9      	ldr	r1, [r7, #28]
 800e68e:	6a3a      	ldr	r2, [r7, #32]
 800e690:	e841 2300 	strex	r3, r2, [r1]
 800e694:	61bb      	str	r3, [r7, #24]
   return(result);
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1e6      	bne.n	800e66a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e69c:	88fb      	ldrh	r3, [r7, #6]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f001 fe3c 	bl	8010320 <UART_Start_Receive_IT>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	e000      	b.n	800e6ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e6ac:	2302      	movs	r3, #2
  }
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3728      	adds	r7, #40	@ 0x28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	58000c00 	.word	0x58000c00

0800e6bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08a      	sub	sp, #40	@ 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6d0:	2b20      	cmp	r3, #32
 800e6d2:	d137      	bne.n	800e744 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <HAL_UART_Receive_DMA+0x24>
 800e6da:	88fb      	ldrh	r3, [r7, #6]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e030      	b.n	800e746 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a18      	ldr	r2, [pc, #96]	@ (800e750 <HAL_UART_Receive_DMA+0x94>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d01f      	beq.n	800e734 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d018      	beq.n	800e734 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	e853 3f00 	ldrex	r3, [r3]
 800e70e:	613b      	str	r3, [r7, #16]
   return(result);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e716:	627b      	str	r3, [r7, #36]	@ 0x24
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e720:	623b      	str	r3, [r7, #32]
 800e722:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	69f9      	ldr	r1, [r7, #28]
 800e726:	6a3a      	ldr	r2, [r7, #32]
 800e728:	e841 2300 	strex	r3, r2, [r1]
 800e72c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1e6      	bne.n	800e702 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e734:	88fb      	ldrh	r3, [r7, #6]
 800e736:	461a      	mov	r2, r3
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f001 ff12 	bl	8010564 <UART_Start_Receive_DMA>
 800e740:	4603      	mov	r3, r0
 800e742:	e000      	b.n	800e746 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e744:	2302      	movs	r3, #2
  }
}
 800e746:	4618      	mov	r0, r3
 800e748:	3728      	adds	r7, #40	@ 0x28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	58000c00 	.word	0x58000c00

0800e754 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b090      	sub	sp, #64	@ 0x40
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e76a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e776:	2b80      	cmp	r3, #128	@ 0x80
 800e778:	d139      	bne.n	800e7ee <HAL_UART_DMAStop+0x9a>
 800e77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e77c:	2b21      	cmp	r3, #33	@ 0x21
 800e77e:	d136      	bne.n	800e7ee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	3308      	adds	r3, #8
 800e786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e788:	6a3b      	ldr	r3, [r7, #32]
 800e78a:	e853 3f00 	ldrex	r3, [r3]
 800e78e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e796:	637b      	str	r3, [r7, #52]	@ 0x34
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3308      	adds	r3, #8
 800e79e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7a8:	e841 2300 	strex	r3, r2, [r1]
 800e7ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e5      	bne.n	800e780 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d015      	beq.n	800e7e8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f7 fde1 	bl	8006388 <HAL_DMA_Abort>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00d      	beq.n	800e7e8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 fa9f 	bl	8007d14 <HAL_DMA_GetError>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b20      	cmp	r3, #32
 800e7da:	d105      	bne.n	800e7e8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2210      	movs	r2, #16
 800e7e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e7e4:	2303      	movs	r3, #3
 800e7e6:	e047      	b.n	800e878 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f001 ff61 	bl	80106b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f8:	2b40      	cmp	r3, #64	@ 0x40
 800e7fa:	d13c      	bne.n	800e876 <HAL_UART_DMAStop+0x122>
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fe:	2b22      	cmp	r3, #34	@ 0x22
 800e800:	d139      	bne.n	800e876 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3308      	adds	r3, #8
 800e808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	e853 3f00 	ldrex	r3, [r3]
 800e810:	60bb      	str	r3, [r7, #8]
   return(result);
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e818:	633b      	str	r3, [r7, #48]	@ 0x30
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	3308      	adds	r3, #8
 800e820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e822:	61ba      	str	r2, [r7, #24]
 800e824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e826:	6979      	ldr	r1, [r7, #20]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	e841 2300 	strex	r3, r2, [r1]
 800e82e:	613b      	str	r3, [r7, #16]
   return(result);
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1e5      	bne.n	800e802 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d017      	beq.n	800e870 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e846:	4618      	mov	r0, r3
 800e848:	f7f7 fd9e 	bl	8006388 <HAL_DMA_Abort>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00e      	beq.n	800e870 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f9 fa5b 	bl	8007d14 <HAL_DMA_GetError>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b20      	cmp	r3, #32
 800e862:	d105      	bne.n	800e870 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2210      	movs	r2, #16
 800e868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e86c:	2303      	movs	r3, #3
 800e86e:	e003      	b.n	800e878 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 ff5f 	bl	8010734 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3740      	adds	r7, #64	@ 0x40
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b0a2      	sub	sp, #136	@ 0x88
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e888:	2301      	movs	r3, #1
 800e88a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e896:	e853 3f00 	ldrex	r3, [r3]
 800e89a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e89c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e89e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e8a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e8b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8b2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e8b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e8b8:	e841 2300 	strex	r3, r2, [r1]
 800e8bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e8be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e4      	bne.n	800e88e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e8d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8d6:	4b85      	ldr	r3, [pc, #532]	@ (800eaec <HAL_UART_Abort_IT+0x26c>)
 800e8d8:	4013      	ands	r3, r2
 800e8da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e8e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e8e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e5      	bne.n	800e8c4 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d118      	bne.n	800e932 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e908:	e853 3f00 	ldrex	r3, [r3]
 800e90c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e910:	f023 0310 	bic.w	r3, r3, #16
 800e914:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e91e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e920:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e926:	e841 2300 	strex	r3, r2, [r1]
 800e92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1e6      	bne.n	800e900 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00f      	beq.n	800e95a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e944:	2b80      	cmp	r3, #128	@ 0x80
 800e946:	d104      	bne.n	800e952 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e94c:	4a68      	ldr	r2, [pc, #416]	@ (800eaf0 <HAL_UART_Abort_IT+0x270>)
 800e94e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e950:	e003      	b.n	800e95a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e956:	2200      	movs	r2, #0
 800e958:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e960:	2b00      	cmp	r3, #0
 800e962:	d011      	beq.n	800e988 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e96e:	2b40      	cmp	r3, #64	@ 0x40
 800e970:	d105      	bne.n	800e97e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e978:	4a5e      	ldr	r2, [pc, #376]	@ (800eaf4 <HAL_UART_Abort_IT+0x274>)
 800e97a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e97c:	e004      	b.n	800e988 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e984:	2200      	movs	r2, #0
 800e986:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e992:	2b80      	cmp	r3, #128	@ 0x80
 800e994:	d12d      	bne.n	800e9f2 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3308      	adds	r3, #8
 800e99c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a0:	e853 3f00 	ldrex	r3, [r3]
 800e9a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ac:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e9b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9be:	e841 2300 	strex	r3, r2, [r1]
 800e9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1e5      	bne.n	800e996 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00f      	beq.n	800e9f2 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7f7 fff4 	bl	80069c4 <HAL_DMA_Abort_IT>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9ea:	e002      	b.n	800e9f2 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9fc:	2b40      	cmp	r3, #64	@ 0x40
 800e9fe:	d133      	bne.n	800ea68 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	3308      	adds	r3, #8
 800ea06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	e853 3f00 	ldrex	r3, [r3]
 800ea0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea16:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea20:	61fa      	str	r2, [r7, #28]
 800ea22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea24:	69b9      	ldr	r1, [r7, #24]
 800ea26:	69fa      	ldr	r2, [r7, #28]
 800ea28:	e841 2300 	strex	r3, r2, [r1]
 800ea2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e5      	bne.n	800ea00 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d014      	beq.n	800ea68 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7f7 ffbd 	bl	80069c4 <HAL_DMA_Abort_IT>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d008      	beq.n	800ea62 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea56:	2200      	movs	r2, #0
 800ea58:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea60:	e002      	b.n	800ea68 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ea62:	2300      	movs	r3, #0
 800ea64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ea68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d138      	bne.n	800eae2 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	220f      	movs	r2, #15
 800ea9a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eaa4:	d107      	bne.n	800eab6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	699a      	ldr	r2, [r3, #24]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f042 0210 	orr.w	r2, r2, #16
 800eab4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	699a      	ldr	r2, [r3, #24]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f042 0208 	orr.w	r2, r2, #8
 800eac4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2220      	movs	r2, #32
 800eaca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2220      	movs	r2, #32
 800ead2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fbe3 	bl	800f2a8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3788      	adds	r7, #136	@ 0x88
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	ef7ffffe 	.word	0xef7ffffe
 800eaf0:	08010a13 	.word	0x08010a13
 800eaf4:	08010a9f 	.word	0x08010a9f

0800eaf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b0ba      	sub	sp, #232	@ 0xe8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	69db      	ldr	r3, [r3, #28]
 800eb06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb22:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eb26:	4013      	ands	r3, r2
 800eb28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eb2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d11b      	bne.n	800eb6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb38:	f003 0320 	and.w	r3, r3, #32
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d015      	beq.n	800eb6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb44:	f003 0320 	and.w	r3, r3, #32
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d105      	bne.n	800eb58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d009      	beq.n	800eb6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f000 8377 	beq.w	800f250 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	4798      	blx	r3
      }
      return;
 800eb6a:	e371      	b.n	800f250 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 8123 	beq.w	800edbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb7a:	4b8d      	ldr	r3, [pc, #564]	@ (800edb0 <HAL_UART_IRQHandler+0x2b8>)
 800eb7c:	4013      	ands	r3, r2
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb86:	4b8b      	ldr	r3, [pc, #556]	@ (800edb4 <HAL_UART_IRQHandler+0x2bc>)
 800eb88:	4013      	ands	r3, r2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 8116 	beq.w	800edbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb94:	f003 0301 	and.w	r3, r3, #1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d011      	beq.n	800ebc0 <HAL_UART_IRQHandler+0xc8>
 800eb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2201      	movs	r2, #1
 800ebae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb6:	f043 0201 	orr.w	r2, r3, #1
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc4:	f003 0302 	and.w	r3, r3, #2
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d011      	beq.n	800ebf0 <HAL_UART_IRQHandler+0xf8>
 800ebcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2202      	movs	r2, #2
 800ebde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe6:	f043 0204 	orr.w	r2, r3, #4
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebf4:	f003 0304 	and.w	r3, r3, #4
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d011      	beq.n	800ec20 <HAL_UART_IRQHandler+0x128>
 800ebfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec00:	f003 0301 	and.w	r3, r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00b      	beq.n	800ec20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec16:	f043 0202 	orr.w	r2, r3, #2
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec24:	f003 0308 	and.w	r3, r3, #8
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d017      	beq.n	800ec5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec30:	f003 0320 	and.w	r3, r3, #32
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ec38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec3c:	4b5c      	ldr	r3, [pc, #368]	@ (800edb0 <HAL_UART_IRQHandler+0x2b8>)
 800ec3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00b      	beq.n	800ec5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2208      	movs	r2, #8
 800ec4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec52:	f043 0208 	orr.w	r2, r3, #8
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d012      	beq.n	800ec8e <HAL_UART_IRQHandler+0x196>
 800ec68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00c      	beq.n	800ec8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec84:	f043 0220 	orr.w	r2, r3, #32
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f000 82dd 	beq.w	800f254 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec9e:	f003 0320 	and.w	r3, r3, #32
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d013      	beq.n	800ecce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d105      	bne.n	800ecbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d007      	beq.n	800ecce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ece2:	2b40      	cmp	r3, #64	@ 0x40
 800ece4:	d005      	beq.n	800ecf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ece6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ecea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d054      	beq.n	800ed9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f001 fd1e 	bl	8010734 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed02:	2b40      	cmp	r3, #64	@ 0x40
 800ed04:	d146      	bne.n	800ed94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3308      	adds	r3, #8
 800ed0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed14:	e853 3f00 	ldrex	r3, [r3]
 800ed18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ed1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ed32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ed3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed42:	e841 2300 	strex	r3, r2, [r1]
 800ed46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ed4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1d9      	bne.n	800ed06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d017      	beq.n	800ed8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed62:	4a15      	ldr	r2, [pc, #84]	@ (800edb8 <HAL_UART_IRQHandler+0x2c0>)
 800ed64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f7 fe29 	bl	80069c4 <HAL_DMA_Abort_IT>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d019      	beq.n	800edac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ed86:	4610      	mov	r0, r2
 800ed88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed8a:	e00f      	b.n	800edac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fa81 	bl	800f294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed92:	e00b      	b.n	800edac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fa7d 	bl	800f294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed9a:	e007      	b.n	800edac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fa79 	bl	800f294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800edaa:	e253      	b.n	800f254 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edac:	bf00      	nop
    return;
 800edae:	e251      	b.n	800f254 <HAL_UART_IRQHandler+0x75c>
 800edb0:	10000001 	.word	0x10000001
 800edb4:	04000120 	.word	0x04000120
 800edb8:	080109e7 	.word	0x080109e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	f040 81e7 	bne.w	800f194 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800edc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edca:	f003 0310 	and.w	r3, r3, #16
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 81e0 	beq.w	800f194 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800edd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edd8:	f003 0310 	and.w	r3, r3, #16
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 81d9 	beq.w	800f194 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2210      	movs	r2, #16
 800ede8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edf4:	2b40      	cmp	r3, #64	@ 0x40
 800edf6:	f040 8151 	bne.w	800f09c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a96      	ldr	r2, [pc, #600]	@ (800f05c <HAL_UART_IRQHandler+0x564>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d068      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a93      	ldr	r2, [pc, #588]	@ (800f060 <HAL_UART_IRQHandler+0x568>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d061      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a91      	ldr	r2, [pc, #580]	@ (800f064 <HAL_UART_IRQHandler+0x56c>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d05a      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a8e      	ldr	r2, [pc, #568]	@ (800f068 <HAL_UART_IRQHandler+0x570>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d053      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a8c      	ldr	r2, [pc, #560]	@ (800f06c <HAL_UART_IRQHandler+0x574>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d04c      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a89      	ldr	r2, [pc, #548]	@ (800f070 <HAL_UART_IRQHandler+0x578>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d045      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a87      	ldr	r2, [pc, #540]	@ (800f074 <HAL_UART_IRQHandler+0x57c>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d03e      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a84      	ldr	r2, [pc, #528]	@ (800f078 <HAL_UART_IRQHandler+0x580>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d037      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a82      	ldr	r2, [pc, #520]	@ (800f07c <HAL_UART_IRQHandler+0x584>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d030      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a7f      	ldr	r2, [pc, #508]	@ (800f080 <HAL_UART_IRQHandler+0x588>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d029      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a7d      	ldr	r2, [pc, #500]	@ (800f084 <HAL_UART_IRQHandler+0x58c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d022      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a7a      	ldr	r2, [pc, #488]	@ (800f088 <HAL_UART_IRQHandler+0x590>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d01b      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a78      	ldr	r2, [pc, #480]	@ (800f08c <HAL_UART_IRQHandler+0x594>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d014      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a75      	ldr	r2, [pc, #468]	@ (800f090 <HAL_UART_IRQHandler+0x598>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d00d      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a73      	ldr	r2, [pc, #460]	@ (800f094 <HAL_UART_IRQHandler+0x59c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d006      	beq.n	800eeda <HAL_UART_IRQHandler+0x3e2>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a70      	ldr	r2, [pc, #448]	@ (800f098 <HAL_UART_IRQHandler+0x5a0>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d106      	bne.n	800eee8 <HAL_UART_IRQHandler+0x3f0>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	e005      	b.n	800eef4 <HAL_UART_IRQHandler+0x3fc>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f000 81ab 	beq.w	800f258 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	f080 81a3 	bcs.w	800f258 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef28:	f000 8087 	beq.w	800f03a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef38:	e853 3f00 	ldrex	r3, [r3]
 800ef3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ef40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef66:	e841 2300 	strex	r3, r2, [r1]
 800ef6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1da      	bne.n	800ef2c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef80:	e853 3f00 	ldrex	r3, [r3]
 800ef84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef88:	f023 0301 	bic.w	r3, r3, #1
 800ef8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3308      	adds	r3, #8
 800ef96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800efa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800efa6:	e841 2300 	strex	r3, r2, [r1]
 800efaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800efac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1e1      	bne.n	800ef76 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	3308      	adds	r3, #8
 800efb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efbc:	e853 3f00 	ldrex	r3, [r3]
 800efc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800efc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3308      	adds	r3, #8
 800efd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efde:	e841 2300 	strex	r3, r2, [r1]
 800efe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1e3      	bne.n	800efb2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2220      	movs	r2, #32
 800efee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f000:	e853 3f00 	ldrex	r3, [r3]
 800f004:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f008:	f023 0310 	bic.w	r3, r3, #16
 800f00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	461a      	mov	r2, r3
 800f016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f01a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f01c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f01e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f022:	e841 2300 	strex	r3, r2, [r1]
 800f026:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1e4      	bne.n	800eff8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f034:	4618      	mov	r0, r3
 800f036:	f7f7 f9a7 	bl	8006388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2202      	movs	r2, #2
 800f03e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	b29b      	uxth	r3, r3
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f931 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f05a:	e0fd      	b.n	800f258 <HAL_UART_IRQHandler+0x760>
 800f05c:	40020010 	.word	0x40020010
 800f060:	40020028 	.word	0x40020028
 800f064:	40020040 	.word	0x40020040
 800f068:	40020058 	.word	0x40020058
 800f06c:	40020070 	.word	0x40020070
 800f070:	40020088 	.word	0x40020088
 800f074:	400200a0 	.word	0x400200a0
 800f078:	400200b8 	.word	0x400200b8
 800f07c:	40020410 	.word	0x40020410
 800f080:	40020428 	.word	0x40020428
 800f084:	40020440 	.word	0x40020440
 800f088:	40020458 	.word	0x40020458
 800f08c:	40020470 	.word	0x40020470
 800f090:	40020488 	.word	0x40020488
 800f094:	400204a0 	.word	0x400204a0
 800f098:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 80cf 	beq.w	800f25c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f0be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 80ca 	beq.w	800f25c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d0:	e853 3f00 	ldrex	r3, [r3]
 800f0d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0f2:	e841 2300 	strex	r3, r2, [r1]
 800f0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e4      	bne.n	800f0c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3308      	adds	r3, #8
 800f104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f108:	e853 3f00 	ldrex	r3, [r3]
 800f10c:	623b      	str	r3, [r7, #32]
   return(result);
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	4b55      	ldr	r3, [pc, #340]	@ (800f268 <HAL_UART_IRQHandler+0x770>)
 800f112:	4013      	ands	r3, r2
 800f114:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3308      	adds	r3, #8
 800f11e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f122:	633a      	str	r2, [r7, #48]	@ 0x30
 800f124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f12a:	e841 2300 	strex	r3, r2, [r1]
 800f12e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1e3      	bne.n	800f0fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2220      	movs	r2, #32
 800f13a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	e853 3f00 	ldrex	r3, [r3]
 800f156:	60fb      	str	r3, [r7, #12]
   return(result);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f023 0310 	bic.w	r3, r3, #16
 800f15e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f16c:	61fb      	str	r3, [r7, #28]
 800f16e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f170:	69b9      	ldr	r1, [r7, #24]
 800f172:	69fa      	ldr	r2, [r7, #28]
 800f174:	e841 2300 	strex	r3, r2, [r1]
 800f178:	617b      	str	r3, [r7, #20]
   return(result);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1e4      	bne.n	800f14a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2202      	movs	r2, #2
 800f184:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f18a:	4619      	mov	r1, r3
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 f895 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f192:	e063      	b.n	800f25c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00e      	beq.n	800f1be <HAL_UART_IRQHandler+0x6c6>
 800f1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d008      	beq.n	800f1be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f1b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f002 fb9a 	bl	80118f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1bc:	e051      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d014      	beq.n	800f1f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f1ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d105      	bne.n	800f1e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d008      	beq.n	800f1f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d03a      	beq.n	800f260 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	4798      	blx	r3
    }
    return;
 800f1f2:	e035      	b.n	800f260 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d009      	beq.n	800f214 <HAL_UART_IRQHandler+0x71c>
 800f200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d003      	beq.n	800f214 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f001 fe28 	bl	8010e62 <UART_EndTransmit_IT>
    return;
 800f212:	e026      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d009      	beq.n	800f234 <HAL_UART_IRQHandler+0x73c>
 800f220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f224:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d003      	beq.n	800f234 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f002 fb73 	bl	8011918 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f232:	e016      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d010      	beq.n	800f262 <HAL_UART_IRQHandler+0x76a>
 800f240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f244:	2b00      	cmp	r3, #0
 800f246:	da0c      	bge.n	800f262 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f002 fb5b 	bl	8011904 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f24e:	e008      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
      return;
 800f250:	bf00      	nop
 800f252:	e006      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
    return;
 800f254:	bf00      	nop
 800f256:	e004      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
      return;
 800f258:	bf00      	nop
 800f25a:	e002      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
      return;
 800f25c:	bf00      	nop
 800f25e:	e000      	b.n	800f262 <HAL_UART_IRQHandler+0x76a>
    return;
 800f260:	bf00      	nop
  }
}
 800f262:	37e8      	adds	r7, #232	@ 0xe8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	effffffe 	.word	0xeffffffe

0800f26c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2d8:	b092      	sub	sp, #72	@ 0x48
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	689a      	ldr	r2, [r3, #8]
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	431a      	orrs	r2, r3
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	4bbe      	ldr	r3, [pc, #760]	@ (800f5fc <UART_SetConfig+0x328>)
 800f304:	4013      	ands	r3, r2
 800f306:	697a      	ldr	r2, [r7, #20]
 800f308:	6812      	ldr	r2, [r2, #0]
 800f30a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f30c:	430b      	orrs	r3, r1
 800f30e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	68da      	ldr	r2, [r3, #12]
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	430a      	orrs	r2, r1
 800f324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	699b      	ldr	r3, [r3, #24]
 800f32a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4ab3      	ldr	r2, [pc, #716]	@ (800f600 <UART_SetConfig+0x32c>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d004      	beq.n	800f340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f33c:	4313      	orrs	r3, r2
 800f33e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	689a      	ldr	r2, [r3, #8]
 800f346:	4baf      	ldr	r3, [pc, #700]	@ (800f604 <UART_SetConfig+0x330>)
 800f348:	4013      	ands	r3, r2
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f350:	430b      	orrs	r3, r1
 800f352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f35a:	f023 010f 	bic.w	r1, r3, #15
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	430a      	orrs	r2, r1
 800f368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4aa6      	ldr	r2, [pc, #664]	@ (800f608 <UART_SetConfig+0x334>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d177      	bne.n	800f464 <UART_SetConfig+0x190>
 800f374:	4ba5      	ldr	r3, [pc, #660]	@ (800f60c <UART_SetConfig+0x338>)
 800f376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f37c:	2b28      	cmp	r3, #40	@ 0x28
 800f37e:	d86d      	bhi.n	800f45c <UART_SetConfig+0x188>
 800f380:	a201      	add	r2, pc, #4	@ (adr r2, 800f388 <UART_SetConfig+0xb4>)
 800f382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f386:	bf00      	nop
 800f388:	0800f42d 	.word	0x0800f42d
 800f38c:	0800f45d 	.word	0x0800f45d
 800f390:	0800f45d 	.word	0x0800f45d
 800f394:	0800f45d 	.word	0x0800f45d
 800f398:	0800f45d 	.word	0x0800f45d
 800f39c:	0800f45d 	.word	0x0800f45d
 800f3a0:	0800f45d 	.word	0x0800f45d
 800f3a4:	0800f45d 	.word	0x0800f45d
 800f3a8:	0800f435 	.word	0x0800f435
 800f3ac:	0800f45d 	.word	0x0800f45d
 800f3b0:	0800f45d 	.word	0x0800f45d
 800f3b4:	0800f45d 	.word	0x0800f45d
 800f3b8:	0800f45d 	.word	0x0800f45d
 800f3bc:	0800f45d 	.word	0x0800f45d
 800f3c0:	0800f45d 	.word	0x0800f45d
 800f3c4:	0800f45d 	.word	0x0800f45d
 800f3c8:	0800f43d 	.word	0x0800f43d
 800f3cc:	0800f45d 	.word	0x0800f45d
 800f3d0:	0800f45d 	.word	0x0800f45d
 800f3d4:	0800f45d 	.word	0x0800f45d
 800f3d8:	0800f45d 	.word	0x0800f45d
 800f3dc:	0800f45d 	.word	0x0800f45d
 800f3e0:	0800f45d 	.word	0x0800f45d
 800f3e4:	0800f45d 	.word	0x0800f45d
 800f3e8:	0800f445 	.word	0x0800f445
 800f3ec:	0800f45d 	.word	0x0800f45d
 800f3f0:	0800f45d 	.word	0x0800f45d
 800f3f4:	0800f45d 	.word	0x0800f45d
 800f3f8:	0800f45d 	.word	0x0800f45d
 800f3fc:	0800f45d 	.word	0x0800f45d
 800f400:	0800f45d 	.word	0x0800f45d
 800f404:	0800f45d 	.word	0x0800f45d
 800f408:	0800f44d 	.word	0x0800f44d
 800f40c:	0800f45d 	.word	0x0800f45d
 800f410:	0800f45d 	.word	0x0800f45d
 800f414:	0800f45d 	.word	0x0800f45d
 800f418:	0800f45d 	.word	0x0800f45d
 800f41c:	0800f45d 	.word	0x0800f45d
 800f420:	0800f45d 	.word	0x0800f45d
 800f424:	0800f45d 	.word	0x0800f45d
 800f428:	0800f455 	.word	0x0800f455
 800f42c:	2301      	movs	r3, #1
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f432:	e326      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f434:	2304      	movs	r3, #4
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e322      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f43c:	2308      	movs	r3, #8
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e31e      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f444:	2310      	movs	r3, #16
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e31a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f44c:	2320      	movs	r3, #32
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e316      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f454:	2340      	movs	r3, #64	@ 0x40
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e312      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f45c:	2380      	movs	r3, #128	@ 0x80
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e30e      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a69      	ldr	r2, [pc, #420]	@ (800f610 <UART_SetConfig+0x33c>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d130      	bne.n	800f4d0 <UART_SetConfig+0x1fc>
 800f46e:	4b67      	ldr	r3, [pc, #412]	@ (800f60c <UART_SetConfig+0x338>)
 800f470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f472:	f003 0307 	and.w	r3, r3, #7
 800f476:	2b05      	cmp	r3, #5
 800f478:	d826      	bhi.n	800f4c8 <UART_SetConfig+0x1f4>
 800f47a:	a201      	add	r2, pc, #4	@ (adr r2, 800f480 <UART_SetConfig+0x1ac>)
 800f47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f480:	0800f499 	.word	0x0800f499
 800f484:	0800f4a1 	.word	0x0800f4a1
 800f488:	0800f4a9 	.word	0x0800f4a9
 800f48c:	0800f4b1 	.word	0x0800f4b1
 800f490:	0800f4b9 	.word	0x0800f4b9
 800f494:	0800f4c1 	.word	0x0800f4c1
 800f498:	2300      	movs	r3, #0
 800f49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49e:	e2f0      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4a0:	2304      	movs	r3, #4
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e2ec      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4a8:	2308      	movs	r3, #8
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e2e8      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4b0:	2310      	movs	r3, #16
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e2e4      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4b8:	2320      	movs	r3, #32
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e2e0      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4c0:	2340      	movs	r3, #64	@ 0x40
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e2dc      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4c8:	2380      	movs	r3, #128	@ 0x80
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e2d8      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a4f      	ldr	r2, [pc, #316]	@ (800f614 <UART_SetConfig+0x340>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d130      	bne.n	800f53c <UART_SetConfig+0x268>
 800f4da:	4b4c      	ldr	r3, [pc, #304]	@ (800f60c <UART_SetConfig+0x338>)
 800f4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4de:	f003 0307 	and.w	r3, r3, #7
 800f4e2:	2b05      	cmp	r3, #5
 800f4e4:	d826      	bhi.n	800f534 <UART_SetConfig+0x260>
 800f4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ec <UART_SetConfig+0x218>)
 800f4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ec:	0800f505 	.word	0x0800f505
 800f4f0:	0800f50d 	.word	0x0800f50d
 800f4f4:	0800f515 	.word	0x0800f515
 800f4f8:	0800f51d 	.word	0x0800f51d
 800f4fc:	0800f525 	.word	0x0800f525
 800f500:	0800f52d 	.word	0x0800f52d
 800f504:	2300      	movs	r3, #0
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e2ba      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f50c:	2304      	movs	r3, #4
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e2b6      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f514:	2308      	movs	r3, #8
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e2b2      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f51c:	2310      	movs	r3, #16
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e2ae      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f524:	2320      	movs	r3, #32
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e2aa      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f52c:	2340      	movs	r3, #64	@ 0x40
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e2a6      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f534:	2380      	movs	r3, #128	@ 0x80
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e2a2      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a35      	ldr	r2, [pc, #212]	@ (800f618 <UART_SetConfig+0x344>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d130      	bne.n	800f5a8 <UART_SetConfig+0x2d4>
 800f546:	4b31      	ldr	r3, [pc, #196]	@ (800f60c <UART_SetConfig+0x338>)
 800f548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f54a:	f003 0307 	and.w	r3, r3, #7
 800f54e:	2b05      	cmp	r3, #5
 800f550:	d826      	bhi.n	800f5a0 <UART_SetConfig+0x2cc>
 800f552:	a201      	add	r2, pc, #4	@ (adr r2, 800f558 <UART_SetConfig+0x284>)
 800f554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f558:	0800f571 	.word	0x0800f571
 800f55c:	0800f579 	.word	0x0800f579
 800f560:	0800f581 	.word	0x0800f581
 800f564:	0800f589 	.word	0x0800f589
 800f568:	0800f591 	.word	0x0800f591
 800f56c:	0800f599 	.word	0x0800f599
 800f570:	2300      	movs	r3, #0
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e284      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f578:	2304      	movs	r3, #4
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e280      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f580:	2308      	movs	r3, #8
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e27c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f588:	2310      	movs	r3, #16
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e278      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f590:	2320      	movs	r3, #32
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e274      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f598:	2340      	movs	r3, #64	@ 0x40
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59e:	e270      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5a0:	2380      	movs	r3, #128	@ 0x80
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a6:	e26c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f61c <UART_SetConfig+0x348>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d142      	bne.n	800f638 <UART_SetConfig+0x364>
 800f5b2:	4b16      	ldr	r3, [pc, #88]	@ (800f60c <UART_SetConfig+0x338>)
 800f5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5b6:	f003 0307 	and.w	r3, r3, #7
 800f5ba:	2b05      	cmp	r3, #5
 800f5bc:	d838      	bhi.n	800f630 <UART_SetConfig+0x35c>
 800f5be:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c4 <UART_SetConfig+0x2f0>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f5dd 	.word	0x0800f5dd
 800f5c8:	0800f5e5 	.word	0x0800f5e5
 800f5cc:	0800f5ed 	.word	0x0800f5ed
 800f5d0:	0800f5f5 	.word	0x0800f5f5
 800f5d4:	0800f621 	.word	0x0800f621
 800f5d8:	0800f629 	.word	0x0800f629
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e2:	e24e      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5e4:	2304      	movs	r3, #4
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ea:	e24a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f2:	e246      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fa:	e242      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f5fc:	cfff69f3 	.word	0xcfff69f3
 800f600:	58000c00 	.word	0x58000c00
 800f604:	11fff4ff 	.word	0x11fff4ff
 800f608:	40011000 	.word	0x40011000
 800f60c:	58024400 	.word	0x58024400
 800f610:	40004400 	.word	0x40004400
 800f614:	40004800 	.word	0x40004800
 800f618:	40004c00 	.word	0x40004c00
 800f61c:	40005000 	.word	0x40005000
 800f620:	2320      	movs	r3, #32
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f626:	e22c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f628:	2340      	movs	r3, #64	@ 0x40
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e228      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f630:	2380      	movs	r3, #128	@ 0x80
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e224      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4ab1      	ldr	r2, [pc, #708]	@ (800f904 <UART_SetConfig+0x630>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d176      	bne.n	800f730 <UART_SetConfig+0x45c>
 800f642:	4bb1      	ldr	r3, [pc, #708]	@ (800f908 <UART_SetConfig+0x634>)
 800f644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f64a:	2b28      	cmp	r3, #40	@ 0x28
 800f64c:	d86c      	bhi.n	800f728 <UART_SetConfig+0x454>
 800f64e:	a201      	add	r2, pc, #4	@ (adr r2, 800f654 <UART_SetConfig+0x380>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f6f9 	.word	0x0800f6f9
 800f658:	0800f729 	.word	0x0800f729
 800f65c:	0800f729 	.word	0x0800f729
 800f660:	0800f729 	.word	0x0800f729
 800f664:	0800f729 	.word	0x0800f729
 800f668:	0800f729 	.word	0x0800f729
 800f66c:	0800f729 	.word	0x0800f729
 800f670:	0800f729 	.word	0x0800f729
 800f674:	0800f701 	.word	0x0800f701
 800f678:	0800f729 	.word	0x0800f729
 800f67c:	0800f729 	.word	0x0800f729
 800f680:	0800f729 	.word	0x0800f729
 800f684:	0800f729 	.word	0x0800f729
 800f688:	0800f729 	.word	0x0800f729
 800f68c:	0800f729 	.word	0x0800f729
 800f690:	0800f729 	.word	0x0800f729
 800f694:	0800f709 	.word	0x0800f709
 800f698:	0800f729 	.word	0x0800f729
 800f69c:	0800f729 	.word	0x0800f729
 800f6a0:	0800f729 	.word	0x0800f729
 800f6a4:	0800f729 	.word	0x0800f729
 800f6a8:	0800f729 	.word	0x0800f729
 800f6ac:	0800f729 	.word	0x0800f729
 800f6b0:	0800f729 	.word	0x0800f729
 800f6b4:	0800f711 	.word	0x0800f711
 800f6b8:	0800f729 	.word	0x0800f729
 800f6bc:	0800f729 	.word	0x0800f729
 800f6c0:	0800f729 	.word	0x0800f729
 800f6c4:	0800f729 	.word	0x0800f729
 800f6c8:	0800f729 	.word	0x0800f729
 800f6cc:	0800f729 	.word	0x0800f729
 800f6d0:	0800f729 	.word	0x0800f729
 800f6d4:	0800f719 	.word	0x0800f719
 800f6d8:	0800f729 	.word	0x0800f729
 800f6dc:	0800f729 	.word	0x0800f729
 800f6e0:	0800f729 	.word	0x0800f729
 800f6e4:	0800f729 	.word	0x0800f729
 800f6e8:	0800f729 	.word	0x0800f729
 800f6ec:	0800f729 	.word	0x0800f729
 800f6f0:	0800f729 	.word	0x0800f729
 800f6f4:	0800f721 	.word	0x0800f721
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fe:	e1c0      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f700:	2304      	movs	r3, #4
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e1bc      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f708:	2308      	movs	r3, #8
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e1b8      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f710:	2310      	movs	r3, #16
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e1b4      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f718:	2320      	movs	r3, #32
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e1b0      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f720:	2340      	movs	r3, #64	@ 0x40
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e1ac      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f728:	2380      	movs	r3, #128	@ 0x80
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e1a8      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a75      	ldr	r2, [pc, #468]	@ (800f90c <UART_SetConfig+0x638>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d130      	bne.n	800f79c <UART_SetConfig+0x4c8>
 800f73a:	4b73      	ldr	r3, [pc, #460]	@ (800f908 <UART_SetConfig+0x634>)
 800f73c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	2b05      	cmp	r3, #5
 800f744:	d826      	bhi.n	800f794 <UART_SetConfig+0x4c0>
 800f746:	a201      	add	r2, pc, #4	@ (adr r2, 800f74c <UART_SetConfig+0x478>)
 800f748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74c:	0800f765 	.word	0x0800f765
 800f750:	0800f76d 	.word	0x0800f76d
 800f754:	0800f775 	.word	0x0800f775
 800f758:	0800f77d 	.word	0x0800f77d
 800f75c:	0800f785 	.word	0x0800f785
 800f760:	0800f78d 	.word	0x0800f78d
 800f764:	2300      	movs	r3, #0
 800f766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76a:	e18a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f76c:	2304      	movs	r3, #4
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e186      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f774:	2308      	movs	r3, #8
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e182      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f77c:	2310      	movs	r3, #16
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e17e      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f784:	2320      	movs	r3, #32
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e17a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f78c:	2340      	movs	r3, #64	@ 0x40
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e176      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f794:	2380      	movs	r3, #128	@ 0x80
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e172      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a5b      	ldr	r2, [pc, #364]	@ (800f910 <UART_SetConfig+0x63c>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d130      	bne.n	800f808 <UART_SetConfig+0x534>
 800f7a6:	4b58      	ldr	r3, [pc, #352]	@ (800f908 <UART_SetConfig+0x634>)
 800f7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7aa:	f003 0307 	and.w	r3, r3, #7
 800f7ae:	2b05      	cmp	r3, #5
 800f7b0:	d826      	bhi.n	800f800 <UART_SetConfig+0x52c>
 800f7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7b8 <UART_SetConfig+0x4e4>)
 800f7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b8:	0800f7d1 	.word	0x0800f7d1
 800f7bc:	0800f7d9 	.word	0x0800f7d9
 800f7c0:	0800f7e1 	.word	0x0800f7e1
 800f7c4:	0800f7e9 	.word	0x0800f7e9
 800f7c8:	0800f7f1 	.word	0x0800f7f1
 800f7cc:	0800f7f9 	.word	0x0800f7f9
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d6:	e154      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f7d8:	2304      	movs	r3, #4
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e150      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e14c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e148      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f7f0:	2320      	movs	r3, #32
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e144      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f7f8:	2340      	movs	r3, #64	@ 0x40
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e140      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f800:	2380      	movs	r3, #128	@ 0x80
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e13c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a41      	ldr	r2, [pc, #260]	@ (800f914 <UART_SetConfig+0x640>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	f040 8082 	bne.w	800f918 <UART_SetConfig+0x644>
 800f814:	4b3c      	ldr	r3, [pc, #240]	@ (800f908 <UART_SetConfig+0x634>)
 800f816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f81c:	2b28      	cmp	r3, #40	@ 0x28
 800f81e:	d86d      	bhi.n	800f8fc <UART_SetConfig+0x628>
 800f820:	a201      	add	r2, pc, #4	@ (adr r2, 800f828 <UART_SetConfig+0x554>)
 800f822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f826:	bf00      	nop
 800f828:	0800f8cd 	.word	0x0800f8cd
 800f82c:	0800f8fd 	.word	0x0800f8fd
 800f830:	0800f8fd 	.word	0x0800f8fd
 800f834:	0800f8fd 	.word	0x0800f8fd
 800f838:	0800f8fd 	.word	0x0800f8fd
 800f83c:	0800f8fd 	.word	0x0800f8fd
 800f840:	0800f8fd 	.word	0x0800f8fd
 800f844:	0800f8fd 	.word	0x0800f8fd
 800f848:	0800f8d5 	.word	0x0800f8d5
 800f84c:	0800f8fd 	.word	0x0800f8fd
 800f850:	0800f8fd 	.word	0x0800f8fd
 800f854:	0800f8fd 	.word	0x0800f8fd
 800f858:	0800f8fd 	.word	0x0800f8fd
 800f85c:	0800f8fd 	.word	0x0800f8fd
 800f860:	0800f8fd 	.word	0x0800f8fd
 800f864:	0800f8fd 	.word	0x0800f8fd
 800f868:	0800f8dd 	.word	0x0800f8dd
 800f86c:	0800f8fd 	.word	0x0800f8fd
 800f870:	0800f8fd 	.word	0x0800f8fd
 800f874:	0800f8fd 	.word	0x0800f8fd
 800f878:	0800f8fd 	.word	0x0800f8fd
 800f87c:	0800f8fd 	.word	0x0800f8fd
 800f880:	0800f8fd 	.word	0x0800f8fd
 800f884:	0800f8fd 	.word	0x0800f8fd
 800f888:	0800f8e5 	.word	0x0800f8e5
 800f88c:	0800f8fd 	.word	0x0800f8fd
 800f890:	0800f8fd 	.word	0x0800f8fd
 800f894:	0800f8fd 	.word	0x0800f8fd
 800f898:	0800f8fd 	.word	0x0800f8fd
 800f89c:	0800f8fd 	.word	0x0800f8fd
 800f8a0:	0800f8fd 	.word	0x0800f8fd
 800f8a4:	0800f8fd 	.word	0x0800f8fd
 800f8a8:	0800f8ed 	.word	0x0800f8ed
 800f8ac:	0800f8fd 	.word	0x0800f8fd
 800f8b0:	0800f8fd 	.word	0x0800f8fd
 800f8b4:	0800f8fd 	.word	0x0800f8fd
 800f8b8:	0800f8fd 	.word	0x0800f8fd
 800f8bc:	0800f8fd 	.word	0x0800f8fd
 800f8c0:	0800f8fd 	.word	0x0800f8fd
 800f8c4:	0800f8fd 	.word	0x0800f8fd
 800f8c8:	0800f8f5 	.word	0x0800f8f5
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d2:	e0d6      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8d4:	2304      	movs	r3, #4
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8da:	e0d2      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8dc:	2308      	movs	r3, #8
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e2:	e0ce      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8e4:	2310      	movs	r3, #16
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ea:	e0ca      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8ec:	2320      	movs	r3, #32
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f2:	e0c6      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8f4:	2340      	movs	r3, #64	@ 0x40
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e0c2      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f8fc:	2380      	movs	r3, #128	@ 0x80
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f902:	e0be      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f904:	40011400 	.word	0x40011400
 800f908:	58024400 	.word	0x58024400
 800f90c:	40007800 	.word	0x40007800
 800f910:	40007c00 	.word	0x40007c00
 800f914:	40011800 	.word	0x40011800
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4aad      	ldr	r2, [pc, #692]	@ (800fbd4 <UART_SetConfig+0x900>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d176      	bne.n	800fa10 <UART_SetConfig+0x73c>
 800f922:	4bad      	ldr	r3, [pc, #692]	@ (800fbd8 <UART_SetConfig+0x904>)
 800f924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f92a:	2b28      	cmp	r3, #40	@ 0x28
 800f92c:	d86c      	bhi.n	800fa08 <UART_SetConfig+0x734>
 800f92e:	a201      	add	r2, pc, #4	@ (adr r2, 800f934 <UART_SetConfig+0x660>)
 800f930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f934:	0800f9d9 	.word	0x0800f9d9
 800f938:	0800fa09 	.word	0x0800fa09
 800f93c:	0800fa09 	.word	0x0800fa09
 800f940:	0800fa09 	.word	0x0800fa09
 800f944:	0800fa09 	.word	0x0800fa09
 800f948:	0800fa09 	.word	0x0800fa09
 800f94c:	0800fa09 	.word	0x0800fa09
 800f950:	0800fa09 	.word	0x0800fa09
 800f954:	0800f9e1 	.word	0x0800f9e1
 800f958:	0800fa09 	.word	0x0800fa09
 800f95c:	0800fa09 	.word	0x0800fa09
 800f960:	0800fa09 	.word	0x0800fa09
 800f964:	0800fa09 	.word	0x0800fa09
 800f968:	0800fa09 	.word	0x0800fa09
 800f96c:	0800fa09 	.word	0x0800fa09
 800f970:	0800fa09 	.word	0x0800fa09
 800f974:	0800f9e9 	.word	0x0800f9e9
 800f978:	0800fa09 	.word	0x0800fa09
 800f97c:	0800fa09 	.word	0x0800fa09
 800f980:	0800fa09 	.word	0x0800fa09
 800f984:	0800fa09 	.word	0x0800fa09
 800f988:	0800fa09 	.word	0x0800fa09
 800f98c:	0800fa09 	.word	0x0800fa09
 800f990:	0800fa09 	.word	0x0800fa09
 800f994:	0800f9f1 	.word	0x0800f9f1
 800f998:	0800fa09 	.word	0x0800fa09
 800f99c:	0800fa09 	.word	0x0800fa09
 800f9a0:	0800fa09 	.word	0x0800fa09
 800f9a4:	0800fa09 	.word	0x0800fa09
 800f9a8:	0800fa09 	.word	0x0800fa09
 800f9ac:	0800fa09 	.word	0x0800fa09
 800f9b0:	0800fa09 	.word	0x0800fa09
 800f9b4:	0800f9f9 	.word	0x0800f9f9
 800f9b8:	0800fa09 	.word	0x0800fa09
 800f9bc:	0800fa09 	.word	0x0800fa09
 800f9c0:	0800fa09 	.word	0x0800fa09
 800f9c4:	0800fa09 	.word	0x0800fa09
 800f9c8:	0800fa09 	.word	0x0800fa09
 800f9cc:	0800fa09 	.word	0x0800fa09
 800f9d0:	0800fa09 	.word	0x0800fa09
 800f9d4:	0800fa01 	.word	0x0800fa01
 800f9d8:	2301      	movs	r3, #1
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9de:	e050      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f9e0:	2304      	movs	r3, #4
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e04c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f9e8:	2308      	movs	r3, #8
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e048      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f9f0:	2310      	movs	r3, #16
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e044      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800f9f8:	2320      	movs	r3, #32
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e040      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa00:	2340      	movs	r3, #64	@ 0x40
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e03c      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa08:	2380      	movs	r3, #128	@ 0x80
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e038      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a71      	ldr	r2, [pc, #452]	@ (800fbdc <UART_SetConfig+0x908>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d130      	bne.n	800fa7c <UART_SetConfig+0x7a8>
 800fa1a:	4b6f      	ldr	r3, [pc, #444]	@ (800fbd8 <UART_SetConfig+0x904>)
 800fa1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	2b05      	cmp	r3, #5
 800fa24:	d826      	bhi.n	800fa74 <UART_SetConfig+0x7a0>
 800fa26:	a201      	add	r2, pc, #4	@ (adr r2, 800fa2c <UART_SetConfig+0x758>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa45 	.word	0x0800fa45
 800fa30:	0800fa4d 	.word	0x0800fa4d
 800fa34:	0800fa55 	.word	0x0800fa55
 800fa38:	0800fa5d 	.word	0x0800fa5d
 800fa3c:	0800fa65 	.word	0x0800fa65
 800fa40:	0800fa6d 	.word	0x0800fa6d
 800fa44:	2302      	movs	r3, #2
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4a:	e01a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa4c:	2304      	movs	r3, #4
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e016      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa54:	2308      	movs	r3, #8
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5a:	e012      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa62:	e00e      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa64:	2320      	movs	r3, #32
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6a:	e00a      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa6c:	2340      	movs	r3, #64	@ 0x40
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa72:	e006      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa74:	2380      	movs	r3, #128	@ 0x80
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7a:	e002      	b.n	800fa82 <UART_SetConfig+0x7ae>
 800fa7c:	2380      	movs	r3, #128	@ 0x80
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a55      	ldr	r2, [pc, #340]	@ (800fbdc <UART_SetConfig+0x908>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	f040 80f8 	bne.w	800fc7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	dc46      	bgt.n	800fb24 <UART_SetConfig+0x850>
 800fa96:	2b02      	cmp	r3, #2
 800fa98:	db75      	blt.n	800fb86 <UART_SetConfig+0x8b2>
 800fa9a:	3b02      	subs	r3, #2
 800fa9c:	2b1e      	cmp	r3, #30
 800fa9e:	d872      	bhi.n	800fb86 <UART_SetConfig+0x8b2>
 800faa0:	a201      	add	r2, pc, #4	@ (adr r2, 800faa8 <UART_SetConfig+0x7d4>)
 800faa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa6:	bf00      	nop
 800faa8:	0800fb2b 	.word	0x0800fb2b
 800faac:	0800fb87 	.word	0x0800fb87
 800fab0:	0800fb33 	.word	0x0800fb33
 800fab4:	0800fb87 	.word	0x0800fb87
 800fab8:	0800fb87 	.word	0x0800fb87
 800fabc:	0800fb87 	.word	0x0800fb87
 800fac0:	0800fb43 	.word	0x0800fb43
 800fac4:	0800fb87 	.word	0x0800fb87
 800fac8:	0800fb87 	.word	0x0800fb87
 800facc:	0800fb87 	.word	0x0800fb87
 800fad0:	0800fb87 	.word	0x0800fb87
 800fad4:	0800fb87 	.word	0x0800fb87
 800fad8:	0800fb87 	.word	0x0800fb87
 800fadc:	0800fb87 	.word	0x0800fb87
 800fae0:	0800fb53 	.word	0x0800fb53
 800fae4:	0800fb87 	.word	0x0800fb87
 800fae8:	0800fb87 	.word	0x0800fb87
 800faec:	0800fb87 	.word	0x0800fb87
 800faf0:	0800fb87 	.word	0x0800fb87
 800faf4:	0800fb87 	.word	0x0800fb87
 800faf8:	0800fb87 	.word	0x0800fb87
 800fafc:	0800fb87 	.word	0x0800fb87
 800fb00:	0800fb87 	.word	0x0800fb87
 800fb04:	0800fb87 	.word	0x0800fb87
 800fb08:	0800fb87 	.word	0x0800fb87
 800fb0c:	0800fb87 	.word	0x0800fb87
 800fb10:	0800fb87 	.word	0x0800fb87
 800fb14:	0800fb87 	.word	0x0800fb87
 800fb18:	0800fb87 	.word	0x0800fb87
 800fb1c:	0800fb87 	.word	0x0800fb87
 800fb20:	0800fb79 	.word	0x0800fb79
 800fb24:	2b40      	cmp	r3, #64	@ 0x40
 800fb26:	d02a      	beq.n	800fb7e <UART_SetConfig+0x8aa>
 800fb28:	e02d      	b.n	800fb86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb2a:	f7fb fd79 	bl	800b620 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fb30:	e02f      	b.n	800fb92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fb fd88 	bl	800b64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb40:	e027      	b.n	800fb92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb42:	f107 0318 	add.w	r3, r7, #24
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fb fed4 	bl	800b8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb50:	e01f      	b.n	800fb92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb52:	4b21      	ldr	r3, [pc, #132]	@ (800fbd8 <UART_SetConfig+0x904>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f003 0320 	and.w	r3, r3, #32
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d009      	beq.n	800fb72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb5e:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd8 <UART_SetConfig+0x904>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	08db      	lsrs	r3, r3, #3
 800fb64:	f003 0303 	and.w	r3, r3, #3
 800fb68:	4a1d      	ldr	r2, [pc, #116]	@ (800fbe0 <UART_SetConfig+0x90c>)
 800fb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb70:	e00f      	b.n	800fb92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb72:	4b1b      	ldr	r3, [pc, #108]	@ (800fbe0 <UART_SetConfig+0x90c>)
 800fb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb76:	e00c      	b.n	800fb92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb78:	4b1a      	ldr	r3, [pc, #104]	@ (800fbe4 <UART_SetConfig+0x910>)
 800fb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb7c:	e009      	b.n	800fb92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb84:	e005      	b.n	800fb92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb86:	2300      	movs	r3, #0
 800fb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f000 81ee 	beq.w	800ff76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb9e:	4a12      	ldr	r2, [pc, #72]	@ (800fbe8 <UART_SetConfig+0x914>)
 800fba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fba4:	461a      	mov	r2, r3
 800fba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	685a      	ldr	r2, [r3, #4]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	4413      	add	r3, r2
 800fbb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d305      	bcc.n	800fbca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d910      	bls.n	800fbec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fbd0:	e1d1      	b.n	800ff76 <UART_SetConfig+0xca2>
 800fbd2:	bf00      	nop
 800fbd4:	40011c00 	.word	0x40011c00
 800fbd8:	58024400 	.word	0x58024400
 800fbdc:	58000c00 	.word	0x58000c00
 800fbe0:	03d09000 	.word	0x03d09000
 800fbe4:	003d0900 	.word	0x003d0900
 800fbe8:	080189ec 	.word	0x080189ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbee:	2200      	movs	r2, #0
 800fbf0:	60bb      	str	r3, [r7, #8]
 800fbf2:	60fa      	str	r2, [r7, #12]
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf8:	4ac0      	ldr	r2, [pc, #768]	@ (800fefc <UART_SetConfig+0xc28>)
 800fbfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	2200      	movs	r2, #0
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	607a      	str	r2, [r7, #4]
 800fc06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc0e:	f7f0 fddb 	bl	80007c8 <__aeabi_uldivmod>
 800fc12:	4602      	mov	r2, r0
 800fc14:	460b      	mov	r3, r1
 800fc16:	4610      	mov	r0, r2
 800fc18:	4619      	mov	r1, r3
 800fc1a:	f04f 0200 	mov.w	r2, #0
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	020b      	lsls	r3, r1, #8
 800fc24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc28:	0202      	lsls	r2, r0, #8
 800fc2a:	6979      	ldr	r1, [r7, #20]
 800fc2c:	6849      	ldr	r1, [r1, #4]
 800fc2e:	0849      	lsrs	r1, r1, #1
 800fc30:	2000      	movs	r0, #0
 800fc32:	460c      	mov	r4, r1
 800fc34:	4605      	mov	r5, r0
 800fc36:	eb12 0804 	adds.w	r8, r2, r4
 800fc3a:	eb43 0905 	adc.w	r9, r3, r5
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	469a      	mov	sl, r3
 800fc46:	4693      	mov	fp, r2
 800fc48:	4652      	mov	r2, sl
 800fc4a:	465b      	mov	r3, fp
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4649      	mov	r1, r9
 800fc50:	f7f0 fdba 	bl	80007c8 <__aeabi_uldivmod>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4613      	mov	r3, r2
 800fc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc62:	d308      	bcc.n	800fc76 <UART_SetConfig+0x9a2>
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc6a:	d204      	bcs.n	800fc76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc72:	60da      	str	r2, [r3, #12]
 800fc74:	e17f      	b.n	800ff76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
 800fc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc7c:	e17b      	b.n	800ff76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	69db      	ldr	r3, [r3, #28]
 800fc82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc86:	f040 80bd 	bne.w	800fe04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc8e:	2b20      	cmp	r3, #32
 800fc90:	dc48      	bgt.n	800fd24 <UART_SetConfig+0xa50>
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	db7b      	blt.n	800fd8e <UART_SetConfig+0xaba>
 800fc96:	2b20      	cmp	r3, #32
 800fc98:	d879      	bhi.n	800fd8e <UART_SetConfig+0xaba>
 800fc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fca0 <UART_SetConfig+0x9cc>)
 800fc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca0:	0800fd2b 	.word	0x0800fd2b
 800fca4:	0800fd33 	.word	0x0800fd33
 800fca8:	0800fd8f 	.word	0x0800fd8f
 800fcac:	0800fd8f 	.word	0x0800fd8f
 800fcb0:	0800fd3b 	.word	0x0800fd3b
 800fcb4:	0800fd8f 	.word	0x0800fd8f
 800fcb8:	0800fd8f 	.word	0x0800fd8f
 800fcbc:	0800fd8f 	.word	0x0800fd8f
 800fcc0:	0800fd4b 	.word	0x0800fd4b
 800fcc4:	0800fd8f 	.word	0x0800fd8f
 800fcc8:	0800fd8f 	.word	0x0800fd8f
 800fccc:	0800fd8f 	.word	0x0800fd8f
 800fcd0:	0800fd8f 	.word	0x0800fd8f
 800fcd4:	0800fd8f 	.word	0x0800fd8f
 800fcd8:	0800fd8f 	.word	0x0800fd8f
 800fcdc:	0800fd8f 	.word	0x0800fd8f
 800fce0:	0800fd5b 	.word	0x0800fd5b
 800fce4:	0800fd8f 	.word	0x0800fd8f
 800fce8:	0800fd8f 	.word	0x0800fd8f
 800fcec:	0800fd8f 	.word	0x0800fd8f
 800fcf0:	0800fd8f 	.word	0x0800fd8f
 800fcf4:	0800fd8f 	.word	0x0800fd8f
 800fcf8:	0800fd8f 	.word	0x0800fd8f
 800fcfc:	0800fd8f 	.word	0x0800fd8f
 800fd00:	0800fd8f 	.word	0x0800fd8f
 800fd04:	0800fd8f 	.word	0x0800fd8f
 800fd08:	0800fd8f 	.word	0x0800fd8f
 800fd0c:	0800fd8f 	.word	0x0800fd8f
 800fd10:	0800fd8f 	.word	0x0800fd8f
 800fd14:	0800fd8f 	.word	0x0800fd8f
 800fd18:	0800fd8f 	.word	0x0800fd8f
 800fd1c:	0800fd8f 	.word	0x0800fd8f
 800fd20:	0800fd81 	.word	0x0800fd81
 800fd24:	2b40      	cmp	r3, #64	@ 0x40
 800fd26:	d02e      	beq.n	800fd86 <UART_SetConfig+0xab2>
 800fd28:	e031      	b.n	800fd8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd2a:	f7fa fa4d 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800fd2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd30:	e033      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd32:	f7fa fa5f 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800fd36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd38:	e02f      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fb fc84 	bl	800b64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd48:	e027      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd4a:	f107 0318 	add.w	r3, r7, #24
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fb fdd0 	bl	800b8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd58:	e01f      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd5a:	4b69      	ldr	r3, [pc, #420]	@ (800ff00 <UART_SetConfig+0xc2c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f003 0320 	and.w	r3, r3, #32
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d009      	beq.n	800fd7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd66:	4b66      	ldr	r3, [pc, #408]	@ (800ff00 <UART_SetConfig+0xc2c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	08db      	lsrs	r3, r3, #3
 800fd6c:	f003 0303 	and.w	r3, r3, #3
 800fd70:	4a64      	ldr	r2, [pc, #400]	@ (800ff04 <UART_SetConfig+0xc30>)
 800fd72:	fa22 f303 	lsr.w	r3, r2, r3
 800fd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd78:	e00f      	b.n	800fd9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd7a:	4b62      	ldr	r3, [pc, #392]	@ (800ff04 <UART_SetConfig+0xc30>)
 800fd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd7e:	e00c      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd80:	4b61      	ldr	r3, [pc, #388]	@ (800ff08 <UART_SetConfig+0xc34>)
 800fd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd84:	e009      	b.n	800fd9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd8c:	e005      	b.n	800fd9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 80ea 	beq.w	800ff76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda6:	4a55      	ldr	r2, [pc, #340]	@ (800fefc <UART_SetConfig+0xc28>)
 800fda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdac:	461a      	mov	r2, r3
 800fdae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdb4:	005a      	lsls	r2, r3, #1
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	085b      	lsrs	r3, r3, #1
 800fdbc:	441a      	add	r2, r3
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdca:	2b0f      	cmp	r3, #15
 800fdcc:	d916      	bls.n	800fdfc <UART_SetConfig+0xb28>
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdd4:	d212      	bcs.n	800fdfc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	f023 030f 	bic.w	r3, r3, #15
 800fdde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde2:	085b      	lsrs	r3, r3, #1
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fdf8:	60da      	str	r2, [r3, #12]
 800fdfa:	e0bc      	b.n	800ff76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe02:	e0b8      	b.n	800ff76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe08:	2b20      	cmp	r3, #32
 800fe0a:	dc4b      	bgt.n	800fea4 <UART_SetConfig+0xbd0>
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f2c0 8087 	blt.w	800ff20 <UART_SetConfig+0xc4c>
 800fe12:	2b20      	cmp	r3, #32
 800fe14:	f200 8084 	bhi.w	800ff20 <UART_SetConfig+0xc4c>
 800fe18:	a201      	add	r2, pc, #4	@ (adr r2, 800fe20 <UART_SetConfig+0xb4c>)
 800fe1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1e:	bf00      	nop
 800fe20:	0800feab 	.word	0x0800feab
 800fe24:	0800feb3 	.word	0x0800feb3
 800fe28:	0800ff21 	.word	0x0800ff21
 800fe2c:	0800ff21 	.word	0x0800ff21
 800fe30:	0800febb 	.word	0x0800febb
 800fe34:	0800ff21 	.word	0x0800ff21
 800fe38:	0800ff21 	.word	0x0800ff21
 800fe3c:	0800ff21 	.word	0x0800ff21
 800fe40:	0800fecb 	.word	0x0800fecb
 800fe44:	0800ff21 	.word	0x0800ff21
 800fe48:	0800ff21 	.word	0x0800ff21
 800fe4c:	0800ff21 	.word	0x0800ff21
 800fe50:	0800ff21 	.word	0x0800ff21
 800fe54:	0800ff21 	.word	0x0800ff21
 800fe58:	0800ff21 	.word	0x0800ff21
 800fe5c:	0800ff21 	.word	0x0800ff21
 800fe60:	0800fedb 	.word	0x0800fedb
 800fe64:	0800ff21 	.word	0x0800ff21
 800fe68:	0800ff21 	.word	0x0800ff21
 800fe6c:	0800ff21 	.word	0x0800ff21
 800fe70:	0800ff21 	.word	0x0800ff21
 800fe74:	0800ff21 	.word	0x0800ff21
 800fe78:	0800ff21 	.word	0x0800ff21
 800fe7c:	0800ff21 	.word	0x0800ff21
 800fe80:	0800ff21 	.word	0x0800ff21
 800fe84:	0800ff21 	.word	0x0800ff21
 800fe88:	0800ff21 	.word	0x0800ff21
 800fe8c:	0800ff21 	.word	0x0800ff21
 800fe90:	0800ff21 	.word	0x0800ff21
 800fe94:	0800ff21 	.word	0x0800ff21
 800fe98:	0800ff21 	.word	0x0800ff21
 800fe9c:	0800ff21 	.word	0x0800ff21
 800fea0:	0800ff13 	.word	0x0800ff13
 800fea4:	2b40      	cmp	r3, #64	@ 0x40
 800fea6:	d037      	beq.n	800ff18 <UART_SetConfig+0xc44>
 800fea8:	e03a      	b.n	800ff20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800feaa:	f7fa f98d 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800feae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800feb0:	e03c      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800feb2:	f7fa f99f 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800feb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800feb8:	e038      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fb fbc4 	bl	800b64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fec8:	e030      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800feca:	f107 0318 	add.w	r3, r7, #24
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fb fd10 	bl	800b8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed8:	e028      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feda:	4b09      	ldr	r3, [pc, #36]	@ (800ff00 <UART_SetConfig+0xc2c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d012      	beq.n	800ff0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fee6:	4b06      	ldr	r3, [pc, #24]	@ (800ff00 <UART_SetConfig+0xc2c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	08db      	lsrs	r3, r3, #3
 800feec:	f003 0303 	and.w	r3, r3, #3
 800fef0:	4a04      	ldr	r2, [pc, #16]	@ (800ff04 <UART_SetConfig+0xc30>)
 800fef2:	fa22 f303 	lsr.w	r3, r2, r3
 800fef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fef8:	e018      	b.n	800ff2c <UART_SetConfig+0xc58>
 800fefa:	bf00      	nop
 800fefc:	080189ec 	.word	0x080189ec
 800ff00:	58024400 	.word	0x58024400
 800ff04:	03d09000 	.word	0x03d09000
 800ff08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff0c:	4b24      	ldr	r3, [pc, #144]	@ (800ffa0 <UART_SetConfig+0xccc>)
 800ff0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff10:	e00c      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff12:	4b24      	ldr	r3, [pc, #144]	@ (800ffa4 <UART_SetConfig+0xcd0>)
 800ff14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff16:	e009      	b.n	800ff2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff1e:	e005      	b.n	800ff2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff20:	2300      	movs	r3, #0
 800ff22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff24:	2301      	movs	r3, #1
 800ff26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff2a:	bf00      	nop
    }

    if (pclk != 0U)
 800ff2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d021      	beq.n	800ff76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff36:	4a1c      	ldr	r2, [pc, #112]	@ (800ffa8 <UART_SetConfig+0xcd4>)
 800ff38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff40:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	085b      	lsrs	r3, r3, #1
 800ff4a:	441a      	add	r2, r3
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff58:	2b0f      	cmp	r3, #15
 800ff5a:	d909      	bls.n	800ff70 <UART_SetConfig+0xc9c>
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff62:	d205      	bcs.n	800ff70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	60da      	str	r2, [r3, #12]
 800ff6e:	e002      	b.n	800ff76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff70:	2301      	movs	r3, #1
 800ff72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2201      	movs	r2, #1
 800ff82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ff92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3748      	adds	r7, #72	@ 0x48
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffa0:	03d09000 	.word	0x03d09000
 800ffa4:	003d0900 	.word	0x003d0900
 800ffa8:	080189ec 	.word	0x080189ec

0800ffac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb8:	f003 0308 	and.w	r3, r3, #8
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00a      	beq.n	800ffd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffda:	f003 0301 	and.w	r3, r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00a      	beq.n	800fff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	430a      	orrs	r2, r1
 800fff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fffc:	f003 0302 	and.w	r3, r3, #2
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00a      	beq.n	801001a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	430a      	orrs	r2, r1
 8010018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801001e:	f003 0304 	and.w	r3, r3, #4
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00a      	beq.n	801003c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	430a      	orrs	r2, r1
 801003a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010040:	f003 0310 	and.w	r3, r3, #16
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00a      	beq.n	801005e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	430a      	orrs	r2, r1
 801005c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010062:	f003 0320 	and.w	r3, r3, #32
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00a      	beq.n	8010080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	430a      	orrs	r2, r1
 801007e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010088:	2b00      	cmp	r3, #0
 801008a:	d01a      	beq.n	80100c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	430a      	orrs	r2, r1
 80100a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80100aa:	d10a      	bne.n	80100c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	430a      	orrs	r2, r1
 80100c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00a      	beq.n	80100e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	430a      	orrs	r2, r1
 80100e2:	605a      	str	r2, [r3, #4]
  }
}
 80100e4:	bf00      	nop
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b098      	sub	sp, #96	@ 0x60
 80100f4:	af02      	add	r7, sp, #8
 80100f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010100:	f7f5 f9c2 	bl	8005488 <HAL_GetTick>
 8010104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f003 0308 	and.w	r3, r3, #8
 8010110:	2b08      	cmp	r3, #8
 8010112:	d12f      	bne.n	8010174 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801011c:	2200      	movs	r2, #0
 801011e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 f88e 	bl	8010244 <UART_WaitOnFlagUntilTimeout>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d022      	beq.n	8010174 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010136:	e853 3f00 	ldrex	r3, [r3]
 801013a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801013c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801013e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010142:	653b      	str	r3, [r7, #80]	@ 0x50
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	461a      	mov	r2, r3
 801014a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801014c:	647b      	str	r3, [r7, #68]	@ 0x44
 801014e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010154:	e841 2300 	strex	r3, r2, [r1]
 8010158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801015a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e6      	bne.n	801012e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2220      	movs	r2, #32
 8010164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2200      	movs	r2, #0
 801016c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010170:	2303      	movs	r3, #3
 8010172:	e063      	b.n	801023c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f003 0304 	and.w	r3, r3, #4
 801017e:	2b04      	cmp	r3, #4
 8010180:	d149      	bne.n	8010216 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010182:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801018a:	2200      	movs	r2, #0
 801018c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f857 	bl	8010244 <UART_WaitOnFlagUntilTimeout>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d03c      	beq.n	8010216 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	e853 3f00 	ldrex	r3, [r3]
 80101a8:	623b      	str	r3, [r7, #32]
   return(result);
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80101b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	461a      	mov	r2, r3
 80101b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80101bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101c2:	e841 2300 	strex	r3, r2, [r1]
 80101c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1e6      	bne.n	801019c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3308      	adds	r3, #8
 80101d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	e853 3f00 	ldrex	r3, [r3]
 80101dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f023 0301 	bic.w	r3, r3, #1
 80101e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	3308      	adds	r3, #8
 80101ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101ee:	61fa      	str	r2, [r7, #28]
 80101f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f2:	69b9      	ldr	r1, [r7, #24]
 80101f4:	69fa      	ldr	r2, [r7, #28]
 80101f6:	e841 2300 	strex	r3, r2, [r1]
 80101fa:	617b      	str	r3, [r7, #20]
   return(result);
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1e5      	bne.n	80101ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2220      	movs	r2, #32
 8010206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010212:	2303      	movs	r3, #3
 8010214:	e012      	b.n	801023c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2220      	movs	r2, #32
 801021a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2220      	movs	r2, #32
 8010222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3758      	adds	r7, #88	@ 0x58
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	603b      	str	r3, [r7, #0]
 8010250:	4613      	mov	r3, r2
 8010252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010254:	e04f      	b.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801025c:	d04b      	beq.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801025e:	f7f5 f913 	bl	8005488 <HAL_GetTick>
 8010262:	4602      	mov	r2, r0
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	69ba      	ldr	r2, [r7, #24]
 801026a:	429a      	cmp	r2, r3
 801026c:	d302      	bcc.n	8010274 <UART_WaitOnFlagUntilTimeout+0x30>
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010274:	2303      	movs	r3, #3
 8010276:	e04e      	b.n	8010316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f003 0304 	and.w	r3, r3, #4
 8010282:	2b00      	cmp	r3, #0
 8010284:	d037      	beq.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	2b80      	cmp	r3, #128	@ 0x80
 801028a:	d034      	beq.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b40      	cmp	r3, #64	@ 0x40
 8010290:	d031      	beq.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	69db      	ldr	r3, [r3, #28]
 8010298:	f003 0308 	and.w	r3, r3, #8
 801029c:	2b08      	cmp	r3, #8
 801029e:	d110      	bne.n	80102c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2208      	movs	r2, #8
 80102a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f000 fa43 	bl	8010734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2208      	movs	r2, #8
 80102b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e029      	b.n	8010316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	69db      	ldr	r3, [r3, #28]
 80102c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102d0:	d111      	bne.n	80102f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f000 fa29 	bl	8010734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2220      	movs	r2, #32
 80102e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80102f2:	2303      	movs	r3, #3
 80102f4:	e00f      	b.n	8010316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	69da      	ldr	r2, [r3, #28]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	4013      	ands	r3, r2
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	429a      	cmp	r2, r3
 8010304:	bf0c      	ite	eq
 8010306:	2301      	moveq	r3, #1
 8010308:	2300      	movne	r3, #0
 801030a:	b2db      	uxtb	r3, r3
 801030c:	461a      	mov	r2, r3
 801030e:	79fb      	ldrb	r3, [r7, #7]
 8010310:	429a      	cmp	r2, r3
 8010312:	d0a0      	beq.n	8010256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3710      	adds	r7, #16
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010320:	b480      	push	{r7}
 8010322:	b0a3      	sub	sp, #140	@ 0x8c
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	68ba      	ldr	r2, [r7, #8]
 8010332:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	88fa      	ldrh	r2, [r7, #6]
 8010338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	88fa      	ldrh	r2, [r7, #6]
 8010340:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010352:	d10e      	bne.n	8010372 <UART_Start_Receive_IT+0x52>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <UART_Start_Receive_IT+0x48>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010362:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010366:	e02d      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	22ff      	movs	r2, #255	@ 0xff
 801036c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010370:	e028      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10d      	bne.n	8010396 <UART_Start_Receive_IT+0x76>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <UART_Start_Receive_IT+0x6c>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	22ff      	movs	r2, #255	@ 0xff
 8010386:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801038a:	e01b      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	227f      	movs	r2, #127	@ 0x7f
 8010390:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010394:	e016      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801039e:	d10d      	bne.n	80103bc <UART_Start_Receive_IT+0x9c>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d104      	bne.n	80103b2 <UART_Start_Receive_IT+0x92>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	227f      	movs	r2, #127	@ 0x7f
 80103ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103b0:	e008      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	223f      	movs	r2, #63	@ 0x3f
 80103b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103ba:	e003      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2200      	movs	r2, #0
 80103c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2222      	movs	r2, #34	@ 0x22
 80103d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3308      	adds	r3, #8
 80103da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103de:	e853 3f00 	ldrex	r3, [r3]
 80103e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80103e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103e6:	f043 0301 	orr.w	r3, r3, #1
 80103ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3308      	adds	r3, #8
 80103f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80103f8:	673a      	str	r2, [r7, #112]	@ 0x70
 80103fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80103fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010400:	e841 2300 	strex	r3, r2, [r1]
 8010404:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1e3      	bne.n	80103d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010414:	d14f      	bne.n	80104b6 <UART_Start_Receive_IT+0x196>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801041c:	88fa      	ldrh	r2, [r7, #6]
 801041e:	429a      	cmp	r2, r3
 8010420:	d349      	bcc.n	80104b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801042a:	d107      	bne.n	801043c <UART_Start_Receive_IT+0x11c>
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d103      	bne.n	801043c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4a47      	ldr	r2, [pc, #284]	@ (8010554 <UART_Start_Receive_IT+0x234>)
 8010438:	675a      	str	r2, [r3, #116]	@ 0x74
 801043a:	e002      	b.n	8010442 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4a46      	ldr	r2, [pc, #280]	@ (8010558 <UART_Start_Receive_IT+0x238>)
 8010440:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d01a      	beq.n	8010480 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010452:	e853 3f00 	ldrex	r3, [r3]
 8010456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801045a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801045e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	461a      	mov	r2, r3
 8010468:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801046c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801046e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010470:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010472:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010474:	e841 2300 	strex	r3, r2, [r1]
 8010478:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801047a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1e4      	bne.n	801044a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	3308      	adds	r3, #8
 8010486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801048a:	e853 3f00 	ldrex	r3, [r3]
 801048e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	3308      	adds	r3, #8
 801049e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80104a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80104a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80104a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80104a8:	e841 2300 	strex	r3, r2, [r1]
 80104ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80104ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1e5      	bne.n	8010480 <UART_Start_Receive_IT+0x160>
 80104b4:	e046      	b.n	8010544 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104be:	d107      	bne.n	80104d0 <UART_Start_Receive_IT+0x1b0>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d103      	bne.n	80104d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	4a24      	ldr	r2, [pc, #144]	@ (801055c <UART_Start_Receive_IT+0x23c>)
 80104cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80104ce:	e002      	b.n	80104d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4a23      	ldr	r2, [pc, #140]	@ (8010560 <UART_Start_Receive_IT+0x240>)
 80104d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d019      	beq.n	8010512 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e6:	e853 3f00 	ldrex	r3, [r3]
 80104ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80104f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	461a      	mov	r2, r3
 80104fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80104fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80104fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010504:	e841 2300 	strex	r3, r2, [r1]
 8010508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e6      	bne.n	80104de <UART_Start_Receive_IT+0x1be>
 8010510:	e018      	b.n	8010544 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	e853 3f00 	ldrex	r3, [r3]
 801051e:	613b      	str	r3, [r7, #16]
   return(result);
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	f043 0320 	orr.w	r3, r3, #32
 8010526:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	461a      	mov	r2, r3
 801052e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010530:	623b      	str	r3, [r7, #32]
 8010532:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	69f9      	ldr	r1, [r7, #28]
 8010536:	6a3a      	ldr	r2, [r7, #32]
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	61bb      	str	r3, [r7, #24]
   return(result);
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e6      	bne.n	8010512 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	378c      	adds	r7, #140	@ 0x8c
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	08011589 	.word	0x08011589
 8010558:	08011229 	.word	0x08011229
 801055c:	08011071 	.word	0x08011071
 8010560:	08010eb9 	.word	0x08010eb9

08010564 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b096      	sub	sp, #88	@ 0x58
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	4613      	mov	r3, r2
 8010570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	88fa      	ldrh	r2, [r7, #6]
 801057c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2200      	movs	r2, #0
 8010584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2222      	movs	r2, #34	@ 0x22
 801058c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010596:	2b00      	cmp	r3, #0
 8010598:	d02d      	beq.n	80105f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105a0:	4a40      	ldr	r2, [pc, #256]	@ (80106a4 <UART_Start_Receive_DMA+0x140>)
 80105a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105aa:	4a3f      	ldr	r2, [pc, #252]	@ (80106a8 <UART_Start_Receive_DMA+0x144>)
 80105ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105b4:	4a3d      	ldr	r2, [pc, #244]	@ (80106ac <UART_Start_Receive_DMA+0x148>)
 80105b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105be:	2200      	movs	r2, #0
 80105c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	3324      	adds	r3, #36	@ 0x24
 80105ce:	4619      	mov	r1, r3
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105d4:	461a      	mov	r2, r3
 80105d6:	88fb      	ldrh	r3, [r7, #6]
 80105d8:	f7f5 fc6c 	bl	8005eb4 <HAL_DMA_Start_IT>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d009      	beq.n	80105f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2210      	movs	r2, #16
 80105e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2220      	movs	r2, #32
 80105ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80105f2:	2301      	movs	r3, #1
 80105f4:	e051      	b.n	801069a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d018      	beq.n	8010630 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010606:	e853 3f00 	ldrex	r3, [r3]
 801060a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801060c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801060e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010612:	657b      	str	r3, [r7, #84]	@ 0x54
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	461a      	mov	r2, r3
 801061a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801061c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801061e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010620:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010624:	e841 2300 	strex	r3, r2, [r1]
 8010628:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801062a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1e6      	bne.n	80105fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3308      	adds	r3, #8
 8010636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801063a:	e853 3f00 	ldrex	r3, [r3]
 801063e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010642:	f043 0301 	orr.w	r3, r3, #1
 8010646:	653b      	str	r3, [r7, #80]	@ 0x50
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3308      	adds	r3, #8
 801064e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010650:	637a      	str	r2, [r7, #52]	@ 0x34
 8010652:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010654:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010658:	e841 2300 	strex	r3, r2, [r1]
 801065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1e5      	bne.n	8010630 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	3308      	adds	r3, #8
 801066a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	e853 3f00 	ldrex	r3, [r3]
 8010672:	613b      	str	r3, [r7, #16]
   return(result);
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3308      	adds	r3, #8
 8010682:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010684:	623a      	str	r2, [r7, #32]
 8010686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010688:	69f9      	ldr	r1, [r7, #28]
 801068a:	6a3a      	ldr	r2, [r7, #32]
 801068c:	e841 2300 	strex	r3, r2, [r1]
 8010690:	61bb      	str	r3, [r7, #24]
   return(result);
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d1e5      	bne.n	8010664 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3758      	adds	r7, #88	@ 0x58
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	08010801 	.word	0x08010801
 80106a8:	08010929 	.word	0x08010929
 80106ac:	08010967 	.word	0x08010967

080106b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b08f      	sub	sp, #60	@ 0x3c
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	6a3b      	ldr	r3, [r7, #32]
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80106cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	461a      	mov	r2, r3
 80106d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106de:	e841 2300 	strex	r3, r2, [r1]
 80106e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e6      	bne.n	80106b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3308      	adds	r3, #8
 80106f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	e853 3f00 	ldrex	r3, [r3]
 80106f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010700:	633b      	str	r3, [r7, #48]	@ 0x30
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801070a:	61ba      	str	r2, [r7, #24]
 801070c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070e:	6979      	ldr	r1, [r7, #20]
 8010710:	69ba      	ldr	r2, [r7, #24]
 8010712:	e841 2300 	strex	r3, r2, [r1]
 8010716:	613b      	str	r3, [r7, #16]
   return(result);
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1e5      	bne.n	80106ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2220      	movs	r2, #32
 8010722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010726:	bf00      	nop
 8010728:	373c      	adds	r7, #60	@ 0x3c
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
	...

08010734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010734:	b480      	push	{r7}
 8010736:	b095      	sub	sp, #84	@ 0x54
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010744:	e853 3f00 	ldrex	r3, [r3]
 8010748:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801074a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801075a:	643b      	str	r3, [r7, #64]	@ 0x40
 801075c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010760:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010762:	e841 2300 	strex	r3, r2, [r1]
 8010766:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1e6      	bne.n	801073c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3308      	adds	r3, #8
 8010774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	e853 3f00 	ldrex	r3, [r3]
 801077c:	61fb      	str	r3, [r7, #28]
   return(result);
 801077e:	69fa      	ldr	r2, [r7, #28]
 8010780:	4b1e      	ldr	r3, [pc, #120]	@ (80107fc <UART_EndRxTransfer+0xc8>)
 8010782:	4013      	ands	r3, r2
 8010784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3308      	adds	r3, #8
 801078c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801078e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010796:	e841 2300 	strex	r3, r2, [r1]
 801079a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1e5      	bne.n	801076e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d118      	bne.n	80107dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	e853 3f00 	ldrex	r3, [r3]
 80107b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	f023 0310 	bic.w	r3, r3, #16
 80107be:	647b      	str	r3, [r7, #68]	@ 0x44
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	461a      	mov	r2, r3
 80107c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107c8:	61bb      	str	r3, [r7, #24]
 80107ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107cc:	6979      	ldr	r1, [r7, #20]
 80107ce:	69ba      	ldr	r2, [r7, #24]
 80107d0:	e841 2300 	strex	r3, r2, [r1]
 80107d4:	613b      	str	r3, [r7, #16]
   return(result);
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1e6      	bne.n	80107aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2220      	movs	r2, #32
 80107e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80107f0:	bf00      	nop
 80107f2:	3754      	adds	r7, #84	@ 0x54
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	effffffe 	.word	0xeffffffe

08010800 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b09c      	sub	sp, #112	@ 0x70
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801080c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010816:	d071      	beq.n	80108fc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801081a:	2200      	movs	r2, #0
 801081c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010828:	e853 3f00 	ldrex	r3, [r3]
 801082c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801082e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801083e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010840:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010842:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010846:	e841 2300 	strex	r3, r2, [r1]
 801084a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801084c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1e6      	bne.n	8010820 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	3308      	adds	r3, #8
 8010858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085c:	e853 3f00 	ldrex	r3, [r3]
 8010860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010864:	f023 0301 	bic.w	r3, r3, #1
 8010868:	667b      	str	r3, [r7, #100]	@ 0x64
 801086a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	3308      	adds	r3, #8
 8010870:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010872:	647a      	str	r2, [r7, #68]	@ 0x44
 8010874:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010876:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801087a:	e841 2300 	strex	r3, r2, [r1]
 801087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010882:	2b00      	cmp	r3, #0
 8010884:	d1e5      	bne.n	8010852 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	3308      	adds	r3, #8
 801088c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010890:	e853 3f00 	ldrex	r3, [r3]
 8010894:	623b      	str	r3, [r7, #32]
   return(result);
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801089c:	663b      	str	r3, [r7, #96]	@ 0x60
 801089e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3308      	adds	r3, #8
 80108a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80108a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80108a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ae:	e841 2300 	strex	r3, r2, [r1]
 80108b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80108b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1e5      	bne.n	8010886 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80108ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108bc:	2220      	movs	r2, #32
 80108be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d118      	bne.n	80108fc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	e853 3f00 	ldrex	r3, [r3]
 80108d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f023 0310 	bic.w	r3, r3, #16
 80108de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80108e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	461a      	mov	r2, r3
 80108e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108e8:	61fb      	str	r3, [r7, #28]
 80108ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	69b9      	ldr	r1, [r7, #24]
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	e841 2300 	strex	r3, r2, [r1]
 80108f4:	617b      	str	r3, [r7, #20]
   return(result);
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1e6      	bne.n	80108ca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108fe:	2200      	movs	r2, #0
 8010900:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010906:	2b01      	cmp	r3, #1
 8010908:	d107      	bne.n	801091a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801090a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801090c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010910:	4619      	mov	r1, r3
 8010912:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010914:	f7fe fcd2 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010918:	e002      	b.n	8010920 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801091a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801091c:	f7f3 fb26 	bl	8003f6c <HAL_UART_RxCpltCallback>
}
 8010920:	bf00      	nop
 8010922:	3770      	adds	r7, #112	@ 0x70
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010934:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2201      	movs	r2, #1
 801093a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010940:	2b01      	cmp	r3, #1
 8010942:	d109      	bne.n	8010958 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801094a:	085b      	lsrs	r3, r3, #1
 801094c:	b29b      	uxth	r3, r3
 801094e:	4619      	mov	r1, r3
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7fe fcb3 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010956:	e002      	b.n	801095e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f7fe fc91 	bl	800f280 <HAL_UART_RxHalfCpltCallback>
}
 801095e:	bf00      	nop
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b086      	sub	sp, #24
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010972:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801097a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010982:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801098e:	2b80      	cmp	r3, #128	@ 0x80
 8010990:	d109      	bne.n	80109a6 <UART_DMAError+0x40>
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	2b21      	cmp	r3, #33	@ 0x21
 8010996:	d106      	bne.n	80109a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	2200      	movs	r2, #0
 801099c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80109a0:	6978      	ldr	r0, [r7, #20]
 80109a2:	f7ff fe85 	bl	80106b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109b0:	2b40      	cmp	r3, #64	@ 0x40
 80109b2:	d109      	bne.n	80109c8 <UART_DMAError+0x62>
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2b22      	cmp	r3, #34	@ 0x22
 80109b8:	d106      	bne.n	80109c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80109c2:	6978      	ldr	r0, [r7, #20]
 80109c4:	f7ff feb6 	bl	8010734 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109ce:	f043 0210 	orr.w	r2, r3, #16
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109d8:	6978      	ldr	r0, [r7, #20]
 80109da:	f7fe fc5b 	bl	800f294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109de:	bf00      	nop
 80109e0:	3718      	adds	r7, #24
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f7fe fc45 	bl	800f294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a0a:	bf00      	nop
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a1e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a24:	2200      	movs	r2, #0
 8010a26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d005      	beq.n	8010a3e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d12b      	bne.n	8010a96 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2200      	movs	r2, #0
 8010a42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2200      	movs	r2, #0
 8010a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	220f      	movs	r2, #15
 8010a5c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a66:	d107      	bne.n	8010a78 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	699a      	ldr	r2, [r3, #24]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f042 0210 	orr.w	r2, r2, #16
 8010a76:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2220      	movs	r2, #32
 8010a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2220      	movs	r2, #32
 8010a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f7fe fc0a 	bl	800f2a8 <HAL_UART_AbortCpltCallback>
 8010a94:	e000      	b.n	8010a98 <UART_DMATxAbortCallback+0x86>
      return;
 8010a96:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b084      	sub	sp, #16
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aaa:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d004      	beq.n	8010ac8 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d126      	bne.n	8010b16 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	220f      	movs	r2, #15
 8010ae6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	699a      	ldr	r2, [r3, #24]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f042 0208 	orr.w	r2, r2, #8
 8010af6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2220      	movs	r2, #32
 8010afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2220      	movs	r2, #32
 8010b04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f7fe fbca 	bl	800f2a8 <HAL_UART_AbortCpltCallback>
 8010b14:	e000      	b.n	8010b18 <UART_DMARxAbortCallback+0x7a>
      return;
 8010b16:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b08f      	sub	sp, #60	@ 0x3c
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b2c:	2b21      	cmp	r3, #33	@ 0x21
 8010b2e:	d14c      	bne.n	8010bca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d132      	bne.n	8010ba2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	e853 3f00 	ldrex	r3, [r3]
 8010b48:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	461a      	mov	r2, r3
 8010b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b62:	e841 2300 	strex	r3, r2, [r1]
 8010b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d1e6      	bne.n	8010b3c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	e853 3f00 	ldrex	r3, [r3]
 8010b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8c:	61bb      	str	r3, [r7, #24]
 8010b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b90:	6979      	ldr	r1, [r7, #20]
 8010b92:	69ba      	ldr	r2, [r7, #24]
 8010b94:	e841 2300 	strex	r3, r2, [r1]
 8010b98:	613b      	str	r3, [r7, #16]
   return(result);
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d1e6      	bne.n	8010b6e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010ba0:	e013      	b.n	8010bca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ba6:	781a      	ldrb	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010bca:	bf00      	nop
 8010bcc:	373c      	adds	r7, #60	@ 0x3c
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b091      	sub	sp, #68	@ 0x44
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010be4:	2b21      	cmp	r3, #33	@ 0x21
 8010be6:	d151      	bne.n	8010c8c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d132      	bne.n	8010c5a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfc:	e853 3f00 	ldrex	r3, [r3]
 8010c00:	623b      	str	r3, [r7, #32]
   return(result);
 8010c02:	6a3b      	ldr	r3, [r7, #32]
 8010c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c1a:	e841 2300 	strex	r3, r2, [r1]
 8010c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1e6      	bne.n	8010bf4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	e853 3f00 	ldrex	r3, [r3]
 8010c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	461a      	mov	r2, r3
 8010c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c44:	61fb      	str	r3, [r7, #28]
 8010c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c48:	69b9      	ldr	r1, [r7, #24]
 8010c4a:	69fa      	ldr	r2, [r7, #28]
 8010c4c:	e841 2300 	strex	r3, r2, [r1]
 8010c50:	617b      	str	r3, [r7, #20]
   return(result);
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d1e6      	bne.n	8010c26 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010c58:	e018      	b.n	8010c8c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c62:	881b      	ldrh	r3, [r3, #0]
 8010c64:	461a      	mov	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c6e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c74:	1c9a      	adds	r2, r3, #2
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	3b01      	subs	r3, #1
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010c8c:	bf00      	nop
 8010c8e:	3744      	adds	r7, #68	@ 0x44
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b091      	sub	sp, #68	@ 0x44
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ca6:	2b21      	cmp	r3, #33	@ 0x21
 8010ca8:	d160      	bne.n	8010d6c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010cb2:	e057      	b.n	8010d64 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d133      	bne.n	8010d28 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cca:	e853 3f00 	ldrex	r3, [r3]
 8010cce:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3308      	adds	r3, #8
 8010cde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ce8:	e841 2300 	strex	r3, r2, [r1]
 8010cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1e5      	bne.n	8010cc0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	e853 3f00 	ldrex	r3, [r3]
 8010d00:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d12:	61fb      	str	r3, [r7, #28]
 8010d14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d16:	69b9      	ldr	r1, [r7, #24]
 8010d18:	69fa      	ldr	r2, [r7, #28]
 8010d1a:	e841 2300 	strex	r3, r2, [r1]
 8010d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1e6      	bne.n	8010cf4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010d26:	e021      	b.n	8010d6c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	69db      	ldr	r3, [r3, #28]
 8010d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d013      	beq.n	8010d5e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d3a:	781a      	ldrb	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d46:	1c5a      	adds	r2, r3, #1
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	3b01      	subs	r3, #1
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d60:	3b01      	subs	r3, #1
 8010d62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1a4      	bne.n	8010cb4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010d6a:	e7ff      	b.n	8010d6c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010d6c:	bf00      	nop
 8010d6e:	3744      	adds	r7, #68	@ 0x44
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b091      	sub	sp, #68	@ 0x44
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d86:	2b21      	cmp	r3, #33	@ 0x21
 8010d88:	d165      	bne.n	8010e56 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d92:	e05c      	b.n	8010e4e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d133      	bne.n	8010e08 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	3308      	adds	r3, #8
 8010da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	e853 3f00 	ldrex	r3, [r3]
 8010dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	3308      	adds	r3, #8
 8010dbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dc8:	e841 2300 	strex	r3, r2, [r1]
 8010dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1e5      	bne.n	8010da0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	e853 3f00 	ldrex	r3, [r3]
 8010de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df2:	61bb      	str	r3, [r7, #24]
 8010df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df6:	6979      	ldr	r1, [r7, #20]
 8010df8:	69ba      	ldr	r2, [r7, #24]
 8010dfa:	e841 2300 	strex	r3, r2, [r1]
 8010dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1e6      	bne.n	8010dd4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010e06:	e026      	b.n	8010e56 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d018      	beq.n	8010e48 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	461a      	mov	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e30:	1c9a      	adds	r2, r3, #2
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010e48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e4a:	3b01      	subs	r3, #1
 8010e4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010e4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d19f      	bne.n	8010d94 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010e54:	e7ff      	b.n	8010e56 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010e56:	bf00      	nop
 8010e58:	3744      	adds	r7, #68	@ 0x44
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b088      	sub	sp, #32
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	e853 3f00 	ldrex	r3, [r3]
 8010e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e7e:	61fb      	str	r3, [r7, #28]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	461a      	mov	r2, r3
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	61bb      	str	r3, [r7, #24]
 8010e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8c:	6979      	ldr	r1, [r7, #20]
 8010e8e:	69ba      	ldr	r2, [r7, #24]
 8010e90:	e841 2300 	strex	r3, r2, [r1]
 8010e94:	613b      	str	r3, [r7, #16]
   return(result);
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e6      	bne.n	8010e6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2220      	movs	r2, #32
 8010ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f7fe f9de 	bl	800f26c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eb0:	bf00      	nop
 8010eb2:	3720      	adds	r7, #32
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b09c      	sub	sp, #112	@ 0x70
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ec6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ed0:	2b22      	cmp	r3, #34	@ 0x22
 8010ed2:	f040 80be 	bne.w	8011052 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010edc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ee0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010ee4:	b2d9      	uxtb	r1, r3
 8010ee6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ef0:	400a      	ands	r2, r1
 8010ef2:	b2d2      	uxtb	r2, r2
 8010ef4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010efa:	1c5a      	adds	r2, r3, #1
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f040 80a1 	bne.w	8011062 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f28:	e853 3f00 	ldrex	r3, [r3]
 8010f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f46:	e841 2300 	strex	r3, r2, [r1]
 8010f4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1e6      	bne.n	8010f20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3308      	adds	r3, #8
 8010f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5c:	e853 3f00 	ldrex	r3, [r3]
 8010f60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f64:	f023 0301 	bic.w	r3, r3, #1
 8010f68:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3308      	adds	r3, #8
 8010f70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f7a:	e841 2300 	strex	r3, r2, [r1]
 8010f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d1e5      	bne.n	8010f52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2220      	movs	r2, #32
 8010f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4a33      	ldr	r2, [pc, #204]	@ (801106c <UART_RxISR_8BIT+0x1b4>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d01f      	beq.n	8010fe4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d018      	beq.n	8010fe4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fba:	e853 3f00 	ldrex	r3, [r3]
 8010fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010fc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fd8:	e841 2300 	strex	r3, r2, [r1]
 8010fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1e6      	bne.n	8010fb2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d12e      	bne.n	801104a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	e853 3f00 	ldrex	r3, [r3]
 8010ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f023 0310 	bic.w	r3, r3, #16
 8011006:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	461a      	mov	r2, r3
 801100e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011010:	61fb      	str	r3, [r7, #28]
 8011012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011014:	69b9      	ldr	r1, [r7, #24]
 8011016:	69fa      	ldr	r2, [r7, #28]
 8011018:	e841 2300 	strex	r3, r2, [r1]
 801101c:	617b      	str	r3, [r7, #20]
   return(result);
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e6      	bne.n	8010ff2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	69db      	ldr	r3, [r3, #28]
 801102a:	f003 0310 	and.w	r3, r3, #16
 801102e:	2b10      	cmp	r3, #16
 8011030:	d103      	bne.n	801103a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	2210      	movs	r2, #16
 8011038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011040:	4619      	mov	r1, r3
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7fe f93a 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011048:	e00b      	b.n	8011062 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7f2 ff8e 	bl	8003f6c <HAL_UART_RxCpltCallback>
}
 8011050:	e007      	b.n	8011062 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	699a      	ldr	r2, [r3, #24]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f042 0208 	orr.w	r2, r2, #8
 8011060:	619a      	str	r2, [r3, #24]
}
 8011062:	bf00      	nop
 8011064:	3770      	adds	r7, #112	@ 0x70
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	58000c00 	.word	0x58000c00

08011070 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b09c      	sub	sp, #112	@ 0x70
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801107e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011088:	2b22      	cmp	r3, #34	@ 0x22
 801108a:	f040 80be 	bne.w	801120a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011094:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801109c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801109e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80110a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80110a6:	4013      	ands	r3, r2
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110b2:	1c9a      	adds	r2, r3, #2
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110be:	b29b      	uxth	r3, r3
 80110c0:	3b01      	subs	r3, #1
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f040 80a1 	bne.w	801121a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e0:	e853 3f00 	ldrex	r3, [r3]
 80110e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80110e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80110ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	461a      	mov	r2, r3
 80110f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80110f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80110fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110fe:	e841 2300 	strex	r3, r2, [r1]
 8011102:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1e6      	bne.n	80110d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	3308      	adds	r3, #8
 8011110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011114:	e853 3f00 	ldrex	r3, [r3]
 8011118:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801111a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801111c:	f023 0301 	bic.w	r3, r3, #1
 8011120:	663b      	str	r3, [r7, #96]	@ 0x60
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	3308      	adds	r3, #8
 8011128:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801112a:	643a      	str	r2, [r7, #64]	@ 0x40
 801112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801112e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011132:	e841 2300 	strex	r3, r2, [r1]
 8011136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1e5      	bne.n	801110a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2220      	movs	r2, #32
 8011142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2200      	movs	r2, #0
 801114a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4a33      	ldr	r2, [pc, #204]	@ (8011224 <UART_RxISR_16BIT+0x1b4>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d01f      	beq.n	801119c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011166:	2b00      	cmp	r3, #0
 8011168:	d018      	beq.n	801119c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	61fb      	str	r3, [r7, #28]
   return(result);
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801117e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801118a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801118e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011190:	e841 2300 	strex	r3, r2, [r1]
 8011194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1e6      	bne.n	801116a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d12e      	bne.n	8011202 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	e853 3f00 	ldrex	r3, [r3]
 80111b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	f023 0310 	bic.w	r3, r3, #16
 80111be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	461a      	mov	r2, r3
 80111c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111c8:	61bb      	str	r3, [r7, #24]
 80111ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111cc:	6979      	ldr	r1, [r7, #20]
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	e841 2300 	strex	r3, r2, [r1]
 80111d4:	613b      	str	r3, [r7, #16]
   return(result);
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1e6      	bne.n	80111aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	69db      	ldr	r3, [r3, #28]
 80111e2:	f003 0310 	and.w	r3, r3, #16
 80111e6:	2b10      	cmp	r3, #16
 80111e8:	d103      	bne.n	80111f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2210      	movs	r2, #16
 80111f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7fe f85e 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011200:	e00b      	b.n	801121a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7f2 feb2 	bl	8003f6c <HAL_UART_RxCpltCallback>
}
 8011208:	e007      	b.n	801121a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	699a      	ldr	r2, [r3, #24]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f042 0208 	orr.w	r2, r2, #8
 8011218:	619a      	str	r2, [r3, #24]
}
 801121a:	bf00      	nop
 801121c:	3770      	adds	r7, #112	@ 0x70
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	58000c00 	.word	0x58000c00

08011228 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b0ac      	sub	sp, #176	@ 0xb0
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011236:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	69db      	ldr	r3, [r3, #28]
 8011240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801125e:	2b22      	cmp	r3, #34	@ 0x22
 8011260:	f040 8180 	bne.w	8011564 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801126a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801126e:	e123      	b.n	80114b8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011276:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801127a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801127e:	b2d9      	uxtb	r1, r3
 8011280:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011284:	b2da      	uxtb	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801128a:	400a      	ands	r2, r1
 801128c:	b2d2      	uxtb	r2, r2
 801128e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	3b01      	subs	r3, #1
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	69db      	ldr	r3, [r3, #28]
 80112b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80112b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ba:	f003 0307 	and.w	r3, r3, #7
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d053      	beq.n	801136a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80112c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c6:	f003 0301 	and.w	r3, r3, #1
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d011      	beq.n	80112f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80112ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80112d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00b      	beq.n	80112f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2201      	movs	r2, #1
 80112e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112e8:	f043 0201 	orr.w	r2, r3, #1
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80112f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112f6:	f003 0302 	and.w	r3, r3, #2
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d011      	beq.n	8011322 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80112fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011302:	f003 0301 	and.w	r3, r3, #1
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00b      	beq.n	8011322 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2202      	movs	r2, #2
 8011310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011318:	f043 0204 	orr.w	r2, r3, #4
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011326:	f003 0304 	and.w	r3, r3, #4
 801132a:	2b00      	cmp	r3, #0
 801132c:	d011      	beq.n	8011352 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801132e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00b      	beq.n	8011352 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2204      	movs	r2, #4
 8011340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011348:	f043 0202 	orr.w	r2, r3, #2
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011358:	2b00      	cmp	r3, #0
 801135a:	d006      	beq.n	801136a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7fd ff99 	bl	800f294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011370:	b29b      	uxth	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	f040 80a0 	bne.w	80114b8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011380:	e853 3f00 	ldrex	r3, [r3]
 8011384:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801138c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	461a      	mov	r2, r3
 8011396:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801139a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801139c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801139e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80113a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80113a2:	e841 2300 	strex	r3, r2, [r1]
 80113a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80113a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1e4      	bne.n	8011378 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3308      	adds	r3, #8
 80113b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113b8:	e853 3f00 	ldrex	r3, [r3]
 80113bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80113be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113c0:	4b6e      	ldr	r3, [pc, #440]	@ (801157c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80113c2:	4013      	ands	r3, r2
 80113c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	3308      	adds	r3, #8
 80113ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80113d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80113d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80113d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80113da:	e841 2300 	strex	r3, r2, [r1]
 80113de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80113e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d1e3      	bne.n	80113ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2220      	movs	r2, #32
 80113ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2200      	movs	r2, #0
 80113f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4a60      	ldr	r2, [pc, #384]	@ (8011580 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d021      	beq.n	8011448 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801140e:	2b00      	cmp	r3, #0
 8011410:	d01a      	beq.n	8011448 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801141a:	e853 3f00 	ldrex	r3, [r3]
 801141e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	461a      	mov	r2, r3
 8011430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011434:	657b      	str	r3, [r7, #84]	@ 0x54
 8011436:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011438:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801143a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801143c:	e841 2300 	strex	r3, r2, [r1]
 8011440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1e4      	bne.n	8011412 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801144c:	2b01      	cmp	r3, #1
 801144e:	d130      	bne.n	80114b2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801145e:	e853 3f00 	ldrex	r3, [r3]
 8011462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011466:	f023 0310 	bic.w	r3, r3, #16
 801146a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	461a      	mov	r2, r3
 8011474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011478:	643b      	str	r3, [r7, #64]	@ 0x40
 801147a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801147e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011480:	e841 2300 	strex	r3, r2, [r1]
 8011484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011488:	2b00      	cmp	r3, #0
 801148a:	d1e4      	bne.n	8011456 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	69db      	ldr	r3, [r3, #28]
 8011492:	f003 0310 	and.w	r3, r3, #16
 8011496:	2b10      	cmp	r3, #16
 8011498:	d103      	bne.n	80114a2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2210      	movs	r2, #16
 80114a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80114a8:	4619      	mov	r1, r3
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7fd ff06 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
 80114b0:	e002      	b.n	80114b8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7f2 fd5a 	bl	8003f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80114b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d006      	beq.n	80114ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80114c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114c4:	f003 0320 	and.w	r3, r3, #32
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f47f aed1 	bne.w	8011270 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80114d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80114d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d049      	beq.n	8011574 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80114e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d242      	bcs.n	8011574 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3308      	adds	r3, #8
 80114f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f6:	6a3b      	ldr	r3, [r7, #32]
 80114f8:	e853 3f00 	ldrex	r3, [r3]
 80114fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	3308      	adds	r3, #8
 801150e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801151a:	e841 2300 	strex	r3, r2, [r1]
 801151e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1e3      	bne.n	80114ee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a16      	ldr	r2, [pc, #88]	@ (8011584 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801152a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	e853 3f00 	ldrex	r3, [r3]
 8011538:	60bb      	str	r3, [r7, #8]
   return(result);
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	f043 0320 	orr.w	r3, r3, #32
 8011540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	461a      	mov	r2, r3
 801154a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801154e:	61bb      	str	r3, [r7, #24]
 8011550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011552:	6979      	ldr	r1, [r7, #20]
 8011554:	69ba      	ldr	r2, [r7, #24]
 8011556:	e841 2300 	strex	r3, r2, [r1]
 801155a:	613b      	str	r3, [r7, #16]
   return(result);
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1e4      	bne.n	801152c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011562:	e007      	b.n	8011574 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	699a      	ldr	r2, [r3, #24]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f042 0208 	orr.w	r2, r2, #8
 8011572:	619a      	str	r2, [r3, #24]
}
 8011574:	bf00      	nop
 8011576:	37b0      	adds	r7, #176	@ 0xb0
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	effffffe 	.word	0xeffffffe
 8011580:	58000c00 	.word	0x58000c00
 8011584:	08010eb9 	.word	0x08010eb9

08011588 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b0ae      	sub	sp, #184	@ 0xb8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011596:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	69db      	ldr	r3, [r3, #28]
 80115a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80115be:	2b22      	cmp	r3, #34	@ 0x22
 80115c0:	f040 8184 	bne.w	80118cc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80115ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115ce:	e127      	b.n	8011820 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80115e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80115e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80115ea:	4013      	ands	r3, r2
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115f8:	1c9a      	adds	r2, r3, #2
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011604:	b29b      	uxth	r3, r3
 8011606:	3b01      	subs	r3, #1
 8011608:	b29a      	uxth	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	69db      	ldr	r3, [r3, #28]
 8011616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801161a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801161e:	f003 0307 	and.w	r3, r3, #7
 8011622:	2b00      	cmp	r3, #0
 8011624:	d053      	beq.n	80116ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	d011      	beq.n	8011656 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00b      	beq.n	8011656 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2201      	movs	r2, #1
 8011644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801164c:	f043 0201 	orr.w	r2, r3, #1
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801165a:	f003 0302 	and.w	r3, r3, #2
 801165e:	2b00      	cmp	r3, #0
 8011660:	d011      	beq.n	8011686 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011666:	f003 0301 	and.w	r3, r3, #1
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00b      	beq.n	8011686 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	2202      	movs	r2, #2
 8011674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801167c:	f043 0204 	orr.w	r2, r3, #4
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801168a:	f003 0304 	and.w	r3, r3, #4
 801168e:	2b00      	cmp	r3, #0
 8011690:	d011      	beq.n	80116b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011696:	f003 0301 	and.w	r3, r3, #1
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00b      	beq.n	80116b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2204      	movs	r2, #4
 80116a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116ac:	f043 0202 	orr.w	r2, r3, #2
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d006      	beq.n	80116ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7fd fde7 	bl	800f294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2200      	movs	r2, #0
 80116ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f040 80a2 	bne.w	8011820 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116e4:	e853 3f00 	ldrex	r3, [r3]
 80116e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80116ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011702:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011704:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011706:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801170a:	e841 2300 	strex	r3, r2, [r1]
 801170e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1e2      	bne.n	80116dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3308      	adds	r3, #8
 801171c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801171e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011720:	e853 3f00 	ldrex	r3, [r3]
 8011724:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011726:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011728:	4b6e      	ldr	r3, [pc, #440]	@ (80118e4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801172a:	4013      	ands	r3, r2
 801172c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3308      	adds	r3, #8
 8011736:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801173a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801173c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801173e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011740:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011742:	e841 2300 	strex	r3, r2, [r1]
 8011746:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1e3      	bne.n	8011716 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2220      	movs	r2, #32
 8011752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a60      	ldr	r2, [pc, #384]	@ (80118e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011768:	4293      	cmp	r3, r2
 801176a:	d021      	beq.n	80117b0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011776:	2b00      	cmp	r3, #0
 8011778:	d01a      	beq.n	80117b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011782:	e853 3f00 	ldrex	r3, [r3]
 8011786:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801178a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801178e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	461a      	mov	r2, r3
 8011798:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801179c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801179e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80117a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117a4:	e841 2300 	strex	r3, r2, [r1]
 80117a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80117aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1e4      	bne.n	801177a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d130      	bne.n	801181a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c6:	e853 3f00 	ldrex	r3, [r3]
 80117ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80117cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117ce:	f023 0310 	bic.w	r3, r3, #16
 80117d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80117e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80117e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117e8:	e841 2300 	strex	r3, r2, [r1]
 80117ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80117ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1e4      	bne.n	80117be <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	69db      	ldr	r3, [r3, #28]
 80117fa:	f003 0310 	and.w	r3, r3, #16
 80117fe:	2b10      	cmp	r3, #16
 8011800:	d103      	bne.n	801180a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2210      	movs	r2, #16
 8011808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7fd fd52 	bl	800f2bc <HAL_UARTEx_RxEventCallback>
 8011818:	e002      	b.n	8011820 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7f2 fba6 	bl	8003f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011820:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011824:	2b00      	cmp	r3, #0
 8011826:	d006      	beq.n	8011836 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801182c:	f003 0320 	and.w	r3, r3, #32
 8011830:	2b00      	cmp	r3, #0
 8011832:	f47f aecd 	bne.w	80115d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801183c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011840:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011844:	2b00      	cmp	r3, #0
 8011846:	d049      	beq.n	80118dc <UART_RxISR_16BIT_FIFOEN+0x354>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801184e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011852:	429a      	cmp	r2, r3
 8011854:	d242      	bcs.n	80118dc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3308      	adds	r3, #8
 801185c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011860:	e853 3f00 	ldrex	r3, [r3]
 8011864:	623b      	str	r3, [r7, #32]
   return(result);
 8011866:	6a3b      	ldr	r3, [r7, #32]
 8011868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801186c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	3308      	adds	r3, #8
 8011876:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801187a:	633a      	str	r2, [r7, #48]	@ 0x30
 801187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801187e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011882:	e841 2300 	strex	r3, r2, [r1]
 8011886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1e3      	bne.n	8011856 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4a16      	ldr	r2, [pc, #88]	@ (80118ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011892:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	e853 3f00 	ldrex	r3, [r3]
 80118a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	f043 0320 	orr.w	r3, r3, #32
 80118a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	461a      	mov	r2, r3
 80118b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118b6:	61fb      	str	r3, [r7, #28]
 80118b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ba:	69b9      	ldr	r1, [r7, #24]
 80118bc:	69fa      	ldr	r2, [r7, #28]
 80118be:	e841 2300 	strex	r3, r2, [r1]
 80118c2:	617b      	str	r3, [r7, #20]
   return(result);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d1e4      	bne.n	8011894 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118ca:	e007      	b.n	80118dc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	699a      	ldr	r2, [r3, #24]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f042 0208 	orr.w	r2, r2, #8
 80118da:	619a      	str	r2, [r3, #24]
}
 80118dc:	bf00      	nop
 80118de:	37b8      	adds	r7, #184	@ 0xb8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	effffffe 	.word	0xeffffffe
 80118e8:	58000c00 	.word	0x58000c00
 80118ec:	08011071 	.word	0x08011071

080118f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118f8:	bf00      	nop
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011920:	bf00      	nop
 8011922:	370c      	adds	r7, #12
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801192c:	b480      	push	{r7}
 801192e:	b085      	sub	sp, #20
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801193a:	2b01      	cmp	r3, #1
 801193c:	d101      	bne.n	8011942 <HAL_UARTEx_DisableFifoMode+0x16>
 801193e:	2302      	movs	r3, #2
 8011940:	e027      	b.n	8011992 <HAL_UARTEx_DisableFifoMode+0x66>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2201      	movs	r2, #1
 8011946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2224      	movs	r2, #36	@ 0x24
 801194e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f022 0201 	bic.w	r2, r2, #1
 8011968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2200      	movs	r2, #0
 8011976:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2220      	movs	r2, #32
 8011984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011990:	2300      	movs	r3, #0
}
 8011992:	4618      	mov	r0, r3
 8011994:	3714      	adds	r7, #20
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr

0801199e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d101      	bne.n	80119b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80119b2:	2302      	movs	r3, #2
 80119b4:	e02d      	b.n	8011a12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2224      	movs	r2, #36	@ 0x24
 80119c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f022 0201 	bic.w	r2, r2, #1
 80119dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 f850 	bl	8011a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	68fa      	ldr	r2, [r7, #12]
 80119fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2220      	movs	r2, #32
 8011a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b084      	sub	sp, #16
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d101      	bne.n	8011a32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a2e:	2302      	movs	r3, #2
 8011a30:	e02d      	b.n	8011a8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2201      	movs	r2, #1
 8011a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2224      	movs	r2, #36	@ 0x24
 8011a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f022 0201 	bic.w	r2, r2, #1
 8011a58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	683a      	ldr	r2, [r7, #0]
 8011a6a:	430a      	orrs	r2, r1
 8011a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 f812 	bl	8011a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2220      	movs	r2, #32
 8011a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b085      	sub	sp, #20
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d108      	bne.n	8011aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2201      	movs	r2, #1
 8011aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ab8:	e031      	b.n	8011b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011aba:	2310      	movs	r3, #16
 8011abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011abe:	2310      	movs	r3, #16
 8011ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	0e5b      	lsrs	r3, r3, #25
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	f003 0307 	and.w	r3, r3, #7
 8011ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	0f5b      	lsrs	r3, r3, #29
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	f003 0307 	and.w	r3, r3, #7
 8011ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ae2:	7bbb      	ldrb	r3, [r7, #14]
 8011ae4:	7b3a      	ldrb	r2, [r7, #12]
 8011ae6:	4911      	ldr	r1, [pc, #68]	@ (8011b2c <UARTEx_SetNbDataToProcess+0x94>)
 8011ae8:	5c8a      	ldrb	r2, [r1, r2]
 8011aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011aee:	7b3a      	ldrb	r2, [r7, #12]
 8011af0:	490f      	ldr	r1, [pc, #60]	@ (8011b30 <UARTEx_SetNbDataToProcess+0x98>)
 8011af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	7b7a      	ldrb	r2, [r7, #13]
 8011b04:	4909      	ldr	r1, [pc, #36]	@ (8011b2c <UARTEx_SetNbDataToProcess+0x94>)
 8011b06:	5c8a      	ldrb	r2, [r1, r2]
 8011b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b0c:	7b7a      	ldrb	r2, [r7, #13]
 8011b0e:	4908      	ldr	r1, [pc, #32]	@ (8011b30 <UARTEx_SetNbDataToProcess+0x98>)
 8011b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011b1e:	bf00      	nop
 8011b20:	3714      	adds	r7, #20
 8011b22:	46bd      	mov	sp, r7
 8011b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop
 8011b2c:	08018a04 	.word	0x08018a04
 8011b30:	08018a0c 	.word	0x08018a0c

08011b34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011b38:	4904      	ldr	r1, [pc, #16]	@ (8011b4c <MX_FATFS_Init+0x18>)
 8011b3a:	4805      	ldr	r0, [pc, #20]	@ (8011b50 <MX_FATFS_Init+0x1c>)
 8011b3c:	f001 fcd0 	bl	80134e0 <FATFS_LinkDriver>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	4b03      	ldr	r3, [pc, #12]	@ (8011b54 <MX_FATFS_Init+0x20>)
 8011b46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011b48:	bf00      	nop
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	24002924 	.word	0x24002924
 8011b50:	240000ac 	.word	0x240000ac
 8011b54:	24002920 	.word	0x24002920

08011b58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011b5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	4603      	mov	r3, r0
 8011b70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8011b72:	79fb      	ldrb	r3, [r7, #7]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f000 f9fd 	bl	8011f74 <SD_disk_initialize>
 8011b7a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8011b8e:	79fb      	ldrb	r3, [r7, #7]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 fad5 	bl	8012140 <SD_disk_status>
 8011b96:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3708      	adds	r7, #8
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60b9      	str	r1, [r7, #8]
 8011ba8:	607a      	str	r2, [r7, #4]
 8011baa:	603b      	str	r3, [r7, #0]
 8011bac:	4603      	mov	r3, r0
 8011bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8011bb0:	7bf8      	ldrb	r0, [r7, #15]
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	f000 fad8 	bl	801216c <SD_disk_read>
 8011bbc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
 8011bd0:	603b      	str	r3, [r7, #0]
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8011bd6:	7bf8      	ldrb	r0, [r7, #15]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	68b9      	ldr	r1, [r7, #8]
 8011bde:	f000 fb2f 	bl	8012240 <SD_disk_write>
 8011be2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	603a      	str	r2, [r7, #0]
 8011bf6:	71fb      	strb	r3, [r7, #7]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8011bfc:	79b9      	ldrb	r1, [r7, #6]
 8011bfe:	79fb      	ldrb	r3, [r7, #7]
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f000 fba0 	bl	8012348 <SD_disk_ioctl>
 8011c08:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8011c18:	2200      	movs	r2, #0
 8011c1a:	2110      	movs	r1, #16
 8011c1c:	4802      	ldr	r0, [pc, #8]	@ (8011c28 <SELECT+0x14>)
 8011c1e:	f7f7 f9b9 	bl	8008f94 <HAL_GPIO_WritePin>
}
 8011c22:	bf00      	nop
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	58020000 	.word	0x58020000

08011c2c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8011c30:	2201      	movs	r2, #1
 8011c32:	2110      	movs	r1, #16
 8011c34:	4802      	ldr	r0, [pc, #8]	@ (8011c40 <DESELECT+0x14>)
 8011c36:	f7f7 f9ad 	bl	8008f94 <HAL_GPIO_WritePin>
}
 8011c3a:	bf00      	nop
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	58020000 	.word	0x58020000

08011c44 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c4e:	bf00      	nop
 8011c50:	4b08      	ldr	r3, [pc, #32]	@ (8011c74 <SPI_TxByte+0x30>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	695b      	ldr	r3, [r3, #20]
 8011c56:	f003 0302 	and.w	r3, r3, #2
 8011c5a:	2b02      	cmp	r3, #2
 8011c5c:	d1f8      	bne.n	8011c50 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8011c5e:	1df9      	adds	r1, r7, #7
 8011c60:	2364      	movs	r3, #100	@ 0x64
 8011c62:	2201      	movs	r2, #1
 8011c64:	4803      	ldr	r0, [pc, #12]	@ (8011c74 <SPI_TxByte+0x30>)
 8011c66:	f7fa fa21 	bl	800c0ac <HAL_SPI_Transmit>
}
 8011c6a:	bf00      	nop
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	240022d4 	.word	0x240022d4

08011c78 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c84:	bf00      	nop
 8011c86:	4b08      	ldr	r3, [pc, #32]	@ (8011ca8 <SPI_TxBuffer+0x30>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	695b      	ldr	r3, [r3, #20]
 8011c8c:	f003 0302 	and.w	r3, r3, #2
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d1f8      	bne.n	8011c86 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8011c94:	887a      	ldrh	r2, [r7, #2]
 8011c96:	2364      	movs	r3, #100	@ 0x64
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	4803      	ldr	r0, [pc, #12]	@ (8011ca8 <SPI_TxBuffer+0x30>)
 8011c9c:	f7fa fa06 	bl	800c0ac <HAL_SPI_Transmit>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	240022d4 	.word	0x240022d4

08011cac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8011cb2:	23ff      	movs	r3, #255	@ 0xff
 8011cb4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011cb6:	bf00      	nop
 8011cb8:	4b09      	ldr	r3, [pc, #36]	@ (8011ce0 <SPI_RxByte+0x34>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	695b      	ldr	r3, [r3, #20]
 8011cbe:	f003 0302 	and.w	r3, r3, #2
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d1f8      	bne.n	8011cb8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8011cc6:	1dba      	adds	r2, r7, #6
 8011cc8:	1df9      	adds	r1, r7, #7
 8011cca:	2364      	movs	r3, #100	@ 0x64
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	2301      	movs	r3, #1
 8011cd0:	4803      	ldr	r0, [pc, #12]	@ (8011ce0 <SPI_RxByte+0x34>)
 8011cd2:	f7fa fe4b 	bl	800c96c <HAL_SPI_TransmitReceive>
  return data;
 8011cd6:	79bb      	ldrb	r3, [r7, #6]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	240022d4 	.word	0x240022d4

08011ce4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8011cec:	f7ff ffde 	bl	8011cac <SPI_RxByte>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	701a      	strb	r2, [r3, #0]
}
 8011cf8:	bf00      	nop
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8011d06:	4b0a      	ldr	r3, [pc, #40]	@ (8011d30 <SD_ReadyWait+0x30>)
 8011d08:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8011d0c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8011d0e:	f7ff ffcd 	bl	8011cac <SPI_RxByte>
 8011d12:	4603      	mov	r3, r0
 8011d14:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	2bff      	cmp	r3, #255	@ 0xff
 8011d1a:	d003      	beq.n	8011d24 <SD_ReadyWait+0x24>
 8011d1c:	4b04      	ldr	r3, [pc, #16]	@ (8011d30 <SD_ReadyWait+0x30>)
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d1f4      	bne.n	8011d0e <SD_ReadyWait+0xe>
  return res;
 8011d24:	79fb      	ldrb	r3, [r7, #7]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	2400292a 	.word	0x2400292a

08011d34 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8011d3a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8011d3e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8011d40:	f7ff ff74 	bl	8011c2c <DESELECT>
  for(int i = 0; i < 10; i++)
 8011d44:	2300      	movs	r3, #0
 8011d46:	60bb      	str	r3, [r7, #8]
 8011d48:	e005      	b.n	8011d56 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8011d4a:	20ff      	movs	r0, #255	@ 0xff
 8011d4c:	f7ff ff7a 	bl	8011c44 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	3301      	adds	r3, #1
 8011d54:	60bb      	str	r3, [r7, #8]
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2b09      	cmp	r3, #9
 8011d5a:	ddf6      	ble.n	8011d4a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8011d5c:	f7ff ff5a 	bl	8011c14 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8011d60:	2340      	movs	r3, #64	@ 0x40
 8011d62:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8011d70:	2300      	movs	r3, #0
 8011d72:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8011d74:	2395      	movs	r3, #149	@ 0x95
 8011d76:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8011d78:	463b      	mov	r3, r7
 8011d7a:	2106      	movs	r1, #6
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff ff7b 	bl	8011c78 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d82:	e002      	b.n	8011d8a <SD_PowerOn+0x56>
  {
    cnt--;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d8a:	f7ff ff8f 	bl	8011cac <SPI_RxByte>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d002      	beq.n	8011d9a <SD_PowerOn+0x66>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1f4      	bne.n	8011d84 <SD_PowerOn+0x50>
  }
  DESELECT();
 8011d9a:	f7ff ff47 	bl	8011c2c <DESELECT>
  SPI_TxByte(0XFF);
 8011d9e:	20ff      	movs	r0, #255	@ 0xff
 8011da0:	f7ff ff50 	bl	8011c44 <SPI_TxByte>
  PowerFlag = 1;
 8011da4:	4b03      	ldr	r3, [pc, #12]	@ (8011db4 <SD_PowerOn+0x80>)
 8011da6:	2201      	movs	r2, #1
 8011da8:	701a      	strb	r2, [r3, #0]
}
 8011daa:	bf00      	nop
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2400292d 	.word	0x2400292d

08011db8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8011db8:	b480      	push	{r7}
 8011dba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8011dbc:	4b03      	ldr	r3, [pc, #12]	@ (8011dcc <SD_PowerOff+0x14>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
}
 8011dc2:	bf00      	nop
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	2400292d 	.word	0x2400292d

08011dd0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	af00      	add	r7, sp, #0
  return PowerFlag;
 8011dd4:	4b03      	ldr	r3, [pc, #12]	@ (8011de4 <SD_CheckPower+0x14>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	2400292d 	.word	0x2400292d

08011de8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8011df2:	4b13      	ldr	r3, [pc, #76]	@ (8011e40 <SD_RxDataBlock+0x58>)
 8011df4:	22c8      	movs	r2, #200	@ 0xc8
 8011df6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8011df8:	f7ff ff58 	bl	8011cac <SPI_RxByte>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
 8011e02:	2bff      	cmp	r3, #255	@ 0xff
 8011e04:	d103      	bne.n	8011e0e <SD_RxDataBlock+0x26>
 8011e06:	4b0e      	ldr	r3, [pc, #56]	@ (8011e40 <SD_RxDataBlock+0x58>)
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1f4      	bne.n	8011df8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8011e0e:	7bfb      	ldrb	r3, [r7, #15]
 8011e10:	2bfe      	cmp	r3, #254	@ 0xfe
 8011e12:	d001      	beq.n	8011e18 <SD_RxDataBlock+0x30>
 8011e14:	2300      	movs	r3, #0
 8011e16:	e00f      	b.n	8011e38 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	607a      	str	r2, [r7, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7ff ff60 	bl	8011ce4 <SPI_RxBytePtr>
  } while(len--);
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	1e5a      	subs	r2, r3, #1
 8011e28:	603a      	str	r2, [r7, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f4      	bne.n	8011e18 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8011e2e:	f7ff ff3d 	bl	8011cac <SPI_RxByte>
  SPI_RxByte();
 8011e32:	f7ff ff3b 	bl	8011cac <SPI_RxByte>
  return TRUE;
 8011e36:	2301      	movs	r3, #1
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	24002928 	.word	0x24002928

08011e44 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8011e54:	f7ff ff54 	bl	8011d00 <SD_ReadyWait>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2bff      	cmp	r3, #255	@ 0xff
 8011e5c:	d001      	beq.n	8011e62 <SD_TxDataBlock+0x1e>
 8011e5e:	2300      	movs	r3, #0
 8011e60:	e02f      	b.n	8011ec2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8011e62:	78fb      	ldrb	r3, [r7, #3]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff feed 	bl	8011c44 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8011e6a:	78fb      	ldrb	r3, [r7, #3]
 8011e6c:	2bfd      	cmp	r3, #253	@ 0xfd
 8011e6e:	d020      	beq.n	8011eb2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8011e70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff feff 	bl	8011c78 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8011e7a:	f7ff ff17 	bl	8011cac <SPI_RxByte>
    SPI_RxByte();
 8011e7e:	f7ff ff15 	bl	8011cac <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8011e82:	e00b      	b.n	8011e9c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8011e84:	f7ff ff12 	bl	8011cac <SPI_RxByte>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8011e8c:	7bfb      	ldrb	r3, [r7, #15]
 8011e8e:	f003 031f 	and.w	r3, r3, #31
 8011e92:	2b05      	cmp	r3, #5
 8011e94:	d006      	beq.n	8011ea4 <SD_TxDataBlock+0x60>
      i++;
 8011e96:	7bbb      	ldrb	r3, [r7, #14]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8011e9c:	7bbb      	ldrb	r3, [r7, #14]
 8011e9e:	2b40      	cmp	r3, #64	@ 0x40
 8011ea0:	d9f0      	bls.n	8011e84 <SD_TxDataBlock+0x40>
 8011ea2:	e000      	b.n	8011ea6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8011ea4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8011ea6:	bf00      	nop
 8011ea8:	f7ff ff00 	bl	8011cac <SPI_RxByte>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d0fa      	beq.n	8011ea8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
 8011eb4:	f003 031f 	and.w	r3, r3, #31
 8011eb8:	2b05      	cmp	r3, #5
 8011eba:	d101      	bne.n	8011ec0 <SD_TxDataBlock+0x7c>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e000      	b.n	8011ec2 <SD_TxDataBlock+0x7e>

  return FALSE;
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	b084      	sub	sp, #16
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	6039      	str	r1, [r7, #0]
 8011ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8011ed6:	f7ff ff13 	bl	8011d00 <SD_ReadyWait>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2bff      	cmp	r3, #255	@ 0xff
 8011ede:	d001      	beq.n	8011ee4 <SD_SendCmd+0x1a>
 8011ee0:	23ff      	movs	r3, #255	@ 0xff
 8011ee2:	e042      	b.n	8011f6a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7ff feac 	bl	8011c44 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	0e1b      	lsrs	r3, r3, #24
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff fea6 	bl	8011c44 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	0c1b      	lsrs	r3, r3, #16
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff fea0 	bl	8011c44 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	0a1b      	lsrs	r3, r3, #8
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff fe9a 	bl	8011c44 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff fe95 	bl	8011c44 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8011f1a:	79fb      	ldrb	r3, [r7, #7]
 8011f1c:	2b40      	cmp	r3, #64	@ 0x40
 8011f1e:	d102      	bne.n	8011f26 <SD_SendCmd+0x5c>
 8011f20:	2395      	movs	r3, #149	@ 0x95
 8011f22:	73fb      	strb	r3, [r7, #15]
 8011f24:	e007      	b.n	8011f36 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8011f26:	79fb      	ldrb	r3, [r7, #7]
 8011f28:	2b48      	cmp	r3, #72	@ 0x48
 8011f2a:	d102      	bne.n	8011f32 <SD_SendCmd+0x68>
 8011f2c:	2387      	movs	r3, #135	@ 0x87
 8011f2e:	73fb      	strb	r3, [r7, #15]
 8011f30:	e001      	b.n	8011f36 <SD_SendCmd+0x6c>
  else crc = 1;
 8011f32:	2301      	movs	r3, #1
 8011f34:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8011f36:	7bfb      	ldrb	r3, [r7, #15]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ff fe83 	bl	8011c44 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b4c      	cmp	r3, #76	@ 0x4c
 8011f42:	d101      	bne.n	8011f48 <SD_SendCmd+0x7e>
 8011f44:	f7ff feb2 	bl	8011cac <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8011f48:	230a      	movs	r3, #10
 8011f4a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8011f4c:	f7ff feae 	bl	8011cac <SPI_RxByte>
 8011f50:	4603      	mov	r3, r0
 8011f52:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8011f54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	da05      	bge.n	8011f68 <SD_SendCmd+0x9e>
 8011f5c:	7bbb      	ldrb	r3, [r7, #14]
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	73bb      	strb	r3, [r7, #14]
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1f1      	bne.n	8011f4c <SD_SendCmd+0x82>

  return res;
 8011f68:	7b7b      	ldrb	r3, [r7, #13]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
	...

08011f74 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011f7e:	79fb      	ldrb	r3, [r7, #7]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d001      	beq.n	8011f88 <SD_disk_initialize+0x14>
 8011f84:	2301      	movs	r3, #1
 8011f86:	e0d1      	b.n	801212c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8011f88:	4b6a      	ldr	r3, [pc, #424]	@ (8012134 <SD_disk_initialize+0x1c0>)
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	f003 0302 	and.w	r3, r3, #2
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d003      	beq.n	8011f9e <SD_disk_initialize+0x2a>
 8011f96:	4b67      	ldr	r3, [pc, #412]	@ (8012134 <SD_disk_initialize+0x1c0>)
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	e0c6      	b.n	801212c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011f9e:	f7ff fec9 	bl	8011d34 <SD_PowerOn>
  /* slave select */
  SELECT();
 8011fa2:	f7ff fe37 	bl	8011c14 <SELECT>
  /* check disk type */
  type = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8011faa:	2100      	movs	r1, #0
 8011fac:	2040      	movs	r0, #64	@ 0x40
 8011fae:	f7ff ff8c 	bl	8011eca <SD_SendCmd>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	f040 80a1 	bne.w	80120fc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8011fba:	4b5f      	ldr	r3, [pc, #380]	@ (8012138 <SD_disk_initialize+0x1c4>)
 8011fbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fc0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8011fc2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8011fc6:	2048      	movs	r0, #72	@ 0x48
 8011fc8:	f7ff ff7f 	bl	8011eca <SD_SendCmd>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d155      	bne.n	801207e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	73fb      	strb	r3, [r7, #15]
 8011fd6:	e00c      	b.n	8011ff2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8011fd8:	7bfc      	ldrb	r4, [r7, #15]
 8011fda:	f7ff fe67 	bl	8011cac <SPI_RxByte>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	f104 0310 	add.w	r3, r4, #16
 8011fe6:	443b      	add	r3, r7
 8011fe8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	73fb      	strb	r3, [r7, #15]
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
 8011ff4:	2b03      	cmp	r3, #3
 8011ff6:	d9ef      	bls.n	8011fd8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8011ff8:	7abb      	ldrb	r3, [r7, #10]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d17e      	bne.n	80120fc <SD_disk_initialize+0x188>
 8011ffe:	7afb      	ldrb	r3, [r7, #11]
 8012000:	2baa      	cmp	r3, #170	@ 0xaa
 8012002:	d17b      	bne.n	80120fc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8012004:	2100      	movs	r1, #0
 8012006:	2077      	movs	r0, #119	@ 0x77
 8012008:	f7ff ff5f 	bl	8011eca <SD_SendCmd>
 801200c:	4603      	mov	r3, r0
 801200e:	2b01      	cmp	r3, #1
 8012010:	d807      	bhi.n	8012022 <SD_disk_initialize+0xae>
 8012012:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012016:	2069      	movs	r0, #105	@ 0x69
 8012018:	f7ff ff57 	bl	8011eca <SD_SendCmd>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d004      	beq.n	801202c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8012022:	4b45      	ldr	r3, [pc, #276]	@ (8012138 <SD_disk_initialize+0x1c4>)
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d1ec      	bne.n	8012004 <SD_disk_initialize+0x90>
 801202a:	e000      	b.n	801202e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801202c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 801202e:	4b42      	ldr	r3, [pc, #264]	@ (8012138 <SD_disk_initialize+0x1c4>)
 8012030:	881b      	ldrh	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d062      	beq.n	80120fc <SD_disk_initialize+0x188>
 8012036:	2100      	movs	r1, #0
 8012038:	207a      	movs	r0, #122	@ 0x7a
 801203a:	f7ff ff46 	bl	8011eca <SD_SendCmd>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d15b      	bne.n	80120fc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8012044:	2300      	movs	r3, #0
 8012046:	73fb      	strb	r3, [r7, #15]
 8012048:	e00c      	b.n	8012064 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801204a:	7bfc      	ldrb	r4, [r7, #15]
 801204c:	f7ff fe2e 	bl	8011cac <SPI_RxByte>
 8012050:	4603      	mov	r3, r0
 8012052:	461a      	mov	r2, r3
 8012054:	f104 0310 	add.w	r3, r4, #16
 8012058:	443b      	add	r3, r7
 801205a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801205e:	7bfb      	ldrb	r3, [r7, #15]
 8012060:	3301      	adds	r3, #1
 8012062:	73fb      	strb	r3, [r7, #15]
 8012064:	7bfb      	ldrb	r3, [r7, #15]
 8012066:	2b03      	cmp	r3, #3
 8012068:	d9ef      	bls.n	801204a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801206a:	7a3b      	ldrb	r3, [r7, #8]
 801206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <SD_disk_initialize+0x104>
 8012074:	230c      	movs	r3, #12
 8012076:	e000      	b.n	801207a <SD_disk_initialize+0x106>
 8012078:	2304      	movs	r3, #4
 801207a:	73bb      	strb	r3, [r7, #14]
 801207c:	e03e      	b.n	80120fc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 801207e:	2100      	movs	r1, #0
 8012080:	2077      	movs	r0, #119	@ 0x77
 8012082:	f7ff ff22 	bl	8011eca <SD_SendCmd>
 8012086:	4603      	mov	r3, r0
 8012088:	2b01      	cmp	r3, #1
 801208a:	d808      	bhi.n	801209e <SD_disk_initialize+0x12a>
 801208c:	2100      	movs	r1, #0
 801208e:	2069      	movs	r0, #105	@ 0x69
 8012090:	f7ff ff1b 	bl	8011eca <SD_SendCmd>
 8012094:	4603      	mov	r3, r0
 8012096:	2b01      	cmp	r3, #1
 8012098:	d801      	bhi.n	801209e <SD_disk_initialize+0x12a>
 801209a:	2302      	movs	r3, #2
 801209c:	e000      	b.n	80120a0 <SD_disk_initialize+0x12c>
 801209e:	2301      	movs	r3, #1
 80120a0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80120a2:	7bbb      	ldrb	r3, [r7, #14]
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d10e      	bne.n	80120c6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80120a8:	2100      	movs	r1, #0
 80120aa:	2077      	movs	r0, #119	@ 0x77
 80120ac:	f7ff ff0d 	bl	8011eca <SD_SendCmd>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d80e      	bhi.n	80120d4 <SD_disk_initialize+0x160>
 80120b6:	2100      	movs	r1, #0
 80120b8:	2069      	movs	r0, #105	@ 0x69
 80120ba:	f7ff ff06 	bl	8011eca <SD_SendCmd>
 80120be:	4603      	mov	r3, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d107      	bne.n	80120d4 <SD_disk_initialize+0x160>
 80120c4:	e00c      	b.n	80120e0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80120c6:	2100      	movs	r1, #0
 80120c8:	2041      	movs	r0, #65	@ 0x41
 80120ca:	f7ff fefe 	bl	8011eca <SD_SendCmd>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d004      	beq.n	80120de <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80120d4:	4b18      	ldr	r3, [pc, #96]	@ (8012138 <SD_disk_initialize+0x1c4>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1e2      	bne.n	80120a2 <SD_disk_initialize+0x12e>
 80120dc:	e000      	b.n	80120e0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80120de:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80120e0:	4b15      	ldr	r3, [pc, #84]	@ (8012138 <SD_disk_initialize+0x1c4>)
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d007      	beq.n	80120f8 <SD_disk_initialize+0x184>
 80120e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120ec:	2050      	movs	r0, #80	@ 0x50
 80120ee:	f7ff feec 	bl	8011eca <SD_SendCmd>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <SD_disk_initialize+0x188>
 80120f8:	2300      	movs	r3, #0
 80120fa:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80120fc:	4a0f      	ldr	r2, [pc, #60]	@ (801213c <SD_disk_initialize+0x1c8>)
 80120fe:	7bbb      	ldrb	r3, [r7, #14]
 8012100:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8012102:	f7ff fd93 	bl	8011c2c <DESELECT>
  SPI_RxByte();
 8012106:	f7ff fdd1 	bl	8011cac <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801210a:	7bbb      	ldrb	r3, [r7, #14]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d008      	beq.n	8012122 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8012110:	4b08      	ldr	r3, [pc, #32]	@ (8012134 <SD_disk_initialize+0x1c0>)
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	b2db      	uxtb	r3, r3
 8012116:	f023 0301 	bic.w	r3, r3, #1
 801211a:	b2da      	uxtb	r2, r3
 801211c:	4b05      	ldr	r3, [pc, #20]	@ (8012134 <SD_disk_initialize+0x1c0>)
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	e001      	b.n	8012126 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8012122:	f7ff fe49 	bl	8011db8 <SD_PowerOff>
  }
  return Stat;
 8012126:	4b03      	ldr	r3, [pc, #12]	@ (8012134 <SD_disk_initialize+0x1c0>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	b2db      	uxtb	r3, r3
}
 801212c:	4618      	mov	r0, r3
 801212e:	3714      	adds	r7, #20
 8012130:	46bd      	mov	sp, r7
 8012132:	bd90      	pop	{r4, r7, pc}
 8012134:	240000c0 	.word	0x240000c0
 8012138:	24002928 	.word	0x24002928
 801213c:	2400292c 	.word	0x2400292c

08012140 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012140:	b480      	push	{r7}
 8012142:	b083      	sub	sp, #12
 8012144:	af00      	add	r7, sp, #0
 8012146:	4603      	mov	r3, r0
 8012148:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801214a:	79fb      	ldrb	r3, [r7, #7]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <SD_disk_status+0x14>
 8012150:	2301      	movs	r3, #1
 8012152:	e002      	b.n	801215a <SD_disk_status+0x1a>
  return Stat;
 8012154:	4b04      	ldr	r3, [pc, #16]	@ (8012168 <SD_disk_status+0x28>)
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	b2db      	uxtb	r3, r3
}
 801215a:	4618      	mov	r0, r3
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	240000c0 	.word	0x240000c0

0801216c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	60b9      	str	r1, [r7, #8]
 8012174:	607a      	str	r2, [r7, #4]
 8012176:	603b      	str	r3, [r7, #0]
 8012178:	4603      	mov	r3, r0
 801217a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 801217c:	7bfb      	ldrb	r3, [r7, #15]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d102      	bne.n	8012188 <SD_disk_read+0x1c>
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <SD_disk_read+0x20>
 8012188:	2304      	movs	r3, #4
 801218a:	e051      	b.n	8012230 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801218c:	4b2a      	ldr	r3, [pc, #168]	@ (8012238 <SD_disk_read+0xcc>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	b2db      	uxtb	r3, r3
 8012192:	f003 0301 	and.w	r3, r3, #1
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <SD_disk_read+0x32>
 801219a:	2303      	movs	r3, #3
 801219c:	e048      	b.n	8012230 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801219e:	4b27      	ldr	r3, [pc, #156]	@ (801223c <SD_disk_read+0xd0>)
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	f003 0304 	and.w	r3, r3, #4
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <SD_disk_read+0x44>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	025b      	lsls	r3, r3, #9
 80121ae:	607b      	str	r3, [r7, #4]

  SELECT();
 80121b0:	f7ff fd30 	bl	8011c14 <SELECT>

  if (count == 1)
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d111      	bne.n	80121de <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80121ba:	6879      	ldr	r1, [r7, #4]
 80121bc:	2051      	movs	r0, #81	@ 0x51
 80121be:	f7ff fe84 	bl	8011eca <SD_SendCmd>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d129      	bne.n	801221c <SD_disk_read+0xb0>
 80121c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121cc:	68b8      	ldr	r0, [r7, #8]
 80121ce:	f7ff fe0b 	bl	8011de8 <SD_RxDataBlock>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d021      	beq.n	801221c <SD_disk_read+0xb0>
 80121d8:	2300      	movs	r3, #0
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	e01e      	b.n	801221c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80121de:	6879      	ldr	r1, [r7, #4]
 80121e0:	2052      	movs	r0, #82	@ 0x52
 80121e2:	f7ff fe72 	bl	8011eca <SD_SendCmd>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d117      	bne.n	801221c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80121ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121f0:	68b8      	ldr	r0, [r7, #8]
 80121f2:	f7ff fdf9 	bl	8011de8 <SD_RxDataBlock>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00a      	beq.n	8012212 <SD_disk_read+0xa6>
        buff += 512;
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012202:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	3b01      	subs	r3, #1
 8012208:	603b      	str	r3, [r7, #0]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1ed      	bne.n	80121ec <SD_disk_read+0x80>
 8012210:	e000      	b.n	8012214 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8012212:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8012214:	2100      	movs	r1, #0
 8012216:	204c      	movs	r0, #76	@ 0x4c
 8012218:	f7ff fe57 	bl	8011eca <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801221c:	f7ff fd06 	bl	8011c2c <DESELECT>
  SPI_RxByte();
 8012220:	f7ff fd44 	bl	8011cac <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	bf14      	ite	ne
 801222a:	2301      	movne	r3, #1
 801222c:	2300      	moveq	r3, #0
 801222e:	b2db      	uxtb	r3, r3
}
 8012230:	4618      	mov	r0, r3
 8012232:	3710      	adds	r7, #16
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	240000c0 	.word	0x240000c0
 801223c:	2400292c 	.word	0x2400292c

08012240 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d102      	bne.n	801225c <SD_disk_write+0x1c>
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d101      	bne.n	8012260 <SD_disk_write+0x20>
 801225c:	2304      	movs	r3, #4
 801225e:	e06b      	b.n	8012338 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012260:	4b37      	ldr	r3, [pc, #220]	@ (8012340 <SD_disk_write+0x100>)
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	b2db      	uxtb	r3, r3
 8012266:	f003 0301 	and.w	r3, r3, #1
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <SD_disk_write+0x32>
 801226e:	2303      	movs	r3, #3
 8012270:	e062      	b.n	8012338 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8012272:	4b33      	ldr	r3, [pc, #204]	@ (8012340 <SD_disk_write+0x100>)
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	b2db      	uxtb	r3, r3
 8012278:	f003 0304 	and.w	r3, r3, #4
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <SD_disk_write+0x44>
 8012280:	2302      	movs	r3, #2
 8012282:	e059      	b.n	8012338 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8012284:	4b2f      	ldr	r3, [pc, #188]	@ (8012344 <SD_disk_write+0x104>)
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	f003 0304 	and.w	r3, r3, #4
 801228c:	2b00      	cmp	r3, #0
 801228e:	d102      	bne.n	8012296 <SD_disk_write+0x56>
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	025b      	lsls	r3, r3, #9
 8012294:	607b      	str	r3, [r7, #4]

  SELECT();
 8012296:	f7ff fcbd 	bl	8011c14 <SELECT>

  if (count == 1)
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d110      	bne.n	80122c2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	2058      	movs	r0, #88	@ 0x58
 80122a4:	f7ff fe11 	bl	8011eca <SD_SendCmd>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d13a      	bne.n	8012324 <SD_disk_write+0xe4>
 80122ae:	21fe      	movs	r1, #254	@ 0xfe
 80122b0:	68b8      	ldr	r0, [r7, #8]
 80122b2:	f7ff fdc7 	bl	8011e44 <SD_TxDataBlock>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d033      	beq.n	8012324 <SD_disk_write+0xe4>
      count = 0;
 80122bc:	2300      	movs	r3, #0
 80122be:	603b      	str	r3, [r7, #0]
 80122c0:	e030      	b.n	8012324 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80122c2:	4b20      	ldr	r3, [pc, #128]	@ (8012344 <SD_disk_write+0x104>)
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	f003 0302 	and.w	r3, r3, #2
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d007      	beq.n	80122de <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80122ce:	2100      	movs	r1, #0
 80122d0:	2077      	movs	r0, #119	@ 0x77
 80122d2:	f7ff fdfa 	bl	8011eca <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80122d6:	6839      	ldr	r1, [r7, #0]
 80122d8:	2057      	movs	r0, #87	@ 0x57
 80122da:	f7ff fdf6 	bl	8011eca <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80122de:	6879      	ldr	r1, [r7, #4]
 80122e0:	2059      	movs	r0, #89	@ 0x59
 80122e2:	f7ff fdf2 	bl	8011eca <SD_SendCmd>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d11b      	bne.n	8012324 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80122ec:	21fc      	movs	r1, #252	@ 0xfc
 80122ee:	68b8      	ldr	r0, [r7, #8]
 80122f0:	f7ff fda8 	bl	8011e44 <SD_TxDataBlock>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d00a      	beq.n	8012310 <SD_disk_write+0xd0>
        buff += 512;
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012300:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	3b01      	subs	r3, #1
 8012306:	603b      	str	r3, [r7, #0]
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1ee      	bne.n	80122ec <SD_disk_write+0xac>
 801230e:	e000      	b.n	8012312 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012310:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8012312:	21fd      	movs	r1, #253	@ 0xfd
 8012314:	2000      	movs	r0, #0
 8012316:	f7ff fd95 	bl	8011e44 <SD_TxDataBlock>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d101      	bne.n	8012324 <SD_disk_write+0xe4>
      {
        count = 1;
 8012320:	2301      	movs	r3, #1
 8012322:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8012324:	f7ff fc82 	bl	8011c2c <DESELECT>
  SPI_RxByte();
 8012328:	f7ff fcc0 	bl	8011cac <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	bf14      	ite	ne
 8012332:	2301      	movne	r3, #1
 8012334:	2300      	moveq	r3, #0
 8012336:	b2db      	uxtb	r3, r3
}
 8012338:	4618      	mov	r0, r3
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	240000c0 	.word	0x240000c0
 8012344:	2400292c 	.word	0x2400292c

08012348 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012348:	b590      	push	{r4, r7, lr}
 801234a:	b08b      	sub	sp, #44	@ 0x2c
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	603a      	str	r2, [r7, #0]
 8012352:	71fb      	strb	r3, [r7, #7]
 8012354:	460b      	mov	r3, r1
 8012356:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801235c:	79fb      	ldrb	r3, [r7, #7]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d001      	beq.n	8012366 <SD_disk_ioctl+0x1e>
 8012362:	2304      	movs	r3, #4
 8012364:	e113      	b.n	801258e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8012366:	2301      	movs	r3, #1
 8012368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 801236c:	79bb      	ldrb	r3, [r7, #6]
 801236e:	2b05      	cmp	r3, #5
 8012370:	d124      	bne.n	80123bc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8012372:	6a3b      	ldr	r3, [r7, #32]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	2b02      	cmp	r3, #2
 8012378:	d012      	beq.n	80123a0 <SD_disk_ioctl+0x58>
 801237a:	2b02      	cmp	r3, #2
 801237c:	dc1a      	bgt.n	80123b4 <SD_disk_ioctl+0x6c>
 801237e:	2b00      	cmp	r3, #0
 8012380:	d002      	beq.n	8012388 <SD_disk_ioctl+0x40>
 8012382:	2b01      	cmp	r3, #1
 8012384:	d006      	beq.n	8012394 <SD_disk_ioctl+0x4c>
 8012386:	e015      	b.n	80123b4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8012388:	f7ff fd16 	bl	8011db8 <SD_PowerOff>
      res = RES_OK;
 801238c:	2300      	movs	r3, #0
 801238e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012392:	e0fa      	b.n	801258a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8012394:	f7ff fcce 	bl	8011d34 <SD_PowerOn>
      res = RES_OK;
 8012398:	2300      	movs	r3, #0
 801239a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801239e:	e0f4      	b.n	801258a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80123a0:	6a3b      	ldr	r3, [r7, #32]
 80123a2:	1c5c      	adds	r4, r3, #1
 80123a4:	f7ff fd14 	bl	8011dd0 <SD_CheckPower>
 80123a8:	4603      	mov	r3, r0
 80123aa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80123ac:	2300      	movs	r3, #0
 80123ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80123b2:	e0ea      	b.n	801258a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80123b4:	2304      	movs	r3, #4
 80123b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123ba:	e0e6      	b.n	801258a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80123bc:	4b76      	ldr	r3, [pc, #472]	@ (8012598 <SD_disk_ioctl+0x250>)
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80123ca:	2303      	movs	r3, #3
 80123cc:	e0df      	b.n	801258e <SD_disk_ioctl+0x246>
    }
    SELECT();
 80123ce:	f7ff fc21 	bl	8011c14 <SELECT>
    switch (ctrl)
 80123d2:	79bb      	ldrb	r3, [r7, #6]
 80123d4:	2b0d      	cmp	r3, #13
 80123d6:	f200 80c9 	bhi.w	801256c <SD_disk_ioctl+0x224>
 80123da:	a201      	add	r2, pc, #4	@ (adr r2, 80123e0 <SD_disk_ioctl+0x98>)
 80123dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e0:	080124d7 	.word	0x080124d7
 80123e4:	08012419 	.word	0x08012419
 80123e8:	080124c7 	.word	0x080124c7
 80123ec:	0801256d 	.word	0x0801256d
 80123f0:	0801256d 	.word	0x0801256d
 80123f4:	0801256d 	.word	0x0801256d
 80123f8:	0801256d 	.word	0x0801256d
 80123fc:	0801256d 	.word	0x0801256d
 8012400:	0801256d 	.word	0x0801256d
 8012404:	0801256d 	.word	0x0801256d
 8012408:	0801256d 	.word	0x0801256d
 801240c:	080124e9 	.word	0x080124e9
 8012410:	0801250d 	.word	0x0801250d
 8012414:	08012531 	.word	0x08012531
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8012418:	2100      	movs	r1, #0
 801241a:	2049      	movs	r0, #73	@ 0x49
 801241c:	f7ff fd55 	bl	8011eca <SD_SendCmd>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	f040 80a6 	bne.w	8012574 <SD_disk_ioctl+0x22c>
 8012428:	f107 030c 	add.w	r3, r7, #12
 801242c:	2110      	movs	r1, #16
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff fcda 	bl	8011de8 <SD_RxDataBlock>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	f000 809c 	beq.w	8012574 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 801243c:	7b3b      	ldrb	r3, [r7, #12]
 801243e:	099b      	lsrs	r3, r3, #6
 8012440:	b2db      	uxtb	r3, r3
 8012442:	2b01      	cmp	r3, #1
 8012444:	d10d      	bne.n	8012462 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8012446:	7d7b      	ldrb	r3, [r7, #21]
 8012448:	461a      	mov	r2, r3
 801244a:	7d3b      	ldrb	r3, [r7, #20]
 801244c:	021b      	lsls	r3, r3, #8
 801244e:	b29b      	uxth	r3, r3
 8012450:	4413      	add	r3, r2
 8012452:	b29b      	uxth	r3, r3
 8012454:	3301      	adds	r3, #1
 8012456:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012458:	8bfb      	ldrh	r3, [r7, #30]
 801245a:	029a      	lsls	r2, r3, #10
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	e02d      	b.n	80124be <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012462:	7c7b      	ldrb	r3, [r7, #17]
 8012464:	f003 030f 	and.w	r3, r3, #15
 8012468:	b2da      	uxtb	r2, r3
 801246a:	7dbb      	ldrb	r3, [r7, #22]
 801246c:	09db      	lsrs	r3, r3, #7
 801246e:	b2db      	uxtb	r3, r3
 8012470:	4413      	add	r3, r2
 8012472:	b2da      	uxtb	r2, r3
 8012474:	7d7b      	ldrb	r3, [r7, #21]
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	b2db      	uxtb	r3, r3
 801247a:	f003 0306 	and.w	r3, r3, #6
 801247e:	b2db      	uxtb	r3, r3
 8012480:	4413      	add	r3, r2
 8012482:	b2db      	uxtb	r3, r3
 8012484:	3302      	adds	r3, #2
 8012486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801248a:	7d3b      	ldrb	r3, [r7, #20]
 801248c:	099b      	lsrs	r3, r3, #6
 801248e:	b2db      	uxtb	r3, r3
 8012490:	461a      	mov	r2, r3
 8012492:	7cfb      	ldrb	r3, [r7, #19]
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	b29b      	uxth	r3, r3
 8012498:	4413      	add	r3, r2
 801249a:	b29a      	uxth	r2, r3
 801249c:	7cbb      	ldrb	r3, [r7, #18]
 801249e:	029b      	lsls	r3, r3, #10
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	4413      	add	r3, r2
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	3301      	adds	r3, #1
 80124ae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80124b0:	8bfa      	ldrh	r2, [r7, #30]
 80124b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124b6:	3b09      	subs	r3, #9
 80124b8:	409a      	lsls	r2, r3
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80124be:	2300      	movs	r3, #0
 80124c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80124c4:	e056      	b.n	8012574 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124cc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80124ce:	2300      	movs	r3, #0
 80124d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124d4:	e055      	b.n	8012582 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80124d6:	f7ff fc13 	bl	8011d00 <SD_ReadyWait>
 80124da:	4603      	mov	r3, r0
 80124dc:	2bff      	cmp	r3, #255	@ 0xff
 80124de:	d14b      	bne.n	8012578 <SD_disk_ioctl+0x230>
 80124e0:	2300      	movs	r3, #0
 80124e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124e6:	e047      	b.n	8012578 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80124e8:	2100      	movs	r1, #0
 80124ea:	2049      	movs	r0, #73	@ 0x49
 80124ec:	f7ff fced 	bl	8011eca <SD_SendCmd>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d142      	bne.n	801257c <SD_disk_ioctl+0x234>
 80124f6:	2110      	movs	r1, #16
 80124f8:	6a38      	ldr	r0, [r7, #32]
 80124fa:	f7ff fc75 	bl	8011de8 <SD_RxDataBlock>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d03b      	beq.n	801257c <SD_disk_ioctl+0x234>
 8012504:	2300      	movs	r3, #0
 8012506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801250a:	e037      	b.n	801257c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801250c:	2100      	movs	r1, #0
 801250e:	204a      	movs	r0, #74	@ 0x4a
 8012510:	f7ff fcdb 	bl	8011eca <SD_SendCmd>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d132      	bne.n	8012580 <SD_disk_ioctl+0x238>
 801251a:	2110      	movs	r1, #16
 801251c:	6a38      	ldr	r0, [r7, #32]
 801251e:	f7ff fc63 	bl	8011de8 <SD_RxDataBlock>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d02b      	beq.n	8012580 <SD_disk_ioctl+0x238>
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801252e:	e027      	b.n	8012580 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8012530:	2100      	movs	r1, #0
 8012532:	207a      	movs	r0, #122	@ 0x7a
 8012534:	f7ff fcc9 	bl	8011eca <SD_SendCmd>
 8012538:	4603      	mov	r3, r0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d116      	bne.n	801256c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 801253e:	2300      	movs	r3, #0
 8012540:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012544:	e00b      	b.n	801255e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8012546:	6a3c      	ldr	r4, [r7, #32]
 8012548:	1c63      	adds	r3, r4, #1
 801254a:	623b      	str	r3, [r7, #32]
 801254c:	f7ff fbae 	bl	8011cac <SPI_RxByte>
 8012550:	4603      	mov	r3, r0
 8012552:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8012554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012558:	3301      	adds	r3, #1
 801255a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801255e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012562:	2b03      	cmp	r3, #3
 8012564:	d9ef      	bls.n	8012546 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 801256c:	2304      	movs	r3, #4
 801256e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012572:	e006      	b.n	8012582 <SD_disk_ioctl+0x23a>
      break;
 8012574:	bf00      	nop
 8012576:	e004      	b.n	8012582 <SD_disk_ioctl+0x23a>
      break;
 8012578:	bf00      	nop
 801257a:	e002      	b.n	8012582 <SD_disk_ioctl+0x23a>
      break;
 801257c:	bf00      	nop
 801257e:	e000      	b.n	8012582 <SD_disk_ioctl+0x23a>
      break;
 8012580:	bf00      	nop
    }
    DESELECT();
 8012582:	f7ff fb53 	bl	8011c2c <DESELECT>
    SPI_RxByte();
 8012586:	f7ff fb91 	bl	8011cac <SPI_RxByte>
  }
  return res;
 801258a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801258e:	4618      	mov	r0, r3
 8012590:	372c      	adds	r7, #44	@ 0x2c
 8012592:	46bd      	mov	sp, r7
 8012594:	bd90      	pop	{r4, r7, pc}
 8012596:	bf00      	nop
 8012598:	240000c0 	.word	0x240000c0

0801259c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	4603      	mov	r3, r0
 80125a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80125a6:	79fb      	ldrb	r3, [r7, #7]
 80125a8:	4a08      	ldr	r2, [pc, #32]	@ (80125cc <disk_status+0x30>)
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	4413      	add	r3, r2
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	79fa      	ldrb	r2, [r7, #7]
 80125b4:	4905      	ldr	r1, [pc, #20]	@ (80125cc <disk_status+0x30>)
 80125b6:	440a      	add	r2, r1
 80125b8:	7a12      	ldrb	r2, [r2, #8]
 80125ba:	4610      	mov	r0, r2
 80125bc:	4798      	blx	r3
 80125be:	4603      	mov	r3, r0
 80125c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80125c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3710      	adds	r7, #16
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	24002930 	.word	0x24002930

080125d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b087      	sub	sp, #28
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	603b      	str	r3, [r7, #0]
 80125dc:	4603      	mov	r3, r0
 80125de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	4a0a      	ldr	r2, [pc, #40]	@ (801260c <disk_read+0x3c>)
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	689c      	ldr	r4, [r3, #8]
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
 80125ee:	4a07      	ldr	r2, [pc, #28]	@ (801260c <disk_read+0x3c>)
 80125f0:	4413      	add	r3, r2
 80125f2:	7a18      	ldrb	r0, [r3, #8]
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	68b9      	ldr	r1, [r7, #8]
 80125fa:	47a0      	blx	r4
 80125fc:	4603      	mov	r3, r0
 80125fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8012600:	7dfb      	ldrb	r3, [r7, #23]
}
 8012602:	4618      	mov	r0, r3
 8012604:	371c      	adds	r7, #28
 8012606:	46bd      	mov	sp, r7
 8012608:	bd90      	pop	{r4, r7, pc}
 801260a:	bf00      	nop
 801260c:	24002930 	.word	0x24002930

08012610 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b087      	sub	sp, #28
 8012614:	af00      	add	r7, sp, #0
 8012616:	60b9      	str	r1, [r7, #8]
 8012618:	607a      	str	r2, [r7, #4]
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	4603      	mov	r3, r0
 801261e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012620:	7bfb      	ldrb	r3, [r7, #15]
 8012622:	4a0a      	ldr	r2, [pc, #40]	@ (801264c <disk_write+0x3c>)
 8012624:	009b      	lsls	r3, r3, #2
 8012626:	4413      	add	r3, r2
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	68dc      	ldr	r4, [r3, #12]
 801262c:	7bfb      	ldrb	r3, [r7, #15]
 801262e:	4a07      	ldr	r2, [pc, #28]	@ (801264c <disk_write+0x3c>)
 8012630:	4413      	add	r3, r2
 8012632:	7a18      	ldrb	r0, [r3, #8]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	68b9      	ldr	r1, [r7, #8]
 801263a:	47a0      	blx	r4
 801263c:	4603      	mov	r3, r0
 801263e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012640:	7dfb      	ldrb	r3, [r7, #23]
}
 8012642:	4618      	mov	r0, r3
 8012644:	371c      	adds	r7, #28
 8012646:	46bd      	mov	sp, r7
 8012648:	bd90      	pop	{r4, r7, pc}
 801264a:	bf00      	nop
 801264c:	24002930 	.word	0x24002930

08012650 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	4603      	mov	r3, r0
 8012658:	603a      	str	r2, [r7, #0]
 801265a:	71fb      	strb	r3, [r7, #7]
 801265c:	460b      	mov	r3, r1
 801265e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012660:	79fb      	ldrb	r3, [r7, #7]
 8012662:	4a09      	ldr	r2, [pc, #36]	@ (8012688 <disk_ioctl+0x38>)
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	4413      	add	r3, r2
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	691b      	ldr	r3, [r3, #16]
 801266c:	79fa      	ldrb	r2, [r7, #7]
 801266e:	4906      	ldr	r1, [pc, #24]	@ (8012688 <disk_ioctl+0x38>)
 8012670:	440a      	add	r2, r1
 8012672:	7a10      	ldrb	r0, [r2, #8]
 8012674:	79b9      	ldrb	r1, [r7, #6]
 8012676:	683a      	ldr	r2, [r7, #0]
 8012678:	4798      	blx	r3
 801267a:	4603      	mov	r3, r0
 801267c:	73fb      	strb	r3, [r7, #15]
  return res;
 801267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	24002930 	.word	0x24002930

0801268c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801268c:	b480      	push	{r7}
 801268e:	b085      	sub	sp, #20
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	3301      	adds	r3, #1
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801269c:	89fb      	ldrh	r3, [r7, #14]
 801269e:	021b      	lsls	r3, r3, #8
 80126a0:	b21a      	sxth	r2, r3
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	b21b      	sxth	r3, r3
 80126a8:	4313      	orrs	r3, r2
 80126aa:	b21b      	sxth	r3, r3
 80126ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80126ae:	89fb      	ldrh	r3, [r7, #14]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr

080126bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	3303      	adds	r3, #3
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	021b      	lsls	r3, r3, #8
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	3202      	adds	r2, #2
 80126d4:	7812      	ldrb	r2, [r2, #0]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	021b      	lsls	r3, r3, #8
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	3201      	adds	r2, #1
 80126e2:	7812      	ldrb	r2, [r2, #0]
 80126e4:	4313      	orrs	r3, r2
 80126e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	021b      	lsls	r3, r3, #8
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	7812      	ldrb	r2, [r2, #0]
 80126f0:	4313      	orrs	r3, r2
 80126f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80126f4:	68fb      	ldr	r3, [r7, #12]
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3714      	adds	r7, #20
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr

08012702 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
 801270a:	460b      	mov	r3, r1
 801270c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	1c5a      	adds	r2, r3, #1
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	887a      	ldrh	r2, [r7, #2]
 8012716:	b2d2      	uxtb	r2, r2
 8012718:	701a      	strb	r2, [r3, #0]
 801271a:	887b      	ldrh	r3, [r7, #2]
 801271c:	0a1b      	lsrs	r3, r3, #8
 801271e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	607a      	str	r2, [r7, #4]
 8012726:	887a      	ldrh	r2, [r7, #2]
 8012728:	b2d2      	uxtb	r2, r2
 801272a:	701a      	strb	r2, [r3, #0]
}
 801272c:	bf00      	nop
 801272e:	370c      	adds	r7, #12
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	1c5a      	adds	r2, r3, #1
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	b2d2      	uxtb	r2, r2
 801274c:	701a      	strb	r2, [r3, #0]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	0a1b      	lsrs	r3, r3, #8
 8012752:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	1c5a      	adds	r2, r3, #1
 8012758:	607a      	str	r2, [r7, #4]
 801275a:	683a      	ldr	r2, [r7, #0]
 801275c:	b2d2      	uxtb	r2, r2
 801275e:	701a      	strb	r2, [r3, #0]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	0a1b      	lsrs	r3, r3, #8
 8012764:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	1c5a      	adds	r2, r3, #1
 801276a:	607a      	str	r2, [r7, #4]
 801276c:	683a      	ldr	r2, [r7, #0]
 801276e:	b2d2      	uxtb	r2, r2
 8012770:	701a      	strb	r2, [r3, #0]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	0a1b      	lsrs	r3, r3, #8
 8012776:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	1c5a      	adds	r2, r3, #1
 801277c:	607a      	str	r2, [r7, #4]
 801277e:	683a      	ldr	r2, [r7, #0]
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]
}
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012790:	b480      	push	{r7}
 8012792:	b087      	sub	sp, #28
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00d      	beq.n	80127c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80127aa:	693a      	ldr	r2, [r7, #16]
 80127ac:	1c53      	adds	r3, r2, #1
 80127ae:	613b      	str	r3, [r7, #16]
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	1c59      	adds	r1, r3, #1
 80127b4:	6179      	str	r1, [r7, #20]
 80127b6:	7812      	ldrb	r2, [r2, #0]
 80127b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3b01      	subs	r3, #1
 80127be:	607b      	str	r3, [r7, #4]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1f1      	bne.n	80127aa <mem_cpy+0x1a>
	}
}
 80127c6:	bf00      	nop
 80127c8:	371c      	adds	r7, #28
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80127d2:	b480      	push	{r7}
 80127d4:	b087      	sub	sp, #28
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	60f8      	str	r0, [r7, #12]
 80127da:	60b9      	str	r1, [r7, #8]
 80127dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	1c5a      	adds	r2, r3, #1
 80127e6:	617a      	str	r2, [r7, #20]
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	b2d2      	uxtb	r2, r2
 80127ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	3b01      	subs	r3, #1
 80127f2:	607b      	str	r3, [r7, #4]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1f3      	bne.n	80127e2 <mem_set+0x10>
}
 80127fa:	bf00      	nop
 80127fc:	bf00      	nop
 80127fe:	371c      	adds	r7, #28
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr

08012808 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d009      	beq.n	801282a <lock_fs+0x22>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	4618      	mov	r0, r3
 801281c:	f000 fe6f 	bl	80134fe <ff_req_grant>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d001      	beq.n	801282a <lock_fs+0x22>
 8012826:	2301      	movs	r3, #1
 8012828:	e000      	b.n	801282c <lock_fs+0x24>
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	3708      	adds	r7, #8
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	460b      	mov	r3, r1
 801283e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00d      	beq.n	8012862 <unlock_fs+0x2e>
 8012846:	78fb      	ldrb	r3, [r7, #3]
 8012848:	2b0c      	cmp	r3, #12
 801284a:	d00a      	beq.n	8012862 <unlock_fs+0x2e>
 801284c:	78fb      	ldrb	r3, [r7, #3]
 801284e:	2b0b      	cmp	r3, #11
 8012850:	d007      	beq.n	8012862 <unlock_fs+0x2e>
 8012852:	78fb      	ldrb	r3, [r7, #3]
 8012854:	2b0f      	cmp	r3, #15
 8012856:	d004      	beq.n	8012862 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	4618      	mov	r0, r3
 801285e:	f000 fe63 	bl	8013528 <ff_rel_grant>
	}
}
 8012862:	bf00      	nop
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b086      	sub	sp, #24
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	78db      	ldrb	r3, [r3, #3]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d034      	beq.n	80128e8 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012882:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7858      	ldrb	r0, [r3, #1]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801288e:	2301      	movs	r3, #1
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	f7ff febd 	bl	8012610 <disk_write>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <sync_window+0x38>
			res = FR_DISK_ERR;
 801289c:	2301      	movs	r3, #1
 801289e:	73fb      	strb	r3, [r7, #15]
 80128a0:	e022      	b.n	80128e8 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2200      	movs	r2, #0
 80128a6:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128ac:	697a      	ldr	r2, [r7, #20]
 80128ae:	1ad2      	subs	r2, r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6a1b      	ldr	r3, [r3, #32]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d217      	bcs.n	80128e8 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	789b      	ldrb	r3, [r3, #2]
 80128bc:	613b      	str	r3, [r7, #16]
 80128be:	e010      	b.n	80128e2 <sync_window+0x78>
					wsect += fs->fsize;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6a1b      	ldr	r3, [r3, #32]
 80128c4:	697a      	ldr	r2, [r7, #20]
 80128c6:	4413      	add	r3, r2
 80128c8:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	7858      	ldrb	r0, [r3, #1]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80128d4:	2301      	movs	r3, #1
 80128d6:	697a      	ldr	r2, [r7, #20]
 80128d8:	f7ff fe9a 	bl	8012610 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	3b01      	subs	r3, #1
 80128e0:	613b      	str	r3, [r7, #16]
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d8eb      	bhi.n	80128c0 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3718      	adds	r7, #24
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}

080128f2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128f2:	b580      	push	{r7, lr}
 80128f4:	b084      	sub	sp, #16
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	6078      	str	r0, [r7, #4]
 80128fa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128fc:	2300      	movs	r3, #0
 80128fe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012904:	683a      	ldr	r2, [r7, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d01b      	beq.n	8012942 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff ffad 	bl	801286a <sync_window>
 8012910:	4603      	mov	r3, r0
 8012912:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012914:	7bfb      	ldrb	r3, [r7, #15]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d113      	bne.n	8012942 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	7858      	ldrb	r0, [r3, #1]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012924:	2301      	movs	r3, #1
 8012926:	683a      	ldr	r2, [r7, #0]
 8012928:	f7ff fe52 	bl	80125d0 <disk_read>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d004      	beq.n	801293c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012932:	f04f 33ff 	mov.w	r3, #4294967295
 8012936:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012938:	2301      	movs	r3, #1
 801293a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8012942:	7bfb      	ldrb	r3, [r7, #15]
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7ff ff88 	bl	801286a <sync_window>
 801295a:	4603      	mov	r3, r0
 801295c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801295e:	7bfb      	ldrb	r3, [r7, #15]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d158      	bne.n	8012a16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b03      	cmp	r3, #3
 801296a:	d148      	bne.n	80129fe <sync_fs+0xb2>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	791b      	ldrb	r3, [r3, #4]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d144      	bne.n	80129fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	3338      	adds	r3, #56	@ 0x38
 8012978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801297c:	2100      	movs	r1, #0
 801297e:	4618      	mov	r0, r3
 8012980:	f7ff ff27 	bl	80127d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	3338      	adds	r3, #56	@ 0x38
 8012988:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801298c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff feb6 	bl	8012702 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3338      	adds	r3, #56	@ 0x38
 801299a:	4921      	ldr	r1, [pc, #132]	@ (8012a20 <sync_fs+0xd4>)
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff fecb 	bl	8012738 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3338      	adds	r3, #56	@ 0x38
 80129a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80129aa:	491e      	ldr	r1, [pc, #120]	@ (8012a24 <sync_fs+0xd8>)
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ff fec3 	bl	8012738 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3338      	adds	r3, #56	@ 0x38
 80129b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	699b      	ldr	r3, [r3, #24]
 80129be:	4619      	mov	r1, r3
 80129c0:	4610      	mov	r0, r2
 80129c2:	f7ff feb9 	bl	8012738 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	3338      	adds	r3, #56	@ 0x38
 80129ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	695b      	ldr	r3, [r3, #20]
 80129d2:	4619      	mov	r1, r3
 80129d4:	4610      	mov	r0, r2
 80129d6:	f7ff feaf 	bl	8012738 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129de:	1c5a      	adds	r2, r3, #1
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	7858      	ldrb	r0, [r3, #1]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129f2:	2301      	movs	r3, #1
 80129f4:	f7ff fe0c 	bl	8012610 <disk_write>
			fs->fsi_flag = 0;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	785b      	ldrb	r3, [r3, #1]
 8012a02:	2200      	movs	r2, #0
 8012a04:	2100      	movs	r1, #0
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7ff fe22 	bl	8012650 <disk_ioctl>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <sync_fs+0xca>
 8012a12:	2301      	movs	r3, #1
 8012a14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	41615252 	.word	0x41615252
 8012a24:	61417272 	.word	0x61417272

08012a28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	3b02      	subs	r3, #2
 8012a36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	69db      	ldr	r3, [r3, #28]
 8012a3c:	3b02      	subs	r3, #2
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d301      	bcc.n	8012a48 <clust2sect+0x20>
 8012a44:	2300      	movs	r3, #0
 8012a46:	e008      	b.n	8012a5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	895b      	ldrh	r3, [r3, #10]
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	fb03 f202 	mul.w	r2, r3, r2
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a58:	4413      	add	r3, r2
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b086      	sub	sp, #24
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d904      	bls.n	8012a86 <get_fat+0x20>
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	69db      	ldr	r3, [r3, #28]
 8012a80:	683a      	ldr	r2, [r7, #0]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d302      	bcc.n	8012a8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a86:	2301      	movs	r3, #1
 8012a88:	617b      	str	r3, [r7, #20]
 8012a8a:	e08e      	b.n	8012baa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b03      	cmp	r3, #3
 8012a98:	d061      	beq.n	8012b5e <get_fat+0xf8>
 8012a9a:	2b03      	cmp	r3, #3
 8012a9c:	dc7b      	bgt.n	8012b96 <get_fat+0x130>
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d002      	beq.n	8012aa8 <get_fat+0x42>
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	d041      	beq.n	8012b2a <get_fat+0xc4>
 8012aa6:	e076      	b.n	8012b96 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	60fb      	str	r3, [r7, #12]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	085b      	lsrs	r3, r3, #1
 8012ab0:	68fa      	ldr	r2, [r7, #12]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	0a5b      	lsrs	r3, r3, #9
 8012abe:	4413      	add	r3, r2
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	6938      	ldr	r0, [r7, #16]
 8012ac4:	f7ff ff15 	bl	80128f2 <move_window>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d166      	bne.n	8012b9c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	1c5a      	adds	r2, r3, #1
 8012ad2:	60fa      	str	r2, [r7, #12]
 8012ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ad8:	693a      	ldr	r2, [r7, #16]
 8012ada:	4413      	add	r3, r2
 8012adc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012ae0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	0a5b      	lsrs	r3, r3, #9
 8012aea:	4413      	add	r3, r2
 8012aec:	4619      	mov	r1, r3
 8012aee:	6938      	ldr	r0, [r7, #16]
 8012af0:	f7ff feff 	bl	80128f2 <move_window>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d152      	bne.n	8012ba0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b00:	693a      	ldr	r2, [r7, #16]
 8012b02:	4413      	add	r3, r2
 8012b04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012b08:	021b      	lsls	r3, r3, #8
 8012b0a:	68ba      	ldr	r2, [r7, #8]
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	f003 0301 	and.w	r3, r3, #1
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d002      	beq.n	8012b20 <get_fat+0xba>
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	091b      	lsrs	r3, r3, #4
 8012b1e:	e002      	b.n	8012b26 <get_fat+0xc0>
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b26:	617b      	str	r3, [r7, #20]
			break;
 8012b28:	e03f      	b.n	8012baa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	0a1b      	lsrs	r3, r3, #8
 8012b32:	4413      	add	r3, r2
 8012b34:	4619      	mov	r1, r3
 8012b36:	6938      	ldr	r0, [r7, #16]
 8012b38:	f7ff fedb 	bl	80128f2 <move_window>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d130      	bne.n	8012ba4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	005b      	lsls	r3, r3, #1
 8012b4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b50:	4413      	add	r3, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff fd9a 	bl	801268c <ld_word>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	617b      	str	r3, [r7, #20]
			break;
 8012b5c:	e025      	b.n	8012baa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	09db      	lsrs	r3, r3, #7
 8012b66:	4413      	add	r3, r2
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6938      	ldr	r0, [r7, #16]
 8012b6c:	f7ff fec1 	bl	80128f2 <move_window>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d118      	bne.n	8012ba8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b84:	4413      	add	r3, r2
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7ff fd98 	bl	80126bc <ld_dword>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b92:	617b      	str	r3, [r7, #20]
			break;
 8012b94:	e009      	b.n	8012baa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b96:	2301      	movs	r3, #1
 8012b98:	617b      	str	r3, [r7, #20]
 8012b9a:	e006      	b.n	8012baa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b9c:	bf00      	nop
 8012b9e:	e004      	b.n	8012baa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ba0:	bf00      	nop
 8012ba2:	e002      	b.n	8012baa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ba4:	bf00      	nop
 8012ba6:	e000      	b.n	8012baa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ba8:	bf00      	nop
		}
	}

	return val;
 8012baa:	697b      	ldr	r3, [r7, #20]
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3718      	adds	r7, #24
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012bb4:	b590      	push	{r4, r7, lr}
 8012bb6:	b089      	sub	sp, #36	@ 0x24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	f240 80d9 	bls.w	8012d7e <put_fat+0x1ca>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	69db      	ldr	r3, [r3, #28]
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	f080 80d3 	bcs.w	8012d7e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2b03      	cmp	r3, #3
 8012bde:	f000 8096 	beq.w	8012d0e <put_fat+0x15a>
 8012be2:	2b03      	cmp	r3, #3
 8012be4:	f300 80cb 	bgt.w	8012d7e <put_fat+0x1ca>
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	d002      	beq.n	8012bf2 <put_fat+0x3e>
 8012bec:	2b02      	cmp	r3, #2
 8012bee:	d06e      	beq.n	8012cce <put_fat+0x11a>
 8012bf0:	e0c5      	b.n	8012d7e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	61bb      	str	r3, [r7, #24]
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	085b      	lsrs	r3, r3, #1
 8012bfa:	69ba      	ldr	r2, [r7, #24]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c04:	69bb      	ldr	r3, [r7, #24]
 8012c06:	0a5b      	lsrs	r3, r3, #9
 8012c08:	4413      	add	r3, r2
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f7ff fe70 	bl	80128f2 <move_window>
 8012c12:	4603      	mov	r3, r0
 8012c14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c16:	7ffb      	ldrb	r3, [r7, #31]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f040 80a9 	bne.w	8012d70 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	1c59      	adds	r1, r3, #1
 8012c28:	61b9      	str	r1, [r7, #24]
 8012c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c2e:	4413      	add	r3, r2
 8012c30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00d      	beq.n	8012c58 <put_fat+0xa4>
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	b25b      	sxtb	r3, r3
 8012c42:	f003 030f 	and.w	r3, r3, #15
 8012c46:	b25a      	sxtb	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	011b      	lsls	r3, r3, #4
 8012c4e:	b25b      	sxtb	r3, r3
 8012c50:	4313      	orrs	r3, r2
 8012c52:	b25b      	sxtb	r3, r3
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	e001      	b.n	8012c5c <put_fat+0xa8>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	697a      	ldr	r2, [r7, #20]
 8012c5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2201      	movs	r2, #1
 8012c64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	0a5b      	lsrs	r3, r3, #9
 8012c6e:	4413      	add	r3, r2
 8012c70:	4619      	mov	r1, r3
 8012c72:	68f8      	ldr	r0, [r7, #12]
 8012c74:	f7ff fe3d 	bl	80128f2 <move_window>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c7c:	7ffb      	ldrb	r3, [r7, #31]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d178      	bne.n	8012d74 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c8e:	4413      	add	r3, r2
 8012c90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	f003 0301 	and.w	r3, r3, #1
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d003      	beq.n	8012ca4 <put_fat+0xf0>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	091b      	lsrs	r3, r3, #4
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	e00e      	b.n	8012cc2 <put_fat+0x10e>
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	b25b      	sxtb	r3, r3
 8012caa:	f023 030f 	bic.w	r3, r3, #15
 8012cae:	b25a      	sxtb	r2, r3
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	0a1b      	lsrs	r3, r3, #8
 8012cb4:	b25b      	sxtb	r3, r3
 8012cb6:	f003 030f 	and.w	r3, r3, #15
 8012cba:	b25b      	sxtb	r3, r3
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	b25b      	sxtb	r3, r3
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	697a      	ldr	r2, [r7, #20]
 8012cc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	70da      	strb	r2, [r3, #3]
			break;
 8012ccc:	e057      	b.n	8012d7e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	0a1b      	lsrs	r3, r3, #8
 8012cd6:	4413      	add	r3, r2
 8012cd8:	4619      	mov	r1, r3
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f7ff fe09 	bl	80128f2 <move_window>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ce4:	7ffb      	ldrb	r3, [r7, #31]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d146      	bne.n	8012d78 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	005b      	lsls	r3, r3, #1
 8012cf4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012cf8:	4413      	add	r3, r2
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	b292      	uxth	r2, r2
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fcfe 	bl	8012702 <st_word>
			fs->wflag = 1;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2201      	movs	r2, #1
 8012d0a:	70da      	strb	r2, [r3, #3]
			break;
 8012d0c:	e037      	b.n	8012d7e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	09db      	lsrs	r3, r3, #7
 8012d16:	4413      	add	r3, r2
 8012d18:	4619      	mov	r1, r3
 8012d1a:	68f8      	ldr	r0, [r7, #12]
 8012d1c:	f7ff fde9 	bl	80128f2 <move_window>
 8012d20:	4603      	mov	r3, r0
 8012d22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d24:	7ffb      	ldrb	r3, [r7, #31]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d128      	bne.n	8012d7c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d3e:	4413      	add	r3, r2
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7ff fcbb 	bl	80126bc <ld_dword>
 8012d46:	4603      	mov	r3, r0
 8012d48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012d4c:	4323      	orrs	r3, r4
 8012d4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d5e:	4413      	add	r3, r2
 8012d60:	6879      	ldr	r1, [r7, #4]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7ff fce8 	bl	8012738 <st_dword>
			fs->wflag = 1;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	70da      	strb	r2, [r3, #3]
			break;
 8012d6e:	e006      	b.n	8012d7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d70:	bf00      	nop
 8012d72:	e004      	b.n	8012d7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d74:	bf00      	nop
 8012d76:	e002      	b.n	8012d7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d78:	bf00      	nop
 8012d7a:	e000      	b.n	8012d7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d7c:	bf00      	nop
		}
	}
	return res;
 8012d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3724      	adds	r7, #36	@ 0x24
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd90      	pop	{r4, r7, pc}

08012d88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b088      	sub	sp, #32
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10d      	bne.n	8012dba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	695b      	ldr	r3, [r3, #20]
 8012da2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d004      	beq.n	8012db4 <create_chain+0x2c>
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	69db      	ldr	r3, [r3, #28]
 8012dae:	69ba      	ldr	r2, [r7, #24]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d31b      	bcc.n	8012dec <create_chain+0x64>
 8012db4:	2301      	movs	r3, #1
 8012db6:	61bb      	str	r3, [r7, #24]
 8012db8:	e018      	b.n	8012dec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012dba:	6839      	ldr	r1, [r7, #0]
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f7ff fe52 	bl	8012a66 <get_fat>
 8012dc2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d801      	bhi.n	8012dce <create_chain+0x46>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e070      	b.n	8012eb0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd4:	d101      	bne.n	8012dda <create_chain+0x52>
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	e06a      	b.n	8012eb0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	69db      	ldr	r3, [r3, #28]
 8012dde:	68fa      	ldr	r2, [r7, #12]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d201      	bcs.n	8012de8 <create_chain+0x60>
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	e063      	b.n	8012eb0 <create_chain+0x128>
		scl = clst;
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	3301      	adds	r3, #1
 8012df4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	69fa      	ldr	r2, [r7, #28]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d307      	bcc.n	8012e10 <create_chain+0x88>
				ncl = 2;
 8012e00:	2302      	movs	r3, #2
 8012e02:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e04:	69fa      	ldr	r2, [r7, #28]
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d901      	bls.n	8012e10 <create_chain+0x88>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	e04f      	b.n	8012eb0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e10:	69f9      	ldr	r1, [r7, #28]
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7ff fe27 	bl	8012a66 <get_fat>
 8012e18:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00e      	beq.n	8012e3e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d003      	beq.n	8012e2e <create_chain+0xa6>
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e2c:	d101      	bne.n	8012e32 <create_chain+0xaa>
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	e03e      	b.n	8012eb0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e32:	69fa      	ldr	r2, [r7, #28]
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d1da      	bne.n	8012df0 <create_chain+0x68>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	e038      	b.n	8012eb0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e3e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e40:	f04f 32ff 	mov.w	r2, #4294967295
 8012e44:	69f9      	ldr	r1, [r7, #28]
 8012e46:	6938      	ldr	r0, [r7, #16]
 8012e48:	f7ff feb4 	bl	8012bb4 <put_fat>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e50:	7dfb      	ldrb	r3, [r7, #23]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d109      	bne.n	8012e6a <create_chain+0xe2>
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d006      	beq.n	8012e6a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e5c:	69fa      	ldr	r2, [r7, #28]
 8012e5e:	6839      	ldr	r1, [r7, #0]
 8012e60:	6938      	ldr	r0, [r7, #16]
 8012e62:	f7ff fea7 	bl	8012bb4 <put_fat>
 8012e66:	4603      	mov	r3, r0
 8012e68:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012e6a:	7dfb      	ldrb	r3, [r7, #23]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d116      	bne.n	8012e9e <create_chain+0x116>
		fs->last_clst = ncl;
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	69fa      	ldr	r2, [r7, #28]
 8012e74:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	699a      	ldr	r2, [r3, #24]
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	69db      	ldr	r3, [r3, #28]
 8012e7e:	3b02      	subs	r3, #2
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d804      	bhi.n	8012e8e <create_chain+0x106>
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	699b      	ldr	r3, [r3, #24]
 8012e88:	1e5a      	subs	r2, r3, #1
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	791b      	ldrb	r3, [r3, #4]
 8012e92:	f043 0301 	orr.w	r3, r3, #1
 8012e96:	b2da      	uxtb	r2, r3
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	711a      	strb	r2, [r3, #4]
 8012e9c:	e007      	b.n	8012eae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012e9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d102      	bne.n	8012eaa <create_chain+0x122>
 8012ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea8:	e000      	b.n	8012eac <create_chain+0x124>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012eae:	69fb      	ldr	r3, [r7, #28]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3720      	adds	r7, #32
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b087      	sub	sp, #28
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ecc:	3304      	adds	r3, #4
 8012ece:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	0a5b      	lsrs	r3, r3, #9
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	8952      	ldrh	r2, [r2, #10]
 8012ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8012edc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	1d1a      	adds	r2, r3, #4
 8012ee2:	613a      	str	r2, [r7, #16]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d101      	bne.n	8012ef2 <clmt_clust+0x3a>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	e010      	b.n	8012f14 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012ef2:	697a      	ldr	r2, [r7, #20]
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d307      	bcc.n	8012f0a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012efa:	697a      	ldr	r2, [r7, #20]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	617b      	str	r3, [r7, #20]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	3304      	adds	r3, #4
 8012f06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f08:	e7e9      	b.n	8012ede <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	4413      	add	r3, r2
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	371c      	adds	r7, #28
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	60f8      	str	r0, [r7, #12]
 8012f28:	60b9      	str	r1, [r7, #8]
 8012f2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	331a      	adds	r3, #26
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	b292      	uxth	r2, r2
 8012f34:	4611      	mov	r1, r2
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7ff fbe3 	bl	8012702 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	2b03      	cmp	r3, #3
 8012f42:	d109      	bne.n	8012f58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	f103 0214 	add.w	r2, r3, #20
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	0c1b      	lsrs	r3, r3, #16
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	4619      	mov	r1, r3
 8012f52:	4610      	mov	r0, r2
 8012f54:	f7ff fbd5 	bl	8012702 <st_word>
	}
}
 8012f58:	bf00      	nop
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f6a:	2309      	movs	r3, #9
 8012f6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d02e      	beq.n	8012fd2 <validate+0x72>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d02a      	beq.n	8012fd2 <validate+0x72>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d025      	beq.n	8012fd2 <validate+0x72>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	889a      	ldrh	r2, [r3, #4]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	88db      	ldrh	r3, [r3, #6]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d11e      	bne.n	8012fd2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7ff fc35 	bl	8012808 <lock_fs>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d014      	beq.n	8012fce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	785b      	ldrb	r3, [r3, #1]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff faf6 	bl	801259c <disk_status>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f003 0301 	and.w	r3, r3, #1
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <validate+0x60>
				res = FR_OK;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	73fb      	strb	r3, [r7, #15]
 8012fbe:	e008      	b.n	8012fd2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7ff fc34 	bl	8012834 <unlock_fs>
 8012fcc:	e001      	b.n	8012fd2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012fce:	230f      	movs	r3, #15
 8012fd0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012fd2:	7bfb      	ldrb	r3, [r7, #15]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d102      	bne.n	8012fde <validate+0x7e>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	e000      	b.n	8012fe0 <validate+0x80>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	683a      	ldr	r2, [r7, #0]
 8012fe2:	6013      	str	r3, [r2, #0]
	return res;
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b08c      	sub	sp, #48	@ 0x30
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	60f8      	str	r0, [r7, #12]
 8012ff6:	60b9      	str	r1, [r7, #8]
 8012ff8:	607a      	str	r2, [r7, #4]
 8012ffa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	2200      	movs	r2, #0
 8013004:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f107 0210 	add.w	r2, r7, #16
 801300c:	4611      	mov	r1, r2
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff ffa6 	bl	8012f60 <validate>
 8013014:	4603      	mov	r3, r0
 8013016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801301a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801301e:	2b00      	cmp	r3, #0
 8013020:	d107      	bne.n	8013032 <f_write+0x44>
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	7d5b      	ldrb	r3, [r3, #21]
 8013026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801302a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801302e:	2b00      	cmp	r3, #0
 8013030:	d009      	beq.n	8013046 <f_write+0x58>
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013038:	4611      	mov	r1, r2
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff fbfa 	bl	8012834 <unlock_fs>
 8013040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013044:	e173      	b.n	801332e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	7d1b      	ldrb	r3, [r3, #20]
 801304a:	f003 0302 	and.w	r3, r3, #2
 801304e:	2b00      	cmp	r3, #0
 8013050:	d106      	bne.n	8013060 <f_write+0x72>
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	2107      	movs	r1, #7
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fbec 	bl	8012834 <unlock_fs>
 801305c:	2307      	movs	r3, #7
 801305e:	e166      	b.n	801332e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	699a      	ldr	r2, [r3, #24]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	441a      	add	r2, r3
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	699b      	ldr	r3, [r3, #24]
 801306c:	429a      	cmp	r2, r3
 801306e:	f080 814b 	bcs.w	8013308 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	699b      	ldr	r3, [r3, #24]
 8013076:	43db      	mvns	r3, r3
 8013078:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801307a:	e145      	b.n	8013308 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	699b      	ldr	r3, [r3, #24]
 8013080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013084:	2b00      	cmp	r3, #0
 8013086:	f040 8101 	bne.w	801328c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	0a5b      	lsrs	r3, r3, #9
 8013090:	693a      	ldr	r2, [r7, #16]
 8013092:	8952      	ldrh	r2, [r2, #10]
 8013094:	3a01      	subs	r2, #1
 8013096:	4013      	ands	r3, r2
 8013098:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d14d      	bne.n	801313c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	699b      	ldr	r3, [r3, #24]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10c      	bne.n	80130c2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80130ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d11a      	bne.n	80130ea <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	2100      	movs	r1, #0
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7ff fe65 	bl	8012d88 <create_chain>
 80130be:	62b8      	str	r0, [r7, #40]	@ 0x28
 80130c0:	e013      	b.n	80130ea <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d007      	beq.n	80130da <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	699b      	ldr	r3, [r3, #24]
 80130ce:	4619      	mov	r1, r3
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f7ff fef1 	bl	8012eb8 <clmt_clust>
 80130d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80130d8:	e007      	b.n	80130ea <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	69db      	ldr	r3, [r3, #28]
 80130e0:	4619      	mov	r1, r3
 80130e2:	4610      	mov	r0, r2
 80130e4:	f7ff fe50 	bl	8012d88 <create_chain>
 80130e8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80130ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f000 8110 	beq.w	8013312 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80130f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d109      	bne.n	801310c <f_write+0x11e>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2202      	movs	r2, #2
 80130fc:	755a      	strb	r2, [r3, #21]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	2102      	movs	r1, #2
 8013102:	4618      	mov	r0, r3
 8013104:	f7ff fb96 	bl	8012834 <unlock_fs>
 8013108:	2302      	movs	r3, #2
 801310a:	e110      	b.n	801332e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013112:	d109      	bne.n	8013128 <f_write+0x13a>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2201      	movs	r2, #1
 8013118:	755a      	strb	r2, [r3, #21]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	2101      	movs	r1, #1
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff fb88 	bl	8012834 <unlock_fs>
 8013124:	2301      	movs	r3, #1
 8013126:	e102      	b.n	801332e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801312c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	689b      	ldr	r3, [r3, #8]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d102      	bne.n	801313c <f_write+0x14e>
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801313a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	7d1b      	ldrb	r3, [r3, #20]
 8013140:	b25b      	sxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	da1d      	bge.n	8013182 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	7858      	ldrb	r0, [r3, #1]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	6a1a      	ldr	r2, [r3, #32]
 8013154:	2301      	movs	r3, #1
 8013156:	f7ff fa5b 	bl	8012610 <disk_write>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d009      	beq.n	8013174 <f_write+0x186>
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2201      	movs	r2, #1
 8013164:	755a      	strb	r2, [r3, #21]
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2101      	movs	r1, #1
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff fb62 	bl	8012834 <unlock_fs>
 8013170:	2301      	movs	r3, #1
 8013172:	e0dc      	b.n	801332e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	7d1b      	ldrb	r3, [r3, #20]
 8013178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801317c:	b2da      	uxtb	r2, r3
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013182:	693a      	ldr	r2, [r7, #16]
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	69db      	ldr	r3, [r3, #28]
 8013188:	4619      	mov	r1, r3
 801318a:	4610      	mov	r0, r2
 801318c:	f7ff fc4c 	bl	8012a28 <clust2sect>
 8013190:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d109      	bne.n	80131ac <f_write+0x1be>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2202      	movs	r2, #2
 801319c:	755a      	strb	r2, [r3, #21]
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	2102      	movs	r1, #2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7ff fb46 	bl	8012834 <unlock_fs>
 80131a8:	2302      	movs	r3, #2
 80131aa:	e0c0      	b.n	801332e <f_write+0x340>
			sect += csect;
 80131ac:	697a      	ldr	r2, [r7, #20]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	4413      	add	r3, r2
 80131b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	0a5b      	lsrs	r3, r3, #9
 80131b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d041      	beq.n	8013244 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80131c0:	69ba      	ldr	r2, [r7, #24]
 80131c2:	6a3b      	ldr	r3, [r7, #32]
 80131c4:	4413      	add	r3, r2
 80131c6:	693a      	ldr	r2, [r7, #16]
 80131c8:	8952      	ldrh	r2, [r2, #10]
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d905      	bls.n	80131da <f_write+0x1ec>
					cc = fs->csize - csect;
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	895b      	ldrh	r3, [r3, #10]
 80131d2:	461a      	mov	r2, r3
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	1ad3      	subs	r3, r2, r3
 80131d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	7858      	ldrb	r0, [r3, #1]
 80131de:	6a3b      	ldr	r3, [r7, #32]
 80131e0:	697a      	ldr	r2, [r7, #20]
 80131e2:	69f9      	ldr	r1, [r7, #28]
 80131e4:	f7ff fa14 	bl	8012610 <disk_write>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d009      	beq.n	8013202 <f_write+0x214>
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2201      	movs	r2, #1
 80131f2:	755a      	strb	r2, [r3, #21]
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	2101      	movs	r1, #1
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7ff fb1b 	bl	8012834 <unlock_fs>
 80131fe:	2301      	movs	r3, #1
 8013200:	e095      	b.n	801332e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6a1a      	ldr	r2, [r3, #32]
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	1ad3      	subs	r3, r2, r3
 801320a:	6a3a      	ldr	r2, [r7, #32]
 801320c:	429a      	cmp	r2, r3
 801320e:	d915      	bls.n	801323c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6a1a      	ldr	r2, [r3, #32]
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	1ad3      	subs	r3, r2, r3
 801321e:	025b      	lsls	r3, r3, #9
 8013220:	69fa      	ldr	r2, [r7, #28]
 8013222:	4413      	add	r3, r2
 8013224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013228:	4619      	mov	r1, r3
 801322a:	f7ff fab1 	bl	8012790 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	7d1b      	ldrb	r3, [r3, #20]
 8013232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013236:	b2da      	uxtb	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801323c:	6a3b      	ldr	r3, [r7, #32]
 801323e:	025b      	lsls	r3, r3, #9
 8013240:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013242:	e044      	b.n	80132ce <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6a1b      	ldr	r3, [r3, #32]
 8013248:	697a      	ldr	r2, [r7, #20]
 801324a:	429a      	cmp	r2, r3
 801324c:	d01b      	beq.n	8013286 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	699a      	ldr	r2, [r3, #24]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013256:	429a      	cmp	r2, r3
 8013258:	d215      	bcs.n	8013286 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	7858      	ldrb	r0, [r3, #1]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013264:	2301      	movs	r3, #1
 8013266:	697a      	ldr	r2, [r7, #20]
 8013268:	f7ff f9b2 	bl	80125d0 <disk_read>
 801326c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801326e:	2b00      	cmp	r3, #0
 8013270:	d009      	beq.n	8013286 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2201      	movs	r2, #1
 8013276:	755a      	strb	r2, [r3, #21]
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	2101      	movs	r1, #1
 801327c:	4618      	mov	r0, r3
 801327e:	f7ff fad9 	bl	8012834 <unlock_fs>
 8013282:	2301      	movs	r3, #1
 8013284:	e053      	b.n	801332e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	697a      	ldr	r2, [r7, #20]
 801328a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	699b      	ldr	r3, [r3, #24]
 8013290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013294:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013298:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801329a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d901      	bls.n	80132a6 <f_write+0x2b8>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	699b      	ldr	r3, [r3, #24]
 80132b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132b4:	4413      	add	r3, r2
 80132b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132b8:	69f9      	ldr	r1, [r7, #28]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7ff fa68 	bl	8012790 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	7d1b      	ldrb	r3, [r3, #20]
 80132c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80132ce:	69fa      	ldr	r2, [r7, #28]
 80132d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d2:	4413      	add	r3, r2
 80132d4:	61fb      	str	r3, [r7, #28]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	699a      	ldr	r2, [r3, #24]
 80132da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132dc:	441a      	add	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	619a      	str	r2, [r3, #24]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	68da      	ldr	r2, [r3, #12]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	699b      	ldr	r3, [r3, #24]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	bf38      	it	cc
 80132ee:	461a      	movcc	r2, r3
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	60da      	str	r2, [r3, #12]
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132fa:	441a      	add	r2, r3
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f47f aeb6 	bne.w	801307c <f_write+0x8e>
 8013310:	e000      	b.n	8013314 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013312:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	7d1b      	ldrb	r3, [r3, #20]
 8013318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801331c:	b2da      	uxtb	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	2100      	movs	r1, #0
 8013326:	4618      	mov	r0, r3
 8013328:	f7ff fa84 	bl	8012834 <unlock_fs>
 801332c:	2300      	movs	r3, #0
}
 801332e:	4618      	mov	r0, r3
 8013330:	3730      	adds	r7, #48	@ 0x30
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}

08013336 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013336:	b580      	push	{r7, lr}
 8013338:	b086      	sub	sp, #24
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f107 0208 	add.w	r2, r7, #8
 8013344:	4611      	mov	r1, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff fe0a 	bl	8012f60 <validate>
 801334c:	4603      	mov	r3, r0
 801334e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013350:	7dfb      	ldrb	r3, [r7, #23]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d16d      	bne.n	8013432 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	7d1b      	ldrb	r3, [r3, #20]
 801335a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801335e:	2b00      	cmp	r3, #0
 8013360:	d067      	beq.n	8013432 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7d1b      	ldrb	r3, [r3, #20]
 8013366:	b25b      	sxtb	r3, r3
 8013368:	2b00      	cmp	r3, #0
 801336a:	da1a      	bge.n	80133a2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	7858      	ldrb	r0, [r3, #1]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6a1a      	ldr	r2, [r3, #32]
 801337a:	2301      	movs	r3, #1
 801337c:	f7ff f948 	bl	8012610 <disk_write>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d006      	beq.n	8013394 <f_sync+0x5e>
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	2101      	movs	r1, #1
 801338a:	4618      	mov	r0, r3
 801338c:	f7ff fa52 	bl	8012834 <unlock_fs>
 8013390:	2301      	movs	r3, #1
 8013392:	e055      	b.n	8013440 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	7d1b      	ldrb	r3, [r3, #20]
 8013398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801339c:	b2da      	uxtb	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133a2:	f7fe fbd9 	bl	8011b58 <get_fattime>
 80133a6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133a8:	68ba      	ldr	r2, [r7, #8]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133ae:	4619      	mov	r1, r3
 80133b0:	4610      	mov	r0, r2
 80133b2:	f7ff fa9e 	bl	80128f2 <move_window>
 80133b6:	4603      	mov	r3, r0
 80133b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80133ba:	7dfb      	ldrb	r3, [r7, #23]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d138      	bne.n	8013432 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133c4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	330b      	adds	r3, #11
 80133ca:	781a      	ldrb	r2, [r3, #0]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	330b      	adds	r3, #11
 80133d0:	f042 0220 	orr.w	r2, r2, #32
 80133d4:	b2d2      	uxtb	r2, r2
 80133d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	689b      	ldr	r3, [r3, #8]
 80133e0:	461a      	mov	r2, r3
 80133e2:	68f9      	ldr	r1, [r7, #12]
 80133e4:	f7ff fd9c 	bl	8012f20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f103 021c 	add.w	r2, r3, #28
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	4619      	mov	r1, r3
 80133f4:	4610      	mov	r0, r2
 80133f6:	f7ff f99f 	bl	8012738 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	3316      	adds	r3, #22
 80133fe:	6939      	ldr	r1, [r7, #16]
 8013400:	4618      	mov	r0, r3
 8013402:	f7ff f999 	bl	8012738 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	3312      	adds	r3, #18
 801340a:	2100      	movs	r1, #0
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff f978 	bl	8012702 <st_word>
					fs->wflag = 1;
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	2201      	movs	r2, #1
 8013416:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff fa96 	bl	801294c <sync_fs>
 8013420:	4603      	mov	r3, r0
 8013422:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	7d1b      	ldrb	r3, [r3, #20]
 8013428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801342c:	b2da      	uxtb	r2, r3
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	7dfa      	ldrb	r2, [r7, #23]
 8013436:	4611      	mov	r1, r2
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff f9fb 	bl	8012834 <unlock_fs>
 801343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013440:	4618      	mov	r0, r3
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013448:	b480      	push	{r7}
 801344a:	b087      	sub	sp, #28
 801344c:	af00      	add	r7, sp, #0
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	4613      	mov	r3, r2
 8013454:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013456:	2301      	movs	r3, #1
 8013458:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801345a:	2300      	movs	r3, #0
 801345c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801345e:	4b1f      	ldr	r3, [pc, #124]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013460:	7a5b      	ldrb	r3, [r3, #9]
 8013462:	b2db      	uxtb	r3, r3
 8013464:	2b00      	cmp	r3, #0
 8013466:	d131      	bne.n	80134cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013468:	4b1c      	ldr	r3, [pc, #112]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 801346a:	7a5b      	ldrb	r3, [r3, #9]
 801346c:	b2db      	uxtb	r3, r3
 801346e:	461a      	mov	r2, r3
 8013470:	4b1a      	ldr	r3, [pc, #104]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013472:	2100      	movs	r1, #0
 8013474:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013476:	4b19      	ldr	r3, [pc, #100]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013478:	7a5b      	ldrb	r3, [r3, #9]
 801347a:	b2db      	uxtb	r3, r3
 801347c:	4a17      	ldr	r2, [pc, #92]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	4413      	add	r3, r2
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013486:	4b15      	ldr	r3, [pc, #84]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013488:	7a5b      	ldrb	r3, [r3, #9]
 801348a:	b2db      	uxtb	r3, r3
 801348c:	461a      	mov	r2, r3
 801348e:	4b13      	ldr	r3, [pc, #76]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013490:	4413      	add	r3, r2
 8013492:	79fa      	ldrb	r2, [r7, #7]
 8013494:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013496:	4b11      	ldr	r3, [pc, #68]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 8013498:	7a5b      	ldrb	r3, [r3, #9]
 801349a:	b2db      	uxtb	r3, r3
 801349c:	1c5a      	adds	r2, r3, #1
 801349e:	b2d1      	uxtb	r1, r2
 80134a0:	4a0e      	ldr	r2, [pc, #56]	@ (80134dc <FATFS_LinkDriverEx+0x94>)
 80134a2:	7251      	strb	r1, [r2, #9]
 80134a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80134a6:	7dbb      	ldrb	r3, [r7, #22]
 80134a8:	3330      	adds	r3, #48	@ 0x30
 80134aa:	b2da      	uxtb	r2, r3
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	3301      	adds	r3, #1
 80134b4:	223a      	movs	r2, #58	@ 0x3a
 80134b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	3302      	adds	r3, #2
 80134bc:	222f      	movs	r2, #47	@ 0x2f
 80134be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	3303      	adds	r3, #3
 80134c4:	2200      	movs	r2, #0
 80134c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80134c8:	2300      	movs	r3, #0
 80134ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80134cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	371c      	adds	r7, #28
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	24002930 	.word	0x24002930

080134e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80134ea:	2200      	movs	r2, #0
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7ff ffaa 	bl	8013448 <FATFS_LinkDriverEx>
 80134f4:	4603      	mov	r3, r0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b084      	sub	sp, #16
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013506:	2300      	movs	r3, #0
 8013508:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801350a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 f8a6 	bl	8013660 <osSemaphoreWait>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d101      	bne.n	801351e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801351a:	2301      	movs	r3, #1
 801351c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801351e:	68fb      	ldr	r3, [r7, #12]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3710      	adds	r7, #16
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f000 f8e3 	bl	80136fc <osSemaphoreRelease>
#endif
}
 8013536:	bf00      	nop
 8013538:	3708      	adds	r7, #8
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801353e:	b480      	push	{r7}
 8013540:	b085      	sub	sp, #20
 8013542:	af00      	add	r7, sp, #0
 8013544:	4603      	mov	r3, r0
 8013546:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013548:	2300      	movs	r3, #0
 801354a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801354c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013550:	2b84      	cmp	r3, #132	@ 0x84
 8013552:	d005      	beq.n	8013560 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013554:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	4413      	add	r3, r2
 801355c:	3303      	adds	r3, #3
 801355e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013560:	68fb      	ldr	r3, [r7, #12]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801356e:	b480      	push	{r7}
 8013570:	b083      	sub	sp, #12
 8013572:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013574:	f3ef 8305 	mrs	r3, IPSR
 8013578:	607b      	str	r3, [r7, #4]
  return(result);
 801357a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801357c:	2b00      	cmp	r3, #0
 801357e:	bf14      	ite	ne
 8013580:	2301      	movne	r3, #1
 8013582:	2300      	moveq	r3, #0
 8013584:	b2db      	uxtb	r3, r3
}
 8013586:	4618      	mov	r0, r3
 8013588:	370c      	adds	r7, #12
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr

08013592 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013596:	f000 ffb5 	bl	8014504 <vTaskStartScheduler>
  
  return osOK;
 801359a:	2300      	movs	r3, #0
}
 801359c:	4618      	mov	r0, r3
 801359e:	bd80      	pop	{r7, pc}

080135a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80135a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135a2:	b089      	sub	sp, #36	@ 0x24
 80135a4:	af04      	add	r7, sp, #16
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d020      	beq.n	80135f4 <osThreadCreate+0x54>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d01c      	beq.n	80135f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	685c      	ldr	r4, [r3, #4]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	691e      	ldr	r6, [r3, #16]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff ffb6 	bl	801353e <makeFreeRtosPriority>
 80135d2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	695b      	ldr	r3, [r3, #20]
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135dc:	9202      	str	r2, [sp, #8]
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	9100      	str	r1, [sp, #0]
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	4632      	mov	r2, r6
 80135e6:	4629      	mov	r1, r5
 80135e8:	4620      	mov	r0, r4
 80135ea:	f000 fdbd 	bl	8014168 <xTaskCreateStatic>
 80135ee:	4603      	mov	r3, r0
 80135f0:	60fb      	str	r3, [r7, #12]
 80135f2:	e01c      	b.n	801362e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	685c      	ldr	r4, [r3, #4]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013600:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff ff98 	bl	801353e <makeFreeRtosPriority>
 801360e:	4602      	mov	r2, r0
 8013610:	f107 030c 	add.w	r3, r7, #12
 8013614:	9301      	str	r3, [sp, #4]
 8013616:	9200      	str	r2, [sp, #0]
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	4632      	mov	r2, r6
 801361c:	4629      	mov	r1, r5
 801361e:	4620      	mov	r0, r4
 8013620:	f000 fe02 	bl	8014228 <xTaskCreate>
 8013624:	4603      	mov	r3, r0
 8013626:	2b01      	cmp	r3, #1
 8013628:	d001      	beq.n	801362e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801362a:	2300      	movs	r3, #0
 801362c:	e000      	b.n	8013630 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801362e:	68fb      	ldr	r3, [r7, #12]
}
 8013630:	4618      	mov	r0, r3
 8013632:	3714      	adds	r7, #20
 8013634:	46bd      	mov	sp, r7
 8013636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013638 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <osDelay+0x16>
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	e000      	b.n	8013650 <osDelay+0x18>
 801364e:	2301      	movs	r3, #1
 8013650:	4618      	mov	r0, r3
 8013652:	f000 ff21 	bl	8014498 <vTaskDelay>
  
  return osOK;
 8013656:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013658:	4618      	mov	r0, r3
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801366a:	2300      	movs	r3, #0
 801366c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d101      	bne.n	8013678 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013674:	2380      	movs	r3, #128	@ 0x80
 8013676:	e03a      	b.n	80136ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013678:	2300      	movs	r3, #0
 801367a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013682:	d103      	bne.n	801368c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013684:	f04f 33ff 	mov.w	r3, #4294967295
 8013688:	60fb      	str	r3, [r7, #12]
 801368a:	e009      	b.n	80136a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d006      	beq.n	80136a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d101      	bne.n	80136a0 <osSemaphoreWait+0x40>
      ticks = 1;
 801369c:	2301      	movs	r3, #1
 801369e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80136a0:	f7ff ff65 	bl	801356e <inHandlerMode>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d017      	beq.n	80136da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80136aa:	f107 0308 	add.w	r3, r7, #8
 80136ae:	461a      	mov	r2, r3
 80136b0:	2100      	movs	r1, #0
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 fbae 	bl	8013e14 <xQueueReceiveFromISR>
 80136b8:	4603      	mov	r3, r0
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d001      	beq.n	80136c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80136be:	23ff      	movs	r3, #255	@ 0xff
 80136c0:	e015      	b.n	80136ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d011      	beq.n	80136ec <osSemaphoreWait+0x8c>
 80136c8:	4b0b      	ldr	r3, [pc, #44]	@ (80136f8 <osSemaphoreWait+0x98>)
 80136ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	e008      	b.n	80136ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80136da:	68f9      	ldr	r1, [r7, #12]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fa89 	bl	8013bf4 <xQueueSemaphoreTake>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d001      	beq.n	80136ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80136e8:	23ff      	movs	r3, #255	@ 0xff
 80136ea:	e000      	b.n	80136ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	e000ed04 	.word	0xe000ed04

080136fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013704:	2300      	movs	r3, #0
 8013706:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013708:	2300      	movs	r3, #0
 801370a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801370c:	f7ff ff2f 	bl	801356e <inHandlerMode>
 8013710:	4603      	mov	r3, r0
 8013712:	2b00      	cmp	r3, #0
 8013714:	d016      	beq.n	8013744 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013716:	f107 0308 	add.w	r3, r7, #8
 801371a:	4619      	mov	r1, r3
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 f9d9 	bl	8013ad4 <xQueueGiveFromISR>
 8013722:	4603      	mov	r3, r0
 8013724:	2b01      	cmp	r3, #1
 8013726:	d001      	beq.n	801372c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013728:	23ff      	movs	r3, #255	@ 0xff
 801372a:	e017      	b.n	801375c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d013      	beq.n	801375a <osSemaphoreRelease+0x5e>
 8013732:	4b0c      	ldr	r3, [pc, #48]	@ (8013764 <osSemaphoreRelease+0x68>)
 8013734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	f3bf 8f4f 	dsb	sy
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	e00a      	b.n	801375a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013744:	2300      	movs	r3, #0
 8013746:	2200      	movs	r2, #0
 8013748:	2100      	movs	r1, #0
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 f8c0 	bl	80138d0 <xQueueGenericSend>
 8013750:	4603      	mov	r3, r0
 8013752:	2b01      	cmp	r3, #1
 8013754:	d001      	beq.n	801375a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013756:	23ff      	movs	r3, #255	@ 0xff
 8013758:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801375a:	68fb      	ldr	r3, [r7, #12]
}
 801375c:	4618      	mov	r0, r3
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	e000ed04 	.word	0xe000ed04

08013768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013768:	b480      	push	{r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f103 0208 	add.w	r2, r3, #8
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f04f 32ff 	mov.w	r2, #4294967295
 8013780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f103 0208 	add.w	r2, r3, #8
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f103 0208 	add.w	r2, r3, #8
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2200      	movs	r2, #0
 801379a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801379c:	bf00      	nop
 801379e:	370c      	adds	r7, #12
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr

080137a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80137b6:	bf00      	nop
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80137c2:	b480      	push	{r7}
 80137c4:	b085      	sub	sp, #20
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	689a      	ldr	r2, [r3, #8]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	689b      	ldr	r3, [r3, #8]
 80137e4:	683a      	ldr	r2, [r7, #0]
 80137e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	683a      	ldr	r2, [r7, #0]
 80137ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	1c5a      	adds	r2, r3, #1
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	601a      	str	r2, [r3, #0]
}
 80137fe:	bf00      	nop
 8013800:	3714      	adds	r7, #20
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr

0801380a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801380a:	b480      	push	{r7}
 801380c:	b085      	sub	sp, #20
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
 8013812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013820:	d103      	bne.n	801382a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	691b      	ldr	r3, [r3, #16]
 8013826:	60fb      	str	r3, [r7, #12]
 8013828:	e00c      	b.n	8013844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3308      	adds	r3, #8
 801382e:	60fb      	str	r3, [r7, #12]
 8013830:	e002      	b.n	8013838 <vListInsert+0x2e>
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	60fb      	str	r3, [r7, #12]
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	429a      	cmp	r2, r3
 8013842:	d2f6      	bcs.n	8013832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	685a      	ldr	r2, [r3, #4]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	683a      	ldr	r2, [r7, #0]
 8013852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	683a      	ldr	r2, [r7, #0]
 801385e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	1c5a      	adds	r2, r3, #1
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	601a      	str	r2, [r3, #0]
}
 8013870:	bf00      	nop
 8013872:	3714      	adds	r7, #20
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801387c:	b480      	push	{r7}
 801387e:	b085      	sub	sp, #20
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	691b      	ldr	r3, [r3, #16]
 8013888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	6892      	ldr	r2, [r2, #8]
 8013892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	6852      	ldr	r2, [r2, #4]
 801389c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d103      	bne.n	80138b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	689a      	ldr	r2, [r3, #8]
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	1e5a      	subs	r2, r3, #1
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3714      	adds	r7, #20
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08e      	sub	sp, #56	@ 0x38
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
 80138dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138de:	2300      	movs	r3, #0
 80138e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80138e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10b      	bne.n	8013904 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f0:	f383 8811 	msr	BASEPRI, r3
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80138fe:	bf00      	nop
 8013900:	bf00      	nop
 8013902:	e7fd      	b.n	8013900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d103      	bne.n	8013912 <xQueueGenericSend+0x42>
 801390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <xQueueGenericSend+0x46>
 8013912:	2301      	movs	r3, #1
 8013914:	e000      	b.n	8013918 <xQueueGenericSend+0x48>
 8013916:	2300      	movs	r3, #0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d10b      	bne.n	8013934 <xQueueGenericSend+0x64>
	__asm volatile
 801391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801392e:	bf00      	nop
 8013930:	bf00      	nop
 8013932:	e7fd      	b.n	8013930 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	2b02      	cmp	r3, #2
 8013938:	d103      	bne.n	8013942 <xQueueGenericSend+0x72>
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801393e:	2b01      	cmp	r3, #1
 8013940:	d101      	bne.n	8013946 <xQueueGenericSend+0x76>
 8013942:	2301      	movs	r3, #1
 8013944:	e000      	b.n	8013948 <xQueueGenericSend+0x78>
 8013946:	2300      	movs	r3, #0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d10b      	bne.n	8013964 <xQueueGenericSend+0x94>
	__asm volatile
 801394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013950:	f383 8811 	msr	BASEPRI, r3
 8013954:	f3bf 8f6f 	isb	sy
 8013958:	f3bf 8f4f 	dsb	sy
 801395c:	623b      	str	r3, [r7, #32]
}
 801395e:	bf00      	nop
 8013960:	bf00      	nop
 8013962:	e7fd      	b.n	8013960 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013964:	f001 f9d8 	bl	8014d18 <xTaskGetSchedulerState>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d102      	bne.n	8013974 <xQueueGenericSend+0xa4>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <xQueueGenericSend+0xa8>
 8013974:	2301      	movs	r3, #1
 8013976:	e000      	b.n	801397a <xQueueGenericSend+0xaa>
 8013978:	2300      	movs	r3, #0
 801397a:	2b00      	cmp	r3, #0
 801397c:	d10b      	bne.n	8013996 <xQueueGenericSend+0xc6>
	__asm volatile
 801397e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013982:	f383 8811 	msr	BASEPRI, r3
 8013986:	f3bf 8f6f 	isb	sy
 801398a:	f3bf 8f4f 	dsb	sy
 801398e:	61fb      	str	r3, [r7, #28]
}
 8013990:	bf00      	nop
 8013992:	bf00      	nop
 8013994:	e7fd      	b.n	8013992 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013996:	f001 fd17 	bl	80153c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801399c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d302      	bcc.n	80139ac <xQueueGenericSend+0xdc>
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	d129      	bne.n	8013a00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139ac:	683a      	ldr	r2, [r7, #0]
 80139ae:	68b9      	ldr	r1, [r7, #8]
 80139b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139b2:	f000 fac9 	bl	8013f48 <prvCopyDataToQueue>
 80139b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d010      	beq.n	80139e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c2:	3324      	adds	r3, #36	@ 0x24
 80139c4:	4618      	mov	r0, r3
 80139c6:	f000 ffe7 	bl	8014998 <xTaskRemoveFromEventList>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d013      	beq.n	80139f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139d0:	4b3f      	ldr	r3, [pc, #252]	@ (8013ad0 <xQueueGenericSend+0x200>)
 80139d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	f3bf 8f6f 	isb	sy
 80139e0:	e00a      	b.n	80139f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d007      	beq.n	80139f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139e8:	4b39      	ldr	r3, [pc, #228]	@ (8013ad0 <xQueueGenericSend+0x200>)
 80139ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139ee:	601a      	str	r2, [r3, #0]
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80139f8:	f001 fd18 	bl	801542c <vPortExitCritical>
				return pdPASS;
 80139fc:	2301      	movs	r3, #1
 80139fe:	e063      	b.n	8013ac8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d103      	bne.n	8013a0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a06:	f001 fd11 	bl	801542c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	e05c      	b.n	8013ac8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d106      	bne.n	8013a22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a14:	f107 0314 	add.w	r3, r7, #20
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f001 f821 	bl	8014a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a22:	f001 fd03 	bl	801542c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a26:	f000 fdcf 	bl	80145c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a2a:	f001 fccd 	bl	80153c8 <vPortEnterCritical>
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a34:	b25b      	sxtb	r3, r3
 8013a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a3a:	d103      	bne.n	8013a44 <xQueueGenericSend+0x174>
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a3e:	2200      	movs	r2, #0
 8013a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a4a:	b25b      	sxtb	r3, r3
 8013a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a50:	d103      	bne.n	8013a5a <xQueueGenericSend+0x18a>
 8013a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a5a:	f001 fce7 	bl	801542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a5e:	1d3a      	adds	r2, r7, #4
 8013a60:	f107 0314 	add.w	r3, r7, #20
 8013a64:	4611      	mov	r1, r2
 8013a66:	4618      	mov	r0, r3
 8013a68:	f001 f810 	bl	8014a8c <xTaskCheckForTimeOut>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d124      	bne.n	8013abc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a74:	f000 fb60 	bl	8014138 <prvIsQueueFull>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d018      	beq.n	8013ab0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a80:	3310      	adds	r3, #16
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	4611      	mov	r1, r2
 8013a86:	4618      	mov	r0, r3
 8013a88:	f000 ff60 	bl	801494c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a8e:	f000 faeb 	bl	8014068 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a92:	f000 fda7 	bl	80145e4 <xTaskResumeAll>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f47f af7c 	bne.w	8013996 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8013ad0 <xQueueGenericSend+0x200>)
 8013aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013aa4:	601a      	str	r2, [r3, #0]
 8013aa6:	f3bf 8f4f 	dsb	sy
 8013aaa:	f3bf 8f6f 	isb	sy
 8013aae:	e772      	b.n	8013996 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ab2:	f000 fad9 	bl	8014068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ab6:	f000 fd95 	bl	80145e4 <xTaskResumeAll>
 8013aba:	e76c      	b.n	8013996 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013abe:	f000 fad3 	bl	8014068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ac2:	f000 fd8f 	bl	80145e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3738      	adds	r7, #56	@ 0x38
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	e000ed04 	.word	0xe000ed04

08013ad4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08e      	sub	sp, #56	@ 0x38
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10b      	bne.n	8013b00 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aec:	f383 8811 	msr	BASEPRI, r3
 8013af0:	f3bf 8f6f 	isb	sy
 8013af4:	f3bf 8f4f 	dsb	sy
 8013af8:	623b      	str	r3, [r7, #32]
}
 8013afa:	bf00      	nop
 8013afc:	bf00      	nop
 8013afe:	e7fd      	b.n	8013afc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00b      	beq.n	8013b20 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b0c:	f383 8811 	msr	BASEPRI, r3
 8013b10:	f3bf 8f6f 	isb	sy
 8013b14:	f3bf 8f4f 	dsb	sy
 8013b18:	61fb      	str	r3, [r7, #28]
}
 8013b1a:	bf00      	nop
 8013b1c:	bf00      	nop
 8013b1e:	e7fd      	b.n	8013b1c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d103      	bne.n	8013b30 <xQueueGiveFromISR+0x5c>
 8013b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d101      	bne.n	8013b34 <xQueueGiveFromISR+0x60>
 8013b30:	2301      	movs	r3, #1
 8013b32:	e000      	b.n	8013b36 <xQueueGiveFromISR+0x62>
 8013b34:	2300      	movs	r3, #0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d10b      	bne.n	8013b52 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8013b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b3e:	f383 8811 	msr	BASEPRI, r3
 8013b42:	f3bf 8f6f 	isb	sy
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	61bb      	str	r3, [r7, #24]
}
 8013b4c:	bf00      	nop
 8013b4e:	bf00      	nop
 8013b50:	e7fd      	b.n	8013b4e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b52:	f001 fd19 	bl	8015588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b56:	f3ef 8211 	mrs	r2, BASEPRI
 8013b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	617a      	str	r2, [r7, #20]
 8013b6c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d22b      	bcs.n	8013bda <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b9c:	d112      	bne.n	8013bc4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d016      	beq.n	8013bd4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba8:	3324      	adds	r3, #36	@ 0x24
 8013baa:	4618      	mov	r0, r3
 8013bac:	f000 fef4 	bl	8014998 <xTaskRemoveFromEventList>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00e      	beq.n	8013bd4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00b      	beq.n	8013bd4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	601a      	str	r2, [r3, #0]
 8013bc2:	e007      	b.n	8013bd4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bc8:	3301      	adds	r3, #1
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	b25a      	sxtb	r2, r3
 8013bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bd8:	e001      	b.n	8013bde <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013be0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013be8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3738      	adds	r7, #56	@ 0x38
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b08e      	sub	sp, #56	@ 0x38
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013c06:	2300      	movs	r3, #0
 8013c08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d10b      	bne.n	8013c28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c14:	f383 8811 	msr	BASEPRI, r3
 8013c18:	f3bf 8f6f 	isb	sy
 8013c1c:	f3bf 8f4f 	dsb	sy
 8013c20:	623b      	str	r3, [r7, #32]
}
 8013c22:	bf00      	nop
 8013c24:	bf00      	nop
 8013c26:	e7fd      	b.n	8013c24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00b      	beq.n	8013c48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c34:	f383 8811 	msr	BASEPRI, r3
 8013c38:	f3bf 8f6f 	isb	sy
 8013c3c:	f3bf 8f4f 	dsb	sy
 8013c40:	61fb      	str	r3, [r7, #28]
}
 8013c42:	bf00      	nop
 8013c44:	bf00      	nop
 8013c46:	e7fd      	b.n	8013c44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c48:	f001 f866 	bl	8014d18 <xTaskGetSchedulerState>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d102      	bne.n	8013c58 <xQueueSemaphoreTake+0x64>
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d101      	bne.n	8013c5c <xQueueSemaphoreTake+0x68>
 8013c58:	2301      	movs	r3, #1
 8013c5a:	e000      	b.n	8013c5e <xQueueSemaphoreTake+0x6a>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d10b      	bne.n	8013c7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8013c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c66:	f383 8811 	msr	BASEPRI, r3
 8013c6a:	f3bf 8f6f 	isb	sy
 8013c6e:	f3bf 8f4f 	dsb	sy
 8013c72:	61bb      	str	r3, [r7, #24]
}
 8013c74:	bf00      	nop
 8013c76:	bf00      	nop
 8013c78:	e7fd      	b.n	8013c76 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c7a:	f001 fba5 	bl	80153c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d024      	beq.n	8013cd4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c8c:	1e5a      	subs	r2, r3, #1
 8013c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d104      	bne.n	8013ca4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013c9a:	f001 f9e9 	bl	8015070 <pvTaskIncrementMutexHeldCount>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d00f      	beq.n	8013ccc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cae:	3310      	adds	r3, #16
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f000 fe71 	bl	8014998 <xTaskRemoveFromEventList>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d007      	beq.n	8013ccc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cbc:	4b54      	ldr	r3, [pc, #336]	@ (8013e10 <xQueueSemaphoreTake+0x21c>)
 8013cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cc2:	601a      	str	r2, [r3, #0]
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013ccc:	f001 fbae 	bl	801542c <vPortExitCritical>
				return pdPASS;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e098      	b.n	8013e06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d112      	bne.n	8013d00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00b      	beq.n	8013cf8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ce4:	f383 8811 	msr	BASEPRI, r3
 8013ce8:	f3bf 8f6f 	isb	sy
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	617b      	str	r3, [r7, #20]
}
 8013cf2:	bf00      	nop
 8013cf4:	bf00      	nop
 8013cf6:	e7fd      	b.n	8013cf4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013cf8:	f001 fb98 	bl	801542c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	e082      	b.n	8013e06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d106      	bne.n	8013d14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d06:	f107 030c 	add.w	r3, r7, #12
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f000 fea8 	bl	8014a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d10:	2301      	movs	r3, #1
 8013d12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d14:	f001 fb8a 	bl	801542c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d18:	f000 fc56 	bl	80145c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d1c:	f001 fb54 	bl	80153c8 <vPortEnterCritical>
 8013d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d26:	b25b      	sxtb	r3, r3
 8013d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d2c:	d103      	bne.n	8013d36 <xQueueSemaphoreTake+0x142>
 8013d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d30:	2200      	movs	r2, #0
 8013d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d3c:	b25b      	sxtb	r3, r3
 8013d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d42:	d103      	bne.n	8013d4c <xQueueSemaphoreTake+0x158>
 8013d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d46:	2200      	movs	r2, #0
 8013d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d4c:	f001 fb6e 	bl	801542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d50:	463a      	mov	r2, r7
 8013d52:	f107 030c 	add.w	r3, r7, #12
 8013d56:	4611      	mov	r1, r2
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f000 fe97 	bl	8014a8c <xTaskCheckForTimeOut>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d132      	bne.n	8013dca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d66:	f000 f9d1 	bl	801410c <prvIsQueueEmpty>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d026      	beq.n	8013dbe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d109      	bne.n	8013d8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013d78:	f001 fb26 	bl	80153c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d7e:	689b      	ldr	r3, [r3, #8]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 ffe7 	bl	8014d54 <xTaskPriorityInherit>
 8013d86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013d88:	f001 fb50 	bl	801542c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d8e:	3324      	adds	r3, #36	@ 0x24
 8013d90:	683a      	ldr	r2, [r7, #0]
 8013d92:	4611      	mov	r1, r2
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 fdd9 	bl	801494c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d9c:	f000 f964 	bl	8014068 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013da0:	f000 fc20 	bl	80145e4 <xTaskResumeAll>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f47f af67 	bne.w	8013c7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013dac:	4b18      	ldr	r3, [pc, #96]	@ (8013e10 <xQueueSemaphoreTake+0x21c>)
 8013dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013db2:	601a      	str	r2, [r3, #0]
 8013db4:	f3bf 8f4f 	dsb	sy
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	e75d      	b.n	8013c7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013dbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dc0:	f000 f952 	bl	8014068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dc4:	f000 fc0e 	bl	80145e4 <xTaskResumeAll>
 8013dc8:	e757      	b.n	8013c7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dcc:	f000 f94c 	bl	8014068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dd0:	f000 fc08 	bl	80145e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013dd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dd6:	f000 f999 	bl	801410c <prvIsQueueEmpty>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	f43f af4c 	beq.w	8013c7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d00d      	beq.n	8013e04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013de8:	f001 faee 	bl	80153c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013dec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dee:	f000 f893 	bl	8013f18 <prvGetDisinheritPriorityAfterTimeout>
 8013df2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013df6:	689b      	ldr	r3, [r3, #8]
 8013df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f001 f8a8 	bl	8014f50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013e00:	f001 fb14 	bl	801542c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3738      	adds	r7, #56	@ 0x38
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	e000ed04 	.word	0xe000ed04

08013e14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b08e      	sub	sp, #56	@ 0x38
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d10b      	bne.n	8013e42 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e2e:	f383 8811 	msr	BASEPRI, r3
 8013e32:	f3bf 8f6f 	isb	sy
 8013e36:	f3bf 8f4f 	dsb	sy
 8013e3a:	623b      	str	r3, [r7, #32]
}
 8013e3c:	bf00      	nop
 8013e3e:	bf00      	nop
 8013e40:	e7fd      	b.n	8013e3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d103      	bne.n	8013e50 <xQueueReceiveFromISR+0x3c>
 8013e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d101      	bne.n	8013e54 <xQueueReceiveFromISR+0x40>
 8013e50:	2301      	movs	r3, #1
 8013e52:	e000      	b.n	8013e56 <xQueueReceiveFromISR+0x42>
 8013e54:	2300      	movs	r3, #0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d10b      	bne.n	8013e72 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e5e:	f383 8811 	msr	BASEPRI, r3
 8013e62:	f3bf 8f6f 	isb	sy
 8013e66:	f3bf 8f4f 	dsb	sy
 8013e6a:	61fb      	str	r3, [r7, #28]
}
 8013e6c:	bf00      	nop
 8013e6e:	bf00      	nop
 8013e70:	e7fd      	b.n	8013e6e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e72:	f001 fb89 	bl	8015588 <vPortValidateInterruptPriority>
	__asm volatile
 8013e76:	f3ef 8211 	mrs	r2, BASEPRI
 8013e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e7e:	f383 8811 	msr	BASEPRI, r3
 8013e82:	f3bf 8f6f 	isb	sy
 8013e86:	f3bf 8f4f 	dsb	sy
 8013e8a:	61ba      	str	r2, [r7, #24]
 8013e8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d02f      	beq.n	8013efe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ea8:	68b9      	ldr	r1, [r7, #8]
 8013eaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013eac:	f000 f8b6 	bl	801401c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb2:	1e5a      	subs	r2, r3, #1
 8013eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec0:	d112      	bne.n	8013ee8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec4:	691b      	ldr	r3, [r3, #16]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d016      	beq.n	8013ef8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ecc:	3310      	adds	r3, #16
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f000 fd62 	bl	8014998 <xTaskRemoveFromEventList>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d00e      	beq.n	8013ef8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d00b      	beq.n	8013ef8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	e007      	b.n	8013ef8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013eec:	3301      	adds	r3, #1
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	b25a      	sxtb	r2, r3
 8013ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8013efc:	e001      	b.n	8013f02 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013efe:	2300      	movs	r3, #0
 8013f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	f383 8811 	msr	BASEPRI, r3
}
 8013f0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3738      	adds	r7, #56	@ 0x38
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d006      	beq.n	8013f36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f1c3 0307 	rsb	r3, r3, #7
 8013f32:	60fb      	str	r3, [r7, #12]
 8013f34:	e001      	b.n	8013f3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013f36:	2300      	movs	r3, #0
 8013f38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3714      	adds	r7, #20
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	60b9      	str	r1, [r7, #8]
 8013f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f54:	2300      	movs	r3, #0
 8013f56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d10d      	bne.n	8013f82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d14d      	bne.n	801400a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	689b      	ldr	r3, [r3, #8]
 8013f72:	4618      	mov	r0, r3
 8013f74:	f000 ff64 	bl	8014e40 <xTaskPriorityDisinherit>
 8013f78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	609a      	str	r2, [r3, #8]
 8013f80:	e043      	b.n	801400a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d119      	bne.n	8013fbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	6858      	ldr	r0, [r3, #4]
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f90:	461a      	mov	r2, r3
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	f002 fd11 	bl	80169ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	685a      	ldr	r2, [r3, #4]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fa0:	441a      	add	r2, r3
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	685a      	ldr	r2, [r3, #4]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	689b      	ldr	r3, [r3, #8]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d32b      	bcc.n	801400a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	605a      	str	r2, [r3, #4]
 8013fba:	e026      	b.n	801400a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	68d8      	ldr	r0, [r3, #12]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	68b9      	ldr	r1, [r7, #8]
 8013fc8:	f002 fcf7 	bl	80169ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	68da      	ldr	r2, [r3, #12]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fd4:	425b      	negs	r3, r3
 8013fd6:	441a      	add	r2, r3
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	68da      	ldr	r2, [r3, #12]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d207      	bcs.n	8013ff8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	689a      	ldr	r2, [r3, #8]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ff0:	425b      	negs	r3, r3
 8013ff2:	441a      	add	r2, r3
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	d105      	bne.n	801400a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d002      	beq.n	801400a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	3b01      	subs	r3, #1
 8014008:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	1c5a      	adds	r2, r3, #1
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014012:	697b      	ldr	r3, [r7, #20]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3718      	adds	r7, #24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801402a:	2b00      	cmp	r3, #0
 801402c:	d018      	beq.n	8014060 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	68da      	ldr	r2, [r3, #12]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014036:	441a      	add	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68da      	ldr	r2, [r3, #12]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	689b      	ldr	r3, [r3, #8]
 8014044:	429a      	cmp	r2, r3
 8014046:	d303      	bcc.n	8014050 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	68d9      	ldr	r1, [r3, #12]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014058:	461a      	mov	r2, r3
 801405a:	6838      	ldr	r0, [r7, #0]
 801405c:	f002 fcad 	bl	80169ba <memcpy>
	}
}
 8014060:	bf00      	nop
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b084      	sub	sp, #16
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014070:	f001 f9aa 	bl	80153c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801407a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801407c:	e011      	b.n	80140a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014082:	2b00      	cmp	r3, #0
 8014084:	d012      	beq.n	80140ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	3324      	adds	r3, #36	@ 0x24
 801408a:	4618      	mov	r0, r3
 801408c:	f000 fc84 	bl	8014998 <xTaskRemoveFromEventList>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d001      	beq.n	801409a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014096:	f000 fd5d 	bl	8014b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801409a:	7bfb      	ldrb	r3, [r7, #15]
 801409c:	3b01      	subs	r3, #1
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80140a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	dce9      	bgt.n	801407e <prvUnlockQueue+0x16>
 80140aa:	e000      	b.n	80140ae <prvUnlockQueue+0x46>
					break;
 80140ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	22ff      	movs	r2, #255	@ 0xff
 80140b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80140b6:	f001 f9b9 	bl	801542c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80140ba:	f001 f985 	bl	80153c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80140c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140c6:	e011      	b.n	80140ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	691b      	ldr	r3, [r3, #16]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d012      	beq.n	80140f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	3310      	adds	r3, #16
 80140d4:	4618      	mov	r0, r3
 80140d6:	f000 fc5f 	bl	8014998 <xTaskRemoveFromEventList>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d001      	beq.n	80140e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80140e0:	f000 fd38 	bl	8014b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140e4:	7bbb      	ldrb	r3, [r7, #14]
 80140e6:	3b01      	subs	r3, #1
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	dce9      	bgt.n	80140c8 <prvUnlockQueue+0x60>
 80140f4:	e000      	b.n	80140f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	22ff      	movs	r2, #255	@ 0xff
 80140fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014100:	f001 f994 	bl	801542c <vPortExitCritical>
}
 8014104:	bf00      	nop
 8014106:	3710      	adds	r7, #16
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014114:	f001 f958 	bl	80153c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801411c:	2b00      	cmp	r3, #0
 801411e:	d102      	bne.n	8014126 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014120:	2301      	movs	r3, #1
 8014122:	60fb      	str	r3, [r7, #12]
 8014124:	e001      	b.n	801412a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014126:	2300      	movs	r3, #0
 8014128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801412a:	f001 f97f 	bl	801542c <vPortExitCritical>

	return xReturn;
 801412e:	68fb      	ldr	r3, [r7, #12]
}
 8014130:	4618      	mov	r0, r3
 8014132:	3710      	adds	r7, #16
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014140:	f001 f942 	bl	80153c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801414c:	429a      	cmp	r2, r3
 801414e:	d102      	bne.n	8014156 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014150:	2301      	movs	r3, #1
 8014152:	60fb      	str	r3, [r7, #12]
 8014154:	e001      	b.n	801415a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014156:	2300      	movs	r3, #0
 8014158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801415a:	f001 f967 	bl	801542c <vPortExitCritical>

	return xReturn;
 801415e:	68fb      	ldr	r3, [r7, #12]
}
 8014160:	4618      	mov	r0, r3
 8014162:	3710      	adds	r7, #16
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014168:	b580      	push	{r7, lr}
 801416a:	b08e      	sub	sp, #56	@ 0x38
 801416c:	af04      	add	r7, sp, #16
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014178:	2b00      	cmp	r3, #0
 801417a:	d10b      	bne.n	8014194 <xTaskCreateStatic+0x2c>
	__asm volatile
 801417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	623b      	str	r3, [r7, #32]
}
 801418e:	bf00      	nop
 8014190:	bf00      	nop
 8014192:	e7fd      	b.n	8014190 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014196:	2b00      	cmp	r3, #0
 8014198:	d10b      	bne.n	80141b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 801419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801419e:	f383 8811 	msr	BASEPRI, r3
 80141a2:	f3bf 8f6f 	isb	sy
 80141a6:	f3bf 8f4f 	dsb	sy
 80141aa:	61fb      	str	r3, [r7, #28]
}
 80141ac:	bf00      	nop
 80141ae:	bf00      	nop
 80141b0:	e7fd      	b.n	80141ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80141b2:	2354      	movs	r3, #84	@ 0x54
 80141b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	2b54      	cmp	r3, #84	@ 0x54
 80141ba:	d00b      	beq.n	80141d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80141bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141c0:	f383 8811 	msr	BASEPRI, r3
 80141c4:	f3bf 8f6f 	isb	sy
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	61bb      	str	r3, [r7, #24]
}
 80141ce:	bf00      	nop
 80141d0:	bf00      	nop
 80141d2:	e7fd      	b.n	80141d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d01e      	beq.n	801421a <xTaskCreateStatic+0xb2>
 80141dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d01b      	beq.n	801421a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80141ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ee:	2202      	movs	r2, #2
 80141f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141f4:	2300      	movs	r3, #0
 80141f6:	9303      	str	r3, [sp, #12]
 80141f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	f107 0314 	add.w	r3, r7, #20
 8014200:	9301      	str	r3, [sp, #4]
 8014202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	68b9      	ldr	r1, [r7, #8]
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f000 f850 	bl	80142b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014212:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014214:	f000 f8d6 	bl	80143c4 <prvAddNewTaskToReadyList>
 8014218:	e001      	b.n	801421e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801421a:	2300      	movs	r3, #0
 801421c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801421e:	697b      	ldr	r3, [r7, #20]
	}
 8014220:	4618      	mov	r0, r3
 8014222:	3728      	adds	r7, #40	@ 0x28
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014228:	b580      	push	{r7, lr}
 801422a:	b08c      	sub	sp, #48	@ 0x30
 801422c:	af04      	add	r7, sp, #16
 801422e:	60f8      	str	r0, [r7, #12]
 8014230:	60b9      	str	r1, [r7, #8]
 8014232:	603b      	str	r3, [r7, #0]
 8014234:	4613      	mov	r3, r2
 8014236:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014238:	88fb      	ldrh	r3, [r7, #6]
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4618      	mov	r0, r3
 801423e:	f001 f9e5 	bl	801560c <pvPortMalloc>
 8014242:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d00e      	beq.n	8014268 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801424a:	2054      	movs	r0, #84	@ 0x54
 801424c:	f001 f9de 	bl	801560c <pvPortMalloc>
 8014250:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d003      	beq.n	8014260 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014258:	69fb      	ldr	r3, [r7, #28]
 801425a:	697a      	ldr	r2, [r7, #20]
 801425c:	631a      	str	r2, [r3, #48]	@ 0x30
 801425e:	e005      	b.n	801426c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014260:	6978      	ldr	r0, [r7, #20]
 8014262:	f001 faa1 	bl	80157a8 <vPortFree>
 8014266:	e001      	b.n	801426c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014268:	2300      	movs	r3, #0
 801426a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d017      	beq.n	80142a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	2200      	movs	r2, #0
 8014276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801427a:	88fa      	ldrh	r2, [r7, #6]
 801427c:	2300      	movs	r3, #0
 801427e:	9303      	str	r3, [sp, #12]
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	9302      	str	r3, [sp, #8]
 8014284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	68b9      	ldr	r1, [r7, #8]
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	f000 f80e 	bl	80142b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014296:	69f8      	ldr	r0, [r7, #28]
 8014298:	f000 f894 	bl	80143c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801429c:	2301      	movs	r3, #1
 801429e:	61bb      	str	r3, [r7, #24]
 80142a0:	e002      	b.n	80142a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80142a2:	f04f 33ff 	mov.w	r3, #4294967295
 80142a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80142a8:	69bb      	ldr	r3, [r7, #24]
	}
 80142aa:	4618      	mov	r0, r3
 80142ac:	3720      	adds	r7, #32
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}

080142b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142b2:	b580      	push	{r7, lr}
 80142b4:	b088      	sub	sp, #32
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	60f8      	str	r0, [r7, #12]
 80142ba:	60b9      	str	r1, [r7, #8]
 80142bc:	607a      	str	r2, [r7, #4]
 80142be:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80142ca:	440b      	add	r3, r1
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	4413      	add	r3, r2
 80142d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	f023 0307 	bic.w	r3, r3, #7
 80142d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	f003 0307 	and.w	r3, r3, #7
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d00b      	beq.n	80142fc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80142e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142e8:	f383 8811 	msr	BASEPRI, r3
 80142ec:	f3bf 8f6f 	isb	sy
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	617b      	str	r3, [r7, #20]
}
 80142f6:	bf00      	nop
 80142f8:	bf00      	nop
 80142fa:	e7fd      	b.n	80142f8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d01f      	beq.n	8014342 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014302:	2300      	movs	r3, #0
 8014304:	61fb      	str	r3, [r7, #28]
 8014306:	e012      	b.n	801432e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014308:	68ba      	ldr	r2, [r7, #8]
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	4413      	add	r3, r2
 801430e:	7819      	ldrb	r1, [r3, #0]
 8014310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	4413      	add	r3, r2
 8014316:	3334      	adds	r3, #52	@ 0x34
 8014318:	460a      	mov	r2, r1
 801431a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	4413      	add	r3, r2
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d006      	beq.n	8014336 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	3301      	adds	r3, #1
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	2b0f      	cmp	r3, #15
 8014332:	d9e9      	bls.n	8014308 <prvInitialiseNewTask+0x56>
 8014334:	e000      	b.n	8014338 <prvInitialiseNewTask+0x86>
			{
				break;
 8014336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801433a:	2200      	movs	r2, #0
 801433c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014340:	e003      	b.n	801434a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014344:	2200      	movs	r2, #0
 8014346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801434c:	2b06      	cmp	r3, #6
 801434e:	d901      	bls.n	8014354 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014350:	2306      	movs	r3, #6
 8014352:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014358:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801435c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801435e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014362:	2200      	movs	r2, #0
 8014364:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014368:	3304      	adds	r3, #4
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff fa1c 	bl	80137a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014372:	3318      	adds	r3, #24
 8014374:	4618      	mov	r0, r3
 8014376:	f7ff fa17 	bl	80137a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801437c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801437e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014382:	f1c3 0207 	rsb	r2, r3, #7
 8014386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801438c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801438e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014392:	2200      	movs	r2, #0
 8014394:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014398:	2200      	movs	r2, #0
 801439a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	68f9      	ldr	r1, [r7, #12]
 80143a2:	69b8      	ldr	r0, [r7, #24]
 80143a4:	f000 fede 	bl	8015164 <pxPortInitialiseStack>
 80143a8:	4602      	mov	r2, r0
 80143aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143ba:	bf00      	nop
 80143bc:	3720      	adds	r7, #32
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
	...

080143c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143cc:	f000 fffc 	bl	80153c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80143d0:	4b2a      	ldr	r3, [pc, #168]	@ (801447c <prvAddNewTaskToReadyList+0xb8>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	3301      	adds	r3, #1
 80143d6:	4a29      	ldr	r2, [pc, #164]	@ (801447c <prvAddNewTaskToReadyList+0xb8>)
 80143d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80143da:	4b29      	ldr	r3, [pc, #164]	@ (8014480 <prvAddNewTaskToReadyList+0xbc>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d109      	bne.n	80143f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80143e2:	4a27      	ldr	r2, [pc, #156]	@ (8014480 <prvAddNewTaskToReadyList+0xbc>)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80143e8:	4b24      	ldr	r3, [pc, #144]	@ (801447c <prvAddNewTaskToReadyList+0xb8>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d110      	bne.n	8014412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80143f0:	f000 fbd4 	bl	8014b9c <prvInitialiseTaskLists>
 80143f4:	e00d      	b.n	8014412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80143f6:	4b23      	ldr	r3, [pc, #140]	@ (8014484 <prvAddNewTaskToReadyList+0xc0>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d109      	bne.n	8014412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80143fe:	4b20      	ldr	r3, [pc, #128]	@ (8014480 <prvAddNewTaskToReadyList+0xbc>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014408:	429a      	cmp	r2, r3
 801440a:	d802      	bhi.n	8014412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801440c:	4a1c      	ldr	r2, [pc, #112]	@ (8014480 <prvAddNewTaskToReadyList+0xbc>)
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014412:	4b1d      	ldr	r3, [pc, #116]	@ (8014488 <prvAddNewTaskToReadyList+0xc4>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	3301      	adds	r3, #1
 8014418:	4a1b      	ldr	r2, [pc, #108]	@ (8014488 <prvAddNewTaskToReadyList+0xc4>)
 801441a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014420:	2201      	movs	r2, #1
 8014422:	409a      	lsls	r2, r3
 8014424:	4b19      	ldr	r3, [pc, #100]	@ (801448c <prvAddNewTaskToReadyList+0xc8>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	4313      	orrs	r3, r2
 801442a:	4a18      	ldr	r2, [pc, #96]	@ (801448c <prvAddNewTaskToReadyList+0xc8>)
 801442c:	6013      	str	r3, [r2, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014432:	4613      	mov	r3, r2
 8014434:	009b      	lsls	r3, r3, #2
 8014436:	4413      	add	r3, r2
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	4a15      	ldr	r2, [pc, #84]	@ (8014490 <prvAddNewTaskToReadyList+0xcc>)
 801443c:	441a      	add	r2, r3
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	3304      	adds	r3, #4
 8014442:	4619      	mov	r1, r3
 8014444:	4610      	mov	r0, r2
 8014446:	f7ff f9bc 	bl	80137c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801444a:	f000 ffef 	bl	801542c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801444e:	4b0d      	ldr	r3, [pc, #52]	@ (8014484 <prvAddNewTaskToReadyList+0xc0>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d00e      	beq.n	8014474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014456:	4b0a      	ldr	r3, [pc, #40]	@ (8014480 <prvAddNewTaskToReadyList+0xbc>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014460:	429a      	cmp	r2, r3
 8014462:	d207      	bcs.n	8014474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014464:	4b0b      	ldr	r3, [pc, #44]	@ (8014494 <prvAddNewTaskToReadyList+0xd0>)
 8014466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801446a:	601a      	str	r2, [r3, #0]
 801446c:	f3bf 8f4f 	dsb	sy
 8014470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014474:	bf00      	nop
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	24002a3c 	.word	0x24002a3c
 8014480:	2400293c 	.word	0x2400293c
 8014484:	24002a48 	.word	0x24002a48
 8014488:	24002a58 	.word	0x24002a58
 801448c:	24002a44 	.word	0x24002a44
 8014490:	24002940 	.word	0x24002940
 8014494:	e000ed04 	.word	0xe000ed04

08014498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014498:	b580      	push	{r7, lr}
 801449a:	b084      	sub	sp, #16
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144a0:	2300      	movs	r3, #0
 80144a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d018      	beq.n	80144dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144aa:	4b14      	ldr	r3, [pc, #80]	@ (80144fc <vTaskDelay+0x64>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00b      	beq.n	80144ca <vTaskDelay+0x32>
	__asm volatile
 80144b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144b6:	f383 8811 	msr	BASEPRI, r3
 80144ba:	f3bf 8f6f 	isb	sy
 80144be:	f3bf 8f4f 	dsb	sy
 80144c2:	60bb      	str	r3, [r7, #8]
}
 80144c4:	bf00      	nop
 80144c6:	bf00      	nop
 80144c8:	e7fd      	b.n	80144c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80144ca:	f000 f87d 	bl	80145c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80144ce:	2100      	movs	r1, #0
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 fde1 	bl	8015098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80144d6:	f000 f885 	bl	80145e4 <xTaskResumeAll>
 80144da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d107      	bne.n	80144f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80144e2:	4b07      	ldr	r3, [pc, #28]	@ (8014500 <vTaskDelay+0x68>)
 80144e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144e8:	601a      	str	r2, [r3, #0]
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144f2:	bf00      	nop
 80144f4:	3710      	adds	r7, #16
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	24002a64 	.word	0x24002a64
 8014500:	e000ed04 	.word	0xe000ed04

08014504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08a      	sub	sp, #40	@ 0x28
 8014508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801450a:	2300      	movs	r3, #0
 801450c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801450e:	2300      	movs	r3, #0
 8014510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014512:	463a      	mov	r2, r7
 8014514:	1d39      	adds	r1, r7, #4
 8014516:	f107 0308 	add.w	r3, r7, #8
 801451a:	4618      	mov	r0, r3
 801451c:	f7ee fe00 	bl	8003120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014520:	6839      	ldr	r1, [r7, #0]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	68ba      	ldr	r2, [r7, #8]
 8014526:	9202      	str	r2, [sp, #8]
 8014528:	9301      	str	r3, [sp, #4]
 801452a:	2300      	movs	r3, #0
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	2300      	movs	r3, #0
 8014530:	460a      	mov	r2, r1
 8014532:	491f      	ldr	r1, [pc, #124]	@ (80145b0 <vTaskStartScheduler+0xac>)
 8014534:	481f      	ldr	r0, [pc, #124]	@ (80145b4 <vTaskStartScheduler+0xb0>)
 8014536:	f7ff fe17 	bl	8014168 <xTaskCreateStatic>
 801453a:	4603      	mov	r3, r0
 801453c:	4a1e      	ldr	r2, [pc, #120]	@ (80145b8 <vTaskStartScheduler+0xb4>)
 801453e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014540:	4b1d      	ldr	r3, [pc, #116]	@ (80145b8 <vTaskStartScheduler+0xb4>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014548:	2301      	movs	r3, #1
 801454a:	617b      	str	r3, [r7, #20]
 801454c:	e001      	b.n	8014552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801454e:	2300      	movs	r3, #0
 8014550:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	2b01      	cmp	r3, #1
 8014556:	d116      	bne.n	8014586 <vTaskStartScheduler+0x82>
	__asm volatile
 8014558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801455c:	f383 8811 	msr	BASEPRI, r3
 8014560:	f3bf 8f6f 	isb	sy
 8014564:	f3bf 8f4f 	dsb	sy
 8014568:	613b      	str	r3, [r7, #16]
}
 801456a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801456c:	4b13      	ldr	r3, [pc, #76]	@ (80145bc <vTaskStartScheduler+0xb8>)
 801456e:	f04f 32ff 	mov.w	r2, #4294967295
 8014572:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014574:	4b12      	ldr	r3, [pc, #72]	@ (80145c0 <vTaskStartScheduler+0xbc>)
 8014576:	2201      	movs	r2, #1
 8014578:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801457a:	4b12      	ldr	r3, [pc, #72]	@ (80145c4 <vTaskStartScheduler+0xc0>)
 801457c:	2200      	movs	r2, #0
 801457e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014580:	f000 fe7e 	bl	8015280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014584:	e00f      	b.n	80145a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801458c:	d10b      	bne.n	80145a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60fb      	str	r3, [r7, #12]
}
 80145a0:	bf00      	nop
 80145a2:	bf00      	nop
 80145a4:	e7fd      	b.n	80145a2 <vTaskStartScheduler+0x9e>
}
 80145a6:	bf00      	nop
 80145a8:	3718      	adds	r7, #24
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	080189cc 	.word	0x080189cc
 80145b4:	08014b6d 	.word	0x08014b6d
 80145b8:	24002a60 	.word	0x24002a60
 80145bc:	24002a5c 	.word	0x24002a5c
 80145c0:	24002a48 	.word	0x24002a48
 80145c4:	24002a40 	.word	0x24002a40

080145c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80145c8:	b480      	push	{r7}
 80145ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80145cc:	4b04      	ldr	r3, [pc, #16]	@ (80145e0 <vTaskSuspendAll+0x18>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	3301      	adds	r3, #1
 80145d2:	4a03      	ldr	r2, [pc, #12]	@ (80145e0 <vTaskSuspendAll+0x18>)
 80145d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80145d6:	bf00      	nop
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	24002a64 	.word	0x24002a64

080145e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80145ea:	2300      	movs	r3, #0
 80145ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80145ee:	2300      	movs	r3, #0
 80145f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80145f2:	4b42      	ldr	r3, [pc, #264]	@ (80146fc <xTaskResumeAll+0x118>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d10b      	bne.n	8014612 <xTaskResumeAll+0x2e>
	__asm volatile
 80145fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145fe:	f383 8811 	msr	BASEPRI, r3
 8014602:	f3bf 8f6f 	isb	sy
 8014606:	f3bf 8f4f 	dsb	sy
 801460a:	603b      	str	r3, [r7, #0]
}
 801460c:	bf00      	nop
 801460e:	bf00      	nop
 8014610:	e7fd      	b.n	801460e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014612:	f000 fed9 	bl	80153c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014616:	4b39      	ldr	r3, [pc, #228]	@ (80146fc <xTaskResumeAll+0x118>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	3b01      	subs	r3, #1
 801461c:	4a37      	ldr	r2, [pc, #220]	@ (80146fc <xTaskResumeAll+0x118>)
 801461e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014620:	4b36      	ldr	r3, [pc, #216]	@ (80146fc <xTaskResumeAll+0x118>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d161      	bne.n	80146ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014628:	4b35      	ldr	r3, [pc, #212]	@ (8014700 <xTaskResumeAll+0x11c>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d05d      	beq.n	80146ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014630:	e02e      	b.n	8014690 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014632:	4b34      	ldr	r3, [pc, #208]	@ (8014704 <xTaskResumeAll+0x120>)
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	3318      	adds	r3, #24
 801463e:	4618      	mov	r0, r3
 8014640:	f7ff f91c 	bl	801387c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	3304      	adds	r3, #4
 8014648:	4618      	mov	r0, r3
 801464a:	f7ff f917 	bl	801387c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014652:	2201      	movs	r2, #1
 8014654:	409a      	lsls	r2, r3
 8014656:	4b2c      	ldr	r3, [pc, #176]	@ (8014708 <xTaskResumeAll+0x124>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	4313      	orrs	r3, r2
 801465c:	4a2a      	ldr	r2, [pc, #168]	@ (8014708 <xTaskResumeAll+0x124>)
 801465e:	6013      	str	r3, [r2, #0]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014664:	4613      	mov	r3, r2
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	4413      	add	r3, r2
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	4a27      	ldr	r2, [pc, #156]	@ (801470c <xTaskResumeAll+0x128>)
 801466e:	441a      	add	r2, r3
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	3304      	adds	r3, #4
 8014674:	4619      	mov	r1, r3
 8014676:	4610      	mov	r0, r2
 8014678:	f7ff f8a3 	bl	80137c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014680:	4b23      	ldr	r3, [pc, #140]	@ (8014710 <xTaskResumeAll+0x12c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014686:	429a      	cmp	r2, r3
 8014688:	d302      	bcc.n	8014690 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801468a:	4b22      	ldr	r3, [pc, #136]	@ (8014714 <xTaskResumeAll+0x130>)
 801468c:	2201      	movs	r2, #1
 801468e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014690:	4b1c      	ldr	r3, [pc, #112]	@ (8014704 <xTaskResumeAll+0x120>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d1cc      	bne.n	8014632 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d001      	beq.n	80146a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801469e:	f000 fb1b 	bl	8014cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146a2:	4b1d      	ldr	r3, [pc, #116]	@ (8014718 <xTaskResumeAll+0x134>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d010      	beq.n	80146d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146ae:	f000 f837 	bl	8014720 <xTaskIncrementTick>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d002      	beq.n	80146be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80146b8:	4b16      	ldr	r3, [pc, #88]	@ (8014714 <xTaskResumeAll+0x130>)
 80146ba:	2201      	movs	r2, #1
 80146bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	3b01      	subs	r3, #1
 80146c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1f1      	bne.n	80146ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80146ca:	4b13      	ldr	r3, [pc, #76]	@ (8014718 <xTaskResumeAll+0x134>)
 80146cc:	2200      	movs	r2, #0
 80146ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80146d0:	4b10      	ldr	r3, [pc, #64]	@ (8014714 <xTaskResumeAll+0x130>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d009      	beq.n	80146ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80146d8:	2301      	movs	r3, #1
 80146da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80146dc:	4b0f      	ldr	r3, [pc, #60]	@ (801471c <xTaskResumeAll+0x138>)
 80146de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146e2:	601a      	str	r2, [r3, #0]
 80146e4:	f3bf 8f4f 	dsb	sy
 80146e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80146ec:	f000 fe9e 	bl	801542c <vPortExitCritical>

	return xAlreadyYielded;
 80146f0:	68bb      	ldr	r3, [r7, #8]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	24002a64 	.word	0x24002a64
 8014700:	24002a3c 	.word	0x24002a3c
 8014704:	240029fc 	.word	0x240029fc
 8014708:	24002a44 	.word	0x24002a44
 801470c:	24002940 	.word	0x24002940
 8014710:	2400293c 	.word	0x2400293c
 8014714:	24002a50 	.word	0x24002a50
 8014718:	24002a4c 	.word	0x24002a4c
 801471c:	e000ed04 	.word	0xe000ed04

08014720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014726:	2300      	movs	r3, #0
 8014728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801472a:	4b4f      	ldr	r3, [pc, #316]	@ (8014868 <xTaskIncrementTick+0x148>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	f040 808f 	bne.w	8014852 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014734:	4b4d      	ldr	r3, [pc, #308]	@ (801486c <xTaskIncrementTick+0x14c>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	3301      	adds	r3, #1
 801473a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801473c:	4a4b      	ldr	r2, [pc, #300]	@ (801486c <xTaskIncrementTick+0x14c>)
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d121      	bne.n	801478c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014748:	4b49      	ldr	r3, [pc, #292]	@ (8014870 <xTaskIncrementTick+0x150>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00b      	beq.n	801476a <xTaskIncrementTick+0x4a>
	__asm volatile
 8014752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014756:	f383 8811 	msr	BASEPRI, r3
 801475a:	f3bf 8f6f 	isb	sy
 801475e:	f3bf 8f4f 	dsb	sy
 8014762:	603b      	str	r3, [r7, #0]
}
 8014764:	bf00      	nop
 8014766:	bf00      	nop
 8014768:	e7fd      	b.n	8014766 <xTaskIncrementTick+0x46>
 801476a:	4b41      	ldr	r3, [pc, #260]	@ (8014870 <xTaskIncrementTick+0x150>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	60fb      	str	r3, [r7, #12]
 8014770:	4b40      	ldr	r3, [pc, #256]	@ (8014874 <xTaskIncrementTick+0x154>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4a3e      	ldr	r2, [pc, #248]	@ (8014870 <xTaskIncrementTick+0x150>)
 8014776:	6013      	str	r3, [r2, #0]
 8014778:	4a3e      	ldr	r2, [pc, #248]	@ (8014874 <xTaskIncrementTick+0x154>)
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6013      	str	r3, [r2, #0]
 801477e:	4b3e      	ldr	r3, [pc, #248]	@ (8014878 <xTaskIncrementTick+0x158>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	3301      	adds	r3, #1
 8014784:	4a3c      	ldr	r2, [pc, #240]	@ (8014878 <xTaskIncrementTick+0x158>)
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	f000 faa6 	bl	8014cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801478c:	4b3b      	ldr	r3, [pc, #236]	@ (801487c <xTaskIncrementTick+0x15c>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	693a      	ldr	r2, [r7, #16]
 8014792:	429a      	cmp	r2, r3
 8014794:	d348      	bcc.n	8014828 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014796:	4b36      	ldr	r3, [pc, #216]	@ (8014870 <xTaskIncrementTick+0x150>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d104      	bne.n	80147aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147a0:	4b36      	ldr	r3, [pc, #216]	@ (801487c <xTaskIncrementTick+0x15c>)
 80147a2:	f04f 32ff 	mov.w	r2, #4294967295
 80147a6:	601a      	str	r2, [r3, #0]
					break;
 80147a8:	e03e      	b.n	8014828 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147aa:	4b31      	ldr	r3, [pc, #196]	@ (8014870 <xTaskIncrementTick+0x150>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	68db      	ldr	r3, [r3, #12]
 80147b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80147ba:	693a      	ldr	r2, [r7, #16]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d203      	bcs.n	80147ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80147c2:	4a2e      	ldr	r2, [pc, #184]	@ (801487c <xTaskIncrementTick+0x15c>)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80147c8:	e02e      	b.n	8014828 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	3304      	adds	r3, #4
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7ff f854 	bl	801387c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d004      	beq.n	80147e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	3318      	adds	r3, #24
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7ff f84b 	bl	801387c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ea:	2201      	movs	r2, #1
 80147ec:	409a      	lsls	r2, r3
 80147ee:	4b24      	ldr	r3, [pc, #144]	@ (8014880 <xTaskIncrementTick+0x160>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4313      	orrs	r3, r2
 80147f4:	4a22      	ldr	r2, [pc, #136]	@ (8014880 <xTaskIncrementTick+0x160>)
 80147f6:	6013      	str	r3, [r2, #0]
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147fc:	4613      	mov	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	4413      	add	r3, r2
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4a1f      	ldr	r2, [pc, #124]	@ (8014884 <xTaskIncrementTick+0x164>)
 8014806:	441a      	add	r2, r3
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	3304      	adds	r3, #4
 801480c:	4619      	mov	r1, r3
 801480e:	4610      	mov	r0, r2
 8014810:	f7fe ffd7 	bl	80137c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014818:	4b1b      	ldr	r3, [pc, #108]	@ (8014888 <xTaskIncrementTick+0x168>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801481e:	429a      	cmp	r2, r3
 8014820:	d3b9      	bcc.n	8014796 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014822:	2301      	movs	r3, #1
 8014824:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014826:	e7b6      	b.n	8014796 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014828:	4b17      	ldr	r3, [pc, #92]	@ (8014888 <xTaskIncrementTick+0x168>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801482e:	4915      	ldr	r1, [pc, #84]	@ (8014884 <xTaskIncrementTick+0x164>)
 8014830:	4613      	mov	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	4413      	add	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	440b      	add	r3, r1
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d901      	bls.n	8014844 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014840:	2301      	movs	r3, #1
 8014842:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014844:	4b11      	ldr	r3, [pc, #68]	@ (801488c <xTaskIncrementTick+0x16c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d007      	beq.n	801485c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801484c:	2301      	movs	r3, #1
 801484e:	617b      	str	r3, [r7, #20]
 8014850:	e004      	b.n	801485c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014852:	4b0f      	ldr	r3, [pc, #60]	@ (8014890 <xTaskIncrementTick+0x170>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3301      	adds	r3, #1
 8014858:	4a0d      	ldr	r2, [pc, #52]	@ (8014890 <xTaskIncrementTick+0x170>)
 801485a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801485c:	697b      	ldr	r3, [r7, #20]
}
 801485e:	4618      	mov	r0, r3
 8014860:	3718      	adds	r7, #24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	24002a64 	.word	0x24002a64
 801486c:	24002a40 	.word	0x24002a40
 8014870:	240029f4 	.word	0x240029f4
 8014874:	240029f8 	.word	0x240029f8
 8014878:	24002a54 	.word	0x24002a54
 801487c:	24002a5c 	.word	0x24002a5c
 8014880:	24002a44 	.word	0x24002a44
 8014884:	24002940 	.word	0x24002940
 8014888:	2400293c 	.word	0x2400293c
 801488c:	24002a50 	.word	0x24002a50
 8014890:	24002a4c 	.word	0x24002a4c

08014894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014894:	b480      	push	{r7}
 8014896:	b087      	sub	sp, #28
 8014898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801489a:	4b27      	ldr	r3, [pc, #156]	@ (8014938 <vTaskSwitchContext+0xa4>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d003      	beq.n	80148aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80148a2:	4b26      	ldr	r3, [pc, #152]	@ (801493c <vTaskSwitchContext+0xa8>)
 80148a4:	2201      	movs	r2, #1
 80148a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80148a8:	e040      	b.n	801492c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80148aa:	4b24      	ldr	r3, [pc, #144]	@ (801493c <vTaskSwitchContext+0xa8>)
 80148ac:	2200      	movs	r2, #0
 80148ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148b0:	4b23      	ldr	r3, [pc, #140]	@ (8014940 <vTaskSwitchContext+0xac>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	fab3 f383 	clz	r3, r3
 80148bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80148be:	7afb      	ldrb	r3, [r7, #11]
 80148c0:	f1c3 031f 	rsb	r3, r3, #31
 80148c4:	617b      	str	r3, [r7, #20]
 80148c6:	491f      	ldr	r1, [pc, #124]	@ (8014944 <vTaskSwitchContext+0xb0>)
 80148c8:	697a      	ldr	r2, [r7, #20]
 80148ca:	4613      	mov	r3, r2
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	4413      	add	r3, r2
 80148d0:	009b      	lsls	r3, r3, #2
 80148d2:	440b      	add	r3, r1
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d10b      	bne.n	80148f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80148da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148de:	f383 8811 	msr	BASEPRI, r3
 80148e2:	f3bf 8f6f 	isb	sy
 80148e6:	f3bf 8f4f 	dsb	sy
 80148ea:	607b      	str	r3, [r7, #4]
}
 80148ec:	bf00      	nop
 80148ee:	bf00      	nop
 80148f0:	e7fd      	b.n	80148ee <vTaskSwitchContext+0x5a>
 80148f2:	697a      	ldr	r2, [r7, #20]
 80148f4:	4613      	mov	r3, r2
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	4413      	add	r3, r2
 80148fa:	009b      	lsls	r3, r3, #2
 80148fc:	4a11      	ldr	r2, [pc, #68]	@ (8014944 <vTaskSwitchContext+0xb0>)
 80148fe:	4413      	add	r3, r2
 8014900:	613b      	str	r3, [r7, #16]
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	685a      	ldr	r2, [r3, #4]
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	605a      	str	r2, [r3, #4]
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	685a      	ldr	r2, [r3, #4]
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	3308      	adds	r3, #8
 8014914:	429a      	cmp	r2, r3
 8014916:	d104      	bne.n	8014922 <vTaskSwitchContext+0x8e>
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	685a      	ldr	r2, [r3, #4]
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	605a      	str	r2, [r3, #4]
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	4a07      	ldr	r2, [pc, #28]	@ (8014948 <vTaskSwitchContext+0xb4>)
 801492a:	6013      	str	r3, [r2, #0]
}
 801492c:	bf00      	nop
 801492e:	371c      	adds	r7, #28
 8014930:	46bd      	mov	sp, r7
 8014932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014936:	4770      	bx	lr
 8014938:	24002a64 	.word	0x24002a64
 801493c:	24002a50 	.word	0x24002a50
 8014940:	24002a44 	.word	0x24002a44
 8014944:	24002940 	.word	0x24002940
 8014948:	2400293c 	.word	0x2400293c

0801494c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d10b      	bne.n	8014974 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014960:	f383 8811 	msr	BASEPRI, r3
 8014964:	f3bf 8f6f 	isb	sy
 8014968:	f3bf 8f4f 	dsb	sy
 801496c:	60fb      	str	r3, [r7, #12]
}
 801496e:	bf00      	nop
 8014970:	bf00      	nop
 8014972:	e7fd      	b.n	8014970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014974:	4b07      	ldr	r3, [pc, #28]	@ (8014994 <vTaskPlaceOnEventList+0x48>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	3318      	adds	r3, #24
 801497a:	4619      	mov	r1, r3
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7fe ff44 	bl	801380a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014982:	2101      	movs	r1, #1
 8014984:	6838      	ldr	r0, [r7, #0]
 8014986:	f000 fb87 	bl	8015098 <prvAddCurrentTaskToDelayedList>
}
 801498a:	bf00      	nop
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	2400293c 	.word	0x2400293c

08014998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	68db      	ldr	r3, [r3, #12]
 80149a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d10b      	bne.n	80149c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80149ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149b2:	f383 8811 	msr	BASEPRI, r3
 80149b6:	f3bf 8f6f 	isb	sy
 80149ba:	f3bf 8f4f 	dsb	sy
 80149be:	60fb      	str	r3, [r7, #12]
}
 80149c0:	bf00      	nop
 80149c2:	bf00      	nop
 80149c4:	e7fd      	b.n	80149c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	3318      	adds	r3, #24
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7fe ff56 	bl	801387c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149d0:	4b1d      	ldr	r3, [pc, #116]	@ (8014a48 <xTaskRemoveFromEventList+0xb0>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d11c      	bne.n	8014a12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	3304      	adds	r3, #4
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fe ff4d 	bl	801387c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149e6:	2201      	movs	r2, #1
 80149e8:	409a      	lsls	r2, r3
 80149ea:	4b18      	ldr	r3, [pc, #96]	@ (8014a4c <xTaskRemoveFromEventList+0xb4>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	4313      	orrs	r3, r2
 80149f0:	4a16      	ldr	r2, [pc, #88]	@ (8014a4c <xTaskRemoveFromEventList+0xb4>)
 80149f2:	6013      	str	r3, [r2, #0]
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149f8:	4613      	mov	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	4413      	add	r3, r2
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	4a13      	ldr	r2, [pc, #76]	@ (8014a50 <xTaskRemoveFromEventList+0xb8>)
 8014a02:	441a      	add	r2, r3
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	3304      	adds	r3, #4
 8014a08:	4619      	mov	r1, r3
 8014a0a:	4610      	mov	r0, r2
 8014a0c:	f7fe fed9 	bl	80137c2 <vListInsertEnd>
 8014a10:	e005      	b.n	8014a1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	3318      	adds	r3, #24
 8014a16:	4619      	mov	r1, r3
 8014a18:	480e      	ldr	r0, [pc, #56]	@ (8014a54 <xTaskRemoveFromEventList+0xbc>)
 8014a1a:	f7fe fed2 	bl	80137c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a22:	4b0d      	ldr	r3, [pc, #52]	@ (8014a58 <xTaskRemoveFromEventList+0xc0>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d905      	bls.n	8014a38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014a30:	4b0a      	ldr	r3, [pc, #40]	@ (8014a5c <xTaskRemoveFromEventList+0xc4>)
 8014a32:	2201      	movs	r2, #1
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	e001      	b.n	8014a3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014a3c:	697b      	ldr	r3, [r7, #20]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	24002a64 	.word	0x24002a64
 8014a4c:	24002a44 	.word	0x24002a44
 8014a50:	24002940 	.word	0x24002940
 8014a54:	240029fc 	.word	0x240029fc
 8014a58:	2400293c 	.word	0x2400293c
 8014a5c:	24002a50 	.word	0x24002a50

08014a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a68:	4b06      	ldr	r3, [pc, #24]	@ (8014a84 <vTaskInternalSetTimeOutState+0x24>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a70:	4b05      	ldr	r3, [pc, #20]	@ (8014a88 <vTaskInternalSetTimeOutState+0x28>)
 8014a72:	681a      	ldr	r2, [r3, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	605a      	str	r2, [r3, #4]
}
 8014a78:	bf00      	nop
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr
 8014a84:	24002a54 	.word	0x24002a54
 8014a88:	24002a40 	.word	0x24002a40

08014a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b088      	sub	sp, #32
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d10b      	bne.n	8014ab4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa0:	f383 8811 	msr	BASEPRI, r3
 8014aa4:	f3bf 8f6f 	isb	sy
 8014aa8:	f3bf 8f4f 	dsb	sy
 8014aac:	613b      	str	r3, [r7, #16]
}
 8014aae:	bf00      	nop
 8014ab0:	bf00      	nop
 8014ab2:	e7fd      	b.n	8014ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d10b      	bne.n	8014ad2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014abe:	f383 8811 	msr	BASEPRI, r3
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	60fb      	str	r3, [r7, #12]
}
 8014acc:	bf00      	nop
 8014ace:	bf00      	nop
 8014ad0:	e7fd      	b.n	8014ace <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014ad2:	f000 fc79 	bl	80153c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8014b4c <xTaskCheckForTimeOut+0xc0>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	69ba      	ldr	r2, [r7, #24]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aee:	d102      	bne.n	8014af6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014af0:	2300      	movs	r3, #0
 8014af2:	61fb      	str	r3, [r7, #28]
 8014af4:	e023      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	4b15      	ldr	r3, [pc, #84]	@ (8014b50 <xTaskCheckForTimeOut+0xc4>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d007      	beq.n	8014b12 <xTaskCheckForTimeOut+0x86>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	69ba      	ldr	r2, [r7, #24]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d302      	bcc.n	8014b12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	61fb      	str	r3, [r7, #28]
 8014b10:	e015      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	697a      	ldr	r2, [r7, #20]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d20b      	bcs.n	8014b34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	1ad2      	subs	r2, r2, r3
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f7ff ff99 	bl	8014a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	61fb      	str	r3, [r7, #28]
 8014b32:	e004      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014b3e:	f000 fc75 	bl	801542c <vPortExitCritical>

	return xReturn;
 8014b42:	69fb      	ldr	r3, [r7, #28]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3720      	adds	r7, #32
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	24002a40 	.word	0x24002a40
 8014b50:	24002a54 	.word	0x24002a54

08014b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014b54:	b480      	push	{r7}
 8014b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b58:	4b03      	ldr	r3, [pc, #12]	@ (8014b68 <vTaskMissedYield+0x14>)
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	601a      	str	r2, [r3, #0]
}
 8014b5e:	bf00      	nop
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	24002a50 	.word	0x24002a50

08014b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b74:	f000 f852 	bl	8014c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b78:	4b06      	ldr	r3, [pc, #24]	@ (8014b94 <prvIdleTask+0x28>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d9f9      	bls.n	8014b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b80:	4b05      	ldr	r3, [pc, #20]	@ (8014b98 <prvIdleTask+0x2c>)
 8014b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b86:	601a      	str	r2, [r3, #0]
 8014b88:	f3bf 8f4f 	dsb	sy
 8014b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b90:	e7f0      	b.n	8014b74 <prvIdleTask+0x8>
 8014b92:	bf00      	nop
 8014b94:	24002940 	.word	0x24002940
 8014b98:	e000ed04 	.word	0xe000ed04

08014b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	607b      	str	r3, [r7, #4]
 8014ba6:	e00c      	b.n	8014bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	4613      	mov	r3, r2
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	4413      	add	r3, r2
 8014bb0:	009b      	lsls	r3, r3, #2
 8014bb2:	4a12      	ldr	r2, [pc, #72]	@ (8014bfc <prvInitialiseTaskLists+0x60>)
 8014bb4:	4413      	add	r3, r2
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7fe fdd6 	bl	8013768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	607b      	str	r3, [r7, #4]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2b06      	cmp	r3, #6
 8014bc6:	d9ef      	bls.n	8014ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014bc8:	480d      	ldr	r0, [pc, #52]	@ (8014c00 <prvInitialiseTaskLists+0x64>)
 8014bca:	f7fe fdcd 	bl	8013768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014bce:	480d      	ldr	r0, [pc, #52]	@ (8014c04 <prvInitialiseTaskLists+0x68>)
 8014bd0:	f7fe fdca 	bl	8013768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014bd4:	480c      	ldr	r0, [pc, #48]	@ (8014c08 <prvInitialiseTaskLists+0x6c>)
 8014bd6:	f7fe fdc7 	bl	8013768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014bda:	480c      	ldr	r0, [pc, #48]	@ (8014c0c <prvInitialiseTaskLists+0x70>)
 8014bdc:	f7fe fdc4 	bl	8013768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014be0:	480b      	ldr	r0, [pc, #44]	@ (8014c10 <prvInitialiseTaskLists+0x74>)
 8014be2:	f7fe fdc1 	bl	8013768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014be6:	4b0b      	ldr	r3, [pc, #44]	@ (8014c14 <prvInitialiseTaskLists+0x78>)
 8014be8:	4a05      	ldr	r2, [pc, #20]	@ (8014c00 <prvInitialiseTaskLists+0x64>)
 8014bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014bec:	4b0a      	ldr	r3, [pc, #40]	@ (8014c18 <prvInitialiseTaskLists+0x7c>)
 8014bee:	4a05      	ldr	r2, [pc, #20]	@ (8014c04 <prvInitialiseTaskLists+0x68>)
 8014bf0:	601a      	str	r2, [r3, #0]
}
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	24002940 	.word	0x24002940
 8014c00:	240029cc 	.word	0x240029cc
 8014c04:	240029e0 	.word	0x240029e0
 8014c08:	240029fc 	.word	0x240029fc
 8014c0c:	24002a10 	.word	0x24002a10
 8014c10:	24002a28 	.word	0x24002a28
 8014c14:	240029f4 	.word	0x240029f4
 8014c18:	240029f8 	.word	0x240029f8

08014c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c22:	e019      	b.n	8014c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014c24:	f000 fbd0 	bl	80153c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c28:	4b10      	ldr	r3, [pc, #64]	@ (8014c6c <prvCheckTasksWaitingTermination+0x50>)
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	3304      	adds	r3, #4
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fe fe21 	bl	801387c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c70 <prvCheckTasksWaitingTermination+0x54>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	4a0b      	ldr	r2, [pc, #44]	@ (8014c70 <prvCheckTasksWaitingTermination+0x54>)
 8014c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014c44:	4b0b      	ldr	r3, [pc, #44]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014c4e:	f000 fbed 	bl	801542c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 f810 	bl	8014c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c58:	4b06      	ldr	r3, [pc, #24]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1e1      	bne.n	8014c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c60:	bf00      	nop
 8014c62:	bf00      	nop
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	24002a10 	.word	0x24002a10
 8014c70:	24002a3c 	.word	0x24002a3c
 8014c74:	24002a24 	.word	0x24002a24

08014c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d108      	bne.n	8014c9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f000 fd8a 	bl	80157a8 <vPortFree>
				vPortFree( pxTCB );
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 fd87 	bl	80157a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c9a:	e019      	b.n	8014cd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	d103      	bne.n	8014cae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 fd7e 	bl	80157a8 <vPortFree>
	}
 8014cac:	e010      	b.n	8014cd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014cb4:	2b02      	cmp	r3, #2
 8014cb6:	d00b      	beq.n	8014cd0 <prvDeleteTCB+0x58>
	__asm volatile
 8014cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cbc:	f383 8811 	msr	BASEPRI, r3
 8014cc0:	f3bf 8f6f 	isb	sy
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	60fb      	str	r3, [r7, #12]
}
 8014cca:	bf00      	nop
 8014ccc:	bf00      	nop
 8014cce:	e7fd      	b.n	8014ccc <prvDeleteTCB+0x54>
	}
 8014cd0:	bf00      	nop
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014cde:	4b0c      	ldr	r3, [pc, #48]	@ (8014d10 <prvResetNextTaskUnblockTime+0x38>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d104      	bne.n	8014cf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8014d14 <prvResetNextTaskUnblockTime+0x3c>)
 8014cea:	f04f 32ff 	mov.w	r2, #4294967295
 8014cee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cf0:	e008      	b.n	8014d04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cf2:	4b07      	ldr	r3, [pc, #28]	@ (8014d10 <prvResetNextTaskUnblockTime+0x38>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	4a04      	ldr	r2, [pc, #16]	@ (8014d14 <prvResetNextTaskUnblockTime+0x3c>)
 8014d02:	6013      	str	r3, [r2, #0]
}
 8014d04:	bf00      	nop
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr
 8014d10:	240029f4 	.word	0x240029f4
 8014d14:	24002a5c 	.word	0x24002a5c

08014d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8014d4c <xTaskGetSchedulerState+0x34>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d102      	bne.n	8014d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014d26:	2301      	movs	r3, #1
 8014d28:	607b      	str	r3, [r7, #4]
 8014d2a:	e008      	b.n	8014d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d2c:	4b08      	ldr	r3, [pc, #32]	@ (8014d50 <xTaskGetSchedulerState+0x38>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d102      	bne.n	8014d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014d34:	2302      	movs	r3, #2
 8014d36:	607b      	str	r3, [r7, #4]
 8014d38:	e001      	b.n	8014d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014d3e:	687b      	ldr	r3, [r7, #4]
	}
 8014d40:	4618      	mov	r0, r3
 8014d42:	370c      	adds	r7, #12
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr
 8014d4c:	24002a48 	.word	0x24002a48
 8014d50:	24002a64 	.word	0x24002a64

08014d54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b084      	sub	sp, #16
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d60:	2300      	movs	r3, #0
 8014d62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d05e      	beq.n	8014e28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d6e:	4b31      	ldr	r3, [pc, #196]	@ (8014e34 <xTaskPriorityInherit+0xe0>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d24e      	bcs.n	8014e16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	699b      	ldr	r3, [r3, #24]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	db06      	blt.n	8014d8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d80:	4b2c      	ldr	r3, [pc, #176]	@ (8014e34 <xTaskPriorityInherit+0xe0>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d86:	f1c3 0207 	rsb	r2, r3, #7
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	6959      	ldr	r1, [r3, #20]
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d96:	4613      	mov	r3, r2
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	4413      	add	r3, r2
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	4a26      	ldr	r2, [pc, #152]	@ (8014e38 <xTaskPriorityInherit+0xe4>)
 8014da0:	4413      	add	r3, r2
 8014da2:	4299      	cmp	r1, r3
 8014da4:	d12f      	bne.n	8014e06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	3304      	adds	r3, #4
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fe fd66 	bl	801387c <uxListRemove>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d10a      	bne.n	8014dcc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dba:	2201      	movs	r2, #1
 8014dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8014dc0:	43da      	mvns	r2, r3
 8014dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8014e3c <xTaskPriorityInherit+0xe8>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	4013      	ands	r3, r2
 8014dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8014e3c <xTaskPriorityInherit+0xe8>)
 8014dca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014dcc:	4b19      	ldr	r3, [pc, #100]	@ (8014e34 <xTaskPriorityInherit+0xe0>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dda:	2201      	movs	r2, #1
 8014ddc:	409a      	lsls	r2, r3
 8014dde:	4b17      	ldr	r3, [pc, #92]	@ (8014e3c <xTaskPriorityInherit+0xe8>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4313      	orrs	r3, r2
 8014de4:	4a15      	ldr	r2, [pc, #84]	@ (8014e3c <xTaskPriorityInherit+0xe8>)
 8014de6:	6013      	str	r3, [r2, #0]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dec:	4613      	mov	r3, r2
 8014dee:	009b      	lsls	r3, r3, #2
 8014df0:	4413      	add	r3, r2
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	4a10      	ldr	r2, [pc, #64]	@ (8014e38 <xTaskPriorityInherit+0xe4>)
 8014df6:	441a      	add	r2, r3
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	4610      	mov	r0, r2
 8014e00:	f7fe fcdf 	bl	80137c2 <vListInsertEnd>
 8014e04:	e004      	b.n	8014e10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e06:	4b0b      	ldr	r3, [pc, #44]	@ (8014e34 <xTaskPriorityInherit+0xe0>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014e10:	2301      	movs	r3, #1
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	e008      	b.n	8014e28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014e1a:	4b06      	ldr	r3, [pc, #24]	@ (8014e34 <xTaskPriorityInherit+0xe0>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d201      	bcs.n	8014e28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014e24:	2301      	movs	r3, #1
 8014e26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e28:	68fb      	ldr	r3, [r7, #12]
	}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	2400293c 	.word	0x2400293c
 8014e38:	24002940 	.word	0x24002940
 8014e3c:	24002a44 	.word	0x24002a44

08014e40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d070      	beq.n	8014f38 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014e56:	4b3b      	ldr	r3, [pc, #236]	@ (8014f44 <xTaskPriorityDisinherit+0x104>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	693a      	ldr	r2, [r7, #16]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d00b      	beq.n	8014e78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	60fb      	str	r3, [r7, #12]
}
 8014e72:	bf00      	nop
 8014e74:	bf00      	nop
 8014e76:	e7fd      	b.n	8014e74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d10b      	bne.n	8014e98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e84:	f383 8811 	msr	BASEPRI, r3
 8014e88:	f3bf 8f6f 	isb	sy
 8014e8c:	f3bf 8f4f 	dsb	sy
 8014e90:	60bb      	str	r3, [r7, #8]
}
 8014e92:	bf00      	nop
 8014e94:	bf00      	nop
 8014e96:	e7fd      	b.n	8014e94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e9c:	1e5a      	subs	r2, r3, #1
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d044      	beq.n	8014f38 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d140      	bne.n	8014f38 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	3304      	adds	r3, #4
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fe fcde 	bl	801387c <uxListRemove>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d115      	bne.n	8014ef2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eca:	491f      	ldr	r1, [pc, #124]	@ (8014f48 <xTaskPriorityDisinherit+0x108>)
 8014ecc:	4613      	mov	r3, r2
 8014ece:	009b      	lsls	r3, r3, #2
 8014ed0:	4413      	add	r3, r2
 8014ed2:	009b      	lsls	r3, r3, #2
 8014ed4:	440b      	add	r3, r1
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10a      	bne.n	8014ef2 <xTaskPriorityDisinherit+0xb2>
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ee6:	43da      	mvns	r2, r3
 8014ee8:	4b18      	ldr	r3, [pc, #96]	@ (8014f4c <xTaskPriorityDisinherit+0x10c>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4013      	ands	r3, r2
 8014eee:	4a17      	ldr	r2, [pc, #92]	@ (8014f4c <xTaskPriorityDisinherit+0x10c>)
 8014ef0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014efe:	f1c3 0207 	rsb	r2, r3, #7
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f0a:	2201      	movs	r2, #1
 8014f0c:	409a      	lsls	r2, r3
 8014f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8014f4c <xTaskPriorityDisinherit+0x10c>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	4313      	orrs	r3, r2
 8014f14:	4a0d      	ldr	r2, [pc, #52]	@ (8014f4c <xTaskPriorityDisinherit+0x10c>)
 8014f16:	6013      	str	r3, [r2, #0]
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4413      	add	r3, r2
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	4a08      	ldr	r2, [pc, #32]	@ (8014f48 <xTaskPriorityDisinherit+0x108>)
 8014f26:	441a      	add	r2, r3
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	3304      	adds	r3, #4
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4610      	mov	r0, r2
 8014f30:	f7fe fc47 	bl	80137c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f34:	2301      	movs	r3, #1
 8014f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f38:	697b      	ldr	r3, [r7, #20]
	}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3718      	adds	r7, #24
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	2400293c 	.word	0x2400293c
 8014f48:	24002940 	.word	0x24002940
 8014f4c:	24002a44 	.word	0x24002a44

08014f50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b088      	sub	sp, #32
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014f5e:	2301      	movs	r3, #1
 8014f60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d079      	beq.n	801505c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d10b      	bne.n	8014f88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f74:	f383 8811 	msr	BASEPRI, r3
 8014f78:	f3bf 8f6f 	isb	sy
 8014f7c:	f3bf 8f4f 	dsb	sy
 8014f80:	60fb      	str	r3, [r7, #12]
}
 8014f82:	bf00      	nop
 8014f84:	bf00      	nop
 8014f86:	e7fd      	b.n	8014f84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f8c:	683a      	ldr	r2, [r7, #0]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d902      	bls.n	8014f98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	61fb      	str	r3, [r7, #28]
 8014f96:	e002      	b.n	8014f9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fa2:	69fa      	ldr	r2, [r7, #28]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d059      	beq.n	801505c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fac:	697a      	ldr	r2, [r7, #20]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d154      	bne.n	801505c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8015064 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	69ba      	ldr	r2, [r7, #24]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d10b      	bne.n	8014fd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	60bb      	str	r3, [r7, #8]
}
 8014fce:	bf00      	nop
 8014fd0:	bf00      	nop
 8014fd2:	e7fd      	b.n	8014fd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	69fa      	ldr	r2, [r7, #28]
 8014fde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	699b      	ldr	r3, [r3, #24]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	db04      	blt.n	8014ff2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fe8:	69fb      	ldr	r3, [r7, #28]
 8014fea:	f1c3 0207 	rsb	r2, r3, #7
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	6959      	ldr	r1, [r3, #20]
 8014ff6:	693a      	ldr	r2, [r7, #16]
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	009b      	lsls	r3, r3, #2
 8014ffc:	4413      	add	r3, r2
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	4a19      	ldr	r2, [pc, #100]	@ (8015068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015002:	4413      	add	r3, r2
 8015004:	4299      	cmp	r1, r3
 8015006:	d129      	bne.n	801505c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	3304      	adds	r3, #4
 801500c:	4618      	mov	r0, r3
 801500e:	f7fe fc35 	bl	801387c <uxListRemove>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d10a      	bne.n	801502e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801501c:	2201      	movs	r2, #1
 801501e:	fa02 f303 	lsl.w	r3, r2, r3
 8015022:	43da      	mvns	r2, r3
 8015024:	4b11      	ldr	r3, [pc, #68]	@ (801506c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	4013      	ands	r3, r2
 801502a:	4a10      	ldr	r2, [pc, #64]	@ (801506c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801502c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015032:	2201      	movs	r2, #1
 8015034:	409a      	lsls	r2, r3
 8015036:	4b0d      	ldr	r3, [pc, #52]	@ (801506c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4313      	orrs	r3, r2
 801503c:	4a0b      	ldr	r2, [pc, #44]	@ (801506c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801503e:	6013      	str	r3, [r2, #0]
 8015040:	69bb      	ldr	r3, [r7, #24]
 8015042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015044:	4613      	mov	r3, r2
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	4413      	add	r3, r2
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	4a06      	ldr	r2, [pc, #24]	@ (8015068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801504e:	441a      	add	r2, r3
 8015050:	69bb      	ldr	r3, [r7, #24]
 8015052:	3304      	adds	r3, #4
 8015054:	4619      	mov	r1, r3
 8015056:	4610      	mov	r0, r2
 8015058:	f7fe fbb3 	bl	80137c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801505c:	bf00      	nop
 801505e:	3720      	adds	r7, #32
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}
 8015064:	2400293c 	.word	0x2400293c
 8015068:	24002940 	.word	0x24002940
 801506c:	24002a44 	.word	0x24002a44

08015070 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015070:	b480      	push	{r7}
 8015072:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015074:	4b07      	ldr	r3, [pc, #28]	@ (8015094 <pvTaskIncrementMutexHeldCount+0x24>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d004      	beq.n	8015086 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801507c:	4b05      	ldr	r3, [pc, #20]	@ (8015094 <pvTaskIncrementMutexHeldCount+0x24>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015082:	3201      	adds	r2, #1
 8015084:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8015086:	4b03      	ldr	r3, [pc, #12]	@ (8015094 <pvTaskIncrementMutexHeldCount+0x24>)
 8015088:	681b      	ldr	r3, [r3, #0]
	}
 801508a:	4618      	mov	r0, r3
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr
 8015094:	2400293c 	.word	0x2400293c

08015098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80150a2:	4b29      	ldr	r3, [pc, #164]	@ (8015148 <prvAddCurrentTaskToDelayedList+0xb0>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150a8:	4b28      	ldr	r3, [pc, #160]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	3304      	adds	r3, #4
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fe fbe4 	bl	801387c <uxListRemove>
 80150b4:	4603      	mov	r3, r0
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d10b      	bne.n	80150d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80150ba:	4b24      	ldr	r3, [pc, #144]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150c0:	2201      	movs	r2, #1
 80150c2:	fa02 f303 	lsl.w	r3, r2, r3
 80150c6:	43da      	mvns	r2, r3
 80150c8:	4b21      	ldr	r3, [pc, #132]	@ (8015150 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4013      	ands	r3, r2
 80150ce:	4a20      	ldr	r2, [pc, #128]	@ (8015150 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150d8:	d10a      	bne.n	80150f0 <prvAddCurrentTaskToDelayedList+0x58>
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d007      	beq.n	80150f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150e0:	4b1a      	ldr	r3, [pc, #104]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3304      	adds	r3, #4
 80150e6:	4619      	mov	r1, r3
 80150e8:	481a      	ldr	r0, [pc, #104]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xbc>)
 80150ea:	f7fe fb6a 	bl	80137c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150ee:	e026      	b.n	801513e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150f0:	68fa      	ldr	r2, [r7, #12]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4413      	add	r3, r2
 80150f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150f8:	4b14      	ldr	r3, [pc, #80]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	68ba      	ldr	r2, [r7, #8]
 80150fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	429a      	cmp	r2, r3
 8015106:	d209      	bcs.n	801511c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015108:	4b13      	ldr	r3, [pc, #76]	@ (8015158 <prvAddCurrentTaskToDelayedList+0xc0>)
 801510a:	681a      	ldr	r2, [r3, #0]
 801510c:	4b0f      	ldr	r3, [pc, #60]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	3304      	adds	r3, #4
 8015112:	4619      	mov	r1, r3
 8015114:	4610      	mov	r0, r2
 8015116:	f7fe fb78 	bl	801380a <vListInsert>
}
 801511a:	e010      	b.n	801513e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801511c:	4b0f      	ldr	r3, [pc, #60]	@ (801515c <prvAddCurrentTaskToDelayedList+0xc4>)
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	4b0a      	ldr	r3, [pc, #40]	@ (801514c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	3304      	adds	r3, #4
 8015126:	4619      	mov	r1, r3
 8015128:	4610      	mov	r0, r2
 801512a:	f7fe fb6e 	bl	801380a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801512e:	4b0c      	ldr	r3, [pc, #48]	@ (8015160 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	68ba      	ldr	r2, [r7, #8]
 8015134:	429a      	cmp	r2, r3
 8015136:	d202      	bcs.n	801513e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015138:	4a09      	ldr	r2, [pc, #36]	@ (8015160 <prvAddCurrentTaskToDelayedList+0xc8>)
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	6013      	str	r3, [r2, #0]
}
 801513e:	bf00      	nop
 8015140:	3710      	adds	r7, #16
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	24002a40 	.word	0x24002a40
 801514c:	2400293c 	.word	0x2400293c
 8015150:	24002a44 	.word	0x24002a44
 8015154:	24002a28 	.word	0x24002a28
 8015158:	240029f8 	.word	0x240029f8
 801515c:	240029f4 	.word	0x240029f4
 8015160:	24002a5c 	.word	0x24002a5c

08015164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015164:	b480      	push	{r7}
 8015166:	b085      	sub	sp, #20
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	3b04      	subs	r3, #4
 8015174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801517c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	3b04      	subs	r3, #4
 8015182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	f023 0201 	bic.w	r2, r3, #1
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3b04      	subs	r3, #4
 8015192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015194:	4a0c      	ldr	r2, [pc, #48]	@ (80151c8 <pxPortInitialiseStack+0x64>)
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	3b14      	subs	r3, #20
 801519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80151a0:	687a      	ldr	r2, [r7, #4]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	3b04      	subs	r3, #4
 80151aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f06f 0202 	mvn.w	r2, #2
 80151b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	3b20      	subs	r3, #32
 80151b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151ba:	68fb      	ldr	r3, [r7, #12]
}
 80151bc:	4618      	mov	r0, r3
 80151be:	3714      	adds	r7, #20
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr
 80151c8:	080151cd 	.word	0x080151cd

080151cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151cc:	b480      	push	{r7}
 80151ce:	b085      	sub	sp, #20
 80151d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151d2:	2300      	movs	r3, #0
 80151d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151d6:	4b13      	ldr	r3, [pc, #76]	@ (8015224 <prvTaskExitError+0x58>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151de:	d00b      	beq.n	80151f8 <prvTaskExitError+0x2c>
	__asm volatile
 80151e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151e4:	f383 8811 	msr	BASEPRI, r3
 80151e8:	f3bf 8f6f 	isb	sy
 80151ec:	f3bf 8f4f 	dsb	sy
 80151f0:	60fb      	str	r3, [r7, #12]
}
 80151f2:	bf00      	nop
 80151f4:	bf00      	nop
 80151f6:	e7fd      	b.n	80151f4 <prvTaskExitError+0x28>
	__asm volatile
 80151f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151fc:	f383 8811 	msr	BASEPRI, r3
 8015200:	f3bf 8f6f 	isb	sy
 8015204:	f3bf 8f4f 	dsb	sy
 8015208:	60bb      	str	r3, [r7, #8]
}
 801520a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801520c:	bf00      	nop
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d0fc      	beq.n	801520e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015214:	bf00      	nop
 8015216:	bf00      	nop
 8015218:	3714      	adds	r7, #20
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	240000c4 	.word	0x240000c4
	...

08015230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015230:	4b07      	ldr	r3, [pc, #28]	@ (8015250 <pxCurrentTCBConst2>)
 8015232:	6819      	ldr	r1, [r3, #0]
 8015234:	6808      	ldr	r0, [r1, #0]
 8015236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523a:	f380 8809 	msr	PSP, r0
 801523e:	f3bf 8f6f 	isb	sy
 8015242:	f04f 0000 	mov.w	r0, #0
 8015246:	f380 8811 	msr	BASEPRI, r0
 801524a:	4770      	bx	lr
 801524c:	f3af 8000 	nop.w

08015250 <pxCurrentTCBConst2>:
 8015250:	2400293c 	.word	0x2400293c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015254:	bf00      	nop
 8015256:	bf00      	nop

08015258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015258:	4808      	ldr	r0, [pc, #32]	@ (801527c <prvPortStartFirstTask+0x24>)
 801525a:	6800      	ldr	r0, [r0, #0]
 801525c:	6800      	ldr	r0, [r0, #0]
 801525e:	f380 8808 	msr	MSP, r0
 8015262:	f04f 0000 	mov.w	r0, #0
 8015266:	f380 8814 	msr	CONTROL, r0
 801526a:	b662      	cpsie	i
 801526c:	b661      	cpsie	f
 801526e:	f3bf 8f4f 	dsb	sy
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	df00      	svc	0
 8015278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801527a:	bf00      	nop
 801527c:	e000ed08 	.word	0xe000ed08

08015280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015286:	4b47      	ldr	r3, [pc, #284]	@ (80153a4 <xPortStartScheduler+0x124>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4a47      	ldr	r2, [pc, #284]	@ (80153a8 <xPortStartScheduler+0x128>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d10b      	bne.n	80152a8 <xPortStartScheduler+0x28>
	__asm volatile
 8015290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	613b      	str	r3, [r7, #16]
}
 80152a2:	bf00      	nop
 80152a4:	bf00      	nop
 80152a6:	e7fd      	b.n	80152a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80152a8:	4b3e      	ldr	r3, [pc, #248]	@ (80153a4 <xPortStartScheduler+0x124>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	4a3f      	ldr	r2, [pc, #252]	@ (80153ac <xPortStartScheduler+0x12c>)
 80152ae:	4293      	cmp	r3, r2
 80152b0:	d10b      	bne.n	80152ca <xPortStartScheduler+0x4a>
	__asm volatile
 80152b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b6:	f383 8811 	msr	BASEPRI, r3
 80152ba:	f3bf 8f6f 	isb	sy
 80152be:	f3bf 8f4f 	dsb	sy
 80152c2:	60fb      	str	r3, [r7, #12]
}
 80152c4:	bf00      	nop
 80152c6:	bf00      	nop
 80152c8:	e7fd      	b.n	80152c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152ca:	4b39      	ldr	r3, [pc, #228]	@ (80153b0 <xPortStartScheduler+0x130>)
 80152cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	781b      	ldrb	r3, [r3, #0]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	22ff      	movs	r2, #255	@ 0xff
 80152da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152e4:	78fb      	ldrb	r3, [r7, #3]
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	4b31      	ldr	r3, [pc, #196]	@ (80153b4 <xPortStartScheduler+0x134>)
 80152f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152f2:	4b31      	ldr	r3, [pc, #196]	@ (80153b8 <xPortStartScheduler+0x138>)
 80152f4:	2207      	movs	r2, #7
 80152f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152f8:	e009      	b.n	801530e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80152fa:	4b2f      	ldr	r3, [pc, #188]	@ (80153b8 <xPortStartScheduler+0x138>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	3b01      	subs	r3, #1
 8015300:	4a2d      	ldr	r2, [pc, #180]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015304:	78fb      	ldrb	r3, [r7, #3]
 8015306:	b2db      	uxtb	r3, r3
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	b2db      	uxtb	r3, r3
 801530c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801530e:	78fb      	ldrb	r3, [r7, #3]
 8015310:	b2db      	uxtb	r3, r3
 8015312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015316:	2b80      	cmp	r3, #128	@ 0x80
 8015318:	d0ef      	beq.n	80152fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801531a:	4b27      	ldr	r3, [pc, #156]	@ (80153b8 <xPortStartScheduler+0x138>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f1c3 0307 	rsb	r3, r3, #7
 8015322:	2b04      	cmp	r3, #4
 8015324:	d00b      	beq.n	801533e <xPortStartScheduler+0xbe>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532a:	f383 8811 	msr	BASEPRI, r3
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	f3bf 8f4f 	dsb	sy
 8015336:	60bb      	str	r3, [r7, #8]
}
 8015338:	bf00      	nop
 801533a:	bf00      	nop
 801533c:	e7fd      	b.n	801533a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801533e:	4b1e      	ldr	r3, [pc, #120]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	021b      	lsls	r3, r3, #8
 8015344:	4a1c      	ldr	r2, [pc, #112]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015348:	4b1b      	ldr	r3, [pc, #108]	@ (80153b8 <xPortStartScheduler+0x138>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015350:	4a19      	ldr	r2, [pc, #100]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	b2da      	uxtb	r2, r3
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801535c:	4b17      	ldr	r3, [pc, #92]	@ (80153bc <xPortStartScheduler+0x13c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a16      	ldr	r2, [pc, #88]	@ (80153bc <xPortStartScheduler+0x13c>)
 8015362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015368:	4b14      	ldr	r3, [pc, #80]	@ (80153bc <xPortStartScheduler+0x13c>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a13      	ldr	r2, [pc, #76]	@ (80153bc <xPortStartScheduler+0x13c>)
 801536e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015374:	f000 f8da 	bl	801552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015378:	4b11      	ldr	r3, [pc, #68]	@ (80153c0 <xPortStartScheduler+0x140>)
 801537a:	2200      	movs	r2, #0
 801537c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801537e:	f000 f8f9 	bl	8015574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015382:	4b10      	ldr	r3, [pc, #64]	@ (80153c4 <xPortStartScheduler+0x144>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	4a0f      	ldr	r2, [pc, #60]	@ (80153c4 <xPortStartScheduler+0x144>)
 8015388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801538c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801538e:	f7ff ff63 	bl	8015258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015392:	f7ff fa7f 	bl	8014894 <vTaskSwitchContext>
	prvTaskExitError();
 8015396:	f7ff ff19 	bl	80151cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3718      	adds	r7, #24
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	e000ed00 	.word	0xe000ed00
 80153a8:	410fc271 	.word	0x410fc271
 80153ac:	410fc270 	.word	0x410fc270
 80153b0:	e000e400 	.word	0xe000e400
 80153b4:	24002a68 	.word	0x24002a68
 80153b8:	24002a6c 	.word	0x24002a6c
 80153bc:	e000ed20 	.word	0xe000ed20
 80153c0:	240000c4 	.word	0x240000c4
 80153c4:	e000ef34 	.word	0xe000ef34

080153c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153c8:	b480      	push	{r7}
 80153ca:	b083      	sub	sp, #12
 80153cc:	af00      	add	r7, sp, #0
	__asm volatile
 80153ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d2:	f383 8811 	msr	BASEPRI, r3
 80153d6:	f3bf 8f6f 	isb	sy
 80153da:	f3bf 8f4f 	dsb	sy
 80153de:	607b      	str	r3, [r7, #4]
}
 80153e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153e2:	4b10      	ldr	r3, [pc, #64]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	3301      	adds	r3, #1
 80153e8:	4a0e      	ldr	r2, [pc, #56]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153ec:	4b0d      	ldr	r3, [pc, #52]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d110      	bne.n	8015416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153f4:	4b0c      	ldr	r3, [pc, #48]	@ (8015428 <vPortEnterCritical+0x60>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00b      	beq.n	8015416 <vPortEnterCritical+0x4e>
	__asm volatile
 80153fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015402:	f383 8811 	msr	BASEPRI, r3
 8015406:	f3bf 8f6f 	isb	sy
 801540a:	f3bf 8f4f 	dsb	sy
 801540e:	603b      	str	r3, [r7, #0]
}
 8015410:	bf00      	nop
 8015412:	bf00      	nop
 8015414:	e7fd      	b.n	8015412 <vPortEnterCritical+0x4a>
	}
}
 8015416:	bf00      	nop
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	240000c4 	.word	0x240000c4
 8015428:	e000ed04 	.word	0xe000ed04

0801542c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801542c:	b480      	push	{r7}
 801542e:	b083      	sub	sp, #12
 8015430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015432:	4b12      	ldr	r3, [pc, #72]	@ (801547c <vPortExitCritical+0x50>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10b      	bne.n	8015452 <vPortExitCritical+0x26>
	__asm volatile
 801543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801543e:	f383 8811 	msr	BASEPRI, r3
 8015442:	f3bf 8f6f 	isb	sy
 8015446:	f3bf 8f4f 	dsb	sy
 801544a:	607b      	str	r3, [r7, #4]
}
 801544c:	bf00      	nop
 801544e:	bf00      	nop
 8015450:	e7fd      	b.n	801544e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015452:	4b0a      	ldr	r3, [pc, #40]	@ (801547c <vPortExitCritical+0x50>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	3b01      	subs	r3, #1
 8015458:	4a08      	ldr	r2, [pc, #32]	@ (801547c <vPortExitCritical+0x50>)
 801545a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801545c:	4b07      	ldr	r3, [pc, #28]	@ (801547c <vPortExitCritical+0x50>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d105      	bne.n	8015470 <vPortExitCritical+0x44>
 8015464:	2300      	movs	r3, #0
 8015466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	f383 8811 	msr	BASEPRI, r3
}
 801546e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015470:	bf00      	nop
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	240000c4 	.word	0x240000c4

08015480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015480:	f3ef 8009 	mrs	r0, PSP
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	4b15      	ldr	r3, [pc, #84]	@ (80154e0 <pxCurrentTCBConst>)
 801548a:	681a      	ldr	r2, [r3, #0]
 801548c:	f01e 0f10 	tst.w	lr, #16
 8015490:	bf08      	it	eq
 8015492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801549a:	6010      	str	r0, [r2, #0]
 801549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80154a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80154a4:	f380 8811 	msr	BASEPRI, r0
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f7ff f9f0 	bl	8014894 <vTaskSwitchContext>
 80154b4:	f04f 0000 	mov.w	r0, #0
 80154b8:	f380 8811 	msr	BASEPRI, r0
 80154bc:	bc09      	pop	{r0, r3}
 80154be:	6819      	ldr	r1, [r3, #0]
 80154c0:	6808      	ldr	r0, [r1, #0]
 80154c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c6:	f01e 0f10 	tst.w	lr, #16
 80154ca:	bf08      	it	eq
 80154cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154d0:	f380 8809 	msr	PSP, r0
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	f3af 8000 	nop.w

080154e0 <pxCurrentTCBConst>:
 80154e0:	2400293c 	.word	0x2400293c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154e4:	bf00      	nop
 80154e6:	bf00      	nop

080154e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	607b      	str	r3, [r7, #4]
}
 8015500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015502:	f7ff f90d 	bl	8014720 <xTaskIncrementTick>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d003      	beq.n	8015514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801550c:	4b06      	ldr	r3, [pc, #24]	@ (8015528 <SysTick_Handler+0x40>)
 801550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015512:	601a      	str	r2, [r3, #0]
 8015514:	2300      	movs	r3, #0
 8015516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	f383 8811 	msr	BASEPRI, r3
}
 801551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	e000ed04 	.word	0xe000ed04

0801552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801552c:	b480      	push	{r7}
 801552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015530:	4b0b      	ldr	r3, [pc, #44]	@ (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015532:	2200      	movs	r2, #0
 8015534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015536:	4b0b      	ldr	r3, [pc, #44]	@ (8015564 <vPortSetupTimerInterrupt+0x38>)
 8015538:	2200      	movs	r2, #0
 801553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801553c:	4b0a      	ldr	r3, [pc, #40]	@ (8015568 <vPortSetupTimerInterrupt+0x3c>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a0a      	ldr	r2, [pc, #40]	@ (801556c <vPortSetupTimerInterrupt+0x40>)
 8015542:	fba2 2303 	umull	r2, r3, r2, r3
 8015546:	099b      	lsrs	r3, r3, #6
 8015548:	4a09      	ldr	r2, [pc, #36]	@ (8015570 <vPortSetupTimerInterrupt+0x44>)
 801554a:	3b01      	subs	r3, #1
 801554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801554e:	4b04      	ldr	r3, [pc, #16]	@ (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015550:	2207      	movs	r2, #7
 8015552:	601a      	str	r2, [r3, #0]
}
 8015554:	bf00      	nop
 8015556:	46bd      	mov	sp, r7
 8015558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555c:	4770      	bx	lr
 801555e:	bf00      	nop
 8015560:	e000e010 	.word	0xe000e010
 8015564:	e000e018 	.word	0xe000e018
 8015568:	2400009c 	.word	0x2400009c
 801556c:	10624dd3 	.word	0x10624dd3
 8015570:	e000e014 	.word	0xe000e014

08015574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015584 <vPortEnableVFP+0x10>
 8015578:	6801      	ldr	r1, [r0, #0]
 801557a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801557e:	6001      	str	r1, [r0, #0]
 8015580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015582:	bf00      	nop
 8015584:	e000ed88 	.word	0xe000ed88

08015588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801558e:	f3ef 8305 	mrs	r3, IPSR
 8015592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b0f      	cmp	r3, #15
 8015598:	d915      	bls.n	80155c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801559a:	4a18      	ldr	r2, [pc, #96]	@ (80155fc <vPortValidateInterruptPriority+0x74>)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	4413      	add	r3, r2
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80155a4:	4b16      	ldr	r3, [pc, #88]	@ (8015600 <vPortValidateInterruptPriority+0x78>)
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	7afa      	ldrb	r2, [r7, #11]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d20b      	bcs.n	80155c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80155ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b2:	f383 8811 	msr	BASEPRI, r3
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	f3bf 8f4f 	dsb	sy
 80155be:	607b      	str	r3, [r7, #4]
}
 80155c0:	bf00      	nop
 80155c2:	bf00      	nop
 80155c4:	e7fd      	b.n	80155c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80155c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015604 <vPortValidateInterruptPriority+0x7c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80155ce:	4b0e      	ldr	r3, [pc, #56]	@ (8015608 <vPortValidateInterruptPriority+0x80>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d90b      	bls.n	80155ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80155d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155da:	f383 8811 	msr	BASEPRI, r3
 80155de:	f3bf 8f6f 	isb	sy
 80155e2:	f3bf 8f4f 	dsb	sy
 80155e6:	603b      	str	r3, [r7, #0]
}
 80155e8:	bf00      	nop
 80155ea:	bf00      	nop
 80155ec:	e7fd      	b.n	80155ea <vPortValidateInterruptPriority+0x62>
	}
 80155ee:	bf00      	nop
 80155f0:	3714      	adds	r7, #20
 80155f2:	46bd      	mov	sp, r7
 80155f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	e000e3f0 	.word	0xe000e3f0
 8015600:	24002a68 	.word	0x24002a68
 8015604:	e000ed0c 	.word	0xe000ed0c
 8015608:	24002a6c 	.word	0x24002a6c

0801560c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b08a      	sub	sp, #40	@ 0x28
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015614:	2300      	movs	r3, #0
 8015616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015618:	f7fe ffd6 	bl	80145c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801561c:	4b5c      	ldr	r3, [pc, #368]	@ (8015790 <pvPortMalloc+0x184>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d101      	bne.n	8015628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015624:	f000 f924 	bl	8015870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015628:	4b5a      	ldr	r3, [pc, #360]	@ (8015794 <pvPortMalloc+0x188>)
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	4013      	ands	r3, r2
 8015630:	2b00      	cmp	r3, #0
 8015632:	f040 8095 	bne.w	8015760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01e      	beq.n	801567a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801563c:	2208      	movs	r2, #8
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4413      	add	r3, r2
 8015642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f003 0307 	and.w	r3, r3, #7
 801564a:	2b00      	cmp	r3, #0
 801564c:	d015      	beq.n	801567a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f023 0307 	bic.w	r3, r3, #7
 8015654:	3308      	adds	r3, #8
 8015656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f003 0307 	and.w	r3, r3, #7
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00b      	beq.n	801567a <pvPortMalloc+0x6e>
	__asm volatile
 8015662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015666:	f383 8811 	msr	BASEPRI, r3
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	f3bf 8f4f 	dsb	sy
 8015672:	617b      	str	r3, [r7, #20]
}
 8015674:	bf00      	nop
 8015676:	bf00      	nop
 8015678:	e7fd      	b.n	8015676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d06f      	beq.n	8015760 <pvPortMalloc+0x154>
 8015680:	4b45      	ldr	r3, [pc, #276]	@ (8015798 <pvPortMalloc+0x18c>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	429a      	cmp	r2, r3
 8015688:	d86a      	bhi.n	8015760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801568a:	4b44      	ldr	r3, [pc, #272]	@ (801579c <pvPortMalloc+0x190>)
 801568c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801568e:	4b43      	ldr	r3, [pc, #268]	@ (801579c <pvPortMalloc+0x190>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015694:	e004      	b.n	80156a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80156a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d903      	bls.n	80156b2 <pvPortMalloc+0xa6>
 80156aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1f1      	bne.n	8015696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80156b2:	4b37      	ldr	r3, [pc, #220]	@ (8015790 <pvPortMalloc+0x184>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d051      	beq.n	8015760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80156bc:	6a3b      	ldr	r3, [r7, #32]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2208      	movs	r2, #8
 80156c2:	4413      	add	r3, r2
 80156c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80156c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	6a3b      	ldr	r3, [r7, #32]
 80156cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80156ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	1ad2      	subs	r2, r2, r3
 80156d6:	2308      	movs	r3, #8
 80156d8:	005b      	lsls	r3, r3, #1
 80156da:	429a      	cmp	r2, r3
 80156dc:	d920      	bls.n	8015720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80156de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4413      	add	r3, r2
 80156e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	f003 0307 	and.w	r3, r3, #7
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00b      	beq.n	8015708 <pvPortMalloc+0xfc>
	__asm volatile
 80156f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f4:	f383 8811 	msr	BASEPRI, r3
 80156f8:	f3bf 8f6f 	isb	sy
 80156fc:	f3bf 8f4f 	dsb	sy
 8015700:	613b      	str	r3, [r7, #16]
}
 8015702:	bf00      	nop
 8015704:	bf00      	nop
 8015706:	e7fd      	b.n	8015704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570a:	685a      	ldr	r2, [r3, #4]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	1ad2      	subs	r2, r2, r3
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801571a:	69b8      	ldr	r0, [r7, #24]
 801571c:	f000 f90a 	bl	8015934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015720:	4b1d      	ldr	r3, [pc, #116]	@ (8015798 <pvPortMalloc+0x18c>)
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	4a1b      	ldr	r2, [pc, #108]	@ (8015798 <pvPortMalloc+0x18c>)
 801572c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801572e:	4b1a      	ldr	r3, [pc, #104]	@ (8015798 <pvPortMalloc+0x18c>)
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	4b1b      	ldr	r3, [pc, #108]	@ (80157a0 <pvPortMalloc+0x194>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	429a      	cmp	r2, r3
 8015738:	d203      	bcs.n	8015742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801573a:	4b17      	ldr	r3, [pc, #92]	@ (8015798 <pvPortMalloc+0x18c>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4a18      	ldr	r2, [pc, #96]	@ (80157a0 <pvPortMalloc+0x194>)
 8015740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015744:	685a      	ldr	r2, [r3, #4]
 8015746:	4b13      	ldr	r3, [pc, #76]	@ (8015794 <pvPortMalloc+0x188>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	431a      	orrs	r2, r3
 801574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801574e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015756:	4b13      	ldr	r3, [pc, #76]	@ (80157a4 <pvPortMalloc+0x198>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	3301      	adds	r3, #1
 801575c:	4a11      	ldr	r2, [pc, #68]	@ (80157a4 <pvPortMalloc+0x198>)
 801575e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015760:	f7fe ff40 	bl	80145e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	f003 0307 	and.w	r3, r3, #7
 801576a:	2b00      	cmp	r3, #0
 801576c:	d00b      	beq.n	8015786 <pvPortMalloc+0x17a>
	__asm volatile
 801576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	60fb      	str	r3, [r7, #12]
}
 8015780:	bf00      	nop
 8015782:	bf00      	nop
 8015784:	e7fd      	b.n	8015782 <pvPortMalloc+0x176>
	return pvReturn;
 8015786:	69fb      	ldr	r3, [r7, #28]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3728      	adds	r7, #40	@ 0x28
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	24006678 	.word	0x24006678
 8015794:	2400668c 	.word	0x2400668c
 8015798:	2400667c 	.word	0x2400667c
 801579c:	24006670 	.word	0x24006670
 80157a0:	24006680 	.word	0x24006680
 80157a4:	24006684 	.word	0x24006684

080157a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d04f      	beq.n	801585a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80157ba:	2308      	movs	r3, #8
 80157bc:	425b      	negs	r3, r3
 80157be:	697a      	ldr	r2, [r7, #20]
 80157c0:	4413      	add	r3, r2
 80157c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	685a      	ldr	r2, [r3, #4]
 80157cc:	4b25      	ldr	r3, [pc, #148]	@ (8015864 <vPortFree+0xbc>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	4013      	ands	r3, r2
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d10b      	bne.n	80157ee <vPortFree+0x46>
	__asm volatile
 80157d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157da:	f383 8811 	msr	BASEPRI, r3
 80157de:	f3bf 8f6f 	isb	sy
 80157e2:	f3bf 8f4f 	dsb	sy
 80157e6:	60fb      	str	r3, [r7, #12]
}
 80157e8:	bf00      	nop
 80157ea:	bf00      	nop
 80157ec:	e7fd      	b.n	80157ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d00b      	beq.n	801580e <vPortFree+0x66>
	__asm volatile
 80157f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157fa:	f383 8811 	msr	BASEPRI, r3
 80157fe:	f3bf 8f6f 	isb	sy
 8015802:	f3bf 8f4f 	dsb	sy
 8015806:	60bb      	str	r3, [r7, #8]
}
 8015808:	bf00      	nop
 801580a:	bf00      	nop
 801580c:	e7fd      	b.n	801580a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	685a      	ldr	r2, [r3, #4]
 8015812:	4b14      	ldr	r3, [pc, #80]	@ (8015864 <vPortFree+0xbc>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	4013      	ands	r3, r2
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01e      	beq.n	801585a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d11a      	bne.n	801585a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	685a      	ldr	r2, [r3, #4]
 8015828:	4b0e      	ldr	r3, [pc, #56]	@ (8015864 <vPortFree+0xbc>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	43db      	mvns	r3, r3
 801582e:	401a      	ands	r2, r3
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015834:	f7fe fec8 	bl	80145c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	685a      	ldr	r2, [r3, #4]
 801583c:	4b0a      	ldr	r3, [pc, #40]	@ (8015868 <vPortFree+0xc0>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	4413      	add	r3, r2
 8015842:	4a09      	ldr	r2, [pc, #36]	@ (8015868 <vPortFree+0xc0>)
 8015844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015846:	6938      	ldr	r0, [r7, #16]
 8015848:	f000 f874 	bl	8015934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801584c:	4b07      	ldr	r3, [pc, #28]	@ (801586c <vPortFree+0xc4>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	3301      	adds	r3, #1
 8015852:	4a06      	ldr	r2, [pc, #24]	@ (801586c <vPortFree+0xc4>)
 8015854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015856:	f7fe fec5 	bl	80145e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801585a:	bf00      	nop
 801585c:	3718      	adds	r7, #24
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	2400668c 	.word	0x2400668c
 8015868:	2400667c 	.word	0x2400667c
 801586c:	24006688 	.word	0x24006688

08015870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015876:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801587a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801587c:	4b27      	ldr	r3, [pc, #156]	@ (801591c <prvHeapInit+0xac>)
 801587e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f003 0307 	and.w	r3, r3, #7
 8015886:	2b00      	cmp	r3, #0
 8015888:	d00c      	beq.n	80158a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	3307      	adds	r3, #7
 801588e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	f023 0307 	bic.w	r3, r3, #7
 8015896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015898:	68ba      	ldr	r2, [r7, #8]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	4a1f      	ldr	r2, [pc, #124]	@ (801591c <prvHeapInit+0xac>)
 80158a0:	4413      	add	r3, r2
 80158a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80158a8:	4a1d      	ldr	r2, [pc, #116]	@ (8015920 <prvHeapInit+0xb0>)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80158ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015920 <prvHeapInit+0xb0>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	68ba      	ldr	r2, [r7, #8]
 80158b8:	4413      	add	r3, r2
 80158ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80158bc:	2208      	movs	r2, #8
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	1a9b      	subs	r3, r3, r2
 80158c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	f023 0307 	bic.w	r3, r3, #7
 80158ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	4a15      	ldr	r2, [pc, #84]	@ (8015924 <prvHeapInit+0xb4>)
 80158d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80158d2:	4b14      	ldr	r3, [pc, #80]	@ (8015924 <prvHeapInit+0xb4>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2200      	movs	r2, #0
 80158d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80158da:	4b12      	ldr	r3, [pc, #72]	@ (8015924 <prvHeapInit+0xb4>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2200      	movs	r2, #0
 80158e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	1ad2      	subs	r2, r2, r3
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80158f0:	4b0c      	ldr	r3, [pc, #48]	@ (8015924 <prvHeapInit+0xb4>)
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	4a0a      	ldr	r2, [pc, #40]	@ (8015928 <prvHeapInit+0xb8>)
 80158fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	4a09      	ldr	r2, [pc, #36]	@ (801592c <prvHeapInit+0xbc>)
 8015906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015908:	4b09      	ldr	r3, [pc, #36]	@ (8015930 <prvHeapInit+0xc0>)
 801590a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801590e:	601a      	str	r2, [r3, #0]
}
 8015910:	bf00      	nop
 8015912:	3714      	adds	r7, #20
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	24002a70 	.word	0x24002a70
 8015920:	24006670 	.word	0x24006670
 8015924:	24006678 	.word	0x24006678
 8015928:	24006680 	.word	0x24006680
 801592c:	2400667c 	.word	0x2400667c
 8015930:	2400668c 	.word	0x2400668c

08015934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015934:	b480      	push	{r7}
 8015936:	b085      	sub	sp, #20
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801593c:	4b28      	ldr	r3, [pc, #160]	@ (80159e0 <prvInsertBlockIntoFreeList+0xac>)
 801593e:	60fb      	str	r3, [r7, #12]
 8015940:	e002      	b.n	8015948 <prvInsertBlockIntoFreeList+0x14>
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	60fb      	str	r3, [r7, #12]
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	429a      	cmp	r2, r3
 8015950:	d8f7      	bhi.n	8015942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	68ba      	ldr	r2, [r7, #8]
 801595c:	4413      	add	r3, r2
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	429a      	cmp	r2, r3
 8015962:	d108      	bne.n	8015976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	685a      	ldr	r2, [r3, #4]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	441a      	add	r2, r3
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	68ba      	ldr	r2, [r7, #8]
 8015980:	441a      	add	r2, r3
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	429a      	cmp	r2, r3
 8015988:	d118      	bne.n	80159bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	4b15      	ldr	r3, [pc, #84]	@ (80159e4 <prvInsertBlockIntoFreeList+0xb0>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d00d      	beq.n	80159b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	685a      	ldr	r2, [r3, #4]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	685b      	ldr	r3, [r3, #4]
 80159a0:	441a      	add	r2, r3
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	601a      	str	r2, [r3, #0]
 80159b0:	e008      	b.n	80159c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80159b2:	4b0c      	ldr	r3, [pc, #48]	@ (80159e4 <prvInsertBlockIntoFreeList+0xb0>)
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	601a      	str	r2, [r3, #0]
 80159ba:	e003      	b.n	80159c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80159c4:	68fa      	ldr	r2, [r7, #12]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d002      	beq.n	80159d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80159d2:	bf00      	nop
 80159d4:	3714      	adds	r7, #20
 80159d6:	46bd      	mov	sp, r7
 80159d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159dc:	4770      	bx	lr
 80159de:	bf00      	nop
 80159e0:	24006670 	.word	0x24006670
 80159e4:	24006678 	.word	0x24006678

080159e8 <atof>:
 80159e8:	2100      	movs	r1, #0
 80159ea:	f000 bdb7 	b.w	801655c <strtod>

080159ee <atoi>:
 80159ee:	220a      	movs	r2, #10
 80159f0:	2100      	movs	r1, #0
 80159f2:	f000 be39 	b.w	8016668 <strtol>

080159f6 <sulp>:
 80159f6:	b570      	push	{r4, r5, r6, lr}
 80159f8:	4604      	mov	r4, r0
 80159fa:	460d      	mov	r5, r1
 80159fc:	4616      	mov	r6, r2
 80159fe:	ec45 4b10 	vmov	d0, r4, r5
 8015a02:	f001 ffa9 	bl	8017958 <__ulp>
 8015a06:	b17e      	cbz	r6, 8015a28 <sulp+0x32>
 8015a08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015a0c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	dd09      	ble.n	8015a28 <sulp+0x32>
 8015a14:	051b      	lsls	r3, r3, #20
 8015a16:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015a20:	ec41 0b17 	vmov	d7, r0, r1
 8015a24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a28:	bd70      	pop	{r4, r5, r6, pc}
 8015a2a:	0000      	movs	r0, r0
 8015a2c:	0000      	movs	r0, r0
	...

08015a30 <_strtod_l>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	ed2d 8b0a 	vpush	{d8-d12}
 8015a38:	b097      	sub	sp, #92	@ 0x5c
 8015a3a:	4688      	mov	r8, r1
 8015a3c:	920e      	str	r2, [sp, #56]	@ 0x38
 8015a3e:	2200      	movs	r2, #0
 8015a40:	9212      	str	r2, [sp, #72]	@ 0x48
 8015a42:	9005      	str	r0, [sp, #20]
 8015a44:	f04f 0a00 	mov.w	sl, #0
 8015a48:	f04f 0b00 	mov.w	fp, #0
 8015a4c:	460a      	mov	r2, r1
 8015a4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a50:	7811      	ldrb	r1, [r2, #0]
 8015a52:	292b      	cmp	r1, #43	@ 0x2b
 8015a54:	d04c      	beq.n	8015af0 <_strtod_l+0xc0>
 8015a56:	d839      	bhi.n	8015acc <_strtod_l+0x9c>
 8015a58:	290d      	cmp	r1, #13
 8015a5a:	d833      	bhi.n	8015ac4 <_strtod_l+0x94>
 8015a5c:	2908      	cmp	r1, #8
 8015a5e:	d833      	bhi.n	8015ac8 <_strtod_l+0x98>
 8015a60:	2900      	cmp	r1, #0
 8015a62:	d03c      	beq.n	8015ade <_strtod_l+0xae>
 8015a64:	2200      	movs	r2, #0
 8015a66:	9208      	str	r2, [sp, #32]
 8015a68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015a6a:	782a      	ldrb	r2, [r5, #0]
 8015a6c:	2a30      	cmp	r2, #48	@ 0x30
 8015a6e:	f040 80b5 	bne.w	8015bdc <_strtod_l+0x1ac>
 8015a72:	786a      	ldrb	r2, [r5, #1]
 8015a74:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015a78:	2a58      	cmp	r2, #88	@ 0x58
 8015a7a:	d170      	bne.n	8015b5e <_strtod_l+0x12e>
 8015a7c:	9302      	str	r3, [sp, #8]
 8015a7e:	9b08      	ldr	r3, [sp, #32]
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	ab12      	add	r3, sp, #72	@ 0x48
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	4a8b      	ldr	r2, [pc, #556]	@ (8015cb4 <_strtod_l+0x284>)
 8015a88:	9805      	ldr	r0, [sp, #20]
 8015a8a:	ab13      	add	r3, sp, #76	@ 0x4c
 8015a8c:	a911      	add	r1, sp, #68	@ 0x44
 8015a8e:	f001 f85d 	bl	8016b4c <__gethex>
 8015a92:	f010 060f 	ands.w	r6, r0, #15
 8015a96:	4604      	mov	r4, r0
 8015a98:	d005      	beq.n	8015aa6 <_strtod_l+0x76>
 8015a9a:	2e06      	cmp	r6, #6
 8015a9c:	d12a      	bne.n	8015af4 <_strtod_l+0xc4>
 8015a9e:	3501      	adds	r5, #1
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9511      	str	r5, [sp, #68]	@ 0x44
 8015aa4:	9308      	str	r3, [sp, #32]
 8015aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f040 852f 	bne.w	801650c <_strtod_l+0xadc>
 8015aae:	9b08      	ldr	r3, [sp, #32]
 8015ab0:	ec4b ab10 	vmov	d0, sl, fp
 8015ab4:	b1cb      	cbz	r3, 8015aea <_strtod_l+0xba>
 8015ab6:	eeb1 0b40 	vneg.f64	d0, d0
 8015aba:	b017      	add	sp, #92	@ 0x5c
 8015abc:	ecbd 8b0a 	vpop	{d8-d12}
 8015ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac4:	2920      	cmp	r1, #32
 8015ac6:	d1cd      	bne.n	8015a64 <_strtod_l+0x34>
 8015ac8:	3201      	adds	r2, #1
 8015aca:	e7c0      	b.n	8015a4e <_strtod_l+0x1e>
 8015acc:	292d      	cmp	r1, #45	@ 0x2d
 8015ace:	d1c9      	bne.n	8015a64 <_strtod_l+0x34>
 8015ad0:	2101      	movs	r1, #1
 8015ad2:	9108      	str	r1, [sp, #32]
 8015ad4:	1c51      	adds	r1, r2, #1
 8015ad6:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ad8:	7852      	ldrb	r2, [r2, #1]
 8015ada:	2a00      	cmp	r2, #0
 8015adc:	d1c4      	bne.n	8015a68 <_strtod_l+0x38>
 8015ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f040 850f 	bne.w	8016508 <_strtod_l+0xad8>
 8015aea:	ec4b ab10 	vmov	d0, sl, fp
 8015aee:	e7e4      	b.n	8015aba <_strtod_l+0x8a>
 8015af0:	2100      	movs	r1, #0
 8015af2:	e7ee      	b.n	8015ad2 <_strtod_l+0xa2>
 8015af4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015af6:	b13a      	cbz	r2, 8015b08 <_strtod_l+0xd8>
 8015af8:	2135      	movs	r1, #53	@ 0x35
 8015afa:	a814      	add	r0, sp, #80	@ 0x50
 8015afc:	f002 f823 	bl	8017b46 <__copybits>
 8015b00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015b02:	9805      	ldr	r0, [sp, #20]
 8015b04:	f001 fbf4 	bl	80172f0 <_Bfree>
 8015b08:	1e73      	subs	r3, r6, #1
 8015b0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	d806      	bhi.n	8015b1e <_strtod_l+0xee>
 8015b10:	e8df f003 	tbb	[pc, r3]
 8015b14:	201d0314 	.word	0x201d0314
 8015b18:	14          	.byte	0x14
 8015b19:	00          	.byte	0x00
 8015b1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015b1e:	05e3      	lsls	r3, r4, #23
 8015b20:	bf48      	it	mi
 8015b22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015b26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015b2a:	0d1b      	lsrs	r3, r3, #20
 8015b2c:	051b      	lsls	r3, r3, #20
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d1b9      	bne.n	8015aa6 <_strtod_l+0x76>
 8015b32:	f000 ff15 	bl	8016960 <__errno>
 8015b36:	2322      	movs	r3, #34	@ 0x22
 8015b38:	6003      	str	r3, [r0, #0]
 8015b3a:	e7b4      	b.n	8015aa6 <_strtod_l+0x76>
 8015b3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015b40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015b48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015b4c:	e7e7      	b.n	8015b1e <_strtod_l+0xee>
 8015b4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015cbc <_strtod_l+0x28c>
 8015b52:	e7e4      	b.n	8015b1e <_strtod_l+0xee>
 8015b54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015b58:	f04f 3aff 	mov.w	sl, #4294967295
 8015b5c:	e7df      	b.n	8015b1e <_strtod_l+0xee>
 8015b5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b60:	1c5a      	adds	r2, r3, #1
 8015b62:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b64:	785b      	ldrb	r3, [r3, #1]
 8015b66:	2b30      	cmp	r3, #48	@ 0x30
 8015b68:	d0f9      	beq.n	8015b5e <_strtod_l+0x12e>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d09b      	beq.n	8015aa6 <_strtod_l+0x76>
 8015b6e:	2301      	movs	r3, #1
 8015b70:	2600      	movs	r6, #0
 8015b72:	9307      	str	r3, [sp, #28]
 8015b74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b78:	46b1      	mov	r9, r6
 8015b7a:	4635      	mov	r5, r6
 8015b7c:	220a      	movs	r2, #10
 8015b7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015b80:	7804      	ldrb	r4, [r0, #0]
 8015b82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015b86:	b2d9      	uxtb	r1, r3
 8015b88:	2909      	cmp	r1, #9
 8015b8a:	d929      	bls.n	8015be0 <_strtod_l+0x1b0>
 8015b8c:	494a      	ldr	r1, [pc, #296]	@ (8015cb8 <_strtod_l+0x288>)
 8015b8e:	2201      	movs	r2, #1
 8015b90:	f000 fe8e 	bl	80168b0 <strncmp>
 8015b94:	b378      	cbz	r0, 8015bf6 <_strtod_l+0x1c6>
 8015b96:	2000      	movs	r0, #0
 8015b98:	4622      	mov	r2, r4
 8015b9a:	462b      	mov	r3, r5
 8015b9c:	4607      	mov	r7, r0
 8015b9e:	9006      	str	r0, [sp, #24]
 8015ba0:	2a65      	cmp	r2, #101	@ 0x65
 8015ba2:	d001      	beq.n	8015ba8 <_strtod_l+0x178>
 8015ba4:	2a45      	cmp	r2, #69	@ 0x45
 8015ba6:	d117      	bne.n	8015bd8 <_strtod_l+0x1a8>
 8015ba8:	b91b      	cbnz	r3, 8015bb2 <_strtod_l+0x182>
 8015baa:	9b07      	ldr	r3, [sp, #28]
 8015bac:	4303      	orrs	r3, r0
 8015bae:	d096      	beq.n	8015ade <_strtod_l+0xae>
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015bb6:	f108 0201 	add.w	r2, r8, #1
 8015bba:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bbc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015bc0:	2a2b      	cmp	r2, #43	@ 0x2b
 8015bc2:	d06b      	beq.n	8015c9c <_strtod_l+0x26c>
 8015bc4:	2a2d      	cmp	r2, #45	@ 0x2d
 8015bc6:	d071      	beq.n	8015cac <_strtod_l+0x27c>
 8015bc8:	f04f 0e00 	mov.w	lr, #0
 8015bcc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015bd0:	2c09      	cmp	r4, #9
 8015bd2:	d979      	bls.n	8015cc8 <_strtod_l+0x298>
 8015bd4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015bd8:	2400      	movs	r4, #0
 8015bda:	e094      	b.n	8015d06 <_strtod_l+0x2d6>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	e7c7      	b.n	8015b70 <_strtod_l+0x140>
 8015be0:	2d08      	cmp	r5, #8
 8015be2:	f100 0001 	add.w	r0, r0, #1
 8015be6:	bfd4      	ite	le
 8015be8:	fb02 3909 	mlale	r9, r2, r9, r3
 8015bec:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015bf0:	3501      	adds	r5, #1
 8015bf2:	9011      	str	r0, [sp, #68]	@ 0x44
 8015bf4:	e7c3      	b.n	8015b7e <_strtod_l+0x14e>
 8015bf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bf8:	1c5a      	adds	r2, r3, #1
 8015bfa:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bfc:	785a      	ldrb	r2, [r3, #1]
 8015bfe:	b375      	cbz	r5, 8015c5e <_strtod_l+0x22e>
 8015c00:	4607      	mov	r7, r0
 8015c02:	462b      	mov	r3, r5
 8015c04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015c08:	2909      	cmp	r1, #9
 8015c0a:	d913      	bls.n	8015c34 <_strtod_l+0x204>
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	9106      	str	r1, [sp, #24]
 8015c10:	e7c6      	b.n	8015ba0 <_strtod_l+0x170>
 8015c12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c14:	1c5a      	adds	r2, r3, #1
 8015c16:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c18:	785a      	ldrb	r2, [r3, #1]
 8015c1a:	3001      	adds	r0, #1
 8015c1c:	2a30      	cmp	r2, #48	@ 0x30
 8015c1e:	d0f8      	beq.n	8015c12 <_strtod_l+0x1e2>
 8015c20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015c24:	2b08      	cmp	r3, #8
 8015c26:	f200 8476 	bhi.w	8016516 <_strtod_l+0xae6>
 8015c2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c2e:	4607      	mov	r7, r0
 8015c30:	2000      	movs	r0, #0
 8015c32:	4603      	mov	r3, r0
 8015c34:	3a30      	subs	r2, #48	@ 0x30
 8015c36:	f100 0101 	add.w	r1, r0, #1
 8015c3a:	d023      	beq.n	8015c84 <_strtod_l+0x254>
 8015c3c:	440f      	add	r7, r1
 8015c3e:	eb00 0c03 	add.w	ip, r0, r3
 8015c42:	4619      	mov	r1, r3
 8015c44:	240a      	movs	r4, #10
 8015c46:	4561      	cmp	r1, ip
 8015c48:	d10b      	bne.n	8015c62 <_strtod_l+0x232>
 8015c4a:	1c5c      	adds	r4, r3, #1
 8015c4c:	4403      	add	r3, r0
 8015c4e:	2b08      	cmp	r3, #8
 8015c50:	4404      	add	r4, r0
 8015c52:	dc11      	bgt.n	8015c78 <_strtod_l+0x248>
 8015c54:	230a      	movs	r3, #10
 8015c56:	fb03 2909 	mla	r9, r3, r9, r2
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	e013      	b.n	8015c86 <_strtod_l+0x256>
 8015c5e:	4628      	mov	r0, r5
 8015c60:	e7dc      	b.n	8015c1c <_strtod_l+0x1ec>
 8015c62:	2908      	cmp	r1, #8
 8015c64:	f101 0101 	add.w	r1, r1, #1
 8015c68:	dc02      	bgt.n	8015c70 <_strtod_l+0x240>
 8015c6a:	fb04 f909 	mul.w	r9, r4, r9
 8015c6e:	e7ea      	b.n	8015c46 <_strtod_l+0x216>
 8015c70:	2910      	cmp	r1, #16
 8015c72:	bfd8      	it	le
 8015c74:	4366      	mulle	r6, r4
 8015c76:	e7e6      	b.n	8015c46 <_strtod_l+0x216>
 8015c78:	2b0f      	cmp	r3, #15
 8015c7a:	dcee      	bgt.n	8015c5a <_strtod_l+0x22a>
 8015c7c:	230a      	movs	r3, #10
 8015c7e:	fb03 2606 	mla	r6, r3, r6, r2
 8015c82:	e7ea      	b.n	8015c5a <_strtod_l+0x22a>
 8015c84:	461c      	mov	r4, r3
 8015c86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c88:	1c5a      	adds	r2, r3, #1
 8015c8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c8c:	785a      	ldrb	r2, [r3, #1]
 8015c8e:	4608      	mov	r0, r1
 8015c90:	4623      	mov	r3, r4
 8015c92:	e7b7      	b.n	8015c04 <_strtod_l+0x1d4>
 8015c94:	2301      	movs	r3, #1
 8015c96:	2700      	movs	r7, #0
 8015c98:	9306      	str	r3, [sp, #24]
 8015c9a:	e786      	b.n	8015baa <_strtod_l+0x17a>
 8015c9c:	f04f 0e00 	mov.w	lr, #0
 8015ca0:	f108 0202 	add.w	r2, r8, #2
 8015ca4:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ca6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015caa:	e78f      	b.n	8015bcc <_strtod_l+0x19c>
 8015cac:	f04f 0e01 	mov.w	lr, #1
 8015cb0:	e7f6      	b.n	8015ca0 <_strtod_l+0x270>
 8015cb2:	bf00      	nop
 8015cb4:	08018a38 	.word	0x08018a38
 8015cb8:	08018a14 	.word	0x08018a14
 8015cbc:	7ff00000 	.word	0x7ff00000
 8015cc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cc2:	1c54      	adds	r4, r2, #1
 8015cc4:	9411      	str	r4, [sp, #68]	@ 0x44
 8015cc6:	7852      	ldrb	r2, [r2, #1]
 8015cc8:	2a30      	cmp	r2, #48	@ 0x30
 8015cca:	d0f9      	beq.n	8015cc0 <_strtod_l+0x290>
 8015ccc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015cd0:	2c08      	cmp	r4, #8
 8015cd2:	d881      	bhi.n	8015bd8 <_strtod_l+0x1a8>
 8015cd4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015cd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cdc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cde:	1c51      	adds	r1, r2, #1
 8015ce0:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ce2:	7852      	ldrb	r2, [r2, #1]
 8015ce4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015ce8:	2c09      	cmp	r4, #9
 8015cea:	d938      	bls.n	8015d5e <_strtod_l+0x32e>
 8015cec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015cee:	1b0c      	subs	r4, r1, r4
 8015cf0:	2c08      	cmp	r4, #8
 8015cf2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015cf6:	dc02      	bgt.n	8015cfe <_strtod_l+0x2ce>
 8015cf8:	4564      	cmp	r4, ip
 8015cfa:	bfa8      	it	ge
 8015cfc:	4664      	movge	r4, ip
 8015cfe:	f1be 0f00 	cmp.w	lr, #0
 8015d02:	d000      	beq.n	8015d06 <_strtod_l+0x2d6>
 8015d04:	4264      	negs	r4, r4
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d14e      	bne.n	8015da8 <_strtod_l+0x378>
 8015d0a:	9b07      	ldr	r3, [sp, #28]
 8015d0c:	4318      	orrs	r0, r3
 8015d0e:	f47f aeca 	bne.w	8015aa6 <_strtod_l+0x76>
 8015d12:	9b06      	ldr	r3, [sp, #24]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f47f aee2 	bne.w	8015ade <_strtod_l+0xae>
 8015d1a:	2a69      	cmp	r2, #105	@ 0x69
 8015d1c:	d027      	beq.n	8015d6e <_strtod_l+0x33e>
 8015d1e:	dc24      	bgt.n	8015d6a <_strtod_l+0x33a>
 8015d20:	2a49      	cmp	r2, #73	@ 0x49
 8015d22:	d024      	beq.n	8015d6e <_strtod_l+0x33e>
 8015d24:	2a4e      	cmp	r2, #78	@ 0x4e
 8015d26:	f47f aeda 	bne.w	8015ade <_strtod_l+0xae>
 8015d2a:	4997      	ldr	r1, [pc, #604]	@ (8015f88 <_strtod_l+0x558>)
 8015d2c:	a811      	add	r0, sp, #68	@ 0x44
 8015d2e:	f001 f92f 	bl	8016f90 <__match>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	f43f aed3 	beq.w	8015ade <_strtod_l+0xae>
 8015d38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	2b28      	cmp	r3, #40	@ 0x28
 8015d3e:	d12d      	bne.n	8015d9c <_strtod_l+0x36c>
 8015d40:	4992      	ldr	r1, [pc, #584]	@ (8015f8c <_strtod_l+0x55c>)
 8015d42:	aa14      	add	r2, sp, #80	@ 0x50
 8015d44:	a811      	add	r0, sp, #68	@ 0x44
 8015d46:	f001 f937 	bl	8016fb8 <__hexnan>
 8015d4a:	2805      	cmp	r0, #5
 8015d4c:	d126      	bne.n	8015d9c <_strtod_l+0x36c>
 8015d4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015d50:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015d54:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015d58:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015d5c:	e6a3      	b.n	8015aa6 <_strtod_l+0x76>
 8015d5e:	240a      	movs	r4, #10
 8015d60:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015d64:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015d68:	e7b8      	b.n	8015cdc <_strtod_l+0x2ac>
 8015d6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8015d6c:	e7db      	b.n	8015d26 <_strtod_l+0x2f6>
 8015d6e:	4988      	ldr	r1, [pc, #544]	@ (8015f90 <_strtod_l+0x560>)
 8015d70:	a811      	add	r0, sp, #68	@ 0x44
 8015d72:	f001 f90d 	bl	8016f90 <__match>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	f43f aeb1 	beq.w	8015ade <_strtod_l+0xae>
 8015d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d7e:	4985      	ldr	r1, [pc, #532]	@ (8015f94 <_strtod_l+0x564>)
 8015d80:	3b01      	subs	r3, #1
 8015d82:	a811      	add	r0, sp, #68	@ 0x44
 8015d84:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d86:	f001 f903 	bl	8016f90 <__match>
 8015d8a:	b910      	cbnz	r0, 8015d92 <_strtod_l+0x362>
 8015d8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d8e:	3301      	adds	r3, #1
 8015d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d92:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015fa8 <_strtod_l+0x578>
 8015d96:	f04f 0a00 	mov.w	sl, #0
 8015d9a:	e684      	b.n	8015aa6 <_strtod_l+0x76>
 8015d9c:	487e      	ldr	r0, [pc, #504]	@ (8015f98 <_strtod_l+0x568>)
 8015d9e:	f000 fe1b 	bl	80169d8 <nan>
 8015da2:	ec5b ab10 	vmov	sl, fp, d0
 8015da6:	e67e      	b.n	8015aa6 <_strtod_l+0x76>
 8015da8:	ee07 9a90 	vmov	s15, r9
 8015dac:	1be2      	subs	r2, r4, r7
 8015dae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015db2:	2d00      	cmp	r5, #0
 8015db4:	bf08      	it	eq
 8015db6:	461d      	moveq	r5, r3
 8015db8:	2b10      	cmp	r3, #16
 8015dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	bfa8      	it	ge
 8015dc0:	2210      	movge	r2, #16
 8015dc2:	2b09      	cmp	r3, #9
 8015dc4:	ec5b ab17 	vmov	sl, fp, d7
 8015dc8:	dc15      	bgt.n	8015df6 <_strtod_l+0x3c6>
 8015dca:	1be1      	subs	r1, r4, r7
 8015dcc:	2900      	cmp	r1, #0
 8015dce:	f43f ae6a 	beq.w	8015aa6 <_strtod_l+0x76>
 8015dd2:	eba4 0107 	sub.w	r1, r4, r7
 8015dd6:	dd72      	ble.n	8015ebe <_strtod_l+0x48e>
 8015dd8:	2916      	cmp	r1, #22
 8015dda:	dc59      	bgt.n	8015e90 <_strtod_l+0x460>
 8015ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8015f9c <_strtod_l+0x56c>)
 8015dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015de4:	ed93 7b00 	vldr	d7, [r3]
 8015de8:	ec4b ab16 	vmov	d6, sl, fp
 8015dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015df0:	ec5b ab17 	vmov	sl, fp, d7
 8015df4:	e657      	b.n	8015aa6 <_strtod_l+0x76>
 8015df6:	4969      	ldr	r1, [pc, #420]	@ (8015f9c <_strtod_l+0x56c>)
 8015df8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015dfc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015e00:	ee06 6a90 	vmov	s13, r6
 8015e04:	2b0f      	cmp	r3, #15
 8015e06:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015e0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015e0e:	ec5b ab16 	vmov	sl, fp, d6
 8015e12:	ddda      	ble.n	8015dca <_strtod_l+0x39a>
 8015e14:	1a9a      	subs	r2, r3, r2
 8015e16:	1be1      	subs	r1, r4, r7
 8015e18:	440a      	add	r2, r1
 8015e1a:	2a00      	cmp	r2, #0
 8015e1c:	f340 8094 	ble.w	8015f48 <_strtod_l+0x518>
 8015e20:	f012 000f 	ands.w	r0, r2, #15
 8015e24:	d00a      	beq.n	8015e3c <_strtod_l+0x40c>
 8015e26:	495d      	ldr	r1, [pc, #372]	@ (8015f9c <_strtod_l+0x56c>)
 8015e28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015e2c:	ed91 7b00 	vldr	d7, [r1]
 8015e30:	ec4b ab16 	vmov	d6, sl, fp
 8015e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e38:	ec5b ab17 	vmov	sl, fp, d7
 8015e3c:	f032 020f 	bics.w	r2, r2, #15
 8015e40:	d073      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015e42:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015e46:	dd47      	ble.n	8015ed8 <_strtod_l+0x4a8>
 8015e48:	2400      	movs	r4, #0
 8015e4a:	4625      	mov	r5, r4
 8015e4c:	9407      	str	r4, [sp, #28]
 8015e4e:	4626      	mov	r6, r4
 8015e50:	9a05      	ldr	r2, [sp, #20]
 8015e52:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015fa8 <_strtod_l+0x578>
 8015e56:	2322      	movs	r3, #34	@ 0x22
 8015e58:	6013      	str	r3, [r2, #0]
 8015e5a:	f04f 0a00 	mov.w	sl, #0
 8015e5e:	9b07      	ldr	r3, [sp, #28]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f43f ae20 	beq.w	8015aa6 <_strtod_l+0x76>
 8015e66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e68:	9805      	ldr	r0, [sp, #20]
 8015e6a:	f001 fa41 	bl	80172f0 <_Bfree>
 8015e6e:	9805      	ldr	r0, [sp, #20]
 8015e70:	4631      	mov	r1, r6
 8015e72:	f001 fa3d 	bl	80172f0 <_Bfree>
 8015e76:	9805      	ldr	r0, [sp, #20]
 8015e78:	4629      	mov	r1, r5
 8015e7a:	f001 fa39 	bl	80172f0 <_Bfree>
 8015e7e:	9907      	ldr	r1, [sp, #28]
 8015e80:	9805      	ldr	r0, [sp, #20]
 8015e82:	f001 fa35 	bl	80172f0 <_Bfree>
 8015e86:	9805      	ldr	r0, [sp, #20]
 8015e88:	4621      	mov	r1, r4
 8015e8a:	f001 fa31 	bl	80172f0 <_Bfree>
 8015e8e:	e60a      	b.n	8015aa6 <_strtod_l+0x76>
 8015e90:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015e94:	1be0      	subs	r0, r4, r7
 8015e96:	4281      	cmp	r1, r0
 8015e98:	dbbc      	blt.n	8015e14 <_strtod_l+0x3e4>
 8015e9a:	4a40      	ldr	r2, [pc, #256]	@ (8015f9c <_strtod_l+0x56c>)
 8015e9c:	f1c3 030f 	rsb	r3, r3, #15
 8015ea0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015ea4:	ed91 7b00 	vldr	d7, [r1]
 8015ea8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015eaa:	ec4b ab16 	vmov	d6, sl, fp
 8015eae:	1acb      	subs	r3, r1, r3
 8015eb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015eb8:	ed92 6b00 	vldr	d6, [r2]
 8015ebc:	e796      	b.n	8015dec <_strtod_l+0x3bc>
 8015ebe:	3116      	adds	r1, #22
 8015ec0:	dba8      	blt.n	8015e14 <_strtod_l+0x3e4>
 8015ec2:	4b36      	ldr	r3, [pc, #216]	@ (8015f9c <_strtod_l+0x56c>)
 8015ec4:	1b3c      	subs	r4, r7, r4
 8015ec6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015eca:	ed94 7b00 	vldr	d7, [r4]
 8015ece:	ec4b ab16 	vmov	d6, sl, fp
 8015ed2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015ed6:	e78b      	b.n	8015df0 <_strtod_l+0x3c0>
 8015ed8:	2000      	movs	r0, #0
 8015eda:	ec4b ab17 	vmov	d7, sl, fp
 8015ede:	4e30      	ldr	r6, [pc, #192]	@ (8015fa0 <_strtod_l+0x570>)
 8015ee0:	1112      	asrs	r2, r2, #4
 8015ee2:	4601      	mov	r1, r0
 8015ee4:	2a01      	cmp	r2, #1
 8015ee6:	dc23      	bgt.n	8015f30 <_strtod_l+0x500>
 8015ee8:	b108      	cbz	r0, 8015eee <_strtod_l+0x4be>
 8015eea:	ec5b ab17 	vmov	sl, fp, d7
 8015eee:	4a2c      	ldr	r2, [pc, #176]	@ (8015fa0 <_strtod_l+0x570>)
 8015ef0:	482c      	ldr	r0, [pc, #176]	@ (8015fa4 <_strtod_l+0x574>)
 8015ef2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015ef6:	ed92 7b00 	vldr	d7, [r2]
 8015efa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015efe:	ec4b ab16 	vmov	d6, sl, fp
 8015f02:	4a29      	ldr	r2, [pc, #164]	@ (8015fa8 <_strtod_l+0x578>)
 8015f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f08:	ee17 1a90 	vmov	r1, s15
 8015f0c:	400a      	ands	r2, r1
 8015f0e:	4282      	cmp	r2, r0
 8015f10:	ec5b ab17 	vmov	sl, fp, d7
 8015f14:	d898      	bhi.n	8015e48 <_strtod_l+0x418>
 8015f16:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015f1a:	4282      	cmp	r2, r0
 8015f1c:	bf86      	itte	hi
 8015f1e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015fac <_strtod_l+0x57c>
 8015f22:	f04f 3aff 	movhi.w	sl, #4294967295
 8015f26:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	9206      	str	r2, [sp, #24]
 8015f2e:	e076      	b.n	801601e <_strtod_l+0x5ee>
 8015f30:	f012 0f01 	tst.w	r2, #1
 8015f34:	d004      	beq.n	8015f40 <_strtod_l+0x510>
 8015f36:	ed96 6b00 	vldr	d6, [r6]
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f40:	3101      	adds	r1, #1
 8015f42:	1052      	asrs	r2, r2, #1
 8015f44:	3608      	adds	r6, #8
 8015f46:	e7cd      	b.n	8015ee4 <_strtod_l+0x4b4>
 8015f48:	d0ef      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015f4a:	4252      	negs	r2, r2
 8015f4c:	f012 000f 	ands.w	r0, r2, #15
 8015f50:	d00a      	beq.n	8015f68 <_strtod_l+0x538>
 8015f52:	4912      	ldr	r1, [pc, #72]	@ (8015f9c <_strtod_l+0x56c>)
 8015f54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015f58:	ed91 7b00 	vldr	d7, [r1]
 8015f5c:	ec4b ab16 	vmov	d6, sl, fp
 8015f60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015f64:	ec5b ab17 	vmov	sl, fp, d7
 8015f68:	1112      	asrs	r2, r2, #4
 8015f6a:	d0de      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015f6c:	2a1f      	cmp	r2, #31
 8015f6e:	dd1f      	ble.n	8015fb0 <_strtod_l+0x580>
 8015f70:	2400      	movs	r4, #0
 8015f72:	4625      	mov	r5, r4
 8015f74:	9407      	str	r4, [sp, #28]
 8015f76:	4626      	mov	r6, r4
 8015f78:	9a05      	ldr	r2, [sp, #20]
 8015f7a:	2322      	movs	r3, #34	@ 0x22
 8015f7c:	f04f 0a00 	mov.w	sl, #0
 8015f80:	f04f 0b00 	mov.w	fp, #0
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	e76a      	b.n	8015e5e <_strtod_l+0x42e>
 8015f88:	08018a1f 	.word	0x08018a1f
 8015f8c:	08018a24 	.word	0x08018a24
 8015f90:	08018a16 	.word	0x08018a16
 8015f94:	08018a19 	.word	0x08018a19
 8015f98:	08018d9b 	.word	0x08018d9b
 8015f9c:	08018c98 	.word	0x08018c98
 8015fa0:	08018c70 	.word	0x08018c70
 8015fa4:	7ca00000 	.word	0x7ca00000
 8015fa8:	7ff00000 	.word	0x7ff00000
 8015fac:	7fefffff 	.word	0x7fefffff
 8015fb0:	f012 0110 	ands.w	r1, r2, #16
 8015fb4:	bf18      	it	ne
 8015fb6:	216a      	movne	r1, #106	@ 0x6a
 8015fb8:	9106      	str	r1, [sp, #24]
 8015fba:	ec4b ab17 	vmov	d7, sl, fp
 8015fbe:	49b0      	ldr	r1, [pc, #704]	@ (8016280 <_strtod_l+0x850>)
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	07d6      	lsls	r6, r2, #31
 8015fc4:	d504      	bpl.n	8015fd0 <_strtod_l+0x5a0>
 8015fc6:	ed91 6b00 	vldr	d6, [r1]
 8015fca:	2001      	movs	r0, #1
 8015fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015fd0:	1052      	asrs	r2, r2, #1
 8015fd2:	f101 0108 	add.w	r1, r1, #8
 8015fd6:	d1f4      	bne.n	8015fc2 <_strtod_l+0x592>
 8015fd8:	b108      	cbz	r0, 8015fde <_strtod_l+0x5ae>
 8015fda:	ec5b ab17 	vmov	sl, fp, d7
 8015fde:	9a06      	ldr	r2, [sp, #24]
 8015fe0:	b1b2      	cbz	r2, 8016010 <_strtod_l+0x5e0>
 8015fe2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015fe6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015fea:	2a00      	cmp	r2, #0
 8015fec:	4658      	mov	r0, fp
 8015fee:	dd0f      	ble.n	8016010 <_strtod_l+0x5e0>
 8015ff0:	2a1f      	cmp	r2, #31
 8015ff2:	dd55      	ble.n	80160a0 <_strtod_l+0x670>
 8015ff4:	2a34      	cmp	r2, #52	@ 0x34
 8015ff6:	bfde      	ittt	le
 8015ff8:	f04f 32ff 	movle.w	r2, #4294967295
 8015ffc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016000:	408a      	lslle	r2, r1
 8016002:	f04f 0a00 	mov.w	sl, #0
 8016006:	bfcc      	ite	gt
 8016008:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801600c:	ea02 0b00 	andle.w	fp, r2, r0
 8016010:	ec4b ab17 	vmov	d7, sl, fp
 8016014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601c:	d0a8      	beq.n	8015f70 <_strtod_l+0x540>
 801601e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016020:	9805      	ldr	r0, [sp, #20]
 8016022:	f8cd 9000 	str.w	r9, [sp]
 8016026:	462a      	mov	r2, r5
 8016028:	f001 f9ca 	bl	80173c0 <__s2b>
 801602c:	9007      	str	r0, [sp, #28]
 801602e:	2800      	cmp	r0, #0
 8016030:	f43f af0a 	beq.w	8015e48 <_strtod_l+0x418>
 8016034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016036:	1b3f      	subs	r7, r7, r4
 8016038:	2b00      	cmp	r3, #0
 801603a:	bfb4      	ite	lt
 801603c:	463b      	movlt	r3, r7
 801603e:	2300      	movge	r3, #0
 8016040:	930a      	str	r3, [sp, #40]	@ 0x28
 8016042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016044:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016270 <_strtod_l+0x840>
 8016048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801604c:	2400      	movs	r4, #0
 801604e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016050:	4625      	mov	r5, r4
 8016052:	9b07      	ldr	r3, [sp, #28]
 8016054:	9805      	ldr	r0, [sp, #20]
 8016056:	6859      	ldr	r1, [r3, #4]
 8016058:	f001 f90a 	bl	8017270 <_Balloc>
 801605c:	4606      	mov	r6, r0
 801605e:	2800      	cmp	r0, #0
 8016060:	f43f aef6 	beq.w	8015e50 <_strtod_l+0x420>
 8016064:	9b07      	ldr	r3, [sp, #28]
 8016066:	691a      	ldr	r2, [r3, #16]
 8016068:	ec4b ab19 	vmov	d9, sl, fp
 801606c:	3202      	adds	r2, #2
 801606e:	f103 010c 	add.w	r1, r3, #12
 8016072:	0092      	lsls	r2, r2, #2
 8016074:	300c      	adds	r0, #12
 8016076:	f000 fca0 	bl	80169ba <memcpy>
 801607a:	eeb0 0b49 	vmov.f64	d0, d9
 801607e:	9805      	ldr	r0, [sp, #20]
 8016080:	aa14      	add	r2, sp, #80	@ 0x50
 8016082:	a913      	add	r1, sp, #76	@ 0x4c
 8016084:	f001 fcd8 	bl	8017a38 <__d2b>
 8016088:	9012      	str	r0, [sp, #72]	@ 0x48
 801608a:	2800      	cmp	r0, #0
 801608c:	f43f aee0 	beq.w	8015e50 <_strtod_l+0x420>
 8016090:	9805      	ldr	r0, [sp, #20]
 8016092:	2101      	movs	r1, #1
 8016094:	f001 fa2a 	bl	80174ec <__i2b>
 8016098:	4605      	mov	r5, r0
 801609a:	b940      	cbnz	r0, 80160ae <_strtod_l+0x67e>
 801609c:	2500      	movs	r5, #0
 801609e:	e6d7      	b.n	8015e50 <_strtod_l+0x420>
 80160a0:	f04f 31ff 	mov.w	r1, #4294967295
 80160a4:	fa01 f202 	lsl.w	r2, r1, r2
 80160a8:	ea02 0a0a 	and.w	sl, r2, sl
 80160ac:	e7b0      	b.n	8016010 <_strtod_l+0x5e0>
 80160ae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80160b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80160b2:	2f00      	cmp	r7, #0
 80160b4:	bfab      	itete	ge
 80160b6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80160b8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80160ba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80160be:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80160c2:	bfac      	ite	ge
 80160c4:	eb07 0903 	addge.w	r9, r7, r3
 80160c8:	eba3 0807 	sublt.w	r8, r3, r7
 80160cc:	9b06      	ldr	r3, [sp, #24]
 80160ce:	1aff      	subs	r7, r7, r3
 80160d0:	4417      	add	r7, r2
 80160d2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80160d6:	4a6b      	ldr	r2, [pc, #428]	@ (8016284 <_strtod_l+0x854>)
 80160d8:	3f01      	subs	r7, #1
 80160da:	4297      	cmp	r7, r2
 80160dc:	da51      	bge.n	8016182 <_strtod_l+0x752>
 80160de:	1bd1      	subs	r1, r2, r7
 80160e0:	291f      	cmp	r1, #31
 80160e2:	eba3 0301 	sub.w	r3, r3, r1
 80160e6:	f04f 0201 	mov.w	r2, #1
 80160ea:	dc3e      	bgt.n	801616a <_strtod_l+0x73a>
 80160ec:	408a      	lsls	r2, r1
 80160ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80160f0:	2200      	movs	r2, #0
 80160f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80160f4:	eb09 0703 	add.w	r7, r9, r3
 80160f8:	4498      	add	r8, r3
 80160fa:	9b06      	ldr	r3, [sp, #24]
 80160fc:	45b9      	cmp	r9, r7
 80160fe:	4498      	add	r8, r3
 8016100:	464b      	mov	r3, r9
 8016102:	bfa8      	it	ge
 8016104:	463b      	movge	r3, r7
 8016106:	4543      	cmp	r3, r8
 8016108:	bfa8      	it	ge
 801610a:	4643      	movge	r3, r8
 801610c:	2b00      	cmp	r3, #0
 801610e:	bfc2      	ittt	gt
 8016110:	1aff      	subgt	r7, r7, r3
 8016112:	eba8 0803 	subgt.w	r8, r8, r3
 8016116:	eba9 0903 	subgt.w	r9, r9, r3
 801611a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801611c:	2b00      	cmp	r3, #0
 801611e:	dd16      	ble.n	801614e <_strtod_l+0x71e>
 8016120:	4629      	mov	r1, r5
 8016122:	9805      	ldr	r0, [sp, #20]
 8016124:	461a      	mov	r2, r3
 8016126:	f001 faa1 	bl	801766c <__pow5mult>
 801612a:	4605      	mov	r5, r0
 801612c:	2800      	cmp	r0, #0
 801612e:	d0b5      	beq.n	801609c <_strtod_l+0x66c>
 8016130:	4601      	mov	r1, r0
 8016132:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016134:	9805      	ldr	r0, [sp, #20]
 8016136:	f001 f9ef 	bl	8017518 <__multiply>
 801613a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801613c:	2800      	cmp	r0, #0
 801613e:	f43f ae87 	beq.w	8015e50 <_strtod_l+0x420>
 8016142:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016144:	9805      	ldr	r0, [sp, #20]
 8016146:	f001 f8d3 	bl	80172f0 <_Bfree>
 801614a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801614c:	9312      	str	r3, [sp, #72]	@ 0x48
 801614e:	2f00      	cmp	r7, #0
 8016150:	dc1b      	bgt.n	801618a <_strtod_l+0x75a>
 8016152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016154:	2b00      	cmp	r3, #0
 8016156:	dd21      	ble.n	801619c <_strtod_l+0x76c>
 8016158:	4631      	mov	r1, r6
 801615a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801615c:	9805      	ldr	r0, [sp, #20]
 801615e:	f001 fa85 	bl	801766c <__pow5mult>
 8016162:	4606      	mov	r6, r0
 8016164:	b9d0      	cbnz	r0, 801619c <_strtod_l+0x76c>
 8016166:	2600      	movs	r6, #0
 8016168:	e672      	b.n	8015e50 <_strtod_l+0x420>
 801616a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801616e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016172:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016176:	37e2      	adds	r7, #226	@ 0xe2
 8016178:	fa02 f107 	lsl.w	r1, r2, r7
 801617c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801617e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016180:	e7b8      	b.n	80160f4 <_strtod_l+0x6c4>
 8016182:	2200      	movs	r2, #0
 8016184:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016186:	2201      	movs	r2, #1
 8016188:	e7f9      	b.n	801617e <_strtod_l+0x74e>
 801618a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801618c:	9805      	ldr	r0, [sp, #20]
 801618e:	463a      	mov	r2, r7
 8016190:	f001 fac6 	bl	8017720 <__lshift>
 8016194:	9012      	str	r0, [sp, #72]	@ 0x48
 8016196:	2800      	cmp	r0, #0
 8016198:	d1db      	bne.n	8016152 <_strtod_l+0x722>
 801619a:	e659      	b.n	8015e50 <_strtod_l+0x420>
 801619c:	f1b8 0f00 	cmp.w	r8, #0
 80161a0:	dd07      	ble.n	80161b2 <_strtod_l+0x782>
 80161a2:	4631      	mov	r1, r6
 80161a4:	9805      	ldr	r0, [sp, #20]
 80161a6:	4642      	mov	r2, r8
 80161a8:	f001 faba 	bl	8017720 <__lshift>
 80161ac:	4606      	mov	r6, r0
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d0d9      	beq.n	8016166 <_strtod_l+0x736>
 80161b2:	f1b9 0f00 	cmp.w	r9, #0
 80161b6:	dd08      	ble.n	80161ca <_strtod_l+0x79a>
 80161b8:	4629      	mov	r1, r5
 80161ba:	9805      	ldr	r0, [sp, #20]
 80161bc:	464a      	mov	r2, r9
 80161be:	f001 faaf 	bl	8017720 <__lshift>
 80161c2:	4605      	mov	r5, r0
 80161c4:	2800      	cmp	r0, #0
 80161c6:	f43f ae43 	beq.w	8015e50 <_strtod_l+0x420>
 80161ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80161cc:	9805      	ldr	r0, [sp, #20]
 80161ce:	4632      	mov	r2, r6
 80161d0:	f001 fb2e 	bl	8017830 <__mdiff>
 80161d4:	4604      	mov	r4, r0
 80161d6:	2800      	cmp	r0, #0
 80161d8:	f43f ae3a 	beq.w	8015e50 <_strtod_l+0x420>
 80161dc:	2300      	movs	r3, #0
 80161de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80161e2:	60c3      	str	r3, [r0, #12]
 80161e4:	4629      	mov	r1, r5
 80161e6:	f001 fb07 	bl	80177f8 <__mcmp>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	da4e      	bge.n	801628c <_strtod_l+0x85c>
 80161ee:	ea58 080a 	orrs.w	r8, r8, sl
 80161f2:	d174      	bne.n	80162de <_strtod_l+0x8ae>
 80161f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d170      	bne.n	80162de <_strtod_l+0x8ae>
 80161fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016200:	0d1b      	lsrs	r3, r3, #20
 8016202:	051b      	lsls	r3, r3, #20
 8016204:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016208:	d969      	bls.n	80162de <_strtod_l+0x8ae>
 801620a:	6963      	ldr	r3, [r4, #20]
 801620c:	b913      	cbnz	r3, 8016214 <_strtod_l+0x7e4>
 801620e:	6923      	ldr	r3, [r4, #16]
 8016210:	2b01      	cmp	r3, #1
 8016212:	dd64      	ble.n	80162de <_strtod_l+0x8ae>
 8016214:	4621      	mov	r1, r4
 8016216:	2201      	movs	r2, #1
 8016218:	9805      	ldr	r0, [sp, #20]
 801621a:	f001 fa81 	bl	8017720 <__lshift>
 801621e:	4629      	mov	r1, r5
 8016220:	4604      	mov	r4, r0
 8016222:	f001 fae9 	bl	80177f8 <__mcmp>
 8016226:	2800      	cmp	r0, #0
 8016228:	dd59      	ble.n	80162de <_strtod_l+0x8ae>
 801622a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801622e:	9a06      	ldr	r2, [sp, #24]
 8016230:	0d1b      	lsrs	r3, r3, #20
 8016232:	051b      	lsls	r3, r3, #20
 8016234:	2a00      	cmp	r2, #0
 8016236:	d070      	beq.n	801631a <_strtod_l+0x8ea>
 8016238:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801623c:	d86d      	bhi.n	801631a <_strtod_l+0x8ea>
 801623e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016242:	f67f ae99 	bls.w	8015f78 <_strtod_l+0x548>
 8016246:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016278 <_strtod_l+0x848>
 801624a:	ec4b ab16 	vmov	d6, sl, fp
 801624e:	4b0e      	ldr	r3, [pc, #56]	@ (8016288 <_strtod_l+0x858>)
 8016250:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016254:	ee17 2a90 	vmov	r2, s15
 8016258:	4013      	ands	r3, r2
 801625a:	ec5b ab17 	vmov	sl, fp, d7
 801625e:	2b00      	cmp	r3, #0
 8016260:	f47f ae01 	bne.w	8015e66 <_strtod_l+0x436>
 8016264:	9a05      	ldr	r2, [sp, #20]
 8016266:	2322      	movs	r3, #34	@ 0x22
 8016268:	6013      	str	r3, [r2, #0]
 801626a:	e5fc      	b.n	8015e66 <_strtod_l+0x436>
 801626c:	f3af 8000 	nop.w
 8016270:	ffc00000 	.word	0xffc00000
 8016274:	41dfffff 	.word	0x41dfffff
 8016278:	00000000 	.word	0x00000000
 801627c:	39500000 	.word	0x39500000
 8016280:	08018a50 	.word	0x08018a50
 8016284:	fffffc02 	.word	0xfffffc02
 8016288:	7ff00000 	.word	0x7ff00000
 801628c:	46d9      	mov	r9, fp
 801628e:	d15d      	bne.n	801634c <_strtod_l+0x91c>
 8016290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016294:	f1b8 0f00 	cmp.w	r8, #0
 8016298:	d02a      	beq.n	80162f0 <_strtod_l+0x8c0>
 801629a:	4aab      	ldr	r2, [pc, #684]	@ (8016548 <_strtod_l+0xb18>)
 801629c:	4293      	cmp	r3, r2
 801629e:	d12a      	bne.n	80162f6 <_strtod_l+0x8c6>
 80162a0:	9b06      	ldr	r3, [sp, #24]
 80162a2:	4652      	mov	r2, sl
 80162a4:	b1fb      	cbz	r3, 80162e6 <_strtod_l+0x8b6>
 80162a6:	4ba9      	ldr	r3, [pc, #676]	@ (801654c <_strtod_l+0xb1c>)
 80162a8:	ea0b 0303 	and.w	r3, fp, r3
 80162ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80162b0:	f04f 31ff 	mov.w	r1, #4294967295
 80162b4:	d81a      	bhi.n	80162ec <_strtod_l+0x8bc>
 80162b6:	0d1b      	lsrs	r3, r3, #20
 80162b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80162bc:	fa01 f303 	lsl.w	r3, r1, r3
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d118      	bne.n	80162f6 <_strtod_l+0x8c6>
 80162c4:	4ba2      	ldr	r3, [pc, #648]	@ (8016550 <_strtod_l+0xb20>)
 80162c6:	4599      	cmp	r9, r3
 80162c8:	d102      	bne.n	80162d0 <_strtod_l+0x8a0>
 80162ca:	3201      	adds	r2, #1
 80162cc:	f43f adc0 	beq.w	8015e50 <_strtod_l+0x420>
 80162d0:	4b9e      	ldr	r3, [pc, #632]	@ (801654c <_strtod_l+0xb1c>)
 80162d2:	ea09 0303 	and.w	r3, r9, r3
 80162d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80162da:	f04f 0a00 	mov.w	sl, #0
 80162de:	9b06      	ldr	r3, [sp, #24]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d1b0      	bne.n	8016246 <_strtod_l+0x816>
 80162e4:	e5bf      	b.n	8015e66 <_strtod_l+0x436>
 80162e6:	f04f 33ff 	mov.w	r3, #4294967295
 80162ea:	e7e9      	b.n	80162c0 <_strtod_l+0x890>
 80162ec:	460b      	mov	r3, r1
 80162ee:	e7e7      	b.n	80162c0 <_strtod_l+0x890>
 80162f0:	ea53 030a 	orrs.w	r3, r3, sl
 80162f4:	d099      	beq.n	801622a <_strtod_l+0x7fa>
 80162f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80162f8:	b1c3      	cbz	r3, 801632c <_strtod_l+0x8fc>
 80162fa:	ea13 0f09 	tst.w	r3, r9
 80162fe:	d0ee      	beq.n	80162de <_strtod_l+0x8ae>
 8016300:	9a06      	ldr	r2, [sp, #24]
 8016302:	4650      	mov	r0, sl
 8016304:	4659      	mov	r1, fp
 8016306:	f1b8 0f00 	cmp.w	r8, #0
 801630a:	d013      	beq.n	8016334 <_strtod_l+0x904>
 801630c:	f7ff fb73 	bl	80159f6 <sulp>
 8016310:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016314:	ec5b ab17 	vmov	sl, fp, d7
 8016318:	e7e1      	b.n	80162de <_strtod_l+0x8ae>
 801631a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801631e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016326:	f04f 3aff 	mov.w	sl, #4294967295
 801632a:	e7d8      	b.n	80162de <_strtod_l+0x8ae>
 801632c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801632e:	ea13 0f0a 	tst.w	r3, sl
 8016332:	e7e4      	b.n	80162fe <_strtod_l+0x8ce>
 8016334:	f7ff fb5f 	bl	80159f6 <sulp>
 8016338:	ee39 0b40 	vsub.f64	d0, d9, d0
 801633c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016344:	ec5b ab10 	vmov	sl, fp, d0
 8016348:	d1c9      	bne.n	80162de <_strtod_l+0x8ae>
 801634a:	e615      	b.n	8015f78 <_strtod_l+0x548>
 801634c:	4629      	mov	r1, r5
 801634e:	4620      	mov	r0, r4
 8016350:	f001 fbca 	bl	8017ae8 <__ratio>
 8016354:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016358:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016360:	d85d      	bhi.n	801641e <_strtod_l+0x9ee>
 8016362:	f1b8 0f00 	cmp.w	r8, #0
 8016366:	d164      	bne.n	8016432 <_strtod_l+0xa02>
 8016368:	f1ba 0f00 	cmp.w	sl, #0
 801636c:	d14b      	bne.n	8016406 <_strtod_l+0x9d6>
 801636e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016372:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016376:	2b00      	cmp	r3, #0
 8016378:	d160      	bne.n	801643c <_strtod_l+0xa0c>
 801637a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801637e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016386:	d401      	bmi.n	801638c <_strtod_l+0x95c>
 8016388:	ee20 8b08 	vmul.f64	d8, d0, d8
 801638c:	eeb1 ab48 	vneg.f64	d10, d8
 8016390:	486e      	ldr	r0, [pc, #440]	@ (801654c <_strtod_l+0xb1c>)
 8016392:	4970      	ldr	r1, [pc, #448]	@ (8016554 <_strtod_l+0xb24>)
 8016394:	ea09 0700 	and.w	r7, r9, r0
 8016398:	428f      	cmp	r7, r1
 801639a:	ec53 2b1a 	vmov	r2, r3, d10
 801639e:	d17d      	bne.n	801649c <_strtod_l+0xa6c>
 80163a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80163a4:	ec4b ab1c 	vmov	d12, sl, fp
 80163a8:	eeb0 0b4c 	vmov.f64	d0, d12
 80163ac:	f001 fad4 	bl	8017958 <__ulp>
 80163b0:	4866      	ldr	r0, [pc, #408]	@ (801654c <_strtod_l+0xb1c>)
 80163b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80163b6:	ee1c 3a90 	vmov	r3, s25
 80163ba:	4a67      	ldr	r2, [pc, #412]	@ (8016558 <_strtod_l+0xb28>)
 80163bc:	ea03 0100 	and.w	r1, r3, r0
 80163c0:	4291      	cmp	r1, r2
 80163c2:	ec5b ab1c 	vmov	sl, fp, d12
 80163c6:	d93c      	bls.n	8016442 <_strtod_l+0xa12>
 80163c8:	ee19 2a90 	vmov	r2, s19
 80163cc:	4b60      	ldr	r3, [pc, #384]	@ (8016550 <_strtod_l+0xb20>)
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d104      	bne.n	80163dc <_strtod_l+0x9ac>
 80163d2:	ee19 3a10 	vmov	r3, s18
 80163d6:	3301      	adds	r3, #1
 80163d8:	f43f ad3a 	beq.w	8015e50 <_strtod_l+0x420>
 80163dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016550 <_strtod_l+0xb20>
 80163e0:	f04f 3aff 	mov.w	sl, #4294967295
 80163e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80163e6:	9805      	ldr	r0, [sp, #20]
 80163e8:	f000 ff82 	bl	80172f0 <_Bfree>
 80163ec:	9805      	ldr	r0, [sp, #20]
 80163ee:	4631      	mov	r1, r6
 80163f0:	f000 ff7e 	bl	80172f0 <_Bfree>
 80163f4:	9805      	ldr	r0, [sp, #20]
 80163f6:	4629      	mov	r1, r5
 80163f8:	f000 ff7a 	bl	80172f0 <_Bfree>
 80163fc:	9805      	ldr	r0, [sp, #20]
 80163fe:	4621      	mov	r1, r4
 8016400:	f000 ff76 	bl	80172f0 <_Bfree>
 8016404:	e625      	b.n	8016052 <_strtod_l+0x622>
 8016406:	f1ba 0f01 	cmp.w	sl, #1
 801640a:	d103      	bne.n	8016414 <_strtod_l+0x9e4>
 801640c:	f1bb 0f00 	cmp.w	fp, #0
 8016410:	f43f adb2 	beq.w	8015f78 <_strtod_l+0x548>
 8016414:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016418:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801641c:	e7b8      	b.n	8016390 <_strtod_l+0x960>
 801641e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016422:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016426:	f1b8 0f00 	cmp.w	r8, #0
 801642a:	d0af      	beq.n	801638c <_strtod_l+0x95c>
 801642c:	eeb0 ab48 	vmov.f64	d10, d8
 8016430:	e7ae      	b.n	8016390 <_strtod_l+0x960>
 8016432:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016436:	eeb0 8b4a 	vmov.f64	d8, d10
 801643a:	e7a9      	b.n	8016390 <_strtod_l+0x960>
 801643c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016440:	e7a6      	b.n	8016390 <_strtod_l+0x960>
 8016442:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016446:	9b06      	ldr	r3, [sp, #24]
 8016448:	46d9      	mov	r9, fp
 801644a:	2b00      	cmp	r3, #0
 801644c:	d1ca      	bne.n	80163e4 <_strtod_l+0x9b4>
 801644e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016452:	0d1b      	lsrs	r3, r3, #20
 8016454:	051b      	lsls	r3, r3, #20
 8016456:	429f      	cmp	r7, r3
 8016458:	d1c4      	bne.n	80163e4 <_strtod_l+0x9b4>
 801645a:	ec51 0b18 	vmov	r0, r1, d8
 801645e:	f7ea f9cb 	bl	80007f8 <__aeabi_d2lz>
 8016462:	f7ea f933 	bl	80006cc <__aeabi_l2d>
 8016466:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801646a:	ec41 0b17 	vmov	d7, r0, r1
 801646e:	ea49 090a 	orr.w	r9, r9, sl
 8016472:	ea59 0908 	orrs.w	r9, r9, r8
 8016476:	ee38 8b47 	vsub.f64	d8, d8, d7
 801647a:	d03c      	beq.n	80164f6 <_strtod_l+0xac6>
 801647c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016530 <_strtod_l+0xb00>
 8016480:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016488:	f53f aced 	bmi.w	8015e66 <_strtod_l+0x436>
 801648c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016538 <_strtod_l+0xb08>
 8016490:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016498:	dda4      	ble.n	80163e4 <_strtod_l+0x9b4>
 801649a:	e4e4      	b.n	8015e66 <_strtod_l+0x436>
 801649c:	9906      	ldr	r1, [sp, #24]
 801649e:	b1e1      	cbz	r1, 80164da <_strtod_l+0xaaa>
 80164a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80164a4:	d819      	bhi.n	80164da <_strtod_l+0xaaa>
 80164a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80164aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ae:	d811      	bhi.n	80164d4 <_strtod_l+0xaa4>
 80164b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80164b4:	ee18 3a10 	vmov	r3, s16
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	bf38      	it	cc
 80164bc:	2301      	movcc	r3, #1
 80164be:	ee08 3a10 	vmov	s16, r3
 80164c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80164c6:	f1b8 0f00 	cmp.w	r8, #0
 80164ca:	d111      	bne.n	80164f0 <_strtod_l+0xac0>
 80164cc:	eeb1 7b48 	vneg.f64	d7, d8
 80164d0:	ec53 2b17 	vmov	r2, r3, d7
 80164d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80164d8:	1bcb      	subs	r3, r1, r7
 80164da:	eeb0 0b49 	vmov.f64	d0, d9
 80164de:	ec43 2b1a 	vmov	d10, r2, r3
 80164e2:	f001 fa39 	bl	8017958 <__ulp>
 80164e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80164ea:	ec5b ab19 	vmov	sl, fp, d9
 80164ee:	e7aa      	b.n	8016446 <_strtod_l+0xa16>
 80164f0:	eeb0 7b48 	vmov.f64	d7, d8
 80164f4:	e7ec      	b.n	80164d0 <_strtod_l+0xaa0>
 80164f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016540 <_strtod_l+0xb10>
 80164fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80164fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016502:	f57f af6f 	bpl.w	80163e4 <_strtod_l+0x9b4>
 8016506:	e4ae      	b.n	8015e66 <_strtod_l+0x436>
 8016508:	2300      	movs	r3, #0
 801650a:	9308      	str	r3, [sp, #32]
 801650c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801650e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016510:	6013      	str	r3, [r2, #0]
 8016512:	f7ff bacc 	b.w	8015aae <_strtod_l+0x7e>
 8016516:	2a65      	cmp	r2, #101	@ 0x65
 8016518:	f43f abbc 	beq.w	8015c94 <_strtod_l+0x264>
 801651c:	2a45      	cmp	r2, #69	@ 0x45
 801651e:	f43f abb9 	beq.w	8015c94 <_strtod_l+0x264>
 8016522:	2301      	movs	r3, #1
 8016524:	9306      	str	r3, [sp, #24]
 8016526:	f7ff bbf0 	b.w	8015d0a <_strtod_l+0x2da>
 801652a:	bf00      	nop
 801652c:	f3af 8000 	nop.w
 8016530:	94a03595 	.word	0x94a03595
 8016534:	3fdfffff 	.word	0x3fdfffff
 8016538:	35afe535 	.word	0x35afe535
 801653c:	3fe00000 	.word	0x3fe00000
 8016540:	94a03595 	.word	0x94a03595
 8016544:	3fcfffff 	.word	0x3fcfffff
 8016548:	000fffff 	.word	0x000fffff
 801654c:	7ff00000 	.word	0x7ff00000
 8016550:	7fefffff 	.word	0x7fefffff
 8016554:	7fe00000 	.word	0x7fe00000
 8016558:	7c9fffff 	.word	0x7c9fffff

0801655c <strtod>:
 801655c:	460a      	mov	r2, r1
 801655e:	4601      	mov	r1, r0
 8016560:	4802      	ldr	r0, [pc, #8]	@ (801656c <strtod+0x10>)
 8016562:	4b03      	ldr	r3, [pc, #12]	@ (8016570 <strtod+0x14>)
 8016564:	6800      	ldr	r0, [r0, #0]
 8016566:	f7ff ba63 	b.w	8015a30 <_strtod_l>
 801656a:	bf00      	nop
 801656c:	24000240 	.word	0x24000240
 8016570:	240000d4 	.word	0x240000d4

08016574 <_strtol_l.constprop.0>:
 8016574:	2b24      	cmp	r3, #36	@ 0x24
 8016576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801657a:	4686      	mov	lr, r0
 801657c:	4690      	mov	r8, r2
 801657e:	d801      	bhi.n	8016584 <_strtol_l.constprop.0+0x10>
 8016580:	2b01      	cmp	r3, #1
 8016582:	d106      	bne.n	8016592 <_strtol_l.constprop.0+0x1e>
 8016584:	f000 f9ec 	bl	8016960 <__errno>
 8016588:	2316      	movs	r3, #22
 801658a:	6003      	str	r3, [r0, #0]
 801658c:	2000      	movs	r0, #0
 801658e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016592:	4834      	ldr	r0, [pc, #208]	@ (8016664 <_strtol_l.constprop.0+0xf0>)
 8016594:	460d      	mov	r5, r1
 8016596:	462a      	mov	r2, r5
 8016598:	f815 4b01 	ldrb.w	r4, [r5], #1
 801659c:	5d06      	ldrb	r6, [r0, r4]
 801659e:	f016 0608 	ands.w	r6, r6, #8
 80165a2:	d1f8      	bne.n	8016596 <_strtol_l.constprop.0+0x22>
 80165a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80165a6:	d12d      	bne.n	8016604 <_strtol_l.constprop.0+0x90>
 80165a8:	782c      	ldrb	r4, [r5, #0]
 80165aa:	2601      	movs	r6, #1
 80165ac:	1c95      	adds	r5, r2, #2
 80165ae:	f033 0210 	bics.w	r2, r3, #16
 80165b2:	d109      	bne.n	80165c8 <_strtol_l.constprop.0+0x54>
 80165b4:	2c30      	cmp	r4, #48	@ 0x30
 80165b6:	d12a      	bne.n	801660e <_strtol_l.constprop.0+0x9a>
 80165b8:	782a      	ldrb	r2, [r5, #0]
 80165ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80165be:	2a58      	cmp	r2, #88	@ 0x58
 80165c0:	d125      	bne.n	801660e <_strtol_l.constprop.0+0x9a>
 80165c2:	786c      	ldrb	r4, [r5, #1]
 80165c4:	2310      	movs	r3, #16
 80165c6:	3502      	adds	r5, #2
 80165c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80165cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80165d0:	2200      	movs	r2, #0
 80165d2:	fbbc f9f3 	udiv	r9, ip, r3
 80165d6:	4610      	mov	r0, r2
 80165d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80165dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80165e0:	2f09      	cmp	r7, #9
 80165e2:	d81b      	bhi.n	801661c <_strtol_l.constprop.0+0xa8>
 80165e4:	463c      	mov	r4, r7
 80165e6:	42a3      	cmp	r3, r4
 80165e8:	dd27      	ble.n	801663a <_strtol_l.constprop.0+0xc6>
 80165ea:	1c57      	adds	r7, r2, #1
 80165ec:	d007      	beq.n	80165fe <_strtol_l.constprop.0+0x8a>
 80165ee:	4581      	cmp	r9, r0
 80165f0:	d320      	bcc.n	8016634 <_strtol_l.constprop.0+0xc0>
 80165f2:	d101      	bne.n	80165f8 <_strtol_l.constprop.0+0x84>
 80165f4:	45a2      	cmp	sl, r4
 80165f6:	db1d      	blt.n	8016634 <_strtol_l.constprop.0+0xc0>
 80165f8:	fb00 4003 	mla	r0, r0, r3, r4
 80165fc:	2201      	movs	r2, #1
 80165fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016602:	e7eb      	b.n	80165dc <_strtol_l.constprop.0+0x68>
 8016604:	2c2b      	cmp	r4, #43	@ 0x2b
 8016606:	bf04      	itt	eq
 8016608:	782c      	ldrbeq	r4, [r5, #0]
 801660a:	1c95      	addeq	r5, r2, #2
 801660c:	e7cf      	b.n	80165ae <_strtol_l.constprop.0+0x3a>
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1da      	bne.n	80165c8 <_strtol_l.constprop.0+0x54>
 8016612:	2c30      	cmp	r4, #48	@ 0x30
 8016614:	bf0c      	ite	eq
 8016616:	2308      	moveq	r3, #8
 8016618:	230a      	movne	r3, #10
 801661a:	e7d5      	b.n	80165c8 <_strtol_l.constprop.0+0x54>
 801661c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016620:	2f19      	cmp	r7, #25
 8016622:	d801      	bhi.n	8016628 <_strtol_l.constprop.0+0xb4>
 8016624:	3c37      	subs	r4, #55	@ 0x37
 8016626:	e7de      	b.n	80165e6 <_strtol_l.constprop.0+0x72>
 8016628:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801662c:	2f19      	cmp	r7, #25
 801662e:	d804      	bhi.n	801663a <_strtol_l.constprop.0+0xc6>
 8016630:	3c57      	subs	r4, #87	@ 0x57
 8016632:	e7d8      	b.n	80165e6 <_strtol_l.constprop.0+0x72>
 8016634:	f04f 32ff 	mov.w	r2, #4294967295
 8016638:	e7e1      	b.n	80165fe <_strtol_l.constprop.0+0x8a>
 801663a:	1c53      	adds	r3, r2, #1
 801663c:	d108      	bne.n	8016650 <_strtol_l.constprop.0+0xdc>
 801663e:	2322      	movs	r3, #34	@ 0x22
 8016640:	f8ce 3000 	str.w	r3, [lr]
 8016644:	4660      	mov	r0, ip
 8016646:	f1b8 0f00 	cmp.w	r8, #0
 801664a:	d0a0      	beq.n	801658e <_strtol_l.constprop.0+0x1a>
 801664c:	1e69      	subs	r1, r5, #1
 801664e:	e006      	b.n	801665e <_strtol_l.constprop.0+0xea>
 8016650:	b106      	cbz	r6, 8016654 <_strtol_l.constprop.0+0xe0>
 8016652:	4240      	negs	r0, r0
 8016654:	f1b8 0f00 	cmp.w	r8, #0
 8016658:	d099      	beq.n	801658e <_strtol_l.constprop.0+0x1a>
 801665a:	2a00      	cmp	r2, #0
 801665c:	d1f6      	bne.n	801664c <_strtol_l.constprop.0+0xd8>
 801665e:	f8c8 1000 	str.w	r1, [r8]
 8016662:	e794      	b.n	801658e <_strtol_l.constprop.0+0x1a>
 8016664:	08018a79 	.word	0x08018a79

08016668 <strtol>:
 8016668:	4613      	mov	r3, r2
 801666a:	460a      	mov	r2, r1
 801666c:	4601      	mov	r1, r0
 801666e:	4802      	ldr	r0, [pc, #8]	@ (8016678 <strtol+0x10>)
 8016670:	6800      	ldr	r0, [r0, #0]
 8016672:	f7ff bf7f 	b.w	8016574 <_strtol_l.constprop.0>
 8016676:	bf00      	nop
 8016678:	24000240 	.word	0x24000240

0801667c <std>:
 801667c:	2300      	movs	r3, #0
 801667e:	b510      	push	{r4, lr}
 8016680:	4604      	mov	r4, r0
 8016682:	e9c0 3300 	strd	r3, r3, [r0]
 8016686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801668a:	6083      	str	r3, [r0, #8]
 801668c:	8181      	strh	r1, [r0, #12]
 801668e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016690:	81c2      	strh	r2, [r0, #14]
 8016692:	6183      	str	r3, [r0, #24]
 8016694:	4619      	mov	r1, r3
 8016696:	2208      	movs	r2, #8
 8016698:	305c      	adds	r0, #92	@ 0x5c
 801669a:	f000 f8f4 	bl	8016886 <memset>
 801669e:	4b0d      	ldr	r3, [pc, #52]	@ (80166d4 <std+0x58>)
 80166a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80166a2:	4b0d      	ldr	r3, [pc, #52]	@ (80166d8 <std+0x5c>)
 80166a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166a6:	4b0d      	ldr	r3, [pc, #52]	@ (80166dc <std+0x60>)
 80166a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166aa:	4b0d      	ldr	r3, [pc, #52]	@ (80166e0 <std+0x64>)
 80166ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80166ae:	4b0d      	ldr	r3, [pc, #52]	@ (80166e4 <std+0x68>)
 80166b0:	6224      	str	r4, [r4, #32]
 80166b2:	429c      	cmp	r4, r3
 80166b4:	d006      	beq.n	80166c4 <std+0x48>
 80166b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80166ba:	4294      	cmp	r4, r2
 80166bc:	d002      	beq.n	80166c4 <std+0x48>
 80166be:	33d0      	adds	r3, #208	@ 0xd0
 80166c0:	429c      	cmp	r4, r3
 80166c2:	d105      	bne.n	80166d0 <std+0x54>
 80166c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80166c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166cc:	f000 b972 	b.w	80169b4 <__retarget_lock_init_recursive>
 80166d0:	bd10      	pop	{r4, pc}
 80166d2:	bf00      	nop
 80166d4:	08016801 	.word	0x08016801
 80166d8:	08016823 	.word	0x08016823
 80166dc:	0801685b 	.word	0x0801685b
 80166e0:	0801687f 	.word	0x0801687f
 80166e4:	24006690 	.word	0x24006690

080166e8 <stdio_exit_handler>:
 80166e8:	4a02      	ldr	r2, [pc, #8]	@ (80166f4 <stdio_exit_handler+0xc>)
 80166ea:	4903      	ldr	r1, [pc, #12]	@ (80166f8 <stdio_exit_handler+0x10>)
 80166ec:	4803      	ldr	r0, [pc, #12]	@ (80166fc <stdio_exit_handler+0x14>)
 80166ee:	f000 b869 	b.w	80167c4 <_fwalk_sglue>
 80166f2:	bf00      	nop
 80166f4:	240000c8 	.word	0x240000c8
 80166f8:	08017cf1 	.word	0x08017cf1
 80166fc:	24000244 	.word	0x24000244

08016700 <cleanup_stdio>:
 8016700:	6841      	ldr	r1, [r0, #4]
 8016702:	4b0c      	ldr	r3, [pc, #48]	@ (8016734 <cleanup_stdio+0x34>)
 8016704:	4299      	cmp	r1, r3
 8016706:	b510      	push	{r4, lr}
 8016708:	4604      	mov	r4, r0
 801670a:	d001      	beq.n	8016710 <cleanup_stdio+0x10>
 801670c:	f001 faf0 	bl	8017cf0 <_fflush_r>
 8016710:	68a1      	ldr	r1, [r4, #8]
 8016712:	4b09      	ldr	r3, [pc, #36]	@ (8016738 <cleanup_stdio+0x38>)
 8016714:	4299      	cmp	r1, r3
 8016716:	d002      	beq.n	801671e <cleanup_stdio+0x1e>
 8016718:	4620      	mov	r0, r4
 801671a:	f001 fae9 	bl	8017cf0 <_fflush_r>
 801671e:	68e1      	ldr	r1, [r4, #12]
 8016720:	4b06      	ldr	r3, [pc, #24]	@ (801673c <cleanup_stdio+0x3c>)
 8016722:	4299      	cmp	r1, r3
 8016724:	d004      	beq.n	8016730 <cleanup_stdio+0x30>
 8016726:	4620      	mov	r0, r4
 8016728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801672c:	f001 bae0 	b.w	8017cf0 <_fflush_r>
 8016730:	bd10      	pop	{r4, pc}
 8016732:	bf00      	nop
 8016734:	24006690 	.word	0x24006690
 8016738:	240066f8 	.word	0x240066f8
 801673c:	24006760 	.word	0x24006760

08016740 <global_stdio_init.part.0>:
 8016740:	b510      	push	{r4, lr}
 8016742:	4b0b      	ldr	r3, [pc, #44]	@ (8016770 <global_stdio_init.part.0+0x30>)
 8016744:	4c0b      	ldr	r4, [pc, #44]	@ (8016774 <global_stdio_init.part.0+0x34>)
 8016746:	4a0c      	ldr	r2, [pc, #48]	@ (8016778 <global_stdio_init.part.0+0x38>)
 8016748:	601a      	str	r2, [r3, #0]
 801674a:	4620      	mov	r0, r4
 801674c:	2200      	movs	r2, #0
 801674e:	2104      	movs	r1, #4
 8016750:	f7ff ff94 	bl	801667c <std>
 8016754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016758:	2201      	movs	r2, #1
 801675a:	2109      	movs	r1, #9
 801675c:	f7ff ff8e 	bl	801667c <std>
 8016760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016764:	2202      	movs	r2, #2
 8016766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801676a:	2112      	movs	r1, #18
 801676c:	f7ff bf86 	b.w	801667c <std>
 8016770:	240067c8 	.word	0x240067c8
 8016774:	24006690 	.word	0x24006690
 8016778:	080166e9 	.word	0x080166e9

0801677c <__sfp_lock_acquire>:
 801677c:	4801      	ldr	r0, [pc, #4]	@ (8016784 <__sfp_lock_acquire+0x8>)
 801677e:	f000 b91a 	b.w	80169b6 <__retarget_lock_acquire_recursive>
 8016782:	bf00      	nop
 8016784:	240067d1 	.word	0x240067d1

08016788 <__sfp_lock_release>:
 8016788:	4801      	ldr	r0, [pc, #4]	@ (8016790 <__sfp_lock_release+0x8>)
 801678a:	f000 b915 	b.w	80169b8 <__retarget_lock_release_recursive>
 801678e:	bf00      	nop
 8016790:	240067d1 	.word	0x240067d1

08016794 <__sinit>:
 8016794:	b510      	push	{r4, lr}
 8016796:	4604      	mov	r4, r0
 8016798:	f7ff fff0 	bl	801677c <__sfp_lock_acquire>
 801679c:	6a23      	ldr	r3, [r4, #32]
 801679e:	b11b      	cbz	r3, 80167a8 <__sinit+0x14>
 80167a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a4:	f7ff bff0 	b.w	8016788 <__sfp_lock_release>
 80167a8:	4b04      	ldr	r3, [pc, #16]	@ (80167bc <__sinit+0x28>)
 80167aa:	6223      	str	r3, [r4, #32]
 80167ac:	4b04      	ldr	r3, [pc, #16]	@ (80167c0 <__sinit+0x2c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d1f5      	bne.n	80167a0 <__sinit+0xc>
 80167b4:	f7ff ffc4 	bl	8016740 <global_stdio_init.part.0>
 80167b8:	e7f2      	b.n	80167a0 <__sinit+0xc>
 80167ba:	bf00      	nop
 80167bc:	08016701 	.word	0x08016701
 80167c0:	240067c8 	.word	0x240067c8

080167c4 <_fwalk_sglue>:
 80167c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c8:	4607      	mov	r7, r0
 80167ca:	4688      	mov	r8, r1
 80167cc:	4614      	mov	r4, r2
 80167ce:	2600      	movs	r6, #0
 80167d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167d4:	f1b9 0901 	subs.w	r9, r9, #1
 80167d8:	d505      	bpl.n	80167e6 <_fwalk_sglue+0x22>
 80167da:	6824      	ldr	r4, [r4, #0]
 80167dc:	2c00      	cmp	r4, #0
 80167de:	d1f7      	bne.n	80167d0 <_fwalk_sglue+0xc>
 80167e0:	4630      	mov	r0, r6
 80167e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167e6:	89ab      	ldrh	r3, [r5, #12]
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d907      	bls.n	80167fc <_fwalk_sglue+0x38>
 80167ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167f0:	3301      	adds	r3, #1
 80167f2:	d003      	beq.n	80167fc <_fwalk_sglue+0x38>
 80167f4:	4629      	mov	r1, r5
 80167f6:	4638      	mov	r0, r7
 80167f8:	47c0      	blx	r8
 80167fa:	4306      	orrs	r6, r0
 80167fc:	3568      	adds	r5, #104	@ 0x68
 80167fe:	e7e9      	b.n	80167d4 <_fwalk_sglue+0x10>

08016800 <__sread>:
 8016800:	b510      	push	{r4, lr}
 8016802:	460c      	mov	r4, r1
 8016804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016808:	f000 f886 	bl	8016918 <_read_r>
 801680c:	2800      	cmp	r0, #0
 801680e:	bfab      	itete	ge
 8016810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016812:	89a3      	ldrhlt	r3, [r4, #12]
 8016814:	181b      	addge	r3, r3, r0
 8016816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801681a:	bfac      	ite	ge
 801681c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801681e:	81a3      	strhlt	r3, [r4, #12]
 8016820:	bd10      	pop	{r4, pc}

08016822 <__swrite>:
 8016822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016826:	461f      	mov	r7, r3
 8016828:	898b      	ldrh	r3, [r1, #12]
 801682a:	05db      	lsls	r3, r3, #23
 801682c:	4605      	mov	r5, r0
 801682e:	460c      	mov	r4, r1
 8016830:	4616      	mov	r6, r2
 8016832:	d505      	bpl.n	8016840 <__swrite+0x1e>
 8016834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016838:	2302      	movs	r3, #2
 801683a:	2200      	movs	r2, #0
 801683c:	f000 f85a 	bl	80168f4 <_lseek_r>
 8016840:	89a3      	ldrh	r3, [r4, #12]
 8016842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801684a:	81a3      	strh	r3, [r4, #12]
 801684c:	4632      	mov	r2, r6
 801684e:	463b      	mov	r3, r7
 8016850:	4628      	mov	r0, r5
 8016852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016856:	f000 b871 	b.w	801693c <_write_r>

0801685a <__sseek>:
 801685a:	b510      	push	{r4, lr}
 801685c:	460c      	mov	r4, r1
 801685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016862:	f000 f847 	bl	80168f4 <_lseek_r>
 8016866:	1c43      	adds	r3, r0, #1
 8016868:	89a3      	ldrh	r3, [r4, #12]
 801686a:	bf15      	itete	ne
 801686c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801686e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016876:	81a3      	strheq	r3, [r4, #12]
 8016878:	bf18      	it	ne
 801687a:	81a3      	strhne	r3, [r4, #12]
 801687c:	bd10      	pop	{r4, pc}

0801687e <__sclose>:
 801687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016882:	f000 b827 	b.w	80168d4 <_close_r>

08016886 <memset>:
 8016886:	4402      	add	r2, r0
 8016888:	4603      	mov	r3, r0
 801688a:	4293      	cmp	r3, r2
 801688c:	d100      	bne.n	8016890 <memset+0xa>
 801688e:	4770      	bx	lr
 8016890:	f803 1b01 	strb.w	r1, [r3], #1
 8016894:	e7f9      	b.n	801688a <memset+0x4>

08016896 <strchr>:
 8016896:	b2c9      	uxtb	r1, r1
 8016898:	4603      	mov	r3, r0
 801689a:	4618      	mov	r0, r3
 801689c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168a0:	b112      	cbz	r2, 80168a8 <strchr+0x12>
 80168a2:	428a      	cmp	r2, r1
 80168a4:	d1f9      	bne.n	801689a <strchr+0x4>
 80168a6:	4770      	bx	lr
 80168a8:	2900      	cmp	r1, #0
 80168aa:	bf18      	it	ne
 80168ac:	2000      	movne	r0, #0
 80168ae:	4770      	bx	lr

080168b0 <strncmp>:
 80168b0:	b510      	push	{r4, lr}
 80168b2:	b16a      	cbz	r2, 80168d0 <strncmp+0x20>
 80168b4:	3901      	subs	r1, #1
 80168b6:	1884      	adds	r4, r0, r2
 80168b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d103      	bne.n	80168cc <strncmp+0x1c>
 80168c4:	42a0      	cmp	r0, r4
 80168c6:	d001      	beq.n	80168cc <strncmp+0x1c>
 80168c8:	2a00      	cmp	r2, #0
 80168ca:	d1f5      	bne.n	80168b8 <strncmp+0x8>
 80168cc:	1ad0      	subs	r0, r2, r3
 80168ce:	bd10      	pop	{r4, pc}
 80168d0:	4610      	mov	r0, r2
 80168d2:	e7fc      	b.n	80168ce <strncmp+0x1e>

080168d4 <_close_r>:
 80168d4:	b538      	push	{r3, r4, r5, lr}
 80168d6:	4d06      	ldr	r5, [pc, #24]	@ (80168f0 <_close_r+0x1c>)
 80168d8:	2300      	movs	r3, #0
 80168da:	4604      	mov	r4, r0
 80168dc:	4608      	mov	r0, r1
 80168de:	602b      	str	r3, [r5, #0]
 80168e0:	f7ed fe80 	bl	80045e4 <_close>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	d102      	bne.n	80168ee <_close_r+0x1a>
 80168e8:	682b      	ldr	r3, [r5, #0]
 80168ea:	b103      	cbz	r3, 80168ee <_close_r+0x1a>
 80168ec:	6023      	str	r3, [r4, #0]
 80168ee:	bd38      	pop	{r3, r4, r5, pc}
 80168f0:	240067cc 	.word	0x240067cc

080168f4 <_lseek_r>:
 80168f4:	b538      	push	{r3, r4, r5, lr}
 80168f6:	4d07      	ldr	r5, [pc, #28]	@ (8016914 <_lseek_r+0x20>)
 80168f8:	4604      	mov	r4, r0
 80168fa:	4608      	mov	r0, r1
 80168fc:	4611      	mov	r1, r2
 80168fe:	2200      	movs	r2, #0
 8016900:	602a      	str	r2, [r5, #0]
 8016902:	461a      	mov	r2, r3
 8016904:	f7ed fe95 	bl	8004632 <_lseek>
 8016908:	1c43      	adds	r3, r0, #1
 801690a:	d102      	bne.n	8016912 <_lseek_r+0x1e>
 801690c:	682b      	ldr	r3, [r5, #0]
 801690e:	b103      	cbz	r3, 8016912 <_lseek_r+0x1e>
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	bd38      	pop	{r3, r4, r5, pc}
 8016914:	240067cc 	.word	0x240067cc

08016918 <_read_r>:
 8016918:	b538      	push	{r3, r4, r5, lr}
 801691a:	4d07      	ldr	r5, [pc, #28]	@ (8016938 <_read_r+0x20>)
 801691c:	4604      	mov	r4, r0
 801691e:	4608      	mov	r0, r1
 8016920:	4611      	mov	r1, r2
 8016922:	2200      	movs	r2, #0
 8016924:	602a      	str	r2, [r5, #0]
 8016926:	461a      	mov	r2, r3
 8016928:	f7ed fe23 	bl	8004572 <_read>
 801692c:	1c43      	adds	r3, r0, #1
 801692e:	d102      	bne.n	8016936 <_read_r+0x1e>
 8016930:	682b      	ldr	r3, [r5, #0]
 8016932:	b103      	cbz	r3, 8016936 <_read_r+0x1e>
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	240067cc 	.word	0x240067cc

0801693c <_write_r>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	4d07      	ldr	r5, [pc, #28]	@ (801695c <_write_r+0x20>)
 8016940:	4604      	mov	r4, r0
 8016942:	4608      	mov	r0, r1
 8016944:	4611      	mov	r1, r2
 8016946:	2200      	movs	r2, #0
 8016948:	602a      	str	r2, [r5, #0]
 801694a:	461a      	mov	r2, r3
 801694c:	f7ed fe2e 	bl	80045ac <_write>
 8016950:	1c43      	adds	r3, r0, #1
 8016952:	d102      	bne.n	801695a <_write_r+0x1e>
 8016954:	682b      	ldr	r3, [r5, #0]
 8016956:	b103      	cbz	r3, 801695a <_write_r+0x1e>
 8016958:	6023      	str	r3, [r4, #0]
 801695a:	bd38      	pop	{r3, r4, r5, pc}
 801695c:	240067cc 	.word	0x240067cc

08016960 <__errno>:
 8016960:	4b01      	ldr	r3, [pc, #4]	@ (8016968 <__errno+0x8>)
 8016962:	6818      	ldr	r0, [r3, #0]
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	24000240 	.word	0x24000240

0801696c <__libc_init_array>:
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	4d0d      	ldr	r5, [pc, #52]	@ (80169a4 <__libc_init_array+0x38>)
 8016970:	4c0d      	ldr	r4, [pc, #52]	@ (80169a8 <__libc_init_array+0x3c>)
 8016972:	1b64      	subs	r4, r4, r5
 8016974:	10a4      	asrs	r4, r4, #2
 8016976:	2600      	movs	r6, #0
 8016978:	42a6      	cmp	r6, r4
 801697a:	d109      	bne.n	8016990 <__libc_init_array+0x24>
 801697c:	4d0b      	ldr	r5, [pc, #44]	@ (80169ac <__libc_init_array+0x40>)
 801697e:	4c0c      	ldr	r4, [pc, #48]	@ (80169b0 <__libc_init_array+0x44>)
 8016980:	f001 ff9a 	bl	80188b8 <_init>
 8016984:	1b64      	subs	r4, r4, r5
 8016986:	10a4      	asrs	r4, r4, #2
 8016988:	2600      	movs	r6, #0
 801698a:	42a6      	cmp	r6, r4
 801698c:	d105      	bne.n	801699a <__libc_init_array+0x2e>
 801698e:	bd70      	pop	{r4, r5, r6, pc}
 8016990:	f855 3b04 	ldr.w	r3, [r5], #4
 8016994:	4798      	blx	r3
 8016996:	3601      	adds	r6, #1
 8016998:	e7ee      	b.n	8016978 <__libc_init_array+0xc>
 801699a:	f855 3b04 	ldr.w	r3, [r5], #4
 801699e:	4798      	blx	r3
 80169a0:	3601      	adds	r6, #1
 80169a2:	e7f2      	b.n	801698a <__libc_init_array+0x1e>
 80169a4:	08019668 	.word	0x08019668
 80169a8:	08019668 	.word	0x08019668
 80169ac:	08019668 	.word	0x08019668
 80169b0:	0801966c 	.word	0x0801966c

080169b4 <__retarget_lock_init_recursive>:
 80169b4:	4770      	bx	lr

080169b6 <__retarget_lock_acquire_recursive>:
 80169b6:	4770      	bx	lr

080169b8 <__retarget_lock_release_recursive>:
 80169b8:	4770      	bx	lr

080169ba <memcpy>:
 80169ba:	440a      	add	r2, r1
 80169bc:	4291      	cmp	r1, r2
 80169be:	f100 33ff 	add.w	r3, r0, #4294967295
 80169c2:	d100      	bne.n	80169c6 <memcpy+0xc>
 80169c4:	4770      	bx	lr
 80169c6:	b510      	push	{r4, lr}
 80169c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169d0:	4291      	cmp	r1, r2
 80169d2:	d1f9      	bne.n	80169c8 <memcpy+0xe>
 80169d4:	bd10      	pop	{r4, pc}
	...

080169d8 <nan>:
 80169d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169e0 <nan+0x8>
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	00000000 	.word	0x00000000
 80169e4:	7ff80000 	.word	0x7ff80000

080169e8 <_free_r>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	4605      	mov	r5, r0
 80169ec:	2900      	cmp	r1, #0
 80169ee:	d041      	beq.n	8016a74 <_free_r+0x8c>
 80169f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169f4:	1f0c      	subs	r4, r1, #4
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	bfb8      	it	lt
 80169fa:	18e4      	addlt	r4, r4, r3
 80169fc:	f000 fc2c 	bl	8017258 <__malloc_lock>
 8016a00:	4a1d      	ldr	r2, [pc, #116]	@ (8016a78 <_free_r+0x90>)
 8016a02:	6813      	ldr	r3, [r2, #0]
 8016a04:	b933      	cbnz	r3, 8016a14 <_free_r+0x2c>
 8016a06:	6063      	str	r3, [r4, #4]
 8016a08:	6014      	str	r4, [r2, #0]
 8016a0a:	4628      	mov	r0, r5
 8016a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a10:	f000 bc28 	b.w	8017264 <__malloc_unlock>
 8016a14:	42a3      	cmp	r3, r4
 8016a16:	d908      	bls.n	8016a2a <_free_r+0x42>
 8016a18:	6820      	ldr	r0, [r4, #0]
 8016a1a:	1821      	adds	r1, r4, r0
 8016a1c:	428b      	cmp	r3, r1
 8016a1e:	bf01      	itttt	eq
 8016a20:	6819      	ldreq	r1, [r3, #0]
 8016a22:	685b      	ldreq	r3, [r3, #4]
 8016a24:	1809      	addeq	r1, r1, r0
 8016a26:	6021      	streq	r1, [r4, #0]
 8016a28:	e7ed      	b.n	8016a06 <_free_r+0x1e>
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	b10b      	cbz	r3, 8016a34 <_free_r+0x4c>
 8016a30:	42a3      	cmp	r3, r4
 8016a32:	d9fa      	bls.n	8016a2a <_free_r+0x42>
 8016a34:	6811      	ldr	r1, [r2, #0]
 8016a36:	1850      	adds	r0, r2, r1
 8016a38:	42a0      	cmp	r0, r4
 8016a3a:	d10b      	bne.n	8016a54 <_free_r+0x6c>
 8016a3c:	6820      	ldr	r0, [r4, #0]
 8016a3e:	4401      	add	r1, r0
 8016a40:	1850      	adds	r0, r2, r1
 8016a42:	4283      	cmp	r3, r0
 8016a44:	6011      	str	r1, [r2, #0]
 8016a46:	d1e0      	bne.n	8016a0a <_free_r+0x22>
 8016a48:	6818      	ldr	r0, [r3, #0]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	6053      	str	r3, [r2, #4]
 8016a4e:	4408      	add	r0, r1
 8016a50:	6010      	str	r0, [r2, #0]
 8016a52:	e7da      	b.n	8016a0a <_free_r+0x22>
 8016a54:	d902      	bls.n	8016a5c <_free_r+0x74>
 8016a56:	230c      	movs	r3, #12
 8016a58:	602b      	str	r3, [r5, #0]
 8016a5a:	e7d6      	b.n	8016a0a <_free_r+0x22>
 8016a5c:	6820      	ldr	r0, [r4, #0]
 8016a5e:	1821      	adds	r1, r4, r0
 8016a60:	428b      	cmp	r3, r1
 8016a62:	bf04      	itt	eq
 8016a64:	6819      	ldreq	r1, [r3, #0]
 8016a66:	685b      	ldreq	r3, [r3, #4]
 8016a68:	6063      	str	r3, [r4, #4]
 8016a6a:	bf04      	itt	eq
 8016a6c:	1809      	addeq	r1, r1, r0
 8016a6e:	6021      	streq	r1, [r4, #0]
 8016a70:	6054      	str	r4, [r2, #4]
 8016a72:	e7ca      	b.n	8016a0a <_free_r+0x22>
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop
 8016a78:	240067d8 	.word	0x240067d8

08016a7c <rshift>:
 8016a7c:	6903      	ldr	r3, [r0, #16]
 8016a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016a8a:	f100 0414 	add.w	r4, r0, #20
 8016a8e:	dd45      	ble.n	8016b1c <rshift+0xa0>
 8016a90:	f011 011f 	ands.w	r1, r1, #31
 8016a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016a9c:	d10c      	bne.n	8016ab8 <rshift+0x3c>
 8016a9e:	f100 0710 	add.w	r7, r0, #16
 8016aa2:	4629      	mov	r1, r5
 8016aa4:	42b1      	cmp	r1, r6
 8016aa6:	d334      	bcc.n	8016b12 <rshift+0x96>
 8016aa8:	1a9b      	subs	r3, r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	1eea      	subs	r2, r5, #3
 8016aae:	4296      	cmp	r6, r2
 8016ab0:	bf38      	it	cc
 8016ab2:	2300      	movcc	r3, #0
 8016ab4:	4423      	add	r3, r4
 8016ab6:	e015      	b.n	8016ae4 <rshift+0x68>
 8016ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016abc:	f1c1 0820 	rsb	r8, r1, #32
 8016ac0:	40cf      	lsrs	r7, r1
 8016ac2:	f105 0e04 	add.w	lr, r5, #4
 8016ac6:	46a1      	mov	r9, r4
 8016ac8:	4576      	cmp	r6, lr
 8016aca:	46f4      	mov	ip, lr
 8016acc:	d815      	bhi.n	8016afa <rshift+0x7e>
 8016ace:	1a9a      	subs	r2, r3, r2
 8016ad0:	0092      	lsls	r2, r2, #2
 8016ad2:	3a04      	subs	r2, #4
 8016ad4:	3501      	adds	r5, #1
 8016ad6:	42ae      	cmp	r6, r5
 8016ad8:	bf38      	it	cc
 8016ada:	2200      	movcc	r2, #0
 8016adc:	18a3      	adds	r3, r4, r2
 8016ade:	50a7      	str	r7, [r4, r2]
 8016ae0:	b107      	cbz	r7, 8016ae4 <rshift+0x68>
 8016ae2:	3304      	adds	r3, #4
 8016ae4:	1b1a      	subs	r2, r3, r4
 8016ae6:	42a3      	cmp	r3, r4
 8016ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016aec:	bf08      	it	eq
 8016aee:	2300      	moveq	r3, #0
 8016af0:	6102      	str	r2, [r0, #16]
 8016af2:	bf08      	it	eq
 8016af4:	6143      	streq	r3, [r0, #20]
 8016af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016afa:	f8dc c000 	ldr.w	ip, [ip]
 8016afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8016b02:	ea4c 0707 	orr.w	r7, ip, r7
 8016b06:	f849 7b04 	str.w	r7, [r9], #4
 8016b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016b0e:	40cf      	lsrs	r7, r1
 8016b10:	e7da      	b.n	8016ac8 <rshift+0x4c>
 8016b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8016b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8016b1a:	e7c3      	b.n	8016aa4 <rshift+0x28>
 8016b1c:	4623      	mov	r3, r4
 8016b1e:	e7e1      	b.n	8016ae4 <rshift+0x68>

08016b20 <__hexdig_fun>:
 8016b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016b24:	2b09      	cmp	r3, #9
 8016b26:	d802      	bhi.n	8016b2e <__hexdig_fun+0xe>
 8016b28:	3820      	subs	r0, #32
 8016b2a:	b2c0      	uxtb	r0, r0
 8016b2c:	4770      	bx	lr
 8016b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016b32:	2b05      	cmp	r3, #5
 8016b34:	d801      	bhi.n	8016b3a <__hexdig_fun+0x1a>
 8016b36:	3847      	subs	r0, #71	@ 0x47
 8016b38:	e7f7      	b.n	8016b2a <__hexdig_fun+0xa>
 8016b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016b3e:	2b05      	cmp	r3, #5
 8016b40:	d801      	bhi.n	8016b46 <__hexdig_fun+0x26>
 8016b42:	3827      	subs	r0, #39	@ 0x27
 8016b44:	e7f1      	b.n	8016b2a <__hexdig_fun+0xa>
 8016b46:	2000      	movs	r0, #0
 8016b48:	4770      	bx	lr
	...

08016b4c <__gethex>:
 8016b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b50:	b085      	sub	sp, #20
 8016b52:	468a      	mov	sl, r1
 8016b54:	9302      	str	r3, [sp, #8]
 8016b56:	680b      	ldr	r3, [r1, #0]
 8016b58:	9001      	str	r0, [sp, #4]
 8016b5a:	4690      	mov	r8, r2
 8016b5c:	1c9c      	adds	r4, r3, #2
 8016b5e:	46a1      	mov	r9, r4
 8016b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016b64:	2830      	cmp	r0, #48	@ 0x30
 8016b66:	d0fa      	beq.n	8016b5e <__gethex+0x12>
 8016b68:	eba9 0303 	sub.w	r3, r9, r3
 8016b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016b70:	f7ff ffd6 	bl	8016b20 <__hexdig_fun>
 8016b74:	4605      	mov	r5, r0
 8016b76:	2800      	cmp	r0, #0
 8016b78:	d168      	bne.n	8016c4c <__gethex+0x100>
 8016b7a:	49a0      	ldr	r1, [pc, #640]	@ (8016dfc <__gethex+0x2b0>)
 8016b7c:	2201      	movs	r2, #1
 8016b7e:	4648      	mov	r0, r9
 8016b80:	f7ff fe96 	bl	80168b0 <strncmp>
 8016b84:	4607      	mov	r7, r0
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d167      	bne.n	8016c5a <__gethex+0x10e>
 8016b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016b8e:	4626      	mov	r6, r4
 8016b90:	f7ff ffc6 	bl	8016b20 <__hexdig_fun>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d062      	beq.n	8016c5e <__gethex+0x112>
 8016b98:	4623      	mov	r3, r4
 8016b9a:	7818      	ldrb	r0, [r3, #0]
 8016b9c:	2830      	cmp	r0, #48	@ 0x30
 8016b9e:	4699      	mov	r9, r3
 8016ba0:	f103 0301 	add.w	r3, r3, #1
 8016ba4:	d0f9      	beq.n	8016b9a <__gethex+0x4e>
 8016ba6:	f7ff ffbb 	bl	8016b20 <__hexdig_fun>
 8016baa:	fab0 f580 	clz	r5, r0
 8016bae:	096d      	lsrs	r5, r5, #5
 8016bb0:	f04f 0b01 	mov.w	fp, #1
 8016bb4:	464a      	mov	r2, r9
 8016bb6:	4616      	mov	r6, r2
 8016bb8:	3201      	adds	r2, #1
 8016bba:	7830      	ldrb	r0, [r6, #0]
 8016bbc:	f7ff ffb0 	bl	8016b20 <__hexdig_fun>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d1f8      	bne.n	8016bb6 <__gethex+0x6a>
 8016bc4:	498d      	ldr	r1, [pc, #564]	@ (8016dfc <__gethex+0x2b0>)
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	4630      	mov	r0, r6
 8016bca:	f7ff fe71 	bl	80168b0 <strncmp>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d13f      	bne.n	8016c52 <__gethex+0x106>
 8016bd2:	b944      	cbnz	r4, 8016be6 <__gethex+0x9a>
 8016bd4:	1c74      	adds	r4, r6, #1
 8016bd6:	4622      	mov	r2, r4
 8016bd8:	4616      	mov	r6, r2
 8016bda:	3201      	adds	r2, #1
 8016bdc:	7830      	ldrb	r0, [r6, #0]
 8016bde:	f7ff ff9f 	bl	8016b20 <__hexdig_fun>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d1f8      	bne.n	8016bd8 <__gethex+0x8c>
 8016be6:	1ba4      	subs	r4, r4, r6
 8016be8:	00a7      	lsls	r7, r4, #2
 8016bea:	7833      	ldrb	r3, [r6, #0]
 8016bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016bf0:	2b50      	cmp	r3, #80	@ 0x50
 8016bf2:	d13e      	bne.n	8016c72 <__gethex+0x126>
 8016bf4:	7873      	ldrb	r3, [r6, #1]
 8016bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016bf8:	d033      	beq.n	8016c62 <__gethex+0x116>
 8016bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8016bfc:	d034      	beq.n	8016c68 <__gethex+0x11c>
 8016bfe:	1c71      	adds	r1, r6, #1
 8016c00:	2400      	movs	r4, #0
 8016c02:	7808      	ldrb	r0, [r1, #0]
 8016c04:	f7ff ff8c 	bl	8016b20 <__hexdig_fun>
 8016c08:	1e43      	subs	r3, r0, #1
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	2b18      	cmp	r3, #24
 8016c0e:	d830      	bhi.n	8016c72 <__gethex+0x126>
 8016c10:	f1a0 0210 	sub.w	r2, r0, #16
 8016c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c18:	f7ff ff82 	bl	8016b20 <__hexdig_fun>
 8016c1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016c20:	fa5f fc8c 	uxtb.w	ip, ip
 8016c24:	f1bc 0f18 	cmp.w	ip, #24
 8016c28:	f04f 030a 	mov.w	r3, #10
 8016c2c:	d91e      	bls.n	8016c6c <__gethex+0x120>
 8016c2e:	b104      	cbz	r4, 8016c32 <__gethex+0xe6>
 8016c30:	4252      	negs	r2, r2
 8016c32:	4417      	add	r7, r2
 8016c34:	f8ca 1000 	str.w	r1, [sl]
 8016c38:	b1ed      	cbz	r5, 8016c76 <__gethex+0x12a>
 8016c3a:	f1bb 0f00 	cmp.w	fp, #0
 8016c3e:	bf0c      	ite	eq
 8016c40:	2506      	moveq	r5, #6
 8016c42:	2500      	movne	r5, #0
 8016c44:	4628      	mov	r0, r5
 8016c46:	b005      	add	sp, #20
 8016c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4c:	2500      	movs	r5, #0
 8016c4e:	462c      	mov	r4, r5
 8016c50:	e7b0      	b.n	8016bb4 <__gethex+0x68>
 8016c52:	2c00      	cmp	r4, #0
 8016c54:	d1c7      	bne.n	8016be6 <__gethex+0x9a>
 8016c56:	4627      	mov	r7, r4
 8016c58:	e7c7      	b.n	8016bea <__gethex+0x9e>
 8016c5a:	464e      	mov	r6, r9
 8016c5c:	462f      	mov	r7, r5
 8016c5e:	2501      	movs	r5, #1
 8016c60:	e7c3      	b.n	8016bea <__gethex+0x9e>
 8016c62:	2400      	movs	r4, #0
 8016c64:	1cb1      	adds	r1, r6, #2
 8016c66:	e7cc      	b.n	8016c02 <__gethex+0xb6>
 8016c68:	2401      	movs	r4, #1
 8016c6a:	e7fb      	b.n	8016c64 <__gethex+0x118>
 8016c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8016c70:	e7ce      	b.n	8016c10 <__gethex+0xc4>
 8016c72:	4631      	mov	r1, r6
 8016c74:	e7de      	b.n	8016c34 <__gethex+0xe8>
 8016c76:	eba6 0309 	sub.w	r3, r6, r9
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	4629      	mov	r1, r5
 8016c7e:	2b07      	cmp	r3, #7
 8016c80:	dc0a      	bgt.n	8016c98 <__gethex+0x14c>
 8016c82:	9801      	ldr	r0, [sp, #4]
 8016c84:	f000 faf4 	bl	8017270 <_Balloc>
 8016c88:	4604      	mov	r4, r0
 8016c8a:	b940      	cbnz	r0, 8016c9e <__gethex+0x152>
 8016c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8016e00 <__gethex+0x2b4>)
 8016c8e:	4602      	mov	r2, r0
 8016c90:	21e4      	movs	r1, #228	@ 0xe4
 8016c92:	485c      	ldr	r0, [pc, #368]	@ (8016e04 <__gethex+0x2b8>)
 8016c94:	f001 f864 	bl	8017d60 <__assert_func>
 8016c98:	3101      	adds	r1, #1
 8016c9a:	105b      	asrs	r3, r3, #1
 8016c9c:	e7ef      	b.n	8016c7e <__gethex+0x132>
 8016c9e:	f100 0a14 	add.w	sl, r0, #20
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	4655      	mov	r5, sl
 8016ca6:	469b      	mov	fp, r3
 8016ca8:	45b1      	cmp	r9, r6
 8016caa:	d337      	bcc.n	8016d1c <__gethex+0x1d0>
 8016cac:	f845 bb04 	str.w	fp, [r5], #4
 8016cb0:	eba5 050a 	sub.w	r5, r5, sl
 8016cb4:	10ad      	asrs	r5, r5, #2
 8016cb6:	6125      	str	r5, [r4, #16]
 8016cb8:	4658      	mov	r0, fp
 8016cba:	f000 fbcb 	bl	8017454 <__hi0bits>
 8016cbe:	016d      	lsls	r5, r5, #5
 8016cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8016cc4:	1a2d      	subs	r5, r5, r0
 8016cc6:	42b5      	cmp	r5, r6
 8016cc8:	dd54      	ble.n	8016d74 <__gethex+0x228>
 8016cca:	1bad      	subs	r5, r5, r6
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f000 ff5c 	bl	8017b8c <__any_on>
 8016cd4:	4681      	mov	r9, r0
 8016cd6:	b178      	cbz	r0, 8016cf8 <__gethex+0x1ac>
 8016cd8:	1e6b      	subs	r3, r5, #1
 8016cda:	1159      	asrs	r1, r3, #5
 8016cdc:	f003 021f 	and.w	r2, r3, #31
 8016ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016ce4:	f04f 0901 	mov.w	r9, #1
 8016ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8016cec:	420a      	tst	r2, r1
 8016cee:	d003      	beq.n	8016cf8 <__gethex+0x1ac>
 8016cf0:	454b      	cmp	r3, r9
 8016cf2:	dc36      	bgt.n	8016d62 <__gethex+0x216>
 8016cf4:	f04f 0902 	mov.w	r9, #2
 8016cf8:	4629      	mov	r1, r5
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f7ff febe 	bl	8016a7c <rshift>
 8016d00:	442f      	add	r7, r5
 8016d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016d06:	42bb      	cmp	r3, r7
 8016d08:	da42      	bge.n	8016d90 <__gethex+0x244>
 8016d0a:	9801      	ldr	r0, [sp, #4]
 8016d0c:	4621      	mov	r1, r4
 8016d0e:	f000 faef 	bl	80172f0 <_Bfree>
 8016d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016d14:	2300      	movs	r3, #0
 8016d16:	6013      	str	r3, [r2, #0]
 8016d18:	25a3      	movs	r5, #163	@ 0xa3
 8016d1a:	e793      	b.n	8016c44 <__gethex+0xf8>
 8016d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8016d22:	d012      	beq.n	8016d4a <__gethex+0x1fe>
 8016d24:	2b20      	cmp	r3, #32
 8016d26:	d104      	bne.n	8016d32 <__gethex+0x1e6>
 8016d28:	f845 bb04 	str.w	fp, [r5], #4
 8016d2c:	f04f 0b00 	mov.w	fp, #0
 8016d30:	465b      	mov	r3, fp
 8016d32:	7830      	ldrb	r0, [r6, #0]
 8016d34:	9303      	str	r3, [sp, #12]
 8016d36:	f7ff fef3 	bl	8016b20 <__hexdig_fun>
 8016d3a:	9b03      	ldr	r3, [sp, #12]
 8016d3c:	f000 000f 	and.w	r0, r0, #15
 8016d40:	4098      	lsls	r0, r3
 8016d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8016d46:	3304      	adds	r3, #4
 8016d48:	e7ae      	b.n	8016ca8 <__gethex+0x15c>
 8016d4a:	45b1      	cmp	r9, r6
 8016d4c:	d8ea      	bhi.n	8016d24 <__gethex+0x1d8>
 8016d4e:	492b      	ldr	r1, [pc, #172]	@ (8016dfc <__gethex+0x2b0>)
 8016d50:	9303      	str	r3, [sp, #12]
 8016d52:	2201      	movs	r2, #1
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7ff fdab 	bl	80168b0 <strncmp>
 8016d5a:	9b03      	ldr	r3, [sp, #12]
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d1e1      	bne.n	8016d24 <__gethex+0x1d8>
 8016d60:	e7a2      	b.n	8016ca8 <__gethex+0x15c>
 8016d62:	1ea9      	subs	r1, r5, #2
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 ff11 	bl	8017b8c <__any_on>
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	d0c2      	beq.n	8016cf4 <__gethex+0x1a8>
 8016d6e:	f04f 0903 	mov.w	r9, #3
 8016d72:	e7c1      	b.n	8016cf8 <__gethex+0x1ac>
 8016d74:	da09      	bge.n	8016d8a <__gethex+0x23e>
 8016d76:	1b75      	subs	r5, r6, r5
 8016d78:	4621      	mov	r1, r4
 8016d7a:	9801      	ldr	r0, [sp, #4]
 8016d7c:	462a      	mov	r2, r5
 8016d7e:	f000 fccf 	bl	8017720 <__lshift>
 8016d82:	1b7f      	subs	r7, r7, r5
 8016d84:	4604      	mov	r4, r0
 8016d86:	f100 0a14 	add.w	sl, r0, #20
 8016d8a:	f04f 0900 	mov.w	r9, #0
 8016d8e:	e7b8      	b.n	8016d02 <__gethex+0x1b6>
 8016d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d94:	42bd      	cmp	r5, r7
 8016d96:	dd6f      	ble.n	8016e78 <__gethex+0x32c>
 8016d98:	1bed      	subs	r5, r5, r7
 8016d9a:	42ae      	cmp	r6, r5
 8016d9c:	dc34      	bgt.n	8016e08 <__gethex+0x2bc>
 8016d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016da2:	2b02      	cmp	r3, #2
 8016da4:	d022      	beq.n	8016dec <__gethex+0x2a0>
 8016da6:	2b03      	cmp	r3, #3
 8016da8:	d024      	beq.n	8016df4 <__gethex+0x2a8>
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d115      	bne.n	8016dda <__gethex+0x28e>
 8016dae:	42ae      	cmp	r6, r5
 8016db0:	d113      	bne.n	8016dda <__gethex+0x28e>
 8016db2:	2e01      	cmp	r6, #1
 8016db4:	d10b      	bne.n	8016dce <__gethex+0x282>
 8016db6:	9a02      	ldr	r2, [sp, #8]
 8016db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016dbc:	6013      	str	r3, [r2, #0]
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	6123      	str	r3, [r4, #16]
 8016dc2:	f8ca 3000 	str.w	r3, [sl]
 8016dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dc8:	2562      	movs	r5, #98	@ 0x62
 8016dca:	601c      	str	r4, [r3, #0]
 8016dcc:	e73a      	b.n	8016c44 <__gethex+0xf8>
 8016dce:	1e71      	subs	r1, r6, #1
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 fedb 	bl	8017b8c <__any_on>
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d1ed      	bne.n	8016db6 <__gethex+0x26a>
 8016dda:	9801      	ldr	r0, [sp, #4]
 8016ddc:	4621      	mov	r1, r4
 8016dde:	f000 fa87 	bl	80172f0 <_Bfree>
 8016de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016de4:	2300      	movs	r3, #0
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	2550      	movs	r5, #80	@ 0x50
 8016dea:	e72b      	b.n	8016c44 <__gethex+0xf8>
 8016dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d1f3      	bne.n	8016dda <__gethex+0x28e>
 8016df2:	e7e0      	b.n	8016db6 <__gethex+0x26a>
 8016df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1dd      	bne.n	8016db6 <__gethex+0x26a>
 8016dfa:	e7ee      	b.n	8016dda <__gethex+0x28e>
 8016dfc:	08018a14 	.word	0x08018a14
 8016e00:	08018b81 	.word	0x08018b81
 8016e04:	08018b92 	.word	0x08018b92
 8016e08:	1e6f      	subs	r7, r5, #1
 8016e0a:	f1b9 0f00 	cmp.w	r9, #0
 8016e0e:	d130      	bne.n	8016e72 <__gethex+0x326>
 8016e10:	b127      	cbz	r7, 8016e1c <__gethex+0x2d0>
 8016e12:	4639      	mov	r1, r7
 8016e14:	4620      	mov	r0, r4
 8016e16:	f000 feb9 	bl	8017b8c <__any_on>
 8016e1a:	4681      	mov	r9, r0
 8016e1c:	117a      	asrs	r2, r7, #5
 8016e1e:	2301      	movs	r3, #1
 8016e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016e24:	f007 071f 	and.w	r7, r7, #31
 8016e28:	40bb      	lsls	r3, r7
 8016e2a:	4213      	tst	r3, r2
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bf18      	it	ne
 8016e32:	f049 0902 	orrne.w	r9, r9, #2
 8016e36:	f7ff fe21 	bl	8016a7c <rshift>
 8016e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016e3e:	1b76      	subs	r6, r6, r5
 8016e40:	2502      	movs	r5, #2
 8016e42:	f1b9 0f00 	cmp.w	r9, #0
 8016e46:	d047      	beq.n	8016ed8 <__gethex+0x38c>
 8016e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e4c:	2b02      	cmp	r3, #2
 8016e4e:	d015      	beq.n	8016e7c <__gethex+0x330>
 8016e50:	2b03      	cmp	r3, #3
 8016e52:	d017      	beq.n	8016e84 <__gethex+0x338>
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	d109      	bne.n	8016e6c <__gethex+0x320>
 8016e58:	f019 0f02 	tst.w	r9, #2
 8016e5c:	d006      	beq.n	8016e6c <__gethex+0x320>
 8016e5e:	f8da 3000 	ldr.w	r3, [sl]
 8016e62:	ea49 0903 	orr.w	r9, r9, r3
 8016e66:	f019 0f01 	tst.w	r9, #1
 8016e6a:	d10e      	bne.n	8016e8a <__gethex+0x33e>
 8016e6c:	f045 0510 	orr.w	r5, r5, #16
 8016e70:	e032      	b.n	8016ed8 <__gethex+0x38c>
 8016e72:	f04f 0901 	mov.w	r9, #1
 8016e76:	e7d1      	b.n	8016e1c <__gethex+0x2d0>
 8016e78:	2501      	movs	r5, #1
 8016e7a:	e7e2      	b.n	8016e42 <__gethex+0x2f6>
 8016e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e7e:	f1c3 0301 	rsb	r3, r3, #1
 8016e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d0f0      	beq.n	8016e6c <__gethex+0x320>
 8016e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016e8e:	f104 0314 	add.w	r3, r4, #20
 8016e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016e9a:	f04f 0c00 	mov.w	ip, #0
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016ea8:	d01b      	beq.n	8016ee2 <__gethex+0x396>
 8016eaa:	3201      	adds	r2, #1
 8016eac:	6002      	str	r2, [r0, #0]
 8016eae:	2d02      	cmp	r5, #2
 8016eb0:	f104 0314 	add.w	r3, r4, #20
 8016eb4:	d13c      	bne.n	8016f30 <__gethex+0x3e4>
 8016eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8016eba:	3a01      	subs	r2, #1
 8016ebc:	42b2      	cmp	r2, r6
 8016ebe:	d109      	bne.n	8016ed4 <__gethex+0x388>
 8016ec0:	1171      	asrs	r1, r6, #5
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ec8:	f006 061f 	and.w	r6, r6, #31
 8016ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8016ed0:	421e      	tst	r6, r3
 8016ed2:	d13a      	bne.n	8016f4a <__gethex+0x3fe>
 8016ed4:	f045 0520 	orr.w	r5, r5, #32
 8016ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016eda:	601c      	str	r4, [r3, #0]
 8016edc:	9b02      	ldr	r3, [sp, #8]
 8016ede:	601f      	str	r7, [r3, #0]
 8016ee0:	e6b0      	b.n	8016c44 <__gethex+0xf8>
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8016ee8:	d8d9      	bhi.n	8016e9e <__gethex+0x352>
 8016eea:	68a3      	ldr	r3, [r4, #8]
 8016eec:	459b      	cmp	fp, r3
 8016eee:	db17      	blt.n	8016f20 <__gethex+0x3d4>
 8016ef0:	6861      	ldr	r1, [r4, #4]
 8016ef2:	9801      	ldr	r0, [sp, #4]
 8016ef4:	3101      	adds	r1, #1
 8016ef6:	f000 f9bb 	bl	8017270 <_Balloc>
 8016efa:	4681      	mov	r9, r0
 8016efc:	b918      	cbnz	r0, 8016f06 <__gethex+0x3ba>
 8016efe:	4b1a      	ldr	r3, [pc, #104]	@ (8016f68 <__gethex+0x41c>)
 8016f00:	4602      	mov	r2, r0
 8016f02:	2184      	movs	r1, #132	@ 0x84
 8016f04:	e6c5      	b.n	8016c92 <__gethex+0x146>
 8016f06:	6922      	ldr	r2, [r4, #16]
 8016f08:	3202      	adds	r2, #2
 8016f0a:	f104 010c 	add.w	r1, r4, #12
 8016f0e:	0092      	lsls	r2, r2, #2
 8016f10:	300c      	adds	r0, #12
 8016f12:	f7ff fd52 	bl	80169ba <memcpy>
 8016f16:	4621      	mov	r1, r4
 8016f18:	9801      	ldr	r0, [sp, #4]
 8016f1a:	f000 f9e9 	bl	80172f0 <_Bfree>
 8016f1e:	464c      	mov	r4, r9
 8016f20:	6923      	ldr	r3, [r4, #16]
 8016f22:	1c5a      	adds	r2, r3, #1
 8016f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016f28:	6122      	str	r2, [r4, #16]
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	615a      	str	r2, [r3, #20]
 8016f2e:	e7be      	b.n	8016eae <__gethex+0x362>
 8016f30:	6922      	ldr	r2, [r4, #16]
 8016f32:	455a      	cmp	r2, fp
 8016f34:	dd0b      	ble.n	8016f4e <__gethex+0x402>
 8016f36:	2101      	movs	r1, #1
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f7ff fd9f 	bl	8016a7c <rshift>
 8016f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f42:	3701      	adds	r7, #1
 8016f44:	42bb      	cmp	r3, r7
 8016f46:	f6ff aee0 	blt.w	8016d0a <__gethex+0x1be>
 8016f4a:	2501      	movs	r5, #1
 8016f4c:	e7c2      	b.n	8016ed4 <__gethex+0x388>
 8016f4e:	f016 061f 	ands.w	r6, r6, #31
 8016f52:	d0fa      	beq.n	8016f4a <__gethex+0x3fe>
 8016f54:	4453      	add	r3, sl
 8016f56:	f1c6 0620 	rsb	r6, r6, #32
 8016f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016f5e:	f000 fa79 	bl	8017454 <__hi0bits>
 8016f62:	42b0      	cmp	r0, r6
 8016f64:	dbe7      	blt.n	8016f36 <__gethex+0x3ea>
 8016f66:	e7f0      	b.n	8016f4a <__gethex+0x3fe>
 8016f68:	08018b81 	.word	0x08018b81

08016f6c <L_shift>:
 8016f6c:	f1c2 0208 	rsb	r2, r2, #8
 8016f70:	0092      	lsls	r2, r2, #2
 8016f72:	b570      	push	{r4, r5, r6, lr}
 8016f74:	f1c2 0620 	rsb	r6, r2, #32
 8016f78:	6843      	ldr	r3, [r0, #4]
 8016f7a:	6804      	ldr	r4, [r0, #0]
 8016f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8016f80:	432c      	orrs	r4, r5
 8016f82:	40d3      	lsrs	r3, r2
 8016f84:	6004      	str	r4, [r0, #0]
 8016f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8016f8a:	4288      	cmp	r0, r1
 8016f8c:	d3f4      	bcc.n	8016f78 <L_shift+0xc>
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}

08016f90 <__match>:
 8016f90:	b530      	push	{r4, r5, lr}
 8016f92:	6803      	ldr	r3, [r0, #0]
 8016f94:	3301      	adds	r3, #1
 8016f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f9a:	b914      	cbnz	r4, 8016fa2 <__match+0x12>
 8016f9c:	6003      	str	r3, [r0, #0]
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	bd30      	pop	{r4, r5, pc}
 8016fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016faa:	2d19      	cmp	r5, #25
 8016fac:	bf98      	it	ls
 8016fae:	3220      	addls	r2, #32
 8016fb0:	42a2      	cmp	r2, r4
 8016fb2:	d0f0      	beq.n	8016f96 <__match+0x6>
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	e7f3      	b.n	8016fa0 <__match+0x10>

08016fb8 <__hexnan>:
 8016fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fbc:	680b      	ldr	r3, [r1, #0]
 8016fbe:	6801      	ldr	r1, [r0, #0]
 8016fc0:	115e      	asrs	r6, r3, #5
 8016fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016fc6:	f013 031f 	ands.w	r3, r3, #31
 8016fca:	b087      	sub	sp, #28
 8016fcc:	bf18      	it	ne
 8016fce:	3604      	addne	r6, #4
 8016fd0:	2500      	movs	r5, #0
 8016fd2:	1f37      	subs	r7, r6, #4
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	4690      	mov	r8, r2
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8016fde:	46b9      	mov	r9, r7
 8016fe0:	463c      	mov	r4, r7
 8016fe2:	9502      	str	r5, [sp, #8]
 8016fe4:	46ab      	mov	fp, r5
 8016fe6:	784a      	ldrb	r2, [r1, #1]
 8016fe8:	1c4b      	adds	r3, r1, #1
 8016fea:	9303      	str	r3, [sp, #12]
 8016fec:	b342      	cbz	r2, 8017040 <__hexnan+0x88>
 8016fee:	4610      	mov	r0, r2
 8016ff0:	9105      	str	r1, [sp, #20]
 8016ff2:	9204      	str	r2, [sp, #16]
 8016ff4:	f7ff fd94 	bl	8016b20 <__hexdig_fun>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d151      	bne.n	80170a0 <__hexnan+0xe8>
 8016ffc:	9a04      	ldr	r2, [sp, #16]
 8016ffe:	9905      	ldr	r1, [sp, #20]
 8017000:	2a20      	cmp	r2, #32
 8017002:	d818      	bhi.n	8017036 <__hexnan+0x7e>
 8017004:	9b02      	ldr	r3, [sp, #8]
 8017006:	459b      	cmp	fp, r3
 8017008:	dd13      	ble.n	8017032 <__hexnan+0x7a>
 801700a:	454c      	cmp	r4, r9
 801700c:	d206      	bcs.n	801701c <__hexnan+0x64>
 801700e:	2d07      	cmp	r5, #7
 8017010:	dc04      	bgt.n	801701c <__hexnan+0x64>
 8017012:	462a      	mov	r2, r5
 8017014:	4649      	mov	r1, r9
 8017016:	4620      	mov	r0, r4
 8017018:	f7ff ffa8 	bl	8016f6c <L_shift>
 801701c:	4544      	cmp	r4, r8
 801701e:	d952      	bls.n	80170c6 <__hexnan+0x10e>
 8017020:	2300      	movs	r3, #0
 8017022:	f1a4 0904 	sub.w	r9, r4, #4
 8017026:	f844 3c04 	str.w	r3, [r4, #-4]
 801702a:	f8cd b008 	str.w	fp, [sp, #8]
 801702e:	464c      	mov	r4, r9
 8017030:	461d      	mov	r5, r3
 8017032:	9903      	ldr	r1, [sp, #12]
 8017034:	e7d7      	b.n	8016fe6 <__hexnan+0x2e>
 8017036:	2a29      	cmp	r2, #41	@ 0x29
 8017038:	d157      	bne.n	80170ea <__hexnan+0x132>
 801703a:	3102      	adds	r1, #2
 801703c:	f8ca 1000 	str.w	r1, [sl]
 8017040:	f1bb 0f00 	cmp.w	fp, #0
 8017044:	d051      	beq.n	80170ea <__hexnan+0x132>
 8017046:	454c      	cmp	r4, r9
 8017048:	d206      	bcs.n	8017058 <__hexnan+0xa0>
 801704a:	2d07      	cmp	r5, #7
 801704c:	dc04      	bgt.n	8017058 <__hexnan+0xa0>
 801704e:	462a      	mov	r2, r5
 8017050:	4649      	mov	r1, r9
 8017052:	4620      	mov	r0, r4
 8017054:	f7ff ff8a 	bl	8016f6c <L_shift>
 8017058:	4544      	cmp	r4, r8
 801705a:	d936      	bls.n	80170ca <__hexnan+0x112>
 801705c:	f1a8 0204 	sub.w	r2, r8, #4
 8017060:	4623      	mov	r3, r4
 8017062:	f853 1b04 	ldr.w	r1, [r3], #4
 8017066:	f842 1f04 	str.w	r1, [r2, #4]!
 801706a:	429f      	cmp	r7, r3
 801706c:	d2f9      	bcs.n	8017062 <__hexnan+0xaa>
 801706e:	1b3b      	subs	r3, r7, r4
 8017070:	f023 0303 	bic.w	r3, r3, #3
 8017074:	3304      	adds	r3, #4
 8017076:	3401      	adds	r4, #1
 8017078:	3e03      	subs	r6, #3
 801707a:	42b4      	cmp	r4, r6
 801707c:	bf88      	it	hi
 801707e:	2304      	movhi	r3, #4
 8017080:	4443      	add	r3, r8
 8017082:	2200      	movs	r2, #0
 8017084:	f843 2b04 	str.w	r2, [r3], #4
 8017088:	429f      	cmp	r7, r3
 801708a:	d2fb      	bcs.n	8017084 <__hexnan+0xcc>
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	b91b      	cbnz	r3, 8017098 <__hexnan+0xe0>
 8017090:	4547      	cmp	r7, r8
 8017092:	d128      	bne.n	80170e6 <__hexnan+0x12e>
 8017094:	2301      	movs	r3, #1
 8017096:	603b      	str	r3, [r7, #0]
 8017098:	2005      	movs	r0, #5
 801709a:	b007      	add	sp, #28
 801709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a0:	3501      	adds	r5, #1
 80170a2:	2d08      	cmp	r5, #8
 80170a4:	f10b 0b01 	add.w	fp, fp, #1
 80170a8:	dd06      	ble.n	80170b8 <__hexnan+0x100>
 80170aa:	4544      	cmp	r4, r8
 80170ac:	d9c1      	bls.n	8017032 <__hexnan+0x7a>
 80170ae:	2300      	movs	r3, #0
 80170b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80170b4:	2501      	movs	r5, #1
 80170b6:	3c04      	subs	r4, #4
 80170b8:	6822      	ldr	r2, [r4, #0]
 80170ba:	f000 000f 	and.w	r0, r0, #15
 80170be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80170c2:	6020      	str	r0, [r4, #0]
 80170c4:	e7b5      	b.n	8017032 <__hexnan+0x7a>
 80170c6:	2508      	movs	r5, #8
 80170c8:	e7b3      	b.n	8017032 <__hexnan+0x7a>
 80170ca:	9b01      	ldr	r3, [sp, #4]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d0dd      	beq.n	801708c <__hexnan+0xd4>
 80170d0:	f1c3 0320 	rsb	r3, r3, #32
 80170d4:	f04f 32ff 	mov.w	r2, #4294967295
 80170d8:	40da      	lsrs	r2, r3
 80170da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80170de:	4013      	ands	r3, r2
 80170e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80170e4:	e7d2      	b.n	801708c <__hexnan+0xd4>
 80170e6:	3f04      	subs	r7, #4
 80170e8:	e7d0      	b.n	801708c <__hexnan+0xd4>
 80170ea:	2004      	movs	r0, #4
 80170ec:	e7d5      	b.n	801709a <__hexnan+0xe2>
	...

080170f0 <sbrk_aligned>:
 80170f0:	b570      	push	{r4, r5, r6, lr}
 80170f2:	4e0f      	ldr	r6, [pc, #60]	@ (8017130 <sbrk_aligned+0x40>)
 80170f4:	460c      	mov	r4, r1
 80170f6:	6831      	ldr	r1, [r6, #0]
 80170f8:	4605      	mov	r5, r0
 80170fa:	b911      	cbnz	r1, 8017102 <sbrk_aligned+0x12>
 80170fc:	f000 fe20 	bl	8017d40 <_sbrk_r>
 8017100:	6030      	str	r0, [r6, #0]
 8017102:	4621      	mov	r1, r4
 8017104:	4628      	mov	r0, r5
 8017106:	f000 fe1b 	bl	8017d40 <_sbrk_r>
 801710a:	1c43      	adds	r3, r0, #1
 801710c:	d103      	bne.n	8017116 <sbrk_aligned+0x26>
 801710e:	f04f 34ff 	mov.w	r4, #4294967295
 8017112:	4620      	mov	r0, r4
 8017114:	bd70      	pop	{r4, r5, r6, pc}
 8017116:	1cc4      	adds	r4, r0, #3
 8017118:	f024 0403 	bic.w	r4, r4, #3
 801711c:	42a0      	cmp	r0, r4
 801711e:	d0f8      	beq.n	8017112 <sbrk_aligned+0x22>
 8017120:	1a21      	subs	r1, r4, r0
 8017122:	4628      	mov	r0, r5
 8017124:	f000 fe0c 	bl	8017d40 <_sbrk_r>
 8017128:	3001      	adds	r0, #1
 801712a:	d1f2      	bne.n	8017112 <sbrk_aligned+0x22>
 801712c:	e7ef      	b.n	801710e <sbrk_aligned+0x1e>
 801712e:	bf00      	nop
 8017130:	240067d4 	.word	0x240067d4

08017134 <_malloc_r>:
 8017134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017138:	1ccd      	adds	r5, r1, #3
 801713a:	f025 0503 	bic.w	r5, r5, #3
 801713e:	3508      	adds	r5, #8
 8017140:	2d0c      	cmp	r5, #12
 8017142:	bf38      	it	cc
 8017144:	250c      	movcc	r5, #12
 8017146:	2d00      	cmp	r5, #0
 8017148:	4606      	mov	r6, r0
 801714a:	db01      	blt.n	8017150 <_malloc_r+0x1c>
 801714c:	42a9      	cmp	r1, r5
 801714e:	d904      	bls.n	801715a <_malloc_r+0x26>
 8017150:	230c      	movs	r3, #12
 8017152:	6033      	str	r3, [r6, #0]
 8017154:	2000      	movs	r0, #0
 8017156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801715a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017230 <_malloc_r+0xfc>
 801715e:	f000 f87b 	bl	8017258 <__malloc_lock>
 8017162:	f8d8 3000 	ldr.w	r3, [r8]
 8017166:	461c      	mov	r4, r3
 8017168:	bb44      	cbnz	r4, 80171bc <_malloc_r+0x88>
 801716a:	4629      	mov	r1, r5
 801716c:	4630      	mov	r0, r6
 801716e:	f7ff ffbf 	bl	80170f0 <sbrk_aligned>
 8017172:	1c43      	adds	r3, r0, #1
 8017174:	4604      	mov	r4, r0
 8017176:	d158      	bne.n	801722a <_malloc_r+0xf6>
 8017178:	f8d8 4000 	ldr.w	r4, [r8]
 801717c:	4627      	mov	r7, r4
 801717e:	2f00      	cmp	r7, #0
 8017180:	d143      	bne.n	801720a <_malloc_r+0xd6>
 8017182:	2c00      	cmp	r4, #0
 8017184:	d04b      	beq.n	801721e <_malloc_r+0xea>
 8017186:	6823      	ldr	r3, [r4, #0]
 8017188:	4639      	mov	r1, r7
 801718a:	4630      	mov	r0, r6
 801718c:	eb04 0903 	add.w	r9, r4, r3
 8017190:	f000 fdd6 	bl	8017d40 <_sbrk_r>
 8017194:	4581      	cmp	r9, r0
 8017196:	d142      	bne.n	801721e <_malloc_r+0xea>
 8017198:	6821      	ldr	r1, [r4, #0]
 801719a:	1a6d      	subs	r5, r5, r1
 801719c:	4629      	mov	r1, r5
 801719e:	4630      	mov	r0, r6
 80171a0:	f7ff ffa6 	bl	80170f0 <sbrk_aligned>
 80171a4:	3001      	adds	r0, #1
 80171a6:	d03a      	beq.n	801721e <_malloc_r+0xea>
 80171a8:	6823      	ldr	r3, [r4, #0]
 80171aa:	442b      	add	r3, r5
 80171ac:	6023      	str	r3, [r4, #0]
 80171ae:	f8d8 3000 	ldr.w	r3, [r8]
 80171b2:	685a      	ldr	r2, [r3, #4]
 80171b4:	bb62      	cbnz	r2, 8017210 <_malloc_r+0xdc>
 80171b6:	f8c8 7000 	str.w	r7, [r8]
 80171ba:	e00f      	b.n	80171dc <_malloc_r+0xa8>
 80171bc:	6822      	ldr	r2, [r4, #0]
 80171be:	1b52      	subs	r2, r2, r5
 80171c0:	d420      	bmi.n	8017204 <_malloc_r+0xd0>
 80171c2:	2a0b      	cmp	r2, #11
 80171c4:	d917      	bls.n	80171f6 <_malloc_r+0xc2>
 80171c6:	1961      	adds	r1, r4, r5
 80171c8:	42a3      	cmp	r3, r4
 80171ca:	6025      	str	r5, [r4, #0]
 80171cc:	bf18      	it	ne
 80171ce:	6059      	strne	r1, [r3, #4]
 80171d0:	6863      	ldr	r3, [r4, #4]
 80171d2:	bf08      	it	eq
 80171d4:	f8c8 1000 	streq.w	r1, [r8]
 80171d8:	5162      	str	r2, [r4, r5]
 80171da:	604b      	str	r3, [r1, #4]
 80171dc:	4630      	mov	r0, r6
 80171de:	f000 f841 	bl	8017264 <__malloc_unlock>
 80171e2:	f104 000b 	add.w	r0, r4, #11
 80171e6:	1d23      	adds	r3, r4, #4
 80171e8:	f020 0007 	bic.w	r0, r0, #7
 80171ec:	1ac2      	subs	r2, r0, r3
 80171ee:	bf1c      	itt	ne
 80171f0:	1a1b      	subne	r3, r3, r0
 80171f2:	50a3      	strne	r3, [r4, r2]
 80171f4:	e7af      	b.n	8017156 <_malloc_r+0x22>
 80171f6:	6862      	ldr	r2, [r4, #4]
 80171f8:	42a3      	cmp	r3, r4
 80171fa:	bf0c      	ite	eq
 80171fc:	f8c8 2000 	streq.w	r2, [r8]
 8017200:	605a      	strne	r2, [r3, #4]
 8017202:	e7eb      	b.n	80171dc <_malloc_r+0xa8>
 8017204:	4623      	mov	r3, r4
 8017206:	6864      	ldr	r4, [r4, #4]
 8017208:	e7ae      	b.n	8017168 <_malloc_r+0x34>
 801720a:	463c      	mov	r4, r7
 801720c:	687f      	ldr	r7, [r7, #4]
 801720e:	e7b6      	b.n	801717e <_malloc_r+0x4a>
 8017210:	461a      	mov	r2, r3
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	42a3      	cmp	r3, r4
 8017216:	d1fb      	bne.n	8017210 <_malloc_r+0xdc>
 8017218:	2300      	movs	r3, #0
 801721a:	6053      	str	r3, [r2, #4]
 801721c:	e7de      	b.n	80171dc <_malloc_r+0xa8>
 801721e:	230c      	movs	r3, #12
 8017220:	6033      	str	r3, [r6, #0]
 8017222:	4630      	mov	r0, r6
 8017224:	f000 f81e 	bl	8017264 <__malloc_unlock>
 8017228:	e794      	b.n	8017154 <_malloc_r+0x20>
 801722a:	6005      	str	r5, [r0, #0]
 801722c:	e7d6      	b.n	80171dc <_malloc_r+0xa8>
 801722e:	bf00      	nop
 8017230:	240067d8 	.word	0x240067d8

08017234 <__ascii_mbtowc>:
 8017234:	b082      	sub	sp, #8
 8017236:	b901      	cbnz	r1, 801723a <__ascii_mbtowc+0x6>
 8017238:	a901      	add	r1, sp, #4
 801723a:	b142      	cbz	r2, 801724e <__ascii_mbtowc+0x1a>
 801723c:	b14b      	cbz	r3, 8017252 <__ascii_mbtowc+0x1e>
 801723e:	7813      	ldrb	r3, [r2, #0]
 8017240:	600b      	str	r3, [r1, #0]
 8017242:	7812      	ldrb	r2, [r2, #0]
 8017244:	1e10      	subs	r0, r2, #0
 8017246:	bf18      	it	ne
 8017248:	2001      	movne	r0, #1
 801724a:	b002      	add	sp, #8
 801724c:	4770      	bx	lr
 801724e:	4610      	mov	r0, r2
 8017250:	e7fb      	b.n	801724a <__ascii_mbtowc+0x16>
 8017252:	f06f 0001 	mvn.w	r0, #1
 8017256:	e7f8      	b.n	801724a <__ascii_mbtowc+0x16>

08017258 <__malloc_lock>:
 8017258:	4801      	ldr	r0, [pc, #4]	@ (8017260 <__malloc_lock+0x8>)
 801725a:	f7ff bbac 	b.w	80169b6 <__retarget_lock_acquire_recursive>
 801725e:	bf00      	nop
 8017260:	240067d0 	.word	0x240067d0

08017264 <__malloc_unlock>:
 8017264:	4801      	ldr	r0, [pc, #4]	@ (801726c <__malloc_unlock+0x8>)
 8017266:	f7ff bba7 	b.w	80169b8 <__retarget_lock_release_recursive>
 801726a:	bf00      	nop
 801726c:	240067d0 	.word	0x240067d0

08017270 <_Balloc>:
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	69c6      	ldr	r6, [r0, #28]
 8017274:	4604      	mov	r4, r0
 8017276:	460d      	mov	r5, r1
 8017278:	b976      	cbnz	r6, 8017298 <_Balloc+0x28>
 801727a:	2010      	movs	r0, #16
 801727c:	f000 fda2 	bl	8017dc4 <malloc>
 8017280:	4602      	mov	r2, r0
 8017282:	61e0      	str	r0, [r4, #28]
 8017284:	b920      	cbnz	r0, 8017290 <_Balloc+0x20>
 8017286:	4b18      	ldr	r3, [pc, #96]	@ (80172e8 <_Balloc+0x78>)
 8017288:	4818      	ldr	r0, [pc, #96]	@ (80172ec <_Balloc+0x7c>)
 801728a:	216b      	movs	r1, #107	@ 0x6b
 801728c:	f000 fd68 	bl	8017d60 <__assert_func>
 8017290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017294:	6006      	str	r6, [r0, #0]
 8017296:	60c6      	str	r6, [r0, #12]
 8017298:	69e6      	ldr	r6, [r4, #28]
 801729a:	68f3      	ldr	r3, [r6, #12]
 801729c:	b183      	cbz	r3, 80172c0 <_Balloc+0x50>
 801729e:	69e3      	ldr	r3, [r4, #28]
 80172a0:	68db      	ldr	r3, [r3, #12]
 80172a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172a6:	b9b8      	cbnz	r0, 80172d8 <_Balloc+0x68>
 80172a8:	2101      	movs	r1, #1
 80172aa:	fa01 f605 	lsl.w	r6, r1, r5
 80172ae:	1d72      	adds	r2, r6, #5
 80172b0:	0092      	lsls	r2, r2, #2
 80172b2:	4620      	mov	r0, r4
 80172b4:	f000 fd72 	bl	8017d9c <_calloc_r>
 80172b8:	b160      	cbz	r0, 80172d4 <_Balloc+0x64>
 80172ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80172be:	e00e      	b.n	80172de <_Balloc+0x6e>
 80172c0:	2221      	movs	r2, #33	@ 0x21
 80172c2:	2104      	movs	r1, #4
 80172c4:	4620      	mov	r0, r4
 80172c6:	f000 fd69 	bl	8017d9c <_calloc_r>
 80172ca:	69e3      	ldr	r3, [r4, #28]
 80172cc:	60f0      	str	r0, [r6, #12]
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1e4      	bne.n	801729e <_Balloc+0x2e>
 80172d4:	2000      	movs	r0, #0
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	6802      	ldr	r2, [r0, #0]
 80172da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172de:	2300      	movs	r3, #0
 80172e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172e4:	e7f7      	b.n	80172d6 <_Balloc+0x66>
 80172e6:	bf00      	nop
 80172e8:	08018bf2 	.word	0x08018bf2
 80172ec:	08018c09 	.word	0x08018c09

080172f0 <_Bfree>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	69c6      	ldr	r6, [r0, #28]
 80172f4:	4605      	mov	r5, r0
 80172f6:	460c      	mov	r4, r1
 80172f8:	b976      	cbnz	r6, 8017318 <_Bfree+0x28>
 80172fa:	2010      	movs	r0, #16
 80172fc:	f000 fd62 	bl	8017dc4 <malloc>
 8017300:	4602      	mov	r2, r0
 8017302:	61e8      	str	r0, [r5, #28]
 8017304:	b920      	cbnz	r0, 8017310 <_Bfree+0x20>
 8017306:	4b09      	ldr	r3, [pc, #36]	@ (801732c <_Bfree+0x3c>)
 8017308:	4809      	ldr	r0, [pc, #36]	@ (8017330 <_Bfree+0x40>)
 801730a:	218f      	movs	r1, #143	@ 0x8f
 801730c:	f000 fd28 	bl	8017d60 <__assert_func>
 8017310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017314:	6006      	str	r6, [r0, #0]
 8017316:	60c6      	str	r6, [r0, #12]
 8017318:	b13c      	cbz	r4, 801732a <_Bfree+0x3a>
 801731a:	69eb      	ldr	r3, [r5, #28]
 801731c:	6862      	ldr	r2, [r4, #4]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017324:	6021      	str	r1, [r4, #0]
 8017326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801732a:	bd70      	pop	{r4, r5, r6, pc}
 801732c:	08018bf2 	.word	0x08018bf2
 8017330:	08018c09 	.word	0x08018c09

08017334 <__multadd>:
 8017334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017338:	690d      	ldr	r5, [r1, #16]
 801733a:	4607      	mov	r7, r0
 801733c:	460c      	mov	r4, r1
 801733e:	461e      	mov	r6, r3
 8017340:	f101 0c14 	add.w	ip, r1, #20
 8017344:	2000      	movs	r0, #0
 8017346:	f8dc 3000 	ldr.w	r3, [ip]
 801734a:	b299      	uxth	r1, r3
 801734c:	fb02 6101 	mla	r1, r2, r1, r6
 8017350:	0c1e      	lsrs	r6, r3, #16
 8017352:	0c0b      	lsrs	r3, r1, #16
 8017354:	fb02 3306 	mla	r3, r2, r6, r3
 8017358:	b289      	uxth	r1, r1
 801735a:	3001      	adds	r0, #1
 801735c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017360:	4285      	cmp	r5, r0
 8017362:	f84c 1b04 	str.w	r1, [ip], #4
 8017366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801736a:	dcec      	bgt.n	8017346 <__multadd+0x12>
 801736c:	b30e      	cbz	r6, 80173b2 <__multadd+0x7e>
 801736e:	68a3      	ldr	r3, [r4, #8]
 8017370:	42ab      	cmp	r3, r5
 8017372:	dc19      	bgt.n	80173a8 <__multadd+0x74>
 8017374:	6861      	ldr	r1, [r4, #4]
 8017376:	4638      	mov	r0, r7
 8017378:	3101      	adds	r1, #1
 801737a:	f7ff ff79 	bl	8017270 <_Balloc>
 801737e:	4680      	mov	r8, r0
 8017380:	b928      	cbnz	r0, 801738e <__multadd+0x5a>
 8017382:	4602      	mov	r2, r0
 8017384:	4b0c      	ldr	r3, [pc, #48]	@ (80173b8 <__multadd+0x84>)
 8017386:	480d      	ldr	r0, [pc, #52]	@ (80173bc <__multadd+0x88>)
 8017388:	21ba      	movs	r1, #186	@ 0xba
 801738a:	f000 fce9 	bl	8017d60 <__assert_func>
 801738e:	6922      	ldr	r2, [r4, #16]
 8017390:	3202      	adds	r2, #2
 8017392:	f104 010c 	add.w	r1, r4, #12
 8017396:	0092      	lsls	r2, r2, #2
 8017398:	300c      	adds	r0, #12
 801739a:	f7ff fb0e 	bl	80169ba <memcpy>
 801739e:	4621      	mov	r1, r4
 80173a0:	4638      	mov	r0, r7
 80173a2:	f7ff ffa5 	bl	80172f0 <_Bfree>
 80173a6:	4644      	mov	r4, r8
 80173a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173ac:	3501      	adds	r5, #1
 80173ae:	615e      	str	r6, [r3, #20]
 80173b0:	6125      	str	r5, [r4, #16]
 80173b2:	4620      	mov	r0, r4
 80173b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b8:	08018b81 	.word	0x08018b81
 80173bc:	08018c09 	.word	0x08018c09

080173c0 <__s2b>:
 80173c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173c4:	460c      	mov	r4, r1
 80173c6:	4615      	mov	r5, r2
 80173c8:	461f      	mov	r7, r3
 80173ca:	2209      	movs	r2, #9
 80173cc:	3308      	adds	r3, #8
 80173ce:	4606      	mov	r6, r0
 80173d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80173d4:	2100      	movs	r1, #0
 80173d6:	2201      	movs	r2, #1
 80173d8:	429a      	cmp	r2, r3
 80173da:	db09      	blt.n	80173f0 <__s2b+0x30>
 80173dc:	4630      	mov	r0, r6
 80173de:	f7ff ff47 	bl	8017270 <_Balloc>
 80173e2:	b940      	cbnz	r0, 80173f6 <__s2b+0x36>
 80173e4:	4602      	mov	r2, r0
 80173e6:	4b19      	ldr	r3, [pc, #100]	@ (801744c <__s2b+0x8c>)
 80173e8:	4819      	ldr	r0, [pc, #100]	@ (8017450 <__s2b+0x90>)
 80173ea:	21d3      	movs	r1, #211	@ 0xd3
 80173ec:	f000 fcb8 	bl	8017d60 <__assert_func>
 80173f0:	0052      	lsls	r2, r2, #1
 80173f2:	3101      	adds	r1, #1
 80173f4:	e7f0      	b.n	80173d8 <__s2b+0x18>
 80173f6:	9b08      	ldr	r3, [sp, #32]
 80173f8:	6143      	str	r3, [r0, #20]
 80173fa:	2d09      	cmp	r5, #9
 80173fc:	f04f 0301 	mov.w	r3, #1
 8017400:	6103      	str	r3, [r0, #16]
 8017402:	dd16      	ble.n	8017432 <__s2b+0x72>
 8017404:	f104 0909 	add.w	r9, r4, #9
 8017408:	46c8      	mov	r8, r9
 801740a:	442c      	add	r4, r5
 801740c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017410:	4601      	mov	r1, r0
 8017412:	3b30      	subs	r3, #48	@ 0x30
 8017414:	220a      	movs	r2, #10
 8017416:	4630      	mov	r0, r6
 8017418:	f7ff ff8c 	bl	8017334 <__multadd>
 801741c:	45a0      	cmp	r8, r4
 801741e:	d1f5      	bne.n	801740c <__s2b+0x4c>
 8017420:	f1a5 0408 	sub.w	r4, r5, #8
 8017424:	444c      	add	r4, r9
 8017426:	1b2d      	subs	r5, r5, r4
 8017428:	1963      	adds	r3, r4, r5
 801742a:	42bb      	cmp	r3, r7
 801742c:	db04      	blt.n	8017438 <__s2b+0x78>
 801742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017432:	340a      	adds	r4, #10
 8017434:	2509      	movs	r5, #9
 8017436:	e7f6      	b.n	8017426 <__s2b+0x66>
 8017438:	f814 3b01 	ldrb.w	r3, [r4], #1
 801743c:	4601      	mov	r1, r0
 801743e:	3b30      	subs	r3, #48	@ 0x30
 8017440:	220a      	movs	r2, #10
 8017442:	4630      	mov	r0, r6
 8017444:	f7ff ff76 	bl	8017334 <__multadd>
 8017448:	e7ee      	b.n	8017428 <__s2b+0x68>
 801744a:	bf00      	nop
 801744c:	08018b81 	.word	0x08018b81
 8017450:	08018c09 	.word	0x08018c09

08017454 <__hi0bits>:
 8017454:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017458:	4603      	mov	r3, r0
 801745a:	bf36      	itet	cc
 801745c:	0403      	lslcc	r3, r0, #16
 801745e:	2000      	movcs	r0, #0
 8017460:	2010      	movcc	r0, #16
 8017462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017466:	bf3c      	itt	cc
 8017468:	021b      	lslcc	r3, r3, #8
 801746a:	3008      	addcc	r0, #8
 801746c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017470:	bf3c      	itt	cc
 8017472:	011b      	lslcc	r3, r3, #4
 8017474:	3004      	addcc	r0, #4
 8017476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801747a:	bf3c      	itt	cc
 801747c:	009b      	lslcc	r3, r3, #2
 801747e:	3002      	addcc	r0, #2
 8017480:	2b00      	cmp	r3, #0
 8017482:	db05      	blt.n	8017490 <__hi0bits+0x3c>
 8017484:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017488:	f100 0001 	add.w	r0, r0, #1
 801748c:	bf08      	it	eq
 801748e:	2020      	moveq	r0, #32
 8017490:	4770      	bx	lr

08017492 <__lo0bits>:
 8017492:	6803      	ldr	r3, [r0, #0]
 8017494:	4602      	mov	r2, r0
 8017496:	f013 0007 	ands.w	r0, r3, #7
 801749a:	d00b      	beq.n	80174b4 <__lo0bits+0x22>
 801749c:	07d9      	lsls	r1, r3, #31
 801749e:	d421      	bmi.n	80174e4 <__lo0bits+0x52>
 80174a0:	0798      	lsls	r0, r3, #30
 80174a2:	bf49      	itett	mi
 80174a4:	085b      	lsrmi	r3, r3, #1
 80174a6:	089b      	lsrpl	r3, r3, #2
 80174a8:	2001      	movmi	r0, #1
 80174aa:	6013      	strmi	r3, [r2, #0]
 80174ac:	bf5c      	itt	pl
 80174ae:	6013      	strpl	r3, [r2, #0]
 80174b0:	2002      	movpl	r0, #2
 80174b2:	4770      	bx	lr
 80174b4:	b299      	uxth	r1, r3
 80174b6:	b909      	cbnz	r1, 80174bc <__lo0bits+0x2a>
 80174b8:	0c1b      	lsrs	r3, r3, #16
 80174ba:	2010      	movs	r0, #16
 80174bc:	b2d9      	uxtb	r1, r3
 80174be:	b909      	cbnz	r1, 80174c4 <__lo0bits+0x32>
 80174c0:	3008      	adds	r0, #8
 80174c2:	0a1b      	lsrs	r3, r3, #8
 80174c4:	0719      	lsls	r1, r3, #28
 80174c6:	bf04      	itt	eq
 80174c8:	091b      	lsreq	r3, r3, #4
 80174ca:	3004      	addeq	r0, #4
 80174cc:	0799      	lsls	r1, r3, #30
 80174ce:	bf04      	itt	eq
 80174d0:	089b      	lsreq	r3, r3, #2
 80174d2:	3002      	addeq	r0, #2
 80174d4:	07d9      	lsls	r1, r3, #31
 80174d6:	d403      	bmi.n	80174e0 <__lo0bits+0x4e>
 80174d8:	085b      	lsrs	r3, r3, #1
 80174da:	f100 0001 	add.w	r0, r0, #1
 80174de:	d003      	beq.n	80174e8 <__lo0bits+0x56>
 80174e0:	6013      	str	r3, [r2, #0]
 80174e2:	4770      	bx	lr
 80174e4:	2000      	movs	r0, #0
 80174e6:	4770      	bx	lr
 80174e8:	2020      	movs	r0, #32
 80174ea:	4770      	bx	lr

080174ec <__i2b>:
 80174ec:	b510      	push	{r4, lr}
 80174ee:	460c      	mov	r4, r1
 80174f0:	2101      	movs	r1, #1
 80174f2:	f7ff febd 	bl	8017270 <_Balloc>
 80174f6:	4602      	mov	r2, r0
 80174f8:	b928      	cbnz	r0, 8017506 <__i2b+0x1a>
 80174fa:	4b05      	ldr	r3, [pc, #20]	@ (8017510 <__i2b+0x24>)
 80174fc:	4805      	ldr	r0, [pc, #20]	@ (8017514 <__i2b+0x28>)
 80174fe:	f240 1145 	movw	r1, #325	@ 0x145
 8017502:	f000 fc2d 	bl	8017d60 <__assert_func>
 8017506:	2301      	movs	r3, #1
 8017508:	6144      	str	r4, [r0, #20]
 801750a:	6103      	str	r3, [r0, #16]
 801750c:	bd10      	pop	{r4, pc}
 801750e:	bf00      	nop
 8017510:	08018b81 	.word	0x08018b81
 8017514:	08018c09 	.word	0x08018c09

08017518 <__multiply>:
 8017518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801751c:	4614      	mov	r4, r2
 801751e:	690a      	ldr	r2, [r1, #16]
 8017520:	6923      	ldr	r3, [r4, #16]
 8017522:	429a      	cmp	r2, r3
 8017524:	bfa8      	it	ge
 8017526:	4623      	movge	r3, r4
 8017528:	460f      	mov	r7, r1
 801752a:	bfa4      	itt	ge
 801752c:	460c      	movge	r4, r1
 801752e:	461f      	movge	r7, r3
 8017530:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017534:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017538:	68a3      	ldr	r3, [r4, #8]
 801753a:	6861      	ldr	r1, [r4, #4]
 801753c:	eb0a 0609 	add.w	r6, sl, r9
 8017540:	42b3      	cmp	r3, r6
 8017542:	b085      	sub	sp, #20
 8017544:	bfb8      	it	lt
 8017546:	3101      	addlt	r1, #1
 8017548:	f7ff fe92 	bl	8017270 <_Balloc>
 801754c:	b930      	cbnz	r0, 801755c <__multiply+0x44>
 801754e:	4602      	mov	r2, r0
 8017550:	4b44      	ldr	r3, [pc, #272]	@ (8017664 <__multiply+0x14c>)
 8017552:	4845      	ldr	r0, [pc, #276]	@ (8017668 <__multiply+0x150>)
 8017554:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017558:	f000 fc02 	bl	8017d60 <__assert_func>
 801755c:	f100 0514 	add.w	r5, r0, #20
 8017560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017564:	462b      	mov	r3, r5
 8017566:	2200      	movs	r2, #0
 8017568:	4543      	cmp	r3, r8
 801756a:	d321      	bcc.n	80175b0 <__multiply+0x98>
 801756c:	f107 0114 	add.w	r1, r7, #20
 8017570:	f104 0214 	add.w	r2, r4, #20
 8017574:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017578:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801757c:	9302      	str	r3, [sp, #8]
 801757e:	1b13      	subs	r3, r2, r4
 8017580:	3b15      	subs	r3, #21
 8017582:	f023 0303 	bic.w	r3, r3, #3
 8017586:	3304      	adds	r3, #4
 8017588:	f104 0715 	add.w	r7, r4, #21
 801758c:	42ba      	cmp	r2, r7
 801758e:	bf38      	it	cc
 8017590:	2304      	movcc	r3, #4
 8017592:	9301      	str	r3, [sp, #4]
 8017594:	9b02      	ldr	r3, [sp, #8]
 8017596:	9103      	str	r1, [sp, #12]
 8017598:	428b      	cmp	r3, r1
 801759a:	d80c      	bhi.n	80175b6 <__multiply+0x9e>
 801759c:	2e00      	cmp	r6, #0
 801759e:	dd03      	ble.n	80175a8 <__multiply+0x90>
 80175a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d05b      	beq.n	8017660 <__multiply+0x148>
 80175a8:	6106      	str	r6, [r0, #16]
 80175aa:	b005      	add	sp, #20
 80175ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b0:	f843 2b04 	str.w	r2, [r3], #4
 80175b4:	e7d8      	b.n	8017568 <__multiply+0x50>
 80175b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80175ba:	f1ba 0f00 	cmp.w	sl, #0
 80175be:	d024      	beq.n	801760a <__multiply+0xf2>
 80175c0:	f104 0e14 	add.w	lr, r4, #20
 80175c4:	46a9      	mov	r9, r5
 80175c6:	f04f 0c00 	mov.w	ip, #0
 80175ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80175ce:	f8d9 3000 	ldr.w	r3, [r9]
 80175d2:	fa1f fb87 	uxth.w	fp, r7
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80175dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80175e0:	f8d9 7000 	ldr.w	r7, [r9]
 80175e4:	4463      	add	r3, ip
 80175e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80175ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80175ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80175f8:	4572      	cmp	r2, lr
 80175fa:	f849 3b04 	str.w	r3, [r9], #4
 80175fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017602:	d8e2      	bhi.n	80175ca <__multiply+0xb2>
 8017604:	9b01      	ldr	r3, [sp, #4]
 8017606:	f845 c003 	str.w	ip, [r5, r3]
 801760a:	9b03      	ldr	r3, [sp, #12]
 801760c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017610:	3104      	adds	r1, #4
 8017612:	f1b9 0f00 	cmp.w	r9, #0
 8017616:	d021      	beq.n	801765c <__multiply+0x144>
 8017618:	682b      	ldr	r3, [r5, #0]
 801761a:	f104 0c14 	add.w	ip, r4, #20
 801761e:	46ae      	mov	lr, r5
 8017620:	f04f 0a00 	mov.w	sl, #0
 8017624:	f8bc b000 	ldrh.w	fp, [ip]
 8017628:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801762c:	fb09 770b 	mla	r7, r9, fp, r7
 8017630:	4457      	add	r7, sl
 8017632:	b29b      	uxth	r3, r3
 8017634:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017638:	f84e 3b04 	str.w	r3, [lr], #4
 801763c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017640:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017644:	f8be 3000 	ldrh.w	r3, [lr]
 8017648:	fb09 330a 	mla	r3, r9, sl, r3
 801764c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017650:	4562      	cmp	r2, ip
 8017652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017656:	d8e5      	bhi.n	8017624 <__multiply+0x10c>
 8017658:	9f01      	ldr	r7, [sp, #4]
 801765a:	51eb      	str	r3, [r5, r7]
 801765c:	3504      	adds	r5, #4
 801765e:	e799      	b.n	8017594 <__multiply+0x7c>
 8017660:	3e01      	subs	r6, #1
 8017662:	e79b      	b.n	801759c <__multiply+0x84>
 8017664:	08018b81 	.word	0x08018b81
 8017668:	08018c09 	.word	0x08018c09

0801766c <__pow5mult>:
 801766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017670:	4615      	mov	r5, r2
 8017672:	f012 0203 	ands.w	r2, r2, #3
 8017676:	4607      	mov	r7, r0
 8017678:	460e      	mov	r6, r1
 801767a:	d007      	beq.n	801768c <__pow5mult+0x20>
 801767c:	4c25      	ldr	r4, [pc, #148]	@ (8017714 <__pow5mult+0xa8>)
 801767e:	3a01      	subs	r2, #1
 8017680:	2300      	movs	r3, #0
 8017682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017686:	f7ff fe55 	bl	8017334 <__multadd>
 801768a:	4606      	mov	r6, r0
 801768c:	10ad      	asrs	r5, r5, #2
 801768e:	d03d      	beq.n	801770c <__pow5mult+0xa0>
 8017690:	69fc      	ldr	r4, [r7, #28]
 8017692:	b97c      	cbnz	r4, 80176b4 <__pow5mult+0x48>
 8017694:	2010      	movs	r0, #16
 8017696:	f000 fb95 	bl	8017dc4 <malloc>
 801769a:	4602      	mov	r2, r0
 801769c:	61f8      	str	r0, [r7, #28]
 801769e:	b928      	cbnz	r0, 80176ac <__pow5mult+0x40>
 80176a0:	4b1d      	ldr	r3, [pc, #116]	@ (8017718 <__pow5mult+0xac>)
 80176a2:	481e      	ldr	r0, [pc, #120]	@ (801771c <__pow5mult+0xb0>)
 80176a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80176a8:	f000 fb5a 	bl	8017d60 <__assert_func>
 80176ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80176b0:	6004      	str	r4, [r0, #0]
 80176b2:	60c4      	str	r4, [r0, #12]
 80176b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80176b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80176bc:	b94c      	cbnz	r4, 80176d2 <__pow5mult+0x66>
 80176be:	f240 2171 	movw	r1, #625	@ 0x271
 80176c2:	4638      	mov	r0, r7
 80176c4:	f7ff ff12 	bl	80174ec <__i2b>
 80176c8:	2300      	movs	r3, #0
 80176ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80176ce:	4604      	mov	r4, r0
 80176d0:	6003      	str	r3, [r0, #0]
 80176d2:	f04f 0900 	mov.w	r9, #0
 80176d6:	07eb      	lsls	r3, r5, #31
 80176d8:	d50a      	bpl.n	80176f0 <__pow5mult+0x84>
 80176da:	4631      	mov	r1, r6
 80176dc:	4622      	mov	r2, r4
 80176de:	4638      	mov	r0, r7
 80176e0:	f7ff ff1a 	bl	8017518 <__multiply>
 80176e4:	4631      	mov	r1, r6
 80176e6:	4680      	mov	r8, r0
 80176e8:	4638      	mov	r0, r7
 80176ea:	f7ff fe01 	bl	80172f0 <_Bfree>
 80176ee:	4646      	mov	r6, r8
 80176f0:	106d      	asrs	r5, r5, #1
 80176f2:	d00b      	beq.n	801770c <__pow5mult+0xa0>
 80176f4:	6820      	ldr	r0, [r4, #0]
 80176f6:	b938      	cbnz	r0, 8017708 <__pow5mult+0x9c>
 80176f8:	4622      	mov	r2, r4
 80176fa:	4621      	mov	r1, r4
 80176fc:	4638      	mov	r0, r7
 80176fe:	f7ff ff0b 	bl	8017518 <__multiply>
 8017702:	6020      	str	r0, [r4, #0]
 8017704:	f8c0 9000 	str.w	r9, [r0]
 8017708:	4604      	mov	r4, r0
 801770a:	e7e4      	b.n	80176d6 <__pow5mult+0x6a>
 801770c:	4630      	mov	r0, r6
 801770e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017712:	bf00      	nop
 8017714:	08018c64 	.word	0x08018c64
 8017718:	08018bf2 	.word	0x08018bf2
 801771c:	08018c09 	.word	0x08018c09

08017720 <__lshift>:
 8017720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017724:	460c      	mov	r4, r1
 8017726:	6849      	ldr	r1, [r1, #4]
 8017728:	6923      	ldr	r3, [r4, #16]
 801772a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801772e:	68a3      	ldr	r3, [r4, #8]
 8017730:	4607      	mov	r7, r0
 8017732:	4691      	mov	r9, r2
 8017734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017738:	f108 0601 	add.w	r6, r8, #1
 801773c:	42b3      	cmp	r3, r6
 801773e:	db0b      	blt.n	8017758 <__lshift+0x38>
 8017740:	4638      	mov	r0, r7
 8017742:	f7ff fd95 	bl	8017270 <_Balloc>
 8017746:	4605      	mov	r5, r0
 8017748:	b948      	cbnz	r0, 801775e <__lshift+0x3e>
 801774a:	4602      	mov	r2, r0
 801774c:	4b28      	ldr	r3, [pc, #160]	@ (80177f0 <__lshift+0xd0>)
 801774e:	4829      	ldr	r0, [pc, #164]	@ (80177f4 <__lshift+0xd4>)
 8017750:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017754:	f000 fb04 	bl	8017d60 <__assert_func>
 8017758:	3101      	adds	r1, #1
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	e7ee      	b.n	801773c <__lshift+0x1c>
 801775e:	2300      	movs	r3, #0
 8017760:	f100 0114 	add.w	r1, r0, #20
 8017764:	f100 0210 	add.w	r2, r0, #16
 8017768:	4618      	mov	r0, r3
 801776a:	4553      	cmp	r3, sl
 801776c:	db33      	blt.n	80177d6 <__lshift+0xb6>
 801776e:	6920      	ldr	r0, [r4, #16]
 8017770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017774:	f104 0314 	add.w	r3, r4, #20
 8017778:	f019 091f 	ands.w	r9, r9, #31
 801777c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017784:	d02b      	beq.n	80177de <__lshift+0xbe>
 8017786:	f1c9 0e20 	rsb	lr, r9, #32
 801778a:	468a      	mov	sl, r1
 801778c:	2200      	movs	r2, #0
 801778e:	6818      	ldr	r0, [r3, #0]
 8017790:	fa00 f009 	lsl.w	r0, r0, r9
 8017794:	4310      	orrs	r0, r2
 8017796:	f84a 0b04 	str.w	r0, [sl], #4
 801779a:	f853 2b04 	ldr.w	r2, [r3], #4
 801779e:	459c      	cmp	ip, r3
 80177a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80177a4:	d8f3      	bhi.n	801778e <__lshift+0x6e>
 80177a6:	ebac 0304 	sub.w	r3, ip, r4
 80177aa:	3b15      	subs	r3, #21
 80177ac:	f023 0303 	bic.w	r3, r3, #3
 80177b0:	3304      	adds	r3, #4
 80177b2:	f104 0015 	add.w	r0, r4, #21
 80177b6:	4584      	cmp	ip, r0
 80177b8:	bf38      	it	cc
 80177ba:	2304      	movcc	r3, #4
 80177bc:	50ca      	str	r2, [r1, r3]
 80177be:	b10a      	cbz	r2, 80177c4 <__lshift+0xa4>
 80177c0:	f108 0602 	add.w	r6, r8, #2
 80177c4:	3e01      	subs	r6, #1
 80177c6:	4638      	mov	r0, r7
 80177c8:	612e      	str	r6, [r5, #16]
 80177ca:	4621      	mov	r1, r4
 80177cc:	f7ff fd90 	bl	80172f0 <_Bfree>
 80177d0:	4628      	mov	r0, r5
 80177d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80177da:	3301      	adds	r3, #1
 80177dc:	e7c5      	b.n	801776a <__lshift+0x4a>
 80177de:	3904      	subs	r1, #4
 80177e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80177e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80177e8:	459c      	cmp	ip, r3
 80177ea:	d8f9      	bhi.n	80177e0 <__lshift+0xc0>
 80177ec:	e7ea      	b.n	80177c4 <__lshift+0xa4>
 80177ee:	bf00      	nop
 80177f0:	08018b81 	.word	0x08018b81
 80177f4:	08018c09 	.word	0x08018c09

080177f8 <__mcmp>:
 80177f8:	690a      	ldr	r2, [r1, #16]
 80177fa:	4603      	mov	r3, r0
 80177fc:	6900      	ldr	r0, [r0, #16]
 80177fe:	1a80      	subs	r0, r0, r2
 8017800:	b530      	push	{r4, r5, lr}
 8017802:	d10e      	bne.n	8017822 <__mcmp+0x2a>
 8017804:	3314      	adds	r3, #20
 8017806:	3114      	adds	r1, #20
 8017808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801780c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017818:	4295      	cmp	r5, r2
 801781a:	d003      	beq.n	8017824 <__mcmp+0x2c>
 801781c:	d205      	bcs.n	801782a <__mcmp+0x32>
 801781e:	f04f 30ff 	mov.w	r0, #4294967295
 8017822:	bd30      	pop	{r4, r5, pc}
 8017824:	42a3      	cmp	r3, r4
 8017826:	d3f3      	bcc.n	8017810 <__mcmp+0x18>
 8017828:	e7fb      	b.n	8017822 <__mcmp+0x2a>
 801782a:	2001      	movs	r0, #1
 801782c:	e7f9      	b.n	8017822 <__mcmp+0x2a>
	...

08017830 <__mdiff>:
 8017830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	4689      	mov	r9, r1
 8017836:	4606      	mov	r6, r0
 8017838:	4611      	mov	r1, r2
 801783a:	4648      	mov	r0, r9
 801783c:	4614      	mov	r4, r2
 801783e:	f7ff ffdb 	bl	80177f8 <__mcmp>
 8017842:	1e05      	subs	r5, r0, #0
 8017844:	d112      	bne.n	801786c <__mdiff+0x3c>
 8017846:	4629      	mov	r1, r5
 8017848:	4630      	mov	r0, r6
 801784a:	f7ff fd11 	bl	8017270 <_Balloc>
 801784e:	4602      	mov	r2, r0
 8017850:	b928      	cbnz	r0, 801785e <__mdiff+0x2e>
 8017852:	4b3f      	ldr	r3, [pc, #252]	@ (8017950 <__mdiff+0x120>)
 8017854:	f240 2137 	movw	r1, #567	@ 0x237
 8017858:	483e      	ldr	r0, [pc, #248]	@ (8017954 <__mdiff+0x124>)
 801785a:	f000 fa81 	bl	8017d60 <__assert_func>
 801785e:	2301      	movs	r3, #1
 8017860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017864:	4610      	mov	r0, r2
 8017866:	b003      	add	sp, #12
 8017868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786c:	bfbc      	itt	lt
 801786e:	464b      	movlt	r3, r9
 8017870:	46a1      	movlt	r9, r4
 8017872:	4630      	mov	r0, r6
 8017874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017878:	bfba      	itte	lt
 801787a:	461c      	movlt	r4, r3
 801787c:	2501      	movlt	r5, #1
 801787e:	2500      	movge	r5, #0
 8017880:	f7ff fcf6 	bl	8017270 <_Balloc>
 8017884:	4602      	mov	r2, r0
 8017886:	b918      	cbnz	r0, 8017890 <__mdiff+0x60>
 8017888:	4b31      	ldr	r3, [pc, #196]	@ (8017950 <__mdiff+0x120>)
 801788a:	f240 2145 	movw	r1, #581	@ 0x245
 801788e:	e7e3      	b.n	8017858 <__mdiff+0x28>
 8017890:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017894:	6926      	ldr	r6, [r4, #16]
 8017896:	60c5      	str	r5, [r0, #12]
 8017898:	f109 0310 	add.w	r3, r9, #16
 801789c:	f109 0514 	add.w	r5, r9, #20
 80178a0:	f104 0e14 	add.w	lr, r4, #20
 80178a4:	f100 0b14 	add.w	fp, r0, #20
 80178a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80178ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80178b0:	9301      	str	r3, [sp, #4]
 80178b2:	46d9      	mov	r9, fp
 80178b4:	f04f 0c00 	mov.w	ip, #0
 80178b8:	9b01      	ldr	r3, [sp, #4]
 80178ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80178be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80178c2:	9301      	str	r3, [sp, #4]
 80178c4:	fa1f f38a 	uxth.w	r3, sl
 80178c8:	4619      	mov	r1, r3
 80178ca:	b283      	uxth	r3, r0
 80178cc:	1acb      	subs	r3, r1, r3
 80178ce:	0c00      	lsrs	r0, r0, #16
 80178d0:	4463      	add	r3, ip
 80178d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80178d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80178da:	b29b      	uxth	r3, r3
 80178dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80178e0:	4576      	cmp	r6, lr
 80178e2:	f849 3b04 	str.w	r3, [r9], #4
 80178e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80178ea:	d8e5      	bhi.n	80178b8 <__mdiff+0x88>
 80178ec:	1b33      	subs	r3, r6, r4
 80178ee:	3b15      	subs	r3, #21
 80178f0:	f023 0303 	bic.w	r3, r3, #3
 80178f4:	3415      	adds	r4, #21
 80178f6:	3304      	adds	r3, #4
 80178f8:	42a6      	cmp	r6, r4
 80178fa:	bf38      	it	cc
 80178fc:	2304      	movcc	r3, #4
 80178fe:	441d      	add	r5, r3
 8017900:	445b      	add	r3, fp
 8017902:	461e      	mov	r6, r3
 8017904:	462c      	mov	r4, r5
 8017906:	4544      	cmp	r4, r8
 8017908:	d30e      	bcc.n	8017928 <__mdiff+0xf8>
 801790a:	f108 0103 	add.w	r1, r8, #3
 801790e:	1b49      	subs	r1, r1, r5
 8017910:	f021 0103 	bic.w	r1, r1, #3
 8017914:	3d03      	subs	r5, #3
 8017916:	45a8      	cmp	r8, r5
 8017918:	bf38      	it	cc
 801791a:	2100      	movcc	r1, #0
 801791c:	440b      	add	r3, r1
 801791e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017922:	b191      	cbz	r1, 801794a <__mdiff+0x11a>
 8017924:	6117      	str	r7, [r2, #16]
 8017926:	e79d      	b.n	8017864 <__mdiff+0x34>
 8017928:	f854 1b04 	ldr.w	r1, [r4], #4
 801792c:	46e6      	mov	lr, ip
 801792e:	0c08      	lsrs	r0, r1, #16
 8017930:	fa1c fc81 	uxtah	ip, ip, r1
 8017934:	4471      	add	r1, lr
 8017936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801793a:	b289      	uxth	r1, r1
 801793c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017940:	f846 1b04 	str.w	r1, [r6], #4
 8017944:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017948:	e7dd      	b.n	8017906 <__mdiff+0xd6>
 801794a:	3f01      	subs	r7, #1
 801794c:	e7e7      	b.n	801791e <__mdiff+0xee>
 801794e:	bf00      	nop
 8017950:	08018b81 	.word	0x08018b81
 8017954:	08018c09 	.word	0x08018c09

08017958 <__ulp>:
 8017958:	b082      	sub	sp, #8
 801795a:	ed8d 0b00 	vstr	d0, [sp]
 801795e:	9a01      	ldr	r2, [sp, #4]
 8017960:	4b0f      	ldr	r3, [pc, #60]	@ (80179a0 <__ulp+0x48>)
 8017962:	4013      	ands	r3, r2
 8017964:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017968:	2b00      	cmp	r3, #0
 801796a:	dc08      	bgt.n	801797e <__ulp+0x26>
 801796c:	425b      	negs	r3, r3
 801796e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017972:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017976:	da04      	bge.n	8017982 <__ulp+0x2a>
 8017978:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801797c:	4113      	asrs	r3, r2
 801797e:	2200      	movs	r2, #0
 8017980:	e008      	b.n	8017994 <__ulp+0x3c>
 8017982:	f1a2 0314 	sub.w	r3, r2, #20
 8017986:	2b1e      	cmp	r3, #30
 8017988:	bfda      	itte	le
 801798a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801798e:	40da      	lsrle	r2, r3
 8017990:	2201      	movgt	r2, #1
 8017992:	2300      	movs	r3, #0
 8017994:	4619      	mov	r1, r3
 8017996:	4610      	mov	r0, r2
 8017998:	ec41 0b10 	vmov	d0, r0, r1
 801799c:	b002      	add	sp, #8
 801799e:	4770      	bx	lr
 80179a0:	7ff00000 	.word	0x7ff00000

080179a4 <__b2d>:
 80179a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a8:	6906      	ldr	r6, [r0, #16]
 80179aa:	f100 0814 	add.w	r8, r0, #20
 80179ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80179b2:	1f37      	subs	r7, r6, #4
 80179b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80179b8:	4610      	mov	r0, r2
 80179ba:	f7ff fd4b 	bl	8017454 <__hi0bits>
 80179be:	f1c0 0320 	rsb	r3, r0, #32
 80179c2:	280a      	cmp	r0, #10
 80179c4:	600b      	str	r3, [r1, #0]
 80179c6:	491b      	ldr	r1, [pc, #108]	@ (8017a34 <__b2d+0x90>)
 80179c8:	dc15      	bgt.n	80179f6 <__b2d+0x52>
 80179ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80179ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80179d2:	45b8      	cmp	r8, r7
 80179d4:	ea43 0501 	orr.w	r5, r3, r1
 80179d8:	bf34      	ite	cc
 80179da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179de:	2300      	movcs	r3, #0
 80179e0:	3015      	adds	r0, #21
 80179e2:	fa02 f000 	lsl.w	r0, r2, r0
 80179e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80179ea:	4303      	orrs	r3, r0
 80179ec:	461c      	mov	r4, r3
 80179ee:	ec45 4b10 	vmov	d0, r4, r5
 80179f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f6:	45b8      	cmp	r8, r7
 80179f8:	bf3a      	itte	cc
 80179fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8017a02:	2300      	movcs	r3, #0
 8017a04:	380b      	subs	r0, #11
 8017a06:	d012      	beq.n	8017a2e <__b2d+0x8a>
 8017a08:	f1c0 0120 	rsb	r1, r0, #32
 8017a0c:	fa23 f401 	lsr.w	r4, r3, r1
 8017a10:	4082      	lsls	r2, r0
 8017a12:	4322      	orrs	r2, r4
 8017a14:	4547      	cmp	r7, r8
 8017a16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017a1a:	bf8c      	ite	hi
 8017a1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017a20:	2200      	movls	r2, #0
 8017a22:	4083      	lsls	r3, r0
 8017a24:	40ca      	lsrs	r2, r1
 8017a26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	e7de      	b.n	80179ec <__b2d+0x48>
 8017a2e:	ea42 0501 	orr.w	r5, r2, r1
 8017a32:	e7db      	b.n	80179ec <__b2d+0x48>
 8017a34:	3ff00000 	.word	0x3ff00000

08017a38 <__d2b>:
 8017a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	460f      	mov	r7, r1
 8017a3e:	2101      	movs	r1, #1
 8017a40:	ec59 8b10 	vmov	r8, r9, d0
 8017a44:	4616      	mov	r6, r2
 8017a46:	f7ff fc13 	bl	8017270 <_Balloc>
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	b930      	cbnz	r0, 8017a5c <__d2b+0x24>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	4b23      	ldr	r3, [pc, #140]	@ (8017ae0 <__d2b+0xa8>)
 8017a52:	4824      	ldr	r0, [pc, #144]	@ (8017ae4 <__d2b+0xac>)
 8017a54:	f240 310f 	movw	r1, #783	@ 0x30f
 8017a58:	f000 f982 	bl	8017d60 <__assert_func>
 8017a5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a64:	b10d      	cbz	r5, 8017a6a <__d2b+0x32>
 8017a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017a6a:	9301      	str	r3, [sp, #4]
 8017a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8017a70:	d023      	beq.n	8017aba <__d2b+0x82>
 8017a72:	4668      	mov	r0, sp
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	f7ff fd0c 	bl	8017492 <__lo0bits>
 8017a7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017a7e:	b1d0      	cbz	r0, 8017ab6 <__d2b+0x7e>
 8017a80:	f1c0 0320 	rsb	r3, r0, #32
 8017a84:	fa02 f303 	lsl.w	r3, r2, r3
 8017a88:	430b      	orrs	r3, r1
 8017a8a:	40c2      	lsrs	r2, r0
 8017a8c:	6163      	str	r3, [r4, #20]
 8017a8e:	9201      	str	r2, [sp, #4]
 8017a90:	9b01      	ldr	r3, [sp, #4]
 8017a92:	61a3      	str	r3, [r4, #24]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	bf0c      	ite	eq
 8017a98:	2201      	moveq	r2, #1
 8017a9a:	2202      	movne	r2, #2
 8017a9c:	6122      	str	r2, [r4, #16]
 8017a9e:	b1a5      	cbz	r5, 8017aca <__d2b+0x92>
 8017aa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017aa4:	4405      	add	r5, r0
 8017aa6:	603d      	str	r5, [r7, #0]
 8017aa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017aac:	6030      	str	r0, [r6, #0]
 8017aae:	4620      	mov	r0, r4
 8017ab0:	b003      	add	sp, #12
 8017ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab6:	6161      	str	r1, [r4, #20]
 8017ab8:	e7ea      	b.n	8017a90 <__d2b+0x58>
 8017aba:	a801      	add	r0, sp, #4
 8017abc:	f7ff fce9 	bl	8017492 <__lo0bits>
 8017ac0:	9b01      	ldr	r3, [sp, #4]
 8017ac2:	6163      	str	r3, [r4, #20]
 8017ac4:	3020      	adds	r0, #32
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	e7e8      	b.n	8017a9c <__d2b+0x64>
 8017aca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017ace:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017ad2:	6038      	str	r0, [r7, #0]
 8017ad4:	6918      	ldr	r0, [r3, #16]
 8017ad6:	f7ff fcbd 	bl	8017454 <__hi0bits>
 8017ada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017ade:	e7e5      	b.n	8017aac <__d2b+0x74>
 8017ae0:	08018b81 	.word	0x08018b81
 8017ae4:	08018c09 	.word	0x08018c09

08017ae8 <__ratio>:
 8017ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aec:	4688      	mov	r8, r1
 8017aee:	4669      	mov	r1, sp
 8017af0:	4681      	mov	r9, r0
 8017af2:	f7ff ff57 	bl	80179a4 <__b2d>
 8017af6:	a901      	add	r1, sp, #4
 8017af8:	4640      	mov	r0, r8
 8017afa:	ec55 4b10 	vmov	r4, r5, d0
 8017afe:	f7ff ff51 	bl	80179a4 <__b2d>
 8017b02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017b06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017b0a:	1ad2      	subs	r2, r2, r3
 8017b0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017b10:	1a5b      	subs	r3, r3, r1
 8017b12:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017b16:	ec57 6b10 	vmov	r6, r7, d0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	bfd6      	itet	le
 8017b1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017b22:	462a      	movgt	r2, r5
 8017b24:	463a      	movle	r2, r7
 8017b26:	46ab      	mov	fp, r5
 8017b28:	46a2      	mov	sl, r4
 8017b2a:	bfce      	itee	gt
 8017b2c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017b30:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017b34:	ee00 3a90 	vmovle	s1, r3
 8017b38:	ec4b ab17 	vmov	d7, sl, fp
 8017b3c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017b40:	b003      	add	sp, #12
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b46 <__copybits>:
 8017b46:	3901      	subs	r1, #1
 8017b48:	b570      	push	{r4, r5, r6, lr}
 8017b4a:	1149      	asrs	r1, r1, #5
 8017b4c:	6914      	ldr	r4, [r2, #16]
 8017b4e:	3101      	adds	r1, #1
 8017b50:	f102 0314 	add.w	r3, r2, #20
 8017b54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017b58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017b5c:	1f05      	subs	r5, r0, #4
 8017b5e:	42a3      	cmp	r3, r4
 8017b60:	d30c      	bcc.n	8017b7c <__copybits+0x36>
 8017b62:	1aa3      	subs	r3, r4, r2
 8017b64:	3b11      	subs	r3, #17
 8017b66:	f023 0303 	bic.w	r3, r3, #3
 8017b6a:	3211      	adds	r2, #17
 8017b6c:	42a2      	cmp	r2, r4
 8017b6e:	bf88      	it	hi
 8017b70:	2300      	movhi	r3, #0
 8017b72:	4418      	add	r0, r3
 8017b74:	2300      	movs	r3, #0
 8017b76:	4288      	cmp	r0, r1
 8017b78:	d305      	bcc.n	8017b86 <__copybits+0x40>
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017b80:	f845 6f04 	str.w	r6, [r5, #4]!
 8017b84:	e7eb      	b.n	8017b5e <__copybits+0x18>
 8017b86:	f840 3b04 	str.w	r3, [r0], #4
 8017b8a:	e7f4      	b.n	8017b76 <__copybits+0x30>

08017b8c <__any_on>:
 8017b8c:	f100 0214 	add.w	r2, r0, #20
 8017b90:	6900      	ldr	r0, [r0, #16]
 8017b92:	114b      	asrs	r3, r1, #5
 8017b94:	4298      	cmp	r0, r3
 8017b96:	b510      	push	{r4, lr}
 8017b98:	db11      	blt.n	8017bbe <__any_on+0x32>
 8017b9a:	dd0a      	ble.n	8017bb2 <__any_on+0x26>
 8017b9c:	f011 011f 	ands.w	r1, r1, #31
 8017ba0:	d007      	beq.n	8017bb2 <__any_on+0x26>
 8017ba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ba6:	fa24 f001 	lsr.w	r0, r4, r1
 8017baa:	fa00 f101 	lsl.w	r1, r0, r1
 8017bae:	428c      	cmp	r4, r1
 8017bb0:	d10b      	bne.n	8017bca <__any_on+0x3e>
 8017bb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d803      	bhi.n	8017bc2 <__any_on+0x36>
 8017bba:	2000      	movs	r0, #0
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	e7f7      	b.n	8017bb2 <__any_on+0x26>
 8017bc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017bc6:	2900      	cmp	r1, #0
 8017bc8:	d0f5      	beq.n	8017bb6 <__any_on+0x2a>
 8017bca:	2001      	movs	r0, #1
 8017bcc:	e7f6      	b.n	8017bbc <__any_on+0x30>

08017bce <__ascii_wctomb>:
 8017bce:	4603      	mov	r3, r0
 8017bd0:	4608      	mov	r0, r1
 8017bd2:	b141      	cbz	r1, 8017be6 <__ascii_wctomb+0x18>
 8017bd4:	2aff      	cmp	r2, #255	@ 0xff
 8017bd6:	d904      	bls.n	8017be2 <__ascii_wctomb+0x14>
 8017bd8:	228a      	movs	r2, #138	@ 0x8a
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017be0:	4770      	bx	lr
 8017be2:	700a      	strb	r2, [r1, #0]
 8017be4:	2001      	movs	r0, #1
 8017be6:	4770      	bx	lr

08017be8 <__sflush_r>:
 8017be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf0:	0716      	lsls	r6, r2, #28
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	460c      	mov	r4, r1
 8017bf6:	d454      	bmi.n	8017ca2 <__sflush_r+0xba>
 8017bf8:	684b      	ldr	r3, [r1, #4]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	dc02      	bgt.n	8017c04 <__sflush_r+0x1c>
 8017bfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	dd48      	ble.n	8017c96 <__sflush_r+0xae>
 8017c04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c06:	2e00      	cmp	r6, #0
 8017c08:	d045      	beq.n	8017c96 <__sflush_r+0xae>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017c10:	682f      	ldr	r7, [r5, #0]
 8017c12:	6a21      	ldr	r1, [r4, #32]
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	d030      	beq.n	8017c7a <__sflush_r+0x92>
 8017c18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017c1a:	89a3      	ldrh	r3, [r4, #12]
 8017c1c:	0759      	lsls	r1, r3, #29
 8017c1e:	d505      	bpl.n	8017c2c <__sflush_r+0x44>
 8017c20:	6863      	ldr	r3, [r4, #4]
 8017c22:	1ad2      	subs	r2, r2, r3
 8017c24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017c26:	b10b      	cbz	r3, 8017c2c <__sflush_r+0x44>
 8017c28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017c2a:	1ad2      	subs	r2, r2, r3
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c30:	6a21      	ldr	r1, [r4, #32]
 8017c32:	4628      	mov	r0, r5
 8017c34:	47b0      	blx	r6
 8017c36:	1c43      	adds	r3, r0, #1
 8017c38:	89a3      	ldrh	r3, [r4, #12]
 8017c3a:	d106      	bne.n	8017c4a <__sflush_r+0x62>
 8017c3c:	6829      	ldr	r1, [r5, #0]
 8017c3e:	291d      	cmp	r1, #29
 8017c40:	d82b      	bhi.n	8017c9a <__sflush_r+0xb2>
 8017c42:	4a2a      	ldr	r2, [pc, #168]	@ (8017cec <__sflush_r+0x104>)
 8017c44:	410a      	asrs	r2, r1
 8017c46:	07d6      	lsls	r6, r2, #31
 8017c48:	d427      	bmi.n	8017c9a <__sflush_r+0xb2>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	6062      	str	r2, [r4, #4]
 8017c4e:	04d9      	lsls	r1, r3, #19
 8017c50:	6922      	ldr	r2, [r4, #16]
 8017c52:	6022      	str	r2, [r4, #0]
 8017c54:	d504      	bpl.n	8017c60 <__sflush_r+0x78>
 8017c56:	1c42      	adds	r2, r0, #1
 8017c58:	d101      	bne.n	8017c5e <__sflush_r+0x76>
 8017c5a:	682b      	ldr	r3, [r5, #0]
 8017c5c:	b903      	cbnz	r3, 8017c60 <__sflush_r+0x78>
 8017c5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c62:	602f      	str	r7, [r5, #0]
 8017c64:	b1b9      	cbz	r1, 8017c96 <__sflush_r+0xae>
 8017c66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c6a:	4299      	cmp	r1, r3
 8017c6c:	d002      	beq.n	8017c74 <__sflush_r+0x8c>
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f7fe feba 	bl	80169e8 <_free_r>
 8017c74:	2300      	movs	r3, #0
 8017c76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c78:	e00d      	b.n	8017c96 <__sflush_r+0xae>
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	47b0      	blx	r6
 8017c80:	4602      	mov	r2, r0
 8017c82:	1c50      	adds	r0, r2, #1
 8017c84:	d1c9      	bne.n	8017c1a <__sflush_r+0x32>
 8017c86:	682b      	ldr	r3, [r5, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d0c6      	beq.n	8017c1a <__sflush_r+0x32>
 8017c8c:	2b1d      	cmp	r3, #29
 8017c8e:	d001      	beq.n	8017c94 <__sflush_r+0xac>
 8017c90:	2b16      	cmp	r3, #22
 8017c92:	d11e      	bne.n	8017cd2 <__sflush_r+0xea>
 8017c94:	602f      	str	r7, [r5, #0]
 8017c96:	2000      	movs	r0, #0
 8017c98:	e022      	b.n	8017ce0 <__sflush_r+0xf8>
 8017c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c9e:	b21b      	sxth	r3, r3
 8017ca0:	e01b      	b.n	8017cda <__sflush_r+0xf2>
 8017ca2:	690f      	ldr	r7, [r1, #16]
 8017ca4:	2f00      	cmp	r7, #0
 8017ca6:	d0f6      	beq.n	8017c96 <__sflush_r+0xae>
 8017ca8:	0793      	lsls	r3, r2, #30
 8017caa:	680e      	ldr	r6, [r1, #0]
 8017cac:	bf08      	it	eq
 8017cae:	694b      	ldreq	r3, [r1, #20]
 8017cb0:	600f      	str	r7, [r1, #0]
 8017cb2:	bf18      	it	ne
 8017cb4:	2300      	movne	r3, #0
 8017cb6:	eba6 0807 	sub.w	r8, r6, r7
 8017cba:	608b      	str	r3, [r1, #8]
 8017cbc:	f1b8 0f00 	cmp.w	r8, #0
 8017cc0:	dde9      	ble.n	8017c96 <__sflush_r+0xae>
 8017cc2:	6a21      	ldr	r1, [r4, #32]
 8017cc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017cc6:	4643      	mov	r3, r8
 8017cc8:	463a      	mov	r2, r7
 8017cca:	4628      	mov	r0, r5
 8017ccc:	47b0      	blx	r6
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	dc08      	bgt.n	8017ce4 <__sflush_r+0xfc>
 8017cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cda:	81a3      	strh	r3, [r4, #12]
 8017cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ce4:	4407      	add	r7, r0
 8017ce6:	eba8 0800 	sub.w	r8, r8, r0
 8017cea:	e7e7      	b.n	8017cbc <__sflush_r+0xd4>
 8017cec:	dfbffffe 	.word	0xdfbffffe

08017cf0 <_fflush_r>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	690b      	ldr	r3, [r1, #16]
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	460c      	mov	r4, r1
 8017cf8:	b913      	cbnz	r3, 8017d00 <_fflush_r+0x10>
 8017cfa:	2500      	movs	r5, #0
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	bd38      	pop	{r3, r4, r5, pc}
 8017d00:	b118      	cbz	r0, 8017d0a <_fflush_r+0x1a>
 8017d02:	6a03      	ldr	r3, [r0, #32]
 8017d04:	b90b      	cbnz	r3, 8017d0a <_fflush_r+0x1a>
 8017d06:	f7fe fd45 	bl	8016794 <__sinit>
 8017d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d0f3      	beq.n	8017cfa <_fflush_r+0xa>
 8017d12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017d14:	07d0      	lsls	r0, r2, #31
 8017d16:	d404      	bmi.n	8017d22 <_fflush_r+0x32>
 8017d18:	0599      	lsls	r1, r3, #22
 8017d1a:	d402      	bmi.n	8017d22 <_fflush_r+0x32>
 8017d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d1e:	f7fe fe4a 	bl	80169b6 <__retarget_lock_acquire_recursive>
 8017d22:	4628      	mov	r0, r5
 8017d24:	4621      	mov	r1, r4
 8017d26:	f7ff ff5f 	bl	8017be8 <__sflush_r>
 8017d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017d2c:	07da      	lsls	r2, r3, #31
 8017d2e:	4605      	mov	r5, r0
 8017d30:	d4e4      	bmi.n	8017cfc <_fflush_r+0xc>
 8017d32:	89a3      	ldrh	r3, [r4, #12]
 8017d34:	059b      	lsls	r3, r3, #22
 8017d36:	d4e1      	bmi.n	8017cfc <_fflush_r+0xc>
 8017d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d3a:	f7fe fe3d 	bl	80169b8 <__retarget_lock_release_recursive>
 8017d3e:	e7dd      	b.n	8017cfc <_fflush_r+0xc>

08017d40 <_sbrk_r>:
 8017d40:	b538      	push	{r3, r4, r5, lr}
 8017d42:	4d06      	ldr	r5, [pc, #24]	@ (8017d5c <_sbrk_r+0x1c>)
 8017d44:	2300      	movs	r3, #0
 8017d46:	4604      	mov	r4, r0
 8017d48:	4608      	mov	r0, r1
 8017d4a:	602b      	str	r3, [r5, #0]
 8017d4c:	f7ec fc7e 	bl	800464c <_sbrk>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d102      	bne.n	8017d5a <_sbrk_r+0x1a>
 8017d54:	682b      	ldr	r3, [r5, #0]
 8017d56:	b103      	cbz	r3, 8017d5a <_sbrk_r+0x1a>
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	240067cc 	.word	0x240067cc

08017d60 <__assert_func>:
 8017d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d62:	4614      	mov	r4, r2
 8017d64:	461a      	mov	r2, r3
 8017d66:	4b09      	ldr	r3, [pc, #36]	@ (8017d8c <__assert_func+0x2c>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	68d8      	ldr	r0, [r3, #12]
 8017d6e:	b954      	cbnz	r4, 8017d86 <__assert_func+0x26>
 8017d70:	4b07      	ldr	r3, [pc, #28]	@ (8017d90 <__assert_func+0x30>)
 8017d72:	461c      	mov	r4, r3
 8017d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d78:	9100      	str	r1, [sp, #0]
 8017d7a:	462b      	mov	r3, r5
 8017d7c:	4905      	ldr	r1, [pc, #20]	@ (8017d94 <__assert_func+0x34>)
 8017d7e:	f000 f829 	bl	8017dd4 <fiprintf>
 8017d82:	f000 f839 	bl	8017df8 <abort>
 8017d86:	4b04      	ldr	r3, [pc, #16]	@ (8017d98 <__assert_func+0x38>)
 8017d88:	e7f4      	b.n	8017d74 <__assert_func+0x14>
 8017d8a:	bf00      	nop
 8017d8c:	24000240 	.word	0x24000240
 8017d90:	08018d9b 	.word	0x08018d9b
 8017d94:	08018d6d 	.word	0x08018d6d
 8017d98:	08018d60 	.word	0x08018d60

08017d9c <_calloc_r>:
 8017d9c:	b570      	push	{r4, r5, r6, lr}
 8017d9e:	fba1 5402 	umull	r5, r4, r1, r2
 8017da2:	b93c      	cbnz	r4, 8017db4 <_calloc_r+0x18>
 8017da4:	4629      	mov	r1, r5
 8017da6:	f7ff f9c5 	bl	8017134 <_malloc_r>
 8017daa:	4606      	mov	r6, r0
 8017dac:	b928      	cbnz	r0, 8017dba <_calloc_r+0x1e>
 8017dae:	2600      	movs	r6, #0
 8017db0:	4630      	mov	r0, r6
 8017db2:	bd70      	pop	{r4, r5, r6, pc}
 8017db4:	220c      	movs	r2, #12
 8017db6:	6002      	str	r2, [r0, #0]
 8017db8:	e7f9      	b.n	8017dae <_calloc_r+0x12>
 8017dba:	462a      	mov	r2, r5
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	f7fe fd62 	bl	8016886 <memset>
 8017dc2:	e7f5      	b.n	8017db0 <_calloc_r+0x14>

08017dc4 <malloc>:
 8017dc4:	4b02      	ldr	r3, [pc, #8]	@ (8017dd0 <malloc+0xc>)
 8017dc6:	4601      	mov	r1, r0
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	f7ff b9b3 	b.w	8017134 <_malloc_r>
 8017dce:	bf00      	nop
 8017dd0:	24000240 	.word	0x24000240

08017dd4 <fiprintf>:
 8017dd4:	b40e      	push	{r1, r2, r3}
 8017dd6:	b503      	push	{r0, r1, lr}
 8017dd8:	4601      	mov	r1, r0
 8017dda:	ab03      	add	r3, sp, #12
 8017ddc:	4805      	ldr	r0, [pc, #20]	@ (8017df4 <fiprintf+0x20>)
 8017dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017de2:	6800      	ldr	r0, [r0, #0]
 8017de4:	9301      	str	r3, [sp, #4]
 8017de6:	f000 f837 	bl	8017e58 <_vfiprintf_r>
 8017dea:	b002      	add	sp, #8
 8017dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017df0:	b003      	add	sp, #12
 8017df2:	4770      	bx	lr
 8017df4:	24000240 	.word	0x24000240

08017df8 <abort>:
 8017df8:	b508      	push	{r3, lr}
 8017dfa:	2006      	movs	r0, #6
 8017dfc:	f000 fb8e 	bl	801851c <raise>
 8017e00:	2001      	movs	r0, #1
 8017e02:	f7ec fbab 	bl	800455c <_exit>

08017e06 <__sfputc_r>:
 8017e06:	6893      	ldr	r3, [r2, #8]
 8017e08:	3b01      	subs	r3, #1
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	b410      	push	{r4}
 8017e0e:	6093      	str	r3, [r2, #8]
 8017e10:	da08      	bge.n	8017e24 <__sfputc_r+0x1e>
 8017e12:	6994      	ldr	r4, [r2, #24]
 8017e14:	42a3      	cmp	r3, r4
 8017e16:	db01      	blt.n	8017e1c <__sfputc_r+0x16>
 8017e18:	290a      	cmp	r1, #10
 8017e1a:	d103      	bne.n	8017e24 <__sfputc_r+0x1e>
 8017e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e20:	f000 bac0 	b.w	80183a4 <__swbuf_r>
 8017e24:	6813      	ldr	r3, [r2, #0]
 8017e26:	1c58      	adds	r0, r3, #1
 8017e28:	6010      	str	r0, [r2, #0]
 8017e2a:	7019      	strb	r1, [r3, #0]
 8017e2c:	4608      	mov	r0, r1
 8017e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e32:	4770      	bx	lr

08017e34 <__sfputs_r>:
 8017e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e36:	4606      	mov	r6, r0
 8017e38:	460f      	mov	r7, r1
 8017e3a:	4614      	mov	r4, r2
 8017e3c:	18d5      	adds	r5, r2, r3
 8017e3e:	42ac      	cmp	r4, r5
 8017e40:	d101      	bne.n	8017e46 <__sfputs_r+0x12>
 8017e42:	2000      	movs	r0, #0
 8017e44:	e007      	b.n	8017e56 <__sfputs_r+0x22>
 8017e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4a:	463a      	mov	r2, r7
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f7ff ffda 	bl	8017e06 <__sfputc_r>
 8017e52:	1c43      	adds	r3, r0, #1
 8017e54:	d1f3      	bne.n	8017e3e <__sfputs_r+0xa>
 8017e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e58 <_vfiprintf_r>:
 8017e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	460d      	mov	r5, r1
 8017e5e:	b09d      	sub	sp, #116	@ 0x74
 8017e60:	4614      	mov	r4, r2
 8017e62:	4698      	mov	r8, r3
 8017e64:	4606      	mov	r6, r0
 8017e66:	b118      	cbz	r0, 8017e70 <_vfiprintf_r+0x18>
 8017e68:	6a03      	ldr	r3, [r0, #32]
 8017e6a:	b90b      	cbnz	r3, 8017e70 <_vfiprintf_r+0x18>
 8017e6c:	f7fe fc92 	bl	8016794 <__sinit>
 8017e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e72:	07d9      	lsls	r1, r3, #31
 8017e74:	d405      	bmi.n	8017e82 <_vfiprintf_r+0x2a>
 8017e76:	89ab      	ldrh	r3, [r5, #12]
 8017e78:	059a      	lsls	r2, r3, #22
 8017e7a:	d402      	bmi.n	8017e82 <_vfiprintf_r+0x2a>
 8017e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e7e:	f7fe fd9a 	bl	80169b6 <__retarget_lock_acquire_recursive>
 8017e82:	89ab      	ldrh	r3, [r5, #12]
 8017e84:	071b      	lsls	r3, r3, #28
 8017e86:	d501      	bpl.n	8017e8c <_vfiprintf_r+0x34>
 8017e88:	692b      	ldr	r3, [r5, #16]
 8017e8a:	b99b      	cbnz	r3, 8017eb4 <_vfiprintf_r+0x5c>
 8017e8c:	4629      	mov	r1, r5
 8017e8e:	4630      	mov	r0, r6
 8017e90:	f000 fac6 	bl	8018420 <__swsetup_r>
 8017e94:	b170      	cbz	r0, 8017eb4 <_vfiprintf_r+0x5c>
 8017e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e98:	07dc      	lsls	r4, r3, #31
 8017e9a:	d504      	bpl.n	8017ea6 <_vfiprintf_r+0x4e>
 8017e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea0:	b01d      	add	sp, #116	@ 0x74
 8017ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea6:	89ab      	ldrh	r3, [r5, #12]
 8017ea8:	0598      	lsls	r0, r3, #22
 8017eaa:	d4f7      	bmi.n	8017e9c <_vfiprintf_r+0x44>
 8017eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eae:	f7fe fd83 	bl	80169b8 <__retarget_lock_release_recursive>
 8017eb2:	e7f3      	b.n	8017e9c <_vfiprintf_r+0x44>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017eb8:	2320      	movs	r3, #32
 8017eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ec2:	2330      	movs	r3, #48	@ 0x30
 8017ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018074 <_vfiprintf_r+0x21c>
 8017ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ecc:	f04f 0901 	mov.w	r9, #1
 8017ed0:	4623      	mov	r3, r4
 8017ed2:	469a      	mov	sl, r3
 8017ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ed8:	b10a      	cbz	r2, 8017ede <_vfiprintf_r+0x86>
 8017eda:	2a25      	cmp	r2, #37	@ 0x25
 8017edc:	d1f9      	bne.n	8017ed2 <_vfiprintf_r+0x7a>
 8017ede:	ebba 0b04 	subs.w	fp, sl, r4
 8017ee2:	d00b      	beq.n	8017efc <_vfiprintf_r+0xa4>
 8017ee4:	465b      	mov	r3, fp
 8017ee6:	4622      	mov	r2, r4
 8017ee8:	4629      	mov	r1, r5
 8017eea:	4630      	mov	r0, r6
 8017eec:	f7ff ffa2 	bl	8017e34 <__sfputs_r>
 8017ef0:	3001      	adds	r0, #1
 8017ef2:	f000 80a7 	beq.w	8018044 <_vfiprintf_r+0x1ec>
 8017ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ef8:	445a      	add	r2, fp
 8017efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017efc:	f89a 3000 	ldrb.w	r3, [sl]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 809f 	beq.w	8018044 <_vfiprintf_r+0x1ec>
 8017f06:	2300      	movs	r3, #0
 8017f08:	f04f 32ff 	mov.w	r2, #4294967295
 8017f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f10:	f10a 0a01 	add.w	sl, sl, #1
 8017f14:	9304      	str	r3, [sp, #16]
 8017f16:	9307      	str	r3, [sp, #28]
 8017f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f1e:	4654      	mov	r4, sl
 8017f20:	2205      	movs	r2, #5
 8017f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f26:	4853      	ldr	r0, [pc, #332]	@ (8018074 <_vfiprintf_r+0x21c>)
 8017f28:	f7e8 f9f2 	bl	8000310 <memchr>
 8017f2c:	9a04      	ldr	r2, [sp, #16]
 8017f2e:	b9d8      	cbnz	r0, 8017f68 <_vfiprintf_r+0x110>
 8017f30:	06d1      	lsls	r1, r2, #27
 8017f32:	bf44      	itt	mi
 8017f34:	2320      	movmi	r3, #32
 8017f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f3a:	0713      	lsls	r3, r2, #28
 8017f3c:	bf44      	itt	mi
 8017f3e:	232b      	movmi	r3, #43	@ 0x2b
 8017f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f44:	f89a 3000 	ldrb.w	r3, [sl]
 8017f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f4a:	d015      	beq.n	8017f78 <_vfiprintf_r+0x120>
 8017f4c:	9a07      	ldr	r2, [sp, #28]
 8017f4e:	4654      	mov	r4, sl
 8017f50:	2000      	movs	r0, #0
 8017f52:	f04f 0c0a 	mov.w	ip, #10
 8017f56:	4621      	mov	r1, r4
 8017f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f5c:	3b30      	subs	r3, #48	@ 0x30
 8017f5e:	2b09      	cmp	r3, #9
 8017f60:	d94b      	bls.n	8017ffa <_vfiprintf_r+0x1a2>
 8017f62:	b1b0      	cbz	r0, 8017f92 <_vfiprintf_r+0x13a>
 8017f64:	9207      	str	r2, [sp, #28]
 8017f66:	e014      	b.n	8017f92 <_vfiprintf_r+0x13a>
 8017f68:	eba0 0308 	sub.w	r3, r0, r8
 8017f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8017f70:	4313      	orrs	r3, r2
 8017f72:	9304      	str	r3, [sp, #16]
 8017f74:	46a2      	mov	sl, r4
 8017f76:	e7d2      	b.n	8017f1e <_vfiprintf_r+0xc6>
 8017f78:	9b03      	ldr	r3, [sp, #12]
 8017f7a:	1d19      	adds	r1, r3, #4
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	9103      	str	r1, [sp, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bfbb      	ittet	lt
 8017f84:	425b      	neglt	r3, r3
 8017f86:	f042 0202 	orrlt.w	r2, r2, #2
 8017f8a:	9307      	strge	r3, [sp, #28]
 8017f8c:	9307      	strlt	r3, [sp, #28]
 8017f8e:	bfb8      	it	lt
 8017f90:	9204      	strlt	r2, [sp, #16]
 8017f92:	7823      	ldrb	r3, [r4, #0]
 8017f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f96:	d10a      	bne.n	8017fae <_vfiprintf_r+0x156>
 8017f98:	7863      	ldrb	r3, [r4, #1]
 8017f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f9c:	d132      	bne.n	8018004 <_vfiprintf_r+0x1ac>
 8017f9e:	9b03      	ldr	r3, [sp, #12]
 8017fa0:	1d1a      	adds	r2, r3, #4
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	9203      	str	r2, [sp, #12]
 8017fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017faa:	3402      	adds	r4, #2
 8017fac:	9305      	str	r3, [sp, #20]
 8017fae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018084 <_vfiprintf_r+0x22c>
 8017fb2:	7821      	ldrb	r1, [r4, #0]
 8017fb4:	2203      	movs	r2, #3
 8017fb6:	4650      	mov	r0, sl
 8017fb8:	f7e8 f9aa 	bl	8000310 <memchr>
 8017fbc:	b138      	cbz	r0, 8017fce <_vfiprintf_r+0x176>
 8017fbe:	9b04      	ldr	r3, [sp, #16]
 8017fc0:	eba0 000a 	sub.w	r0, r0, sl
 8017fc4:	2240      	movs	r2, #64	@ 0x40
 8017fc6:	4082      	lsls	r2, r0
 8017fc8:	4313      	orrs	r3, r2
 8017fca:	3401      	adds	r4, #1
 8017fcc:	9304      	str	r3, [sp, #16]
 8017fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fd2:	4829      	ldr	r0, [pc, #164]	@ (8018078 <_vfiprintf_r+0x220>)
 8017fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017fd8:	2206      	movs	r2, #6
 8017fda:	f7e8 f999 	bl	8000310 <memchr>
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	d03f      	beq.n	8018062 <_vfiprintf_r+0x20a>
 8017fe2:	4b26      	ldr	r3, [pc, #152]	@ (801807c <_vfiprintf_r+0x224>)
 8017fe4:	bb1b      	cbnz	r3, 801802e <_vfiprintf_r+0x1d6>
 8017fe6:	9b03      	ldr	r3, [sp, #12]
 8017fe8:	3307      	adds	r3, #7
 8017fea:	f023 0307 	bic.w	r3, r3, #7
 8017fee:	3308      	adds	r3, #8
 8017ff0:	9303      	str	r3, [sp, #12]
 8017ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ff4:	443b      	add	r3, r7
 8017ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ff8:	e76a      	b.n	8017ed0 <_vfiprintf_r+0x78>
 8017ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ffe:	460c      	mov	r4, r1
 8018000:	2001      	movs	r0, #1
 8018002:	e7a8      	b.n	8017f56 <_vfiprintf_r+0xfe>
 8018004:	2300      	movs	r3, #0
 8018006:	3401      	adds	r4, #1
 8018008:	9305      	str	r3, [sp, #20]
 801800a:	4619      	mov	r1, r3
 801800c:	f04f 0c0a 	mov.w	ip, #10
 8018010:	4620      	mov	r0, r4
 8018012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018016:	3a30      	subs	r2, #48	@ 0x30
 8018018:	2a09      	cmp	r2, #9
 801801a:	d903      	bls.n	8018024 <_vfiprintf_r+0x1cc>
 801801c:	2b00      	cmp	r3, #0
 801801e:	d0c6      	beq.n	8017fae <_vfiprintf_r+0x156>
 8018020:	9105      	str	r1, [sp, #20]
 8018022:	e7c4      	b.n	8017fae <_vfiprintf_r+0x156>
 8018024:	fb0c 2101 	mla	r1, ip, r1, r2
 8018028:	4604      	mov	r4, r0
 801802a:	2301      	movs	r3, #1
 801802c:	e7f0      	b.n	8018010 <_vfiprintf_r+0x1b8>
 801802e:	ab03      	add	r3, sp, #12
 8018030:	9300      	str	r3, [sp, #0]
 8018032:	462a      	mov	r2, r5
 8018034:	4b12      	ldr	r3, [pc, #72]	@ (8018080 <_vfiprintf_r+0x228>)
 8018036:	a904      	add	r1, sp, #16
 8018038:	4630      	mov	r0, r6
 801803a:	f3af 8000 	nop.w
 801803e:	4607      	mov	r7, r0
 8018040:	1c78      	adds	r0, r7, #1
 8018042:	d1d6      	bne.n	8017ff2 <_vfiprintf_r+0x19a>
 8018044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018046:	07d9      	lsls	r1, r3, #31
 8018048:	d405      	bmi.n	8018056 <_vfiprintf_r+0x1fe>
 801804a:	89ab      	ldrh	r3, [r5, #12]
 801804c:	059a      	lsls	r2, r3, #22
 801804e:	d402      	bmi.n	8018056 <_vfiprintf_r+0x1fe>
 8018050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018052:	f7fe fcb1 	bl	80169b8 <__retarget_lock_release_recursive>
 8018056:	89ab      	ldrh	r3, [r5, #12]
 8018058:	065b      	lsls	r3, r3, #25
 801805a:	f53f af1f 	bmi.w	8017e9c <_vfiprintf_r+0x44>
 801805e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018060:	e71e      	b.n	8017ea0 <_vfiprintf_r+0x48>
 8018062:	ab03      	add	r3, sp, #12
 8018064:	9300      	str	r3, [sp, #0]
 8018066:	462a      	mov	r2, r5
 8018068:	4b05      	ldr	r3, [pc, #20]	@ (8018080 <_vfiprintf_r+0x228>)
 801806a:	a904      	add	r1, sp, #16
 801806c:	4630      	mov	r0, r6
 801806e:	f000 f879 	bl	8018164 <_printf_i>
 8018072:	e7e4      	b.n	801803e <_vfiprintf_r+0x1e6>
 8018074:	08018d9c 	.word	0x08018d9c
 8018078:	08018da6 	.word	0x08018da6
 801807c:	00000000 	.word	0x00000000
 8018080:	08017e35 	.word	0x08017e35
 8018084:	08018da2 	.word	0x08018da2

08018088 <_printf_common>:
 8018088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801808c:	4616      	mov	r6, r2
 801808e:	4698      	mov	r8, r3
 8018090:	688a      	ldr	r2, [r1, #8]
 8018092:	690b      	ldr	r3, [r1, #16]
 8018094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018098:	4293      	cmp	r3, r2
 801809a:	bfb8      	it	lt
 801809c:	4613      	movlt	r3, r2
 801809e:	6033      	str	r3, [r6, #0]
 80180a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80180a4:	4607      	mov	r7, r0
 80180a6:	460c      	mov	r4, r1
 80180a8:	b10a      	cbz	r2, 80180ae <_printf_common+0x26>
 80180aa:	3301      	adds	r3, #1
 80180ac:	6033      	str	r3, [r6, #0]
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	0699      	lsls	r1, r3, #26
 80180b2:	bf42      	ittt	mi
 80180b4:	6833      	ldrmi	r3, [r6, #0]
 80180b6:	3302      	addmi	r3, #2
 80180b8:	6033      	strmi	r3, [r6, #0]
 80180ba:	6825      	ldr	r5, [r4, #0]
 80180bc:	f015 0506 	ands.w	r5, r5, #6
 80180c0:	d106      	bne.n	80180d0 <_printf_common+0x48>
 80180c2:	f104 0a19 	add.w	sl, r4, #25
 80180c6:	68e3      	ldr	r3, [r4, #12]
 80180c8:	6832      	ldr	r2, [r6, #0]
 80180ca:	1a9b      	subs	r3, r3, r2
 80180cc:	42ab      	cmp	r3, r5
 80180ce:	dc26      	bgt.n	801811e <_printf_common+0x96>
 80180d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80180d4:	6822      	ldr	r2, [r4, #0]
 80180d6:	3b00      	subs	r3, #0
 80180d8:	bf18      	it	ne
 80180da:	2301      	movne	r3, #1
 80180dc:	0692      	lsls	r2, r2, #26
 80180de:	d42b      	bmi.n	8018138 <_printf_common+0xb0>
 80180e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80180e4:	4641      	mov	r1, r8
 80180e6:	4638      	mov	r0, r7
 80180e8:	47c8      	blx	r9
 80180ea:	3001      	adds	r0, #1
 80180ec:	d01e      	beq.n	801812c <_printf_common+0xa4>
 80180ee:	6823      	ldr	r3, [r4, #0]
 80180f0:	6922      	ldr	r2, [r4, #16]
 80180f2:	f003 0306 	and.w	r3, r3, #6
 80180f6:	2b04      	cmp	r3, #4
 80180f8:	bf02      	ittt	eq
 80180fa:	68e5      	ldreq	r5, [r4, #12]
 80180fc:	6833      	ldreq	r3, [r6, #0]
 80180fe:	1aed      	subeq	r5, r5, r3
 8018100:	68a3      	ldr	r3, [r4, #8]
 8018102:	bf0c      	ite	eq
 8018104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018108:	2500      	movne	r5, #0
 801810a:	4293      	cmp	r3, r2
 801810c:	bfc4      	itt	gt
 801810e:	1a9b      	subgt	r3, r3, r2
 8018110:	18ed      	addgt	r5, r5, r3
 8018112:	2600      	movs	r6, #0
 8018114:	341a      	adds	r4, #26
 8018116:	42b5      	cmp	r5, r6
 8018118:	d11a      	bne.n	8018150 <_printf_common+0xc8>
 801811a:	2000      	movs	r0, #0
 801811c:	e008      	b.n	8018130 <_printf_common+0xa8>
 801811e:	2301      	movs	r3, #1
 8018120:	4652      	mov	r2, sl
 8018122:	4641      	mov	r1, r8
 8018124:	4638      	mov	r0, r7
 8018126:	47c8      	blx	r9
 8018128:	3001      	adds	r0, #1
 801812a:	d103      	bne.n	8018134 <_printf_common+0xac>
 801812c:	f04f 30ff 	mov.w	r0, #4294967295
 8018130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018134:	3501      	adds	r5, #1
 8018136:	e7c6      	b.n	80180c6 <_printf_common+0x3e>
 8018138:	18e1      	adds	r1, r4, r3
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	2030      	movs	r0, #48	@ 0x30
 801813e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018142:	4422      	add	r2, r4
 8018144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801814c:	3302      	adds	r3, #2
 801814e:	e7c7      	b.n	80180e0 <_printf_common+0x58>
 8018150:	2301      	movs	r3, #1
 8018152:	4622      	mov	r2, r4
 8018154:	4641      	mov	r1, r8
 8018156:	4638      	mov	r0, r7
 8018158:	47c8      	blx	r9
 801815a:	3001      	adds	r0, #1
 801815c:	d0e6      	beq.n	801812c <_printf_common+0xa4>
 801815e:	3601      	adds	r6, #1
 8018160:	e7d9      	b.n	8018116 <_printf_common+0x8e>
	...

08018164 <_printf_i>:
 8018164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018168:	7e0f      	ldrb	r7, [r1, #24]
 801816a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801816c:	2f78      	cmp	r7, #120	@ 0x78
 801816e:	4691      	mov	r9, r2
 8018170:	4680      	mov	r8, r0
 8018172:	460c      	mov	r4, r1
 8018174:	469a      	mov	sl, r3
 8018176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801817a:	d807      	bhi.n	801818c <_printf_i+0x28>
 801817c:	2f62      	cmp	r7, #98	@ 0x62
 801817e:	d80a      	bhi.n	8018196 <_printf_i+0x32>
 8018180:	2f00      	cmp	r7, #0
 8018182:	f000 80d2 	beq.w	801832a <_printf_i+0x1c6>
 8018186:	2f58      	cmp	r7, #88	@ 0x58
 8018188:	f000 80b9 	beq.w	80182fe <_printf_i+0x19a>
 801818c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018194:	e03a      	b.n	801820c <_printf_i+0xa8>
 8018196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801819a:	2b15      	cmp	r3, #21
 801819c:	d8f6      	bhi.n	801818c <_printf_i+0x28>
 801819e:	a101      	add	r1, pc, #4	@ (adr r1, 80181a4 <_printf_i+0x40>)
 80181a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181a4:	080181fd 	.word	0x080181fd
 80181a8:	08018211 	.word	0x08018211
 80181ac:	0801818d 	.word	0x0801818d
 80181b0:	0801818d 	.word	0x0801818d
 80181b4:	0801818d 	.word	0x0801818d
 80181b8:	0801818d 	.word	0x0801818d
 80181bc:	08018211 	.word	0x08018211
 80181c0:	0801818d 	.word	0x0801818d
 80181c4:	0801818d 	.word	0x0801818d
 80181c8:	0801818d 	.word	0x0801818d
 80181cc:	0801818d 	.word	0x0801818d
 80181d0:	08018311 	.word	0x08018311
 80181d4:	0801823b 	.word	0x0801823b
 80181d8:	080182cb 	.word	0x080182cb
 80181dc:	0801818d 	.word	0x0801818d
 80181e0:	0801818d 	.word	0x0801818d
 80181e4:	08018333 	.word	0x08018333
 80181e8:	0801818d 	.word	0x0801818d
 80181ec:	0801823b 	.word	0x0801823b
 80181f0:	0801818d 	.word	0x0801818d
 80181f4:	0801818d 	.word	0x0801818d
 80181f8:	080182d3 	.word	0x080182d3
 80181fc:	6833      	ldr	r3, [r6, #0]
 80181fe:	1d1a      	adds	r2, r3, #4
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	6032      	str	r2, [r6, #0]
 8018204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801820c:	2301      	movs	r3, #1
 801820e:	e09d      	b.n	801834c <_printf_i+0x1e8>
 8018210:	6833      	ldr	r3, [r6, #0]
 8018212:	6820      	ldr	r0, [r4, #0]
 8018214:	1d19      	adds	r1, r3, #4
 8018216:	6031      	str	r1, [r6, #0]
 8018218:	0606      	lsls	r6, r0, #24
 801821a:	d501      	bpl.n	8018220 <_printf_i+0xbc>
 801821c:	681d      	ldr	r5, [r3, #0]
 801821e:	e003      	b.n	8018228 <_printf_i+0xc4>
 8018220:	0645      	lsls	r5, r0, #25
 8018222:	d5fb      	bpl.n	801821c <_printf_i+0xb8>
 8018224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018228:	2d00      	cmp	r5, #0
 801822a:	da03      	bge.n	8018234 <_printf_i+0xd0>
 801822c:	232d      	movs	r3, #45	@ 0x2d
 801822e:	426d      	negs	r5, r5
 8018230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018234:	4859      	ldr	r0, [pc, #356]	@ (801839c <_printf_i+0x238>)
 8018236:	230a      	movs	r3, #10
 8018238:	e011      	b.n	801825e <_printf_i+0xfa>
 801823a:	6821      	ldr	r1, [r4, #0]
 801823c:	6833      	ldr	r3, [r6, #0]
 801823e:	0608      	lsls	r0, r1, #24
 8018240:	f853 5b04 	ldr.w	r5, [r3], #4
 8018244:	d402      	bmi.n	801824c <_printf_i+0xe8>
 8018246:	0649      	lsls	r1, r1, #25
 8018248:	bf48      	it	mi
 801824a:	b2ad      	uxthmi	r5, r5
 801824c:	2f6f      	cmp	r7, #111	@ 0x6f
 801824e:	4853      	ldr	r0, [pc, #332]	@ (801839c <_printf_i+0x238>)
 8018250:	6033      	str	r3, [r6, #0]
 8018252:	bf14      	ite	ne
 8018254:	230a      	movne	r3, #10
 8018256:	2308      	moveq	r3, #8
 8018258:	2100      	movs	r1, #0
 801825a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801825e:	6866      	ldr	r6, [r4, #4]
 8018260:	60a6      	str	r6, [r4, #8]
 8018262:	2e00      	cmp	r6, #0
 8018264:	bfa2      	ittt	ge
 8018266:	6821      	ldrge	r1, [r4, #0]
 8018268:	f021 0104 	bicge.w	r1, r1, #4
 801826c:	6021      	strge	r1, [r4, #0]
 801826e:	b90d      	cbnz	r5, 8018274 <_printf_i+0x110>
 8018270:	2e00      	cmp	r6, #0
 8018272:	d04b      	beq.n	801830c <_printf_i+0x1a8>
 8018274:	4616      	mov	r6, r2
 8018276:	fbb5 f1f3 	udiv	r1, r5, r3
 801827a:	fb03 5711 	mls	r7, r3, r1, r5
 801827e:	5dc7      	ldrb	r7, [r0, r7]
 8018280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018284:	462f      	mov	r7, r5
 8018286:	42bb      	cmp	r3, r7
 8018288:	460d      	mov	r5, r1
 801828a:	d9f4      	bls.n	8018276 <_printf_i+0x112>
 801828c:	2b08      	cmp	r3, #8
 801828e:	d10b      	bne.n	80182a8 <_printf_i+0x144>
 8018290:	6823      	ldr	r3, [r4, #0]
 8018292:	07df      	lsls	r7, r3, #31
 8018294:	d508      	bpl.n	80182a8 <_printf_i+0x144>
 8018296:	6923      	ldr	r3, [r4, #16]
 8018298:	6861      	ldr	r1, [r4, #4]
 801829a:	4299      	cmp	r1, r3
 801829c:	bfde      	ittt	le
 801829e:	2330      	movle	r3, #48	@ 0x30
 80182a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80182a8:	1b92      	subs	r2, r2, r6
 80182aa:	6122      	str	r2, [r4, #16]
 80182ac:	f8cd a000 	str.w	sl, [sp]
 80182b0:	464b      	mov	r3, r9
 80182b2:	aa03      	add	r2, sp, #12
 80182b4:	4621      	mov	r1, r4
 80182b6:	4640      	mov	r0, r8
 80182b8:	f7ff fee6 	bl	8018088 <_printf_common>
 80182bc:	3001      	adds	r0, #1
 80182be:	d14a      	bne.n	8018356 <_printf_i+0x1f2>
 80182c0:	f04f 30ff 	mov.w	r0, #4294967295
 80182c4:	b004      	add	sp, #16
 80182c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ca:	6823      	ldr	r3, [r4, #0]
 80182cc:	f043 0320 	orr.w	r3, r3, #32
 80182d0:	6023      	str	r3, [r4, #0]
 80182d2:	4833      	ldr	r0, [pc, #204]	@ (80183a0 <_printf_i+0x23c>)
 80182d4:	2778      	movs	r7, #120	@ 0x78
 80182d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80182da:	6823      	ldr	r3, [r4, #0]
 80182dc:	6831      	ldr	r1, [r6, #0]
 80182de:	061f      	lsls	r7, r3, #24
 80182e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80182e4:	d402      	bmi.n	80182ec <_printf_i+0x188>
 80182e6:	065f      	lsls	r7, r3, #25
 80182e8:	bf48      	it	mi
 80182ea:	b2ad      	uxthmi	r5, r5
 80182ec:	6031      	str	r1, [r6, #0]
 80182ee:	07d9      	lsls	r1, r3, #31
 80182f0:	bf44      	itt	mi
 80182f2:	f043 0320 	orrmi.w	r3, r3, #32
 80182f6:	6023      	strmi	r3, [r4, #0]
 80182f8:	b11d      	cbz	r5, 8018302 <_printf_i+0x19e>
 80182fa:	2310      	movs	r3, #16
 80182fc:	e7ac      	b.n	8018258 <_printf_i+0xf4>
 80182fe:	4827      	ldr	r0, [pc, #156]	@ (801839c <_printf_i+0x238>)
 8018300:	e7e9      	b.n	80182d6 <_printf_i+0x172>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	f023 0320 	bic.w	r3, r3, #32
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	e7f6      	b.n	80182fa <_printf_i+0x196>
 801830c:	4616      	mov	r6, r2
 801830e:	e7bd      	b.n	801828c <_printf_i+0x128>
 8018310:	6833      	ldr	r3, [r6, #0]
 8018312:	6825      	ldr	r5, [r4, #0]
 8018314:	6961      	ldr	r1, [r4, #20]
 8018316:	1d18      	adds	r0, r3, #4
 8018318:	6030      	str	r0, [r6, #0]
 801831a:	062e      	lsls	r6, r5, #24
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	d501      	bpl.n	8018324 <_printf_i+0x1c0>
 8018320:	6019      	str	r1, [r3, #0]
 8018322:	e002      	b.n	801832a <_printf_i+0x1c6>
 8018324:	0668      	lsls	r0, r5, #25
 8018326:	d5fb      	bpl.n	8018320 <_printf_i+0x1bc>
 8018328:	8019      	strh	r1, [r3, #0]
 801832a:	2300      	movs	r3, #0
 801832c:	6123      	str	r3, [r4, #16]
 801832e:	4616      	mov	r6, r2
 8018330:	e7bc      	b.n	80182ac <_printf_i+0x148>
 8018332:	6833      	ldr	r3, [r6, #0]
 8018334:	1d1a      	adds	r2, r3, #4
 8018336:	6032      	str	r2, [r6, #0]
 8018338:	681e      	ldr	r6, [r3, #0]
 801833a:	6862      	ldr	r2, [r4, #4]
 801833c:	2100      	movs	r1, #0
 801833e:	4630      	mov	r0, r6
 8018340:	f7e7 ffe6 	bl	8000310 <memchr>
 8018344:	b108      	cbz	r0, 801834a <_printf_i+0x1e6>
 8018346:	1b80      	subs	r0, r0, r6
 8018348:	6060      	str	r0, [r4, #4]
 801834a:	6863      	ldr	r3, [r4, #4]
 801834c:	6123      	str	r3, [r4, #16]
 801834e:	2300      	movs	r3, #0
 8018350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018354:	e7aa      	b.n	80182ac <_printf_i+0x148>
 8018356:	6923      	ldr	r3, [r4, #16]
 8018358:	4632      	mov	r2, r6
 801835a:	4649      	mov	r1, r9
 801835c:	4640      	mov	r0, r8
 801835e:	47d0      	blx	sl
 8018360:	3001      	adds	r0, #1
 8018362:	d0ad      	beq.n	80182c0 <_printf_i+0x15c>
 8018364:	6823      	ldr	r3, [r4, #0]
 8018366:	079b      	lsls	r3, r3, #30
 8018368:	d413      	bmi.n	8018392 <_printf_i+0x22e>
 801836a:	68e0      	ldr	r0, [r4, #12]
 801836c:	9b03      	ldr	r3, [sp, #12]
 801836e:	4298      	cmp	r0, r3
 8018370:	bfb8      	it	lt
 8018372:	4618      	movlt	r0, r3
 8018374:	e7a6      	b.n	80182c4 <_printf_i+0x160>
 8018376:	2301      	movs	r3, #1
 8018378:	4632      	mov	r2, r6
 801837a:	4649      	mov	r1, r9
 801837c:	4640      	mov	r0, r8
 801837e:	47d0      	blx	sl
 8018380:	3001      	adds	r0, #1
 8018382:	d09d      	beq.n	80182c0 <_printf_i+0x15c>
 8018384:	3501      	adds	r5, #1
 8018386:	68e3      	ldr	r3, [r4, #12]
 8018388:	9903      	ldr	r1, [sp, #12]
 801838a:	1a5b      	subs	r3, r3, r1
 801838c:	42ab      	cmp	r3, r5
 801838e:	dcf2      	bgt.n	8018376 <_printf_i+0x212>
 8018390:	e7eb      	b.n	801836a <_printf_i+0x206>
 8018392:	2500      	movs	r5, #0
 8018394:	f104 0619 	add.w	r6, r4, #25
 8018398:	e7f5      	b.n	8018386 <_printf_i+0x222>
 801839a:	bf00      	nop
 801839c:	08018dad 	.word	0x08018dad
 80183a0:	08018dbe 	.word	0x08018dbe

080183a4 <__swbuf_r>:
 80183a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183a6:	460e      	mov	r6, r1
 80183a8:	4614      	mov	r4, r2
 80183aa:	4605      	mov	r5, r0
 80183ac:	b118      	cbz	r0, 80183b6 <__swbuf_r+0x12>
 80183ae:	6a03      	ldr	r3, [r0, #32]
 80183b0:	b90b      	cbnz	r3, 80183b6 <__swbuf_r+0x12>
 80183b2:	f7fe f9ef 	bl	8016794 <__sinit>
 80183b6:	69a3      	ldr	r3, [r4, #24]
 80183b8:	60a3      	str	r3, [r4, #8]
 80183ba:	89a3      	ldrh	r3, [r4, #12]
 80183bc:	071a      	lsls	r2, r3, #28
 80183be:	d501      	bpl.n	80183c4 <__swbuf_r+0x20>
 80183c0:	6923      	ldr	r3, [r4, #16]
 80183c2:	b943      	cbnz	r3, 80183d6 <__swbuf_r+0x32>
 80183c4:	4621      	mov	r1, r4
 80183c6:	4628      	mov	r0, r5
 80183c8:	f000 f82a 	bl	8018420 <__swsetup_r>
 80183cc:	b118      	cbz	r0, 80183d6 <__swbuf_r+0x32>
 80183ce:	f04f 37ff 	mov.w	r7, #4294967295
 80183d2:	4638      	mov	r0, r7
 80183d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	6922      	ldr	r2, [r4, #16]
 80183da:	1a98      	subs	r0, r3, r2
 80183dc:	6963      	ldr	r3, [r4, #20]
 80183de:	b2f6      	uxtb	r6, r6
 80183e0:	4283      	cmp	r3, r0
 80183e2:	4637      	mov	r7, r6
 80183e4:	dc05      	bgt.n	80183f2 <__swbuf_r+0x4e>
 80183e6:	4621      	mov	r1, r4
 80183e8:	4628      	mov	r0, r5
 80183ea:	f7ff fc81 	bl	8017cf0 <_fflush_r>
 80183ee:	2800      	cmp	r0, #0
 80183f0:	d1ed      	bne.n	80183ce <__swbuf_r+0x2a>
 80183f2:	68a3      	ldr	r3, [r4, #8]
 80183f4:	3b01      	subs	r3, #1
 80183f6:	60a3      	str	r3, [r4, #8]
 80183f8:	6823      	ldr	r3, [r4, #0]
 80183fa:	1c5a      	adds	r2, r3, #1
 80183fc:	6022      	str	r2, [r4, #0]
 80183fe:	701e      	strb	r6, [r3, #0]
 8018400:	6962      	ldr	r2, [r4, #20]
 8018402:	1c43      	adds	r3, r0, #1
 8018404:	429a      	cmp	r2, r3
 8018406:	d004      	beq.n	8018412 <__swbuf_r+0x6e>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	07db      	lsls	r3, r3, #31
 801840c:	d5e1      	bpl.n	80183d2 <__swbuf_r+0x2e>
 801840e:	2e0a      	cmp	r6, #10
 8018410:	d1df      	bne.n	80183d2 <__swbuf_r+0x2e>
 8018412:	4621      	mov	r1, r4
 8018414:	4628      	mov	r0, r5
 8018416:	f7ff fc6b 	bl	8017cf0 <_fflush_r>
 801841a:	2800      	cmp	r0, #0
 801841c:	d0d9      	beq.n	80183d2 <__swbuf_r+0x2e>
 801841e:	e7d6      	b.n	80183ce <__swbuf_r+0x2a>

08018420 <__swsetup_r>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	4b29      	ldr	r3, [pc, #164]	@ (80184c8 <__swsetup_r+0xa8>)
 8018424:	4605      	mov	r5, r0
 8018426:	6818      	ldr	r0, [r3, #0]
 8018428:	460c      	mov	r4, r1
 801842a:	b118      	cbz	r0, 8018434 <__swsetup_r+0x14>
 801842c:	6a03      	ldr	r3, [r0, #32]
 801842e:	b90b      	cbnz	r3, 8018434 <__swsetup_r+0x14>
 8018430:	f7fe f9b0 	bl	8016794 <__sinit>
 8018434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018438:	0719      	lsls	r1, r3, #28
 801843a:	d422      	bmi.n	8018482 <__swsetup_r+0x62>
 801843c:	06da      	lsls	r2, r3, #27
 801843e:	d407      	bmi.n	8018450 <__swsetup_r+0x30>
 8018440:	2209      	movs	r2, #9
 8018442:	602a      	str	r2, [r5, #0]
 8018444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018448:	81a3      	strh	r3, [r4, #12]
 801844a:	f04f 30ff 	mov.w	r0, #4294967295
 801844e:	e033      	b.n	80184b8 <__swsetup_r+0x98>
 8018450:	0758      	lsls	r0, r3, #29
 8018452:	d512      	bpl.n	801847a <__swsetup_r+0x5a>
 8018454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018456:	b141      	cbz	r1, 801846a <__swsetup_r+0x4a>
 8018458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801845c:	4299      	cmp	r1, r3
 801845e:	d002      	beq.n	8018466 <__swsetup_r+0x46>
 8018460:	4628      	mov	r0, r5
 8018462:	f7fe fac1 	bl	80169e8 <_free_r>
 8018466:	2300      	movs	r3, #0
 8018468:	6363      	str	r3, [r4, #52]	@ 0x34
 801846a:	89a3      	ldrh	r3, [r4, #12]
 801846c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018470:	81a3      	strh	r3, [r4, #12]
 8018472:	2300      	movs	r3, #0
 8018474:	6063      	str	r3, [r4, #4]
 8018476:	6923      	ldr	r3, [r4, #16]
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	89a3      	ldrh	r3, [r4, #12]
 801847c:	f043 0308 	orr.w	r3, r3, #8
 8018480:	81a3      	strh	r3, [r4, #12]
 8018482:	6923      	ldr	r3, [r4, #16]
 8018484:	b94b      	cbnz	r3, 801849a <__swsetup_r+0x7a>
 8018486:	89a3      	ldrh	r3, [r4, #12]
 8018488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801848c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018490:	d003      	beq.n	801849a <__swsetup_r+0x7a>
 8018492:	4621      	mov	r1, r4
 8018494:	4628      	mov	r0, r5
 8018496:	f000 f883 	bl	80185a0 <__smakebuf_r>
 801849a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801849e:	f013 0201 	ands.w	r2, r3, #1
 80184a2:	d00a      	beq.n	80184ba <__swsetup_r+0x9a>
 80184a4:	2200      	movs	r2, #0
 80184a6:	60a2      	str	r2, [r4, #8]
 80184a8:	6962      	ldr	r2, [r4, #20]
 80184aa:	4252      	negs	r2, r2
 80184ac:	61a2      	str	r2, [r4, #24]
 80184ae:	6922      	ldr	r2, [r4, #16]
 80184b0:	b942      	cbnz	r2, 80184c4 <__swsetup_r+0xa4>
 80184b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80184b6:	d1c5      	bne.n	8018444 <__swsetup_r+0x24>
 80184b8:	bd38      	pop	{r3, r4, r5, pc}
 80184ba:	0799      	lsls	r1, r3, #30
 80184bc:	bf58      	it	pl
 80184be:	6962      	ldrpl	r2, [r4, #20]
 80184c0:	60a2      	str	r2, [r4, #8]
 80184c2:	e7f4      	b.n	80184ae <__swsetup_r+0x8e>
 80184c4:	2000      	movs	r0, #0
 80184c6:	e7f7      	b.n	80184b8 <__swsetup_r+0x98>
 80184c8:	24000240 	.word	0x24000240

080184cc <_raise_r>:
 80184cc:	291f      	cmp	r1, #31
 80184ce:	b538      	push	{r3, r4, r5, lr}
 80184d0:	4605      	mov	r5, r0
 80184d2:	460c      	mov	r4, r1
 80184d4:	d904      	bls.n	80184e0 <_raise_r+0x14>
 80184d6:	2316      	movs	r3, #22
 80184d8:	6003      	str	r3, [r0, #0]
 80184da:	f04f 30ff 	mov.w	r0, #4294967295
 80184de:	bd38      	pop	{r3, r4, r5, pc}
 80184e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80184e2:	b112      	cbz	r2, 80184ea <_raise_r+0x1e>
 80184e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80184e8:	b94b      	cbnz	r3, 80184fe <_raise_r+0x32>
 80184ea:	4628      	mov	r0, r5
 80184ec:	f000 f830 	bl	8018550 <_getpid_r>
 80184f0:	4622      	mov	r2, r4
 80184f2:	4601      	mov	r1, r0
 80184f4:	4628      	mov	r0, r5
 80184f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184fa:	f000 b817 	b.w	801852c <_kill_r>
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d00a      	beq.n	8018518 <_raise_r+0x4c>
 8018502:	1c59      	adds	r1, r3, #1
 8018504:	d103      	bne.n	801850e <_raise_r+0x42>
 8018506:	2316      	movs	r3, #22
 8018508:	6003      	str	r3, [r0, #0]
 801850a:	2001      	movs	r0, #1
 801850c:	e7e7      	b.n	80184de <_raise_r+0x12>
 801850e:	2100      	movs	r1, #0
 8018510:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018514:	4620      	mov	r0, r4
 8018516:	4798      	blx	r3
 8018518:	2000      	movs	r0, #0
 801851a:	e7e0      	b.n	80184de <_raise_r+0x12>

0801851c <raise>:
 801851c:	4b02      	ldr	r3, [pc, #8]	@ (8018528 <raise+0xc>)
 801851e:	4601      	mov	r1, r0
 8018520:	6818      	ldr	r0, [r3, #0]
 8018522:	f7ff bfd3 	b.w	80184cc <_raise_r>
 8018526:	bf00      	nop
 8018528:	24000240 	.word	0x24000240

0801852c <_kill_r>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4d07      	ldr	r5, [pc, #28]	@ (801854c <_kill_r+0x20>)
 8018530:	2300      	movs	r3, #0
 8018532:	4604      	mov	r4, r0
 8018534:	4608      	mov	r0, r1
 8018536:	4611      	mov	r1, r2
 8018538:	602b      	str	r3, [r5, #0]
 801853a:	f7eb ffff 	bl	800453c <_kill>
 801853e:	1c43      	adds	r3, r0, #1
 8018540:	d102      	bne.n	8018548 <_kill_r+0x1c>
 8018542:	682b      	ldr	r3, [r5, #0]
 8018544:	b103      	cbz	r3, 8018548 <_kill_r+0x1c>
 8018546:	6023      	str	r3, [r4, #0]
 8018548:	bd38      	pop	{r3, r4, r5, pc}
 801854a:	bf00      	nop
 801854c:	240067cc 	.word	0x240067cc

08018550 <_getpid_r>:
 8018550:	f7eb bfec 	b.w	800452c <_getpid>

08018554 <__swhatbuf_r>:
 8018554:	b570      	push	{r4, r5, r6, lr}
 8018556:	460c      	mov	r4, r1
 8018558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801855c:	2900      	cmp	r1, #0
 801855e:	b096      	sub	sp, #88	@ 0x58
 8018560:	4615      	mov	r5, r2
 8018562:	461e      	mov	r6, r3
 8018564:	da0d      	bge.n	8018582 <__swhatbuf_r+0x2e>
 8018566:	89a3      	ldrh	r3, [r4, #12]
 8018568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801856c:	f04f 0100 	mov.w	r1, #0
 8018570:	bf14      	ite	ne
 8018572:	2340      	movne	r3, #64	@ 0x40
 8018574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018578:	2000      	movs	r0, #0
 801857a:	6031      	str	r1, [r6, #0]
 801857c:	602b      	str	r3, [r5, #0]
 801857e:	b016      	add	sp, #88	@ 0x58
 8018580:	bd70      	pop	{r4, r5, r6, pc}
 8018582:	466a      	mov	r2, sp
 8018584:	f000 f848 	bl	8018618 <_fstat_r>
 8018588:	2800      	cmp	r0, #0
 801858a:	dbec      	blt.n	8018566 <__swhatbuf_r+0x12>
 801858c:	9901      	ldr	r1, [sp, #4]
 801858e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018596:	4259      	negs	r1, r3
 8018598:	4159      	adcs	r1, r3
 801859a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801859e:	e7eb      	b.n	8018578 <__swhatbuf_r+0x24>

080185a0 <__smakebuf_r>:
 80185a0:	898b      	ldrh	r3, [r1, #12]
 80185a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185a4:	079d      	lsls	r5, r3, #30
 80185a6:	4606      	mov	r6, r0
 80185a8:	460c      	mov	r4, r1
 80185aa:	d507      	bpl.n	80185bc <__smakebuf_r+0x1c>
 80185ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80185b0:	6023      	str	r3, [r4, #0]
 80185b2:	6123      	str	r3, [r4, #16]
 80185b4:	2301      	movs	r3, #1
 80185b6:	6163      	str	r3, [r4, #20]
 80185b8:	b003      	add	sp, #12
 80185ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185bc:	ab01      	add	r3, sp, #4
 80185be:	466a      	mov	r2, sp
 80185c0:	f7ff ffc8 	bl	8018554 <__swhatbuf_r>
 80185c4:	9f00      	ldr	r7, [sp, #0]
 80185c6:	4605      	mov	r5, r0
 80185c8:	4639      	mov	r1, r7
 80185ca:	4630      	mov	r0, r6
 80185cc:	f7fe fdb2 	bl	8017134 <_malloc_r>
 80185d0:	b948      	cbnz	r0, 80185e6 <__smakebuf_r+0x46>
 80185d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185d6:	059a      	lsls	r2, r3, #22
 80185d8:	d4ee      	bmi.n	80185b8 <__smakebuf_r+0x18>
 80185da:	f023 0303 	bic.w	r3, r3, #3
 80185de:	f043 0302 	orr.w	r3, r3, #2
 80185e2:	81a3      	strh	r3, [r4, #12]
 80185e4:	e7e2      	b.n	80185ac <__smakebuf_r+0xc>
 80185e6:	89a3      	ldrh	r3, [r4, #12]
 80185e8:	6020      	str	r0, [r4, #0]
 80185ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185ee:	81a3      	strh	r3, [r4, #12]
 80185f0:	9b01      	ldr	r3, [sp, #4]
 80185f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80185f6:	b15b      	cbz	r3, 8018610 <__smakebuf_r+0x70>
 80185f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185fc:	4630      	mov	r0, r6
 80185fe:	f000 f81d 	bl	801863c <_isatty_r>
 8018602:	b128      	cbz	r0, 8018610 <__smakebuf_r+0x70>
 8018604:	89a3      	ldrh	r3, [r4, #12]
 8018606:	f023 0303 	bic.w	r3, r3, #3
 801860a:	f043 0301 	orr.w	r3, r3, #1
 801860e:	81a3      	strh	r3, [r4, #12]
 8018610:	89a3      	ldrh	r3, [r4, #12]
 8018612:	431d      	orrs	r5, r3
 8018614:	81a5      	strh	r5, [r4, #12]
 8018616:	e7cf      	b.n	80185b8 <__smakebuf_r+0x18>

08018618 <_fstat_r>:
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	4d07      	ldr	r5, [pc, #28]	@ (8018638 <_fstat_r+0x20>)
 801861c:	2300      	movs	r3, #0
 801861e:	4604      	mov	r4, r0
 8018620:	4608      	mov	r0, r1
 8018622:	4611      	mov	r1, r2
 8018624:	602b      	str	r3, [r5, #0]
 8018626:	f7eb ffe9 	bl	80045fc <_fstat>
 801862a:	1c43      	adds	r3, r0, #1
 801862c:	d102      	bne.n	8018634 <_fstat_r+0x1c>
 801862e:	682b      	ldr	r3, [r5, #0]
 8018630:	b103      	cbz	r3, 8018634 <_fstat_r+0x1c>
 8018632:	6023      	str	r3, [r4, #0]
 8018634:	bd38      	pop	{r3, r4, r5, pc}
 8018636:	bf00      	nop
 8018638:	240067cc 	.word	0x240067cc

0801863c <_isatty_r>:
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	4d06      	ldr	r5, [pc, #24]	@ (8018658 <_isatty_r+0x1c>)
 8018640:	2300      	movs	r3, #0
 8018642:	4604      	mov	r4, r0
 8018644:	4608      	mov	r0, r1
 8018646:	602b      	str	r3, [r5, #0]
 8018648:	f7eb ffe8 	bl	800461c <_isatty>
 801864c:	1c43      	adds	r3, r0, #1
 801864e:	d102      	bne.n	8018656 <_isatty_r+0x1a>
 8018650:	682b      	ldr	r3, [r5, #0]
 8018652:	b103      	cbz	r3, 8018656 <_isatty_r+0x1a>
 8018654:	6023      	str	r3, [r4, #0]
 8018656:	bd38      	pop	{r3, r4, r5, pc}
 8018658:	240067cc 	.word	0x240067cc
 801865c:	00000000 	.word	0x00000000

08018660 <log>:
 8018660:	b4f0      	push	{r4, r5, r6, r7}
 8018662:	ee10 0a90 	vmov	r0, s1
 8018666:	ee10 3a10 	vmov	r3, s0
 801866a:	f04f 34ff 	mov.w	r4, #4294967295
 801866e:	429c      	cmp	r4, r3
 8018670:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018674:	4c70      	ldr	r4, [pc, #448]	@ (8018838 <log+0x1d8>)
 8018676:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801867a:	418c      	sbcs	r4, r1
 801867c:	ed2d 8b02 	vpush	{d8}
 8018680:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018684:	d35a      	bcc.n	801873c <log+0xdc>
 8018686:	4a6d      	ldr	r2, [pc, #436]	@ (801883c <log+0x1dc>)
 8018688:	4290      	cmp	r0, r2
 801868a:	bf08      	it	eq
 801868c:	2b00      	cmpeq	r3, #0
 801868e:	f000 80c4 	beq.w	801881a <log+0x1ba>
 8018692:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018696:	ee30 0b47 	vsub.f64	d0, d0, d7
 801869a:	4b69      	ldr	r3, [pc, #420]	@ (8018840 <log+0x1e0>)
 801869c:	ee20 2b00 	vmul.f64	d2, d0, d0
 80186a0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80186a4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80186a8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80186ac:	eea6 7b00 	vfma.f64	d7, d6, d0
 80186b0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80186b4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80186b8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80186bc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80186c0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80186c4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80186c8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80186cc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80186d0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80186d4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80186d8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80186dc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80186e0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80186e4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80186e8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80186ec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80186f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80186f4:	eeb0 2b47 	vmov.f64	d2, d7
 80186f8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018820 <log+0x1c0>
 80186fc:	eeb0 6b40 	vmov.f64	d6, d0
 8018700:	eeb0 3b40 	vmov.f64	d3, d0
 8018704:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018708:	eea0 6b47 	vfms.f64	d6, d0, d7
 801870c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018710:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018714:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018718:	ee30 7b43 	vsub.f64	d7, d0, d3
 801871c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018720:	eea1 7b05 	vfma.f64	d7, d1, d5
 8018724:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018728:	eea5 7b00 	vfma.f64	d7, d5, d0
 801872c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018730:	ee33 0b07 	vadd.f64	d0, d3, d7
 8018734:	ecbd 8b02 	vpop	{d8}
 8018738:	bcf0      	pop	{r4, r5, r6, r7}
 801873a:	4770      	bx	lr
 801873c:	f1a2 0410 	sub.w	r4, r2, #16
 8018740:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018744:	428c      	cmp	r4, r1
 8018746:	d923      	bls.n	8018790 <log+0x130>
 8018748:	18d9      	adds	r1, r3, r3
 801874a:	eb40 0400 	adc.w	r4, r0, r0
 801874e:	4321      	orrs	r1, r4
 8018750:	d105      	bne.n	801875e <log+0xfe>
 8018752:	ecbd 8b02 	vpop	{d8}
 8018756:	2001      	movs	r0, #1
 8018758:	bcf0      	pop	{r4, r5, r6, r7}
 801875a:	f000 b885 	b.w	8018868 <__math_divzero>
 801875e:	4939      	ldr	r1, [pc, #228]	@ (8018844 <log+0x1e4>)
 8018760:	4288      	cmp	r0, r1
 8018762:	bf08      	it	eq
 8018764:	2b00      	cmpeq	r3, #0
 8018766:	d0e5      	beq.n	8018734 <log+0xd4>
 8018768:	0413      	lsls	r3, r2, #16
 801876a:	d403      	bmi.n	8018774 <log+0x114>
 801876c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018770:	4393      	bics	r3, r2
 8018772:	d104      	bne.n	801877e <log+0x11e>
 8018774:	ecbd 8b02 	vpop	{d8}
 8018778:	bcf0      	pop	{r4, r5, r6, r7}
 801877a:	f000 b88d 	b.w	8018898 <__math_invalid>
 801877e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018828 <log+0x1c8>
 8018782:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018786:	ec53 2b17 	vmov	r2, r3, d7
 801878a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801878e:	4613      	mov	r3, r2
 8018790:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018794:	492a      	ldr	r1, [pc, #168]	@ (8018840 <log+0x1e0>)
 8018796:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801879a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801879e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80187a2:	0d15      	lsrs	r5, r2, #20
 80187a4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80187a8:	052d      	lsls	r5, r5, #20
 80187aa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80187ae:	1e1e      	subs	r6, r3, #0
 80187b0:	1b47      	subs	r7, r0, r5
 80187b2:	ec47 6b16 	vmov	d6, r6, r7
 80187b6:	1512      	asrs	r2, r2, #20
 80187b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80187bc:	ee07 2a90 	vmov	s15, r2
 80187c0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80187c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80187c8:	ed91 4b00 	vldr	d4, [r1]
 80187cc:	ee25 1b02 	vmul.f64	d1, d5, d2
 80187d0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80187d4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80187d8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80187dc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80187e0:	ed91 7b02 	vldr	d7, [r1, #8]
 80187e4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80187e8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80187ec:	ed91 7b04 	vldr	d7, [r1, #16]
 80187f0:	ed91 6b08 	vldr	d6, [r1, #32]
 80187f4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80187f8:	ed91 7b06 	vldr	d7, [r1, #24]
 80187fc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018800:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018804:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018808:	eea3 6b05 	vfma.f64	d6, d3, d5
 801880c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018810:	eea1 0b07 	vfma.f64	d0, d1, d7
 8018814:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018818:	e78c      	b.n	8018734 <log+0xd4>
 801881a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018830 <log+0x1d0>
 801881e:	e789      	b.n	8018734 <log+0xd4>
 8018820:	00000000 	.word	0x00000000
 8018824:	41a00000 	.word	0x41a00000
 8018828:	00000000 	.word	0x00000000
 801882c:	43300000 	.word	0x43300000
	...
 8018838:	000308ff 	.word	0x000308ff
 801883c:	3ff00000 	.word	0x3ff00000
 8018840:	08018dd0 	.word	0x08018dd0
 8018844:	7ff00000 	.word	0x7ff00000

08018848 <with_errno>:
 8018848:	b510      	push	{r4, lr}
 801884a:	ed2d 8b02 	vpush	{d8}
 801884e:	eeb0 8b40 	vmov.f64	d8, d0
 8018852:	4604      	mov	r4, r0
 8018854:	f7fe f884 	bl	8016960 <__errno>
 8018858:	eeb0 0b48 	vmov.f64	d0, d8
 801885c:	ecbd 8b02 	vpop	{d8}
 8018860:	6004      	str	r4, [r0, #0]
 8018862:	bd10      	pop	{r4, pc}
 8018864:	0000      	movs	r0, r0
	...

08018868 <__math_divzero>:
 8018868:	b082      	sub	sp, #8
 801886a:	2800      	cmp	r0, #0
 801886c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018870:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018874:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018878:	ed8d 7b00 	vstr	d7, [sp]
 801887c:	ed9d 0b00 	vldr	d0, [sp]
 8018880:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018890 <__math_divzero+0x28>
 8018884:	2022      	movs	r0, #34	@ 0x22
 8018886:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801888a:	b002      	add	sp, #8
 801888c:	f7ff bfdc 	b.w	8018848 <with_errno>
	...

08018898 <__math_invalid>:
 8018898:	eeb0 7b40 	vmov.f64	d7, d0
 801889c:	eeb4 7b47 	vcmp.f64	d7, d7
 80188a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80188a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80188ac:	d602      	bvs.n	80188b4 <__math_invalid+0x1c>
 80188ae:	2021      	movs	r0, #33	@ 0x21
 80188b0:	f7ff bfca 	b.w	8018848 <with_errno>
 80188b4:	4770      	bx	lr
	...

080188b8 <_init>:
 80188b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ba:	bf00      	nop
 80188bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188be:	bc08      	pop	{r3}
 80188c0:	469e      	mov	lr, r3
 80188c2:	4770      	bx	lr

080188c4 <_fini>:
 80188c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188c6:	bf00      	nop
 80188c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ca:	bc08      	pop	{r3}
 80188cc:	469e      	mov	lr, r3
 80188ce:	4770      	bx	lr
