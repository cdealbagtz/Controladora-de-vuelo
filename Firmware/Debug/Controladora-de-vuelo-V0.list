
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018898  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001200  08018b48  08018b48  00019b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019d48  08019d48  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019d50  08019d50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019d54  08019d54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b0  24000000  08019d58  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000514c  240002b0  0801a008  0001b2b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240053fc  0801a008  0001b3fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b2b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b99f  00000000  00000000  0001b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a21  00000000  00000000  00046c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002138  00000000  00000000  0004c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019c9  00000000  00000000  0004e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039105  00000000  00000000  000501a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033e4b  00000000  00000000  000892a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157aea  00000000  00000000  000bd0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00214bdb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d5c  00000000  00000000  00214c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0021e97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240002b0 	.word	0x240002b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018b30 	.word	0x08018b30

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240002b4 	.word	0x240002b4
 80002ec:	08018b30 	.word	0x08018b30

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_ldivmod>:
 8000718:	b97b      	cbnz	r3, 800073a <__aeabi_ldivmod+0x22>
 800071a:	b972      	cbnz	r2, 800073a <__aeabi_ldivmod+0x22>
 800071c:	2900      	cmp	r1, #0
 800071e:	bfbe      	ittt	lt
 8000720:	2000      	movlt	r0, #0
 8000722:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000726:	e006      	blt.n	8000736 <__aeabi_ldivmod+0x1e>
 8000728:	bf08      	it	eq
 800072a:	2800      	cmpeq	r0, #0
 800072c:	bf1c      	itt	ne
 800072e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000732:	f04f 30ff 	movne.w	r0, #4294967295
 8000736:	f000 b9ed 	b.w	8000b14 <__aeabi_idiv0>
 800073a:	f1ad 0c08 	sub.w	ip, sp, #8
 800073e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000742:	2900      	cmp	r1, #0
 8000744:	db09      	blt.n	800075a <__aeabi_ldivmod+0x42>
 8000746:	2b00      	cmp	r3, #0
 8000748:	db1a      	blt.n	8000780 <__aeabi_ldivmod+0x68>
 800074a:	f000 f885 	bl	8000858 <__udivmoddi4>
 800074e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000756:	b004      	add	sp, #16
 8000758:	4770      	bx	lr
 800075a:	4240      	negs	r0, r0
 800075c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	db1b      	blt.n	800079c <__aeabi_ldivmod+0x84>
 8000764:	f000 f878 	bl	8000858 <__udivmoddi4>
 8000768:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000770:	b004      	add	sp, #16
 8000772:	4240      	negs	r0, r0
 8000774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000778:	4252      	negs	r2, r2
 800077a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800077e:	4770      	bx	lr
 8000780:	4252      	negs	r2, r2
 8000782:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000786:	f000 f867 	bl	8000858 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4240      	negs	r0, r0
 8000796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079a:	4770      	bx	lr
 800079c:	4252      	negs	r2, r2
 800079e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a2:	f000 f859 	bl	8000858 <__udivmoddi4>
 80007a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ae:	b004      	add	sp, #16
 80007b0:	4252      	negs	r2, r2
 80007b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_uldivmod>:
 80007b8:	b953      	cbnz	r3, 80007d0 <__aeabi_uldivmod+0x18>
 80007ba:	b94a      	cbnz	r2, 80007d0 <__aeabi_uldivmod+0x18>
 80007bc:	2900      	cmp	r1, #0
 80007be:	bf08      	it	eq
 80007c0:	2800      	cmpeq	r0, #0
 80007c2:	bf1c      	itt	ne
 80007c4:	f04f 31ff 	movne.w	r1, #4294967295
 80007c8:	f04f 30ff 	movne.w	r0, #4294967295
 80007cc:	f000 b9a2 	b.w	8000b14 <__aeabi_idiv0>
 80007d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d8:	f000 f83e 	bl	8000858 <__udivmoddi4>
 80007dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <__aeabi_d2lz>:
 80007e8:	b508      	push	{r3, lr}
 80007ea:	4602      	mov	r2, r0
 80007ec:	460b      	mov	r3, r1
 80007ee:	ec43 2b17 	vmov	d7, r2, r3
 80007f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d403      	bmi.n	8000804 <__aeabi_d2lz+0x1c>
 80007fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000800:	f000 b80a 	b.w	8000818 <__aeabi_d2ulz>
 8000804:	eeb1 7b47 	vneg.f64	d7, d7
 8000808:	ec51 0b17 	vmov	r0, r1, d7
 800080c:	f000 f804 	bl	8000818 <__aeabi_d2ulz>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	bd08      	pop	{r3, pc}

08000818 <__aeabi_d2ulz>:
 8000818:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000848 <__aeabi_d2ulz+0x30>
 800081c:	ec41 0b17 	vmov	d7, r0, r1
 8000820:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000850 <__aeabi_d2ulz+0x38>
 8000824:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000828:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800082c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000830:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000838:	ee16 1a10 	vmov	r1, s12
 800083c:	ee17 0a90 	vmov	r0, s15
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	f3af 8000 	nop.w
 8000848:	00000000 	.word	0x00000000
 800084c:	3df00000 	.word	0x3df00000
 8000850:	00000000 	.word	0x00000000
 8000854:	41f00000 	.word	0x41f00000

08000858 <__udivmoddi4>:
 8000858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800085c:	9d08      	ldr	r5, [sp, #32]
 800085e:	460c      	mov	r4, r1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d14e      	bne.n	8000902 <__udivmoddi4+0xaa>
 8000864:	4694      	mov	ip, r2
 8000866:	458c      	cmp	ip, r1
 8000868:	4686      	mov	lr, r0
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	d962      	bls.n	8000936 <__udivmoddi4+0xde>
 8000870:	b14a      	cbz	r2, 8000886 <__udivmoddi4+0x2e>
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	4091      	lsls	r1, r2
 8000878:	fa20 f303 	lsr.w	r3, r0, r3
 800087c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000880:	4319      	orrs	r1, r3
 8000882:	fa00 fe02 	lsl.w	lr, r0, r2
 8000886:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800088a:	fa1f f68c 	uxth.w	r6, ip
 800088e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000892:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000896:	fb07 1114 	mls	r1, r7, r4, r1
 800089a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089e:	fb04 f106 	mul.w	r1, r4, r6
 80008a2:	4299      	cmp	r1, r3
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x64>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ae:	f080 8112 	bcs.w	8000ad6 <__udivmoddi4+0x27e>
 80008b2:	4299      	cmp	r1, r3
 80008b4:	f240 810f 	bls.w	8000ad6 <__udivmoddi4+0x27e>
 80008b8:	3c02      	subs	r4, #2
 80008ba:	4463      	add	r3, ip
 80008bc:	1a59      	subs	r1, r3, r1
 80008be:	fa1f f38e 	uxth.w	r3, lr
 80008c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c6:	fb07 1110 	mls	r1, r7, r0, r1
 80008ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ce:	fb00 f606 	mul.w	r6, r0, r6
 80008d2:	429e      	cmp	r6, r3
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x94>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 31ff 	add.w	r1, r0, #4294967295
 80008de:	f080 80fc 	bcs.w	8000ada <__udivmoddi4+0x282>
 80008e2:	429e      	cmp	r6, r3
 80008e4:	f240 80f9 	bls.w	8000ada <__udivmoddi4+0x282>
 80008e8:	4463      	add	r3, ip
 80008ea:	3802      	subs	r0, #2
 80008ec:	1b9b      	subs	r3, r3, r6
 80008ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008f2:	2100      	movs	r1, #0
 80008f4:	b11d      	cbz	r5, 80008fe <__udivmoddi4+0xa6>
 80008f6:	40d3      	lsrs	r3, r2
 80008f8:	2200      	movs	r2, #0
 80008fa:	e9c5 3200 	strd	r3, r2, [r5]
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	428b      	cmp	r3, r1
 8000904:	d905      	bls.n	8000912 <__udivmoddi4+0xba>
 8000906:	b10d      	cbz	r5, 800090c <__udivmoddi4+0xb4>
 8000908:	e9c5 0100 	strd	r0, r1, [r5]
 800090c:	2100      	movs	r1, #0
 800090e:	4608      	mov	r0, r1
 8000910:	e7f5      	b.n	80008fe <__udivmoddi4+0xa6>
 8000912:	fab3 f183 	clz	r1, r3
 8000916:	2900      	cmp	r1, #0
 8000918:	d146      	bne.n	80009a8 <__udivmoddi4+0x150>
 800091a:	42a3      	cmp	r3, r4
 800091c:	d302      	bcc.n	8000924 <__udivmoddi4+0xcc>
 800091e:	4290      	cmp	r0, r2
 8000920:	f0c0 80f0 	bcc.w	8000b04 <__udivmoddi4+0x2ac>
 8000924:	1a86      	subs	r6, r0, r2
 8000926:	eb64 0303 	sbc.w	r3, r4, r3
 800092a:	2001      	movs	r0, #1
 800092c:	2d00      	cmp	r5, #0
 800092e:	d0e6      	beq.n	80008fe <__udivmoddi4+0xa6>
 8000930:	e9c5 6300 	strd	r6, r3, [r5]
 8000934:	e7e3      	b.n	80008fe <__udivmoddi4+0xa6>
 8000936:	2a00      	cmp	r2, #0
 8000938:	f040 8090 	bne.w	8000a5c <__udivmoddi4+0x204>
 800093c:	eba1 040c 	sub.w	r4, r1, ip
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa1f f78c 	uxth.w	r7, ip
 8000948:	2101      	movs	r1, #1
 800094a:	fbb4 f6f8 	udiv	r6, r4, r8
 800094e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000952:	fb08 4416 	mls	r4, r8, r6, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb07 f006 	mul.w	r0, r7, r6
 800095e:	4298      	cmp	r0, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x11c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f106 34ff 	add.w	r4, r6, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x11a>
 800096c:	4298      	cmp	r0, r3
 800096e:	f200 80cd 	bhi.w	8000b0c <__udivmoddi4+0x2b4>
 8000972:	4626      	mov	r6, r4
 8000974:	1a1c      	subs	r4, r3, r0
 8000976:	fa1f f38e 	uxth.w	r3, lr
 800097a:	fbb4 f0f8 	udiv	r0, r4, r8
 800097e:	fb08 4410 	mls	r4, r8, r0, r4
 8000982:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000986:	fb00 f707 	mul.w	r7, r0, r7
 800098a:	429f      	cmp	r7, r3
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x148>
 800098e:	eb1c 0303 	adds.w	r3, ip, r3
 8000992:	f100 34ff 	add.w	r4, r0, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x146>
 8000998:	429f      	cmp	r7, r3
 800099a:	f200 80b0 	bhi.w	8000afe <__udivmoddi4+0x2a6>
 800099e:	4620      	mov	r0, r4
 80009a0:	1bdb      	subs	r3, r3, r7
 80009a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a6:	e7a5      	b.n	80008f4 <__udivmoddi4+0x9c>
 80009a8:	f1c1 0620 	rsb	r6, r1, #32
 80009ac:	408b      	lsls	r3, r1
 80009ae:	fa22 f706 	lsr.w	r7, r2, r6
 80009b2:	431f      	orrs	r7, r3
 80009b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009b8:	fa04 f301 	lsl.w	r3, r4, r1
 80009bc:	ea43 030c 	orr.w	r3, r3, ip
 80009c0:	40f4      	lsrs	r4, r6
 80009c2:	fa00 f801 	lsl.w	r8, r0, r1
 80009c6:	0c38      	lsrs	r0, r7, #16
 80009c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009cc:	fbb4 fef0 	udiv	lr, r4, r0
 80009d0:	fa1f fc87 	uxth.w	ip, r7
 80009d4:	fb00 441e 	mls	r4, r0, lr, r4
 80009d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009dc:	fb0e f90c 	mul.w	r9, lr, ip
 80009e0:	45a1      	cmp	r9, r4
 80009e2:	fa02 f201 	lsl.w	r2, r2, r1
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x1a6>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009ee:	f080 8084 	bcs.w	8000afa <__udivmoddi4+0x2a2>
 80009f2:	45a1      	cmp	r9, r4
 80009f4:	f240 8081 	bls.w	8000afa <__udivmoddi4+0x2a2>
 80009f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	eba4 0409 	sub.w	r4, r4, r9
 8000a02:	fa1f f983 	uxth.w	r9, r3
 8000a06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a16:	45a4      	cmp	ip, r4
 8000a18:	d907      	bls.n	8000a2a <__udivmoddi4+0x1d2>
 8000a1a:	193c      	adds	r4, r7, r4
 8000a1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a20:	d267      	bcs.n	8000af2 <__udivmoddi4+0x29a>
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d965      	bls.n	8000af2 <__udivmoddi4+0x29a>
 8000a26:	3b02      	subs	r3, #2
 8000a28:	443c      	add	r4, r7
 8000a2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a32:	eba4 040c 	sub.w	r4, r4, ip
 8000a36:	429c      	cmp	r4, r3
 8000a38:	46ce      	mov	lr, r9
 8000a3a:	469c      	mov	ip, r3
 8000a3c:	d351      	bcc.n	8000ae2 <__udivmoddi4+0x28a>
 8000a3e:	d04e      	beq.n	8000ade <__udivmoddi4+0x286>
 8000a40:	b155      	cbz	r5, 8000a58 <__udivmoddi4+0x200>
 8000a42:	ebb8 030e 	subs.w	r3, r8, lr
 8000a46:	eb64 040c 	sbc.w	r4, r4, ip
 8000a4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a4e:	40cb      	lsrs	r3, r1
 8000a50:	431e      	orrs	r6, r3
 8000a52:	40cc      	lsrs	r4, r1
 8000a54:	e9c5 6400 	strd	r6, r4, [r5]
 8000a58:	2100      	movs	r1, #0
 8000a5a:	e750      	b.n	80008fe <__udivmoddi4+0xa6>
 8000a5c:	f1c2 0320 	rsb	r3, r2, #32
 8000a60:	fa20 f103 	lsr.w	r1, r0, r3
 8000a64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a68:	fa24 f303 	lsr.w	r3, r4, r3
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	430c      	orrs	r4, r1
 8000a70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3110 	mls	r1, r8, r0, r3
 8000a84:	0c23      	lsrs	r3, r4, #16
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f107 	mul.w	r1, r0, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x24c>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a9a:	d22c      	bcs.n	8000af6 <__udivmoddi4+0x29e>
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d92a      	bls.n	8000af6 <__udivmoddi4+0x29e>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aac:	fb08 3311 	mls	r3, r8, r1, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb01 f307 	mul.w	r3, r1, r7
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x276>
 8000abc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ac4:	d213      	bcs.n	8000aee <__udivmoddi4+0x296>
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	d911      	bls.n	8000aee <__udivmoddi4+0x296>
 8000aca:	3902      	subs	r1, #2
 8000acc:	4464      	add	r4, ip
 8000ace:	1ae4      	subs	r4, r4, r3
 8000ad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ad4:	e739      	b.n	800094a <__udivmoddi4+0xf2>
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	e6f0      	b.n	80008bc <__udivmoddi4+0x64>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e706      	b.n	80008ec <__udivmoddi4+0x94>
 8000ade:	45c8      	cmp	r8, r9
 8000ae0:	d2ae      	bcs.n	8000a40 <__udivmoddi4+0x1e8>
 8000ae2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aea:	3801      	subs	r0, #1
 8000aec:	e7a8      	b.n	8000a40 <__udivmoddi4+0x1e8>
 8000aee:	4631      	mov	r1, r6
 8000af0:	e7ed      	b.n	8000ace <__udivmoddi4+0x276>
 8000af2:	4603      	mov	r3, r0
 8000af4:	e799      	b.n	8000a2a <__udivmoddi4+0x1d2>
 8000af6:	4630      	mov	r0, r6
 8000af8:	e7d4      	b.n	8000aa4 <__udivmoddi4+0x24c>
 8000afa:	46d6      	mov	lr, sl
 8000afc:	e77f      	b.n	80009fe <__udivmoddi4+0x1a6>
 8000afe:	4463      	add	r3, ip
 8000b00:	3802      	subs	r0, #2
 8000b02:	e74d      	b.n	80009a0 <__udivmoddi4+0x148>
 8000b04:	4606      	mov	r6, r0
 8000b06:	4623      	mov	r3, r4
 8000b08:	4608      	mov	r0, r1
 8000b0a:	e70f      	b.n	800092c <__udivmoddi4+0xd4>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	e730      	b.n	8000974 <__udivmoddi4+0x11c>
 8000b12:	bf00      	nop

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b2e:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <BMP280_write+0x54>)
 8000b30:	f008 fce4 	bl	80094fc <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b3e:	1df9      	adds	r1, r7, #7
 8000b40:	2364      	movs	r3, #100	@ 0x64
 8000b42:	2201      	movs	r2, #1
 8000b44:	480a      	ldr	r0, [pc, #40]	@ (8000b70 <BMP280_write+0x58>)
 8000b46:	f00b fd23 	bl	800c590 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b4a:	1db9      	adds	r1, r7, #6
 8000b4c:	2364      	movs	r3, #100	@ 0x64
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <BMP280_write+0x58>)
 8000b52:	f00b fd1d 	bl	800c590 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <BMP280_write+0x54>)
 8000b5e:	f008 fccd 	bl	80094fc <HAL_GPIO_WritePin>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	58020400 	.word	0x58020400
 8000b70:	24004a5c 	.word	0x24004a5c

08000b74 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <BMP280_read+0x54>)
 8000b90:	f008 fcb4 	bl	80094fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000b94:	f107 010f 	add.w	r1, r7, #15
 8000b98:	2364      	movs	r3, #100	@ 0x64
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <BMP280_read+0x58>)
 8000b9e:	f00b fcf7 	bl	800c590 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000ba2:	f107 010f 	add.w	r1, r7, #15
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <BMP280_read+0x58>)
 8000bac:	f00b fede 	bl	800c96c <HAL_SPI_Receive>
	BMP280_unselect();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb6:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <BMP280_read+0x54>)
 8000bb8:	f008 fca0 	bl	80094fc <HAL_GPIO_WritePin>

	return Buffer;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	24004a5c 	.word	0x24004a5c

08000bd0 <BMP280_config>:

void BMP280_config(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000bd4:	2157      	movs	r1, #87	@ 0x57
 8000bd6:	20f4      	movs	r0, #244	@ 0xf4
 8000bd8:	f7ff ff9e 	bl	8000b18 <BMP280_write>
	BMP280_write(config, 0x10);
 8000bdc:	2110      	movs	r1, #16
 8000bde:	20f5      	movs	r0, #245	@ 0xf5
 8000be0:	f7ff ff9a 	bl	8000b18 <BMP280_write>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000bee:	2388      	movs	r3, #136	@ 0x88
 8000bf0:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0c:	4843      	ldr	r0, [pc, #268]	@ (8000d1c <BMP280_calibrationData+0x134>)
 8000c0e:	f008 fc75 	bl	80094fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c12:	f107 011f 	add.w	r1, r7, #31
 8000c16:	2364      	movs	r3, #100	@ 0x64
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4841      	ldr	r0, [pc, #260]	@ (8000d20 <BMP280_calibrationData+0x138>)
 8000c1c:	f00b fcb8 	bl	800c590 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c20:	1d39      	adds	r1, r7, #4
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	2218      	movs	r2, #24
 8000c26:	483e      	ldr	r0, [pc, #248]	@ (8000d20 <BMP280_calibrationData+0x138>)
 8000c28:	f00b fea0 	bl	800c96c <HAL_SPI_Receive>
	BMP280_unselect();
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c32:	483a      	ldr	r0, [pc, #232]	@ (8000d1c <BMP280_calibrationData+0x134>)
 8000c34:	f008 fc62 	bl	80094fc <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <BMP280_calibrationData+0x13c>)
 8000c4a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <BMP280_calibrationData+0x140>)
 8000c5c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000c5e:	7a7b      	ldrb	r3, [r7, #9]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	7a3b      	ldrb	r3, [r7, #8]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <BMP280_calibrationData+0x144>)
 8000c6e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7abb      	ldrb	r3, [r7, #10]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <BMP280_calibrationData+0x148>)
 8000c82:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000c84:	7b7b      	ldrb	r3, [r7, #13]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <BMP280_calibrationData+0x14c>)
 8000c94:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	7bbb      	ldrb	r3, [r7, #14]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <BMP280_calibrationData+0x150>)
 8000ca6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000ca8:	7c7b      	ldrb	r3, [r7, #17]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7c3b      	ldrb	r3, [r7, #16]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <BMP280_calibrationData+0x154>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	7cbb      	ldrb	r3, [r7, #18]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <BMP280_calibrationData+0x158>)
 8000cca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000ccc:	7d7b      	ldrb	r3, [r7, #21]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	7d3b      	ldrb	r3, [r7, #20]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <BMP280_calibrationData+0x15c>)
 8000cdc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <BMP280_calibrationData+0x160>)
 8000cee:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000cf0:	7e7b      	ldrb	r3, [r7, #25]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	7e3b      	ldrb	r3, [r7, #24]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <BMP280_calibrationData+0x164>)
 8000d00:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d02:	7efb      	ldrb	r3, [r7, #27]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	7ebb      	ldrb	r3, [r7, #26]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <BMP280_calibrationData+0x168>)
 8000d12:	801a      	strh	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	24004a5c 	.word	0x24004a5c
 8000d24:	240002e0 	.word	0x240002e0
 8000d28:	240002e4 	.word	0x240002e4
 8000d2c:	240002e6 	.word	0x240002e6
 8000d30:	240002e2 	.word	0x240002e2
 8000d34:	240002e8 	.word	0x240002e8
 8000d38:	240002ea 	.word	0x240002ea
 8000d3c:	240002ec 	.word	0x240002ec
 8000d40:	240002ee 	.word	0x240002ee
 8000d44:	240002f0 	.word	0x240002f0
 8000d48:	240002f2 	.word	0x240002f2
 8000d4c:	240002f4 	.word	0x240002f4
 8000d50:	240002f6 	.word	0x240002f6

08000d54 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000d5a:	23f7      	movs	r3, #247	@ 0xf7
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d6c:	4817      	ldr	r0, [pc, #92]	@ (8000dcc <BMP280_readRawValues+0x78>)
 8000d6e:	f008 fbc5 	bl	80094fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000d72:	1df9      	adds	r1, r7, #7
 8000d74:	2364      	movs	r3, #100	@ 0x64
 8000d76:	2201      	movs	r2, #1
 8000d78:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <BMP280_readRawValues+0x7c>)
 8000d7a:	f00b fc09 	bl	800c590 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000d7e:	4639      	mov	r1, r7
 8000d80:	2364      	movs	r3, #100	@ 0x64
 8000d82:	2206      	movs	r2, #6
 8000d84:	4812      	ldr	r0, [pc, #72]	@ (8000dd0 <BMP280_readRawValues+0x7c>)
 8000d86:	f00b fdf1 	bl	800c96c <HAL_SPI_Receive>
	BMP280_unselect();
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d90:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <BMP280_readRawValues+0x78>)
 8000d92:	f008 fbb3 	bl	80094fc <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000d96:	783b      	ldrb	r3, [r7, #0]
 8000d98:	031a      	lsls	r2, r3, #12
 8000d9a:	787b      	ldrb	r3, [r7, #1]
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	78ba      	ldrb	r2, [r7, #2]
 8000da2:	0912      	lsrs	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	4313      	orrs	r3, r2
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <BMP280_readRawValues+0x80>)
 8000daa:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	031a      	lsls	r2, r3, #12
 8000db0:	793b      	ldrb	r3, [r7, #4]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	4313      	orrs	r3, r2
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	0912      	lsrs	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <BMP280_readRawValues+0x84>)
 8000dc0:	6013      	str	r3, [r2, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	24004a5c 	.word	0x24004a5c
 8000dd4:	240002fc 	.word	0x240002fc
 8000dd8:	240002f8 	.word	0x240002f8

08000ddc <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <BMP280_measureT+0x74>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	10da      	asrs	r2, r3, #3
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <BMP280_measureT+0x78>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <BMP280_measureT+0x7c>)
 8000df4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	12db      	asrs	r3, r3, #11
 8000dfe:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	111b      	asrs	r3, r3, #4
 8000e04:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <BMP280_measureT+0x78>)
 8000e06:	8812      	ldrh	r2, [r2, #0]
 8000e08:	1a9b      	subs	r3, r3, r2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	1112      	asrs	r2, r2, #4
 8000e0e:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <BMP280_measureT+0x78>)
 8000e10:	8809      	ldrh	r1, [r1, #0]
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	131b      	asrs	r3, r3, #12
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <BMP280_measureT+0x80>)
 8000e1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	139b      	asrs	r3, r3, #14
 8000e26:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e60 <BMP280_measureT+0x84>)
 8000e30:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <BMP280_measureT+0x84>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3380      	adds	r3, #128	@ 0x80
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	60fb      	str	r3, [r7, #12]
	return T;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	240002f8 	.word	0x240002f8
 8000e54:	240002e0 	.word	0x240002e0
 8000e58:	240002e4 	.word	0x240002e4
 8000e5c:	240002e6 	.word	0x240002e6
 8000e60:	24000300 	.word	0x24000300

08000e64 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e68:	b0ca      	sub	sp, #296	@ 0x128
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e70:	4baf      	ldr	r3, [pc, #700]	@ (8001130 <BMP280_measureP+0x2cc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	17da      	asrs	r2, r3, #31
 8000e76:	461c      	mov	r4, r3
 8000e78:	4615      	mov	r5, r2
 8000e7a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e7e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e82:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e86:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e8e:	fb03 f102 	mul.w	r1, r3, r2
 8000e92:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	18ca      	adds	r2, r1, r3
 8000ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ea4:	fba3 8903 	umull	r8, r9, r3, r3
 8000ea8:	eb02 0309 	add.w	r3, r2, r9
 8000eac:	4699      	mov	r9, r3
 8000eae:	4ba1      	ldr	r3, [pc, #644]	@ (8001134 <BMP280_measureP+0x2d0>)
 8000eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	17da      	asrs	r2, r3, #31
 8000eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ec0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	fb03 f209 	mul.w	r2, r3, r9
 8000eca:	460b      	mov	r3, r1
 8000ecc:	fb08 f303 	mul.w	r3, r8, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000edc:	460a      	mov	r2, r1
 8000ede:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000eec:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000ef0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000ef4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8001138 <BMP280_measureP+0x2d4>)
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	17da      	asrs	r2, r3, #31
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f06:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f0e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f12:	462a      	mov	r2, r5
 8000f14:	fb02 f203 	mul.w	r2, r2, r3
 8000f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	441a      	add	r2, r3
 8000f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f28:	4621      	mov	r1, r4
 8000f2a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f32:	460b      	mov	r3, r1
 8000f34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	f04f 0100 	mov.w	r1, #0
 8000f4a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f4e:	462b      	mov	r3, r5
 8000f50:	0459      	lsls	r1, r3, #17
 8000f52:	4623      	mov	r3, r4
 8000f54:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f58:	4623      	mov	r3, r4
 8000f5a:	0458      	lsls	r0, r3, #17
 8000f5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f60:	1814      	adds	r4, r2, r0
 8000f62:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f64:	414b      	adcs	r3, r1
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f68:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f6c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000f70:	4b72      	ldr	r3, [pc, #456]	@ (800113c <BMP280_measureP+0x2d8>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	17da      	asrs	r2, r3, #31
 8000f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f7e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	f04f 0100 	mov.w	r1, #0
 8000f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f8e:	00d9      	lsls	r1, r3, #3
 8000f90:	2000      	movs	r0, #0
 8000f92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f96:	1814      	adds	r4, r2, r0
 8000f98:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000f9a:	414b      	adcs	r3, r1
 8000f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f9e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fa2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000fa6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fae:	fb03 f102 	mul.w	r1, r3, r2
 8000fb2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	18ca      	adds	r2, r1, r3
 8000fc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fc4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fcc:	460b      	mov	r3, r1
 8000fce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fd6:	18d3      	adds	r3, r2, r3
 8000fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fdc:	4b58      	ldr	r3, [pc, #352]	@ (8001140 <BMP280_measureP+0x2dc>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	17da      	asrs	r2, r3, #31
 8000fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000fee:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000ff2:	462b      	mov	r3, r5
 8000ff4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000ff8:	4642      	mov	r2, r8
 8000ffa:	fb02 f203 	mul.w	r2, r2, r3
 8000ffe:	464b      	mov	r3, r9
 8001000:	4621      	mov	r1, r4
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	4622      	mov	r2, r4
 800100a:	4641      	mov	r1, r8
 800100c:	fba2 1201 	umull	r1, r2, r2, r1
 8001010:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001014:	460a      	mov	r2, r1
 8001016:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800101a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800101e:	4413      	add	r3, r2
 8001020:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	f04f 0100 	mov.w	r1, #0
 800102c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001030:	4623      	mov	r3, r4
 8001032:	0a18      	lsrs	r0, r3, #8
 8001034:	462b      	mov	r3, r5
 8001036:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800103a:	462b      	mov	r3, r5
 800103c:	1219      	asrs	r1, r3, #8
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <BMP280_measureP+0x2e0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	b21b      	sxth	r3, r3
 8001046:	17da      	asrs	r2, r3, #31
 8001048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800104c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001050:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001054:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001058:	464a      	mov	r2, r9
 800105a:	fb02 f203 	mul.w	r2, r2, r3
 800105e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001062:	4644      	mov	r4, r8
 8001064:	fb04 f303 	mul.w	r3, r4, r3
 8001068:	441a      	add	r2, r3
 800106a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800106e:	4644      	mov	r4, r8
 8001070:	fba3 4304 	umull	r4, r3, r3, r4
 8001074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001078:	4623      	mov	r3, r4
 800107a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800107e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001094:	464c      	mov	r4, r9
 8001096:	0323      	lsls	r3, r4, #12
 8001098:	4644      	mov	r4, r8
 800109a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800109e:	4644      	mov	r4, r8
 80010a0:	0322      	lsls	r2, r4, #12
 80010a2:	1884      	adds	r4, r0, r2
 80010a4:	633c      	str	r4, [r7, #48]	@ 0x30
 80010a6:	eb41 0303 	adc.w	r3, r1, r3
 80010aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80010ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010b0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80010b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010b8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010bc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <BMP280_measureP+0x2e4>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010d4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010d8:	462b      	mov	r3, r5
 80010da:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010de:	4642      	mov	r2, r8
 80010e0:	fb02 f203 	mul.w	r2, r2, r3
 80010e4:	464b      	mov	r3, r9
 80010e6:	4621      	mov	r1, r4
 80010e8:	fb01 f303 	mul.w	r3, r1, r3
 80010ec:	4413      	add	r3, r2
 80010ee:	4622      	mov	r2, r4
 80010f0:	4641      	mov	r1, r8
 80010f2:	fba2 1201 	umull	r1, r2, r2, r1
 80010f6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80010fa:	460a      	mov	r2, r1
 80010fc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001100:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001104:	4413      	add	r3, r2
 8001106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001116:	4629      	mov	r1, r5
 8001118:	104a      	asrs	r2, r1, #1
 800111a:	4629      	mov	r1, r5
 800111c:	17cb      	asrs	r3, r1, #31
 800111e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001122:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001126:	4313      	orrs	r3, r2
 8001128:	d110      	bne.n	800114c <BMP280_measureP+0x2e8>
	{
	return 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e154      	b.n	80013d8 <BMP280_measureP+0x574>
 800112e:	bf00      	nop
 8001130:	24000300 	.word	0x24000300
 8001134:	240002f0 	.word	0x240002f0
 8001138:	240002ee 	.word	0x240002ee
 800113c:	240002ec 	.word	0x240002ec
 8001140:	240002ea 	.word	0x240002ea
 8001144:	240002e8 	.word	0x240002e8
 8001148:	240002e2 	.word	0x240002e2
	}
	p = 1048576-adc_P;
 800114c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001150:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001154:	17da      	asrs	r2, r3, #31
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800115a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800115e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001162:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001166:	105b      	asrs	r3, r3, #1
 8001168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800116c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001170:	07db      	lsls	r3, r3, #31
 8001172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001176:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800117a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800117e:	4621      	mov	r1, r4
 8001180:	1a89      	subs	r1, r1, r2
 8001182:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001184:	4629      	mov	r1, r5
 8001186:	eb61 0303 	sbc.w	r3, r1, r3
 800118a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800118c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001190:	4622      	mov	r2, r4
 8001192:	462b      	mov	r3, r5
 8001194:	1891      	adds	r1, r2, r2
 8001196:	6239      	str	r1, [r7, #32]
 8001198:	415b      	adcs	r3, r3
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
 800119c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011a0:	4621      	mov	r1, r4
 80011a2:	1851      	adds	r1, r2, r1
 80011a4:	61b9      	str	r1, [r7, #24]
 80011a6:	4629      	mov	r1, r5
 80011a8:	414b      	adcs	r3, r1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011b8:	4649      	mov	r1, r9
 80011ba:	018b      	lsls	r3, r1, #6
 80011bc:	4641      	mov	r1, r8
 80011be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011c2:	4641      	mov	r1, r8
 80011c4:	018a      	lsls	r2, r1, #6
 80011c6:	4641      	mov	r1, r8
 80011c8:	1889      	adds	r1, r1, r2
 80011ca:	6139      	str	r1, [r7, #16]
 80011cc:	4649      	mov	r1, r9
 80011ce:	eb43 0101 	adc.w	r1, r3, r1
 80011d2:	6179      	str	r1, [r7, #20]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011e0:	4649      	mov	r1, r9
 80011e2:	008b      	lsls	r3, r1, #2
 80011e4:	4641      	mov	r1, r8
 80011e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011ea:	4641      	mov	r1, r8
 80011ec:	008a      	lsls	r2, r1, #2
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	4622      	mov	r2, r4
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	460b      	mov	r3, r1
 80011fc:	462a      	mov	r2, r5
 80011fe:	eb42 0303 	adc.w	r3, r2, r3
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001210:	4649      	mov	r1, r9
 8001212:	008b      	lsls	r3, r1, #2
 8001214:	4641      	mov	r1, r8
 8001216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800121a:	4641      	mov	r1, r8
 800121c:	008a      	lsls	r2, r1, #2
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	4603      	mov	r3, r0
 8001224:	4622      	mov	r2, r4
 8001226:	189b      	adds	r3, r3, r2
 8001228:	673b      	str	r3, [r7, #112]	@ 0x70
 800122a:	462b      	mov	r3, r5
 800122c:	460a      	mov	r2, r1
 800122e:	eb42 0303 	adc.w	r3, r2, r3
 8001232:	677b      	str	r3, [r7, #116]	@ 0x74
 8001234:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001238:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800123c:	f7ff fa6c 	bl	8000718 <__aeabi_ldivmod>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001248:	4b66      	ldr	r3, [pc, #408]	@ (80013e4 <BMP280_measureP+0x580>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	b21b      	sxth	r3, r3
 8001250:	17da      	asrs	r2, r3, #31
 8001252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001254:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001256:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	0b50      	lsrs	r0, r2, #13
 8001264:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001268:	1359      	asrs	r1, r3, #13
 800126a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800126e:	462b      	mov	r3, r5
 8001270:	fb00 f203 	mul.w	r2, r0, r3
 8001274:	4623      	mov	r3, r4
 8001276:	fb03 f301 	mul.w	r3, r3, r1
 800127a:	4413      	add	r3, r2
 800127c:	4622      	mov	r2, r4
 800127e:	fba2 1200 	umull	r1, r2, r2, r0
 8001282:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001286:	460a      	mov	r2, r1
 8001288:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800128c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001290:	4413      	add	r3, r2
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001296:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	0b50      	lsrs	r0, r2, #13
 80012a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012a8:	1359      	asrs	r1, r3, #13
 80012aa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80012ae:	462b      	mov	r3, r5
 80012b0:	fb00 f203 	mul.w	r2, r0, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	fb03 f301 	mul.w	r3, r3, r1
 80012ba:	4413      	add	r3, r2
 80012bc:	4622      	mov	r2, r4
 80012be:	fba2 1200 	umull	r1, r2, r2, r0
 80012c2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012c6:	460a      	mov	r2, r1
 80012c8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012d0:	4413      	add	r3, r2
 80012d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012e2:	4621      	mov	r1, r4
 80012e4:	0e4a      	lsrs	r2, r1, #25
 80012e6:	4629      	mov	r1, r5
 80012e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012ec:	4629      	mov	r1, r5
 80012ee:	164b      	asrs	r3, r1, #25
 80012f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80012f4:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <BMP280_measureP+0x584>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	17da      	asrs	r2, r3, #31
 80012fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001300:	667a      	str	r2, [r7, #100]	@ 0x64
 8001302:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001306:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800130a:	462a      	mov	r2, r5
 800130c:	fb02 f203 	mul.w	r2, r2, r3
 8001310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001314:	4621      	mov	r1, r4
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001320:	4621      	mov	r1, r4
 8001322:	fba2 1201 	umull	r1, r2, r2, r1
 8001326:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800132a:	460a      	mov	r2, r1
 800132c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001330:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001334:	4413      	add	r3, r2
 8001336:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001346:	4621      	mov	r1, r4
 8001348:	0cca      	lsrs	r2, r1, #19
 800134a:	4629      	mov	r1, r5
 800134c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001350:	4629      	mov	r1, r5
 8001352:	14cb      	asrs	r3, r1, #19
 8001354:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001358:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800135c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001360:	1884      	adds	r4, r0, r2
 8001362:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001364:	eb41 0303 	adc.w	r3, r1, r3
 8001368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800136a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800136e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001372:	4621      	mov	r1, r4
 8001374:	1889      	adds	r1, r1, r2
 8001376:	6539      	str	r1, [r7, #80]	@ 0x50
 8001378:	4629      	mov	r1, r5
 800137a:	eb43 0101 	adc.w	r1, r3, r1
 800137e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001380:	f04f 0000 	mov.w	r0, #0
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800138c:	4623      	mov	r3, r4
 800138e:	0a18      	lsrs	r0, r3, #8
 8001390:	462b      	mov	r3, r5
 8001392:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001396:	462b      	mov	r3, r5
 8001398:	1219      	asrs	r1, r3, #8
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <BMP280_measureP+0x588>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	17da      	asrs	r2, r3, #31
 80013a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013b4:	464c      	mov	r4, r9
 80013b6:	0123      	lsls	r3, r4, #4
 80013b8:	4644      	mov	r4, r8
 80013ba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013be:	4644      	mov	r4, r8
 80013c0:	0122      	lsls	r2, r4, #4
 80013c2:	1884      	adds	r4, r0, r2
 80013c4:	603c      	str	r4, [r7, #0]
 80013c6:	eb41 0303 	adc.w	r3, r1, r3
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013d0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80013d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80013d8:	4618      	mov	r0, r3
 80013da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013e4:	240002f6 	.word	0x240002f6
 80013e8:	240002f4 	.word	0x240002f4
 80013ec:	240002f2 	.word	0x240002f2

080013f0 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <BMP280_measureH+0x14>
 8001400:	2300      	movs	r3, #0
 8001402:	e03d      	b.n	8001480 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800140e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001488 <BMP280_measureH+0x98>
 8001412:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001416:	eeb0 0b46 	vmov.f64	d0, d6
 800141a:	f017 fa5d 	bl	80188d8 <log>
 800141e:	eeb0 7b40 	vmov.f64	d7, d0
 8001422:	eeb1 7b47 	vneg.f64	d7, d7
 8001426:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800142a:	ed97 7b06 	vldr	d7, [r7, #24]
 800142e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	d101      	bne.n	800143c <BMP280_measureH+0x4c>
 8001438:	2300      	movs	r3, #0
 800143a:	e021      	b.n	8001480 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001446:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001490 <BMP280_measureH+0xa0>
 800144a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800144e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001498 <BMP280_measureH+0xa8>
 8001452:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014a0 <BMP280_measureH+0xb0>
 800145a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800145e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8001462:	ed97 5b06 	vldr	d5, [r7, #24]
 8001466:	ed97 6b04 	vldr	d6, [r7, #16]
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8001472:	ed97 7b02 	vldr	d7, [r7, #8]
 8001476:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800147a:	ee17 3a90 	vmov	r3, s15
 800147e:	b29b      	uxth	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	00000000 	.word	0x00000000
 800148c:	40f8bcd0 	.word	0x40f8bcd0
 8001490:	00000000 	.word	0x00000000
 8001494:	40590000 	.word	0x40590000
 8001498:	66666666 	.word	0x66666666
 800149c:	40711266 	.word	0x40711266
 80014a0:	ca402a92 	.word	0xca402a92
 80014a4:	3fa17e3e 	.word	0x3fa17e3e

080014a8 <BMP280_init>:

void BMP280_init(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014b2:	480d      	ldr	r0, [pc, #52]	@ (80014e8 <BMP280_init+0x40>)
 80014b4:	f008 f822 	bl	80094fc <HAL_GPIO_WritePin>
	BMP280_config();
 80014b8:	f7ff fb8a 	bl	8000bd0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80014bc:	2089      	movs	r0, #137	@ 0x89
 80014be:	f7ff fb59 	bl	8000b74 <BMP280_read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <BMP280_init+0x44>)
 80014c8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80014ca:	f7ff fb8d 	bl	8000be8 <BMP280_calibrationData>
	BMP280_readRawValues();
 80014ce:	f7ff fc41 	bl	8000d54 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <BMP280_init+0x48>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc80 	bl	8000ddc <BMP280_measureT>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a03      	ldr	r2, [pc, #12]	@ (80014ec <BMP280_init+0x44>)
 80014e0:	6093      	str	r3, [r2, #8]
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	58020400 	.word	0x58020400
 80014ec:	240002cc 	.word	0x240002cc
 80014f0:	240002f8 	.word	0x240002f8

080014f4 <BMP280_calculate>:

void BMP280_calculate(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 80014f8:	2089      	movs	r0, #137	@ 0x89
 80014fa:	f7ff fb3b 	bl	8000b74 <BMP280_read>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <BMP280_calculate+0x68>)
 8001504:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001506:	f7ff fc25 	bl	8000d54 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <BMP280_calculate+0x6c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fc64 	bl	8000ddc <BMP280_measureT>
 8001514:	4603      	mov	r3, r0
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <BMP280_calculate+0x68>)
 8001518:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <BMP280_calculate+0x70>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fca0 	bl	8000e64 <BMP280_measureP>
 8001524:	4603      	mov	r3, r0
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <BMP280_calculate+0x68>)
 800152a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <BMP280_calculate+0x68>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <BMP280_calculate+0x68>)
 8001532:	6892      	ldr	r2, [r2, #8]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff5a 	bl	80013f0 <BMP280_measureH>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <BMP280_calculate+0x68>)
 8001542:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <BMP280_calculate+0x68>)
 8001546:	8a1a      	ldrh	r2, [r3, #16]
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <BMP280_calculate+0x68>)
 800154a:	8a5b      	ldrh	r3, [r3, #18]
 800154c:	429a      	cmp	r2, r3
 800154e:	d903      	bls.n	8001558 <BMP280_calculate+0x64>
 8001550:	4b02      	ldr	r3, [pc, #8]	@ (800155c <BMP280_calculate+0x68>)
 8001552:	8a1a      	ldrh	r2, [r3, #16]
 8001554:	4b01      	ldr	r3, [pc, #4]	@ (800155c <BMP280_calculate+0x68>)
 8001556:	825a      	strh	r2, [r3, #18]
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	240002cc 	.word	0x240002cc
 8001560:	240002f8 	.word	0x240002f8
 8001564:	240002fc 	.word	0x240002fc

08001568 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <bno055_delay+0x24>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4413      	add	r3, r2
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <bno055_delay+0x24>)
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	24000407 	.word	0x24000407

08001590 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80015a0:	23aa      	movs	r3, #170	@ 0xaa
 80015a2:	723b      	strb	r3, [r7, #8]
 80015a4:	2301      	movs	r3, #1
 80015a6:	727b      	strb	r3, [r7, #9]
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	72bb      	strb	r3, [r7, #10]
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 80015b0:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <BNO_Read+0x44>)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80015b6:	f107 0108 	add.w	r1, r7, #8
 80015ba:	2364      	movs	r3, #100	@ 0x64
 80015bc:	2204      	movs	r2, #4
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <BNO_Read+0x48>)
 80015c0:	f00d f980 	bl	800e8c4 <HAL_UART_Transmit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000304 	.word	0x24000304
 80015d8:	24004dd8 	.word	0x24004dd8

080015dc <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80015ec:	23aa      	movs	r3, #170	@ 0xaa
 80015ee:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 80015f0:	2300      	movs	r3, #0
 80015f2:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001600:	f107 0108 	add.w	r1, r7, #8
 8001604:	2364      	movs	r3, #100	@ 0x64
 8001606:	2205      	movs	r2, #5
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <BNO_Write+0x40>)
 800160a:	f00d f95b 	bl	800e8c4 <HAL_UART_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24004dd8 	.word	0x24004dd8

08001620 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001620:	b580      	push	{r7, lr}
 8001622:	b0c4      	sub	sp, #272	@ 0x110
 8001624:	af00      	add	r7, sp, #0
 8001626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800162a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001634:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001638:	4602      	mov	r2, r0
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001640:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001644:	460a      	mov	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8001648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001650:	22aa      	movs	r2, #170	@ 0xaa
 8001652:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8001654:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8001660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001668:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800166c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8001674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800167c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001680:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8001688:	2300      	movs	r3, #0
 800168a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800168e:	e015      	b.n	80016bc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8001690:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001694:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001698:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	441a      	add	r2, r3
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a4:	3304      	adds	r3, #4
 80016a6:	7811      	ldrb	r1, [r2, #0]
 80016a8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016ac:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80016b2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b6:	3301      	adds	r3, #1
 80016b8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016c4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3e0      	bcc.n	8001690 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80016ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3304      	adds	r3, #4
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 010c 	add.w	r1, r7, #12
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	4806      	ldr	r0, [pc, #24]	@ (8001700 <BNO_Write_MB+0xe0>)
 80016e6:	f00d f8ed 	bl	800e8c4 <HAL_UART_Transmit>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 80016f0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24004dd8 	.word	0x24004dd8
 8001704:	00000000 	.word	0x00000000

08001708 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800170c:	4ba6      	ldr	r3, [pc, #664]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b55      	cmp	r3, #85	@ 0x55
 8001712:	f300 8247 	bgt.w	8001ba4 <BNO_Page0Adress+0x49c>
 8001716:	2b35      	cmp	r3, #53	@ 0x35
 8001718:	da0a      	bge.n	8001730 <BNO_Page0Adress+0x28>
 800171a:	2b08      	cmp	r3, #8
 800171c:	f000 814a 	beq.w	80019b4 <BNO_Page0Adress+0x2ac>
 8001720:	2b08      	cmp	r3, #8
 8001722:	f300 823f 	bgt.w	8001ba4 <BNO_Page0Adress+0x49c>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d04c      	beq.n	80017c4 <BNO_Page0Adress+0xbc>
 800172a:	2b07      	cmp	r3, #7
 800172c:	d065      	beq.n	80017fa <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800172e:	e239      	b.n	8001ba4 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001730:	3b35      	subs	r3, #53	@ 0x35
 8001732:	2b20      	cmp	r3, #32
 8001734:	f200 8236 	bhi.w	8001ba4 <BNO_Page0Adress+0x49c>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <BNO_Page0Adress+0x38>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001843 	.word	0x08001843
 8001744:	08001ba5 	.word	0x08001ba5
 8001748:	08001ba5 	.word	0x08001ba5
 800174c:	08001ba5 	.word	0x08001ba5
 8001750:	0800181f 	.word	0x0800181f
 8001754:	08001ba5 	.word	0x08001ba5
 8001758:	0800180d 	.word	0x0800180d
 800175c:	08001ba5 	.word	0x08001ba5
 8001760:	08001831 	.word	0x08001831
 8001764:	08001ba5 	.word	0x08001ba5
 8001768:	08001ba5 	.word	0x08001ba5
 800176c:	08001ba5 	.word	0x08001ba5
 8001770:	08001ba5 	.word	0x08001ba5
 8001774:	08001ba5 	.word	0x08001ba5
 8001778:	08001ba5 	.word	0x08001ba5
 800177c:	08001ba5 	.word	0x08001ba5
 8001780:	08001ba5 	.word	0x08001ba5
 8001784:	08001ba5 	.word	0x08001ba5
 8001788:	08001ba5 	.word	0x08001ba5
 800178c:	08001ba5 	.word	0x08001ba5
 8001790:	08001ba5 	.word	0x08001ba5
 8001794:	08001ba5 	.word	0x08001ba5
 8001798:	08001ba5 	.word	0x08001ba5
 800179c:	08001ba5 	.word	0x08001ba5
 80017a0:	08001ba5 	.word	0x08001ba5
 80017a4:	08001ba5 	.word	0x08001ba5
 80017a8:	08001ba5 	.word	0x08001ba5
 80017ac:	08001ba5 	.word	0x08001ba5
 80017b0:	08001ba5 	.word	0x08001ba5
 80017b4:	08001ba5 	.word	0x08001ba5
 80017b8:	08001ba5 	.word	0x08001ba5
 80017bc:	08001ba5 	.word	0x08001ba5
 80017c0:	0800189b 	.word	0x0800189b
			if(BNO_RxBuffer[1] != 160) return;
 80017c4:	4b78      	ldr	r3, [pc, #480]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80017ca:	f040 81ed 	bne.w	8001ba8 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80017ce:	4b76      	ldr	r3, [pc, #472]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017d0:	785a      	ldrb	r2, [r3, #1]
 80017d2:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80017d4:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80017d6:	4b74      	ldr	r3, [pc, #464]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017d8:	789a      	ldrb	r2, [r3, #2]
 80017da:	4b74      	ldr	r3, [pc, #464]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80017dc:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80017de:	4b72      	ldr	r3, [pc, #456]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017e0:	78da      	ldrb	r2, [r3, #3]
 80017e2:	4b72      	ldr	r3, [pc, #456]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80017e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 80017e8:	4b6f      	ldr	r3, [pc, #444]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017ea:	791a      	ldrb	r2, [r3, #4]
 80017ec:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80017ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80017f2:	4b6f      	ldr	r3, [pc, #444]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 80017f4:	220b      	movs	r2, #11
 80017f6:	701a      	strb	r2, [r3, #0]
			break;
 80017f8:	e1d7      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 80017fa:	4b6b      	ldr	r3, [pc, #428]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80017fc:	785a      	ldrb	r2, [r3, #1]
 80017fe:	4b6b      	ldr	r3, [pc, #428]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 8001806:	220b      	movs	r2, #11
 8001808:	701a      	strb	r2, [r3, #0]
			break;
 800180a:	e1ce      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800180e:	785a      	ldrb	r2, [r3, #1]
 8001810:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001812:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001816:	4b66      	ldr	r3, [pc, #408]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 8001818:	220b      	movs	r2, #11
 800181a:	701a      	strb	r2, [r3, #0]
			break;
 800181c:	e1c5      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 800181e:	4b62      	ldr	r3, [pc, #392]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001820:	785a      	ldrb	r2, [r3, #1]
 8001822:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001824:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001828:	4b61      	ldr	r3, [pc, #388]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 800182a:	220b      	movs	r2, #11
 800182c:	701a      	strb	r2, [r3, #0]
			break;
 800182e:	e1bc      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001830:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001832:	785a      	ldrb	r2, [r3, #1]
 8001834:	4b5d      	ldr	r3, [pc, #372]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001836:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 800183a:	4b5d      	ldr	r3, [pc, #372]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 800183c:	220b      	movs	r2, #11
 800183e:	701a      	strb	r2, [r3, #0]
			break;
 8001840:	e1b3      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8001842:	4b59      	ldr	r3, [pc, #356]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001844:	785a      	ldrb	r2, [r3, #1]
 8001846:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001848:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800184c:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001856:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800185a:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800186a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 800186e:	4b4e      	ldr	r3, [pc, #312]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800187e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8001882:	4b49      	ldr	r3, [pc, #292]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800188e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 8001892:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <BNO_Page0Adress+0x2a8>)
 8001894:	220b      	movs	r2, #11
 8001896:	701a      	strb	r2, [r3, #0]
			break;
 8001898:	e187      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 800189a:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80018ae:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80018c6:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018cc:	799b      	ldrb	r3, [r3, #6]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	4b35      	ldr	r3, [pc, #212]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b33      	ldr	r3, [pc, #204]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80018de:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80018e2:	4b31      	ldr	r3, [pc, #196]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018e4:	7a1b      	ldrb	r3, [r3, #8]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018ec:	79db      	ldrb	r3, [r3, #7]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80018f6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 80018fc:	7a9b      	ldrb	r3, [r3, #10]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001904:	7a5b      	ldrb	r3, [r3, #9]
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800190e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001914:	7b1b      	ldrb	r3, [r3, #12]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800191c:	7adb      	ldrb	r3, [r3, #11]
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001926:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800192c:	7b9b      	ldrb	r3, [r3, #14]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001934:	7b5b      	ldrb	r3, [r3, #13]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21a      	sxth	r2, r3
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800193e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001944:	7c1b      	ldrb	r3, [r3, #16]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800194c:	7bdb      	ldrb	r3, [r3, #15]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001956:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800195c:	7c9b      	ldrb	r3, [r3, #18]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001964:	7c5b      	ldrb	r3, [r3, #17]
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 800196e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001974:	7d1b      	ldrb	r3, [r3, #20]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800197c:	7cdb      	ldrb	r3, [r3, #19]
 800197e:	b21b      	sxth	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b21b      	sxth	r3, r3
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 8001988:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 800198e:	7d9b      	ldrb	r3, [r3, #22]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <BNO_Page0Adress+0x2a0>)
 8001996:	7d5b      	ldrb	r3, [r3, #21]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21b      	sxth	r3, r3
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b02      	ldr	r3, [pc, #8]	@ (80019ac <BNO_Page0Adress+0x2a4>)
 80019a2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 80019a6:	e100      	b.n	8001baa <BNO_Page0Adress+0x4a2>
 80019a8:	24000304 	.word	0x24000304
 80019ac:	24000410 	.word	0x24000410
 80019b0:	24000405 	.word	0x24000405
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80019b4:	4b82      	ldr	r3, [pc, #520]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b80      	ldr	r3, [pc, #512]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019ce:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001bb8 <BNO_Page0Adress+0x4b0>
 80019d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019d6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 80019d8:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80019dc:	4b78      	ldr	r3, [pc, #480]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 80019de:	791b      	ldrb	r3, [r3, #4]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 80019e6:	78db      	ldrb	r3, [r3, #3]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019f6:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001bb8 <BNO_Page0Adress+0x4b0>
 80019fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019fe:	4b71      	ldr	r3, [pc, #452]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001a00:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a04:	4b6e      	ldr	r3, [pc, #440]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a06:	799b      	ldrb	r3, [r3, #6]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a0e:	795b      	ldrb	r3, [r3, #5]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001bb8 <BNO_Page0Adress+0x4b0>
 8001a22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a26:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001a28:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001a2c:	4b64      	ldr	r3, [pc, #400]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a2e:	7a1b      	ldrb	r3, [r3, #8]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a36:	79db      	ldrb	r3, [r3, #7]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a46:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001a50:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001a54:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a56:	7a9b      	ldrb	r3, [r3, #10]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	4b58      	ldr	r3, [pc, #352]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a5e:	7a5b      	ldrb	r3, [r3, #9]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a6e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a76:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001a78:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001a7c:	4b50      	ldr	r3, [pc, #320]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a7e:	7b1b      	ldrb	r3, [r3, #12]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001a86:	7adb      	ldrb	r3, [r3, #11]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a96:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001aa0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001aa4:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001aa6:	7b9b      	ldrb	r3, [r3, #14]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001aae:	7b5b      	ldrb	r3, [r3, #13]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001abe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ac2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001ac8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001acc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001ace:	7c1b      	ldrb	r3, [r3, #16]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001ad6:	7bdb      	ldrb	r3, [r3, #15]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae6:	eeb1 6b47 	vneg.f64	d6, d7
 8001aea:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001af4:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001af8:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001afa:	7c9b      	ldrb	r3, [r3, #18]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b02:	7c5b      	ldrb	r3, [r3, #17]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b12:	eeb1 6b47 	vneg.f64	d6, d7
 8001b16:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001b20:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b26:	7d1b      	ldrb	r3, [r3, #20]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b2e:	7cdb      	ldrb	r3, [r3, #19]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b3e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001b48:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b4e:	7d9b      	ldrb	r3, [r3, #22]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b56:	7d5b      	ldrb	r3, [r3, #21]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b66:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001b70:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b76:	7e1b      	ldrb	r3, [r3, #24]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <BNO_Page0Adress+0x4b8>)
 8001b7e:	7ddb      	ldrb	r3, [r3, #23]
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b8e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <BNO_Page0Adress+0x4bc>)
 8001b98:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <BNO_Page0Adress+0x4c0>)
 8001b9e:	220b      	movs	r2, #11
 8001ba0:	701a      	strb	r2, [r3, #0]
			break;
 8001ba2:	e002      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			break;
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001ba8:	bf00      	nop
	}
}
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40590000 	.word	0x40590000
 8001bc0:	24000304 	.word	0x24000304
 8001bc4:	24000410 	.word	0x24000410
 8001bc8:	24000405 	.word	0x24000405

08001bcc <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <BNO_Page1Adress+0x2c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d108      	bne.n	8001bea <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <BNO_Page1Adress+0x2c>)
 8001bda:	785a      	ldrb	r2, [r3, #1]
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <BNO_Page1Adress+0x30>)
 8001bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <BNO_Page1Adress+0x34>)
 8001be4:	220b      	movs	r2, #11
 8001be6:	701a      	strb	r2, [r3, #0]
			break;
 8001be8:	e000      	b.n	8001bec <BNO_Page1Adress+0x20>

		default:
			break;
 8001bea:	bf00      	nop
	}
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	24000304 	.word	0x24000304
 8001bfc:	24000410 	.word	0x24000410
 8001c00:	24000405 	.word	0x24000405

08001c04 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <BNO_EmptyingBuffer+0x30>)
 8001c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <BNO_EmptyingBuffer+0x14>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d003      	beq.n	8001c1e <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c16:	e005      	b.n	8001c24 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001c18:	f7ff fd76 	bl	8001708 <BNO_Page0Adress>
			break;
 8001c1c:	e002      	b.n	8001c24 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001c1e:	f7ff ffd5 	bl	8001bcc <BNO_Page1Adress>
			break;
 8001c22:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001c24:	22ff      	movs	r2, #255	@ 0xff
 8001c26:	2100      	movs	r1, #0
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <BNO_EmptyingBuffer+0x34>)
 8001c2a:	f014 ffa8 	bl	8016b7e <memset>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000410 	.word	0x24000410
 8001c38:	24000304 	.word	0x24000304

08001c3c <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001c40:	2120      	movs	r1, #32
 8001c42:	203f      	movs	r0, #63	@ 0x3f
 8001c44:	f7ff fcca 	bl	80015dc <BNO_Write>
	bno055_delay(70);
 8001c48:	2046      	movs	r0, #70	@ 0x46
 8001c4a:	f7ff fc8d 	bl	8001568 <bno055_delay>
	IMU.ID = 0x00;
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <BNO_SWReset+0x24>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <BNO_SWReset+0x28>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000410 	.word	0x24000410
 8001c64:	24000408 	.word	0x24000408

08001c68 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4619      	mov	r1, r3
 8001c76:	203d      	movs	r0, #61	@ 0x3d
 8001c78:	f7ff fcb0 	bl	80015dc <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001c82:	2005      	movs	r0, #5
 8001c84:	f7ff fc70 	bl	8001568 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001c88:	e002      	b.n	8001c90 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff fc6c 	bl	8001568 <bno055_delay>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ffe3 	bl	8001c68 <bno055_setOperationMode>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001caa:	200c      	movs	r0, #12
 8001cac:	f7ff ffdc 	bl	8001c68 <bno055_setOperationMode>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001cb8:	2116      	movs	r1, #22
 8001cba:	2055      	movs	r0, #85	@ 0x55
 8001cbc:	f7ff fc68 	bl	8001590 <BNO_Read>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2206      	movs	r2, #6
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <BNO_SetCalibrationData+0x60>)
 8001cd2:	f015 f86c 	bl	8016dae <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	3306      	adds	r3, #6
 8001cda:	2206      	movs	r2, #6
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4812      	ldr	r0, [pc, #72]	@ (8001d28 <BNO_SetCalibrationData+0x64>)
 8001ce0:	f015 f865 	bl	8016dae <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	330c      	adds	r3, #12
 8001ce8:	2206      	movs	r2, #6
 8001cea:	4619      	mov	r1, r3
 8001cec:	480f      	ldr	r0, [pc, #60]	@ (8001d2c <BNO_SetCalibrationData+0x68>)
 8001cee:	f015 f85e 	bl	8016dae <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	3312      	adds	r3, #18
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <BNO_SetCalibrationData+0x6c>)
 8001cfc:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d00:	463b      	mov	r3, r7
 8001d02:	3314      	adds	r3, #20
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <BNO_SetCalibrationData+0x6c>)
 8001d0a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d0e:	463b      	mov	r3, r7
 8001d10:	461a      	mov	r2, r3
 8001d12:	2116      	movs	r1, #22
 8001d14:	2055      	movs	r0, #85	@ 0x55
 8001d16:	f7ff fc83 	bl	8001620 <BNO_Write_MB>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	240004a6 	.word	0x240004a6
 8001d28:	240004a0 	.word	0x240004a0
 8001d2c:	2400049a 	.word	0x2400049a
 8001d30:	24000410 	.word	0x24000410

08001d34 <BNO_Init>:

void BNO_Init(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	4808      	ldr	r0, [pc, #32]	@ (8001d60 <BNO_Init+0x2c>)
 8001d3e:	f007 fbdd 	bl	80094fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d48:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <BNO_Init+0x30>)
 8001d4a:	f007 fbd7 	bl	80094fc <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001d4e:	2064      	movs	r0, #100	@ 0x64
 8001d50:	f7ff fc0a 	bl	8001568 <bno055_delay>

	BNO_CurrentState = Reset;
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <BNO_Init+0x34>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58020c00 	.word	0x58020c00
 8001d64:	58020400 	.word	0x58020400
 8001d68:	24000408 	.word	0x24000408

08001d6c <BNO_Config>:

void BNO_Config(void){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <BNO_Config+0x88>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d839      	bhi.n	8001dec <BNO_Config+0x80>
 8001d78:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <BNO_Config+0x14>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001da1 	.word	0x08001da1
 8001d88:	08001dad 	.word	0x08001dad
 8001d8c:	08001dcf 	.word	0x08001dcf
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	203f      	movs	r0, #63	@ 0x3f
 8001d94:	f7ff fc22 	bl	80015dc <BNO_Write>
			ConfigFlag = 1;
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <BNO_Config+0x88>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
			break;
 8001d9e:	e026      	b.n	8001dee <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001da0:	f7ff ff7a 	bl	8001c98 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <BNO_Config+0x88>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
			break;
 8001daa:	e020      	b.n	8001dee <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001dac:	2101      	movs	r1, #1
 8001dae:	203d      	movs	r0, #61	@ 0x3d
 8001db0:	f7ff fbee 	bl	8001590 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <BNO_Config+0x8c>)
 8001db6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <BNO_Config+0x88>)
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001dc4:	e013      	b.n	8001dee <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <BNO_Config+0x88>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
			break;
 8001dcc:	e00f      	b.n	8001dee <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001dce:	2104      	movs	r1, #4
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fbdd 	bl	8001590 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <BNO_Config+0x8c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ddc:	d102      	bne.n	8001de4 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <BNO_Config+0x90>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <BNO_Config+0x88>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
			break;
 8001dea:	e000      	b.n	8001dee <BNO_Config+0x82>
		default:
			break;
 8001dec:	bf00      	nop
	}

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	240004b0 	.word	0x240004b0
 8001df8:	24000410 	.word	0x24000410
 8001dfc:	24000408 	.word	0x24000408

08001e00 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e04:	4b3d      	ldr	r3, [pc, #244]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	d870      	bhi.n	8001eee <BNO_CalibrationStatus+0xee>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <BNO_CalibrationStatus+0x14>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e35 	.word	0x08001e35
 8001e18:	08001e45 	.word	0x08001e45
 8001e1c:	08001e51 	.word	0x08001e51
 8001e20:	08001e89 	.word	0x08001e89
 8001e24:	08001ea3 	.word	0x08001ea3
 8001e28:	08001eaf 	.word	0x08001eaf
 8001e2c:	08001ed1 	.word	0x08001ed1
 8001e30:	08001ee3 	.word	0x08001ee3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e34:	2100      	movs	r1, #0
 8001e36:	203f      	movs	r0, #63	@ 0x3f
 8001e38:	f7ff fbd0 	bl	80015dc <BNO_Write>
			CalibrationFlag = 1;
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
			break;
 8001e42:	e059      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001e44:	f7ff ff2f 	bl	8001ca6 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001e48:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	701a      	strb	r2, [r3, #0]
			break;
 8001e4e:	e053      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e50:	2101      	movs	r1, #1
 8001e52:	203d      	movs	r0, #61	@ 0x3d
 8001e54:	f7ff fb9c 	bl	8001590 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001e58:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <BNO_CalibrationStatus+0x100>)
 8001e5a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d10e      	bne.n	8001e80 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <BNO_CalibrationStatus+0x104>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <BNO_CalibrationStatus+0x108>)
 8001e72:	2203      	movs	r2, #3
 8001e74:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001e76:	e03f      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001e78:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	701a      	strb	r2, [r3, #0]
			break;
 8001e7e:	e03b      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
			break;
 8001e86:	e037      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2035      	movs	r0, #53	@ 0x35
 8001e8c:	f7ff fb80 	bl	8001590 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <BNO_CalibrationStatus+0x100>)
 8001e92:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d12d      	bne.n	8001ef6 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ea0:	e029      	b.n	8001ef6 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001ea2:	f7ff fef9 	bl	8001c98 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001ea8:	2205      	movs	r2, #5
 8001eaa:	701a      	strb	r2, [r3, #0]
			break;
 8001eac:	e024      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	203d      	movs	r0, #61	@ 0x3d
 8001eb2:	f7ff fb6d 	bl	8001590 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <BNO_CalibrationStatus+0x100>)
 8001eb8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001ec2:	2206      	movs	r2, #6
 8001ec4:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001ec6:	e017      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001eca:	2204      	movs	r2, #4
 8001ecc:	701a      	strb	r2, [r3, #0]
			break;
 8001ece:	e013      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001ed0:	f7ff fef0 	bl	8001cb4 <BNO_GetCalibrationData>
			Calibrated = 1;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <BNO_CalibrationStatus+0x104>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
			break;
 8001ee0:	e00a      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001ee2:	f7ff feef 	bl	8001cc4 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
			break;
 8001eec:	e004      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001eee:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <BNO_CalibrationStatus+0xfc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			break;
 8001ef4:	e000      	b.n	8001ef8 <BNO_CalibrationStatus+0xf8>
			break;
 8001ef6:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	240004b1 	.word	0x240004b1
 8001f00:	24000410 	.word	0x24000410
 8001f04:	24000000 	.word	0x24000000
 8001f08:	24000408 	.word	0x24000408

08001f0c <BNO_GetData>:

void BNO_GetData(void){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f10:	2118      	movs	r1, #24
 8001f12:	2008      	movs	r0, #8
 8001f14:	f7ff fb3c 	bl	8001590 <BNO_Read>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <BNO_Receive+0xbc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <BNO_Receive+0xc0>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2bff      	cmp	r3, #255	@ 0xff
 8001f32:	d027      	beq.n	8001f84 <BNO_Receive+0x68>
 8001f34:	2bff      	cmp	r3, #255	@ 0xff
 8001f36:	dc46      	bgt.n	8001fc6 <BNO_Receive+0xaa>
 8001f38:	2bee      	cmp	r3, #238	@ 0xee
 8001f3a:	d017      	beq.n	8001f6c <BNO_Receive+0x50>
 8001f3c:	2bee      	cmp	r3, #238	@ 0xee
 8001f3e:	dc42      	bgt.n	8001fc6 <BNO_Receive+0xaa>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <BNO_Receive+0x2e>
 8001f44:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f46:	d00a      	beq.n	8001f5e <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001f48:	e03d      	b.n	8001fc6 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f4e:	d002      	beq.n	8001f56 <BNO_Receive+0x3a>
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	2bee      	cmp	r3, #238	@ 0xee
 8001f54:	d139      	bne.n	8001fca <BNO_Receive+0xae>
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <BNO_Receive+0xc0>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	7013      	strb	r3, [r2, #0]
			break;
 8001f5c:	e035      	b.n	8001fca <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001f5e:	4a20      	ldr	r2, [pc, #128]	@ (8001fe0 <BNO_Receive+0xc4>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <BNO_Receive+0xc0>)
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	701a      	strb	r2, [r3, #0]
			break;
 8001f6a:	e031      	b.n	8001fd0 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <BNO_Receive+0xc8>)
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <BNO_Receive+0xc0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001f78:	22ff      	movs	r2, #255	@ 0xff
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	481a      	ldr	r0, [pc, #104]	@ (8001fe8 <BNO_Receive+0xcc>)
 8001f7e:	f014 fdfe 	bl	8016b7e <memset>
			break;
 8001f82:	e025      	b.n	8001fd0 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <BNO_Receive+0xd0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4917      	ldr	r1, [pc, #92]	@ (8001fe8 <BNO_Receive+0xcc>)
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <BNO_Receive+0xd0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <BNO_Receive+0xd0>)
 8001f9a:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001f9c:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <BNO_Receive+0xd0>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <BNO_Receive+0xc4>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d112      	bne.n	8001fce <BNO_Receive+0xb2>
				Counter = 0;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <BNO_Receive+0xd0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <BNO_Receive+0xc4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <BNO_Receive+0xc0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <BNO_Receive+0xc8>)
 8001fbc:	220b      	movs	r2, #11
 8001fbe:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001fc0:	f7ff fe20 	bl	8001c04 <BNO_EmptyingBuffer>
			break;
 8001fc4:	e003      	b.n	8001fce <BNO_Receive+0xb2>
			break;
 8001fc6:	bf00      	nop
 8001fc8:	e002      	b.n	8001fd0 <BNO_Receive+0xb4>
			break;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <BNO_Receive+0xb4>
			break;
 8001fce:	bf00      	nop
	}
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24000406 	.word	0x24000406
 8001fdc:	24000404 	.word	0x24000404
 8001fe0:	240004b2 	.word	0x240004b2
 8001fe4:	24000405 	.word	0x24000405
 8001fe8:	24000304 	.word	0x24000304
 8001fec:	240004b3 	.word	0x240004b3

08001ff0 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <BNO_FaultManager+0x38>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d912      	bls.n	8002022 <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 8001ffc:	480b      	ldr	r0, [pc, #44]	@ (800202c <BNO_FaultManager+0x3c>)
 8001ffe:	f003 fc33 	bl	8005868 <Reset_UART>
		BNO_ComsCounter = 0;
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <BNO_FaultManager+0x38>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <BNO_FaultManager+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800200e:	2201      	movs	r2, #1
 8002010:	4908      	ldr	r1, [pc, #32]	@ (8002034 <BNO_FaultManager+0x44>)
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <BNO_FaultManager+0x3c>)
 8002014:	f00c fce4 	bl	800e9e0 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002018:	22ff      	movs	r2, #255	@ 0xff
 800201a:	2100      	movs	r1, #0
 800201c:	4806      	ldr	r0, [pc, #24]	@ (8002038 <BNO_FaultManager+0x48>)
 800201e:	f014 fdae 	bl	8016b7e <memset>
	}
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24000406 	.word	0x24000406
 800202c:	24004dd8 	.word	0x24004dd8
 8002030:	24000404 	.word	0x24000404
 8002034:	24000403 	.word	0x24000403
 8002038:	24000304 	.word	0x24000304

0800203c <BNO_Tasks>:

void BNO_Tasks(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <BNO_Tasks+0x74>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d128      	bne.n	800209a <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <BNO_Tasks+0x78>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d81c      	bhi.n	800208a <BNO_Tasks+0x4e>
 8002050:	a201      	add	r2, pc, #4	@ (adr r2, 8002058 <BNO_Tasks+0x1c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	0800206d 	.word	0x0800206d
 800205c:	08002079 	.word	0x08002079
 8002060:	0800207f 	.word	0x0800207f
 8002064:	08002085 	.word	0x08002085
 8002068:	08002073 	.word	0x08002073
			case Init:
				BNO_Init();
 800206c:	f7ff fe62 	bl	8001d34 <BNO_Init>
				break;
 8002070:	e00c      	b.n	800208c <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8002072:	f7ff fde3 	bl	8001c3c <BNO_SWReset>
			break;
 8002076:	e009      	b.n	800208c <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8002078:	f7ff fe78 	bl	8001d6c <BNO_Config>
				break;
 800207c:	e006      	b.n	800208c <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 800207e:	f7ff febf 	bl	8001e00 <BNO_CalibrationStatus>
				break;
 8002082:	e003      	b.n	800208c <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8002084:	f7ff ff42 	bl	8001f0c <BNO_GetData>
				break;
 8002088:	e000      	b.n	800208c <BNO_Tasks+0x50>

			default:
				break;
 800208a:	bf00      	nop
		}
		++BNO_ComsCounter;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <BNO_Tasks+0x7c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <BNO_Tasks+0x7c>)
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e005      	b.n	80020a6 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <BNO_Tasks+0x74>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <BNO_Tasks+0x74>)
 80020a4:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80020a6:	f7ff ffa3 	bl	8001ff0 <BNO_FaultManager>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24000407 	.word	0x24000407
 80020b4:	24000408 	.word	0x24000408
 80020b8:	24000406 	.word	0x24000406

080020bc <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80020bc:	b084      	sub	sp, #16
 80020be:	b590      	push	{r4, r7, lr}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	f107 001c 	add.w	r0, r7, #28
 80020ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80020ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <LED_blink+0x20>
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d010      	beq.n	80020fc <LED_blink+0x40>
 80020da:	e01f      	b.n	800211c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80020dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80020de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d31f      	bcc.n	8002124 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	8c39      	ldrh	r1, [r7, #32]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f007 fa06 	bl	80094fc <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80020fa:	e013      	b.n	8002124 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80020fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80020fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002100:	429a      	cmp	r2, r3
 8002102:	d311      	bcc.n	8002128 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	8c39      	ldrh	r1, [r7, #32]
 8002108:	2200      	movs	r2, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f007 f9f6 	bl	80094fc <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800211a:	e005      	b.n	8002128 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8002122:	e002      	b.n	800212a <LED_blink+0x6e>
				break;
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <LED_blink+0x6e>
				break;
 8002128:	bf00      	nop
		}

	LED.count++;
 800212a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800212c:	3301      	adds	r3, #1
 800212e:	b29b      	uxth	r3, r3
 8002130:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	461c      	mov	r4, r3
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800214a:	b004      	add	sp, #16
 800214c:	4770      	bx	lr

0800214e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800214e:	b084      	sub	sp, #16
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	f107 001c 	add.w	r0, r7, #28
 800215c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8002160:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002164:	2b01      	cmp	r3, #1
 8002166:	d117      	bne.n	8002198 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8002168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <LED_Rutine+0x28>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d007      	beq.n	8002184 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8002174:	e018      	b.n	80021a8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	8c39      	ldrh	r1, [r7, #32]
 800217a:	2201      	movs	r2, #1
 800217c:	4618      	mov	r0, r3
 800217e:	f007 f9bd 	bl	80094fc <HAL_GPIO_WritePin>
				break;
 8002182:	e011      	b.n	80021a8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8002184:	f107 001c 	add.w	r0, r7, #28
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002192:	f7ff ff93 	bl	80020bc <LED_blink>
				break;
 8002196:	e007      	b.n	80021a8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	8c39      	ldrh	r1, [r7, #32]
 800219c:	2200      	movs	r2, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f007 f9ac 	bl	80094fc <HAL_GPIO_WritePin>
		LED.count = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	461c      	mov	r4, r3
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021c0:	b004      	add	sp, #16
 80021c2:	4770      	bx	lr

080021c4 <LED_Tasks>:

void LED_Tasks (void){
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80021ca:	4c24      	ldr	r4, [pc, #144]	@ (800225c <LED_Tasks+0x98>)
 80021cc:	4638      	mov	r0, r7
 80021ce:	4b23      	ldr	r3, [pc, #140]	@ (800225c <LED_Tasks+0x98>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	9200      	str	r2, [sp, #0]
 80021d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d6:	f7ff ffba 	bl	800214e <LED_Rutine>
 80021da:	463b      	mov	r3, r7
 80021dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80021e2:	4c1e      	ldr	r4, [pc, #120]	@ (800225c <LED_Tasks+0x98>)
 80021e4:	4638      	mov	r0, r7
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <LED_Tasks+0x98>)
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	9200      	str	r2, [sp, #0]
 80021ec:	3310      	adds	r3, #16
 80021ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f0:	f7ff ffad 	bl	800214e <LED_Rutine>
 80021f4:	3410      	adds	r4, #16
 80021f6:	463b      	mov	r3, r7
 80021f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 80021fe:	4c17      	ldr	r4, [pc, #92]	@ (800225c <LED_Tasks+0x98>)
 8002200:	4638      	mov	r0, r7
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <LED_Tasks+0x98>)
 8002204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002206:	9200      	str	r2, [sp, #0]
 8002208:	3320      	adds	r3, #32
 800220a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800220c:	f7ff ff9f 	bl	800214e <LED_Rutine>
 8002210:	3420      	adds	r4, #32
 8002212:	463b      	mov	r3, r7
 8002214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800221a:	4c10      	ldr	r4, [pc, #64]	@ (800225c <LED_Tasks+0x98>)
 800221c:	4638      	mov	r0, r7
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <LED_Tasks+0x98>)
 8002220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002222:	9200      	str	r2, [sp, #0]
 8002224:	3330      	adds	r3, #48	@ 0x30
 8002226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002228:	f7ff ff91 	bl	800214e <LED_Rutine>
 800222c:	3430      	adds	r4, #48	@ 0x30
 800222e:	463b      	mov	r3, r7
 8002230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8002236:	4c09      	ldr	r4, [pc, #36]	@ (800225c <LED_Tasks+0x98>)
 8002238:	4638      	mov	r0, r7
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <LED_Tasks+0x98>)
 800223c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800223e:	9200      	str	r2, [sp, #0]
 8002240:	3340      	adds	r3, #64	@ 0x40
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	f7ff ff83 	bl	800214e <LED_Rutine>
 8002248:	3440      	adds	r4, #64	@ 0x40
 800224a:	463b      	mov	r3, r7
 800224c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800224e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	24000004 	.word	0x24000004

08002260 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8002264:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <PWM_Assing+0xb0>)
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800226c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800226e:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <PWM_Assing+0xb0>)
 8002270:	885a      	ldrh	r2, [r3, #2]
 8002272:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <PWM_Assing+0xb0>)
 800227a:	889a      	ldrh	r2, [r3, #4]
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <PWM_Assing+0xb4>)
 800227e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8002280:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <PWM_Assing+0xb0>)
 8002282:	88da      	ldrh	r2, [r3, #6]
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <PWM_Assing+0xb4>)
 8002286:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <PWM_Assing+0xb0>)
 800228a:	891a      	ldrh	r2, [r3, #8]
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <PWM_Assing+0xb8>)
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <PWM_Assing+0xb0>)
 8002292:	895a      	ldrh	r2, [r3, #10]
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <PWM_Assing+0xb8>)
 8002296:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <PWM_Assing+0xb0>)
 800229a:	899a      	ldrh	r2, [r3, #12]
 800229c:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <PWM_Assing+0xb8>)
 800229e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <PWM_Assing+0xb0>)
 80022a2:	89da      	ldrh	r2, [r3, #14]
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <PWM_Assing+0xb8>)
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <PWM_Assing+0xb0>)
 80022aa:	8a1a      	ldrh	r2, [r3, #16]
 80022ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <PWM_Assing+0xb0>)
 80022b4:	8a5a      	ldrh	r2, [r3, #18]
 80022b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ba:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4817      	ldr	r0, [pc, #92]	@ (800231c <PWM_Assing+0xbc>)
 80022c0:	f00b fb10 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80022c4:	2104      	movs	r1, #4
 80022c6:	4815      	ldr	r0, [pc, #84]	@ (800231c <PWM_Assing+0xbc>)
 80022c8:	f00b fb0c 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022cc:	2108      	movs	r1, #8
 80022ce:	4813      	ldr	r0, [pc, #76]	@ (800231c <PWM_Assing+0xbc>)
 80022d0:	f00b fb08 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80022d4:	210c      	movs	r1, #12
 80022d6:	4811      	ldr	r0, [pc, #68]	@ (800231c <PWM_Assing+0xbc>)
 80022d8:	f00b fb04 	bl	800d8e4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022dc:	2100      	movs	r1, #0
 80022de:	4810      	ldr	r0, [pc, #64]	@ (8002320 <PWM_Assing+0xc0>)
 80022e0:	f00b fb00 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80022e4:	2104      	movs	r1, #4
 80022e6:	480e      	ldr	r0, [pc, #56]	@ (8002320 <PWM_Assing+0xc0>)
 80022e8:	f00b fafc 	bl	800d8e4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <PWM_Assing+0xc4>)
 80022f0:	f00b faf8 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022f4:	2104      	movs	r1, #4
 80022f6:	480b      	ldr	r0, [pc, #44]	@ (8002324 <PWM_Assing+0xc4>)
 80022f8:	f00b faf4 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80022fc:	2108      	movs	r1, #8
 80022fe:	4809      	ldr	r0, [pc, #36]	@ (8002324 <PWM_Assing+0xc4>)
 8002300:	f00b faf0 	bl	800d8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002304:	210c      	movs	r1, #12
 8002306:	4807      	ldr	r0, [pc, #28]	@ (8002324 <PWM_Assing+0xc4>)
 8002308:	f00b faec 	bl	800d8e4 <HAL_TIM_PWM_Start>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	24000054 	.word	0x24000054
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	24004ae8 	.word	0x24004ae8
 8002320:	24004b34 	.word	0x24004b34
 8002324:	24004b80 	.word	0x24004b80

08002328 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <SBUS_Receive+0x8c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <SBUS_Receive+0x18>
 800233a:	2b01      	cmp	r3, #1
 800233c:	d017      	beq.n	800236e <SBUS_Receive+0x46>
 800233e:	e02f      	b.n	80023a0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d10f      	bne.n	8002366 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <SBUS_Receive+0x90>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <SBUS_Receive+0x94>)
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <SBUS_Receive+0x8c>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <SBUS_Receive+0x90>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <SBUS_Receive+0x90>)
 8002362:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8002364:	e021      	b.n	80023aa <SBUS_Receive+0x82>
				RxCount = 0;
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <SBUS_Receive+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			break;
 800236c:	e01d      	b.n	80023aa <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <SBUS_Receive+0x90>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4a11      	ldr	r2, [pc, #68]	@ (80023bc <SBUS_Receive+0x94>)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <SBUS_Receive+0x90>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <SBUS_Receive+0x90>)
 8002384:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <SBUS_Receive+0x90>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b18      	cmp	r3, #24
 800238c:	d10c      	bne.n	80023a8 <SBUS_Receive+0x80>
				RxCount = 0;
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <SBUS_Receive+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <SBUS_Receive+0x8c>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 800239a:	f000 f845 	bl	8002428 <SBUS_getData>
			}
			break;
 800239e:	e003      	b.n	80023a8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SBUS_Receive+0x8c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
			break;
 80023a6:	e000      	b.n	80023aa <SBUS_Receive+0x82>
			break;
 80023a8:	bf00      	nop
	}
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	240004ce 	.word	0x240004ce
 80023b8:	240004cf 	.word	0x240004cf
 80023bc:	240004b4 	.word	0x240004b4

080023c0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80023c4:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023c6:	885a      	ldrh	r2, [r3, #2]
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023ca:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023ce:	889a      	ldrh	r2, [r3, #4]
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023d2:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023d6:	88da      	ldrh	r2, [r3, #6]
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023da:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 80023dc:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023de:	891a      	ldrh	r2, [r3, #8]
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023e2:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023e6:	895a      	ldrh	r2, [r3, #10]
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023ea:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023ee:	899a      	ldrh	r2, [r3, #12]
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023f2:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023f6:	89da      	ldrh	r2, [r3, #14]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <Temp_BypassFunct+0x64>)
 80023fa:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <Temp_BypassFunct+0x60>)
 80023fe:	8a1a      	ldrh	r2, [r3, #16]
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <Temp_BypassFunct+0x64>)
 8002402:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <Temp_BypassFunct+0x60>)
 8002406:	8a5a      	ldrh	r2, [r3, #18]
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <Temp_BypassFunct+0x64>)
 800240a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <Temp_BypassFunct+0x60>)
 800240e:	8a9a      	ldrh	r2, [r3, #20]
 8002410:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <Temp_BypassFunct+0x64>)
 8002412:	825a      	strh	r2, [r3, #18]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	24000068 	.word	0x24000068
 8002424:	24000054 	.word	0x24000054

08002428 <SBUS_getData>:

void SBUS_getData(void){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 800242c:	4b95      	ldr	r3, [pc, #596]	@ (8002684 <SBUS_getData+0x25c>)
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	b21a      	sxth	r2, r3
 8002432:	4b94      	ldr	r3, [pc, #592]	@ (8002684 <SBUS_getData+0x25c>)
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21b      	sxth	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b21b      	sxth	r3, r3
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b90      	ldr	r3, [pc, #576]	@ (8002688 <SBUS_getData+0x260>)
 8002448:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800244a:	4b8e      	ldr	r3, [pc, #568]	@ (8002684 <SBUS_getData+0x25c>)
 800244c:	789b      	ldrb	r3, [r3, #2]
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	b21a      	sxth	r2, r3
 8002454:	4b8b      	ldr	r3, [pc, #556]	@ (8002684 <SBUS_getData+0x25c>)
 8002456:	78db      	ldrb	r3, [r3, #3]
 8002458:	015b      	lsls	r3, r3, #5
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21b      	sxth	r3, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b87      	ldr	r3, [pc, #540]	@ (8002688 <SBUS_getData+0x260>)
 800246a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 800246c:	4b85      	ldr	r3, [pc, #532]	@ (8002684 <SBUS_getData+0x25c>)
 800246e:	78db      	ldrb	r3, [r3, #3]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	b2db      	uxtb	r3, r3
 8002474:	b21a      	sxth	r2, r3
 8002476:	4b83      	ldr	r3, [pc, #524]	@ (8002684 <SBUS_getData+0x25c>)
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	b21b      	sxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b21a      	sxth	r2, r3
 8002482:	4b80      	ldr	r3, [pc, #512]	@ (8002684 <SBUS_getData+0x25c>)
 8002484:	795b      	ldrb	r3, [r3, #5]
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	b21b      	sxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b21b      	sxth	r3, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <SBUS_getData+0x260>)
 8002498:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 800249a:	4b7a      	ldr	r3, [pc, #488]	@ (8002684 <SBUS_getData+0x25c>)
 800249c:	795b      	ldrb	r3, [r3, #5]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	4b77      	ldr	r3, [pc, #476]	@ (8002684 <SBUS_getData+0x25c>)
 80024a6:	799b      	ldrb	r3, [r3, #6]
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b73      	ldr	r3, [pc, #460]	@ (8002688 <SBUS_getData+0x260>)
 80024ba:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80024bc:	4b71      	ldr	r3, [pc, #452]	@ (8002684 <SBUS_getData+0x25c>)
 80024be:	799b      	ldrb	r3, [r3, #6]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002684 <SBUS_getData+0x25c>)
 80024c8:	79db      	ldrb	r3, [r3, #7]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21b      	sxth	r3, r3
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b6b      	ldr	r3, [pc, #428]	@ (8002688 <SBUS_getData+0x260>)
 80024dc:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 80024de:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <SBUS_getData+0x25c>)
 80024e0:	79db      	ldrb	r3, [r3, #7]
 80024e2:	09db      	lsrs	r3, r3, #7
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <SBUS_getData+0x25c>)
 80024ea:	7a1b      	ldrb	r3, [r3, #8]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <SBUS_getData+0x25c>)
 80024f6:	7a5b      	ldrb	r3, [r3, #9]
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	b29b      	uxth	r3, r3
 8002502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b5f      	ldr	r3, [pc, #380]	@ (8002688 <SBUS_getData+0x260>)
 800250a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 800250c:	4b5d      	ldr	r3, [pc, #372]	@ (8002684 <SBUS_getData+0x25c>)
 800250e:	7a5b      	ldrb	r3, [r3, #9]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	b21a      	sxth	r2, r3
 8002516:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <SBUS_getData+0x25c>)
 8002518:	7a9b      	ldrb	r3, [r3, #10]
 800251a:	019b      	lsls	r3, r3, #6
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21b      	sxth	r3, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <SBUS_getData+0x260>)
 800252c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800252e:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <SBUS_getData+0x25c>)
 8002530:	7a9b      	ldrb	r3, [r3, #10]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	b2db      	uxtb	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b52      	ldr	r3, [pc, #328]	@ (8002684 <SBUS_getData+0x25c>)
 800253a:	7adb      	ldrb	r3, [r3, #11]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b21b      	sxth	r3, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b4e      	ldr	r3, [pc, #312]	@ (8002688 <SBUS_getData+0x260>)
 800254e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <SBUS_getData+0x25c>)
 8002552:	7b1b      	ldrb	r3, [r3, #12]
 8002554:	b21a      	sxth	r2, r3
 8002556:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <SBUS_getData+0x25c>)
 8002558:	7b5b      	ldrb	r3, [r3, #13]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21b      	sxth	r3, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <SBUS_getData+0x260>)
 800256c:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800256e:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <SBUS_getData+0x25c>)
 8002570:	7b5b      	ldrb	r3, [r3, #13]
 8002572:	08db      	lsrs	r3, r3, #3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	b21a      	sxth	r2, r3
 8002578:	4b42      	ldr	r3, [pc, #264]	@ (8002684 <SBUS_getData+0x25c>)
 800257a:	7b9b      	ldrb	r3, [r3, #14]
 800257c:	015b      	lsls	r3, r3, #5
 800257e:	b21b      	sxth	r3, r3
 8002580:	4313      	orrs	r3, r2
 8002582:	b21b      	sxth	r3, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b3e      	ldr	r3, [pc, #248]	@ (8002688 <SBUS_getData+0x260>)
 800258e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8002590:	4b3c      	ldr	r3, [pc, #240]	@ (8002684 <SBUS_getData+0x25c>)
 8002592:	7b9b      	ldrb	r3, [r3, #14]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	b2db      	uxtb	r3, r3
 8002598:	b21a      	sxth	r2, r3
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <SBUS_getData+0x25c>)
 800259c:	7bdb      	ldrb	r3, [r3, #15]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	4b37      	ldr	r3, [pc, #220]	@ (8002684 <SBUS_getData+0x25c>)
 80025a8:	7c1b      	ldrb	r3, [r3, #16]
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <SBUS_getData+0x260>)
 80025bc:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <SBUS_getData+0x25c>)
 80025c0:	7c1b      	ldrb	r3, [r3, #16]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002684 <SBUS_getData+0x25c>)
 80025ca:	7c5b      	ldrb	r3, [r3, #17]
 80025cc:	01db      	lsls	r3, r3, #7
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <SBUS_getData+0x260>)
 80025de:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 80025e0:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <SBUS_getData+0x25c>)
 80025e2:	7c5b      	ldrb	r3, [r3, #17]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <SBUS_getData+0x25c>)
 80025ec:	7c9b      	ldrb	r3, [r3, #18]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <SBUS_getData+0x260>)
 8002600:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <SBUS_getData+0x25c>)
 8002604:	7c9b      	ldrb	r3, [r3, #18]
 8002606:	09db      	lsrs	r3, r3, #7
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b21a      	sxth	r2, r3
 800260c:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <SBUS_getData+0x25c>)
 800260e:	7cdb      	ldrb	r3, [r3, #19]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21a      	sxth	r2, r3
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <SBUS_getData+0x25c>)
 800261a:	7d1b      	ldrb	r3, [r3, #20]
 800261c:	025b      	lsls	r3, r3, #9
 800261e:	b21b      	sxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b21b      	sxth	r3, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <SBUS_getData+0x260>)
 800262e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <SBUS_getData+0x25c>)
 8002632:	7d1b      	ldrb	r3, [r3, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	b21a      	sxth	r2, r3
 800263a:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <SBUS_getData+0x25c>)
 800263c:	7d5b      	ldrb	r3, [r3, #21]
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	b21b      	sxth	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b21b      	sxth	r3, r3
 8002646:	b29b      	uxth	r3, r3
 8002648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <SBUS_getData+0x260>)
 8002650:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <SBUS_getData+0x25c>)
 8002654:	7d5b      	ldrb	r3, [r3, #21]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	b2db      	uxtb	r3, r3
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <SBUS_getData+0x25c>)
 800265e:	7d9b      	ldrb	r3, [r3, #22]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	b29b      	uxth	r3, r3
 800266a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SBUS_getData+0x260>)
 8002672:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SBUS_getData+0x260>)
 8002676:	885b      	ldrh	r3, [r3, #2]
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002680:	e00a      	b.n	8002698 <SBUS_getData+0x270>
 8002682:	bf00      	nop
 8002684:	240004b4 	.word	0x240004b4
 8002688:	24000068 	.word	0x24000068
 800268c:	43b00000 	.word	0x43b00000
 8002690:	44a80000 	.word	0x44a80000
 8002694:	447a0000 	.word	0x447a0000
 8002698:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800268c <SBUS_getData+0x264>
 800269c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026a0:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8002690 <SBUS_getData+0x268>
 80026a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8002694 <SBUS_getData+0x26c>
 80026ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b4:	ee17 3a90 	vmov	r3, s15
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80026be:	b29a      	uxth	r2, r3
 80026c0:	4bd1      	ldr	r3, [pc, #836]	@ (8002a08 <SBUS_getData+0x5e0>)
 80026c2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80026c4:	4bd0      	ldr	r3, [pc, #832]	@ (8002a08 <SBUS_getData+0x5e0>)
 80026c6:	889b      	ldrh	r3, [r3, #4]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002a0c <SBUS_getData+0x5e4>
 80026d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026d8:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002a10 <SBUS_getData+0x5e8>
 80026dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e0:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002a14 <SBUS_getData+0x5ec>
 80026e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ec:	ee17 3a90 	vmov	r3, s15
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4bc3      	ldr	r3, [pc, #780]	@ (8002a08 <SBUS_getData+0x5e0>)
 80026fa:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 80026fc:	4bc2      	ldr	r3, [pc, #776]	@ (8002a08 <SBUS_getData+0x5e0>)
 80026fe:	88db      	ldrh	r3, [r3, #6]
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002708:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002a0c <SBUS_getData+0x5e4>
 800270c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002710:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002a10 <SBUS_getData+0x5e8>
 8002714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002718:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002a14 <SBUS_getData+0x5ec>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	b29b      	uxth	r3, r3
 800272a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800272e:	b29a      	uxth	r2, r3
 8002730:	4bb5      	ldr	r3, [pc, #724]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002732:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8002734:	4bb4      	ldr	r3, [pc, #720]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002736:	891b      	ldrh	r3, [r3, #8]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002740:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002a0c <SBUS_getData+0x5e4>
 8002744:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002748:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002a10 <SBUS_getData+0x5e8>
 800274c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002750:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002a14 <SBUS_getData+0x5ec>
 8002754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275c:	ee17 3a90 	vmov	r3, s15
 8002760:	b29b      	uxth	r3, r3
 8002762:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002766:	b29a      	uxth	r2, r3
 8002768:	4ba7      	ldr	r3, [pc, #668]	@ (8002a08 <SBUS_getData+0x5e0>)
 800276a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 800276c:	4ba6      	ldr	r3, [pc, #664]	@ (8002a08 <SBUS_getData+0x5e0>)
 800276e:	895b      	ldrh	r3, [r3, #10]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002778:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002a0c <SBUS_getData+0x5e4>
 800277c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002780:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002a10 <SBUS_getData+0x5e8>
 8002784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002788:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002a14 <SBUS_getData+0x5ec>
 800278c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002794:	ee17 3a90 	vmov	r3, s15
 8002798:	b29b      	uxth	r3, r3
 800279a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b99      	ldr	r3, [pc, #612]	@ (8002a08 <SBUS_getData+0x5e0>)
 80027a2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80027a4:	4b98      	ldr	r3, [pc, #608]	@ (8002a08 <SBUS_getData+0x5e0>)
 80027a6:	899b      	ldrh	r3, [r3, #12]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002a0c <SBUS_getData+0x5e4>
 80027b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027b8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002a10 <SBUS_getData+0x5e8>
 80027bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002a14 <SBUS_getData+0x5ec>
 80027c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027cc:	ee17 3a90 	vmov	r3, s15
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002a08 <SBUS_getData+0x5e0>)
 80027da:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 80027dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a08 <SBUS_getData+0x5e0>)
 80027de:	89db      	ldrh	r3, [r3, #14]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002a0c <SBUS_getData+0x5e4>
 80027ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027f0:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002a10 <SBUS_getData+0x5e8>
 80027f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f8:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002a14 <SBUS_getData+0x5ec>
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	b29b      	uxth	r3, r3
 800280a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002812:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8002814:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002816:	8a1b      	ldrh	r3, [r3, #16]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002820:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a0c <SBUS_getData+0x5e4>
 8002824:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002828:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002a10 <SBUS_getData+0x5e8>
 800282c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002830:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002a14 <SBUS_getData+0x5ec>
 8002834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283c:	ee17 3a90 	vmov	r3, s15
 8002840:	b29b      	uxth	r3, r3
 8002842:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <SBUS_getData+0x5e0>)
 800284a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800284c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <SBUS_getData+0x5e0>)
 800284e:	8a5b      	ldrh	r3, [r3, #18]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002858:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002a0c <SBUS_getData+0x5e4>
 800285c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002860:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002a10 <SBUS_getData+0x5e8>
 8002864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002868:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002a14 <SBUS_getData+0x5ec>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	b29b      	uxth	r3, r3
 800287a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002882:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8002884:	4b60      	ldr	r3, [pc, #384]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002886:	8a9b      	ldrh	r3, [r3, #20]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002890:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002a0c <SBUS_getData+0x5e4>
 8002894:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002898:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002a10 <SBUS_getData+0x5e8>
 800289c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002a14 <SBUS_getData+0x5ec>
 80028a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ac:	ee17 3a90 	vmov	r3, s15
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <SBUS_getData+0x5e0>)
 80028ba:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80028bc:	4b52      	ldr	r3, [pc, #328]	@ (8002a08 <SBUS_getData+0x5e0>)
 80028be:	8adb      	ldrh	r3, [r3, #22]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002a0c <SBUS_getData+0x5e4>
 80028cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028d0:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a10 <SBUS_getData+0x5e8>
 80028d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002a14 <SBUS_getData+0x5ec>
 80028dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e4:	ee17 3a90 	vmov	r3, s15
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b45      	ldr	r3, [pc, #276]	@ (8002a08 <SBUS_getData+0x5e0>)
 80028f2:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 80028f4:	4b44      	ldr	r3, [pc, #272]	@ (8002a08 <SBUS_getData+0x5e0>)
 80028f6:	8b1b      	ldrh	r3, [r3, #24]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002900:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002a0c <SBUS_getData+0x5e4>
 8002904:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002908:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002a10 <SBUS_getData+0x5e8>
 800290c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002910:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002a14 <SBUS_getData+0x5ec>
 8002914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800291c:	ee17 3a90 	vmov	r3, s15
 8002920:	b29b      	uxth	r3, r3
 8002922:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <SBUS_getData+0x5e0>)
 800292a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <SBUS_getData+0x5e0>)
 800292e:	8b5b      	ldrh	r3, [r3, #26]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002938:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002a0c <SBUS_getData+0x5e4>
 800293c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002940:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002a10 <SBUS_getData+0x5e8>
 8002944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002948:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002a14 <SBUS_getData+0x5ec>
 800294c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002954:	ee17 3a90 	vmov	r3, s15
 8002958:	b29b      	uxth	r3, r3
 800295a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002962:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002964:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <SBUS_getData+0x5e0>)
 8002966:	8b9b      	ldrh	r3, [r3, #28]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002a0c <SBUS_getData+0x5e4>
 8002974:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002978:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002a10 <SBUS_getData+0x5e8>
 800297c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002980:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002a14 <SBUS_getData+0x5ec>
 8002984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298c:	ee17 3a90 	vmov	r3, s15
 8002990:	b29b      	uxth	r3, r3
 8002992:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <SBUS_getData+0x5e0>)
 800299a:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 800299c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <SBUS_getData+0x5e0>)
 800299e:	8bdb      	ldrh	r3, [r3, #30]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002a0c <SBUS_getData+0x5e4>
 80029ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029b0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002a10 <SBUS_getData+0x5e8>
 80029b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002a14 <SBUS_getData+0x5ec>
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c4:	ee17 3a90 	vmov	r3, s15
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <SBUS_getData+0x5e0>)
 80029d2:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <SBUS_getData+0x5e0>)
 80029d6:	8c1b      	ldrh	r3, [r3, #32]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a0c <SBUS_getData+0x5e4>
 80029e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002a10 <SBUS_getData+0x5e8>
 80029ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a14 <SBUS_getData+0x5ec>
 80029f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029fc:	ee17 3a90 	vmov	r3, s15
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a06:	e007      	b.n	8002a18 <SBUS_getData+0x5f0>
 8002a08:	24000068 	.word	0x24000068
 8002a0c:	43b00000 	.word	0x43b00000
 8002a10:	44a80000 	.word	0x44a80000
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a1c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a20:	7dda      	ldrb	r2, [r3, #23]
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a24:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002a26:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a28:	7ddb      	ldrb	r3, [r3, #23]
 8002a2a:	2b07      	cmp	r3, #7
 8002a2c:	d90a      	bls.n	8002a44 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a30:	7ddb      	ldrb	r3, [r3, #23]
 8002a32:	3b08      	subs	r3, #8
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a38:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a3c:	2235      	movs	r2, #53	@ 0x35
 8002a3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002a42:	e003      	b.n	8002a4c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8002a44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a46:	22aa      	movs	r2, #170	@ 0xaa
 8002a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a4e:	7ddb      	ldrb	r3, [r3, #23]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d90a      	bls.n	8002a6a <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8002a54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a56:	7ddb      	ldrb	r3, [r3, #23]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a5e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a62:	2210      	movs	r2, #16
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a68:	e003      	b.n	8002a72 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a6c:	22aa      	movs	r2, #170	@ 0xaa
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a74:	7ddb      	ldrb	r3, [r3, #23]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d90a      	bls.n	8002a90 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a7c:	7ddb      	ldrb	r3, [r3, #23]
 8002a7e:	3b02      	subs	r3, #2
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a84:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002a86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002a8e:	e003      	b.n	8002a98 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <SBUS_getData+0x6a0>)
 8002a9a:	7ddb      	ldrb	r3, [r3, #23]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002aa8:	e003      	b.n	8002ab2 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <SBUS_getData+0x69c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002aba:	f7ff fc81 	bl	80023c0 <Temp_BypassFunct>

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	24000068 	.word	0x24000068
 8002ac8:	240004b4 	.word	0x240004b4

08002acc <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002ad2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002ad6:	2bff      	cmp	r3, #255	@ 0xff
 8002ad8:	d00c      	beq.n	8002af4 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002adc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002ae6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002aec:	22aa      	movs	r2, #170	@ 0xaa
 8002aee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002af2:	e007      	b.n	8002b04 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <SBUS_IntegrityVerification+0x44>)
 8002afe:	2235      	movs	r2, #53	@ 0x35
 8002b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	24000068 	.word	0x24000068

08002b14 <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002b24:	2300      	movs	r3, #0
 8002b26:	73bb      	strb	r3, [r7, #14]
 8002b28:	e011      	b.n	8002b4e <ASCII2uint8+0x3a>
		inter *= 10;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002b36:	7bbb      	ldrb	r3, [r7, #14]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	4413      	add	r3, r2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3b30      	subs	r3, #48	@ 0x30
 8002b46:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73bb      	strb	r3, [r7, #14]
 8002b4e:	7bba      	ldrb	r2, [r7, #14]
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3e9      	bcc.n	8002b2a <ASCII2uint8+0x16>
	}
	return inter;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <uint82ASCII+0xac>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	4a20      	ldr	r2, [pc, #128]	@ (8002c14 <uint82ASCII+0xb0>)
 8002b94:	fb82 1203 	smull	r1, r2, r2, r3
 8002b98:	1092      	asrs	r2, r2, #2
 8002b9a:	17db      	asrs	r3, r3, #31
 8002b9c:	1ad2      	subs	r2, r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	00d2      	lsls	r2, r2, #3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	0149      	lsls	r1, r1, #5
 8002bc2:	1ac9      	subs	r1, r1, r3
 8002bc4:	0089      	lsls	r1, r1, #2
 8002bc6:	1acb      	subs	r3, r1, r3
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	b2d9      	uxtb	r1, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	440a      	add	r2, r1
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e00c      	b.n	8002bfc <uint82ASCII+0x98>
		Output[n] +=48;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	440b      	add	r3, r1
 8002bf0:	3230      	adds	r2, #48	@ 0x30
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d9ef      	bls.n	8002be2 <uint82ASCII+0x7e>
	}
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	51eb851f 	.word	0x51eb851f
 8002c14:	66666667 	.word	0x66666667

08002c18 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002c1c:	480c      	ldr	r0, [pc, #48]	@ (8002c50 <ConfigFile_Create+0x38>)
 8002c1e:	f012 f9d4 	bl	8014fca <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002c22:	2213      	movs	r2, #19
 8002c24:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <ConfigFile_Create+0x38>)
 8002c26:	480b      	ldr	r0, [pc, #44]	@ (8002c54 <ConfigFile_Create+0x3c>)
 8002c28:	f011 f9fe 	bl	8014028 <f_open>

	f_printf(&Config, "Version: ");
 8002c2c:	490a      	ldr	r1, [pc, #40]	@ (8002c58 <ConfigFile_Create+0x40>)
 8002c2e:	4809      	ldr	r0, [pc, #36]	@ (8002c54 <ConfigFile_Create+0x3c>)
 8002c30:	f012 fc1e 	bl	8015470 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002c34:	4909      	ldr	r1, [pc, #36]	@ (8002c5c <ConfigFile_Create+0x44>)
 8002c36:	4807      	ldr	r0, [pc, #28]	@ (8002c54 <ConfigFile_Create+0x3c>)
 8002c38:	f012 fc1a 	bl	8015470 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002c3c:	4908      	ldr	r1, [pc, #32]	@ (8002c60 <ConfigFile_Create+0x48>)
 8002c3e:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <ConfigFile_Create+0x3c>)
 8002c40:	f012 fc16 	bl	8015470 <f_printf>
	f_close(&Config);
 8002c44:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <ConfigFile_Create+0x3c>)
 8002c46:	f011 ff28 	bl	8014a9a <f_close>
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	240000b0 	.word	0x240000b0
 8002c54:	2400253c 	.word	0x2400253c
 8002c58:	08018b48 	.word	0x08018b48
 8002c5c:	24000090 	.word	0x24000090
 8002c60:	08018b54 	.word	0x08018b54

08002c64 <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002c72:	2213      	movs	r2, #19
 8002c74:	492b      	ldr	r1, [pc, #172]	@ (8002d24 <SD_ConfigFileInit+0xc0>)
 8002c76:	482c      	ldr	r0, [pc, #176]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002c78:	f011 f9d6 	bl	8014028 <f_open>

	f_lseek(&Config, Config_FWVersion);
 8002c7c:	2109      	movs	r1, #9
 8002c7e:	482a      	ldr	r0, [pc, #168]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002c80:	f011 ff7f 	bl	8014b82 <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 8002c84:	4639      	mov	r1, r7
 8002c86:	4b29      	ldr	r3, [pc, #164]	@ (8002d2c <SD_ConfigFileInit+0xc8>)
 8002c88:	2205      	movs	r2, #5
 8002c8a:	4827      	ldr	r0, [pc, #156]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002c8c:	f011 fb94 	bl	80143b8 <f_read>

	f_close(&Config);
 8002c90:	4825      	ldr	r0, [pc, #148]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002c92:	f011 ff02 	bl	8014a9a <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	71fb      	strb	r3, [r7, #7]
 8002c9a:	e010      	b.n	8002cbe <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	443b      	add	r3, r7
 8002ca2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4921      	ldr	r1, [pc, #132]	@ (8002d30 <SD_ConfigFileInit+0xcc>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d003      	beq.n	8002cb8 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002cb0:	f7ff ffb2 	bl	8002c18 <ConfigFile_Create>
			n = 5;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d9eb      	bls.n	8002c9c <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002cc4:	2213      	movs	r2, #19
 8002cc6:	4917      	ldr	r1, [pc, #92]	@ (8002d24 <SD_ConfigFileInit+0xc0>)
 8002cc8:	4817      	ldr	r0, [pc, #92]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002cca:	f011 f9ad 	bl	8014028 <f_open>

	f_lseek(&Config, 26);
 8002cce:	211a      	movs	r1, #26
 8002cd0:	4815      	ldr	r0, [pc, #84]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002cd2:	f011 ff56 	bl	8014b82 <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <SD_ConfigFileInit+0xc8>)
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4916      	ldr	r1, [pc, #88]	@ (8002d34 <SD_ConfigFileInit+0xd0>)
 8002cdc:	4812      	ldr	r0, [pc, #72]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002cde:	f011 fb6b 	bl	80143b8 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	4813      	ldr	r0, [pc, #76]	@ (8002d34 <SD_ConfigFileInit+0xd0>)
 8002ce6:	f7ff ff15 	bl	8002b14 <ASCII2uint8>
 8002cea:	4603      	mov	r3, r0
 8002cec:	3301      	adds	r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <SD_ConfigFileInit+0xcc>)
 8002cf2:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <SD_ConfigFileInit+0xcc>)
 8002cf6:	795b      	ldrb	r3, [r3, #5]
 8002cf8:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <SD_ConfigFileInit+0xd0>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff32 	bl	8002b64 <uint82ASCII>

	f_lseek(&Config, 26);
 8002d00:	211a      	movs	r1, #26
 8002d02:	4809      	ldr	r0, [pc, #36]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002d04:	f011 ff3d 	bl	8014b82 <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <SD_ConfigFileInit+0xd4>)
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4909      	ldr	r1, [pc, #36]	@ (8002d34 <SD_ConfigFileInit+0xd0>)
 8002d0e:	4806      	ldr	r0, [pc, #24]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002d10:	f011 fcb1 	bl	8014676 <f_write>

	f_close(&Config);
 8002d14:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <SD_ConfigFileInit+0xc4>)
 8002d16:	f011 fec0 	bl	8014a9a <f_close>

}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	240000b0 	.word	0x240000b0
 8002d28:	2400253c 	.word	0x2400253c
 8002d2c:	24003570 	.word	0x24003570
 8002d30:	24000090 	.word	0x24000090
 8002d34:	240000bc 	.word	0x240000bc
 8002d38:	24003574 	.word	0x24003574

08002d3c <SD_GainsInit>:

void SD_GainsInit(void){
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0

}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <SD_CreateFlightPath+0x2c>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <SD_CreateFlightPath+0x30>)
 8002d56:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <SD_CreateFlightPath+0x2c>)
 8002d5a:	785a      	ldrb	r2, [r3, #1]
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <SD_CreateFlightPath+0x30>)
 8002d5e:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <SD_CreateFlightPath+0x2c>)
 8002d62:	789a      	ldrb	r2, [r3, #2]
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <SD_CreateFlightPath+0x30>)
 8002d66:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8002d68:	4804      	ldr	r0, [pc, #16]	@ (8002d7c <SD_CreateFlightPath+0x30>)
 8002d6a:	f012 f9ef 	bl	801514c <f_mkdir>
	f_chdir(FlightPaht);
 8002d6e:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <SD_CreateFlightPath+0x30>)
 8002d70:	f011 febd 	bl	8014aee <f_chdir>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	240000bc 	.word	0x240000bc
 8002d7c:	24000098 	.word	0x24000098

08002d80 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002d84:	2213      	movs	r2, #19
 8002d86:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <SD_blackbox_init+0x14>)
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <SD_blackbox_init+0x18>)
 8002d8a:	f011 f94d 	bl	8014028 <f_open>
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	240000a4 	.word	0x240000a4
 8002d98:	2400150c 	.word	0x2400150c

08002d9c <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002da0:	4b7e      	ldr	r3, [pc, #504]	@ (8002f9c <SD_blackbox_refresh+0x200>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7e      	ldr	r2, [pc, #504]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002da6:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002da8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002daa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dae:	497c      	ldr	r1, [pc, #496]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002db0:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 8002db4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002db6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dba:	4979      	ldr	r1, [pc, #484]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002dbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002dc0:	4b78      	ldr	r3, [pc, #480]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002dc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dc6:	4976      	ldr	r1, [pc, #472]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002dc8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002dcc:	4b75      	ldr	r3, [pc, #468]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002dce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002dd2:	4973      	ldr	r1, [pc, #460]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002dd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002dd8:	4b72      	ldr	r3, [pc, #456]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002dda:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002dde:	4970      	ldr	r1, [pc, #448]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002de0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 8002de4:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002de6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002dea:	496d      	ldr	r1, [pc, #436]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002dec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002df0:	496b      	ldr	r1, [pc, #428]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002dfe:	4968      	ldr	r1, [pc, #416]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002e0c:	4964      	ldr	r1, [pc, #400]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002e1a:	4b62      	ldr	r3, [pc, #392]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002e1c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002e20:	495f      	ldr	r1, [pc, #380]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e22:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 8002e26:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002e28:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002e2c:	495c      	ldr	r1, [pc, #368]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e2e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 8002e32:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa4 <SD_blackbox_refresh+0x208>)
 8002e34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002e38:	4959      	ldr	r1, [pc, #356]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e3a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <SD_blackbox_refresh+0x20c>)
 8002e40:	8a1a      	ldrh	r2, [r3, #16]
 8002e42:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e44:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 8002e48:	4b55      	ldr	r3, [pc, #340]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 8002e4e:	4b54      	ldr	r3, [pc, #336]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 8002e54:	4b52      	ldr	r3, [pc, #328]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 8002e5c:	4b52      	ldr	r3, [pc, #328]	@ (8002fa8 <SD_blackbox_refresh+0x20c>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002e64:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e6a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002e76:	4b4d      	ldr	r3, [pc, #308]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002e78:	885a      	ldrh	r2, [r3, #2]
 8002e7a:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e7c:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002e80:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002e82:	889a      	ldrh	r2, [r3, #4]
 8002e84:	4b46      	ldr	r3, [pc, #280]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e86:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002e8a:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002e8c:	88da      	ldrh	r2, [r3, #6]
 8002e8e:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e90:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002e94:	4b45      	ldr	r3, [pc, #276]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002e96:	891a      	ldrh	r2, [r3, #8]
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002e9a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002e9e:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ea0:	895a      	ldrh	r2, [r3, #10]
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ea4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002ea8:	4b40      	ldr	r3, [pc, #256]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002eaa:	899a      	ldrh	r2, [r3, #12]
 8002eac:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002eae:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002eb4:	89da      	ldrh	r2, [r3, #14]
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002eb8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ebe:	8a1a      	ldrh	r2, [r3, #16]
 8002ec0:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ec2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002ec6:	4b39      	ldr	r3, [pc, #228]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ec8:	8a5a      	ldrh	r2, [r3, #18]
 8002eca:	4b35      	ldr	r3, [pc, #212]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ecc:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002ed0:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ed2:	8a9a      	ldrh	r2, [r3, #20]
 8002ed4:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ed6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002eda:	4b34      	ldr	r3, [pc, #208]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002edc:	8ada      	ldrh	r2, [r3, #22]
 8002ede:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ee0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002ee4:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ee6:	8b1a      	ldrh	r2, [r3, #24]
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002eea:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002eee:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002ef0:	8b5a      	ldrh	r2, [r3, #26]
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002ef4:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002efa:	8b9a      	ldrh	r2, [r3, #28]
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002efe:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002f04:	8bda      	ldrh	r2, [r3, #30]
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f08:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002f0c:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002f0e:	8c1a      	ldrh	r2, [r3, #32]
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f12:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002f16:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002f18:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f1e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002f22:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <SD_blackbox_refresh+0x210>)
 8002f24:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f2a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f34:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f3a:	885a      	ldrh	r2, [r3, #2]
 8002f3c:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f3e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f44:	889a      	ldrh	r2, [r3, #4]
 8002f46:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f48:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f4e:	88da      	ldrh	r2, [r3, #6]
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f52:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f58:	891a      	ldrh	r2, [r3, #8]
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f5c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f62:	895a      	ldrh	r2, [r3, #10]
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f66:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f6c:	899a      	ldrh	r2, [r3, #12]
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f70:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002f74:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f76:	89da      	ldrh	r2, [r3, #14]
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f7a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f80:	8a1a      	ldrh	r2, [r3, #16]
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f84:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <SD_blackbox_refresh+0x214>)
 8002f8a:	8a5a      	ldrh	r2, [r3, #18]
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SD_blackbox_refresh+0x204>)
 8002f8e:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	240049d0 	.word	0x240049d0
 8002fa0:	24004568 	.word	0x24004568
 8002fa4:	24000410 	.word	0x24000410
 8002fa8:	240002cc 	.word	0x240002cc
 8002fac:	24000068 	.word	0x24000068
 8002fb0:	24000054 	.word	0x24000054

08002fb4 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8002fba:	f7ff feef 	bl	8002d9c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <SD_blackbox_write+0xa4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a26      	ldr	r2, [pc, #152]	@ (800305c <SD_blackbox_write+0xa8>)
 8002fc4:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <SD_blackbox_write+0xac>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4613      	mov	r3, r2
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	4a24      	ldr	r2, [pc, #144]	@ (8003064 <SD_blackbox_write+0xb0>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	22b0      	movs	r2, #176	@ 0xb0
 8002fd8:	4920      	ldr	r1, [pc, #128]	@ (800305c <SD_blackbox_write+0xa8>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f013 fee7 	bl	8016dae <memcpy>

	if(WriteCount == 15){
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <SD_blackbox_write+0xac>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d129      	bne.n	800303c <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	e00d      	b.n	800300a <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8003064 <SD_blackbox_write+0xb0>)
 8002ff8:	1899      	adds	r1, r3, r2
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <SD_blackbox_write+0xb4>)
 8002ffc:	22b0      	movs	r2, #176	@ 0xb0
 8002ffe:	481b      	ldr	r0, [pc, #108]	@ (800306c <SD_blackbox_write+0xb8>)
 8003000:	f011 fb39 	bl	8014676 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	3301      	adds	r3, #1
 8003008:	71fb      	strb	r3, [r7, #7]
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d9ee      	bls.n	8002fee <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8003010:	4816      	ldr	r0, [pc, #88]	@ (800306c <SD_blackbox_write+0xb8>)
 8003012:	f011 fcc4 	bl	801499e <f_sync>
 8003016:	4603      	mov	r3, r0
 8003018:	461a      	mov	r2, r3
 800301a:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <SD_blackbox_write+0xbc>)
 800301c:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <SD_blackbox_write+0xac>)
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8003024:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <SD_blackbox_write+0xc0>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <SD_blackbox_write+0xc0>)
 800302e:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <SD_blackbox_write+0xa4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <SD_blackbox_write+0xa4>)
 8003038:	6013      	str	r3, [r2, #0]
		return;
 800303a:	e00a      	b.n	8003052 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 800303c:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <SD_blackbox_write+0xac>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <SD_blackbox_write+0xac>)
 8003046:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <SD_blackbox_write+0xa4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	4a02      	ldr	r2, [pc, #8]	@ (8003058 <SD_blackbox_write+0xa4>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	24004618 	.word	0x24004618
 800305c:	24004568 	.word	0x24004568
 8003060:	2400461c 	.word	0x2400461c
 8003064:	24003578 	.word	0x24003578
 8003068:	24003574 	.word	0x24003574
 800306c:	2400150c 	.word	0x2400150c
 8003070:	2400356c 	.word	0x2400356c
 8003074:	2400461e 	.word	0x2400461e

08003078 <SD_init>:


void SD_init(void){
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 800307c:	2201      	movs	r2, #1
 800307e:	4909      	ldr	r1, [pc, #36]	@ (80030a4 <SD_init+0x2c>)
 8003080:	4809      	ldr	r0, [pc, #36]	@ (80030a8 <SD_init+0x30>)
 8003082:	f010 ff8b 	bl	8013f9c <f_mount>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <SD_init+0x34>)
 800308c:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 800308e:	f7ff fde9 	bl	8002c64 <SD_ConfigFileInit>
	  SD_GainsInit();
 8003092:	f7ff fe53 	bl	8002d3c <SD_GainsInit>
	  SD_CreateFlightPath();
 8003096:	f7ff fe59 	bl	8002d4c <SD_CreateFlightPath>
	  SD_blackbox_init();
 800309a:	f7ff fe71 	bl	8002d80 <SD_blackbox_init>
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	08018b64 	.word	0x08018b64
 80030a8:	240004d0 	.word	0x240004d0
 80030ac:	2400356c 	.word	0x2400356c

080030b0 <gps_checksum>:


char *data[15];

int gps_checksum(char *nmea_data)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fd f919 	bl	80002f0 <strlen>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d801      	bhi.n	80030c8 <gps_checksum+0x18>
 80030c4:	2300      	movs	r3, #0
 80030c6:	e038      	b.n	800313a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd f911 	bl	80002f0 <strlen>
 80030ce:	4603      	mov	r3, r0
 80030d0:	3b04      	subs	r3, #4
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd f908 	bl	80002f0 <strlen>
 80030e0:	4603      	mov	r3, r0
 80030e2:	3b03      	subs	r3, #3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e00a      	b.n	800310c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4053      	eors	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd f8ef 	bl	80002f0 <strlen>
 8003112:	4603      	mov	r3, r0
 8003114:	1f5a      	subs	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8ec      	bhi.n	80030f6 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800311c:	f107 0308 	add.w	r3, r7, #8
 8003120:	2210      	movs	r2, #16
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f013 fc1b 	bl	8016960 <strtol>
 800312a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d101      	bne.n	8003138 <gps_checksum+0x88>
        return 1;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003138:	2300      	movs	r3, #0
    }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	0000      	movs	r0, r0
 8003144:	0000      	movs	r0, r0
	...

08003148 <nmea_GPGGA>:

int nmea_GPGGA(GPS_t *gps_data, char*inputString){
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b0b7      	sub	sp, #220	@ 0xdc
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003158:	f107 0320 	add.w	r3, r7, #32
 800315c:	2264      	movs	r2, #100	@ 0x64
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f013 fd0c 	bl	8016b7e <memset>
    char *marker = strtok(inputString, ",");
 8003166:	49cc      	ldr	r1, [pc, #816]	@ (8003498 <nmea_GPGGA+0x350>)
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	f013 fd23 	bl	8016bb4 <strtok>
 800316e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003172:	e027      	b.n	80031c4 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003174:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003178:	f7fd f8ba 	bl	80002f0 <strlen>
 800317c:	4603      	mov	r3, r0
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003184:	1c63      	adds	r3, r4, #1
 8003186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800318a:	4610      	mov	r0, r2
 800318c:	f012 fcb0 	bl	8015af0 <malloc>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	00a3      	lsls	r3, r4, #2
 8003196:	33d8      	adds	r3, #216	@ 0xd8
 8003198:	443b      	add	r3, r7
 800319a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800319e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a2:	3b01      	subs	r3, #1
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	33d8      	adds	r3, #216	@ 0xd8
 80031a8:	443b      	add	r3, r7
 80031aa:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80031ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f013 fdf3 	bl	8016d9e <strcpy>
        marker = strtok(NULL, ",");
 80031b8:	49b7      	ldr	r1, [pc, #732]	@ (8003498 <nmea_GPGGA+0x350>)
 80031ba:	2000      	movs	r0, #0
 80031bc:	f013 fcfa 	bl	8016bb4 <strtok>
 80031c0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80031c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1d3      	bne.n	8003174 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	332c      	adds	r3, #44	@ 0x2c
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f013 fdda 	bl	8016d9e <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80031ea:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80031ee:	2b53      	cmp	r3, #83	@ 0x53
 80031f0:	d004      	beq.n	80031fc <nmea_GPGGA+0xb4>
 80031f2:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80031f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80031f8:	f040 813f 	bne.w	800347a <nmea_GPGGA+0x332>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003202:	e010      	b.n	8003226 <nmea_GPGGA+0xde>
 8003204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800320a:	4413      	add	r3, r2
 800320c:	7819      	ldrb	r1, [r3, #0]
 800320e:	f107 021c 	add.w	r2, r7, #28
 8003212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003216:	4413      	add	r3, r2
 8003218:	460a      	mov	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003220:	3301      	adds	r3, #1
 8003222:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800322a:	2b01      	cmp	r3, #1
 800322c:	ddea      	ble.n	8003204 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003234:	e011      	b.n	800325a <nmea_GPGGA+0x112>
 8003236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800323c:	3302      	adds	r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	7819      	ldrb	r1, [r3, #0]
 8003242:	f107 0214 	add.w	r2, r7, #20
 8003246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800324a:	4413      	add	r3, r2
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003254:	3301      	adds	r3, #1
 8003256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800325e:	2b05      	cmp	r3, #5
 8003260:	dde9      	ble.n	8003236 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003262:	f107 031c 	add.w	r3, r7, #28
 8003266:	220a      	movs	r2, #10
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f013 fb78 	bl	8016960 <strtol>
 8003270:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f013 faa8 	bl	80167d0 <strtof>
 8003280:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003290:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8003294:	ed9f 6a81 	vldr	s12, [pc, #516]	@ 800349c <nmea_GPGGA+0x354>
 8003298:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032a4:	ed87 7b28 	vstr	d7, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032ae:	e010      	b.n	80032d2 <nmea_GPGGA+0x18a>
 80032b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032b6:	4413      	add	r3, r2
 80032b8:	7819      	ldrb	r1, [r3, #0]
 80032ba:	f107 0210 	add.w	r2, r7, #16
 80032be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c2:	4413      	add	r3, r2
 80032c4:	460a      	mov	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032cc:	3301      	adds	r3, #1
 80032ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	ddea      	ble.n	80032b0 <nmea_GPGGA+0x168>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e0:	e011      	b.n	8003306 <nmea_GPGGA+0x1be>
 80032e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e8:	3303      	adds	r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	7819      	ldrb	r1, [r3, #0]
 80032ee:	f107 0208 	add.w	r2, r7, #8
 80032f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f6:	4413      	add	r3, r2
 80032f8:	460a      	mov	r2, r1
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003300:	3301      	adds	r3, #1
 8003302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800330a:	2b05      	cmp	r3, #5
 800330c:	dde9      	ble.n	80032e2 <nmea_GPGGA+0x19a>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	220a      	movs	r2, #10
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f013 fb22 	bl	8016960 <strtol>
 800331c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f013 fa52 	bl	80167d0 <strtof>
 800332c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003340:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800349c <nmea_GPGGA+0x354>
 8003344:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003350:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003354:	ed97 7b28 	vldr	d7, [r7, #160]	@ 0xa0
 8003358:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	d070      	beq.n	8003444 <nmea_GPGGA+0x2fc>
 8003362:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8003366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d069      	beq.n	8003444 <nmea_GPGGA+0x2fc>
 8003370:	ed97 7b28 	vldr	d7, [r7, #160]	@ 0xa0
 8003374:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8003488 <nmea_GPGGA+0x340>
 8003378:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d560      	bpl.n	8003444 <nmea_GPGGA+0x2fc>
 8003382:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8003386:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003490 <nmea_GPGGA+0x348>
 800338a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	d557      	bpl.n	8003444 <nmea_GPGGA+0x2fc>
            gps_data->latitude = lat_deg;
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800339a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80033a4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80033ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80033b6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80033b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f013 fa07 	bl	80167d0 <strtof>
 80033c2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80033c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80033ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d102      	bne.n	80033da <nmea_GPGGA+0x292>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	e001      	b.n	80033de <nmea_GPGGA+0x296>
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80033e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e4:	220a      	movs	r2, #10
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f013 fab9 	bl	8016960 <strtol>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	220a      	movs	r2, #10
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f013 fab0 	bl	8016960 <strtol>
 8003400:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003408:	2b00      	cmp	r3, #0
 800340a:	bfcc      	ite	gt
 800340c:	2301      	movgt	r3, #1
 800340e:	2300      	movle	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f013 f9d7 	bl	80167d0 <strtof>
 8003422:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003426:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800342a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	d102      	bne.n	800343a <nmea_GPGGA+0x2f2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	e001      	b.n	800343e <nmea_GPGGA+0x2f6>
 800343a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003442:	e01a      	b.n	800347a <nmea_GPGGA+0x332>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800344a:	e00e      	b.n	800346a <nmea_GPGGA+0x322>
 800344c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	33d8      	adds	r3, #216	@ 0xd8
 8003454:	443b      	add	r3, r7
 8003456:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800345a:	4618      	mov	r0, r3
 800345c:	f012 fb50 	bl	8015b00 <free>
 8003460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003464:	3301      	adds	r3, #1
 8003466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800346a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800346e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003472:	429a      	cmp	r2, r3
 8003474:	dbea      	blt.n	800344c <nmea_GPGGA+0x304>
            return 0;
 8003476:	2300      	movs	r3, #0
 8003478:	e028      	b.n	80034cc <nmea_GPGGA+0x384>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003480:	e01d      	b.n	80034be <nmea_GPGGA+0x376>
 8003482:	bf00      	nop
 8003484:	f3af 8000 	nop.w
 8003488:	00000000 	.word	0x00000000
 800348c:	40568000 	.word	0x40568000
 8003490:	00000000 	.word	0x00000000
 8003494:	40668000 	.word	0x40668000
 8003498:	08018b68 	.word	0x08018b68
 800349c:	42700000 	.word	0x42700000
 80034a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	33d8      	adds	r3, #216	@ 0xd8
 80034a8:	443b      	add	r3, r7
 80034aa:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f012 fb26 	bl	8015b00 <free>
 80034b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034b8:	3301      	adds	r3, #1
 80034ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dbea      	blt.n	80034a0 <nmea_GPGGA+0x358>
    return 1;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	37dc      	adds	r7, #220	@ 0xdc
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <nmea_GPGSA>:


int nmea_GPGSA(GPS_t *gps_data, char*inputString){
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b0a3      	sub	sp, #140	@ 0x8c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	2264      	movs	r2, #100	@ 0x64
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f013 fb46 	bl	8016b7e <memset>
    char *marker = strtok(inputString, ",");
 80034f2:	493b      	ldr	r1, [pc, #236]	@ (80035e0 <nmea_GPGSA+0x10c>)
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f013 fb5d 	bl	8016bb4 <strtok>
 80034fa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80034fe:	e027      	b.n	8003550 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003500:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003504:	f7fc fef4 	bl	80002f0 <strlen>
 8003508:	4603      	mov	r3, r0
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003510:	1c63      	adds	r3, r4, #1
 8003512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003516:	4610      	mov	r0, r2
 8003518:	f012 faea 	bl	8015af0 <malloc>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	00a3      	lsls	r3, r4, #2
 8003522:	3388      	adds	r3, #136	@ 0x88
 8003524:	443b      	add	r3, r7
 8003526:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800352a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800352e:	3b01      	subs	r3, #1
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	3388      	adds	r3, #136	@ 0x88
 8003534:	443b      	add	r3, r7
 8003536:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800353a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800353e:	4618      	mov	r0, r3
 8003540:	f013 fc2d 	bl	8016d9e <strcpy>
        marker = strtok(NULL, ",");
 8003544:	4926      	ldr	r1, [pc, #152]	@ (80035e0 <nmea_GPGSA+0x10c>)
 8003546:	2000      	movs	r0, #0
 8003548:	f013 fb34 	bl	8016bb4 <strtok>
 800354c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1d3      	bne.n	8003500 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	220a      	movs	r2, #10
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f013 f9fe 	bl	8016960 <strtol>
 8003564:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003568:	2b01      	cmp	r3, #1
 800356a:	bfcc      	ite	gt
 800356c:	2301      	movgt	r3, #1
 800356e:	2300      	movle	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 800357c:	2303      	movs	r3, #3
 800357e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003580:	e00e      	b.n	80035a0 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3388      	adds	r3, #136	@ 0x88
 8003588:	443b      	add	r3, r7
 800358a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003594:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003596:	3301      	adds	r3, #1
 8003598:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 800359a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800359c:	3301      	adds	r3, #1
 800359e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a2:	2b0e      	cmp	r3, #14
 80035a4:	dded      	ble.n	8003582 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80035b0:	e00b      	b.n	80035ca <nmea_GPGSA+0xf6>
 80035b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3388      	adds	r3, #136	@ 0x88
 80035b8:	443b      	add	r3, r7
 80035ba:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80035be:	4618      	mov	r0, r3
 80035c0:	f012 fa9e 	bl	8015b00 <free>
 80035c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c6:	3301      	adds	r3, #1
 80035c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80035ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dbee      	blt.n	80035b2 <nmea_GPGSA+0xde>
    return 1;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	378c      	adds	r7, #140	@ 0x8c
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	08018b68 	.word	0x08018b68

080035e4 <nmea_GPGLL>:



int nmea_GPGLL(GPS_t *gps_data, char*inputString) {
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b0b7      	sub	sp, #220	@ 0xdc
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80035f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035f8:	2264      	movs	r2, #100	@ 0x64
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f013 fabe 	bl	8016b7e <memset>
    char *marker = strtok(inputString, ",");
 8003602:	49a9      	ldr	r1, [pc, #676]	@ (80038a8 <nmea_GPGLL+0x2c4>)
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f013 fad5 	bl	8016bb4 <strtok>
 800360a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800360e:	e027      	b.n	8003660 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003610:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003614:	f7fc fe6c 	bl	80002f0 <strlen>
 8003618:	4603      	mov	r3, r0
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003620:	1c63      	adds	r3, r4, #1
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003626:	4610      	mov	r0, r2
 8003628:	f012 fa62 	bl	8015af0 <malloc>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	00a3      	lsls	r3, r4, #2
 8003632:	33d8      	adds	r3, #216	@ 0xd8
 8003634:	443b      	add	r3, r7
 8003636:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363e:	3b01      	subs	r3, #1
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	33d8      	adds	r3, #216	@ 0xd8
 8003644:	443b      	add	r3, r7
 8003646:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800364a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800364e:	4618      	mov	r0, r3
 8003650:	f013 fba5 	bl	8016d9e <strcpy>
        marker = strtok(NULL, ",");
 8003654:	4994      	ldr	r1, [pc, #592]	@ (80038a8 <nmea_GPGLL+0x2c4>)
 8003656:	2000      	movs	r0, #0
 8003658:	f013 faac 	bl	8016bb4 <strtok>
 800365c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1d3      	bne.n	8003610 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003670:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003674:	2b53      	cmp	r3, #83	@ 0x53
 8003676:	d004      	beq.n	8003682 <nmea_GPGLL+0x9e>
 8003678:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800367c:	2b4e      	cmp	r3, #78	@ 0x4e
 800367e:	f040 810e 	bne.w	800389e <nmea_GPGLL+0x2ba>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003688:	e010      	b.n	80036ac <nmea_GPGLL+0xc8>
 800368a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800368c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003690:	4413      	add	r3, r2
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	f107 0220 	add.w	r2, r7, #32
 8003698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800369c:	4413      	add	r3, r2
 800369e:	460a      	mov	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036a6:	3301      	adds	r3, #1
 80036a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	ddea      	ble.n	800368a <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ba:	e011      	b.n	80036e0 <nmea_GPGLL+0xfc>
 80036bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036c2:	3302      	adds	r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	7819      	ldrb	r1, [r3, #0]
 80036c8:	f107 0218 	add.w	r2, r7, #24
 80036cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036d0:	4413      	add	r3, r2
 80036d2:	460a      	mov	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036da:	3301      	adds	r3, #1
 80036dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	dde9      	ble.n	80036bc <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80036e8:	f107 0320 	add.w	r3, r7, #32
 80036ec:	220a      	movs	r2, #10
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f013 f935 	bl	8016960 <strtol>
 80036f6:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80036fa:	f107 0318 	add.w	r3, r7, #24
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f013 f865 	bl	80167d0 <strtof>
 8003706:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800370a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003716:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 800371a:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 80038ac <nmea_GPGLL+0x2c8>
 800371e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800372a:	ed87 7b28 	vstr	d7, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 800372e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800373c:	e010      	b.n	8003760 <nmea_GPGLL+0x17c>
 800373e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003744:	4413      	add	r3, r2
 8003746:	7819      	ldrb	r1, [r3, #0]
 8003748:	f107 0214 	add.w	r2, r7, #20
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003750:	4413      	add	r3, r2
 8003752:	460a      	mov	r2, r1
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800375a:	3301      	adds	r3, #1
 800375c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003764:	2b02      	cmp	r3, #2
 8003766:	ddea      	ble.n	800373e <nmea_GPGLL+0x15a>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800376e:	e011      	b.n	8003794 <nmea_GPGLL+0x1b0>
 8003770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003776:	3303      	adds	r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	7819      	ldrb	r1, [r3, #0]
 800377c:	f107 020c 	add.w	r2, r7, #12
 8003780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003784:	4413      	add	r3, r2
 8003786:	460a      	mov	r2, r1
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800378e:	3301      	adds	r3, #1
 8003790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003798:	2b05      	cmp	r3, #5
 800379a:	dde9      	ble.n	8003770 <nmea_GPGLL+0x18c>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	220a      	movs	r2, #10
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f013 f8db 	bl	8016960 <strtol>
 80037aa:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f013 f80b 	bl	80167d0 <strtof>
 80037ba:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80037be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ca:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80037ce:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80038ac <nmea_GPGLL+0x2c8>
 80037d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037de:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80037e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d011      	beq.n	800380e <nmea_GPGLL+0x22a>
 80037ea:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80037ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d00a      	beq.n	800380e <nmea_GPGLL+0x22a>
 80037f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <nmea_GPGLL+0x22a>
 8003800:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003804:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	d11a      	bne.n	8003844 <nmea_GPGLL+0x260>
            for(int i = 0; i<counter; i++) free(values[i]);
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003814:	e00e      	b.n	8003834 <nmea_GPGLL+0x250>
 8003816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	33d8      	adds	r3, #216	@ 0xd8
 800381e:	443b      	add	r3, r7
 8003820:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003824:	4618      	mov	r0, r3
 8003826:	f012 f96b 	bl	8015b00 <free>
 800382a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800382e:	3301      	adds	r3, #1
 8003830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800383c:	429a      	cmp	r2, r3
 800383e:	dbea      	blt.n	8003816 <nmea_GPGLL+0x232>
            return 0;
 8003840:	2300      	movs	r3, #0
 8003842:	e02d      	b.n	80038a0 <nmea_GPGLL+0x2bc>
        }
        else{
            gps_data->latitude = lat_deg;
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800384a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003854:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800385e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8003866:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800386e:	e00e      	b.n	800388e <nmea_GPGLL+0x2aa>
 8003870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	33d8      	adds	r3, #216	@ 0xd8
 8003878:	443b      	add	r3, r7
 800387a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800387e:	4618      	mov	r0, r3
 8003880:	f012 f93e 	bl	8015b00 <free>
 8003884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003888:	3301      	adds	r3, #1
 800388a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800388e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003896:	429a      	cmp	r2, r3
 8003898:	dbea      	blt.n	8003870 <nmea_GPGLL+0x28c>
            return 1;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <nmea_GPGLL+0x2bc>
        }
    }
    else return 0;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	37dc      	adds	r7, #220	@ 0xdc
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	08018b68 	.word	0x08018b68
 80038ac:	42700000 	.word	0x42700000

080038b0 <nmea_parse>:

void nmea_parse(GPS_t *gps_data, uint8_t *buffer){
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80038ba:	223c      	movs	r2, #60	@ 0x3c
 80038bc:	2100      	movs	r1, #0
 80038be:	484e      	ldr	r0, [pc, #312]	@ (80039f8 <nmea_parse+0x148>)
 80038c0:	f013 f95d 	bl	8016b7e <memset>
    char * token = strtok(buffer, "$");
 80038c4:	494d      	ldr	r1, [pc, #308]	@ (80039fc <nmea_parse+0x14c>)
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	f013 f974 	bl	8016bb4 <strtok>
 80038cc:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80038d2:	e01d      	b.n	8003910 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fc fd0b 	bl	80002f0 <strlen>
 80038da:	4603      	mov	r3, r0
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	693c      	ldr	r4, [r7, #16]
 80038e0:	1c63      	adds	r3, r4, #1
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	4610      	mov	r0, r2
 80038e6:	f012 f903 	bl	8015af0 <malloc>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b42      	ldr	r3, [pc, #264]	@ (80039f8 <nmea_parse+0x148>)
 80038f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4a3f      	ldr	r2, [pc, #252]	@ (80039f8 <nmea_parse+0x148>)
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	4618      	mov	r0, r3
 8003902:	f013 fa4c 	bl	8016d9e <strcpy>
        token = strtok(NULL, "$");
 8003906:	493d      	ldr	r1, [pc, #244]	@ (80039fc <nmea_parse+0x14c>)
 8003908:	2000      	movs	r0, #0
 800390a:	f013 f953 	bl	8016bb4 <strtok>
 800390e:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1de      	bne.n	80038d4 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e052      	b.n	80039c2 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 800391c:	4a36      	ldr	r2, [pc, #216]	@ (80039f8 <nmea_parse+0x148>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	4936      	ldr	r1, [pc, #216]	@ (8003a00 <nmea_parse+0x150>)
 8003926:	4618      	mov	r0, r3
 8003928:	f013 f9a0 	bl	8016c6c <strstr>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <nmea_parse+0x10c>
 8003932:	4a31      	ldr	r2, [pc, #196]	@ (80039f8 <nmea_parse+0x148>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fbb8 	bl	80030b0 <gps_checksum>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03a      	beq.n	80039bc <nmea_parse+0x10c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003946:	4a2c      	ldr	r2, [pc, #176]	@ (80039f8 <nmea_parse+0x148>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	492d      	ldr	r1, [pc, #180]	@ (8003a04 <nmea_parse+0x154>)
 8003950:	4618      	mov	r0, r3
 8003952:	f013 f98b 	bl	8016c6c <strstr>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, data[i]);
 800395c:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <nmea_parse+0x148>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe3c 	bl	80035e4 <nmea_GPGLL>
 800396c:	e026      	b.n	80039bc <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 800396e:	4a22      	ldr	r2, [pc, #136]	@ (80039f8 <nmea_parse+0x148>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003976:	4924      	ldr	r1, [pc, #144]	@ (8003a08 <nmea_parse+0x158>)
 8003978:	4618      	mov	r0, r3
 800397a:	f013 f977 	bl	8016c6c <strstr>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003984:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <nmea_parse+0x148>)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	4619      	mov	r1, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fda0 	bl	80034d4 <nmea_GPGSA>
 8003994:	e012      	b.n	80039bc <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGGA")!=NULL){
 8003996:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <nmea_parse+0x148>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	491b      	ldr	r1, [pc, #108]	@ (8003a0c <nmea_parse+0x15c>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f013 f963 	bl	8016c6c <strstr>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80039ac:	4a12      	ldr	r2, [pc, #72]	@ (80039f8 <nmea_parse+0x148>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fbc6 	bl	8003148 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dba8      	blt.n	800391c <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	e009      	b.n	80039e4 <nmea_parse+0x134>
 80039d0:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <nmea_parse+0x148>)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f012 f891 	bl	8015b00 <free>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf1      	blt.n	80039d0 <nmea_parse+0x120>


}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	24004620 	.word	0x24004620
 80039fc:	08018b6c 	.word	0x08018b6c
 8003a00:	08018b70 	.word	0x08018b70
 8003a04:	08018b74 	.word	0x08018b74
 8003a08:	08018b7c 	.word	0x08018b7c
 8003a0c:	08018b84 	.word	0x08018b84

08003a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <MX_DMA_Init+0x5c>)
 8003a18:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8003a1c:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <MX_DMA_Init+0x5c>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <MX_DMA_Init+0x5c>)
 8003a28:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	200b      	movs	r0, #11
 8003a3a:	f002 f8c0 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003a3e:	200b      	movs	r0, #11
 8003a40:	f002 f8d7 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	200c      	movs	r0, #12
 8003a4a:	f002 f8b8 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003a4e:	200c      	movs	r0, #12
 8003a50:	f002 f8cf 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	200d      	movs	r0, #13
 8003a5a:	f002 f8b0 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003a5e:	200d      	movs	r0, #13
 8003a60:	f002 f8c7 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	58024400 	.word	0x58024400

08003a70 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003a74:	4b2e      	ldr	r3, [pc, #184]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a76:	4a2f      	ldr	r2, [pc, #188]	@ (8003b34 <MX_FDCAN1_Init+0xc4>)
 8003a78:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a80:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003a8c:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003a98:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003aa4:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003aaa:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003aac:	2202      	movs	r2, #2
 8003aae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003abc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003ace:	4b18      	ldr	r3, [pc, #96]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003ae0:	4b13      	ldr	r3, [pc, #76]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003aec:	4b10      	ldr	r3, [pc, #64]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003aee:	2204      	movs	r2, #4
 8003af0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003af8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003afa:	2204      	movs	r2, #4
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003b10:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b18:	2204      	movs	r2, #4
 8003b1a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003b1c:	4804      	ldr	r0, [pc, #16]	@ (8003b30 <MX_FDCAN1_Init+0xc0>)
 8003b1e:	f004 ffd9 	bl	8008ad4 <HAL_FDCAN_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8003b28:	f000 fcbc 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2400465c 	.word	0x2400465c
 8003b34:	4000a000 	.word	0x4000a000

08003b38 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0ba      	sub	sp, #232	@ 0xe8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	22c0      	movs	r2, #192	@ 0xc0
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f013 f810 	bl	8016b7e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <HAL_FDCAN_MspInit+0xe8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d157      	bne.n	8003c18 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003b68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003b74:	2304      	movs	r3, #4
 8003b76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003b84:	2302      	movs	r3, #2
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003b88:	23c0      	movs	r3, #192	@ 0xc0
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8003b94:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f006 fdf1 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8003bac:	f000 fc7a 	bl	80044a4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003bb2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003bc2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003bd4:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_FDCAN_MspInit+0xec>)
 8003be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003bec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c06:	2309      	movs	r3, #9
 8003c08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <HAL_FDCAN_MspInit+0xf0>)
 8003c14:	f005 fac2 	bl	800919c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003c18:	bf00      	nop
 8003c1a:	37e8      	adds	r7, #232	@ 0xe8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	4000a000 	.word	0x4000a000
 8003c24:	58024400 	.word	0x58024400
 8003c28:	58020000 	.word	0x58020000

08003c2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	@ 0x28
 8003c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	60da      	str	r2, [r3, #12]
 8003c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c42:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c48:	4a4c      	ldr	r2, [pc, #304]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c66:	4a45      	ldr	r2, [pc, #276]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c70:	4b42      	ldr	r3, [pc, #264]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c84:	4a3d      	ldr	r2, [pc, #244]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c9c:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003c9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ca2:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003cac:	4b33      	ldr	r3, [pc, #204]	@ (8003d7c <MX_GPIO_Init+0x150>)
 8003cae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f242 010f 	movw	r1, #8207	@ 0x200f
 8003cc0:	482f      	ldr	r0, [pc, #188]	@ (8003d80 <MX_GPIO_Init+0x154>)
 8003cc2:	f005 fc1b 	bl	80094fc <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2110      	movs	r1, #16
 8003cca:	482e      	ldr	r0, [pc, #184]	@ (8003d84 <MX_GPIO_Init+0x158>)
 8003ccc:	f005 fc16 	bl	80094fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8003cd6:	482c      	ldr	r0, [pc, #176]	@ (8003d88 <MX_GPIO_Init+0x15c>)
 8003cd8:	f005 fc10 	bl	80094fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2104      	movs	r1, #4
 8003ce0:	482a      	ldr	r0, [pc, #168]	@ (8003d8c <MX_GPIO_Init+0x160>)
 8003ce2:	f005 fc0b 	bl	80094fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8003ce6:	f242 030f 	movw	r3, #8207	@ 0x200f
 8003cea:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4820      	ldr	r0, [pc, #128]	@ (8003d80 <MX_GPIO_Init+0x154>)
 8003d00:	f005 fa4c 	bl	800919c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003d04:	2310      	movs	r3, #16
 8003d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4619      	mov	r1, r3
 8003d1a:	481a      	ldr	r0, [pc, #104]	@ (8003d84 <MX_GPIO_Init+0x158>)
 8003d1c:	f005 fa3e 	bl	800919c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8003d20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	4813      	ldr	r0, [pc, #76]	@ (8003d88 <MX_GPIO_Init+0x15c>)
 8003d3a:	f005 fa2f 	bl	800919c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8003d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4619      	mov	r1, r3
 8003d52:	480b      	ldr	r0, [pc, #44]	@ (8003d80 <MX_GPIO_Init+0x154>)
 8003d54:	f005 fa22 	bl	800919c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003d58:	2304      	movs	r3, #4
 8003d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4807      	ldr	r0, [pc, #28]	@ (8003d8c <MX_GPIO_Init+0x160>)
 8003d70:	f005 fa14 	bl	800919c <HAL_GPIO_Init>

}
 8003d74:	bf00      	nop
 8003d76:	3728      	adds	r7, #40	@ 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	58020800 	.word	0x58020800
 8003d84:	58020000 	.word	0x58020000
 8003d88:	58020400 	.word	0x58020400
 8003d8c:	58020c00 	.word	0x58020c00

08003d90 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003d96:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <MX_I2C3_Init+0x78>)
 8003d98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <MX_I2C3_Init+0x7c>)
 8003d9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003da6:	4b17      	ldr	r3, [pc, #92]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dac:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dbe:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003dca:	480e      	ldr	r0, [pc, #56]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dcc:	f005 fbb0 	bl	8009530 <HAL_I2C_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003dd6:	f000 fb65 	bl	80044a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4809      	ldr	r0, [pc, #36]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003dde:	f005 fc43 	bl	8009668 <HAL_I2CEx_ConfigAnalogFilter>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003de8:	f000 fb5c 	bl	80044a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <MX_I2C3_Init+0x74>)
 8003df0:	f005 fc85 	bl	80096fe <HAL_I2CEx_ConfigDigitalFilter>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003dfa:	f000 fb53 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	240046fc 	.word	0x240046fc
 8003e08:	40005c00 	.word	0x40005c00
 8003e0c:	20b0ccff 	.word	0x20b0ccff

08003e10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b0bc      	sub	sp, #240	@ 0xf0
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	22c0      	movs	r2, #192	@ 0xc0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f012 fea4 	bl	8016b7e <memset>
  if(i2cHandle->Instance==I2C3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a39      	ldr	r2, [pc, #228]	@ (8003f20 <HAL_I2C_MspInit+0x110>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d16b      	bne.n	8003f18 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003e40:	f04f 0208 	mov.w	r2, #8
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e52:	f107 0318 	add.w	r3, r7, #24
 8003e56:	4618      	mov	r0, r3
 8003e58:	f006 fc96 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003e62:	f000 fb1f 	bl	80044a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e66:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e76:	4b2b      	ldr	r3, [pc, #172]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e84:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e8a:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e94:	4b23      	ldr	r3, [pc, #140]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003e96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eaa:	2312      	movs	r3, #18
 8003eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4817      	ldr	r0, [pc, #92]	@ (8003f28 <HAL_I2C_MspInit+0x118>)
 8003eca:	f005 f967 	bl	800919c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ed6:	2312      	movs	r3, #18
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	480d      	ldr	r0, [pc, #52]	@ (8003f2c <HAL_I2C_MspInit+0x11c>)
 8003ef6:	f005 f951 	bl	800919c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003efc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003f00:	4a08      	ldr	r2, [pc, #32]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003f02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f06:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_I2C_MspInit+0x114>)
 8003f0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003f18:	bf00      	nop
 8003f1a:	37f0      	adds	r7, #240	@ 0xf0
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40005c00 	.word	0x40005c00
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58020800 	.word	0x58020800
 8003f2c:	58020000 	.word	0x58020000

08003f30 <HAL_UARTEx_RxEventCallback>:
/*
 * UART buffer handler based on the DMA receive function, every implementation is valid,
 * as long as you pass a sufficiently long receive buffer to the library.
 * */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == UART4){
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a56      	ldr	r2, [pc, #344]	@ (800409c <HAL_UARTEx_RxEventCallback+0x16c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	f040 80a6 	bne.w	8004094 <HAL_UARTEx_RxEventCallback+0x164>
	    oldPos = newPos; //keep track of the last position in the buffer
 8003f48:	4b55      	ldr	r3, [pc, #340]	@ (80040a0 <HAL_UARTEx_RxEventCallback+0x170>)
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003f4e:	801a      	strh	r2, [r3, #0]
	    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8003f50:	4b54      	ldr	r3, [pc, #336]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5e:	dd22      	ble.n	8003fa6 <HAL_UARTEx_RxEventCallback+0x76>

	        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8003f60:	4b50      	ldr	r3, [pc, #320]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003f68:	81fb      	strh	r3, [r7, #14]
	        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8003f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <HAL_UARTEx_RxEventCallback+0x178>)
 8003f72:	4413      	add	r3, r2
 8003f74:	89fa      	ldrh	r2, [r7, #14]
 8003f76:	494d      	ldr	r1, [pc, #308]	@ (80040ac <HAL_UARTEx_RxEventCallback+0x17c>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f012 ff18 	bl	8016dae <memcpy>

	        oldPos = 0;  // point to the start of the buffer
 8003f7e:	4b49      	ldr	r3, [pc, #292]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	801a      	strh	r2, [r3, #0]
	        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	4a49      	ldr	r2, [pc, #292]	@ (80040ac <HAL_UARTEx_RxEventCallback+0x17c>)
 8003f88:	1899      	adds	r1, r3, r2
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	4845      	ldr	r0, [pc, #276]	@ (80040a8 <HAL_UARTEx_RxEventCallback+0x178>)
 8003f94:	f012 ff0b 	bl	8016dae <memcpy>
	        newPos = (Size-datatocopy);  // update the position
 8003f98:	887a      	ldrh	r2, [r7, #2]
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80040a0 <HAL_UARTEx_RxEventCallback+0x170>)
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	e010      	b.n	8003fc8 <HAL_UARTEx_RxEventCallback+0x98>
	    }
	    else{
	        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <HAL_UARTEx_RxEventCallback+0x178>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	887a      	ldrh	r2, [r7, #2]
 8003fb2:	493e      	ldr	r1, [pc, #248]	@ (80040ac <HAL_UARTEx_RxEventCallback+0x17c>)
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f012 fefa 	bl	8016dae <memcpy>
	        newPos = Size+oldPos; //update buffer position
 8003fba:	4b3a      	ldr	r3, [pc, #232]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <HAL_UARTEx_RxEventCallback+0x170>)
 8003fc6:	801a      	strh	r2, [r3, #0]

	    }
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8003fc8:	2240      	movs	r2, #64	@ 0x40
 8003fca:	4938      	ldr	r1, [pc, #224]	@ (80040ac <HAL_UARTEx_RxEventCallback+0x17c>)
 8003fcc:	4838      	ldr	r0, [pc, #224]	@ (80040b0 <HAL_UARTEx_RxEventCallback+0x180>)
 8003fce:	f00c fe72 	bl	8010cb6 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); //disable the half transfer interrupt
 8003fd2:	4b38      	ldr	r3, [pc, #224]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a38      	ldr	r2, [pc, #224]	@ (80040b8 <HAL_UARTEx_RxEventCallback+0x188>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8003fdc:	4b35      	ldr	r3, [pc, #212]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a36      	ldr	r2, [pc, #216]	@ (80040bc <HAL_UARTEx_RxEventCallback+0x18c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8003fe6:	4b33      	ldr	r3, [pc, #204]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a35      	ldr	r2, [pc, #212]	@ (80040c0 <HAL_UARTEx_RxEventCallback+0x190>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8003ff0:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a33      	ldr	r2, [pc, #204]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x194>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a32      	ldr	r2, [pc, #200]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x198>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x19c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2f      	ldr	r2, [pc, #188]	@ (80040d0 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004018:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2d      	ldr	r2, [pc, #180]	@ (80040d4 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004022:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 800402c:	4b21      	ldr	r3, [pc, #132]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2a      	ldr	r2, [pc, #168]	@ (80040dc <HAL_UARTEx_RxEventCallback+0x1ac>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a29      	ldr	r2, [pc, #164]	@ (80040e0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004040:	4b1c      	ldr	r3, [pc, #112]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a27      	ldr	r2, [pc, #156]	@ (80040e4 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 800404a:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a26      	ldr	r2, [pc, #152]	@ (80040e8 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004054:	4b17      	ldr	r3, [pc, #92]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a24      	ldr	r2, [pc, #144]	@ (80040ec <HAL_UARTEx_RxEventCallback+0x1bc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a23      	ldr	r2, [pc, #140]	@ (80040f0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_UARTEx_RxEventCallback+0x142>
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a21      	ldr	r2, [pc, #132]	@ (80040f4 <HAL_UARTEx_RxEventCallback+0x1c4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <HAL_UARTEx_RxEventCallback+0x154>
 8004072:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
	}
}
 8004082:	e007      	b.n	8004094 <HAL_UARTEx_RxEventCallback+0x164>
	    __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); //disable the half transfer interrupt
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x184>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0204 	bic.w	r2, r2, #4
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40004c00 	.word	0x40004c00
 80040a0:	24004752 	.word	0x24004752
 80040a4:	24004750 	.word	0x24004750
 80040a8:	24004794 	.word	0x24004794
 80040ac:	24004754 	.word	0x24004754
 80040b0:	24004cb0 	.word	0x24004cb0
 80040b4:	24004f00 	.word	0x24004f00
 80040b8:	40020010 	.word	0x40020010
 80040bc:	40020028 	.word	0x40020028
 80040c0:	40020040 	.word	0x40020040
 80040c4:	40020058 	.word	0x40020058
 80040c8:	40020070 	.word	0x40020070
 80040cc:	40020088 	.word	0x40020088
 80040d0:	400200a0 	.word	0x400200a0
 80040d4:	400200b8 	.word	0x400200b8
 80040d8:	40020410 	.word	0x40020410
 80040dc:	40020428 	.word	0x40020428
 80040e0:	40020440 	.word	0x40020440
 80040e4:	40020458 	.word	0x40020458
 80040e8:	40020470 	.word	0x40020470
 80040ec:	40020488 	.word	0x40020488
 80040f0:	400204a0 	.word	0x400204a0
 80040f4:	400204b8 	.word	0x400204b8

080040f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80040fc:	f000 f9a6 	bl	800444c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004100:	f001 fbf0 	bl	80058e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004104:	f000 f8ce 	bl	80042a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004108:	f7ff fd90 	bl	8003c2c <MX_GPIO_Init>
  MX_DMA_Init();
 800410c:	f7ff fc80 	bl	8003a10 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004110:	f7ff fcae 	bl	8003a70 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8004114:	f7ff fe3c 	bl	8003d90 <MX_I2C3_Init>
  MX_SPI1_Init();
 8004118:	f000 f9ca 	bl	80044b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800411c:	f000 fa1e 	bl	800455c <MX_SPI2_Init>
  MX_TIM2_Init();
 8004120:	f000 fd1a 	bl	8004b58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004124:	f000 fd94 	bl	8004c50 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004128:	f000 fdf8 	bl	8004d1c <MX_TIM4_Init>
  MX_UART4_Init();
 800412c:	f001 f85c 	bl	80051e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8004130:	f001 f8a6 	bl	8005280 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004134:	f001 f940 	bl	80053b8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8004138:	f000 fedc 	bl	8004ef4 <MX_TIM13_Init>
  MX_FATFS_Init();
 800413c:	f00c fe5e 	bl	8010dfc <MX_FATFS_Init>
  MX_TIM6_Init();
 8004140:	f000 fe68 	bl	8004e14 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8004144:	f001 f8ec 	bl	8005320 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8004148:	f000 fe9c 	bl	8004e84 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 800414c:	f7fd f9ac 	bl	80014a8 <BMP280_init>
  SD_init();
 8004150:	f7fe ff92 	bl	8003078 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8004154:	2201      	movs	r2, #1
 8004156:	493a      	ldr	r1, [pc, #232]	@ (8004240 <main+0x148>)
 8004158:	483a      	ldr	r0, [pc, #232]	@ (8004244 <main+0x14c>)
 800415a:	f00a fc41 	bl	800e9e0 <HAL_UART_Receive_DMA>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 800415e:	2240      	movs	r2, #64	@ 0x40
 8004160:	4939      	ldr	r1, [pc, #228]	@ (8004248 <main+0x150>)
 8004162:	483a      	ldr	r0, [pc, #232]	@ (800424c <main+0x154>)
 8004164:	f00c fda7 	bl	8010cb6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8004168:	4b39      	ldr	r3, [pc, #228]	@ (8004250 <main+0x158>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a39      	ldr	r2, [pc, #228]	@ (8004254 <main+0x15c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04a      	beq.n	8004208 <main+0x110>
 8004172:	4b37      	ldr	r3, [pc, #220]	@ (8004250 <main+0x158>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a38      	ldr	r2, [pc, #224]	@ (8004258 <main+0x160>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d045      	beq.n	8004208 <main+0x110>
 800417c:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <main+0x158>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a36      	ldr	r2, [pc, #216]	@ (800425c <main+0x164>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d040      	beq.n	8004208 <main+0x110>
 8004186:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <main+0x158>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a35      	ldr	r2, [pc, #212]	@ (8004260 <main+0x168>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d03b      	beq.n	8004208 <main+0x110>
 8004190:	4b2f      	ldr	r3, [pc, #188]	@ (8004250 <main+0x158>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <main+0x16c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d036      	beq.n	8004208 <main+0x110>
 800419a:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <main+0x158>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a32      	ldr	r2, [pc, #200]	@ (8004268 <main+0x170>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d031      	beq.n	8004208 <main+0x110>
 80041a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004250 <main+0x158>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a30      	ldr	r2, [pc, #192]	@ (800426c <main+0x174>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02c      	beq.n	8004208 <main+0x110>
 80041ae:	4b28      	ldr	r3, [pc, #160]	@ (8004250 <main+0x158>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004270 <main+0x178>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d027      	beq.n	8004208 <main+0x110>
 80041b8:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <main+0x158>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004274 <main+0x17c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <main+0x110>
 80041c2:	4b23      	ldr	r3, [pc, #140]	@ (8004250 <main+0x158>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004278 <main+0x180>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01d      	beq.n	8004208 <main+0x110>
 80041cc:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <main+0x158>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2a      	ldr	r2, [pc, #168]	@ (800427c <main+0x184>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <main+0x110>
 80041d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004250 <main+0x158>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a29      	ldr	r2, [pc, #164]	@ (8004280 <main+0x188>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <main+0x110>
 80041e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <main+0x158>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a27      	ldr	r2, [pc, #156]	@ (8004284 <main+0x18c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <main+0x110>
 80041ea:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <main+0x158>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <main+0x190>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <main+0x110>
 80041f4:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <main+0x158>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a24      	ldr	r2, [pc, #144]	@ (800428c <main+0x194>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <main+0x110>
 80041fe:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <main+0x158>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <main+0x198>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <main+0x122>
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <main+0x158>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <main+0x158>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0208 	bic.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e007      	b.n	800422a <main+0x132>
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <main+0x158>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <main+0x158>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim6);
 800422a:	481a      	ldr	r0, [pc, #104]	@ (8004294 <main+0x19c>)
 800422c:	f009 fa8a 	bl	800d744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8004230:	4819      	ldr	r0, [pc, #100]	@ (8004298 <main+0x1a0>)
 8004232:	f009 fa87 	bl	800d744 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  nmea_parse(&GPS, DataBuffer);
 8004236:	4919      	ldr	r1, [pc, #100]	@ (800429c <main+0x1a4>)
 8004238:	4819      	ldr	r0, [pc, #100]	@ (80042a0 <main+0x1a8>)
 800423a:	f7ff fb39 	bl	80038b0 <nmea_parse>
 800423e:	e7fa      	b.n	8004236 <main+0x13e>
 8004240:	24000403 	.word	0x24000403
 8004244:	24004dd8 	.word	0x24004dd8
 8004248:	24004754 	.word	0x24004754
 800424c:	24004cb0 	.word	0x24004cb0
 8004250:	24004f00 	.word	0x24004f00
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	24004bcc 	.word	0x24004bcc
 8004298:	24004c18 	.word	0x24004c18
 800429c:	24004794 	.word	0x24004794
 80042a0:	24004998 	.word	0x24004998

080042a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b09c      	sub	sp, #112	@ 0x70
 80042a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042ae:	224c      	movs	r2, #76	@ 0x4c
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f012 fc63 	bl	8016b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	2220      	movs	r2, #32
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f012 fc5d 	bl	8016b7e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80042c4:	4b30      	ldr	r3, [pc, #192]	@ (8004388 <SystemClock_Config+0xe4>)
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80042ce:	2002      	movs	r0, #2
 80042d0:	f005 fa62 	bl	8009798 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80042d4:	2300      	movs	r3, #0
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <SystemClock_Config+0xe8>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a2b      	ldr	r2, [pc, #172]	@ (800438c <SystemClock_Config+0xe8>)
 80042de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b29      	ldr	r3, [pc, #164]	@ (800438c <SystemClock_Config+0xe8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80042f0:	bf00      	nop
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <SystemClock_Config+0xe8>)
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fe:	d1f8      	bne.n	80042f2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004300:	2302      	movs	r3, #2
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004304:	2301      	movs	r3, #1
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8004308:	2340      	movs	r3, #64	@ 0x40
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800430c:	2302      	movs	r3, #2
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004310:	2300      	movs	r3, #0
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004314:	2304      	movs	r3, #4
 8004316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8004318:	2323      	movs	r3, #35	@ 0x23
 800431a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800431c:	2302      	movs	r3, #2
 800431e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004320:	2302      	movs	r3, #2
 8004322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004324:	2302      	movs	r3, #2
 8004326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004328:	230c      	movs	r3, #12
 800432a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800432c:	2300      	movs	r3, #0
 800432e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fa67 	bl	800980c <HAL_RCC_OscConfig>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004344:	f000 f8ae 	bl	80044a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004348:	233f      	movs	r3, #63	@ 0x3f
 800434a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800434c:	2303      	movs	r3, #3
 800434e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004358:	2340      	movs	r3, #64	@ 0x40
 800435a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800435c:	2340      	movs	r3, #64	@ 0x40
 800435e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004364:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004366:	2340      	movs	r3, #64	@ 0x40
 8004368:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2106      	movs	r1, #6
 800436e:	4618      	mov	r0, r3
 8004370:	f005 fe7e 	bl	800a070 <HAL_RCC_ClockConfig>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800437a:	f000 f893 	bl	80044a4 <Error_Handler>
  }
}
 800437e:	bf00      	nop
 8004380:	3770      	adds	r7, #112	@ 0x70
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
 800438c:	58024800 	.word	0x58024800

08004390 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a10      	ldr	r2, [pc, #64]	@ (80043e0 <HAL_UART_RxCpltCallback+0x50>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10a      	bne.n	80043b8 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80043a2:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_UART_RxCpltCallback+0x54>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd ffbe 	bl	8002328 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80043ac:	2201      	movs	r2, #1
 80043ae:	490d      	ldr	r1, [pc, #52]	@ (80043e4 <HAL_UART_RxCpltCallback+0x54>)
 80043b0:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <HAL_UART_RxCpltCallback+0x58>)
 80043b2:	f00a fb15 	bl	800e9e0 <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 80043b6:	e00e      	b.n	80043d6 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0b      	ldr	r2, [pc, #44]	@ (80043ec <HAL_UART_RxCpltCallback+0x5c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d109      	bne.n	80043d6 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <HAL_UART_RxCpltCallback+0x60>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fda8 	bl	8001f1c <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80043cc:	2201      	movs	r2, #1
 80043ce:	4908      	ldr	r1, [pc, #32]	@ (80043f0 <HAL_UART_RxCpltCallback+0x60>)
 80043d0:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <HAL_UART_RxCpltCallback+0x64>)
 80043d2:	f00a fb05 	bl	800e9e0 <HAL_UART_Receive_DMA>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40011000 	.word	0x40011000
 80043e4:	240004cd 	.word	0x240004cd
 80043e8:	24004d44 	.word	0x24004d44
 80043ec:	40004800 	.word	0x40004800
 80043f0:	24000403 	.word	0x24000403
 80043f4:	24004dd8 	.word	0x24004dd8

080043f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0e      	ldr	r2, [pc, #56]	@ (8004440 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 800440a:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	4a0c      	ldr	r2, [pc, #48]	@ (8004444 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004412:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 8004414:	f7fd fed6 	bl	80021c4 <LED_Tasks>
		SBUS_IntegrityVerification();
 8004418:	f7fe fb58 	bl	8002acc <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d107      	bne.n	8004436 <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 8004426:	f7fd fe09 	bl	800203c <BNO_Tasks>
		BMP280_calculate();
 800442a:	f7fd f863 	bl	80014f4 <BMP280_calculate>

		PWM_Assing();
 800442e:	f7fd ff17 	bl	8002260 <PWM_Assing>
		SD_blackbox_write();
 8004432:	f7fe fdbf 	bl	8002fb4 <SD_blackbox_write>
	}
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40001000 	.word	0x40001000
 8004444:	240049d0 	.word	0x240049d0
 8004448:	40001400 	.word	0x40001400

0800444c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004452:	463b      	mov	r3, r7
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800445e:	f001 fbe3 	bl	8005c28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004462:	2301      	movs	r3, #1
 8004464:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004466:	2300      	movs	r3, #0
 8004468:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800446e:	231f      	movs	r3, #31
 8004470:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004472:	2387      	movs	r3, #135	@ 0x87
 8004474:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004476:	2300      	movs	r3, #0
 8004478:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800447a:	2300      	movs	r3, #0
 800447c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800447e:	2301      	movs	r3, #1
 8004480:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004482:	2301      	movs	r3, #1
 8004484:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800448e:	463b      	mov	r3, r7
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fc01 	bl	8005c98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004496:	2004      	movs	r0, #4
 8004498:	f001 fbde 	bl	8005c58 <HAL_MPU_Enable>

}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044a8:	b672      	cpsid	i
}
 80044aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <Error_Handler+0x8>

080044b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80044b4:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044b6:	4a28      	ldr	r2, [pc, #160]	@ (8004558 <MX_SPI1_Init+0xa8>)
 80044b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044ba:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80044c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044c2:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044ca:	2207      	movs	r2, #7
 80044cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ce:	4b21      	ldr	r3, [pc, #132]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044da:	4b1e      	ldr	r3, [pc, #120]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80044e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80044e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044e4:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80044e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044f0:	4b18      	ldr	r3, [pc, #96]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f6:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80044fc:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <MX_SPI1_Init+0xa4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004502:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004504:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004508:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800450a:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <MX_SPI1_Init+0xa4>)
 800450c:	2200      	movs	r2, #0
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004512:	2200      	movs	r2, #0
 8004514:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004518:	2200      	movs	r2, #0
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800451c:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <MX_SPI1_Init+0xa4>)
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004522:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004524:	2200      	movs	r2, #0
 8004526:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004528:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <MX_SPI1_Init+0xa4>)
 800452a:	2200      	movs	r2, #0
 800452c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004530:	2200      	movs	r2, #0
 8004532:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004536:	2200      	movs	r2, #0
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <MX_SPI1_Init+0xa4>)
 800453c:	2200      	movs	r2, #0
 800453e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004540:	4804      	ldr	r0, [pc, #16]	@ (8004554 <MX_SPI1_Init+0xa4>)
 8004542:	f007 ff01 	bl	800c348 <HAL_SPI_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800454c:	f7ff ffaa 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	240049d4 	.word	0x240049d4
 8004558:	40013000 	.word	0x40013000

0800455c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004560:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004562:	4a28      	ldr	r2, [pc, #160]	@ (8004604 <MX_SPI2_Init+0xa8>)
 8004564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004568:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800456c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800456e:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004574:	4b22      	ldr	r3, [pc, #136]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004576:	2207      	movs	r2, #7
 8004578:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800457a:	4b21      	ldr	r3, [pc, #132]	@ (8004600 <MX_SPI2_Init+0xa4>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004580:	4b1f      	ldr	r3, [pc, #124]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004582:	2200      	movs	r2, #0
 8004584:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004586:	4b1e      	ldr	r3, [pc, #120]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004588:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800458c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004590:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8004594:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <MX_SPI2_Init+0xa4>)
 8004598:	2200      	movs	r2, #0
 800459a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800459c:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <MX_SPI2_Init+0xa4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a2:	4b17      	ldr	r3, [pc, #92]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80045a8:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80045bc:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80045c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80045c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80045ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80045da:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80045e0:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80045e6:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045ec:	4804      	ldr	r0, [pc, #16]	@ (8004600 <MX_SPI2_Init+0xa4>)
 80045ee:	f007 feab 	bl	800c348 <HAL_SPI_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80045f8:	f7ff ff54 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	24004a5c 	.word	0x24004a5c
 8004604:	40003800 	.word	0x40003800

08004608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0bc      	sub	sp, #240	@ 0xf0
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004620:	f107 0318 	add.w	r3, r7, #24
 8004624:	22c0      	movs	r2, #192	@ 0xc0
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f012 faa8 	bl	8016b7e <memset>
  if(spiHandle->Instance==SPI1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4c      	ldr	r2, [pc, #304]	@ (8004764 <HAL_SPI_MspInit+0x15c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d145      	bne.n	80046c4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004638:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004644:	2300      	movs	r3, #0
 8004646:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004648:	f107 0318 	add.w	r3, r7, #24
 800464c:	4618      	mov	r0, r3
 800464e:	f006 f89b 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004658:	f7ff ff24 	bl	80044a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800465c:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 800465e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004662:	4a41      	ldr	r2, [pc, #260]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004664:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004668:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 800466e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800467a:	4b3b      	ldr	r3, [pc, #236]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 800467c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004680:	4a39      	ldr	r2, [pc, #228]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800468a:	4b37      	ldr	r3, [pc, #220]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 800468c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004698:	23e0      	movs	r3, #224	@ 0xe0
 800469a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
 80046a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046b0:	2305      	movs	r3, #5
 80046b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80046ba:	4619      	mov	r1, r3
 80046bc:	482b      	ldr	r0, [pc, #172]	@ (800476c <HAL_SPI_MspInit+0x164>)
 80046be:	f004 fd6d 	bl	800919c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80046c2:	e04a      	b.n	800475a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_SPI_MspInit+0x168>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d145      	bne.n	800475a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80046ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80046da:	2300      	movs	r3, #0
 80046dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046de:	f107 0318 	add.w	r3, r7, #24
 80046e2:	4618      	mov	r0, r3
 80046e4:	f006 f850 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80046ee:	f7ff fed9 	bl	80044a4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 80046f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80046f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 80046fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046fe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004704:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004710:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004712:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004716:	4a14      	ldr	r2, [pc, #80]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004720:	4b11      	ldr	r3, [pc, #68]	@ (8004768 <HAL_SPI_MspInit+0x160>)
 8004722:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800472e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004748:	2305      	movs	r3, #5
 800474a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004752:	4619      	mov	r1, r3
 8004754:	4807      	ldr	r0, [pc, #28]	@ (8004774 <HAL_SPI_MspInit+0x16c>)
 8004756:	f004 fd21 	bl	800919c <HAL_GPIO_Init>
}
 800475a:	bf00      	nop
 800475c:	37f0      	adds	r7, #240	@ 0xf0
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40013000 	.word	0x40013000
 8004768:	58024400 	.word	0x58024400
 800476c:	58020000 	.word	0x58020000
 8004770:	40003800 	.word	0x40003800
 8004774:	58020400 	.word	0x58020400

08004778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477e:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <HAL_MspInit+0x30>)
 8004780:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004784:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <HAL_MspInit+0x30>)
 8004786:	f043 0302 	orr.w	r3, r3, #2
 800478a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_MspInit+0x30>)
 8004790:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	58024400 	.word	0x58024400

080047ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <NMI_Handler+0x4>

080047b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <HardFault_Handler+0x4>

080047bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <MemManage_Handler+0x4>

080047c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <BusFault_Handler+0x4>

080047cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <UsageFault_Handler+0x4>

080047d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <SysTick_Handler+0x34>)
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <SysTick_Handler+0x18>
	    Timer1--;
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <SysTick_Handler+0x34>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <SysTick_Handler+0x34>)
 8004816:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8004818:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <SysTick_Handler+0x38>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <SysTick_Handler+0x2c>
	    Timer2--;
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <SysTick_Handler+0x38>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	4b03      	ldr	r3, [pc, #12]	@ (8004838 <SysTick_Handler+0x38>)
 800482a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800482c:	f001 f8cc 	bl	80059c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	24005074 	.word	0x24005074
 8004838:	24005076 	.word	0x24005076

0800483c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004840:	4802      	ldr	r0, [pc, #8]	@ (800484c <DMA1_Stream0_IRQHandler+0x10>)
 8004842:	f002 fdc5 	bl	80073d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	24004f78 	.word	0x24004f78

08004850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004854:	4802      	ldr	r0, [pc, #8]	@ (8004860 <DMA1_Stream1_IRQHandler+0x10>)
 8004856:	f002 fdbb 	bl	80073d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	24004ff0 	.word	0x24004ff0

08004864 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004868:	4802      	ldr	r0, [pc, #8]	@ (8004874 <DMA1_Stream2_IRQHandler+0x10>)
 800486a:	f002 fdb1 	bl	80073d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	24004f00 	.word	0x24004f00

08004878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800487c:	4802      	ldr	r0, [pc, #8]	@ (8004888 <USART1_IRQHandler+0x10>)
 800487e:	f00a fa37 	bl	800ecf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	24004d44 	.word	0x24004d44

0800488c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004890:	4802      	ldr	r0, [pc, #8]	@ (800489c <USART3_IRQHandler+0x10>)
 8004892:	f00a fa2d 	bl	800ecf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	24004dd8 	.word	0x24004dd8

080048a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80048a4:	4802      	ldr	r0, [pc, #8]	@ (80048b0 <UART4_IRQHandler+0x10>)
 80048a6:	f00a fa23 	bl	800ecf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	24004cb0 	.word	0x24004cb0

080048b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048b8:	4802      	ldr	r0, [pc, #8]	@ (80048c4 <TIM6_DAC_IRQHandler+0x10>)
 80048ba:	f009 f921 	bl	800db00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	24004bcc 	.word	0x24004bcc

080048c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80048cc:	4802      	ldr	r0, [pc, #8]	@ (80048d8 <TIM7_IRQHandler+0x10>)
 80048ce:	f009 f917 	bl	800db00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	24004c18 	.word	0x24004c18

080048dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return 1;
 80048e0:	2301      	movs	r3, #1
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <_kill>:

int _kill(int pid, int sig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048f6:	f012 fa25 	bl	8016d44 <__errno>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2216      	movs	r2, #22
 80048fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <_exit>:

void _exit (int status)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ffe7 	bl	80048ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <_exit+0x12>

08004922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e00a      	b.n	800494a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004934:	f3af 8000 	nop.w
 8004938:	4601      	mov	r1, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	60ba      	str	r2, [r7, #8]
 8004940:	b2ca      	uxtb	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	dbf0      	blt.n	8004934 <_read+0x12>
  }

  return len;
 8004952:	687b      	ldr	r3, [r7, #4]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e009      	b.n	8004982 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	60ba      	str	r2, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3301      	adds	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	dbf1      	blt.n	800496e <_write+0x12>
  }
  return len;
 800498a:	687b      	ldr	r3, [r7, #4]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_close>:

int _close(int file)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049bc:	605a      	str	r2, [r3, #4]
  return 0;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <_isatty>:

int _isatty(int file)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a04:	4a14      	ldr	r2, [pc, #80]	@ (8004a58 <_sbrk+0x5c>)
 8004a06:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <_sbrk+0x60>)
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <_sbrk+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a18:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <_sbrk+0x64>)
 8004a1a:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <_sbrk+0x68>)
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a1e:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <_sbrk+0x64>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d207      	bcs.n	8004a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a2c:	f012 f98a 	bl	8016d44 <__errno>
 8004a30:	4603      	mov	r3, r0
 8004a32:	220c      	movs	r2, #12
 8004a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e009      	b.n	8004a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <_sbrk+0x64>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a42:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <_sbrk+0x64>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	4a05      	ldr	r2, [pc, #20]	@ (8004a60 <_sbrk+0x64>)
 8004a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	24100000 	.word	0x24100000
 8004a5c:	00000400 	.word	0x00000400
 8004a60:	24004ae4 	.word	0x24004ae4
 8004a64:	24005400 	.word	0x24005400

08004a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a6c:	4b32      	ldr	r3, [pc, #200]	@ (8004b38 <SystemInit+0xd0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	4a31      	ldr	r2, [pc, #196]	@ (8004b38 <SystemInit+0xd0>)
 8004a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004b3c <SystemInit+0xd4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d807      	bhi.n	8004a98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a88:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <SystemInit+0xd4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <SystemInit+0xd4>)
 8004a92:	f043 0303 	orr.w	r3, r3, #3
 8004a96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004a98:	4b29      	ldr	r3, [pc, #164]	@ (8004b40 <SystemInit+0xd8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a28      	ldr	r2, [pc, #160]	@ (8004b40 <SystemInit+0xd8>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <SystemInit+0xd8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004aaa:	4b25      	ldr	r3, [pc, #148]	@ (8004b40 <SystemInit+0xd8>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4924      	ldr	r1, [pc, #144]	@ (8004b40 <SystemInit+0xd8>)
 8004ab0:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <SystemInit+0xdc>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ab6:	4b21      	ldr	r3, [pc, #132]	@ (8004b3c <SystemInit+0xd4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b3c <SystemInit+0xd4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 030f 	bic.w	r3, r3, #15
 8004aca:	4a1c      	ldr	r2, [pc, #112]	@ (8004b3c <SystemInit+0xd4>)
 8004acc:	f043 0303 	orr.w	r3, r3, #3
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b40 <SystemInit+0xd8>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <SystemInit+0xd8>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004ade:	4b18      	ldr	r3, [pc, #96]	@ (8004b40 <SystemInit+0xd8>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ae4:	4b16      	ldr	r3, [pc, #88]	@ (8004b40 <SystemInit+0xd8>)
 8004ae6:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <SystemInit+0xe0>)
 8004ae8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <SystemInit+0xd8>)
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <SystemInit+0xe4>)
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004af0:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <SystemInit+0xd8>)
 8004af2:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <SystemInit+0xe8>)
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <SystemInit+0xd8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004afc:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <SystemInit+0xd8>)
 8004afe:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <SystemInit+0xe8>)
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004b02:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <SystemInit+0xd8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004b08:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <SystemInit+0xd8>)
 8004b0a:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <SystemInit+0xe8>)
 8004b0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <SystemInit+0xd8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <SystemInit+0xd8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <SystemInit+0xd8>)
 8004b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <SystemInit+0xd8>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <SystemInit+0xec>)
 8004b28:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004b2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000ed00 	.word	0xe000ed00
 8004b3c:	52002000 	.word	0x52002000
 8004b40:	58024400 	.word	0x58024400
 8004b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b48:	02020200 	.word	0x02020200
 8004b4c:	01ff0000 	.word	0x01ff0000
 8004b50:	01010280 	.word	0x01010280
 8004b54:	52004000 	.word	0x52004000

08004b58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	@ 0x28
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b5e:	f107 031c 	add.w	r3, r7, #28
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	611a      	str	r2, [r3, #16]
 8004b78:	615a      	str	r2, [r3, #20]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b7c:	4b33      	ldr	r3, [pc, #204]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8004b84:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004b86:	f240 1217 	movw	r2, #279	@ 0x117
 8004b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004b92:	4b2e      	ldr	r3, [pc, #184]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004b94:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004b98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004ba2:	2280      	movs	r2, #128	@ 0x80
 8004ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ba6:	4829      	ldr	r0, [pc, #164]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004ba8:	f008 fe44 	bl	800d834 <HAL_TIM_PWM_Init>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004bb2:	f7ff fc77 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bbe:	f107 031c 	add.w	r3, r7, #28
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4821      	ldr	r0, [pc, #132]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004bc6:	f009 fd81 	bl	800e6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8004bd0:	f7ff fc68 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bd4:	2360      	movs	r3, #96	@ 0x60
 8004bd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004be4:	463b      	mov	r3, r7
 8004be6:	2200      	movs	r2, #0
 8004be8:	4619      	mov	r1, r3
 8004bea:	4818      	ldr	r0, [pc, #96]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004bec:	f009 f890 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8004bf6:	f7ff fc55 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4812      	ldr	r0, [pc, #72]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004c02:	f009 f885 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8004c0c:	f7ff fc4a 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c10:	463b      	mov	r3, r7
 8004c12:	2208      	movs	r2, #8
 8004c14:	4619      	mov	r1, r3
 8004c16:	480d      	ldr	r0, [pc, #52]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004c18:	f009 f87a 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8004c22:	f7ff fc3f 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c26:	463b      	mov	r3, r7
 8004c28:	220c      	movs	r2, #12
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4807      	ldr	r0, [pc, #28]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004c2e:	f009 f86f 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8004c38:	f7ff fc34 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c3c:	4803      	ldr	r0, [pc, #12]	@ (8004c4c <MX_TIM2_Init+0xf4>)
 8004c3e:	f000 fa29 	bl	8005094 <HAL_TIM_MspPostInit>

}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	@ 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	24004ae8 	.word	0x24004ae8

08004c50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	@ 0x28
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c56:	f107 031c 	add.w	r3, r7, #28
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c62:	463b      	mov	r3, r7
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c74:	4b27      	ldr	r3, [pc, #156]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c76:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <MX_TIM3_Init+0xc8>)
 8004c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8004c7a:	4b26      	ldr	r3, [pc, #152]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c7c:	f240 1217 	movw	r2, #279	@ 0x117
 8004c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c82:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8004c88:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c8a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c90:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c98:	2280      	movs	r2, #128	@ 0x80
 8004c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c9c:	481d      	ldr	r0, [pc, #116]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004c9e:	f008 fdc9 	bl	800d834 <HAL_TIM_PWM_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8004ca8:	f7ff fbfc 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cb4:	f107 031c 	add.w	r3, r7, #28
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4816      	ldr	r0, [pc, #88]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004cbc:	f009 fd06 	bl	800e6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004cc6:	f7ff fbed 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cca:	2360      	movs	r3, #96	@ 0x60
 8004ccc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cda:	463b      	mov	r3, r7
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4619      	mov	r1, r3
 8004ce0:	480c      	ldr	r0, [pc, #48]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004ce2:	f009 f815 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004cec:	f7ff fbda 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4807      	ldr	r0, [pc, #28]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004cf8:	f009 f80a 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8004d02:	f7ff fbcf 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d06:	4803      	ldr	r0, [pc, #12]	@ (8004d14 <MX_TIM3_Init+0xc4>)
 8004d08:	f000 f9c4 	bl	8005094 <HAL_TIM_MspPostInit>

}
 8004d0c:	bf00      	nop
 8004d0e:	3728      	adds	r7, #40	@ 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	24004b34 	.word	0x24004b34
 8004d18:	40000400 	.word	0x40000400

08004d1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d22:	f107 031c 	add.w	r3, r7, #28
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2e:	463b      	mov	r3, r7
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d40:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d42:	4a33      	ldr	r2, [pc, #204]	@ (8004e10 <MX_TIM4_Init+0xf4>)
 8004d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8004d46:	4b31      	ldr	r3, [pc, #196]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d48:	f240 1217 	movw	r2, #279	@ 0x117
 8004d4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8004d54:	4b2d      	ldr	r3, [pc, #180]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d56:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004d5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d62:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004d68:	4828      	ldr	r0, [pc, #160]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d6a:	f008 fd63 	bl	800d834 <HAL_TIM_PWM_Init>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004d74:	f7ff fb96 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	4619      	mov	r1, r3
 8004d86:	4821      	ldr	r0, [pc, #132]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004d88:	f009 fca0 	bl	800e6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004d92:	f7ff fb87 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d96:	2360      	movs	r3, #96	@ 0x60
 8004d98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004da6:	463b      	mov	r3, r7
 8004da8:	2200      	movs	r2, #0
 8004daa:	4619      	mov	r1, r3
 8004dac:	4817      	ldr	r0, [pc, #92]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004dae:	f008 ffaf 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004db8:	f7ff fb74 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4812      	ldr	r0, [pc, #72]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004dc4:	f008 ffa4 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004dce:	f7ff fb69 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	480c      	ldr	r0, [pc, #48]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004dda:	f008 ff99 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004de4:	f7ff fb5e 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004de8:	463b      	mov	r3, r7
 8004dea:	220c      	movs	r2, #12
 8004dec:	4619      	mov	r1, r3
 8004dee:	4807      	ldr	r0, [pc, #28]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004df0:	f008 ff8e 	bl	800dd10 <HAL_TIM_PWM_ConfigChannel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004dfa:	f7ff fb53 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004dfe:	4803      	ldr	r0, [pc, #12]	@ (8004e0c <MX_TIM4_Init+0xf0>)
 8004e00:	f000 f948 	bl	8005094 <HAL_TIM_MspPostInit>

}
 8004e04:	bf00      	nop
 8004e06:	3728      	adds	r7, #40	@ 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	24004b80 	.word	0x24004b80
 8004e10:	40000800 	.word	0x40000800

08004e14 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004e24:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e26:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <MX_TIM6_Init+0x6c>)
 8004e28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004e30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8004e38:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e3a:	f240 1217 	movw	r2, #279	@ 0x117
 8004e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e48:	f008 fc25 	bl	800d696 <HAL_TIM_Base_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004e52:	f7ff fb27 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4806      	ldr	r0, [pc, #24]	@ (8004e7c <MX_TIM6_Init+0x68>)
 8004e64:	f009 fc32 	bl	800e6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004e6e:	f7ff fb19 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	24004bcc 	.word	0x24004bcc
 8004e80:	40001000 	.word	0x40001000

08004e84 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e94:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004e96:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <MX_TIM7_Init+0x6c>)
 8004e98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004e9a:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004e9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004ea0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8004ea8:	4b10      	ldr	r3, [pc, #64]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004eaa:	f240 1217 	movw	r2, #279	@ 0x117
 8004eae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004eb6:	480d      	ldr	r0, [pc, #52]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004eb8:	f008 fbed 	bl	800d696 <HAL_TIM_Base_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004ec2:	f7ff faef 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4806      	ldr	r0, [pc, #24]	@ (8004eec <MX_TIM7_Init+0x68>)
 8004ed4:	f009 fbfa 	bl	800e6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004ede:	f7ff fae1 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	24004c18 	.word	0x24004c18
 8004ef0:	40001400 	.word	0x40001400

08004ef4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004efa:	4a0f      	ldr	r2, [pc, #60]	@ (8004f38 <MX_TIM13_Init+0x44>)
 8004efc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004efe:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f00:	f240 1217 	movw	r2, #279	@ 0x117
 8004f04:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f12:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f14:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f1a:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f1c:	2280      	movs	r2, #128	@ 0x80
 8004f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f20:	4804      	ldr	r0, [pc, #16]	@ (8004f34 <MX_TIM13_Init+0x40>)
 8004f22:	f008 fbb8 	bl	800d696 <HAL_TIM_Base_Init>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004f2c:	f7ff faba 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	24004c64 	.word	0x24004c64
 8004f38:	40001c00 	.word	0x40001c00

08004f3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4c:	d10f      	bne.n	8004f6e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004f6c:	e028      	b.n	8004fc0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a17      	ldr	r2, [pc, #92]	@ (8004fd0 <HAL_TIM_PWM_MspInit+0x94>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10f      	bne.n	8004f98 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f78:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004f7e:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004f8a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
}
 8004f96:	e013      	b.n	8004fc0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd4 <HAL_TIM_PWM_MspInit+0x98>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004fa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004fa8:	4a08      	ldr	r2, [pc, #32]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_TIM_PWM_MspInit+0x90>)
 8004fb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800

08004fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <HAL_TIM_Base_MspInit+0xac>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d117      	bne.n	800501a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fea:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8004fec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ff0:	4a25      	ldr	r2, [pc, #148]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8004ff2:	f043 0310 	orr.w	r3, r3, #16
 8004ff6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004ffa:	4b23      	ldr	r3, [pc, #140]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8004ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005008:	2200      	movs	r2, #0
 800500a:	2100      	movs	r1, #0
 800500c:	2036      	movs	r0, #54	@ 0x36
 800500e:	f000 fdd6 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005012:	2036      	movs	r0, #54	@ 0x36
 8005014:	f000 fded 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8005018:	e030      	b.n	800507c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <HAL_TIM_Base_MspInit+0xb4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d117      	bne.n	8005054 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005024:	4b18      	ldr	r3, [pc, #96]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8005026:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8005034:	4b14      	ldr	r3, [pc, #80]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8005036:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	2037      	movs	r0, #55	@ 0x37
 8005048:	f000 fdb9 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800504c:	2037      	movs	r0, #55	@ 0x37
 800504e:	f000 fdd0 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8005052:	e013      	b.n	800507c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0d      	ldr	r2, [pc, #52]	@ (8005090 <HAL_TIM_Base_MspInit+0xb8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10e      	bne.n	800507c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800505e:	4b0a      	ldr	r3, [pc, #40]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8005060:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005064:	4a08      	ldr	r2, [pc, #32]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8005066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800506e:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_TIM_Base_MspInit+0xb0>)
 8005070:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	bf00      	nop
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40001000 	.word	0x40001000
 8005088:	58024400 	.word	0x58024400
 800508c:	40001400 	.word	0x40001400
 8005090:	40001c00 	.word	0x40001c00

08005094 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	@ 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509c:	f107 031c 	add.w	r3, r7, #28
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b4:	d13f      	bne.n	8005136 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050bc:	4a45      	ldr	r2, [pc, #276]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80050c6:	4b43      	ldr	r3, [pc, #268]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d4:	4b3f      	ldr	r3, [pc, #252]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050da:	4a3e      	ldr	r2, [pc, #248]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80050e4:	4b3b      	ldr	r3, [pc, #236]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 80050e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80050f2:	f248 030c 	movw	r3, #32780	@ 0x800c
 80050f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	2302      	movs	r3, #2
 80050fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005104:	2301      	movs	r3, #1
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005108:	f107 031c 	add.w	r3, r7, #28
 800510c:	4619      	mov	r1, r3
 800510e:	4832      	ldr	r0, [pc, #200]	@ (80051d8 <HAL_TIM_MspPostInit+0x144>)
 8005110:	f004 f844 	bl	800919c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005114:	2308      	movs	r3, #8
 8005116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005118:	2302      	movs	r3, #2
 800511a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511c:	2300      	movs	r3, #0
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005120:	2300      	movs	r3, #0
 8005122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005124:	2301      	movs	r3, #1
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005128:	f107 031c 	add.w	r3, r7, #28
 800512c:	4619      	mov	r1, r3
 800512e:	482b      	ldr	r0, [pc, #172]	@ (80051dc <HAL_TIM_MspPostInit+0x148>)
 8005130:	f004 f834 	bl	800919c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005134:	e049      	b.n	80051ca <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a29      	ldr	r2, [pc, #164]	@ (80051e0 <HAL_TIM_MspPostInit+0x14c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d11f      	bne.n	8005180 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005140:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 8005142:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005146:	4a23      	ldr	r2, [pc, #140]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005150:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 8005152:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800515e:	2330      	movs	r3, #48	@ 0x30
 8005160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005162:	2302      	movs	r3, #2
 8005164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516a:	2300      	movs	r3, #0
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800516e:	2302      	movs	r3, #2
 8005170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005172:	f107 031c 	add.w	r3, r7, #28
 8005176:	4619      	mov	r1, r3
 8005178:	4818      	ldr	r0, [pc, #96]	@ (80051dc <HAL_TIM_MspPostInit+0x148>)
 800517a:	f004 f80f 	bl	800919c <HAL_GPIO_Init>
}
 800517e:	e024      	b.n	80051ca <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_TIM_MspPostInit+0x150>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d11f      	bne.n	80051ca <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 800518c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005190:	4a10      	ldr	r2, [pc, #64]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800519a:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <HAL_TIM_MspPostInit+0x140>)
 800519c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80051a8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80051ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ae:	2302      	movs	r3, #2
 80051b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b6:	2300      	movs	r3, #0
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051ba:	2302      	movs	r3, #2
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051be:	f107 031c 	add.w	r3, r7, #28
 80051c2:	4619      	mov	r1, r3
 80051c4:	4805      	ldr	r0, [pc, #20]	@ (80051dc <HAL_TIM_MspPostInit+0x148>)
 80051c6:	f003 ffe9 	bl	800919c <HAL_GPIO_Init>
}
 80051ca:	bf00      	nop
 80051cc:	3730      	adds	r7, #48	@ 0x30
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	58020000 	.word	0x58020000
 80051dc:	58020400 	.word	0x58020400
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800

080051e8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80051ec:	4b22      	ldr	r3, [pc, #136]	@ (8005278 <MX_UART4_Init+0x90>)
 80051ee:	4a23      	ldr	r2, [pc, #140]	@ (800527c <MX_UART4_Init+0x94>)
 80051f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80051f2:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <MX_UART4_Init+0x90>)
 80051f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80051f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80051fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005278 <MX_UART4_Init+0x90>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005200:	4b1d      	ldr	r3, [pc, #116]	@ (8005278 <MX_UART4_Init+0x90>)
 8005202:	2200      	movs	r2, #0
 8005204:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005206:	4b1c      	ldr	r3, [pc, #112]	@ (8005278 <MX_UART4_Init+0x90>)
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <MX_UART4_Init+0x90>)
 800520e:	220c      	movs	r2, #12
 8005210:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005212:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <MX_UART4_Init+0x90>)
 8005214:	2200      	movs	r2, #0
 8005216:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005218:	4b17      	ldr	r3, [pc, #92]	@ (8005278 <MX_UART4_Init+0x90>)
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800521e:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <MX_UART4_Init+0x90>)
 8005220:	2200      	movs	r2, #0
 8005222:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005224:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <MX_UART4_Init+0x90>)
 8005226:	2200      	movs	r2, #0
 8005228:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800522a:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <MX_UART4_Init+0x90>)
 800522c:	2200      	movs	r2, #0
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005230:	4811      	ldr	r0, [pc, #68]	@ (8005278 <MX_UART4_Init+0x90>)
 8005232:	f009 faf7 	bl	800e824 <HAL_UART_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800523c:	f7ff f932 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005240:	2100      	movs	r1, #0
 8005242:	480d      	ldr	r0, [pc, #52]	@ (8005278 <MX_UART4_Init+0x90>)
 8005244:	f00b fcbb 	bl	8010bbe <HAL_UARTEx_SetTxFifoThreshold>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800524e:	f7ff f929 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005252:	2100      	movs	r1, #0
 8005254:	4808      	ldr	r0, [pc, #32]	@ (8005278 <MX_UART4_Init+0x90>)
 8005256:	f00b fcf0 	bl	8010c3a <HAL_UARTEx_SetRxFifoThreshold>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005260:	f7ff f920 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005264:	4804      	ldr	r0, [pc, #16]	@ (8005278 <MX_UART4_Init+0x90>)
 8005266:	f00b fc71 	bl	8010b4c <HAL_UARTEx_DisableFifoMode>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8005270:	f7ff f918 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	24004cb0 	.word	0x24004cb0
 800527c:	40004c00 	.word	0x40004c00

08005280 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005284:	4b23      	ldr	r3, [pc, #140]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 8005286:	4a24      	ldr	r2, [pc, #144]	@ (8005318 <MX_USART1_UART_Init+0x98>)
 8005288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800528a:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 800528c:	4a23      	ldr	r2, [pc, #140]	@ (800531c <MX_USART1_UART_Init+0x9c>)
 800528e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8005290:	4b20      	ldr	r3, [pc, #128]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 8005292:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005298:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 800529a:	2200      	movs	r2, #0
 800529c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052a8:	220c      	movs	r2, #12
 80052aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ac:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052b2:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052b8:	4b16      	ldr	r3, [pc, #88]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052c4:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052ca:	4812      	ldr	r0, [pc, #72]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052cc:	f009 faaa 	bl	800e824 <HAL_UART_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80052d6:	f7ff f8e5 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052da:	2100      	movs	r1, #0
 80052dc:	480d      	ldr	r0, [pc, #52]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052de:	f00b fc6e 	bl	8010bbe <HAL_UARTEx_SetTxFifoThreshold>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80052e8:	f7ff f8dc 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052ec:	2100      	movs	r1, #0
 80052ee:	4809      	ldr	r0, [pc, #36]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 80052f0:	f00b fca3 	bl	8010c3a <HAL_UARTEx_SetRxFifoThreshold>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80052fa:	f7ff f8d3 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80052fe:	4805      	ldr	r0, [pc, #20]	@ (8005314 <MX_USART1_UART_Init+0x94>)
 8005300:	f00b fc24 	bl	8010b4c <HAL_UARTEx_DisableFifoMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800530a:	f7ff f8cb 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	24004d44 	.word	0x24004d44
 8005318:	40011000 	.word	0x40011000
 800531c:	000186a0 	.word	0x000186a0

08005320 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005324:	4b22      	ldr	r3, [pc, #136]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005326:	4a23      	ldr	r2, [pc, #140]	@ (80053b4 <MX_USART3_UART_Init+0x94>)
 8005328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800532a:	4b21      	ldr	r3, [pc, #132]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800532c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005332:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005334:	2200      	movs	r2, #0
 8005336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005338:	4b1d      	ldr	r3, [pc, #116]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800533a:	2200      	movs	r2, #0
 800533c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800533e:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005340:	2200      	movs	r2, #0
 8005342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005344:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005346:	220c      	movs	r2, #12
 8005348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800534a:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800534c:	2200      	movs	r2, #0
 800534e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005350:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005352:	2200      	movs	r2, #0
 8005354:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005356:	4b16      	ldr	r3, [pc, #88]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005358:	2200      	movs	r2, #0
 800535a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800535c:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800535e:	2200      	movs	r2, #0
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 8005364:	2200      	movs	r2, #0
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005368:	4811      	ldr	r0, [pc, #68]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800536a:	f009 fa5b 	bl	800e824 <HAL_UART_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005374:	f7ff f896 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005378:	2100      	movs	r1, #0
 800537a:	480d      	ldr	r0, [pc, #52]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800537c:	f00b fc1f 	bl	8010bbe <HAL_UARTEx_SetTxFifoThreshold>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005386:	f7ff f88d 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800538a:	2100      	movs	r1, #0
 800538c:	4808      	ldr	r0, [pc, #32]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800538e:	f00b fc54 	bl	8010c3a <HAL_UARTEx_SetRxFifoThreshold>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005398:	f7ff f884 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800539c:	4804      	ldr	r0, [pc, #16]	@ (80053b0 <MX_USART3_UART_Init+0x90>)
 800539e:	f00b fbd5 	bl	8010b4c <HAL_UARTEx_DisableFifoMode>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80053a8:	f7ff f87c 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80053ac:	bf00      	nop
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	24004dd8 	.word	0x24004dd8
 80053b4:	40004800 	.word	0x40004800

080053b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80053bc:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053be:	4a23      	ldr	r2, [pc, #140]	@ (800544c <MX_USART6_UART_Init+0x94>)
 80053c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80053c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80053ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80053d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80053d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80053dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053de:	220c      	movs	r2, #12
 80053e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053e2:	4b19      	ldr	r3, [pc, #100]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e8:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053f4:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053fa:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005400:	4811      	ldr	r0, [pc, #68]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 8005402:	f009 fa0f 	bl	800e824 <HAL_UART_Init>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800540c:	f7ff f84a 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005410:	2100      	movs	r1, #0
 8005412:	480d      	ldr	r0, [pc, #52]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 8005414:	f00b fbd3 	bl	8010bbe <HAL_UARTEx_SetTxFifoThreshold>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800541e:	f7ff f841 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005422:	2100      	movs	r1, #0
 8005424:	4808      	ldr	r0, [pc, #32]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 8005426:	f00b fc08 	bl	8010c3a <HAL_UARTEx_SetRxFifoThreshold>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8005430:	f7ff f838 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8005434:	4804      	ldr	r0, [pc, #16]	@ (8005448 <MX_USART6_UART_Init+0x90>)
 8005436:	f00b fb89 	bl	8010b4c <HAL_UARTEx_DisableFifoMode>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8005440:	f7ff f830 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	24004e6c 	.word	0x24004e6c
 800544c:	40011400 	.word	0x40011400

08005450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b0c0      	sub	sp, #256	@ 0x100
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005458:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800546c:	22c0      	movs	r2, #192	@ 0xc0
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f011 fb84 	bl	8016b7e <memset>
  if(uartHandle->Instance==UART4)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a83      	ldr	r2, [pc, #524]	@ (8005688 <HAL_UART_MspInit+0x238>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d17c      	bne.n	800557a <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005480:	f04f 0202 	mov.w	r2, #2
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005496:	4618      	mov	r0, r3
 8005498:	f005 f976 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80054a2:	f7fe ffff 	bl	80044a4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80054a6:	4b79      	ldr	r3, [pc, #484]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80054ac:	4a77      	ldr	r2, [pc, #476]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054b2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80054b6:	4b75      	ldr	r3, [pc, #468]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80054bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c4:	4b71      	ldr	r3, [pc, #452]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054ca:	4a70      	ldr	r2, [pc, #448]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80054d4:	4b6d      	ldr	r3, [pc, #436]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80054d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054e2:	2303      	movs	r3, #3
 80054e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e8:	2302      	movs	r3, #2
 80054ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054fa:	2308      	movs	r3, #8
 80054fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005500:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005504:	4619      	mov	r1, r3
 8005506:	4862      	ldr	r0, [pc, #392]	@ (8005690 <HAL_UART_MspInit+0x240>)
 8005508:	f003 fe48 	bl	800919c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800550c:	4b61      	ldr	r3, [pc, #388]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800550e:	4a62      	ldr	r2, [pc, #392]	@ (8005698 <HAL_UART_MspInit+0x248>)
 8005510:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005512:	4b60      	ldr	r3, [pc, #384]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005514:	223f      	movs	r2, #63	@ 0x3f
 8005516:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005518:	4b5e      	ldr	r3, [pc, #376]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800551e:	4b5d      	ldr	r3, [pc, #372]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005520:	2200      	movs	r2, #0
 8005522:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005524:	4b5b      	ldr	r3, [pc, #364]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800552a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800552c:	4b59      	ldr	r3, [pc, #356]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005532:	4b58      	ldr	r3, [pc, #352]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005538:	4b56      	ldr	r3, [pc, #344]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800553e:	4b55      	ldr	r3, [pc, #340]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005540:	2200      	movs	r2, #0
 8005542:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005544:	4b53      	ldr	r3, [pc, #332]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005546:	2200      	movs	r2, #0
 8005548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800554a:	4852      	ldr	r0, [pc, #328]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800554c:	f000 fbe4 	bl	8005d18 <HAL_DMA_Init>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005556:	f7fe ffa5 	bl	80044a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_UART_MspInit+0x244>)
 800555e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005562:	4a4c      	ldr	r2, [pc, #304]	@ (8005694 <HAL_UART_MspInit+0x244>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005568:	2200      	movs	r2, #0
 800556a:	2100      	movs	r1, #0
 800556c:	2034      	movs	r0, #52	@ 0x34
 800556e:	f000 fb26 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005572:	2034      	movs	r0, #52	@ 0x34
 8005574:	f000 fb3d 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005578:	e164      	b.n	8005844 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a47      	ldr	r2, [pc, #284]	@ (800569c <HAL_UART_MspInit+0x24c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	f040 8091 	bne.w	80056a8 <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005586:	f04f 0201 	mov.w	r2, #1
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800559c:	4618      	mov	r0, r3
 800559e:	f005 f8f3 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80055a8:	f7fe ff7c 	bl	80044a4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80055ac:	4b37      	ldr	r3, [pc, #220]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80055b2:	4a36      	ldr	r2, [pc, #216]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055b4:	f043 0310 	orr.w	r3, r3, #16
 80055b8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80055bc:	4b33      	ldr	r3, [pc, #204]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055be:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ca:	4b30      	ldr	r3, [pc, #192]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055d0:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80055da:	4b2c      	ldr	r3, [pc, #176]	@ (800568c <HAL_UART_MspInit+0x23c>)
 80055dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80055e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80055ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	2302      	movs	r3, #2
 80055f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005602:	2307      	movs	r3, #7
 8005604:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005608:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800560c:	4619      	mov	r1, r3
 800560e:	4820      	ldr	r0, [pc, #128]	@ (8005690 <HAL_UART_MspInit+0x240>)
 8005610:	f003 fdc4 	bl	800919c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005614:	4b22      	ldr	r3, [pc, #136]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005616:	4a23      	ldr	r2, [pc, #140]	@ (80056a4 <HAL_UART_MspInit+0x254>)
 8005618:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800561a:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 800561c:	2229      	movs	r2, #41	@ 0x29
 800561e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005620:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005626:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005628:	2200      	movs	r2, #0
 800562a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800562c:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 800562e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005632:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005634:	4b1a      	ldr	r3, [pc, #104]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005636:	2200      	movs	r2, #0
 8005638:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800563a:	4b19      	ldr	r3, [pc, #100]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 800563c:	2200      	movs	r2, #0
 800563e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005640:	4b17      	ldr	r3, [pc, #92]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005646:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 800564a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800564e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005650:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005652:	2200      	movs	r2, #0
 8005654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005656:	4812      	ldr	r0, [pc, #72]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005658:	f000 fb5e 	bl	8005d18 <HAL_DMA_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8005662:	f7fe ff1f 	bl	80044a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a0d      	ldr	r2, [pc, #52]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 800566a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800566e:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <HAL_UART_MspInit+0x250>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005674:	2200      	movs	r2, #0
 8005676:	2100      	movs	r1, #0
 8005678:	2025      	movs	r0, #37	@ 0x25
 800567a:	f000 faa0 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800567e:	2025      	movs	r0, #37	@ 0x25
 8005680:	f000 fab7 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8005684:	e0de      	b.n	8005844 <HAL_UART_MspInit+0x3f4>
 8005686:	bf00      	nop
 8005688:	40004c00 	.word	0x40004c00
 800568c:	58024400 	.word	0x58024400
 8005690:	58020000 	.word	0x58020000
 8005694:	24004f00 	.word	0x24004f00
 8005698:	40020040 	.word	0x40020040
 800569c:	40011000 	.word	0x40011000
 80056a0:	24004f78 	.word	0x24004f78
 80056a4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a68      	ldr	r2, [pc, #416]	@ (8005850 <HAL_UART_MspInit+0x400>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d17d      	bne.n	80057ae <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80056b2:	f04f 0202 	mov.w	r2, #2
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80056c8:	4618      	mov	r0, r3
 80056ca:	f005 f85d 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_UART_MspInit+0x288>
      Error_Handler();
 80056d4:	f7fe fee6 	bl	80044a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80056da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80056de:	4a5d      	ldr	r2, [pc, #372]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80056e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056e4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80056e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80056ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80056ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056f6:	4b57      	ldr	r3, [pc, #348]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80056f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80056fc:	4a55      	ldr	r2, [pc, #340]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005706:	4b53      	ldr	r3, [pc, #332]	@ (8005854 <HAL_UART_MspInit+0x404>)
 8005708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005714:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005718:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800572e:	2307      	movs	r3, #7
 8005730:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005734:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005738:	4619      	mov	r1, r3
 800573a:	4847      	ldr	r0, [pc, #284]	@ (8005858 <HAL_UART_MspInit+0x408>)
 800573c:	f003 fd2e 	bl	800919c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005740:	4b46      	ldr	r3, [pc, #280]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005742:	4a47      	ldr	r2, [pc, #284]	@ (8005860 <HAL_UART_MspInit+0x410>)
 8005744:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005746:	4b45      	ldr	r3, [pc, #276]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005748:	222d      	movs	r2, #45	@ 0x2d
 800574a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800574c:	4b43      	ldr	r3, [pc, #268]	@ (800585c <HAL_UART_MspInit+0x40c>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005752:	4b42      	ldr	r3, [pc, #264]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005754:	2200      	movs	r2, #0
 8005756:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005758:	4b40      	ldr	r3, [pc, #256]	@ (800585c <HAL_UART_MspInit+0x40c>)
 800575a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800575e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005760:	4b3e      	ldr	r3, [pc, #248]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005766:	4b3d      	ldr	r3, [pc, #244]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800576c:	4b3b      	ldr	r3, [pc, #236]	@ (800585c <HAL_UART_MspInit+0x40c>)
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005772:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005774:	2200      	movs	r2, #0
 8005776:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005778:	4b38      	ldr	r3, [pc, #224]	@ (800585c <HAL_UART_MspInit+0x40c>)
 800577a:	2200      	movs	r2, #0
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800577e:	4837      	ldr	r0, [pc, #220]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005780:	f000 faca 	bl	8005d18 <HAL_DMA_Init>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800578a:	f7fe fe8b 	bl	80044a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a32      	ldr	r2, [pc, #200]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005796:	4a31      	ldr	r2, [pc, #196]	@ (800585c <HAL_UART_MspInit+0x40c>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800579c:	2200      	movs	r2, #0
 800579e:	2100      	movs	r1, #0
 80057a0:	2027      	movs	r0, #39	@ 0x27
 80057a2:	f000 fa0c 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057a6:	2027      	movs	r0, #39	@ 0x27
 80057a8:	f000 fa23 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 80057ac:	e04a      	b.n	8005844 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART6)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005864 <HAL_UART_MspInit+0x414>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d145      	bne.n	8005844 <HAL_UART_MspInit+0x3f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80057b8:	f04f 0201 	mov.w	r2, #1
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057ce:	4618      	mov	r0, r3
 80057d0:	f004 ffda 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_UART_MspInit+0x38e>
      Error_Handler();
 80057da:	f7fe fe63 	bl	80044a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80057de:	4b1d      	ldr	r3, [pc, #116]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80057e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80057e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80057e6:	f043 0320 	orr.w	r3, r3, #32
 80057ea:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80057ee:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80057f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <HAL_UART_MspInit+0x404>)
 80057fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005802:	4a14      	ldr	r2, [pc, #80]	@ (8005854 <HAL_UART_MspInit+0x404>)
 8005804:	f043 0304 	orr.w	r3, r3, #4
 8005808:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_UART_MspInit+0x404>)
 800580e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	60bb      	str	r3, [r7, #8]
 8005818:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800581a:	23c0      	movs	r3, #192	@ 0xc0
 800581c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005820:	2302      	movs	r3, #2
 8005822:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8005832:	2307      	movs	r3, #7
 8005834:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005838:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800583c:	4619      	mov	r1, r3
 800583e:	4806      	ldr	r0, [pc, #24]	@ (8005858 <HAL_UART_MspInit+0x408>)
 8005840:	f003 fcac 	bl	800919c <HAL_GPIO_Init>
}
 8005844:	bf00      	nop
 8005846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40004800 	.word	0x40004800
 8005854:	58024400 	.word	0x58024400
 8005858:	58020800 	.word	0x58020800
 800585c:	24004ff0 	.word	0x24004ff0
 8005860:	40020028 	.word	0x40020028
 8005864:	40011400 	.word	0x40011400

08005868 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	220f      	movs	r2, #15
 8005876:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f009 f8fd 	bl	800ea78 <HAL_UART_Abort_IT>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8005884:	f7fe fe0e 	bl	80044a4 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005894:	f7ff f8e8 	bl	8004a68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005898:	480c      	ldr	r0, [pc, #48]	@ (80058cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800589a:	490d      	ldr	r1, [pc, #52]	@ (80058d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800589c:	4a0d      	ldr	r2, [pc, #52]	@ (80058d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800589e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a0:	e002      	b.n	80058a8 <LoopCopyDataInit>

080058a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a6:	3304      	adds	r3, #4

080058a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80058a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058ac:	d3f9      	bcc.n	80058a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ae:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058b0:	4c0a      	ldr	r4, [pc, #40]	@ (80058dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80058b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b4:	e001      	b.n	80058ba <LoopFillZerobss>

080058b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b8:	3204      	adds	r2, #4

080058ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058bc:	d3fb      	bcc.n	80058b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80058be:	f011 fa47 	bl	8016d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058c2:	f7fe fc19 	bl	80040f8 <main>
  bx  lr
 80058c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058c8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80058cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058d0:	240002b0 	.word	0x240002b0
  ldr r2, =_sidata
 80058d4:	08019d58 	.word	0x08019d58
  ldr r2, =_sbss
 80058d8:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 80058dc:	240053fc 	.word	0x240053fc

080058e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058e0:	e7fe      	b.n	80058e0 <ADC_IRQHandler>
	...

080058e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058ea:	2003      	movs	r0, #3
 80058ec:	f000 f95c 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80058f0:	f004 fd74 	bl	800a3dc <HAL_RCC_GetSysClockFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b15      	ldr	r3, [pc, #84]	@ (800594c <HAL_Init+0x68>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	4913      	ldr	r1, [pc, #76]	@ (8005950 <HAL_Init+0x6c>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800590e:	4b0f      	ldr	r3, [pc, #60]	@ (800594c <HAL_Init+0x68>)
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	4a0e      	ldr	r2, [pc, #56]	@ (8005950 <HAL_Init+0x6c>)
 8005918:	5cd3      	ldrb	r3, [r2, r3]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	4a0b      	ldr	r2, [pc, #44]	@ (8005954 <HAL_Init+0x70>)
 8005926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005928:	4a0b      	ldr	r2, [pc, #44]	@ (8005958 <HAL_Init+0x74>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800592e:	200f      	movs	r0, #15
 8005930:	f000 f814 	bl	800595c <HAL_InitTick>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e002      	b.n	8005944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800593e:	f7fe ff1b 	bl	8004778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	08018c20 	.word	0x08018c20
 8005954:	240000c4 	.word	0x240000c4
 8005958:	240000c0 	.word	0x240000c0

0800595c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005964:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <HAL_InitTick+0x60>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e021      	b.n	80059b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005970:	4b13      	ldr	r3, [pc, #76]	@ (80059c0 <HAL_InitTick+0x64>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <HAL_InitTick+0x60>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800597e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f941 	bl	8005c0e <HAL_SYSTICK_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e00e      	b.n	80059b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b0f      	cmp	r3, #15
 800599a:	d80a      	bhi.n	80059b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800599c:	2200      	movs	r2, #0
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	f000 f90b 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059a8:	4a06      	ldr	r2, [pc, #24]	@ (80059c4 <HAL_InitTick+0x68>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e000      	b.n	80059b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	240000cc 	.word	0x240000cc
 80059c0:	240000c0 	.word	0x240000c0
 80059c4:	240000c8 	.word	0x240000c8

080059c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059cc:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <HAL_IncTick+0x20>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_IncTick+0x24>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4413      	add	r3, r2
 80059d8:	4a04      	ldr	r2, [pc, #16]	@ (80059ec <HAL_IncTick+0x24>)
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	240000cc 	.word	0x240000cc
 80059ec:	24005068 	.word	0x24005068

080059f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return uwTick;
 80059f4:	4b03      	ldr	r3, [pc, #12]	@ (8005a04 <HAL_GetTick+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	24005068 	.word	0x24005068

08005a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a30:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	@ (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00
 8005a4c:	05fa0000 	.word	0x05fa0000

08005a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a54:	4b04      	ldr	r3, [pc, #16]	@ (8005a68 <__NVIC_GetPriorityGrouping+0x18>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0307 	and.w	r3, r3, #7
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db0b      	blt.n	8005a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4907      	ldr	r1, [pc, #28]	@ (8005aa4 <__NVIC_EnableIRQ+0x38>)
 8005a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	@ (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	@ (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	@ 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	@ 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff29 	bl	8005a08 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bcc:	f7ff ff40 	bl	8005a50 <__NVIC_GetPriorityGrouping>
 8005bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff ff90 	bl	8005afc <NVIC_EncodePriority>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff5f 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff33 	bl	8005a6c <__NVIC_EnableIRQ>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ffa4 	bl	8005b64 <SysTick_Config>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005c2c:	f3bf 8f5f 	dmb	sy
}
 8005c30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005c32:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <HAL_MPU_Disable+0x28>)
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	4a06      	ldr	r2, [pc, #24]	@ (8005c50 <HAL_MPU_Disable+0x28>)
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005c3e:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <HAL_MPU_Disable+0x2c>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	e000ed00 	.word	0xe000ed00
 8005c54:	e000ed90 	.word	0xe000ed90

08005c58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005c60:	4a0b      	ldr	r2, [pc, #44]	@ (8005c90 <HAL_MPU_Enable+0x38>)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <HAL_MPU_Enable+0x3c>)
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	4a09      	ldr	r2, [pc, #36]	@ (8005c94 <HAL_MPU_Enable+0x3c>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005c76:	f3bf 8f4f 	dsb	sy
}
 8005c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c7c:	f3bf 8f6f 	isb	sy
}
 8005c80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000ed90 	.word	0xe000ed90
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	785a      	ldrb	r2, [r3, #1]
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <HAL_MPU_ConfigRegion+0x7c>)
 8005ca6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d14 <HAL_MPU_ConfigRegion+0x7c>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	4a19      	ldr	r2, [pc, #100]	@ (8005d14 <HAL_MPU_ConfigRegion+0x7c>)
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005cb4:	4a17      	ldr	r2, [pc, #92]	@ (8005d14 <HAL_MPU_ConfigRegion+0x7c>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7b1b      	ldrb	r3, [r3, #12]
 8005cc0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	7adb      	ldrb	r3, [r3, #11]
 8005cc6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7a9b      	ldrb	r3, [r3, #10]
 8005cce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	7b5b      	ldrb	r3, [r3, #13]
 8005cd6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7b9b      	ldrb	r3, [r3, #14]
 8005cde:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7bdb      	ldrb	r3, [r3, #15]
 8005ce6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7a5b      	ldrb	r3, [r3, #9]
 8005cee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7a1b      	ldrb	r3, [r3, #8]
 8005cf6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005cf8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d04:	6113      	str	r3, [r2, #16]
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	e000ed90 	.word	0xe000ed90

08005d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7ff fe66 	bl	80059f0 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e37d      	b.n	800642c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a66      	ldr	r2, [pc, #408]	@ (8005ed0 <HAL_DMA_Init+0x1b8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04a      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a65      	ldr	r2, [pc, #404]	@ (8005ed4 <HAL_DMA_Init+0x1bc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d045      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a63      	ldr	r2, [pc, #396]	@ (8005ed8 <HAL_DMA_Init+0x1c0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d040      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a62      	ldr	r2, [pc, #392]	@ (8005edc <HAL_DMA_Init+0x1c4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d03b      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a60      	ldr	r2, [pc, #384]	@ (8005ee0 <HAL_DMA_Init+0x1c8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d036      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee4 <HAL_DMA_Init+0x1cc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d031      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5d      	ldr	r2, [pc, #372]	@ (8005ee8 <HAL_DMA_Init+0x1d0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d02c      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005eec <HAL_DMA_Init+0x1d4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d027      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5a      	ldr	r2, [pc, #360]	@ (8005ef0 <HAL_DMA_Init+0x1d8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a59      	ldr	r2, [pc, #356]	@ (8005ef4 <HAL_DMA_Init+0x1dc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d01d      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a57      	ldr	r2, [pc, #348]	@ (8005ef8 <HAL_DMA_Init+0x1e0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a56      	ldr	r2, [pc, #344]	@ (8005efc <HAL_DMA_Init+0x1e4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a54      	ldr	r2, [pc, #336]	@ (8005f00 <HAL_DMA_Init+0x1e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a53      	ldr	r2, [pc, #332]	@ (8005f04 <HAL_DMA_Init+0x1ec>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a51      	ldr	r2, [pc, #324]	@ (8005f08 <HAL_DMA_Init+0x1f0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a50      	ldr	r2, [pc, #320]	@ (8005f0c <HAL_DMA_Init+0x1f4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_DMA_Init+0xbc>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_DMA_Init+0xbe>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 813c 	beq.w	8006054 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a37      	ldr	r2, [pc, #220]	@ (8005ed0 <HAL_DMA_Init+0x1b8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04a      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a36      	ldr	r2, [pc, #216]	@ (8005ed4 <HAL_DMA_Init+0x1bc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d045      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a34      	ldr	r2, [pc, #208]	@ (8005ed8 <HAL_DMA_Init+0x1c0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d040      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a33      	ldr	r2, [pc, #204]	@ (8005edc <HAL_DMA_Init+0x1c4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d03b      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a31      	ldr	r2, [pc, #196]	@ (8005ee0 <HAL_DMA_Init+0x1c8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d036      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a30      	ldr	r2, [pc, #192]	@ (8005ee4 <HAL_DMA_Init+0x1cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d031      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee8 <HAL_DMA_Init+0x1d0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02c      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	@ (8005eec <HAL_DMA_Init+0x1d4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d027      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef0 <HAL_DMA_Init+0x1d8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef4 <HAL_DMA_Init+0x1dc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a28      	ldr	r2, [pc, #160]	@ (8005ef8 <HAL_DMA_Init+0x1e0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a27      	ldr	r2, [pc, #156]	@ (8005efc <HAL_DMA_Init+0x1e4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a25      	ldr	r2, [pc, #148]	@ (8005f00 <HAL_DMA_Init+0x1e8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <HAL_DMA_Init+0x1ec>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	@ (8005f08 <HAL_DMA_Init+0x1f0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <HAL_DMA_Init+0x1f4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <HAL_DMA_Init+0x186>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e007      	b.n	8005eae <HAL_DMA_Init+0x196>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eae:	e02f      	b.n	8005f10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb0:	f7ff fd9e 	bl	80059f0 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d928      	bls.n	8005f10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e2ad      	b.n	800642c <HAL_DMA_Init+0x714>
 8005ed0:	40020010 	.word	0x40020010
 8005ed4:	40020028 	.word	0x40020028
 8005ed8:	40020040 	.word	0x40020040
 8005edc:	40020058 	.word	0x40020058
 8005ee0:	40020070 	.word	0x40020070
 8005ee4:	40020088 	.word	0x40020088
 8005ee8:	400200a0 	.word	0x400200a0
 8005eec:	400200b8 	.word	0x400200b8
 8005ef0:	40020410 	.word	0x40020410
 8005ef4:	40020428 	.word	0x40020428
 8005ef8:	40020440 	.word	0x40020440
 8005efc:	40020458 	.word	0x40020458
 8005f00:	40020470 	.word	0x40020470
 8005f04:	40020488 	.word	0x40020488
 8005f08:	400204a0 	.word	0x400204a0
 8005f0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1c8      	bne.n	8005eb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4b73      	ldr	r3, [pc, #460]	@ (80060f8 <HAL_DMA_Init+0x3e0>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d107      	bne.n	8005f74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b28      	cmp	r3, #40	@ 0x28
 8005f7a:	d903      	bls.n	8005f84 <HAL_DMA_Init+0x26c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f82:	d91f      	bls.n	8005fc4 <HAL_DMA_Init+0x2ac>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f8a:	d903      	bls.n	8005f94 <HAL_DMA_Init+0x27c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b42      	cmp	r3, #66	@ 0x42
 8005f92:	d917      	bls.n	8005fc4 <HAL_DMA_Init+0x2ac>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b46      	cmp	r3, #70	@ 0x46
 8005f9a:	d903      	bls.n	8005fa4 <HAL_DMA_Init+0x28c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b48      	cmp	r3, #72	@ 0x48
 8005fa2:	d90f      	bls.n	8005fc4 <HAL_DMA_Init+0x2ac>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b4e      	cmp	r3, #78	@ 0x4e
 8005faa:	d903      	bls.n	8005fb4 <HAL_DMA_Init+0x29c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b52      	cmp	r3, #82	@ 0x52
 8005fb2:	d907      	bls.n	8005fc4 <HAL_DMA_Init+0x2ac>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b73      	cmp	r3, #115	@ 0x73
 8005fba:	d905      	bls.n	8005fc8 <HAL_DMA_Init+0x2b0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b77      	cmp	r3, #119	@ 0x77
 8005fc2:	d801      	bhi.n	8005fc8 <HAL_DMA_Init+0x2b0>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_DMA_Init+0x2b2>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d117      	bne.n	8006030 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f002 fbd4 	bl	80087c0 <DMA_CheckFifoParam>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2240      	movs	r2, #64	@ 0x40
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e1fd      	b.n	800642c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fb0f 	bl	800865c <DMA_CalcBaseAndBitshift>
 800603e:	4603      	mov	r3, r0
 8006040:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	223f      	movs	r2, #63	@ 0x3f
 800604c:	409a      	lsls	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	e0fd      	b.n	8006250 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a28      	ldr	r2, [pc, #160]	@ (80060fc <HAL_DMA_Init+0x3e4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a27      	ldr	r2, [pc, #156]	@ (8006100 <HAL_DMA_Init+0x3e8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a25      	ldr	r2, [pc, #148]	@ (8006104 <HAL_DMA_Init+0x3ec>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <HAL_DMA_Init+0x3f0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <HAL_DMA_Init+0x3f4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <HAL_DMA_Init+0x3f8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	@ (8006114 <HAL_DMA_Init+0x3fc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	@ (8006118 <HAL_DMA_Init+0x400>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <HAL_DMA_Init+0x404>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006120 <HAL_DMA_Init+0x408>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <HAL_DMA_Init+0x40c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_DMA_Init+0x410>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a16      	ldr	r2, [pc, #88]	@ (800612c <HAL_DMA_Init+0x414>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a15      	ldr	r2, [pc, #84]	@ (8006130 <HAL_DMA_Init+0x418>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <HAL_DMA_Init+0x41c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_Init+0x3dc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a12      	ldr	r2, [pc, #72]	@ (8006138 <HAL_DMA_Init+0x420>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d123      	bne.n	800613c <HAL_DMA_Init+0x424>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e022      	b.n	800613e <HAL_DMA_Init+0x426>
 80060f8:	fe10803f 	.word	0xfe10803f
 80060fc:	48022c08 	.word	0x48022c08
 8006100:	48022c1c 	.word	0x48022c1c
 8006104:	48022c30 	.word	0x48022c30
 8006108:	48022c44 	.word	0x48022c44
 800610c:	48022c58 	.word	0x48022c58
 8006110:	48022c6c 	.word	0x48022c6c
 8006114:	48022c80 	.word	0x48022c80
 8006118:	48022c94 	.word	0x48022c94
 800611c:	58025408 	.word	0x58025408
 8006120:	5802541c 	.word	0x5802541c
 8006124:	58025430 	.word	0x58025430
 8006128:	58025444 	.word	0x58025444
 800612c:	58025458 	.word	0x58025458
 8006130:	5802546c 	.word	0x5802546c
 8006134:	58025480 	.word	0x58025480
 8006138:	58025494 	.word	0x58025494
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d07d      	beq.n	800623e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a7f      	ldr	r2, [pc, #508]	@ (8006344 <HAL_DMA_Init+0x62c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d021      	beq.n	8006190 <HAL_DMA_Init+0x478>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a7d      	ldr	r2, [pc, #500]	@ (8006348 <HAL_DMA_Init+0x630>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01c      	beq.n	8006190 <HAL_DMA_Init+0x478>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7c      	ldr	r2, [pc, #496]	@ (800634c <HAL_DMA_Init+0x634>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d017      	beq.n	8006190 <HAL_DMA_Init+0x478>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a7a      	ldr	r2, [pc, #488]	@ (8006350 <HAL_DMA_Init+0x638>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d012      	beq.n	8006190 <HAL_DMA_Init+0x478>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a79      	ldr	r2, [pc, #484]	@ (8006354 <HAL_DMA_Init+0x63c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00d      	beq.n	8006190 <HAL_DMA_Init+0x478>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a77      	ldr	r2, [pc, #476]	@ (8006358 <HAL_DMA_Init+0x640>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d008      	beq.n	8006190 <HAL_DMA_Init+0x478>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a76      	ldr	r2, [pc, #472]	@ (800635c <HAL_DMA_Init+0x644>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <HAL_DMA_Init+0x478>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a74      	ldr	r2, [pc, #464]	@ (8006360 <HAL_DMA_Init+0x648>)
 800618e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006364 <HAL_DMA_Init+0x64c>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b40      	cmp	r3, #64	@ 0x40
 80061b6:	d008      	beq.n	80061ca <HAL_DMA_Init+0x4b2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b80      	cmp	r3, #128	@ 0x80
 80061be:	d102      	bne.n	80061c6 <HAL_DMA_Init+0x4ae>
 80061c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061c4:	e002      	b.n	80061cc <HAL_DMA_Init+0x4b4>
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_DMA_Init+0x4b4>
 80061ca:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	68d2      	ldr	r2, [r2, #12]
 80061d0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061d2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061ea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061fa:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	4b55      	ldr	r3, [pc, #340]	@ (8006368 <HAL_DMA_Init+0x650>)
 8006212:	4413      	add	r3, r2
 8006214:	4a55      	ldr	r2, [pc, #340]	@ (800636c <HAL_DMA_Init+0x654>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	009a      	lsls	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f002 fa1a 	bl	800865c <DMA_CalcBaseAndBitshift>
 8006228:	4603      	mov	r3, r0
 800622a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	e008      	b.n	8006250 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2240      	movs	r2, #64	@ 0x40
 8006242:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2203      	movs	r2, #3
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0ed      	b.n	800642c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a46      	ldr	r2, [pc, #280]	@ (8006370 <HAL_DMA_Init+0x658>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d072      	beq.n	8006340 <HAL_DMA_Init+0x628>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a45      	ldr	r2, [pc, #276]	@ (8006374 <HAL_DMA_Init+0x65c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d06d      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a43      	ldr	r2, [pc, #268]	@ (8006378 <HAL_DMA_Init+0x660>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d068      	beq.n	8006340 <HAL_DMA_Init+0x628>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a42      	ldr	r2, [pc, #264]	@ (800637c <HAL_DMA_Init+0x664>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d063      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a40      	ldr	r2, [pc, #256]	@ (8006380 <HAL_DMA_Init+0x668>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d05e      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3f      	ldr	r2, [pc, #252]	@ (8006384 <HAL_DMA_Init+0x66c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d059      	beq.n	8006340 <HAL_DMA_Init+0x628>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a3d      	ldr	r2, [pc, #244]	@ (8006388 <HAL_DMA_Init+0x670>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d054      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3c      	ldr	r2, [pc, #240]	@ (800638c <HAL_DMA_Init+0x674>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04f      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006390 <HAL_DMA_Init+0x678>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d04a      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a39      	ldr	r2, [pc, #228]	@ (8006394 <HAL_DMA_Init+0x67c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d045      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a37      	ldr	r2, [pc, #220]	@ (8006398 <HAL_DMA_Init+0x680>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d040      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a36      	ldr	r2, [pc, #216]	@ (800639c <HAL_DMA_Init+0x684>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d03b      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a34      	ldr	r2, [pc, #208]	@ (80063a0 <HAL_DMA_Init+0x688>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d036      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a33      	ldr	r2, [pc, #204]	@ (80063a4 <HAL_DMA_Init+0x68c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d031      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a31      	ldr	r2, [pc, #196]	@ (80063a8 <HAL_DMA_Init+0x690>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d02c      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a30      	ldr	r2, [pc, #192]	@ (80063ac <HAL_DMA_Init+0x694>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d027      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a13      	ldr	r2, [pc, #76]	@ (8006344 <HAL_DMA_Init+0x62c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d022      	beq.n	8006340 <HAL_DMA_Init+0x628>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a12      	ldr	r2, [pc, #72]	@ (8006348 <HAL_DMA_Init+0x630>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d01d      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a10      	ldr	r2, [pc, #64]	@ (800634c <HAL_DMA_Init+0x634>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d018      	beq.n	8006340 <HAL_DMA_Init+0x628>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a0f      	ldr	r2, [pc, #60]	@ (8006350 <HAL_DMA_Init+0x638>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0d      	ldr	r2, [pc, #52]	@ (8006354 <HAL_DMA_Init+0x63c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00e      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <HAL_DMA_Init+0x640>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d009      	beq.n	8006340 <HAL_DMA_Init+0x628>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0a      	ldr	r2, [pc, #40]	@ (800635c <HAL_DMA_Init+0x644>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_DMA_Init+0x628>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a09      	ldr	r2, [pc, #36]	@ (8006360 <HAL_DMA_Init+0x648>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d137      	bne.n	80063b0 <HAL_DMA_Init+0x698>
 8006340:	2301      	movs	r3, #1
 8006342:	e036      	b.n	80063b2 <HAL_DMA_Init+0x69a>
 8006344:	58025408 	.word	0x58025408
 8006348:	5802541c 	.word	0x5802541c
 800634c:	58025430 	.word	0x58025430
 8006350:	58025444 	.word	0x58025444
 8006354:	58025458 	.word	0x58025458
 8006358:	5802546c 	.word	0x5802546c
 800635c:	58025480 	.word	0x58025480
 8006360:	58025494 	.word	0x58025494
 8006364:	fffe000f 	.word	0xfffe000f
 8006368:	a7fdabf8 	.word	0xa7fdabf8
 800636c:	cccccccd 	.word	0xcccccccd
 8006370:	40020010 	.word	0x40020010
 8006374:	40020028 	.word	0x40020028
 8006378:	40020040 	.word	0x40020040
 800637c:	40020058 	.word	0x40020058
 8006380:	40020070 	.word	0x40020070
 8006384:	40020088 	.word	0x40020088
 8006388:	400200a0 	.word	0x400200a0
 800638c:	400200b8 	.word	0x400200b8
 8006390:	40020410 	.word	0x40020410
 8006394:	40020428 	.word	0x40020428
 8006398:	40020440 	.word	0x40020440
 800639c:	40020458 	.word	0x40020458
 80063a0:	40020470 	.word	0x40020470
 80063a4:	40020488 	.word	0x40020488
 80063a8:	400204a0 	.word	0x400204a0
 80063ac:	400204b8 	.word	0x400204b8
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d032      	beq.n	800641c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 fa7e 	bl	80088b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b80      	cmp	r3, #128	@ 0x80
 80063c2:	d102      	bne.n	80063ca <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063de:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d010      	beq.n	800640a <HAL_DMA_Init+0x6f2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d80c      	bhi.n	800640a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f002 fafb 	bl	80089ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	e008      	b.n	800641c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e226      	b.n	800689e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_DMA_Start_IT+0x2a>
 800645a:	2302      	movs	r3, #2
 800645c:	e21f      	b.n	800689e <HAL_DMA_Start_IT+0x46a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	f040 820a 	bne.w	8006888 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a68      	ldr	r2, [pc, #416]	@ (8006628 <HAL_DMA_Start_IT+0x1f4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d04a      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a66      	ldr	r2, [pc, #408]	@ (800662c <HAL_DMA_Start_IT+0x1f8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d045      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a65      	ldr	r2, [pc, #404]	@ (8006630 <HAL_DMA_Start_IT+0x1fc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d040      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a63      	ldr	r2, [pc, #396]	@ (8006634 <HAL_DMA_Start_IT+0x200>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d03b      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a62      	ldr	r2, [pc, #392]	@ (8006638 <HAL_DMA_Start_IT+0x204>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d036      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a60      	ldr	r2, [pc, #384]	@ (800663c <HAL_DMA_Start_IT+0x208>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d031      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006640 <HAL_DMA_Start_IT+0x20c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d02c      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006644 <HAL_DMA_Start_IT+0x210>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d027      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006648 <HAL_DMA_Start_IT+0x214>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d022      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5a      	ldr	r2, [pc, #360]	@ (800664c <HAL_DMA_Start_IT+0x218>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01d      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a59      	ldr	r2, [pc, #356]	@ (8006650 <HAL_DMA_Start_IT+0x21c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d018      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a57      	ldr	r2, [pc, #348]	@ (8006654 <HAL_DMA_Start_IT+0x220>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d013      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a56      	ldr	r2, [pc, #344]	@ (8006658 <HAL_DMA_Start_IT+0x224>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00e      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a54      	ldr	r2, [pc, #336]	@ (800665c <HAL_DMA_Start_IT+0x228>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a53      	ldr	r2, [pc, #332]	@ (8006660 <HAL_DMA_Start_IT+0x22c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_DMA_Start_IT+0xee>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a51      	ldr	r2, [pc, #324]	@ (8006664 <HAL_DMA_Start_IT+0x230>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d108      	bne.n	8006534 <HAL_DMA_Start_IT+0x100>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e007      	b.n	8006544 <HAL_DMA_Start_IT+0x110>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 fea2 	bl	8008294 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a34      	ldr	r2, [pc, #208]	@ (8006628 <HAL_DMA_Start_IT+0x1f4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a33      	ldr	r2, [pc, #204]	@ (800662c <HAL_DMA_Start_IT+0x1f8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a31      	ldr	r2, [pc, #196]	@ (8006630 <HAL_DMA_Start_IT+0x1fc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a30      	ldr	r2, [pc, #192]	@ (8006634 <HAL_DMA_Start_IT+0x200>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2e      	ldr	r2, [pc, #184]	@ (8006638 <HAL_DMA_Start_IT+0x204>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2d      	ldr	r2, [pc, #180]	@ (800663c <HAL_DMA_Start_IT+0x208>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2b      	ldr	r2, [pc, #172]	@ (8006640 <HAL_DMA_Start_IT+0x20c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <HAL_DMA_Start_IT+0x210>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a28      	ldr	r2, [pc, #160]	@ (8006648 <HAL_DMA_Start_IT+0x214>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a27      	ldr	r2, [pc, #156]	@ (800664c <HAL_DMA_Start_IT+0x218>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a25      	ldr	r2, [pc, #148]	@ (8006650 <HAL_DMA_Start_IT+0x21c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a24      	ldr	r2, [pc, #144]	@ (8006654 <HAL_DMA_Start_IT+0x220>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a22      	ldr	r2, [pc, #136]	@ (8006658 <HAL_DMA_Start_IT+0x224>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a21      	ldr	r2, [pc, #132]	@ (800665c <HAL_DMA_Start_IT+0x228>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006660 <HAL_DMA_Start_IT+0x22c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_Start_IT+0x1bc>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006664 <HAL_DMA_Start_IT+0x230>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_DMA_Start_IT+0x1c0>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_DMA_Start_IT+0x1c2>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d036      	beq.n	8006668 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 021e 	bic.w	r2, r3, #30
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0216 	orr.w	r2, r2, #22
 800660c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d03e      	beq.n	8006694 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0208 	orr.w	r2, r2, #8
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e035      	b.n	8006694 <HAL_DMA_Start_IT+0x260>
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 020e 	bic.w	r2, r3, #14
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 020a 	orr.w	r2, r2, #10
 800667a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0204 	orr.w	r2, r2, #4
 8006692:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a83      	ldr	r2, [pc, #524]	@ (80068a8 <HAL_DMA_Start_IT+0x474>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d072      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a82      	ldr	r2, [pc, #520]	@ (80068ac <HAL_DMA_Start_IT+0x478>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d06d      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a80      	ldr	r2, [pc, #512]	@ (80068b0 <HAL_DMA_Start_IT+0x47c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d068      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a7f      	ldr	r2, [pc, #508]	@ (80068b4 <HAL_DMA_Start_IT+0x480>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d063      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a7d      	ldr	r2, [pc, #500]	@ (80068b8 <HAL_DMA_Start_IT+0x484>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d05e      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7c      	ldr	r2, [pc, #496]	@ (80068bc <HAL_DMA_Start_IT+0x488>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d059      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a7a      	ldr	r2, [pc, #488]	@ (80068c0 <HAL_DMA_Start_IT+0x48c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d054      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a79      	ldr	r2, [pc, #484]	@ (80068c4 <HAL_DMA_Start_IT+0x490>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d04f      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a77      	ldr	r2, [pc, #476]	@ (80068c8 <HAL_DMA_Start_IT+0x494>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d04a      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a76      	ldr	r2, [pc, #472]	@ (80068cc <HAL_DMA_Start_IT+0x498>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d045      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a74      	ldr	r2, [pc, #464]	@ (80068d0 <HAL_DMA_Start_IT+0x49c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d040      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a73      	ldr	r2, [pc, #460]	@ (80068d4 <HAL_DMA_Start_IT+0x4a0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d03b      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a71      	ldr	r2, [pc, #452]	@ (80068d8 <HAL_DMA_Start_IT+0x4a4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d036      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a70      	ldr	r2, [pc, #448]	@ (80068dc <HAL_DMA_Start_IT+0x4a8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d031      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a6e      	ldr	r2, [pc, #440]	@ (80068e0 <HAL_DMA_Start_IT+0x4ac>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02c      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a6d      	ldr	r2, [pc, #436]	@ (80068e4 <HAL_DMA_Start_IT+0x4b0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d027      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6b      	ldr	r2, [pc, #428]	@ (80068e8 <HAL_DMA_Start_IT+0x4b4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6a      	ldr	r2, [pc, #424]	@ (80068ec <HAL_DMA_Start_IT+0x4b8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d01d      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a68      	ldr	r2, [pc, #416]	@ (80068f0 <HAL_DMA_Start_IT+0x4bc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a67      	ldr	r2, [pc, #412]	@ (80068f4 <HAL_DMA_Start_IT+0x4c0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a65      	ldr	r2, [pc, #404]	@ (80068f8 <HAL_DMA_Start_IT+0x4c4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a64      	ldr	r2, [pc, #400]	@ (80068fc <HAL_DMA_Start_IT+0x4c8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a62      	ldr	r2, [pc, #392]	@ (8006900 <HAL_DMA_Start_IT+0x4cc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_DMA_Start_IT+0x350>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a61      	ldr	r2, [pc, #388]	@ (8006904 <HAL_DMA_Start_IT+0x4d0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <HAL_DMA_Start_IT+0x354>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <HAL_DMA_Start_IT+0x356>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01a      	beq.n	80067c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a37      	ldr	r2, [pc, #220]	@ (80068a8 <HAL_DMA_Start_IT+0x474>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d04a      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a36      	ldr	r2, [pc, #216]	@ (80068ac <HAL_DMA_Start_IT+0x478>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d045      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a34      	ldr	r2, [pc, #208]	@ (80068b0 <HAL_DMA_Start_IT+0x47c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d040      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a33      	ldr	r2, [pc, #204]	@ (80068b4 <HAL_DMA_Start_IT+0x480>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d03b      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a31      	ldr	r2, [pc, #196]	@ (80068b8 <HAL_DMA_Start_IT+0x484>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d036      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a30      	ldr	r2, [pc, #192]	@ (80068bc <HAL_DMA_Start_IT+0x488>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d031      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2e      	ldr	r2, [pc, #184]	@ (80068c0 <HAL_DMA_Start_IT+0x48c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02c      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2d      	ldr	r2, [pc, #180]	@ (80068c4 <HAL_DMA_Start_IT+0x490>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d027      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2b      	ldr	r2, [pc, #172]	@ (80068c8 <HAL_DMA_Start_IT+0x494>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d022      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2a      	ldr	r2, [pc, #168]	@ (80068cc <HAL_DMA_Start_IT+0x498>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01d      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a28      	ldr	r2, [pc, #160]	@ (80068d0 <HAL_DMA_Start_IT+0x49c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a27      	ldr	r2, [pc, #156]	@ (80068d4 <HAL_DMA_Start_IT+0x4a0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a25      	ldr	r2, [pc, #148]	@ (80068d8 <HAL_DMA_Start_IT+0x4a4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a24      	ldr	r2, [pc, #144]	@ (80068dc <HAL_DMA_Start_IT+0x4a8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a22      	ldr	r2, [pc, #136]	@ (80068e0 <HAL_DMA_Start_IT+0x4ac>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_DMA_Start_IT+0x430>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a21      	ldr	r2, [pc, #132]	@ (80068e4 <HAL_DMA_Start_IT+0x4b0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <HAL_DMA_Start_IT+0x442>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e012      	b.n	800689c <HAL_DMA_Start_IT+0x468>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0201 	orr.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e009      	b.n	800689c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800688e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	40020040 	.word	0x40020040
 80068b4:	40020058 	.word	0x40020058
 80068b8:	40020070 	.word	0x40020070
 80068bc:	40020088 	.word	0x40020088
 80068c0:	400200a0 	.word	0x400200a0
 80068c4:	400200b8 	.word	0x400200b8
 80068c8:	40020410 	.word	0x40020410
 80068cc:	40020428 	.word	0x40020428
 80068d0:	40020440 	.word	0x40020440
 80068d4:	40020458 	.word	0x40020458
 80068d8:	40020470 	.word	0x40020470
 80068dc:	40020488 	.word	0x40020488
 80068e0:	400204a0 	.word	0x400204a0
 80068e4:	400204b8 	.word	0x400204b8
 80068e8:	58025408 	.word	0x58025408
 80068ec:	5802541c 	.word	0x5802541c
 80068f0:	58025430 	.word	0x58025430
 80068f4:	58025444 	.word	0x58025444
 80068f8:	58025458 	.word	0x58025458
 80068fc:	5802546c 	.word	0x5802546c
 8006900:	58025480 	.word	0x58025480
 8006904:	58025494 	.word	0x58025494

08006908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006910:	f7ff f86e 	bl	80059f0 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e2dc      	b.n	8006eda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d008      	beq.n	800693e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e2cd      	b.n	8006eda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a76      	ldr	r2, [pc, #472]	@ (8006b1c <HAL_DMA_Abort+0x214>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a74      	ldr	r2, [pc, #464]	@ (8006b20 <HAL_DMA_Abort+0x218>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a73      	ldr	r2, [pc, #460]	@ (8006b24 <HAL_DMA_Abort+0x21c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a71      	ldr	r2, [pc, #452]	@ (8006b28 <HAL_DMA_Abort+0x220>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a70      	ldr	r2, [pc, #448]	@ (8006b2c <HAL_DMA_Abort+0x224>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a6e      	ldr	r2, [pc, #440]	@ (8006b30 <HAL_DMA_Abort+0x228>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a6d      	ldr	r2, [pc, #436]	@ (8006b34 <HAL_DMA_Abort+0x22c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a6b      	ldr	r2, [pc, #428]	@ (8006b38 <HAL_DMA_Abort+0x230>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a6a      	ldr	r2, [pc, #424]	@ (8006b3c <HAL_DMA_Abort+0x234>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a68      	ldr	r2, [pc, #416]	@ (8006b40 <HAL_DMA_Abort+0x238>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a67      	ldr	r2, [pc, #412]	@ (8006b44 <HAL_DMA_Abort+0x23c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a65      	ldr	r2, [pc, #404]	@ (8006b48 <HAL_DMA_Abort+0x240>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a64      	ldr	r2, [pc, #400]	@ (8006b4c <HAL_DMA_Abort+0x244>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a62      	ldr	r2, [pc, #392]	@ (8006b50 <HAL_DMA_Abort+0x248>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a61      	ldr	r2, [pc, #388]	@ (8006b54 <HAL_DMA_Abort+0x24c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_Abort+0xd6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b58 <HAL_DMA_Abort+0x250>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_DMA_Abort+0xda>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <HAL_DMA_Abort+0xdc>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 021e 	bic.w	r2, r2, #30
 80069f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695a      	ldr	r2, [r3, #20]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e00a      	b.n	8006a26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 020e 	bic.w	r2, r2, #14
 8006a1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8006b1c <HAL_DMA_Abort+0x214>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d072      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a3a      	ldr	r2, [pc, #232]	@ (8006b20 <HAL_DMA_Abort+0x218>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d06d      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a39      	ldr	r2, [pc, #228]	@ (8006b24 <HAL_DMA_Abort+0x21c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d068      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a37      	ldr	r2, [pc, #220]	@ (8006b28 <HAL_DMA_Abort+0x220>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d063      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a36      	ldr	r2, [pc, #216]	@ (8006b2c <HAL_DMA_Abort+0x224>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d05e      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a34      	ldr	r2, [pc, #208]	@ (8006b30 <HAL_DMA_Abort+0x228>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d059      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a33      	ldr	r2, [pc, #204]	@ (8006b34 <HAL_DMA_Abort+0x22c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d054      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a31      	ldr	r2, [pc, #196]	@ (8006b38 <HAL_DMA_Abort+0x230>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04f      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a30      	ldr	r2, [pc, #192]	@ (8006b3c <HAL_DMA_Abort+0x234>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2e      	ldr	r2, [pc, #184]	@ (8006b40 <HAL_DMA_Abort+0x238>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8006b44 <HAL_DMA_Abort+0x23c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2b      	ldr	r2, [pc, #172]	@ (8006b48 <HAL_DMA_Abort+0x240>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b4c <HAL_DMA_Abort+0x244>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a28      	ldr	r2, [pc, #160]	@ (8006b50 <HAL_DMA_Abort+0x248>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a27      	ldr	r2, [pc, #156]	@ (8006b54 <HAL_DMA_Abort+0x24c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	@ (8006b58 <HAL_DMA_Abort+0x250>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	@ (8006b5c <HAL_DMA_Abort+0x254>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <HAL_DMA_Abort+0x258>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <HAL_DMA_Abort+0x25c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <HAL_DMA_Abort+0x260>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b6c <HAL_DMA_Abort+0x264>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b70 <HAL_DMA_Abort+0x268>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1b      	ldr	r2, [pc, #108]	@ (8006b74 <HAL_DMA_Abort+0x26c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_Abort+0x20e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <HAL_DMA_Abort+0x270>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d132      	bne.n	8006b7c <HAL_DMA_Abort+0x274>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e031      	b.n	8006b7e <HAL_DMA_Abort+0x276>
 8006b1a:	bf00      	nop
 8006b1c:	40020010 	.word	0x40020010
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40020040 	.word	0x40020040
 8006b28:	40020058 	.word	0x40020058
 8006b2c:	40020070 	.word	0x40020070
 8006b30:	40020088 	.word	0x40020088
 8006b34:	400200a0 	.word	0x400200a0
 8006b38:	400200b8 	.word	0x400200b8
 8006b3c:	40020410 	.word	0x40020410
 8006b40:	40020428 	.word	0x40020428
 8006b44:	40020440 	.word	0x40020440
 8006b48:	40020458 	.word	0x40020458
 8006b4c:	40020470 	.word	0x40020470
 8006b50:	40020488 	.word	0x40020488
 8006b54:	400204a0 	.word	0x400204a0
 8006b58:	400204b8 	.word	0x400204b8
 8006b5c:	58025408 	.word	0x58025408
 8006b60:	5802541c 	.word	0x5802541c
 8006b64:	58025430 	.word	0x58025430
 8006b68:	58025444 	.word	0x58025444
 8006b6c:	58025458 	.word	0x58025458
 8006b70:	5802546c 	.word	0x5802546c
 8006b74:	58025480 	.word	0x58025480
 8006b78:	58025494 	.word	0x58025494
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a6d      	ldr	r2, [pc, #436]	@ (8006d4c <HAL_DMA_Abort+0x444>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d04a      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8006d50 <HAL_DMA_Abort+0x448>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d045      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6a      	ldr	r2, [pc, #424]	@ (8006d54 <HAL_DMA_Abort+0x44c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d040      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a68      	ldr	r2, [pc, #416]	@ (8006d58 <HAL_DMA_Abort+0x450>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d03b      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a67      	ldr	r2, [pc, #412]	@ (8006d5c <HAL_DMA_Abort+0x454>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d036      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a65      	ldr	r2, [pc, #404]	@ (8006d60 <HAL_DMA_Abort+0x458>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d031      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a64      	ldr	r2, [pc, #400]	@ (8006d64 <HAL_DMA_Abort+0x45c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d02c      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a62      	ldr	r2, [pc, #392]	@ (8006d68 <HAL_DMA_Abort+0x460>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d027      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a61      	ldr	r2, [pc, #388]	@ (8006d6c <HAL_DMA_Abort+0x464>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d022      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5f      	ldr	r2, [pc, #380]	@ (8006d70 <HAL_DMA_Abort+0x468>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01d      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8006d74 <HAL_DMA_Abort+0x46c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d018      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a5c      	ldr	r2, [pc, #368]	@ (8006d78 <HAL_DMA_Abort+0x470>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8006d7c <HAL_DMA_Abort+0x474>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00e      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a59      	ldr	r2, [pc, #356]	@ (8006d80 <HAL_DMA_Abort+0x478>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a58      	ldr	r2, [pc, #352]	@ (8006d84 <HAL_DMA_Abort+0x47c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_DMA_Abort+0x32a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a56      	ldr	r2, [pc, #344]	@ (8006d88 <HAL_DMA_Abort+0x480>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d108      	bne.n	8006c44 <HAL_DMA_Abort+0x33c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e007      	b.n	8006c54 <HAL_DMA_Abort+0x34c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c54:	e013      	b.n	8006c7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c56:	f7fe fecb 	bl	80059f0 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b05      	cmp	r3, #5
 8006c62:	d90c      	bls.n	8006c7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e12d      	b.n	8006eda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8006d4c <HAL_DMA_Abort+0x444>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2d      	ldr	r2, [pc, #180]	@ (8006d50 <HAL_DMA_Abort+0x448>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d54 <HAL_DMA_Abort+0x44c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2a      	ldr	r2, [pc, #168]	@ (8006d58 <HAL_DMA_Abort+0x450>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a29      	ldr	r2, [pc, #164]	@ (8006d5c <HAL_DMA_Abort+0x454>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	@ (8006d60 <HAL_DMA_Abort+0x458>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a26      	ldr	r2, [pc, #152]	@ (8006d64 <HAL_DMA_Abort+0x45c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	@ (8006d68 <HAL_DMA_Abort+0x460>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a23      	ldr	r2, [pc, #140]	@ (8006d6c <HAL_DMA_Abort+0x464>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a21      	ldr	r2, [pc, #132]	@ (8006d70 <HAL_DMA_Abort+0x468>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a20      	ldr	r2, [pc, #128]	@ (8006d74 <HAL_DMA_Abort+0x46c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006d78 <HAL_DMA_Abort+0x470>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1d      	ldr	r2, [pc, #116]	@ (8006d7c <HAL_DMA_Abort+0x474>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1b      	ldr	r2, [pc, #108]	@ (8006d80 <HAL_DMA_Abort+0x478>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006d84 <HAL_DMA_Abort+0x47c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_Abort+0x422>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <HAL_DMA_Abort+0x480>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <HAL_DMA_Abort+0x426>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_DMA_Abort+0x428>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02b      	beq.n	8006d8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	223f      	movs	r2, #63	@ 0x3f
 8006d44:	409a      	lsls	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	609a      	str	r2, [r3, #8]
 8006d4a:	e02a      	b.n	8006da2 <HAL_DMA_Abort+0x49a>
 8006d4c:	40020010 	.word	0x40020010
 8006d50:	40020028 	.word	0x40020028
 8006d54:	40020040 	.word	0x40020040
 8006d58:	40020058 	.word	0x40020058
 8006d5c:	40020070 	.word	0x40020070
 8006d60:	40020088 	.word	0x40020088
 8006d64:	400200a0 	.word	0x400200a0
 8006d68:	400200b8 	.word	0x400200b8
 8006d6c:	40020410 	.word	0x40020410
 8006d70:	40020428 	.word	0x40020428
 8006d74:	40020440 	.word	0x40020440
 8006d78:	40020458 	.word	0x40020458
 8006d7c:	40020470 	.word	0x40020470
 8006d80:	40020488 	.word	0x40020488
 8006d84:	400204a0 	.word	0x400204a0
 8006d88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee4 <HAL_DMA_Abort+0x5dc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d072      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a4d      	ldr	r2, [pc, #308]	@ (8006ee8 <HAL_DMA_Abort+0x5e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d06d      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a4c      	ldr	r2, [pc, #304]	@ (8006eec <HAL_DMA_Abort+0x5e4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d068      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef0 <HAL_DMA_Abort+0x5e8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d063      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a49      	ldr	r2, [pc, #292]	@ (8006ef4 <HAL_DMA_Abort+0x5ec>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d05e      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a47      	ldr	r2, [pc, #284]	@ (8006ef8 <HAL_DMA_Abort+0x5f0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d059      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a46      	ldr	r2, [pc, #280]	@ (8006efc <HAL_DMA_Abort+0x5f4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d054      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a44      	ldr	r2, [pc, #272]	@ (8006f00 <HAL_DMA_Abort+0x5f8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d04f      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a43      	ldr	r2, [pc, #268]	@ (8006f04 <HAL_DMA_Abort+0x5fc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d04a      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a41      	ldr	r2, [pc, #260]	@ (8006f08 <HAL_DMA_Abort+0x600>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d045      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a40      	ldr	r2, [pc, #256]	@ (8006f0c <HAL_DMA_Abort+0x604>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d040      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a3e      	ldr	r2, [pc, #248]	@ (8006f10 <HAL_DMA_Abort+0x608>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8006f14 <HAL_DMA_Abort+0x60c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d036      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3b      	ldr	r2, [pc, #236]	@ (8006f18 <HAL_DMA_Abort+0x610>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a3a      	ldr	r2, [pc, #232]	@ (8006f1c <HAL_DMA_Abort+0x614>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d02c      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a38      	ldr	r2, [pc, #224]	@ (8006f20 <HAL_DMA_Abort+0x618>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a37      	ldr	r2, [pc, #220]	@ (8006f24 <HAL_DMA_Abort+0x61c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a35      	ldr	r2, [pc, #212]	@ (8006f28 <HAL_DMA_Abort+0x620>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a34      	ldr	r2, [pc, #208]	@ (8006f2c <HAL_DMA_Abort+0x624>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a32      	ldr	r2, [pc, #200]	@ (8006f30 <HAL_DMA_Abort+0x628>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a31      	ldr	r2, [pc, #196]	@ (8006f34 <HAL_DMA_Abort+0x62c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2f      	ldr	r2, [pc, #188]	@ (8006f38 <HAL_DMA_Abort+0x630>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2e      	ldr	r2, [pc, #184]	@ (8006f3c <HAL_DMA_Abort+0x634>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_DMA_Abort+0x58a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f40 <HAL_DMA_Abort+0x638>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d101      	bne.n	8006e96 <HAL_DMA_Abort+0x58e>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_DMA_Abort+0x590>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d015      	beq.n	8006ec8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ea4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ec6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40020010 	.word	0x40020010
 8006ee8:	40020028 	.word	0x40020028
 8006eec:	40020040 	.word	0x40020040
 8006ef0:	40020058 	.word	0x40020058
 8006ef4:	40020070 	.word	0x40020070
 8006ef8:	40020088 	.word	0x40020088
 8006efc:	400200a0 	.word	0x400200a0
 8006f00:	400200b8 	.word	0x400200b8
 8006f04:	40020410 	.word	0x40020410
 8006f08:	40020428 	.word	0x40020428
 8006f0c:	40020440 	.word	0x40020440
 8006f10:	40020458 	.word	0x40020458
 8006f14:	40020470 	.word	0x40020470
 8006f18:	40020488 	.word	0x40020488
 8006f1c:	400204a0 	.word	0x400204a0
 8006f20:	400204b8 	.word	0x400204b8
 8006f24:	58025408 	.word	0x58025408
 8006f28:	5802541c 	.word	0x5802541c
 8006f2c:	58025430 	.word	0x58025430
 8006f30:	58025444 	.word	0x58025444
 8006f34:	58025458 	.word	0x58025458
 8006f38:	5802546c 	.word	0x5802546c
 8006f3c:	58025480 	.word	0x58025480
 8006f40:	58025494 	.word	0x58025494

08006f44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e237      	b.n	80073c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d004      	beq.n	8006f6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2280      	movs	r2, #128	@ 0x80
 8006f66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e22c      	b.n	80073c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a5c      	ldr	r2, [pc, #368]	@ (80070e4 <HAL_DMA_Abort_IT+0x1a0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d04a      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80070e8 <HAL_DMA_Abort_IT+0x1a4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d045      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a59      	ldr	r2, [pc, #356]	@ (80070ec <HAL_DMA_Abort_IT+0x1a8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d040      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a58      	ldr	r2, [pc, #352]	@ (80070f0 <HAL_DMA_Abort_IT+0x1ac>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d03b      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a56      	ldr	r2, [pc, #344]	@ (80070f4 <HAL_DMA_Abort_IT+0x1b0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d036      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a55      	ldr	r2, [pc, #340]	@ (80070f8 <HAL_DMA_Abort_IT+0x1b4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d031      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a53      	ldr	r2, [pc, #332]	@ (80070fc <HAL_DMA_Abort_IT+0x1b8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d02c      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a52      	ldr	r2, [pc, #328]	@ (8007100 <HAL_DMA_Abort_IT+0x1bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d027      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a50      	ldr	r2, [pc, #320]	@ (8007104 <HAL_DMA_Abort_IT+0x1c0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d022      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4f      	ldr	r2, [pc, #316]	@ (8007108 <HAL_DMA_Abort_IT+0x1c4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d01d      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800710c <HAL_DMA_Abort_IT+0x1c8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a4c      	ldr	r2, [pc, #304]	@ (8007110 <HAL_DMA_Abort_IT+0x1cc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8007114 <HAL_DMA_Abort_IT+0x1d0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a49      	ldr	r2, [pc, #292]	@ (8007118 <HAL_DMA_Abort_IT+0x1d4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a47      	ldr	r2, [pc, #284]	@ (800711c <HAL_DMA_Abort_IT+0x1d8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_DMA_Abort_IT+0xc8>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a46      	ldr	r2, [pc, #280]	@ (8007120 <HAL_DMA_Abort_IT+0x1dc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d101      	bne.n	8007010 <HAL_DMA_Abort_IT+0xcc>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_DMA_Abort_IT+0xce>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8086 	beq.w	8007124 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2204      	movs	r2, #4
 800701c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2f      	ldr	r2, [pc, #188]	@ (80070e4 <HAL_DMA_Abort_IT+0x1a0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d04a      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a2e      	ldr	r2, [pc, #184]	@ (80070e8 <HAL_DMA_Abort_IT+0x1a4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d045      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a2c      	ldr	r2, [pc, #176]	@ (80070ec <HAL_DMA_Abort_IT+0x1a8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d040      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2b      	ldr	r2, [pc, #172]	@ (80070f0 <HAL_DMA_Abort_IT+0x1ac>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d03b      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a29      	ldr	r2, [pc, #164]	@ (80070f4 <HAL_DMA_Abort_IT+0x1b0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d036      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a28      	ldr	r2, [pc, #160]	@ (80070f8 <HAL_DMA_Abort_IT+0x1b4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d031      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a26      	ldr	r2, [pc, #152]	@ (80070fc <HAL_DMA_Abort_IT+0x1b8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d02c      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a25      	ldr	r2, [pc, #148]	@ (8007100 <HAL_DMA_Abort_IT+0x1bc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d027      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a23      	ldr	r2, [pc, #140]	@ (8007104 <HAL_DMA_Abort_IT+0x1c0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d022      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a22      	ldr	r2, [pc, #136]	@ (8007108 <HAL_DMA_Abort_IT+0x1c4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d01d      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a20      	ldr	r2, [pc, #128]	@ (800710c <HAL_DMA_Abort_IT+0x1c8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d018      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <HAL_DMA_Abort_IT+0x1cc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1d      	ldr	r2, [pc, #116]	@ (8007114 <HAL_DMA_Abort_IT+0x1d0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00e      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007118 <HAL_DMA_Abort_IT+0x1d4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d009      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1a      	ldr	r2, [pc, #104]	@ (800711c <HAL_DMA_Abort_IT+0x1d8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x17c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a19      	ldr	r2, [pc, #100]	@ (8007120 <HAL_DMA_Abort_IT+0x1dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d108      	bne.n	80070d2 <HAL_DMA_Abort_IT+0x18e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e178      	b.n	80073c4 <HAL_DMA_Abort_IT+0x480>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e16f      	b.n	80073c4 <HAL_DMA_Abort_IT+0x480>
 80070e4:	40020010 	.word	0x40020010
 80070e8:	40020028 	.word	0x40020028
 80070ec:	40020040 	.word	0x40020040
 80070f0:	40020058 	.word	0x40020058
 80070f4:	40020070 	.word	0x40020070
 80070f8:	40020088 	.word	0x40020088
 80070fc:	400200a0 	.word	0x400200a0
 8007100:	400200b8 	.word	0x400200b8
 8007104:	40020410 	.word	0x40020410
 8007108:	40020428 	.word	0x40020428
 800710c:	40020440 	.word	0x40020440
 8007110:	40020458 	.word	0x40020458
 8007114:	40020470 	.word	0x40020470
 8007118:	40020488 	.word	0x40020488
 800711c:	400204a0 	.word	0x400204a0
 8007120:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 020e 	bic.w	r2, r2, #14
 8007132:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a6c      	ldr	r2, [pc, #432]	@ (80072ec <HAL_DMA_Abort_IT+0x3a8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d04a      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a6b      	ldr	r2, [pc, #428]	@ (80072f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d045      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a69      	ldr	r2, [pc, #420]	@ (80072f4 <HAL_DMA_Abort_IT+0x3b0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d040      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a68      	ldr	r2, [pc, #416]	@ (80072f8 <HAL_DMA_Abort_IT+0x3b4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d03b      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a66      	ldr	r2, [pc, #408]	@ (80072fc <HAL_DMA_Abort_IT+0x3b8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d036      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a65      	ldr	r2, [pc, #404]	@ (8007300 <HAL_DMA_Abort_IT+0x3bc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d031      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a63      	ldr	r2, [pc, #396]	@ (8007304 <HAL_DMA_Abort_IT+0x3c0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02c      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a62      	ldr	r2, [pc, #392]	@ (8007308 <HAL_DMA_Abort_IT+0x3c4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d027      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a60      	ldr	r2, [pc, #384]	@ (800730c <HAL_DMA_Abort_IT+0x3c8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a5f      	ldr	r2, [pc, #380]	@ (8007310 <HAL_DMA_Abort_IT+0x3cc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d01d      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5d      	ldr	r2, [pc, #372]	@ (8007314 <HAL_DMA_Abort_IT+0x3d0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007318 <HAL_DMA_Abort_IT+0x3d4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5a      	ldr	r2, [pc, #360]	@ (800731c <HAL_DMA_Abort_IT+0x3d8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a59      	ldr	r2, [pc, #356]	@ (8007320 <HAL_DMA_Abort_IT+0x3dc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a57      	ldr	r2, [pc, #348]	@ (8007324 <HAL_DMA_Abort_IT+0x3e0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x290>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a56      	ldr	r2, [pc, #344]	@ (8007328 <HAL_DMA_Abort_IT+0x3e4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d108      	bne.n	80071e6 <HAL_DMA_Abort_IT+0x2a2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e007      	b.n	80071f6 <HAL_DMA_Abort_IT+0x2b2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a3c      	ldr	r2, [pc, #240]	@ (80072ec <HAL_DMA_Abort_IT+0x3a8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d072      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a3a      	ldr	r2, [pc, #232]	@ (80072f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d06d      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a39      	ldr	r2, [pc, #228]	@ (80072f4 <HAL_DMA_Abort_IT+0x3b0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d068      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a37      	ldr	r2, [pc, #220]	@ (80072f8 <HAL_DMA_Abort_IT+0x3b4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d063      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a36      	ldr	r2, [pc, #216]	@ (80072fc <HAL_DMA_Abort_IT+0x3b8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d05e      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a34      	ldr	r2, [pc, #208]	@ (8007300 <HAL_DMA_Abort_IT+0x3bc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d059      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a33      	ldr	r2, [pc, #204]	@ (8007304 <HAL_DMA_Abort_IT+0x3c0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d054      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a31      	ldr	r2, [pc, #196]	@ (8007308 <HAL_DMA_Abort_IT+0x3c4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d04f      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a30      	ldr	r2, [pc, #192]	@ (800730c <HAL_DMA_Abort_IT+0x3c8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d04a      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a2e      	ldr	r2, [pc, #184]	@ (8007310 <HAL_DMA_Abort_IT+0x3cc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d045      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a2d      	ldr	r2, [pc, #180]	@ (8007314 <HAL_DMA_Abort_IT+0x3d0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d040      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a2b      	ldr	r2, [pc, #172]	@ (8007318 <HAL_DMA_Abort_IT+0x3d4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d03b      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a2a      	ldr	r2, [pc, #168]	@ (800731c <HAL_DMA_Abort_IT+0x3d8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d036      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a28      	ldr	r2, [pc, #160]	@ (8007320 <HAL_DMA_Abort_IT+0x3dc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d031      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a27      	ldr	r2, [pc, #156]	@ (8007324 <HAL_DMA_Abort_IT+0x3e0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d02c      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a25      	ldr	r2, [pc, #148]	@ (8007328 <HAL_DMA_Abort_IT+0x3e4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d027      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a24      	ldr	r2, [pc, #144]	@ (800732c <HAL_DMA_Abort_IT+0x3e8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d022      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a22      	ldr	r2, [pc, #136]	@ (8007330 <HAL_DMA_Abort_IT+0x3ec>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01d      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a21      	ldr	r2, [pc, #132]	@ (8007334 <HAL_DMA_Abort_IT+0x3f0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007338 <HAL_DMA_Abort_IT+0x3f4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1e      	ldr	r2, [pc, #120]	@ (800733c <HAL_DMA_Abort_IT+0x3f8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00e      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007340 <HAL_DMA_Abort_IT+0x3fc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007344 <HAL_DMA_Abort_IT+0x400>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x3a2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a19      	ldr	r2, [pc, #100]	@ (8007348 <HAL_DMA_Abort_IT+0x404>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d132      	bne.n	800734c <HAL_DMA_Abort_IT+0x408>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e031      	b.n	800734e <HAL_DMA_Abort_IT+0x40a>
 80072ea:	bf00      	nop
 80072ec:	40020010 	.word	0x40020010
 80072f0:	40020028 	.word	0x40020028
 80072f4:	40020040 	.word	0x40020040
 80072f8:	40020058 	.word	0x40020058
 80072fc:	40020070 	.word	0x40020070
 8007300:	40020088 	.word	0x40020088
 8007304:	400200a0 	.word	0x400200a0
 8007308:	400200b8 	.word	0x400200b8
 800730c:	40020410 	.word	0x40020410
 8007310:	40020428 	.word	0x40020428
 8007314:	40020440 	.word	0x40020440
 8007318:	40020458 	.word	0x40020458
 800731c:	40020470 	.word	0x40020470
 8007320:	40020488 	.word	0x40020488
 8007324:	400204a0 	.word	0x400204a0
 8007328:	400204b8 	.word	0x400204b8
 800732c:	58025408 	.word	0x58025408
 8007330:	5802541c 	.word	0x5802541c
 8007334:	58025430 	.word	0x58025430
 8007338:	58025444 	.word	0x58025444
 800733c:	58025458 	.word	0x58025458
 8007340:	5802546c 	.word	0x5802546c
 8007344:	58025480 	.word	0x58025480
 8007348:	58025494 	.word	0x58025494
 800734c:	2300      	movs	r3, #0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d028      	beq.n	80073a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007360:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007380:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007398:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	@ 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073dc:	4b67      	ldr	r3, [pc, #412]	@ (800757c <HAL_DMA_IRQHandler+0x1ac>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a67      	ldr	r2, [pc, #412]	@ (8007580 <HAL_DMA_IRQHandler+0x1b0>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	0a9b      	lsrs	r3, r3, #10
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a5f      	ldr	r2, [pc, #380]	@ (8007584 <HAL_DMA_IRQHandler+0x1b4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d04a      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a5d      	ldr	r2, [pc, #372]	@ (8007588 <HAL_DMA_IRQHandler+0x1b8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d045      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a5c      	ldr	r2, [pc, #368]	@ (800758c <HAL_DMA_IRQHandler+0x1bc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d040      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a5a      	ldr	r2, [pc, #360]	@ (8007590 <HAL_DMA_IRQHandler+0x1c0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d03b      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a59      	ldr	r2, [pc, #356]	@ (8007594 <HAL_DMA_IRQHandler+0x1c4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d036      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a57      	ldr	r2, [pc, #348]	@ (8007598 <HAL_DMA_IRQHandler+0x1c8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d031      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a56      	ldr	r2, [pc, #344]	@ (800759c <HAL_DMA_IRQHandler+0x1cc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d02c      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a54      	ldr	r2, [pc, #336]	@ (80075a0 <HAL_DMA_IRQHandler+0x1d0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d027      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a53      	ldr	r2, [pc, #332]	@ (80075a4 <HAL_DMA_IRQHandler+0x1d4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a51      	ldr	r2, [pc, #324]	@ (80075a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a50      	ldr	r2, [pc, #320]	@ (80075ac <HAL_DMA_IRQHandler+0x1dc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a4e      	ldr	r2, [pc, #312]	@ (80075b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a4d      	ldr	r2, [pc, #308]	@ (80075b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a4b      	ldr	r2, [pc, #300]	@ (80075b8 <HAL_DMA_IRQHandler+0x1e8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a4a      	ldr	r2, [pc, #296]	@ (80075bc <HAL_DMA_IRQHandler+0x1ec>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xd2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a48      	ldr	r2, [pc, #288]	@ (80075c0 <HAL_DMA_IRQHandler+0x1f0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <HAL_DMA_IRQHandler+0xd6>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <HAL_DMA_IRQHandler+0xd8>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 842b 	beq.w	8007d04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2208      	movs	r2, #8
 80074b8:	409a      	lsls	r2, r3
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80a2 	beq.w	8007608 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007584 <HAL_DMA_IRQHandler+0x1b4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d04a      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007588 <HAL_DMA_IRQHandler+0x1b8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d045      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a2b      	ldr	r2, [pc, #172]	@ (800758c <HAL_DMA_IRQHandler+0x1bc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d040      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007590 <HAL_DMA_IRQHandler+0x1c0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d03b      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a28      	ldr	r2, [pc, #160]	@ (8007594 <HAL_DMA_IRQHandler+0x1c4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d036      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a27      	ldr	r2, [pc, #156]	@ (8007598 <HAL_DMA_IRQHandler+0x1c8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d031      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a25      	ldr	r2, [pc, #148]	@ (800759c <HAL_DMA_IRQHandler+0x1cc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d02c      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a24      	ldr	r2, [pc, #144]	@ (80075a0 <HAL_DMA_IRQHandler+0x1d0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d027      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a22      	ldr	r2, [pc, #136]	@ (80075a4 <HAL_DMA_IRQHandler+0x1d4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d022      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	@ (80075a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d01d      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1f      	ldr	r2, [pc, #124]	@ (80075ac <HAL_DMA_IRQHandler+0x1dc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1e      	ldr	r2, [pc, #120]	@ (80075b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1c      	ldr	r2, [pc, #112]	@ (80075b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1b      	ldr	r2, [pc, #108]	@ (80075b8 <HAL_DMA_IRQHandler+0x1e8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a19      	ldr	r2, [pc, #100]	@ (80075bc <HAL_DMA_IRQHandler+0x1ec>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_DMA_IRQHandler+0x194>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a18      	ldr	r2, [pc, #96]	@ (80075c0 <HAL_DMA_IRQHandler+0x1f0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d12f      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x1f4>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	e02e      	b.n	80075d8 <HAL_DMA_IRQHandler+0x208>
 800757a:	bf00      	nop
 800757c:	240000c0 	.word	0x240000c0
 8007580:	1b4e81b5 	.word	0x1b4e81b5
 8007584:	40020010 	.word	0x40020010
 8007588:	40020028 	.word	0x40020028
 800758c:	40020040 	.word	0x40020040
 8007590:	40020058 	.word	0x40020058
 8007594:	40020070 	.word	0x40020070
 8007598:	40020088 	.word	0x40020088
 800759c:	400200a0 	.word	0x400200a0
 80075a0:	400200b8 	.word	0x400200b8
 80075a4:	40020410 	.word	0x40020410
 80075a8:	40020428 	.word	0x40020428
 80075ac:	40020440 	.word	0x40020440
 80075b0:	40020458 	.word	0x40020458
 80075b4:	40020470 	.word	0x40020470
 80075b8:	40020488 	.word	0x40020488
 80075bc:	400204a0 	.word	0x400204a0
 80075c0:	400204b8 	.word	0x400204b8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d015      	beq.n	8007608 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0204 	bic.w	r2, r2, #4
 80075ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2208      	movs	r2, #8
 80075f6:	409a      	lsls	r2, r3
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d06e      	beq.n	80076fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a69      	ldr	r2, [pc, #420]	@ (80077c8 <HAL_DMA_IRQHandler+0x3f8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04a      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a67      	ldr	r2, [pc, #412]	@ (80077cc <HAL_DMA_IRQHandler+0x3fc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d045      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a66      	ldr	r2, [pc, #408]	@ (80077d0 <HAL_DMA_IRQHandler+0x400>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d040      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a64      	ldr	r2, [pc, #400]	@ (80077d4 <HAL_DMA_IRQHandler+0x404>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d03b      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a63      	ldr	r2, [pc, #396]	@ (80077d8 <HAL_DMA_IRQHandler+0x408>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d036      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a61      	ldr	r2, [pc, #388]	@ (80077dc <HAL_DMA_IRQHandler+0x40c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d031      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a60      	ldr	r2, [pc, #384]	@ (80077e0 <HAL_DMA_IRQHandler+0x410>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02c      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a5e      	ldr	r2, [pc, #376]	@ (80077e4 <HAL_DMA_IRQHandler+0x414>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d027      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a5d      	ldr	r2, [pc, #372]	@ (80077e8 <HAL_DMA_IRQHandler+0x418>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a5b      	ldr	r2, [pc, #364]	@ (80077ec <HAL_DMA_IRQHandler+0x41c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a5a      	ldr	r2, [pc, #360]	@ (80077f0 <HAL_DMA_IRQHandler+0x420>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a58      	ldr	r2, [pc, #352]	@ (80077f4 <HAL_DMA_IRQHandler+0x424>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a57      	ldr	r2, [pc, #348]	@ (80077f8 <HAL_DMA_IRQHandler+0x428>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a55      	ldr	r2, [pc, #340]	@ (80077fc <HAL_DMA_IRQHandler+0x42c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a54      	ldr	r2, [pc, #336]	@ (8007800 <HAL_DMA_IRQHandler+0x430>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_DMA_IRQHandler+0x2ee>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a52      	ldr	r2, [pc, #328]	@ (8007804 <HAL_DMA_IRQHandler+0x434>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d10a      	bne.n	80076d4 <HAL_DMA_IRQHandler+0x304>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bf14      	ite	ne
 80076cc:	2301      	movne	r3, #1
 80076ce:	2300      	moveq	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	e003      	b.n	80076dc <HAL_DMA_IRQHandler+0x30c>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00d      	beq.n	80076fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2201      	movs	r2, #1
 80076ea:	409a      	lsls	r2, r3
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f4:	f043 0202 	orr.w	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2204      	movs	r2, #4
 8007706:	409a      	lsls	r2, r3
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 808f 	beq.w	8007830 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2c      	ldr	r2, [pc, #176]	@ (80077c8 <HAL_DMA_IRQHandler+0x3f8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d04a      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <HAL_DMA_IRQHandler+0x3fc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d045      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a29      	ldr	r2, [pc, #164]	@ (80077d0 <HAL_DMA_IRQHandler+0x400>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d040      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a27      	ldr	r2, [pc, #156]	@ (80077d4 <HAL_DMA_IRQHandler+0x404>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d03b      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a26      	ldr	r2, [pc, #152]	@ (80077d8 <HAL_DMA_IRQHandler+0x408>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d036      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a24      	ldr	r2, [pc, #144]	@ (80077dc <HAL_DMA_IRQHandler+0x40c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d031      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a23      	ldr	r2, [pc, #140]	@ (80077e0 <HAL_DMA_IRQHandler+0x410>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d02c      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a21      	ldr	r2, [pc, #132]	@ (80077e4 <HAL_DMA_IRQHandler+0x414>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d027      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a20      	ldr	r2, [pc, #128]	@ (80077e8 <HAL_DMA_IRQHandler+0x418>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d022      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <HAL_DMA_IRQHandler+0x41c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01d      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1d      	ldr	r2, [pc, #116]	@ (80077f0 <HAL_DMA_IRQHandler+0x420>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d018      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1b      	ldr	r2, [pc, #108]	@ (80077f4 <HAL_DMA_IRQHandler+0x424>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1a      	ldr	r2, [pc, #104]	@ (80077f8 <HAL_DMA_IRQHandler+0x428>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00e      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <HAL_DMA_IRQHandler+0x42c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d009      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <HAL_DMA_IRQHandler+0x430>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d004      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x3e2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a15      	ldr	r2, [pc, #84]	@ (8007804 <HAL_DMA_IRQHandler+0x434>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d12a      	bne.n	8007808 <HAL_DMA_IRQHandler+0x438>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e023      	b.n	8007810 <HAL_DMA_IRQHandler+0x440>
 80077c8:	40020010 	.word	0x40020010
 80077cc:	40020028 	.word	0x40020028
 80077d0:	40020040 	.word	0x40020040
 80077d4:	40020058 	.word	0x40020058
 80077d8:	40020070 	.word	0x40020070
 80077dc:	40020088 	.word	0x40020088
 80077e0:	400200a0 	.word	0x400200a0
 80077e4:	400200b8 	.word	0x400200b8
 80077e8:	40020410 	.word	0x40020410
 80077ec:	40020428 	.word	0x40020428
 80077f0:	40020440 	.word	0x40020440
 80077f4:	40020458 	.word	0x40020458
 80077f8:	40020470 	.word	0x40020470
 80077fc:	40020488 	.word	0x40020488
 8007800:	400204a0 	.word	0x400204a0
 8007804:	400204b8 	.word	0x400204b8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2300      	movs	r3, #0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00d      	beq.n	8007830 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2204      	movs	r2, #4
 800781e:	409a      	lsls	r2, r3
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007828:	f043 0204 	orr.w	r2, r3, #4
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	2210      	movs	r2, #16
 800783a:	409a      	lsls	r2, r3
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	4013      	ands	r3, r2
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80a6 	beq.w	8007992 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a85      	ldr	r2, [pc, #532]	@ (8007a60 <HAL_DMA_IRQHandler+0x690>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d04a      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a83      	ldr	r2, [pc, #524]	@ (8007a64 <HAL_DMA_IRQHandler+0x694>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d045      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a82      	ldr	r2, [pc, #520]	@ (8007a68 <HAL_DMA_IRQHandler+0x698>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d040      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a80      	ldr	r2, [pc, #512]	@ (8007a6c <HAL_DMA_IRQHandler+0x69c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d03b      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a7f      	ldr	r2, [pc, #508]	@ (8007a70 <HAL_DMA_IRQHandler+0x6a0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d036      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a7d      	ldr	r2, [pc, #500]	@ (8007a74 <HAL_DMA_IRQHandler+0x6a4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d031      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a7c      	ldr	r2, [pc, #496]	@ (8007a78 <HAL_DMA_IRQHandler+0x6a8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d02c      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a7a      	ldr	r2, [pc, #488]	@ (8007a7c <HAL_DMA_IRQHandler+0x6ac>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d027      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a79      	ldr	r2, [pc, #484]	@ (8007a80 <HAL_DMA_IRQHandler+0x6b0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d022      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a77      	ldr	r2, [pc, #476]	@ (8007a84 <HAL_DMA_IRQHandler+0x6b4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01d      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a76      	ldr	r2, [pc, #472]	@ (8007a88 <HAL_DMA_IRQHandler+0x6b8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d018      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a74      	ldr	r2, [pc, #464]	@ (8007a8c <HAL_DMA_IRQHandler+0x6bc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a73      	ldr	r2, [pc, #460]	@ (8007a90 <HAL_DMA_IRQHandler+0x6c0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00e      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a71      	ldr	r2, [pc, #452]	@ (8007a94 <HAL_DMA_IRQHandler+0x6c4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d009      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a70      	ldr	r2, [pc, #448]	@ (8007a98 <HAL_DMA_IRQHandler+0x6c8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d004      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x516>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a6e      	ldr	r2, [pc, #440]	@ (8007a9c <HAL_DMA_IRQHandler+0x6cc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10a      	bne.n	80078fc <HAL_DMA_IRQHandler+0x52c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bf14      	ite	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	2300      	moveq	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e009      	b.n	8007910 <HAL_DMA_IRQHandler+0x540>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	bf14      	ite	ne
 800790a:	2301      	movne	r3, #1
 800790c:	2300      	moveq	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d03e      	beq.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2210      	movs	r2, #16
 800791e:	409a      	lsls	r2, r3
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d018      	beq.n	8007964 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d108      	bne.n	8007952 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d024      	beq.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
 8007950:	e01f      	b.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01b      	beq.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	e016      	b.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0208 	bic.w	r2, r2, #8
 8007980:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007996:	f003 031f 	and.w	r3, r3, #31
 800799a:	2220      	movs	r2, #32
 800799c:	409a      	lsls	r2, r3
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8110 	beq.w	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007a60 <HAL_DMA_IRQHandler+0x690>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d04a      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2b      	ldr	r2, [pc, #172]	@ (8007a64 <HAL_DMA_IRQHandler+0x694>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d045      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a29      	ldr	r2, [pc, #164]	@ (8007a68 <HAL_DMA_IRQHandler+0x698>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d040      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a28      	ldr	r2, [pc, #160]	@ (8007a6c <HAL_DMA_IRQHandler+0x69c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d03b      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <HAL_DMA_IRQHandler+0x6a0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d036      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a25      	ldr	r2, [pc, #148]	@ (8007a74 <HAL_DMA_IRQHandler+0x6a4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d031      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a23      	ldr	r2, [pc, #140]	@ (8007a78 <HAL_DMA_IRQHandler+0x6a8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02c      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a22      	ldr	r2, [pc, #136]	@ (8007a7c <HAL_DMA_IRQHandler+0x6ac>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d027      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a20      	ldr	r2, [pc, #128]	@ (8007a80 <HAL_DMA_IRQHandler+0x6b0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d022      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1f      	ldr	r2, [pc, #124]	@ (8007a84 <HAL_DMA_IRQHandler+0x6b4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d01d      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <HAL_DMA_IRQHandler+0x6b8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d018      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a8c <HAL_DMA_IRQHandler+0x6bc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1a      	ldr	r2, [pc, #104]	@ (8007a90 <HAL_DMA_IRQHandler+0x6c0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00e      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a19      	ldr	r2, [pc, #100]	@ (8007a94 <HAL_DMA_IRQHandler+0x6c4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d009      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a17      	ldr	r2, [pc, #92]	@ (8007a98 <HAL_DMA_IRQHandler+0x6c8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_DMA_IRQHandler+0x678>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a16      	ldr	r2, [pc, #88]	@ (8007a9c <HAL_DMA_IRQHandler+0x6cc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d12b      	bne.n	8007aa0 <HAL_DMA_IRQHandler+0x6d0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	e02a      	b.n	8007ab4 <HAL_DMA_IRQHandler+0x6e4>
 8007a5e:	bf00      	nop
 8007a60:	40020010 	.word	0x40020010
 8007a64:	40020028 	.word	0x40020028
 8007a68:	40020040 	.word	0x40020040
 8007a6c:	40020058 	.word	0x40020058
 8007a70:	40020070 	.word	0x40020070
 8007a74:	40020088 	.word	0x40020088
 8007a78:	400200a0 	.word	0x400200a0
 8007a7c:	400200b8 	.word	0x400200b8
 8007a80:	40020410 	.word	0x40020410
 8007a84:	40020428 	.word	0x40020428
 8007a88:	40020440 	.word	0x40020440
 8007a8c:	40020458 	.word	0x40020458
 8007a90:	40020470 	.word	0x40020470
 8007a94:	40020488 	.word	0x40020488
 8007a98:	400204a0 	.word	0x400204a0
 8007a9c:	400204b8 	.word	0x400204b8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf14      	ite	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	2300      	moveq	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8087 	beq.w	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d139      	bne.n	8007b4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0216 	bic.w	r2, r2, #22
 8007ae4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007af4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <HAL_DMA_IRQHandler+0x736>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0208 	bic.w	r2, r2, #8
 8007b14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	223f      	movs	r2, #63	@ 0x3f
 8007b20:	409a      	lsls	r2, r3
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8382 	beq.w	8008244 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
          }
          return;
 8007b48:	e37c      	b.n	8008244 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d018      	beq.n	8007b8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d02c      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
 8007b76:	e027      	b.n	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d023      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
 8007b88:	e01e      	b.n	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10f      	bne.n	8007bb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0210 	bic.w	r2, r2, #16
 8007ba6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 833e 	beq.w	800824e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8088 	beq.w	8007cf0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a89      	ldr	r2, [pc, #548]	@ (8007e14 <HAL_DMA_IRQHandler+0xa44>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d04a      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a88      	ldr	r2, [pc, #544]	@ (8007e18 <HAL_DMA_IRQHandler+0xa48>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d045      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a86      	ldr	r2, [pc, #536]	@ (8007e1c <HAL_DMA_IRQHandler+0xa4c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d040      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a85      	ldr	r2, [pc, #532]	@ (8007e20 <HAL_DMA_IRQHandler+0xa50>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d03b      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a83      	ldr	r2, [pc, #524]	@ (8007e24 <HAL_DMA_IRQHandler+0xa54>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d036      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a82      	ldr	r2, [pc, #520]	@ (8007e28 <HAL_DMA_IRQHandler+0xa58>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d031      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a80      	ldr	r2, [pc, #512]	@ (8007e2c <HAL_DMA_IRQHandler+0xa5c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d02c      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a7f      	ldr	r2, [pc, #508]	@ (8007e30 <HAL_DMA_IRQHandler+0xa60>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d027      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a7d      	ldr	r2, [pc, #500]	@ (8007e34 <HAL_DMA_IRQHandler+0xa64>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d022      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a7c      	ldr	r2, [pc, #496]	@ (8007e38 <HAL_DMA_IRQHandler+0xa68>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d01d      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a7a      	ldr	r2, [pc, #488]	@ (8007e3c <HAL_DMA_IRQHandler+0xa6c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d018      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a79      	ldr	r2, [pc, #484]	@ (8007e40 <HAL_DMA_IRQHandler+0xa70>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d013      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a77      	ldr	r2, [pc, #476]	@ (8007e44 <HAL_DMA_IRQHandler+0xa74>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00e      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a76      	ldr	r2, [pc, #472]	@ (8007e48 <HAL_DMA_IRQHandler+0xa78>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a74      	ldr	r2, [pc, #464]	@ (8007e4c <HAL_DMA_IRQHandler+0xa7c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x8b8>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a73      	ldr	r2, [pc, #460]	@ (8007e50 <HAL_DMA_IRQHandler+0xa80>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d108      	bne.n	8007c9a <HAL_DMA_IRQHandler+0x8ca>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e007      	b.n	8007caa <HAL_DMA_IRQHandler+0x8da>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d307      	bcc.n	8007cc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f2      	bne.n	8007caa <HAL_DMA_IRQHandler+0x8da>
 8007cc4:	e000      	b.n	8007cc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007cc6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2203      	movs	r2, #3
 8007cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007cde:	e003      	b.n	8007ce8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 82aa 	beq.w	800824e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
 8007d02:	e2a4      	b.n	800824e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a52      	ldr	r2, [pc, #328]	@ (8007e54 <HAL_DMA_IRQHandler+0xa84>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d04a      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a51      	ldr	r2, [pc, #324]	@ (8007e58 <HAL_DMA_IRQHandler+0xa88>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d045      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a4f      	ldr	r2, [pc, #316]	@ (8007e5c <HAL_DMA_IRQHandler+0xa8c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d040      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a4e      	ldr	r2, [pc, #312]	@ (8007e60 <HAL_DMA_IRQHandler+0xa90>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d03b      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a4c      	ldr	r2, [pc, #304]	@ (8007e64 <HAL_DMA_IRQHandler+0xa94>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d036      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8007e68 <HAL_DMA_IRQHandler+0xa98>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d031      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a49      	ldr	r2, [pc, #292]	@ (8007e6c <HAL_DMA_IRQHandler+0xa9c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d02c      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a48      	ldr	r2, [pc, #288]	@ (8007e70 <HAL_DMA_IRQHandler+0xaa0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d027      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a46      	ldr	r2, [pc, #280]	@ (8007e74 <HAL_DMA_IRQHandler+0xaa4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d022      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a45      	ldr	r2, [pc, #276]	@ (8007e78 <HAL_DMA_IRQHandler+0xaa8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d01d      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a43      	ldr	r2, [pc, #268]	@ (8007e7c <HAL_DMA_IRQHandler+0xaac>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d018      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a42      	ldr	r2, [pc, #264]	@ (8007e80 <HAL_DMA_IRQHandler+0xab0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a40      	ldr	r2, [pc, #256]	@ (8007e84 <HAL_DMA_IRQHandler+0xab4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e88 <HAL_DMA_IRQHandler+0xab8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a3d      	ldr	r2, [pc, #244]	@ (8007e8c <HAL_DMA_IRQHandler+0xabc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x9d4>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8007e90 <HAL_DMA_IRQHandler+0xac0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d101      	bne.n	8007da8 <HAL_DMA_IRQHandler+0x9d8>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <HAL_DMA_IRQHandler+0x9da>
 8007da8:	2300      	movs	r3, #0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 824f 	beq.w	800824e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80dd 	beq.w	8007f88 <HAL_DMA_IRQHandler+0xbb8>
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80d7 	beq.w	8007f88 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2204      	movs	r2, #4
 8007de4:	409a      	lsls	r2, r3
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d059      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d14a      	bne.n	8007e94 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8220 	beq.w	8008248 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e10:	e21a      	b.n	8008248 <HAL_DMA_IRQHandler+0xe78>
 8007e12:	bf00      	nop
 8007e14:	40020010 	.word	0x40020010
 8007e18:	40020028 	.word	0x40020028
 8007e1c:	40020040 	.word	0x40020040
 8007e20:	40020058 	.word	0x40020058
 8007e24:	40020070 	.word	0x40020070
 8007e28:	40020088 	.word	0x40020088
 8007e2c:	400200a0 	.word	0x400200a0
 8007e30:	400200b8 	.word	0x400200b8
 8007e34:	40020410 	.word	0x40020410
 8007e38:	40020428 	.word	0x40020428
 8007e3c:	40020440 	.word	0x40020440
 8007e40:	40020458 	.word	0x40020458
 8007e44:	40020470 	.word	0x40020470
 8007e48:	40020488 	.word	0x40020488
 8007e4c:	400204a0 	.word	0x400204a0
 8007e50:	400204b8 	.word	0x400204b8
 8007e54:	48022c08 	.word	0x48022c08
 8007e58:	48022c1c 	.word	0x48022c1c
 8007e5c:	48022c30 	.word	0x48022c30
 8007e60:	48022c44 	.word	0x48022c44
 8007e64:	48022c58 	.word	0x48022c58
 8007e68:	48022c6c 	.word	0x48022c6c
 8007e6c:	48022c80 	.word	0x48022c80
 8007e70:	48022c94 	.word	0x48022c94
 8007e74:	58025408 	.word	0x58025408
 8007e78:	5802541c 	.word	0x5802541c
 8007e7c:	58025430 	.word	0x58025430
 8007e80:	58025444 	.word	0x58025444
 8007e84:	58025458 	.word	0x58025458
 8007e88:	5802546c 	.word	0x5802546c
 8007e8c:	58025480 	.word	0x58025480
 8007e90:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 81d5 	beq.w	8008248 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea6:	e1cf      	b.n	8008248 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d160      	bne.n	8007f74 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a7f      	ldr	r2, [pc, #508]	@ (80080b4 <HAL_DMA_IRQHandler+0xce4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a7d      	ldr	r2, [pc, #500]	@ (80080b8 <HAL_DMA_IRQHandler+0xce8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a7c      	ldr	r2, [pc, #496]	@ (80080bc <HAL_DMA_IRQHandler+0xcec>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a7a      	ldr	r2, [pc, #488]	@ (80080c0 <HAL_DMA_IRQHandler+0xcf0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a79      	ldr	r2, [pc, #484]	@ (80080c4 <HAL_DMA_IRQHandler+0xcf4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a77      	ldr	r2, [pc, #476]	@ (80080c8 <HAL_DMA_IRQHandler+0xcf8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a76      	ldr	r2, [pc, #472]	@ (80080cc <HAL_DMA_IRQHandler+0xcfc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a74      	ldr	r2, [pc, #464]	@ (80080d0 <HAL_DMA_IRQHandler+0xd00>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a73      	ldr	r2, [pc, #460]	@ (80080d4 <HAL_DMA_IRQHandler+0xd04>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a71      	ldr	r2, [pc, #452]	@ (80080d8 <HAL_DMA_IRQHandler+0xd08>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a70      	ldr	r2, [pc, #448]	@ (80080dc <HAL_DMA_IRQHandler+0xd0c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a6e      	ldr	r2, [pc, #440]	@ (80080e0 <HAL_DMA_IRQHandler+0xd10>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a6d      	ldr	r2, [pc, #436]	@ (80080e4 <HAL_DMA_IRQHandler+0xd14>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a6b      	ldr	r2, [pc, #428]	@ (80080e8 <HAL_DMA_IRQHandler+0xd18>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a6a      	ldr	r2, [pc, #424]	@ (80080ec <HAL_DMA_IRQHandler+0xd1c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xb82>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a68      	ldr	r2, [pc, #416]	@ (80080f0 <HAL_DMA_IRQHandler+0xd20>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d108      	bne.n	8007f64 <HAL_DMA_IRQHandler+0xb94>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0208 	bic.w	r2, r2, #8
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e007      	b.n	8007f74 <HAL_DMA_IRQHandler+0xba4>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8165 	beq.w	8008248 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f86:	e15f      	b.n	8008248 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2202      	movs	r2, #2
 8007f92:	409a      	lsls	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80c5 	beq.w	8008128 <HAL_DMA_IRQHandler+0xd58>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80bf 	beq.w	8008128 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	409a      	lsls	r2, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d018      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 813a 	beq.w	800824c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fe0:	e134      	b.n	800824c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8130 	beq.w	800824c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ff4:	e12a      	b.n	800824c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 8089 	bne.w	8008114 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2b      	ldr	r2, [pc, #172]	@ (80080b4 <HAL_DMA_IRQHandler+0xce4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d04a      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a29      	ldr	r2, [pc, #164]	@ (80080b8 <HAL_DMA_IRQHandler+0xce8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d045      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a28      	ldr	r2, [pc, #160]	@ (80080bc <HAL_DMA_IRQHandler+0xcec>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d040      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a26      	ldr	r2, [pc, #152]	@ (80080c0 <HAL_DMA_IRQHandler+0xcf0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d03b      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a25      	ldr	r2, [pc, #148]	@ (80080c4 <HAL_DMA_IRQHandler+0xcf4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d036      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a23      	ldr	r2, [pc, #140]	@ (80080c8 <HAL_DMA_IRQHandler+0xcf8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d031      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a22      	ldr	r2, [pc, #136]	@ (80080cc <HAL_DMA_IRQHandler+0xcfc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d02c      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a20      	ldr	r2, [pc, #128]	@ (80080d0 <HAL_DMA_IRQHandler+0xd00>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d027      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1f      	ldr	r2, [pc, #124]	@ (80080d4 <HAL_DMA_IRQHandler+0xd04>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d022      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <HAL_DMA_IRQHandler+0xd08>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d01d      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <HAL_DMA_IRQHandler+0xd0c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d018      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1a      	ldr	r2, [pc, #104]	@ (80080e0 <HAL_DMA_IRQHandler+0xd10>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a19      	ldr	r2, [pc, #100]	@ (80080e4 <HAL_DMA_IRQHandler+0xd14>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00e      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a17      	ldr	r2, [pc, #92]	@ (80080e8 <HAL_DMA_IRQHandler+0xd18>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a16      	ldr	r2, [pc, #88]	@ (80080ec <HAL_DMA_IRQHandler+0xd1c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_DMA_IRQHandler+0xcd2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a14      	ldr	r2, [pc, #80]	@ (80080f0 <HAL_DMA_IRQHandler+0xd20>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d128      	bne.n	80080f4 <HAL_DMA_IRQHandler+0xd24>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0214 	bic.w	r2, r2, #20
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e027      	b.n	8008104 <HAL_DMA_IRQHandler+0xd34>
 80080b4:	40020010 	.word	0x40020010
 80080b8:	40020028 	.word	0x40020028
 80080bc:	40020040 	.word	0x40020040
 80080c0:	40020058 	.word	0x40020058
 80080c4:	40020070 	.word	0x40020070
 80080c8:	40020088 	.word	0x40020088
 80080cc:	400200a0 	.word	0x400200a0
 80080d0:	400200b8 	.word	0x400200b8
 80080d4:	40020410 	.word	0x40020410
 80080d8:	40020428 	.word	0x40020428
 80080dc:	40020440 	.word	0x40020440
 80080e0:	40020458 	.word	0x40020458
 80080e4:	40020470 	.word	0x40020470
 80080e8:	40020488 	.word	0x40020488
 80080ec:	400204a0 	.word	0x400204a0
 80080f0:	400204b8 	.word	0x400204b8
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 020a 	bic.w	r2, r2, #10
 8008102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8097 	beq.w	800824c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008126:	e091      	b.n	800824c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2208      	movs	r2, #8
 8008132:	409a      	lsls	r2, r3
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	4013      	ands	r3, r2
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8088 	beq.w	800824e <HAL_DMA_IRQHandler+0xe7e>
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8082 	beq.w	800824e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a41      	ldr	r2, [pc, #260]	@ (8008254 <HAL_DMA_IRQHandler+0xe84>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d04a      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a3f      	ldr	r2, [pc, #252]	@ (8008258 <HAL_DMA_IRQHandler+0xe88>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d045      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3e      	ldr	r2, [pc, #248]	@ (800825c <HAL_DMA_IRQHandler+0xe8c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d040      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a3c      	ldr	r2, [pc, #240]	@ (8008260 <HAL_DMA_IRQHandler+0xe90>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d03b      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a3b      	ldr	r2, [pc, #236]	@ (8008264 <HAL_DMA_IRQHandler+0xe94>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d036      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a39      	ldr	r2, [pc, #228]	@ (8008268 <HAL_DMA_IRQHandler+0xe98>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d031      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a38      	ldr	r2, [pc, #224]	@ (800826c <HAL_DMA_IRQHandler+0xe9c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d02c      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a36      	ldr	r2, [pc, #216]	@ (8008270 <HAL_DMA_IRQHandler+0xea0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d027      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a35      	ldr	r2, [pc, #212]	@ (8008274 <HAL_DMA_IRQHandler+0xea4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d022      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a33      	ldr	r2, [pc, #204]	@ (8008278 <HAL_DMA_IRQHandler+0xea8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d01d      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a32      	ldr	r2, [pc, #200]	@ (800827c <HAL_DMA_IRQHandler+0xeac>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d018      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a30      	ldr	r2, [pc, #192]	@ (8008280 <HAL_DMA_IRQHandler+0xeb0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008284 <HAL_DMA_IRQHandler+0xeb4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00e      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008288 <HAL_DMA_IRQHandler+0xeb8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d009      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a2c      	ldr	r2, [pc, #176]	@ (800828c <HAL_DMA_IRQHandler+0xebc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d004      	beq.n	80081ea <HAL_DMA_IRQHandler+0xe1a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008290 <HAL_DMA_IRQHandler+0xec0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d108      	bne.n	80081fc <HAL_DMA_IRQHandler+0xe2c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 021c 	bic.w	r2, r2, #28
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e007      	b.n	800820c <HAL_DMA_IRQHandler+0xe3c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 020e 	bic.w	r2, r2, #14
 800820a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2201      	movs	r2, #1
 8008216:	409a      	lsls	r2, r3
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
 8008242:	e004      	b.n	800824e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800824c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800824e:	3728      	adds	r7, #40	@ 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40020010 	.word	0x40020010
 8008258:	40020028 	.word	0x40020028
 800825c:	40020040 	.word	0x40020040
 8008260:	40020058 	.word	0x40020058
 8008264:	40020070 	.word	0x40020070
 8008268:	40020088 	.word	0x40020088
 800826c:	400200a0 	.word	0x400200a0
 8008270:	400200b8 	.word	0x400200b8
 8008274:	40020410 	.word	0x40020410
 8008278:	40020428 	.word	0x40020428
 800827c:	40020440 	.word	0x40020440
 8008280:	40020458 	.word	0x40020458
 8008284:	40020470 	.word	0x40020470
 8008288:	40020488 	.word	0x40020488
 800828c:	400204a0 	.word	0x400204a0
 8008290:	400204b8 	.word	0x400204b8

08008294 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a7f      	ldr	r2, [pc, #508]	@ (80084b0 <DMA_SetConfig+0x21c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d072      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a7d      	ldr	r2, [pc, #500]	@ (80084b4 <DMA_SetConfig+0x220>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d06d      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a7c      	ldr	r2, [pc, #496]	@ (80084b8 <DMA_SetConfig+0x224>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d068      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a7a      	ldr	r2, [pc, #488]	@ (80084bc <DMA_SetConfig+0x228>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d063      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a79      	ldr	r2, [pc, #484]	@ (80084c0 <DMA_SetConfig+0x22c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d05e      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a77      	ldr	r2, [pc, #476]	@ (80084c4 <DMA_SetConfig+0x230>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d059      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a76      	ldr	r2, [pc, #472]	@ (80084c8 <DMA_SetConfig+0x234>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d054      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a74      	ldr	r2, [pc, #464]	@ (80084cc <DMA_SetConfig+0x238>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d04f      	beq.n	800839e <DMA_SetConfig+0x10a>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a73      	ldr	r2, [pc, #460]	@ (80084d0 <DMA_SetConfig+0x23c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d04a      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a71      	ldr	r2, [pc, #452]	@ (80084d4 <DMA_SetConfig+0x240>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d045      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a70      	ldr	r2, [pc, #448]	@ (80084d8 <DMA_SetConfig+0x244>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d040      	beq.n	800839e <DMA_SetConfig+0x10a>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a6e      	ldr	r2, [pc, #440]	@ (80084dc <DMA_SetConfig+0x248>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d03b      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a6d      	ldr	r2, [pc, #436]	@ (80084e0 <DMA_SetConfig+0x24c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d036      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a6b      	ldr	r2, [pc, #428]	@ (80084e4 <DMA_SetConfig+0x250>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d031      	beq.n	800839e <DMA_SetConfig+0x10a>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a6a      	ldr	r2, [pc, #424]	@ (80084e8 <DMA_SetConfig+0x254>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d02c      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a68      	ldr	r2, [pc, #416]	@ (80084ec <DMA_SetConfig+0x258>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d027      	beq.n	800839e <DMA_SetConfig+0x10a>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a67      	ldr	r2, [pc, #412]	@ (80084f0 <DMA_SetConfig+0x25c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a65      	ldr	r2, [pc, #404]	@ (80084f4 <DMA_SetConfig+0x260>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01d      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a64      	ldr	r2, [pc, #400]	@ (80084f8 <DMA_SetConfig+0x264>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <DMA_SetConfig+0x10a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a62      	ldr	r2, [pc, #392]	@ (80084fc <DMA_SetConfig+0x268>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a61      	ldr	r2, [pc, #388]	@ (8008500 <DMA_SetConfig+0x26c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a5f      	ldr	r2, [pc, #380]	@ (8008504 <DMA_SetConfig+0x270>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <DMA_SetConfig+0x10a>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a5e      	ldr	r2, [pc, #376]	@ (8008508 <DMA_SetConfig+0x274>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <DMA_SetConfig+0x10a>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a5c      	ldr	r2, [pc, #368]	@ (800850c <DMA_SetConfig+0x278>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d101      	bne.n	80083a2 <DMA_SetConfig+0x10e>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <DMA_SetConfig+0x110>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00d      	beq.n	80083c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80083b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80083c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a39      	ldr	r2, [pc, #228]	@ (80084b0 <DMA_SetConfig+0x21c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d04a      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a38      	ldr	r2, [pc, #224]	@ (80084b4 <DMA_SetConfig+0x220>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d045      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a36      	ldr	r2, [pc, #216]	@ (80084b8 <DMA_SetConfig+0x224>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d040      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a35      	ldr	r2, [pc, #212]	@ (80084bc <DMA_SetConfig+0x228>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d03b      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a33      	ldr	r2, [pc, #204]	@ (80084c0 <DMA_SetConfig+0x22c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d036      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a32      	ldr	r2, [pc, #200]	@ (80084c4 <DMA_SetConfig+0x230>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d031      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a30      	ldr	r2, [pc, #192]	@ (80084c8 <DMA_SetConfig+0x234>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d02c      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2f      	ldr	r2, [pc, #188]	@ (80084cc <DMA_SetConfig+0x238>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d027      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2d      	ldr	r2, [pc, #180]	@ (80084d0 <DMA_SetConfig+0x23c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d022      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2c      	ldr	r2, [pc, #176]	@ (80084d4 <DMA_SetConfig+0x240>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d01d      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a2a      	ldr	r2, [pc, #168]	@ (80084d8 <DMA_SetConfig+0x244>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d018      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a29      	ldr	r2, [pc, #164]	@ (80084dc <DMA_SetConfig+0x248>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d013      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a27      	ldr	r2, [pc, #156]	@ (80084e0 <DMA_SetConfig+0x24c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00e      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a26      	ldr	r2, [pc, #152]	@ (80084e4 <DMA_SetConfig+0x250>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d009      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a24      	ldr	r2, [pc, #144]	@ (80084e8 <DMA_SetConfig+0x254>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <DMA_SetConfig+0x1d0>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a23      	ldr	r2, [pc, #140]	@ (80084ec <DMA_SetConfig+0x258>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d101      	bne.n	8008468 <DMA_SetConfig+0x1d4>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <DMA_SetConfig+0x1d6>
 8008468:	2300      	movs	r3, #0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d059      	beq.n	8008522 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008472:	f003 031f 	and.w	r3, r3, #31
 8008476:	223f      	movs	r2, #63	@ 0x3f
 8008478:	409a      	lsls	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800848c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	2b40      	cmp	r3, #64	@ 0x40
 800849c:	d138      	bne.n	8008510 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084ae:	e0ae      	b.n	800860e <DMA_SetConfig+0x37a>
 80084b0:	40020010 	.word	0x40020010
 80084b4:	40020028 	.word	0x40020028
 80084b8:	40020040 	.word	0x40020040
 80084bc:	40020058 	.word	0x40020058
 80084c0:	40020070 	.word	0x40020070
 80084c4:	40020088 	.word	0x40020088
 80084c8:	400200a0 	.word	0x400200a0
 80084cc:	400200b8 	.word	0x400200b8
 80084d0:	40020410 	.word	0x40020410
 80084d4:	40020428 	.word	0x40020428
 80084d8:	40020440 	.word	0x40020440
 80084dc:	40020458 	.word	0x40020458
 80084e0:	40020470 	.word	0x40020470
 80084e4:	40020488 	.word	0x40020488
 80084e8:	400204a0 	.word	0x400204a0
 80084ec:	400204b8 	.word	0x400204b8
 80084f0:	58025408 	.word	0x58025408
 80084f4:	5802541c 	.word	0x5802541c
 80084f8:	58025430 	.word	0x58025430
 80084fc:	58025444 	.word	0x58025444
 8008500:	58025458 	.word	0x58025458
 8008504:	5802546c 	.word	0x5802546c
 8008508:	58025480 	.word	0x58025480
 800850c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]
}
 8008520:	e075      	b.n	800860e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3d      	ldr	r2, [pc, #244]	@ (800861c <DMA_SetConfig+0x388>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d04a      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a3b      	ldr	r2, [pc, #236]	@ (8008620 <DMA_SetConfig+0x38c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d045      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a3a      	ldr	r2, [pc, #232]	@ (8008624 <DMA_SetConfig+0x390>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d040      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a38      	ldr	r2, [pc, #224]	@ (8008628 <DMA_SetConfig+0x394>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d03b      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a37      	ldr	r2, [pc, #220]	@ (800862c <DMA_SetConfig+0x398>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d036      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a35      	ldr	r2, [pc, #212]	@ (8008630 <DMA_SetConfig+0x39c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d031      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a34      	ldr	r2, [pc, #208]	@ (8008634 <DMA_SetConfig+0x3a0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d02c      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a32      	ldr	r2, [pc, #200]	@ (8008638 <DMA_SetConfig+0x3a4>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d027      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a31      	ldr	r2, [pc, #196]	@ (800863c <DMA_SetConfig+0x3a8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d022      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a2f      	ldr	r2, [pc, #188]	@ (8008640 <DMA_SetConfig+0x3ac>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01d      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a2e      	ldr	r2, [pc, #184]	@ (8008644 <DMA_SetConfig+0x3b0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d018      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a2c      	ldr	r2, [pc, #176]	@ (8008648 <DMA_SetConfig+0x3b4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a2b      	ldr	r2, [pc, #172]	@ (800864c <DMA_SetConfig+0x3b8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a29      	ldr	r2, [pc, #164]	@ (8008650 <DMA_SetConfig+0x3bc>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a28      	ldr	r2, [pc, #160]	@ (8008654 <DMA_SetConfig+0x3c0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <DMA_SetConfig+0x32e>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a26      	ldr	r2, [pc, #152]	@ (8008658 <DMA_SetConfig+0x3c4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d101      	bne.n	80085c6 <DMA_SetConfig+0x332>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <DMA_SetConfig+0x334>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d020      	beq.n	800860e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d0:	f003 031f 	and.w	r3, r3, #31
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d108      	bne.n	80085fe <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	60da      	str	r2, [r3, #12]
}
 80085fc:	e007      	b.n	800860e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	48022c08 	.word	0x48022c08
 8008620:	48022c1c 	.word	0x48022c1c
 8008624:	48022c30 	.word	0x48022c30
 8008628:	48022c44 	.word	0x48022c44
 800862c:	48022c58 	.word	0x48022c58
 8008630:	48022c6c 	.word	0x48022c6c
 8008634:	48022c80 	.word	0x48022c80
 8008638:	48022c94 	.word	0x48022c94
 800863c:	58025408 	.word	0x58025408
 8008640:	5802541c 	.word	0x5802541c
 8008644:	58025430 	.word	0x58025430
 8008648:	58025444 	.word	0x58025444
 800864c:	58025458 	.word	0x58025458
 8008650:	5802546c 	.word	0x5802546c
 8008654:	58025480 	.word	0x58025480
 8008658:	58025494 	.word	0x58025494

0800865c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a42      	ldr	r2, [pc, #264]	@ (8008774 <DMA_CalcBaseAndBitshift+0x118>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d04a      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a41      	ldr	r2, [pc, #260]	@ (8008778 <DMA_CalcBaseAndBitshift+0x11c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d045      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a3f      	ldr	r2, [pc, #252]	@ (800877c <DMA_CalcBaseAndBitshift+0x120>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d040      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a3e      	ldr	r2, [pc, #248]	@ (8008780 <DMA_CalcBaseAndBitshift+0x124>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d03b      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a3c      	ldr	r2, [pc, #240]	@ (8008784 <DMA_CalcBaseAndBitshift+0x128>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d036      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a3b      	ldr	r2, [pc, #236]	@ (8008788 <DMA_CalcBaseAndBitshift+0x12c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d031      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a39      	ldr	r2, [pc, #228]	@ (800878c <DMA_CalcBaseAndBitshift+0x130>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d02c      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a38      	ldr	r2, [pc, #224]	@ (8008790 <DMA_CalcBaseAndBitshift+0x134>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d027      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a36      	ldr	r2, [pc, #216]	@ (8008794 <DMA_CalcBaseAndBitshift+0x138>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a35      	ldr	r2, [pc, #212]	@ (8008798 <DMA_CalcBaseAndBitshift+0x13c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d01d      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a33      	ldr	r2, [pc, #204]	@ (800879c <DMA_CalcBaseAndBitshift+0x140>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a32      	ldr	r2, [pc, #200]	@ (80087a0 <DMA_CalcBaseAndBitshift+0x144>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a30      	ldr	r2, [pc, #192]	@ (80087a4 <DMA_CalcBaseAndBitshift+0x148>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2f      	ldr	r2, [pc, #188]	@ (80087a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	@ (80087ac <DMA_CalcBaseAndBitshift+0x150>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <DMA_CalcBaseAndBitshift+0xa8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2c      	ldr	r2, [pc, #176]	@ (80087b0 <DMA_CalcBaseAndBitshift+0x154>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d101      	bne.n	8008708 <DMA_CalcBaseAndBitshift+0xac>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <DMA_CalcBaseAndBitshift+0xae>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d024      	beq.n	8008758 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	3b10      	subs	r3, #16
 8008716:	4a27      	ldr	r2, [pc, #156]	@ (80087b4 <DMA_CalcBaseAndBitshift+0x158>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	091b      	lsrs	r3, r3, #4
 800871e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	4a24      	ldr	r2, [pc, #144]	@ (80087b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008728:	5cd3      	ldrb	r3, [r2, r3]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d908      	bls.n	8008748 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	4b1f      	ldr	r3, [pc, #124]	@ (80087bc <DMA_CalcBaseAndBitshift+0x160>)
 800873e:	4013      	ands	r3, r2
 8008740:	1d1a      	adds	r2, r3, #4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	659a      	str	r2, [r3, #88]	@ 0x58
 8008746:	e00d      	b.n	8008764 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	4b1b      	ldr	r3, [pc, #108]	@ (80087bc <DMA_CalcBaseAndBitshift+0x160>)
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6593      	str	r3, [r2, #88]	@ 0x58
 8008756:	e005      	b.n	8008764 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	40020010 	.word	0x40020010
 8008778:	40020028 	.word	0x40020028
 800877c:	40020040 	.word	0x40020040
 8008780:	40020058 	.word	0x40020058
 8008784:	40020070 	.word	0x40020070
 8008788:	40020088 	.word	0x40020088
 800878c:	400200a0 	.word	0x400200a0
 8008790:	400200b8 	.word	0x400200b8
 8008794:	40020410 	.word	0x40020410
 8008798:	40020428 	.word	0x40020428
 800879c:	40020440 	.word	0x40020440
 80087a0:	40020458 	.word	0x40020458
 80087a4:	40020470 	.word	0x40020470
 80087a8:	40020488 	.word	0x40020488
 80087ac:	400204a0 	.word	0x400204a0
 80087b0:	400204b8 	.word	0x400204b8
 80087b4:	aaaaaaab 	.word	0xaaaaaaab
 80087b8:	08018c30 	.word	0x08018c30
 80087bc:	fffffc00 	.word	0xfffffc00

080087c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d120      	bne.n	8008816 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d858      	bhi.n	800888e <DMA_CheckFifoParam+0xce>
 80087dc:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <DMA_CheckFifoParam+0x24>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	08008807 	.word	0x08008807
 80087ec:	080087f5 	.word	0x080087f5
 80087f0:	0800888f 	.word	0x0800888f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d048      	beq.n	8008892 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008804:	e045      	b.n	8008892 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800880e:	d142      	bne.n	8008896 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008814:	e03f      	b.n	8008896 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800881e:	d123      	bne.n	8008868 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008824:	2b03      	cmp	r3, #3
 8008826:	d838      	bhi.n	800889a <DMA_CheckFifoParam+0xda>
 8008828:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <DMA_CheckFifoParam+0x70>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008841 	.word	0x08008841
 8008834:	08008847 	.word	0x08008847
 8008838:	08008841 	.word	0x08008841
 800883c:	08008859 	.word	0x08008859
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
        break;
 8008844:	e030      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d025      	beq.n	800889e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008856:	e022      	b.n	800889e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008860:	d11f      	bne.n	80088a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008866:	e01c      	b.n	80088a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886c:	2b02      	cmp	r3, #2
 800886e:	d902      	bls.n	8008876 <DMA_CheckFifoParam+0xb6>
 8008870:	2b03      	cmp	r3, #3
 8008872:	d003      	beq.n	800887c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008874:	e018      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
        break;
 800887a:	e015      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	73fb      	strb	r3, [r7, #15]
    break;
 800888c:	e00b      	b.n	80088a6 <DMA_CheckFifoParam+0xe6>
        break;
 800888e:	bf00      	nop
 8008890:	e00a      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        break;
 8008892:	bf00      	nop
 8008894:	e008      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        break;
 8008896:	bf00      	nop
 8008898:	e006      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        break;
 800889a:	bf00      	nop
 800889c:	e004      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        break;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
        break;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
    break;
 80088a6:	bf00      	nop
    }
  }

  return status;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a38      	ldr	r2, [pc, #224]	@ (80089ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d022      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a36      	ldr	r2, [pc, #216]	@ (80089b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01d      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a35      	ldr	r2, [pc, #212]	@ (80089b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d018      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a33      	ldr	r2, [pc, #204]	@ (80089b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d013      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a32      	ldr	r2, [pc, #200]	@ (80089bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00e      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a30      	ldr	r2, [pc, #192]	@ (80089c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d009      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a2f      	ldr	r2, [pc, #188]	@ (80089c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d004      	beq.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a2d      	ldr	r2, [pc, #180]	@ (80089c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d101      	bne.n	800891a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800891a:	2300      	movs	r3, #0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01a      	beq.n	8008956 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	3b08      	subs	r3, #8
 8008928:	4a28      	ldr	r2, [pc, #160]	@ (80089cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4b26      	ldr	r3, [pc, #152]	@ (80089d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a24      	ldr	r2, [pc, #144]	@ (80089d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008944:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2201      	movs	r2, #1
 800894e:	409a      	lsls	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008954:	e024      	b.n	80089a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	3b10      	subs	r3, #16
 800895e:	4a1e      	ldr	r2, [pc, #120]	@ (80089d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008960:	fba2 2303 	umull	r2, r3, r2, r3
 8008964:	091b      	lsrs	r3, r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4a1c      	ldr	r2, [pc, #112]	@ (80089dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d806      	bhi.n	800897e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4a1b      	ldr	r2, [pc, #108]	@ (80089e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d902      	bls.n	800897e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3308      	adds	r3, #8
 800897c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4b18      	ldr	r3, [pc, #96]	@ (80089e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a16      	ldr	r2, [pc, #88]	@ (80089e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008990:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 031f 	and.w	r3, r3, #31
 8008998:	2201      	movs	r2, #1
 800899a:	409a      	lsls	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	58025408 	.word	0x58025408
 80089b0:	5802541c 	.word	0x5802541c
 80089b4:	58025430 	.word	0x58025430
 80089b8:	58025444 	.word	0x58025444
 80089bc:	58025458 	.word	0x58025458
 80089c0:	5802546c 	.word	0x5802546c
 80089c4:	58025480 	.word	0x58025480
 80089c8:	58025494 	.word	0x58025494
 80089cc:	cccccccd 	.word	0xcccccccd
 80089d0:	16009600 	.word	0x16009600
 80089d4:	58025880 	.word	0x58025880
 80089d8:	aaaaaaab 	.word	0xaaaaaaab
 80089dc:	400204b8 	.word	0x400204b8
 80089e0:	4002040f 	.word	0x4002040f
 80089e4:	10008200 	.word	0x10008200
 80089e8:	40020880 	.word	0x40020880

080089ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d04a      	beq.n	8008a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d847      	bhi.n	8008a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a25      	ldr	r2, [pc, #148]	@ (8008aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d022      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a24      	ldr	r2, [pc, #144]	@ (8008aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d01d      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a22      	ldr	r2, [pc, #136]	@ (8008aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d018      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a21      	ldr	r2, [pc, #132]	@ (8008ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d013      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1f      	ldr	r2, [pc, #124]	@ (8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00e      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d009      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	@ (8008abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d101      	bne.n	8008a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4b17      	ldr	r3, [pc, #92]	@ (8008ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a15      	ldr	r2, [pc, #84]	@ (8008ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008a74:	671a      	str	r2, [r3, #112]	@ 0x70
 8008a76:	e009      	b.n	8008a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4b14      	ldr	r3, [pc, #80]	@ (8008acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	461a      	mov	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a11      	ldr	r2, [pc, #68]	@ (8008ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008a8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2201      	movs	r2, #1
 8008a92:	409a      	lsls	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	58025408 	.word	0x58025408
 8008aa8:	5802541c 	.word	0x5802541c
 8008aac:	58025430 	.word	0x58025430
 8008ab0:	58025444 	.word	0x58025444
 8008ab4:	58025458 	.word	0x58025458
 8008ab8:	5802546c 	.word	0x5802546c
 8008abc:	58025480 	.word	0x58025480
 8008ac0:	58025494 	.word	0x58025494
 8008ac4:	1600963f 	.word	0x1600963f
 8008ac8:	58025940 	.word	0x58025940
 8008acc:	1000823f 	.word	0x1000823f
 8008ad0:	40020940 	.word	0x40020940

08008ad4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b098      	sub	sp, #96	@ 0x60
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008adc:	4a84      	ldr	r2, [pc, #528]	@ (8008cf0 <HAL_FDCAN_Init+0x21c>)
 8008ade:	f107 030c 	add.w	r3, r7, #12
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	224c      	movs	r2, #76	@ 0x4c
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00e f961 	bl	8016dae <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e1c6      	b.n	8008e84 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a7e      	ldr	r2, [pc, #504]	@ (8008cf4 <HAL_FDCAN_Init+0x220>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d106      	bne.n	8008b0e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fb f808 	bl	8003b38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0210 	bic.w	r2, r2, #16
 8008b36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b38:	f7fc ff5a 	bl	80059f0 <HAL_GetTick>
 8008b3c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008b3e:	e014      	b.n	8008b6a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008b40:	f7fc ff56 	bl	80059f0 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b0a      	cmp	r3, #10
 8008b4c:	d90d      	bls.n	8008b6a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b54:	f043 0201 	orr.w	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e18c      	b.n	8008e84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d0e3      	beq.n	8008b40 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b88:	f7fc ff32 	bl	80059f0 <HAL_GetTick>
 8008b8c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008b8e:	e014      	b.n	8008bba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008b90:	f7fc ff2e 	bl	80059f0 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b0a      	cmp	r3, #10
 8008b9c:	d90d      	bls.n	8008bba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ba4:	f043 0201 	orr.w	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e164      	b.n	8008e84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0e3      	beq.n	8008b90 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0202 	orr.w	r2, r2, #2
 8008bd6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7c1b      	ldrb	r3, [r3, #16]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d108      	bne.n	8008bf2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bee:	619a      	str	r2, [r3, #24]
 8008bf0:	e007      	b.n	8008c02 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699a      	ldr	r2, [r3, #24]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c00:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7c5b      	ldrb	r3, [r3, #17]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d108      	bne.n	8008c1c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699a      	ldr	r2, [r3, #24]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c18:	619a      	str	r2, [r3, #24]
 8008c1a:	e007      	b.n	8008c2c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7c9b      	ldrb	r3, [r3, #18]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d108      	bne.n	8008c46 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c42:	619a      	str	r2, [r3, #24]
 8008c44:	e007      	b.n	8008c56 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c54:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008c7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691a      	ldr	r2, [r3, #16]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0210 	bic.w	r2, r2, #16
 8008c8a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d108      	bne.n	8008ca6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f042 0204 	orr.w	r2, r2, #4
 8008ca2:	619a      	str	r2, [r3, #24]
 8008ca4:	e030      	b.n	8008d08 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d02c      	beq.n	8008d08 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d020      	beq.n	8008cf8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008cc4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 0210 	orr.w	r2, r2, #16
 8008cd4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d114      	bne.n	8008d08 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f042 0220 	orr.w	r2, r2, #32
 8008cec:	619a      	str	r2, [r3, #24]
 8008cee:	e00b      	b.n	8008d08 <HAL_FDCAN_Init+0x234>
 8008cf0:	08018b8c 	.word	0x08018b8c
 8008cf4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0220 	orr.w	r2, r2, #32
 8008d06:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008d18:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008d20:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008d30:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008d32:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d3c:	d115      	bne.n	8008d6a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008d4c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	3b01      	subs	r3, #1
 8008d54:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008d56:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008d66:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008d68:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d90:	4413      	add	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d011      	beq.n	8008dba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008d9e:	f023 0107 	bic.w	r1, r3, #7
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	3360      	adds	r3, #96	@ 0x60
 8008daa:	443b      	add	r3, r7
 8008dac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d011      	beq.n	8008de6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008dca:	f023 0107 	bic.w	r1, r3, #7
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	3360      	adds	r3, #96	@ 0x60
 8008dd6:	443b      	add	r3, r7
 8008dd8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d012      	beq.n	8008e14 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008df6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	3360      	adds	r3, #96	@ 0x60
 8008e02:	443b      	add	r3, r7
 8008e04:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008e08:	011a      	lsls	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d012      	beq.n	8008e42 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e24:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	3360      	adds	r3, #96	@ 0x60
 8008e30:	443b      	add	r3, r7
 8008e32:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008e36:	021a      	lsls	r2, r3, #8
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a11      	ldr	r2, [pc, #68]	@ (8008e8c <HAL_FDCAN_Init+0x3b8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d107      	bne.n	8008e5c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f022 0203 	bic.w	r2, r2, #3
 8008e5a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f80b 	bl	8008e90 <FDCAN_CalcultateRamBlockAddresses>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008e80:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3760      	adds	r7, #96	@ 0x60
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	4000a000 	.word	0x4000a000

08008e90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008ea6:	4ba7      	ldr	r3, [pc, #668]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	0091      	lsls	r1, r2, #2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	041a      	lsls	r2, r3, #16
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008ee6:	4b97      	ldr	r3, [pc, #604]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	0091      	lsls	r1, r2, #2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6812      	ldr	r2, [r2, #0]
 8008ef2:	430b      	orrs	r3, r1
 8008ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f00:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f08:	041a      	lsls	r2, r3, #16
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008f28:	4b86      	ldr	r3, [pc, #536]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	0091      	lsls	r1, r2, #2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	430b      	orrs	r3, r1
 8008f36:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f42:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	041a      	lsls	r2, r3, #16
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008f70:	4b74      	ldr	r3, [pc, #464]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	0091      	lsls	r1, r2, #2
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6812      	ldr	r2, [r2, #0]
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f8a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f92:	041a      	lsls	r2, r3, #16
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008fb8:	4b62      	ldr	r3, [pc, #392]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fba:	4013      	ands	r3, r2
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	0091      	lsls	r1, r2, #2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008fe4:	4b57      	ldr	r3, [pc, #348]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	0091      	lsls	r1, r2, #2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffe:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009006:	041a      	lsls	r2, r3, #16
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	4413      	add	r3, r2
 800901c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009026:	4b47      	ldr	r3, [pc, #284]	@ (8009144 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009028:	4013      	ands	r3, r2
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	0091      	lsls	r1, r2, #2
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	430b      	orrs	r3, r1
 8009034:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009040:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009048:	041a      	lsls	r2, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800905c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009064:	061a      	lsls	r2, r3, #24
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009074:	4b34      	ldr	r3, [pc, #208]	@ (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009076:	4413      	add	r3, r2
 8009078:	009a      	lsls	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	441a      	add	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80090aa:	fb01 f303 	mul.w	r3, r1, r3
 80090ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80090b0:	441a      	add	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80090c8:	441a      	add	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80090da:	fb01 f303 	mul.w	r3, r1, r3
 80090de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80090e0:	441a      	add	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	441a      	add	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800912c:	441a      	add	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913a:	4a04      	ldr	r2, [pc, #16]	@ (800914c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d915      	bls.n	800916c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009140:	e006      	b.n	8009150 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009142:	bf00      	nop
 8009144:	ffff0003 	.word	0xffff0003
 8009148:	10002b00 	.word	0x10002b00
 800914c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009156:	f043 0220 	orr.w	r2, r3, #32
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2203      	movs	r2, #3
 8009164:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e010      	b.n	800918e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	e005      	b.n	8009180 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3304      	adds	r3, #4
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d3f3      	bcc.n	8009174 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop

0800919c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	@ 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80091aa:	4b89      	ldr	r3, [pc, #548]	@ (80093d0 <HAL_GPIO_Init+0x234>)
 80091ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091ae:	e194      	b.n	80094da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	4013      	ands	r3, r2
 80091be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8186 	beq.w	80094d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f003 0303 	and.w	r3, r3, #3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d005      	beq.n	80091e0 <HAL_GPIO_Init+0x44>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d130      	bne.n	8009242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	2203      	movs	r2, #3
 80091ec:	fa02 f303 	lsl.w	r3, r2, r3
 80091f0:	43db      	mvns	r3, r3
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	4013      	ands	r3, r2
 80091f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	4313      	orrs	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009216:	2201      	movs	r2, #1
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	fa02 f303 	lsl.w	r3, r2, r3
 800921e:	43db      	mvns	r3, r3
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	4013      	ands	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	091b      	lsrs	r3, r3, #4
 800922c:	f003 0201 	and.w	r2, r3, #1
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	4313      	orrs	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b03      	cmp	r3, #3
 800924c:	d017      	beq.n	800927e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	2203      	movs	r2, #3
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	43db      	mvns	r3, r3
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	4013      	ands	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	4313      	orrs	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d123      	bne.n	80092d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	08da      	lsrs	r2, r3, #3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	3208      	adds	r2, #8
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f003 0307 	and.w	r3, r3, #7
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	220f      	movs	r2, #15
 80092a2:	fa02 f303 	lsl.w	r3, r2, r3
 80092a6:	43db      	mvns	r3, r3
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	4013      	ands	r3, r2
 80092ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	fa02 f303 	lsl.w	r3, r2, r3
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	08da      	lsrs	r2, r3, #3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3208      	adds	r2, #8
 80092cc:	69b9      	ldr	r1, [r7, #24]
 80092ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	2203      	movs	r2, #3
 80092de:	fa02 f303 	lsl.w	r3, r2, r3
 80092e2:	43db      	mvns	r3, r3
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	4013      	ands	r3, r2
 80092e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f003 0203 	and.w	r2, r3, #3
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	fa02 f303 	lsl.w	r3, r2, r3
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 80e0 	beq.w	80094d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009314:	4b2f      	ldr	r3, [pc, #188]	@ (80093d4 <HAL_GPIO_Init+0x238>)
 8009316:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800931a:	4a2e      	ldr	r2, [pc, #184]	@ (80093d4 <HAL_GPIO_Init+0x238>)
 800931c:	f043 0302 	orr.w	r3, r3, #2
 8009320:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009324:	4b2b      	ldr	r3, [pc, #172]	@ (80093d4 <HAL_GPIO_Init+0x238>)
 8009326:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009332:	4a29      	ldr	r2, [pc, #164]	@ (80093d8 <HAL_GPIO_Init+0x23c>)
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	089b      	lsrs	r3, r3, #2
 8009338:	3302      	adds	r3, #2
 800933a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800933e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	220f      	movs	r2, #15
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43db      	mvns	r3, r3
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	4013      	ands	r3, r2
 8009354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a20      	ldr	r2, [pc, #128]	@ (80093dc <HAL_GPIO_Init+0x240>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d052      	beq.n	8009404 <HAL_GPIO_Init+0x268>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a1f      	ldr	r2, [pc, #124]	@ (80093e0 <HAL_GPIO_Init+0x244>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d031      	beq.n	80093ca <HAL_GPIO_Init+0x22e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a1e      	ldr	r2, [pc, #120]	@ (80093e4 <HAL_GPIO_Init+0x248>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d02b      	beq.n	80093c6 <HAL_GPIO_Init+0x22a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1d      	ldr	r2, [pc, #116]	@ (80093e8 <HAL_GPIO_Init+0x24c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d025      	beq.n	80093c2 <HAL_GPIO_Init+0x226>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1c      	ldr	r2, [pc, #112]	@ (80093ec <HAL_GPIO_Init+0x250>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d01f      	beq.n	80093be <HAL_GPIO_Init+0x222>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a1b      	ldr	r2, [pc, #108]	@ (80093f0 <HAL_GPIO_Init+0x254>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d019      	beq.n	80093ba <HAL_GPIO_Init+0x21e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a1a      	ldr	r2, [pc, #104]	@ (80093f4 <HAL_GPIO_Init+0x258>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d013      	beq.n	80093b6 <HAL_GPIO_Init+0x21a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a19      	ldr	r2, [pc, #100]	@ (80093f8 <HAL_GPIO_Init+0x25c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00d      	beq.n	80093b2 <HAL_GPIO_Init+0x216>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a18      	ldr	r2, [pc, #96]	@ (80093fc <HAL_GPIO_Init+0x260>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <HAL_GPIO_Init+0x212>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a17      	ldr	r2, [pc, #92]	@ (8009400 <HAL_GPIO_Init+0x264>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d101      	bne.n	80093aa <HAL_GPIO_Init+0x20e>
 80093a6:	2309      	movs	r3, #9
 80093a8:	e02d      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093aa:	230a      	movs	r3, #10
 80093ac:	e02b      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093ae:	2308      	movs	r3, #8
 80093b0:	e029      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093b2:	2307      	movs	r3, #7
 80093b4:	e027      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093b6:	2306      	movs	r3, #6
 80093b8:	e025      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093ba:	2305      	movs	r3, #5
 80093bc:	e023      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093be:	2304      	movs	r3, #4
 80093c0:	e021      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093c2:	2303      	movs	r3, #3
 80093c4:	e01f      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e01d      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e01b      	b.n	8009406 <HAL_GPIO_Init+0x26a>
 80093ce:	bf00      	nop
 80093d0:	58000080 	.word	0x58000080
 80093d4:	58024400 	.word	0x58024400
 80093d8:	58000400 	.word	0x58000400
 80093dc:	58020000 	.word	0x58020000
 80093e0:	58020400 	.word	0x58020400
 80093e4:	58020800 	.word	0x58020800
 80093e8:	58020c00 	.word	0x58020c00
 80093ec:	58021000 	.word	0x58021000
 80093f0:	58021400 	.word	0x58021400
 80093f4:	58021800 	.word	0x58021800
 80093f8:	58021c00 	.word	0x58021c00
 80093fc:	58022000 	.word	0x58022000
 8009400:	58022400 	.word	0x58022400
 8009404:	2300      	movs	r3, #0
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	f002 0203 	and.w	r2, r2, #3
 800940c:	0092      	lsls	r2, r2, #2
 800940e:	4093      	lsls	r3, r2
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	4313      	orrs	r3, r2
 8009414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009416:	4938      	ldr	r1, [pc, #224]	@ (80094f8 <HAL_GPIO_Init+0x35c>)
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	089b      	lsrs	r3, r3, #2
 800941c:	3302      	adds	r3, #2
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	43db      	mvns	r3, r3
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	4013      	ands	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800944a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	43db      	mvns	r3, r3
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	4013      	ands	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	43db      	mvns	r3, r3
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	4013      	ands	r3, r2
 800948e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	43db      	mvns	r3, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4013      	ands	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	fa22 f303 	lsr.w	r3, r2, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f47f ae63 	bne.w	80091b0 <HAL_GPIO_Init+0x14>
  }
}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	3724      	adds	r7, #36	@ 0x24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	58000400 	.word	0x58000400

080094fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	807b      	strh	r3, [r7, #2]
 8009508:	4613      	mov	r3, r2
 800950a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800950c:	787b      	ldrb	r3, [r7, #1]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009512:	887a      	ldrh	r2, [r7, #2]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009518:	e003      	b.n	8009522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800951a:	887b      	ldrh	r3, [r7, #2]
 800951c:	041a      	lsls	r2, r3, #16
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	619a      	str	r2, [r3, #24]
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
	...

08009530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e08b      	b.n	800965a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7fa fc5a 	bl	8003e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2224      	movs	r2, #36	@ 0x24
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0201 	bic.w	r2, r2, #1
 8009572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d107      	bne.n	80095aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095a6:	609a      	str	r2, [r3, #8]
 80095a8:	e006      	b.n	80095b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80095b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d108      	bne.n	80095d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ce:	605a      	str	r2, [r3, #4]
 80095d0:	e007      	b.n	80095e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6859      	ldr	r1, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <HAL_I2C_Init+0x134>)
 80095ee:	430b      	orrs	r3, r1
 80095f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691a      	ldr	r2, [r3, #16]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69d9      	ldr	r1, [r3, #28]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0201 	orr.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	02008000 	.word	0x02008000

08009668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b20      	cmp	r3, #32
 800967c:	d138      	bne.n	80096f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009688:	2302      	movs	r3, #2
 800968a:	e032      	b.n	80096f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2224      	movs	r2, #36	@ 0x24
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6819      	ldr	r1, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	e000      	b.n	80096f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096f0:	2302      	movs	r3, #2
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b20      	cmp	r3, #32
 8009712:	d139      	bne.n	8009788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800971e:	2302      	movs	r3, #2
 8009720:	e033      	b.n	800978a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2224      	movs	r2, #36	@ 0x24
 800972e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80097a0:	4b19      	ldr	r3, [pc, #100]	@ (8009808 <HAL_PWREx_ConfigSupply+0x70>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d00a      	beq.n	80097c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80097ac:	4b16      	ldr	r3, [pc, #88]	@ (8009808 <HAL_PWREx_ConfigSupply+0x70>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d001      	beq.n	80097be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e01f      	b.n	80097fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	e01d      	b.n	80097fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80097c2:	4b11      	ldr	r3, [pc, #68]	@ (8009808 <HAL_PWREx_ConfigSupply+0x70>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f023 0207 	bic.w	r2, r3, #7
 80097ca:	490f      	ldr	r1, [pc, #60]	@ (8009808 <HAL_PWREx_ConfigSupply+0x70>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80097d2:	f7fc f90d 	bl	80059f0 <HAL_GetTick>
 80097d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80097d8:	e009      	b.n	80097ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80097da:	f7fc f909 	bl	80059f0 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097e8:	d901      	bls.n	80097ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e007      	b.n	80097fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80097ee:	4b06      	ldr	r3, [pc, #24]	@ (8009808 <HAL_PWREx_ConfigSupply+0x70>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097fa:	d1ee      	bne.n	80097da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	58024800 	.word	0x58024800

0800980c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08c      	sub	sp, #48	@ 0x30
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	f000 bc1f 	b.w	800a05e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80b3 	beq.w	8009994 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800982e:	4b95      	ldr	r3, [pc, #596]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009838:	4b92      	ldr	r3, [pc, #584]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	2b10      	cmp	r3, #16
 8009842:	d007      	beq.n	8009854 <HAL_RCC_OscConfig+0x48>
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	2b18      	cmp	r3, #24
 8009848:	d112      	bne.n	8009870 <HAL_RCC_OscConfig+0x64>
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d10d      	bne.n	8009870 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009854:	4b8b      	ldr	r3, [pc, #556]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8098 	beq.w	8009992 <HAL_RCC_OscConfig+0x186>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	f040 8093 	bne.w	8009992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e3f6      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009878:	d106      	bne.n	8009888 <HAL_RCC_OscConfig+0x7c>
 800987a:	4b82      	ldr	r3, [pc, #520]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a81      	ldr	r2, [pc, #516]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	e058      	b.n	800993a <HAL_RCC_OscConfig+0x12e>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d112      	bne.n	80098b6 <HAL_RCC_OscConfig+0xaa>
 8009890:	4b7c      	ldr	r3, [pc, #496]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a7b      	ldr	r2, [pc, #492]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	4b79      	ldr	r3, [pc, #484]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a78      	ldr	r2, [pc, #480]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	4b76      	ldr	r3, [pc, #472]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a75      	ldr	r2, [pc, #468]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	e041      	b.n	800993a <HAL_RCC_OscConfig+0x12e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098be:	d112      	bne.n	80098e6 <HAL_RCC_OscConfig+0xda>
 80098c0:	4b70      	ldr	r3, [pc, #448]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a6f      	ldr	r2, [pc, #444]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4b6d      	ldr	r3, [pc, #436]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a6c      	ldr	r2, [pc, #432]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a69      	ldr	r2, [pc, #420]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	e029      	b.n	800993a <HAL_RCC_OscConfig+0x12e>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80098ee:	d112      	bne.n	8009916 <HAL_RCC_OscConfig+0x10a>
 80098f0:	4b64      	ldr	r3, [pc, #400]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a63      	ldr	r2, [pc, #396]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	4b61      	ldr	r3, [pc, #388]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a60      	ldr	r2, [pc, #384]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	4b5e      	ldr	r3, [pc, #376]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a5d      	ldr	r2, [pc, #372]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800990e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e011      	b.n	800993a <HAL_RCC_OscConfig+0x12e>
 8009916:	4b5b      	ldr	r3, [pc, #364]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a5a      	ldr	r2, [pc, #360]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800991c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	4b58      	ldr	r3, [pc, #352]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a57      	ldr	r2, [pc, #348]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4b55      	ldr	r3, [pc, #340]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a54      	ldr	r2, [pc, #336]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009938:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d013      	beq.n	800996a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009942:	f7fc f855 	bl	80059f0 <HAL_GetTick>
 8009946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009948:	e008      	b.n	800995c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800994a:	f7fc f851 	bl	80059f0 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	2b64      	cmp	r3, #100	@ 0x64
 8009956:	d901      	bls.n	800995c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e380      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800995c:	4b49      	ldr	r3, [pc, #292]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0f0      	beq.n	800994a <HAL_RCC_OscConfig+0x13e>
 8009968:	e014      	b.n	8009994 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996a:	f7fc f841 	bl	80059f0 <HAL_GetTick>
 800996e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009970:	e008      	b.n	8009984 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009972:	f7fc f83d 	bl	80059f0 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b64      	cmp	r3, #100	@ 0x64
 800997e:	d901      	bls.n	8009984 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e36c      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009984:	4b3f      	ldr	r3, [pc, #252]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1f0      	bne.n	8009972 <HAL_RCC_OscConfig+0x166>
 8009990:	e000      	b.n	8009994 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009992:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 808c 	beq.w	8009aba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a2:	4b38      	ldr	r3, [pc, #224]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ac:	4b35      	ldr	r3, [pc, #212]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80099ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <HAL_RCC_OscConfig+0x1bc>
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	2b18      	cmp	r3, #24
 80099bc:	d137      	bne.n	8009a2e <HAL_RCC_OscConfig+0x222>
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d132      	bne.n	8009a2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099c8:	4b2e      	ldr	r3, [pc, #184]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_RCC_OscConfig+0x1d4>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e33e      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099e0:	4b28      	ldr	r3, [pc, #160]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f023 0219 	bic.w	r2, r3, #25
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	4925      	ldr	r1, [pc, #148]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f2:	f7fb fffd 	bl	80059f0 <HAL_GetTick>
 80099f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099fa:	f7fb fff9 	bl	80059f0 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e328      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a18:	4b1a      	ldr	r3, [pc, #104]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	061b      	lsls	r3, r3, #24
 8009a26:	4917      	ldr	r1, [pc, #92]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a2c:	e045      	b.n	8009aba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d028      	beq.n	8009a88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a36:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f023 0219 	bic.w	r2, r3, #25
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	4910      	ldr	r1, [pc, #64]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a48:	f7fb ffd2 	bl	80059f0 <HAL_GetTick>
 8009a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a4e:	e008      	b.n	8009a62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a50:	f7fb ffce 	bl	80059f0 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e2fd      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a62:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0f0      	beq.n	8009a50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a6e:	4b05      	ldr	r3, [pc, #20]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	061b      	lsls	r3, r3, #24
 8009a7c:	4901      	ldr	r1, [pc, #4]	@ (8009a84 <HAL_RCC_OscConfig+0x278>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	604b      	str	r3, [r1, #4]
 8009a82:	e01a      	b.n	8009aba <HAL_RCC_OscConfig+0x2ae>
 8009a84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a88:	4b97      	ldr	r3, [pc, #604]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a96      	ldr	r2, [pc, #600]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a94:	f7fb ffac 	bl	80059f0 <HAL_GetTick>
 8009a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a9a:	e008      	b.n	8009aae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a9c:	f7fb ffa8 	bl	80059f0 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d901      	bls.n	8009aae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e2d7      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009aae:	4b8e      	ldr	r3, [pc, #568]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0304 	and.w	r3, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1f0      	bne.n	8009a9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d06a      	beq.n	8009b9c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ac6:	4b88      	ldr	r3, [pc, #544]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ace:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ad0:	4b85      	ldr	r3, [pc, #532]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d007      	beq.n	8009aec <HAL_RCC_OscConfig+0x2e0>
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	2b18      	cmp	r3, #24
 8009ae0:	d11b      	bne.n	8009b1a <HAL_RCC_OscConfig+0x30e>
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d116      	bne.n	8009b1a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aec:	4b7e      	ldr	r3, [pc, #504]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_RCC_OscConfig+0x2f8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	2b80      	cmp	r3, #128	@ 0x80
 8009afe:	d001      	beq.n	8009b04 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e2ac      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b04:	4b78      	ldr	r3, [pc, #480]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	061b      	lsls	r3, r3, #24
 8009b12:	4975      	ldr	r1, [pc, #468]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b18:	e040      	b.n	8009b9c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d023      	beq.n	8009b6a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b22:	4b71      	ldr	r3, [pc, #452]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a70      	ldr	r2, [pc, #448]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2e:	f7fb ff5f 	bl	80059f0 <HAL_GetTick>
 8009b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b36:	f7fb ff5b 	bl	80059f0 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e28a      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b48:	4b67      	ldr	r3, [pc, #412]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b54:	4b64      	ldr	r3, [pc, #400]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	061b      	lsls	r3, r3, #24
 8009b62:	4961      	ldr	r1, [pc, #388]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60cb      	str	r3, [r1, #12]
 8009b68:	e018      	b.n	8009b9c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b76:	f7fb ff3b 	bl	80059f0 <HAL_GetTick>
 8009b7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b7c:	e008      	b.n	8009b90 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b7e:	f7fb ff37 	bl	80059f0 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e266      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b90:	4b55      	ldr	r3, [pc, #340]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f0      	bne.n	8009b7e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0308 	and.w	r3, r3, #8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d036      	beq.n	8009c16 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d019      	beq.n	8009be4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bbc:	f7fb ff18 	bl	80059f0 <HAL_GetTick>
 8009bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bc4:	f7fb ff14 	bl	80059f0 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e243      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bd6:	4b44      	ldr	r3, [pc, #272]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x3b8>
 8009be2:	e018      	b.n	8009c16 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009be4:	4b40      	ldr	r3, [pc, #256]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be8:	4a3f      	ldr	r2, [pc, #252]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf0:	f7fb fefe 	bl	80059f0 <HAL_GetTick>
 8009bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bf6:	e008      	b.n	8009c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bf8:	f7fb fefa 	bl	80059f0 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e229      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c0a:	4b37      	ldr	r3, [pc, #220]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f0      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d036      	beq.n	8009c90 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d019      	beq.n	8009c5e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c36:	f7fb fedb 	bl	80059f0 <HAL_GetTick>
 8009c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c3e:	f7fb fed7 	bl	80059f0 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e206      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c50:	4b25      	ldr	r3, [pc, #148]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <HAL_RCC_OscConfig+0x432>
 8009c5c:	e018      	b.n	8009c90 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c5e:	4b22      	ldr	r3, [pc, #136]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a21      	ldr	r2, [pc, #132]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c6a:	f7fb fec1 	bl	80059f0 <HAL_GetTick>
 8009c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c70:	e008      	b.n	8009c84 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c72:	f7fb febd 	bl	80059f0 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d901      	bls.n	8009c84 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e1ec      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c84:	4b18      	ldr	r3, [pc, #96]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f0      	bne.n	8009c72 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 80af 	beq.w	8009dfc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c9e:	4b13      	ldr	r3, [pc, #76]	@ (8009cec <HAL_RCC_OscConfig+0x4e0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a12      	ldr	r2, [pc, #72]	@ (8009cec <HAL_RCC_OscConfig+0x4e0>)
 8009ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009caa:	f7fb fea1 	bl	80059f0 <HAL_GetTick>
 8009cae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cb0:	e008      	b.n	8009cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cb2:	f7fb fe9d 	bl	80059f0 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b64      	cmp	r3, #100	@ 0x64
 8009cbe:	d901      	bls.n	8009cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e1cc      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cc4:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <HAL_RCC_OscConfig+0x4e0>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0f0      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d10b      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x4e4>
 8009cd8:	4b03      	ldr	r3, [pc, #12]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cdc:	4a02      	ldr	r2, [pc, #8]	@ (8009ce8 <HAL_RCC_OscConfig+0x4dc>)
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ce4:	e05b      	b.n	8009d9e <HAL_RCC_OscConfig+0x592>
 8009ce6:	bf00      	nop
 8009ce8:	58024400 	.word	0x58024400
 8009cec:	58024800 	.word	0x58024800
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d112      	bne.n	8009d1e <HAL_RCC_OscConfig+0x512>
 8009cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfc:	4a9c      	ldr	r2, [pc, #624]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009cfe:	f023 0301 	bic.w	r3, r3, #1
 8009d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d04:	4b9a      	ldr	r3, [pc, #616]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d08:	4a99      	ldr	r2, [pc, #612]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d10:	4b97      	ldr	r3, [pc, #604]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d14:	4a96      	ldr	r2, [pc, #600]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d16:	f023 0304 	bic.w	r3, r3, #4
 8009d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d1c:	e03f      	b.n	8009d9e <HAL_RCC_OscConfig+0x592>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d112      	bne.n	8009d4c <HAL_RCC_OscConfig+0x540>
 8009d26:	4b92      	ldr	r3, [pc, #584]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2a:	4a91      	ldr	r2, [pc, #580]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d2c:	f043 0304 	orr.w	r3, r3, #4
 8009d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d32:	4b8f      	ldr	r3, [pc, #572]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d36:	4a8e      	ldr	r2, [pc, #568]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d3e:	4b8c      	ldr	r3, [pc, #560]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d42:	4a8b      	ldr	r2, [pc, #556]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d44:	f043 0301 	orr.w	r3, r3, #1
 8009d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d4a:	e028      	b.n	8009d9e <HAL_RCC_OscConfig+0x592>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b85      	cmp	r3, #133	@ 0x85
 8009d52:	d112      	bne.n	8009d7a <HAL_RCC_OscConfig+0x56e>
 8009d54:	4b86      	ldr	r3, [pc, #536]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d58:	4a85      	ldr	r2, [pc, #532]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d5a:	f043 0304 	orr.w	r3, r3, #4
 8009d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d60:	4b83      	ldr	r3, [pc, #524]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d64:	4a82      	ldr	r2, [pc, #520]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d6c:	4b80      	ldr	r3, [pc, #512]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d70:	4a7f      	ldr	r2, [pc, #508]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d78:	e011      	b.n	8009d9e <HAL_RCC_OscConfig+0x592>
 8009d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d80:	f023 0301 	bic.w	r3, r3, #1
 8009d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d86:	4b7a      	ldr	r3, [pc, #488]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d8a:	4a79      	ldr	r2, [pc, #484]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d8c:	f023 0304 	bic.w	r3, r3, #4
 8009d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d92:	4b77      	ldr	r3, [pc, #476]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d96:	4a76      	ldr	r2, [pc, #472]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d015      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da6:	f7fb fe23 	bl	80059f0 <HAL_GetTick>
 8009daa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dac:	e00a      	b.n	8009dc4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dae:	f7fb fe1f 	bl	80059f0 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d901      	bls.n	8009dc4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e14c      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0ee      	beq.n	8009dae <HAL_RCC_OscConfig+0x5a2>
 8009dd0:	e014      	b.n	8009dfc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd2:	f7fb fe0d 	bl	80059f0 <HAL_GetTick>
 8009dd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dd8:	e00a      	b.n	8009df0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dda:	f7fb fe09 	bl	80059f0 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d901      	bls.n	8009df0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e136      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009df0:	4b5f      	ldr	r3, [pc, #380]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1ee      	bne.n	8009dda <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 812b 	beq.w	800a05c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e06:	4b5a      	ldr	r3, [pc, #360]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e0e:	2b18      	cmp	r3, #24
 8009e10:	f000 80bb 	beq.w	8009f8a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	f040 8095 	bne.w	8009f48 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e1e:	4b54      	ldr	r3, [pc, #336]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a53      	ldr	r2, [pc, #332]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2a:	f7fb fde1 	bl	80059f0 <HAL_GetTick>
 8009e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e30:	e008      	b.n	8009e44 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e32:	f7fb fddd 	bl	80059f0 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e10c      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e44:	4b4a      	ldr	r3, [pc, #296]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1f0      	bne.n	8009e32 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e50:	4b47      	ldr	r3, [pc, #284]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e54:	4b47      	ldr	r3, [pc, #284]	@ (8009f74 <HAL_RCC_OscConfig+0x768>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009e60:	0112      	lsls	r2, r2, #4
 8009e62:	430a      	orrs	r2, r1
 8009e64:	4942      	ldr	r1, [pc, #264]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	628b      	str	r3, [r1, #40]	@ 0x28
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	025b      	lsls	r3, r3, #9
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e84:	3b01      	subs	r3, #1
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e92:	3b01      	subs	r3, #1
 8009e94:	061b      	lsls	r3, r3, #24
 8009e96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e9a:	4935      	ldr	r1, [pc, #212]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009ea0:	4b33      	ldr	r3, [pc, #204]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea4:	4a32      	ldr	r2, [pc, #200]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009eac:	4b30      	ldr	r3, [pc, #192]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eb0:	4b31      	ldr	r3, [pc, #196]	@ (8009f78 <HAL_RCC_OscConfig+0x76c>)
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009eb8:	00d2      	lsls	r2, r2, #3
 8009eba:	492d      	ldr	r1, [pc, #180]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec4:	f023 020c 	bic.w	r2, r3, #12
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ecc:	4928      	ldr	r1, [pc, #160]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ed2:	4b27      	ldr	r3, [pc, #156]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed6:	f023 0202 	bic.w	r2, r3, #2
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ede:	4924      	ldr	r1, [pc, #144]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee4:	4b22      	ldr	r3, [pc, #136]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee8:	4a21      	ldr	r2, [pc, #132]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009efc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f00:	4a1b      	ldr	r2, [pc, #108]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f08:	4b19      	ldr	r3, [pc, #100]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	4a18      	ldr	r2, [pc, #96]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f14:	4b16      	ldr	r3, [pc, #88]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a15      	ldr	r2, [pc, #84]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f20:	f7fb fd66 	bl	80059f0 <HAL_GetTick>
 8009f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f26:	e008      	b.n	8009f3a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f28:	f7fb fd62 	bl	80059f0 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d901      	bls.n	8009f3a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e091      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0f0      	beq.n	8009f28 <HAL_RCC_OscConfig+0x71c>
 8009f46:	e089      	b.n	800a05c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f48:	4b09      	ldr	r3, [pc, #36]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a08      	ldr	r2, [pc, #32]	@ (8009f70 <HAL_RCC_OscConfig+0x764>)
 8009f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f54:	f7fb fd4c 	bl	80059f0 <HAL_GetTick>
 8009f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f5a:	e00f      	b.n	8009f7c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f5c:	f7fb fd48 	bl	80059f0 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d908      	bls.n	8009f7c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e077      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400
 8009f74:	fffffc0c 	.word	0xfffffc0c
 8009f78:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f7c:	4b3a      	ldr	r3, [pc, #232]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e9      	bne.n	8009f5c <HAL_RCC_OscConfig+0x750>
 8009f88:	e068      	b.n	800a05c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f8a:	4b37      	ldr	r3, [pc, #220]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 8009f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f90:	4b35      	ldr	r3, [pc, #212]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 8009f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f94:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d031      	beq.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f003 0203 	and.w	r2, r3, #3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d12a      	bne.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	091b      	lsrs	r3, r3, #4
 8009fb0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d122      	bne.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d11a      	bne.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	0a5b      	lsrs	r3, r3, #9
 8009fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d111      	bne.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	0c1b      	lsrs	r3, r3, #16
 8009fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d108      	bne.n	800a002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	0e1b      	lsrs	r3, r3, #24
 8009ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ffc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d001      	beq.n	800a006 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e02b      	b.n	800a05e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a006:	4b18      	ldr	r3, [pc, #96]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00a:	08db      	lsrs	r3, r3, #3
 800a00c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a010:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d01f      	beq.n	800a05c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a01c:	4b12      	ldr	r3, [pc, #72]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	4a11      	ldr	r2, [pc, #68]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a028:	f7fb fce2 	bl	80059f0 <HAL_GetTick>
 800a02c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a02e:	bf00      	nop
 800a030:	f7fb fcde 	bl	80059f0 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	4293      	cmp	r3, r2
 800a03a:	d0f9      	beq.n	800a030 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a03c:	4b0a      	ldr	r3, [pc, #40]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a03e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a040:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <HAL_RCC_OscConfig+0x860>)
 800a042:	4013      	ands	r3, r2
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a048:	00d2      	lsls	r2, r2, #3
 800a04a:	4907      	ldr	r1, [pc, #28]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a050:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a054:	4a04      	ldr	r2, [pc, #16]	@ (800a068 <HAL_RCC_OscConfig+0x85c>)
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3730      	adds	r7, #48	@ 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	58024400 	.word	0x58024400
 800a06c:	ffff0007 	.word	0xffff0007

0800a070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e19c      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a084:	4b8a      	ldr	r3, [pc, #552]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d910      	bls.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a092:	4b87      	ldr	r3, [pc, #540]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 020f 	bic.w	r2, r3, #15
 800a09a:	4985      	ldr	r1, [pc, #532]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0a2:	4b83      	ldr	r3, [pc, #524]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d001      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e184      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	4b7b      	ldr	r3, [pc, #492]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d908      	bls.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0d0:	4b78      	ldr	r3, [pc, #480]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	4975      	ldr	r1, [pc, #468]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d010      	beq.n	800a110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	4b70      	ldr	r3, [pc, #448]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d908      	bls.n	800a110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0fe:	4b6d      	ldr	r3, [pc, #436]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	496a      	ldr	r1, [pc, #424]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d010      	beq.n	800a13e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	4b64      	ldr	r3, [pc, #400]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a128:	429a      	cmp	r2, r3
 800a12a:	d908      	bls.n	800a13e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a12c:	4b61      	ldr	r3, [pc, #388]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	495e      	ldr	r1, [pc, #376]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d010      	beq.n	800a16c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69da      	ldr	r2, [r3, #28]
 800a14e:	4b59      	ldr	r3, [pc, #356]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a156:	429a      	cmp	r2, r3
 800a158:	d908      	bls.n	800a16c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a15a:	4b56      	ldr	r3, [pc, #344]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	4953      	ldr	r1, [pc, #332]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d010      	beq.n	800a19a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	4b4d      	ldr	r3, [pc, #308]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	429a      	cmp	r2, r3
 800a186:	d908      	bls.n	800a19a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a188:	4b4a      	ldr	r3, [pc, #296]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	f023 020f 	bic.w	r2, r3, #15
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4947      	ldr	r1, [pc, #284]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a196:	4313      	orrs	r3, r2
 800a198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d055      	beq.n	800a252 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1a6:	4b43      	ldr	r3, [pc, #268]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4940      	ldr	r1, [pc, #256]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d121      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e0f6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d107      	bne.n	800a1e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1d8:	4b36      	ldr	r3, [pc, #216]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d115      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e0ea      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1f0:	4b30      	ldr	r3, [pc, #192]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d109      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0de      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a200:	4b2c      	ldr	r3, [pc, #176]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0d6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a210:	4b28      	ldr	r3, [pc, #160]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f023 0207 	bic.w	r2, r3, #7
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4925      	ldr	r1, [pc, #148]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a222:	f7fb fbe5 	bl	80059f0 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a228:	e00a      	b.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a22a:	f7fb fbe1 	bl	80059f0 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a238:	4293      	cmp	r3, r2
 800a23a:	d901      	bls.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e0be      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a240:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	429a      	cmp	r2, r3
 800a250:	d1eb      	bne.n	800a22a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	4b14      	ldr	r3, [pc, #80]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d208      	bcs.n	800a280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a26e:	4b11      	ldr	r3, [pc, #68]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f023 020f 	bic.w	r2, r3, #15
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	490e      	ldr	r1, [pc, #56]	@ (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a280:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d214      	bcs.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a28e:	4b08      	ldr	r3, [pc, #32]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f023 020f 	bic.w	r2, r3, #15
 800a296:	4906      	ldr	r1, [pc, #24]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a29e:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e086      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
 800a2b0:	52002000 	.word	0x52002000
 800a2b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d208      	bcs.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4939      	ldr	r1, [pc, #228]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	4b34      	ldr	r3, [pc, #208]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d208      	bcs.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a302:	4b31      	ldr	r3, [pc, #196]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	492e      	ldr	r1, [pc, #184]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a310:	4313      	orrs	r3, r2
 800a312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d010      	beq.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	4b28      	ldr	r3, [pc, #160]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d208      	bcs.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a330:	4b25      	ldr	r3, [pc, #148]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	4922      	ldr	r1, [pc, #136]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69da      	ldr	r2, [r3, #28]
 800a352:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d208      	bcs.n	800a370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a35e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	4917      	ldr	r1, [pc, #92]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a370:	f000 f834 	bl	800a3dc <HAL_RCC_GetSysClockFreq>
 800a374:	4602      	mov	r2, r0
 800a376:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	4912      	ldr	r1, [pc, #72]	@ (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a382:	5ccb      	ldrb	r3, [r1, r3]
 800a384:	f003 031f 	and.w	r3, r3, #31
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
 800a38c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a38e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	4a0d      	ldr	r2, [pc, #52]	@ (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a398:	5cd3      	ldrb	r3, [r2, r3]
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d0 <HAL_RCC_ClockConfig+0x360>)
 800a3a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3a8:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d4 <HAL_RCC_ClockConfig+0x364>)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <HAL_RCC_ClockConfig+0x368>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fb fad2 	bl	800595c <HAL_InitTick>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	58024400 	.word	0x58024400
 800a3cc:	08018c20 	.word	0x08018c20
 800a3d0:	240000c4 	.word	0x240000c4
 800a3d4:	240000c0 	.word	0x240000c0
 800a3d8:	240000c8 	.word	0x240000c8

0800a3dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b089      	sub	sp, #36	@ 0x24
 800a3e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3e2:	4bb3      	ldr	r3, [pc, #716]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3ea:	2b18      	cmp	r3, #24
 800a3ec:	f200 8155 	bhi.w	800a69a <HAL_RCC_GetSysClockFreq+0x2be>
 800a3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a45d 	.word	0x0800a45d
 800a3fc:	0800a69b 	.word	0x0800a69b
 800a400:	0800a69b 	.word	0x0800a69b
 800a404:	0800a69b 	.word	0x0800a69b
 800a408:	0800a69b 	.word	0x0800a69b
 800a40c:	0800a69b 	.word	0x0800a69b
 800a410:	0800a69b 	.word	0x0800a69b
 800a414:	0800a69b 	.word	0x0800a69b
 800a418:	0800a483 	.word	0x0800a483
 800a41c:	0800a69b 	.word	0x0800a69b
 800a420:	0800a69b 	.word	0x0800a69b
 800a424:	0800a69b 	.word	0x0800a69b
 800a428:	0800a69b 	.word	0x0800a69b
 800a42c:	0800a69b 	.word	0x0800a69b
 800a430:	0800a69b 	.word	0x0800a69b
 800a434:	0800a69b 	.word	0x0800a69b
 800a438:	0800a489 	.word	0x0800a489
 800a43c:	0800a69b 	.word	0x0800a69b
 800a440:	0800a69b 	.word	0x0800a69b
 800a444:	0800a69b 	.word	0x0800a69b
 800a448:	0800a69b 	.word	0x0800a69b
 800a44c:	0800a69b 	.word	0x0800a69b
 800a450:	0800a69b 	.word	0x0800a69b
 800a454:	0800a69b 	.word	0x0800a69b
 800a458:	0800a48f 	.word	0x0800a48f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a45c:	4b94      	ldr	r3, [pc, #592]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a468:	4b91      	ldr	r3, [pc, #580]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	08db      	lsrs	r3, r3, #3
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	4a90      	ldr	r2, [pc, #576]	@ (800a6b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a474:	fa22 f303 	lsr.w	r3, r2, r3
 800a478:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a47a:	e111      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a47c:	4b8d      	ldr	r3, [pc, #564]	@ (800a6b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a47e:	61bb      	str	r3, [r7, #24]
      break;
 800a480:	e10e      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a482:	4b8d      	ldr	r3, [pc, #564]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a484:	61bb      	str	r3, [r7, #24]
      break;
 800a486:	e10b      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a488:	4b8c      	ldr	r3, [pc, #560]	@ (800a6bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a48a:	61bb      	str	r3, [r7, #24]
      break;
 800a48c:	e108      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a48e:	4b88      	ldr	r3, [pc, #544]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0303 	and.w	r3, r3, #3
 800a496:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a498:	4b85      	ldr	r3, [pc, #532]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49c:	091b      	lsrs	r3, r3, #4
 800a49e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4a4:	4b82      	ldr	r3, [pc, #520]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4ae:	4b80      	ldr	r3, [pc, #512]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b2:	08db      	lsrs	r3, r3, #3
 800a4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	fb02 f303 	mul.w	r3, r2, r3
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 80e1 	beq.w	800a694 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	f000 8083 	beq.w	800a5e0 <HAL_RCC_GetSysClockFreq+0x204>
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	f200 80a1 	bhi.w	800a624 <HAL_RCC_GetSysClockFreq+0x248>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <HAL_RCC_GetSysClockFreq+0x114>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d056      	beq.n	800a59c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4ee:	e099      	b.n	800a624 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f0:	4b6f      	ldr	r3, [pc, #444]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0320 	and.w	r3, r3, #32
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d02d      	beq.n	800a558 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4fc:	4b6c      	ldr	r3, [pc, #432]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	08db      	lsrs	r3, r3, #3
 800a502:	f003 0303 	and.w	r3, r3, #3
 800a506:	4a6b      	ldr	r2, [pc, #428]	@ (800a6b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a508:	fa22 f303 	lsr.w	r3, r2, r3
 800a50c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a526:	4b62      	ldr	r3, [pc, #392]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a536:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a552:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a556:	e087      	b.n	800a668 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a6c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56a:	4b51      	ldr	r3, [pc, #324]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a57e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a59a:	e065      	b.n	800a668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a6c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ae:	4b40      	ldr	r3, [pc, #256]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5de:	e043      	b.n	800a668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a6cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a602:	ed97 6a02 	vldr	s12, [r7, #8]
 800a606:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a622:	e021      	b.n	800a668 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a6c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a636:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a646:	ed97 6a02 	vldr	s12, [r7, #8]
 800a64a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a666:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a668:	4b11      	ldr	r3, [pc, #68]	@ (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66c:	0a5b      	lsrs	r3, r3, #9
 800a66e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a672:	3301      	adds	r3, #1
 800a674:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	ee07 3a90 	vmov	s15, r3
 800a67c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a680:	edd7 6a07 	vldr	s13, [r7, #28]
 800a684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a68c:	ee17 3a90 	vmov	r3, s15
 800a690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a692:	e005      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
      break;
 800a698:	e002      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a69a:	4b07      	ldr	r3, [pc, #28]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a69c:	61bb      	str	r3, [r7, #24]
      break;
 800a69e:	bf00      	nop
  }

  return sysclockfreq;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3724      	adds	r7, #36	@ 0x24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	58024400 	.word	0x58024400
 800a6b4:	03d09000 	.word	0x03d09000
 800a6b8:	003d0900 	.word	0x003d0900
 800a6bc:	016e3600 	.word	0x016e3600
 800a6c0:	46000000 	.word	0x46000000
 800a6c4:	4c742400 	.word	0x4c742400
 800a6c8:	4a742400 	.word	0x4a742400
 800a6cc:	4bb71b00 	.word	0x4bb71b00

0800a6d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a6d6:	f7ff fe81 	bl	800a3dc <HAL_RCC_GetSysClockFreq>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	0a1b      	lsrs	r3, r3, #8
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	490f      	ldr	r1, [pc, #60]	@ (800a724 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6e8:	5ccb      	ldrb	r3, [r1, r3]
 800a6ea:	f003 031f 	and.w	r3, r3, #31
 800a6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a720 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f003 030f 	and.w	r3, r3, #15
 800a6fc:	4a09      	ldr	r2, [pc, #36]	@ (800a724 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6fe:	5cd3      	ldrb	r3, [r2, r3]
 800a700:	f003 031f 	and.w	r3, r3, #31
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	4a07      	ldr	r2, [pc, #28]	@ (800a728 <HAL_RCC_GetHCLKFreq+0x58>)
 800a70c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a70e:	4a07      	ldr	r2, [pc, #28]	@ (800a72c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a714:	4b04      	ldr	r3, [pc, #16]	@ (800a728 <HAL_RCC_GetHCLKFreq+0x58>)
 800a716:	681b      	ldr	r3, [r3, #0]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	58024400 	.word	0x58024400
 800a724:	08018c20 	.word	0x08018c20
 800a728:	240000c4 	.word	0x240000c4
 800a72c:	240000c0 	.word	0x240000c0

0800a730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a734:	f7ff ffcc 	bl	800a6d0 <HAL_RCC_GetHCLKFreq>
 800a738:	4602      	mov	r2, r0
 800a73a:	4b06      	ldr	r3, [pc, #24]	@ (800a754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	091b      	lsrs	r3, r3, #4
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	4904      	ldr	r1, [pc, #16]	@ (800a758 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a746:	5ccb      	ldrb	r3, [r1, r3]
 800a748:	f003 031f 	and.w	r3, r3, #31
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a750:	4618      	mov	r0, r3
 800a752:	bd80      	pop	{r7, pc}
 800a754:	58024400 	.word	0x58024400
 800a758:	08018c20 	.word	0x08018c20

0800a75c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a760:	f7ff ffb6 	bl	800a6d0 <HAL_RCC_GetHCLKFreq>
 800a764:	4602      	mov	r2, r0
 800a766:	4b06      	ldr	r3, [pc, #24]	@ (800a780 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	0a1b      	lsrs	r3, r3, #8
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	4904      	ldr	r1, [pc, #16]	@ (800a784 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a772:	5ccb      	ldrb	r3, [r1, r3]
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	58024400 	.word	0x58024400
 800a784:	08018c20 	.word	0x08018c20

0800a788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a78c:	b0c8      	sub	sp, #288	@ 0x120
 800a78e:	af00      	add	r7, sp, #0
 800a790:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a794:	2300      	movs	r3, #0
 800a796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	ea54 0305 	orrs.w	r3, r4, r5
 800a7b2:	d049      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7be:	d02f      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a7c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7c4:	d828      	bhi.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7ca:	d01a      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7d0:	d822      	bhi.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7da:	d007      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7dc:	e01c      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7de:	4ba7      	ldr	r3, [pc, #668]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e2:	4aa6      	ldr	r2, [pc, #664]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7ea:	e01a      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 fc43 	bl	800c080 <RCCEx_PLL2_Config>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a800:	e00f      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a806:	3328      	adds	r3, #40	@ 0x28
 800a808:	2102      	movs	r1, #2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f001 fcea 	bl	800c1e4 <RCCEx_PLL3_Config>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a816:	e004      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a81e:	e000      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a820:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a82a:	4b94      	ldr	r3, [pc, #592]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a82c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a82e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a838:	4a90      	ldr	r2, [pc, #576]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a83a:	430b      	orrs	r3, r1
 800a83c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a83e:	e003      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a854:	f04f 0900 	mov.w	r9, #0
 800a858:	ea58 0309 	orrs.w	r3, r8, r9
 800a85c:	d047      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a864:	2b04      	cmp	r3, #4
 800a866:	d82a      	bhi.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a868:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a885 	.word	0x0800a885
 800a874:	0800a893 	.word	0x0800a893
 800a878:	0800a8a9 	.word	0x0800a8a9
 800a87c:	0800a8c7 	.word	0x0800a8c7
 800a880:	0800a8c7 	.word	0x0800a8c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a884:	4b7d      	ldr	r3, [pc, #500]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	4a7c      	ldr	r2, [pc, #496]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a88a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a88e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a890:	e01a      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a896:	3308      	adds	r3, #8
 800a898:	2100      	movs	r1, #0
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fbf0 	bl	800c080 <RCCEx_PLL2_Config>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8a6:	e00f      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ac:	3328      	adds	r3, #40	@ 0x28
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f001 fc97 	bl	800c1e4 <RCCEx_PLL3_Config>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8bc:	e004      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8d0:	4b6a      	ldr	r3, [pc, #424]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d4:	f023 0107 	bic.w	r1, r3, #7
 800a8d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	4a67      	ldr	r2, [pc, #412]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8e4:	e003      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a8fa:	f04f 0b00 	mov.w	fp, #0
 800a8fe:	ea5a 030b 	orrs.w	r3, sl, fp
 800a902:	d054      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a90a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a90e:	d036      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a910:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a914:	d82f      	bhi.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a91a:	d032      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a920:	d829      	bhi.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a922:	2bc0      	cmp	r3, #192	@ 0xc0
 800a924:	d02f      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a926:	2bc0      	cmp	r3, #192	@ 0xc0
 800a928:	d825      	bhi.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a92a:	2b80      	cmp	r3, #128	@ 0x80
 800a92c:	d018      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a92e:	2b80      	cmp	r3, #128	@ 0x80
 800a930:	d821      	bhi.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a936:	2b40      	cmp	r3, #64	@ 0x40
 800a938:	d007      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a93a:	e01c      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a93c:	4b4f      	ldr	r3, [pc, #316]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a940:	4a4e      	ldr	r2, [pc, #312]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a948:	e01e      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a94e:	3308      	adds	r3, #8
 800a950:	2100      	movs	r1, #0
 800a952:	4618      	mov	r0, r3
 800a954:	f001 fb94 	bl	800c080 <RCCEx_PLL2_Config>
 800a958:	4603      	mov	r3, r0
 800a95a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a95e:	e013      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a964:	3328      	adds	r3, #40	@ 0x28
 800a966:	2100      	movs	r1, #0
 800a968:	4618      	mov	r0, r3
 800a96a:	f001 fc3b 	bl	800c1e4 <RCCEx_PLL3_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a974:	e008      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a97c:	e004      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a97e:	bf00      	nop
 800a980:	e002      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a982:	bf00      	nop
 800a984:	e000      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a988:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a990:	4b3a      	ldr	r3, [pc, #232]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a994:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99e:	4a37      	ldr	r2, [pc, #220]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9a4:	e003      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a9ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a9c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	d05c      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a9ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a9d8:	d03b      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a9da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a9de:	d834      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a9e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9e4:	d037      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a9e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ea:	d82e      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a9ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9f0:	d033      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9f6:	d828      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a9f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9fc:	d01a      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a9fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa02:	d822      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800aa08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa0c:	d007      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800aa0e:	e01c      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa10:	4b1a      	ldr	r3, [pc, #104]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa14:	4a19      	ldr	r2, [pc, #100]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800aa1c:	e01e      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa22:	3308      	adds	r3, #8
 800aa24:	2100      	movs	r1, #0
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 fb2a 	bl	800c080 <RCCEx_PLL2_Config>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800aa32:	e013      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa38:	3328      	adds	r3, #40	@ 0x28
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 fbd1 	bl	800c1e4 <RCCEx_PLL3_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800aa48:	e008      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa50:	e004      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800aa52:	bf00      	nop
 800aa54:	e002      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800aa56:	bf00      	nop
 800aa58:	e000      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800aa5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10d      	bne.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa68:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800aa6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa72:	4a02      	ldr	r2, [pc, #8]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa78:	e006      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800aa7a:	bf00      	nop
 800aa7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800aa94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	d03a      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aaa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaae:	2b30      	cmp	r3, #48	@ 0x30
 800aab0:	d01f      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800aab2:	2b30      	cmp	r3, #48	@ 0x30
 800aab4:	d819      	bhi.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x362>
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d00c      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d815      	bhi.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x362>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d019      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800aac2:	2b10      	cmp	r3, #16
 800aac4:	d111      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac6:	4bae      	ldr	r3, [pc, #696]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaca:	4aad      	ldr	r2, [pc, #692]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aacc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aad2:	e011      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad8:	3308      	adds	r3, #8
 800aada:	2102      	movs	r1, #2
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 facf 	bl	800c080 <RCCEx_PLL2_Config>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aae8:	e006      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aaf0:	e002      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800aaf2:	bf00      	nop
 800aaf4:	e000      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800aaf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ab00:	4b9f      	ldr	r3, [pc, #636]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ab08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab0e:	4a9c      	ldr	r2, [pc, #624]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab10:	430b      	orrs	r3, r1
 800ab12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab14:	e003      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ab2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	d051      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab48:	d035      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ab4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab4e:	d82e      	bhi.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ab50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab54:	d031      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ab56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab5a:	d828      	bhi.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ab5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab60:	d01a      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ab62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab66:	d822      	bhi.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d003      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ab6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab70:	d007      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ab72:	e01c      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab74:	4b82      	ldr	r3, [pc, #520]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab78:	4a81      	ldr	r2, [pc, #516]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab80:	e01c      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab86:	3308      	adds	r3, #8
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 fa78 	bl	800c080 <RCCEx_PLL2_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab96:	e011      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab9c:	3328      	adds	r3, #40	@ 0x28
 800ab9e:	2100      	movs	r1, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 fb1f 	bl	800c1e4 <RCCEx_PLL3_Config>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abac:	e006      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abb4:	e002      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800abb6:	bf00      	nop
 800abb8:	e000      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800abba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abc4:	4b6e      	ldr	r3, [pc, #440]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800abcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd2:	4a6b      	ldr	r2, [pc, #428]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	6513      	str	r3, [r2, #80]	@ 0x50
 800abd8:	e003      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800abee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800abf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d053      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac0c:	d033      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ac0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac12:	d82c      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ac14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac18:	d02f      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ac1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac1e:	d826      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ac20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac24:	d02b      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac2a:	d820      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ac2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac30:	d012      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ac32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac36:	d81a      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d022      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ac3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac40:	d115      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac46:	3308      	adds	r3, #8
 800ac48:	2101      	movs	r1, #1
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fa18 	bl	800c080 <RCCEx_PLL2_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac56:	e015      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac5c:	3328      	adds	r3, #40	@ 0x28
 800ac5e:	2101      	movs	r1, #1
 800ac60:	4618      	mov	r0, r3
 800ac62:	f001 fabf 	bl	800c1e4 <RCCEx_PLL3_Config>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac6c:	e00a      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac74:	e006      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ac76:	bf00      	nop
 800ac78:	e004      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ac82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ac94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac9a:	4a39      	ldr	r2, [pc, #228]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	6513      	str	r3, [r2, #80]	@ 0x50
 800aca0:	e003      	b.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800acb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acba:	2300      	movs	r3, #0
 800acbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800acc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4313      	orrs	r3, r2
 800acc8:	d060      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800acca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acd2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800acd6:	d039      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800acd8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800acdc:	d832      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800acde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ace2:	d035      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ace4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ace8:	d82c      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acee:	d031      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf4:	d826      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800acf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800acfa:	d02d      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800acfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad00:	d820      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ad02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad06:	d012      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ad08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad0c:	d81a      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d024      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad16:	d115      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	2101      	movs	r1, #1
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 f9ad 	bl	800c080 <RCCEx_PLL2_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad2c:	e017      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad32:	3328      	adds	r3, #40	@ 0x28
 800ad34:	2101      	movs	r1, #1
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 fa54 	bl	800c1e4 <RCCEx_PLL3_Config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad42:	e00c      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad4a:	e008      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad4c:	bf00      	nop
 800ad4e:	e006      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad50:	bf00      	nop
 800ad52:	e004      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad54:	bf00      	nop
 800ad56:	e002      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad58:	bf00      	nop
 800ad5a:	e000      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10e      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad66:	4b06      	ldr	r3, [pc, #24]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ad6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad76:	4a02      	ldr	r2, [pc, #8]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad7c:	e006      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad7e:	bf00      	nop
 800ad80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ad98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ada2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ada6:	460b      	mov	r3, r1
 800ada8:	4313      	orrs	r3, r2
 800adaa:	d037      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800adac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adb6:	d00e      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800adb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adbc:	d816      	bhi.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x664>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d018      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800adc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adc6:	d111      	bne.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc8:	4bc4      	ldr	r3, [pc, #784]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adcc:	4ac3      	ldr	r2, [pc, #780]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800add4:	e00f      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adda:	3308      	adds	r3, #8
 800addc:	2101      	movs	r1, #1
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 f94e 	bl	800c080 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adea:	e004      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800adf2:	e000      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800adf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adfe:	4bb7      	ldr	r3, [pc, #732]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ae06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae0c:	4ab3      	ldr	r2, [pc, #716]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6513      	str	r3, [r2, #80]	@ 0x50
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ae28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	d039      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d81c      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ae46:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae89 	.word	0x0800ae89
 800ae50:	0800ae5d 	.word	0x0800ae5d
 800ae54:	0800ae6b 	.word	0x0800ae6b
 800ae58:	0800ae89 	.word	0x0800ae89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5c:	4b9f      	ldr	r3, [pc, #636]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae60:	4a9e      	ldr	r2, [pc, #632]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae68:	e00f      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2102      	movs	r1, #2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f904 	bl	800c080 <RCCEx_PLL2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae7e:	e004      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae86:	e000      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae92:	4b92      	ldr	r3, [pc, #584]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae96:	f023 0103 	bic.w	r1, r3, #3
 800ae9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aea0:	4a8e      	ldr	r2, [pc, #568]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea2:	430b      	orrs	r3, r1
 800aea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aea6:	e003      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aeac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aec0:	2300      	movs	r3, #0
 800aec2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	f000 8099 	beq.w	800b004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aed2:	4b83      	ldr	r3, [pc, #524]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a82      	ldr	r2, [pc, #520]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aedc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aede:	f7fa fd87 	bl	80059f0 <HAL_GetTick>
 800aee2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aee6:	e00b      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee8:	f7fa fd82 	bl	80059f0 <HAL_GetTick>
 800aeec:	4602      	mov	r2, r0
 800aeee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b64      	cmp	r3, #100	@ 0x64
 800aef6:	d903      	bls.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aefe:	e005      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af00:	4b77      	ldr	r3, [pc, #476]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0ed      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800af0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af10:	2b00      	cmp	r3, #0
 800af12:	d173      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af14:	4b71      	ldr	r3, [pc, #452]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800af18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af20:	4053      	eors	r3, r2
 800af22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af26:	2b00      	cmp	r3, #0
 800af28:	d015      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af2a:	4b6c      	ldr	r3, [pc, #432]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af36:	4b69      	ldr	r3, [pc, #420]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af3a:	4a68      	ldr	r2, [pc, #416]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af42:	4b66      	ldr	r3, [pc, #408]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af46:	4a65      	ldr	r2, [pc, #404]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af4e:	4a63      	ldr	r2, [pc, #396]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af62:	d118      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af64:	f7fa fd44 	bl	80059f0 <HAL_GetTick>
 800af68:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6c:	e00d      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af6e:	f7fa fd3f 	bl	80059f0 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800af78:	1ad2      	subs	r2, r2, r3
 800af7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800af7e:	429a      	cmp	r2, r3
 800af80:	d903      	bls.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800af88:	e005      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af8a:	4b54      	ldr	r3, [pc, #336]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0eb      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d129      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afae:	d10e      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x846>
 800afb0:	4b4a      	ldr	r3, [pc, #296]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800afb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afc0:	091a      	lsrs	r2, r3, #4
 800afc2:	4b48      	ldr	r3, [pc, #288]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	4a45      	ldr	r2, [pc, #276]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc8:	430b      	orrs	r3, r1
 800afca:	6113      	str	r3, [r2, #16]
 800afcc:	e005      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x852>
 800afce:	4b43      	ldr	r3, [pc, #268]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	4a42      	ldr	r2, [pc, #264]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800afd8:	6113      	str	r3, [r2, #16]
 800afda:	4b40      	ldr	r3, [pc, #256]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800afde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afea:	4a3c      	ldr	r2, [pc, #240]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afec:	430b      	orrs	r3, r1
 800afee:	6713      	str	r3, [r2, #112]	@ 0x70
 800aff0:	e008      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aff6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800affa:	e003      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b000:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f002 0301 	and.w	r3, r2, #1
 800b010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b014:	2300      	movs	r3, #0
 800b016:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b01a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b01e:	460b      	mov	r3, r1
 800b020:	4313      	orrs	r3, r2
 800b022:	f000 8090 	beq.w	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b02e:	2b28      	cmp	r3, #40	@ 0x28
 800b030:	d870      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b032:	a201      	add	r2, pc, #4	@ (adr r2, 800b038 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b11d 	.word	0x0800b11d
 800b03c:	0800b115 	.word	0x0800b115
 800b040:	0800b115 	.word	0x0800b115
 800b044:	0800b115 	.word	0x0800b115
 800b048:	0800b115 	.word	0x0800b115
 800b04c:	0800b115 	.word	0x0800b115
 800b050:	0800b115 	.word	0x0800b115
 800b054:	0800b115 	.word	0x0800b115
 800b058:	0800b0e9 	.word	0x0800b0e9
 800b05c:	0800b115 	.word	0x0800b115
 800b060:	0800b115 	.word	0x0800b115
 800b064:	0800b115 	.word	0x0800b115
 800b068:	0800b115 	.word	0x0800b115
 800b06c:	0800b115 	.word	0x0800b115
 800b070:	0800b115 	.word	0x0800b115
 800b074:	0800b115 	.word	0x0800b115
 800b078:	0800b0ff 	.word	0x0800b0ff
 800b07c:	0800b115 	.word	0x0800b115
 800b080:	0800b115 	.word	0x0800b115
 800b084:	0800b115 	.word	0x0800b115
 800b088:	0800b115 	.word	0x0800b115
 800b08c:	0800b115 	.word	0x0800b115
 800b090:	0800b115 	.word	0x0800b115
 800b094:	0800b115 	.word	0x0800b115
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b115 	.word	0x0800b115
 800b0a0:	0800b115 	.word	0x0800b115
 800b0a4:	0800b115 	.word	0x0800b115
 800b0a8:	0800b115 	.word	0x0800b115
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b115 	.word	0x0800b115
 800b0b4:	0800b115 	.word	0x0800b115
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b115 	.word	0x0800b115
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b115 	.word	0x0800b115
 800b0c8:	0800b115 	.word	0x0800b115
 800b0cc:	0800b115 	.word	0x0800b115
 800b0d0:	0800b115 	.word	0x0800b115
 800b0d4:	0800b115 	.word	0x0800b115
 800b0d8:	0800b11d 	.word	0x0800b11d
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	58024800 	.word	0x58024800
 800b0e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 ffc5 	bl	800c080 <RCCEx_PLL2_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0fc:	e00f      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b102:	3328      	adds	r3, #40	@ 0x28
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f001 f86c 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b112:	e004      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b11a:	e000      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10b      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b126:	4bc0      	ldr	r3, [pc, #768]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b136:	4abc      	ldr	r2, [pc, #752]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b138:	430b      	orrs	r3, r1
 800b13a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b13c:	e003      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b142:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f002 0302 	and.w	r3, r2, #2
 800b152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b156:	2300      	movs	r3, #0
 800b158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b15c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b160:	460b      	mov	r3, r1
 800b162:	4313      	orrs	r3, r2
 800b164:	d043      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b16e:	2b05      	cmp	r3, #5
 800b170:	d824      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800b172:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b1c5 	.word	0x0800b1c5
 800b17c:	0800b191 	.word	0x0800b191
 800b180:	0800b1a7 	.word	0x0800b1a7
 800b184:	0800b1c5 	.word	0x0800b1c5
 800b188:	0800b1c5 	.word	0x0800b1c5
 800b18c:	0800b1c5 	.word	0x0800b1c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b194:	3308      	adds	r3, #8
 800b196:	2101      	movs	r1, #1
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 ff71 	bl	800c080 <RCCEx_PLL2_Config>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1a4:	e00f      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1aa:	3328      	adds	r3, #40	@ 0x28
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f001 f818 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1ba:	e004      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1c2:	e000      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800b1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10b      	bne.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1ce:	4b96      	ldr	r3, [pc, #600]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1d2:	f023 0107 	bic.w	r1, r3, #7
 800b1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1de:	4a92      	ldr	r2, [pc, #584]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1e0:	430b      	orrs	r3, r1
 800b1e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1e4:	e003      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f002 0304 	and.w	r3, r2, #4
 800b1fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1fe:	2300      	movs	r3, #0
 800b200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b204:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d043      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b216:	2b05      	cmp	r3, #5
 800b218:	d824      	bhi.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b21a:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b26d 	.word	0x0800b26d
 800b224:	0800b239 	.word	0x0800b239
 800b228:	0800b24f 	.word	0x0800b24f
 800b22c:	0800b26d 	.word	0x0800b26d
 800b230:	0800b26d 	.word	0x0800b26d
 800b234:	0800b26d 	.word	0x0800b26d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b23c:	3308      	adds	r3, #8
 800b23e:	2101      	movs	r1, #1
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ff1d 	bl	800c080 <RCCEx_PLL2_Config>
 800b246:	4603      	mov	r3, r0
 800b248:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b24c:	e00f      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b24e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b252:	3328      	adds	r3, #40	@ 0x28
 800b254:	2101      	movs	r1, #1
 800b256:	4618      	mov	r0, r3
 800b258:	f000 ffc4 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b262:	e004      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b26a:	e000      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b26e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10b      	bne.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b276:	4b6c      	ldr	r3, [pc, #432]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b27a:	f023 0107 	bic.w	r1, r3, #7
 800b27e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b286:	4a68      	ldr	r2, [pc, #416]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b288:	430b      	orrs	r3, r1
 800b28a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b28c:	e003      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b292:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f002 0320 	and.w	r3, r2, #32
 800b2a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	d055      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b2be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2c2:	d033      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b2c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2c8:	d82c      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ce:	d02f      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d4:	d826      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b2d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b2da:	d02b      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b2dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b2e0:	d820      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b2e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2e6:	d012      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b2e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ec:	d81a      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d022      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b2f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f6:	d115      	bne.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	2100      	movs	r1, #0
 800b300:	4618      	mov	r0, r3
 800b302:	f000 febd 	bl	800c080 <RCCEx_PLL2_Config>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b30c:	e015      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b312:	3328      	adds	r3, #40	@ 0x28
 800b314:	2102      	movs	r1, #2
 800b316:	4618      	mov	r0, r3
 800b318:	f000 ff64 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b322:	e00a      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b32a:	e006      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b32c:	bf00      	nop
 800b32e:	e004      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b330:	bf00      	nop
 800b332:	e002      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b33a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b342:	4b39      	ldr	r3, [pc, #228]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b346:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b352:	4a35      	ldr	r2, [pc, #212]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b354:	430b      	orrs	r3, r1
 800b356:	6553      	str	r3, [r2, #84]	@ 0x54
 800b358:	e003      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b35e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b36e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b372:	2300      	movs	r3, #0
 800b374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b378:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4313      	orrs	r3, r2
 800b380:	d058      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b38a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b38e:	d033      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b390:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b394:	d82c      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b39a:	d02f      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b39c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3a0:	d826      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b3a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b3a6:	d02b      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b3a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b3ac:	d820      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b3ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3b2:	d012      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b3b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3b8:	d81a      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d022      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b3be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c2:	d115      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 fe57 	bl	800c080 <RCCEx_PLL2_Config>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3d8:	e015      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3de:	3328      	adds	r3, #40	@ 0x28
 800b3e0:	2102      	movs	r1, #2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 fefe 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3ee:	e00a      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3f6:	e006      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b3f8:	bf00      	nop
 800b3fa:	e004      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b3fc:	bf00      	nop
 800b3fe:	e002      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b400:	bf00      	nop
 800b402:	e000      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b406:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10e      	bne.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b40e:	4b06      	ldr	r3, [pc, #24]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b412:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b41e:	4a02      	ldr	r2, [pc, #8]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b420:	430b      	orrs	r3, r1
 800b422:	6593      	str	r3, [r2, #88]	@ 0x58
 800b424:	e006      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b426:	bf00      	nop
 800b428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b444:	2300      	movs	r3, #0
 800b446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b44a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b44e:	460b      	mov	r3, r1
 800b450:	4313      	orrs	r3, r2
 800b452:	d055      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b45c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b460:	d033      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b462:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b466:	d82c      	bhi.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b46c:	d02f      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b46e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b472:	d826      	bhi.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b474:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b478:	d02b      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b47a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b47e:	d820      	bhi.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b484:	d012      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b48a:	d81a      	bhi.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d022      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b494:	d115      	bne.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49a:	3308      	adds	r3, #8
 800b49c:	2100      	movs	r1, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fdee 	bl	800c080 <RCCEx_PLL2_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4aa:	e015      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b0:	3328      	adds	r3, #40	@ 0x28
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fe95 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4c0:	e00a      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4c8:	e006      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b4ca:	bf00      	nop
 800b4cc:	e004      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b4ce:	bf00      	nop
 800b4d0:	e002      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10b      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4e0:	4ba1      	ldr	r3, [pc, #644]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b4f0:	4a9d      	ldr	r2, [pc, #628]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4f2:	430b      	orrs	r3, r1
 800b4f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f002 0308 	and.w	r3, r2, #8
 800b50c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b510:	2300      	movs	r3, #0
 800b512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b516:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b51a:	460b      	mov	r3, r1
 800b51c:	4313      	orrs	r3, r2
 800b51e:	d01e      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b52c:	d10c      	bne.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b532:	3328      	adds	r3, #40	@ 0x28
 800b534:	2102      	movs	r1, #2
 800b536:	4618      	mov	r0, r3
 800b538:	f000 fe54 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b548:	4b87      	ldr	r3, [pc, #540]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b558:	4a83      	ldr	r2, [pc, #524]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b55a:	430b      	orrs	r3, r1
 800b55c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b55e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f002 0310 	and.w	r3, r2, #16
 800b56a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b56e:	2300      	movs	r3, #0
 800b570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b574:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b578:	460b      	mov	r3, r1
 800b57a:	4313      	orrs	r3, r2
 800b57c:	d01e      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58a:	d10c      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b590:	3328      	adds	r3, #40	@ 0x28
 800b592:	2102      	movs	r1, #2
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fe25 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5a6:	4b70      	ldr	r3, [pc, #448]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b5b6:	4a6c      	ldr	r2, [pc, #432]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b5c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b5d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	d03e      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b5e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5e8:	d022      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b5ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5ee:	d81b      	bhi.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d003      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5f8:	d00b      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b5fa:	e015      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b600:	3308      	adds	r3, #8
 800b602:	2100      	movs	r1, #0
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fd3b 	bl	800c080 <RCCEx_PLL2_Config>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b610:	e00f      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b616:	3328      	adds	r3, #40	@ 0x28
 800b618:	2102      	movs	r1, #2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fde2 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b626:	e004      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b62e:	e000      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b632:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b63a:	4b4b      	ldr	r3, [pc, #300]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b63c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b63e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b64a:	4a47      	ldr	r2, [pc, #284]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b650:	e003      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b652:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b656:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b666:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b668:	2300      	movs	r3, #0
 800b66a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b66c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b670:	460b      	mov	r3, r1
 800b672:	4313      	orrs	r3, r2
 800b674:	d03b      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b67e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b682:	d01f      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b688:	d818      	bhi.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b68a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b68e:	d003      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b694:	d007      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b696:	e011      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b698:	4b33      	ldr	r3, [pc, #204]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69c:	4a32      	ldr	r2, [pc, #200]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b69e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6a4:	e00f      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6aa:	3328      	adds	r3, #40	@ 0x28
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fd98 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6ba:	e004      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6c2:	e000      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10b      	bne.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6ce:	4b26      	ldr	r3, [pc, #152]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6de:	4a22      	ldr	r2, [pc, #136]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b6e4:	e003      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b6fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800b700:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b704:	460b      	mov	r3, r1
 800b706:	4313      	orrs	r3, r2
 800b708:	d034      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b710:	2b00      	cmp	r3, #0
 800b712:	d003      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b718:	d007      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b71a:	e011      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b71c:	4b12      	ldr	r3, [pc, #72]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b720:	4a11      	ldr	r2, [pc, #68]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b728:	e00e      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b72e:	3308      	adds	r3, #8
 800b730:	2102      	movs	r1, #2
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fca4 	bl	800c080 <RCCEx_PLL2_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b73e:	e003      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b746:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10d      	bne.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b750:	4b05      	ldr	r3, [pc, #20]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b754:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b75e:	4a02      	ldr	r2, [pc, #8]	@ (800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b760:	430b      	orrs	r3, r1
 800b762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b764:	e006      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b766:	bf00      	nop
 800b768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b76c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b770:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b780:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b782:	2300      	movs	r3, #0
 800b784:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b786:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b78a:	460b      	mov	r3, r1
 800b78c:	4313      	orrs	r3, r2
 800b78e:	d00c      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b794:	3328      	adds	r3, #40	@ 0x28
 800b796:	2102      	movs	r1, #2
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 fd23 	bl	800c1e4 <RCCEx_PLL3_Config>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b7b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	d038      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7d2:	d018      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b7d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7d8:	d811      	bhi.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b7da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7de:	d014      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b7e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7e4:	d80b      	bhi.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d011      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b7ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ee:	d106      	bne.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f0:	4bc3      	ldr	r3, [pc, #780]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f4:	4ac2      	ldr	r2, [pc, #776]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b7f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7fc:	e008      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b804:	e004      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b806:	bf00      	nop
 800b808:	e002      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b80a:	bf00      	nop
 800b80c:	e000      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b80e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10b      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b818:	4bb9      	ldr	r3, [pc, #740]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b828:	4ab5      	ldr	r2, [pc, #724]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b82a:	430b      	orrs	r3, r1
 800b82c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b82e:	e003      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b834:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b844:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b846:	2300      	movs	r3, #0
 800b848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b84a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b84e:	460b      	mov	r3, r1
 800b850:	4313      	orrs	r3, r2
 800b852:	d009      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b854:	4baa      	ldr	r3, [pc, #680]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b858:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b862:	4aa7      	ldr	r2, [pc, #668]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b864:	430b      	orrs	r3, r1
 800b866:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b874:	653b      	str	r3, [r7, #80]	@ 0x50
 800b876:	2300      	movs	r3, #0
 800b878:	657b      	str	r3, [r7, #84]	@ 0x54
 800b87a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b87e:	460b      	mov	r3, r1
 800b880:	4313      	orrs	r3, r2
 800b882:	d009      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b884:	4b9e      	ldr	r3, [pc, #632]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b888:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b892:	4a9b      	ldr	r2, [pc, #620]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b894:	430b      	orrs	r3, r1
 800b896:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b8b4:	4b92      	ldr	r3, [pc, #584]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8b8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8c2:	4a8f      	ldr	r2, [pc, #572]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b8d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d00e      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8e4:	4b86      	ldr	r3, [pc, #536]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	4a85      	ldr	r2, [pc, #532]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8ee:	6113      	str	r3, [r2, #16]
 800b8f0:	4b83      	ldr	r3, [pc, #524]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8f2:	6919      	ldr	r1, [r3, #16]
 800b8f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b8fc:	4a80      	ldr	r2, [pc, #512]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b8fe:	430b      	orrs	r3, r1
 800b900:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b90e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b914:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b918:	460b      	mov	r3, r1
 800b91a:	4313      	orrs	r3, r2
 800b91c:	d009      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b91e:	4b78      	ldr	r3, [pc, #480]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b92a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b92c:	4a74      	ldr	r2, [pc, #464]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b92e:	430b      	orrs	r3, r1
 800b930:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b93e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b940:	2300      	movs	r3, #0
 800b942:	637b      	str	r3, [r7, #52]	@ 0x34
 800b944:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b948:	460b      	mov	r3, r1
 800b94a:	4313      	orrs	r3, r2
 800b94c:	d00a      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b94e:	4b6c      	ldr	r3, [pc, #432]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b952:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b95e:	4a68      	ldr	r2, [pc, #416]	@ (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b960:	430b      	orrs	r3, r1
 800b962:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	2100      	movs	r1, #0
 800b96e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b976:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d011      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b984:	3308      	adds	r3, #8
 800b986:	2100      	movs	r1, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fb79 	bl	800c080 <RCCEx_PLL2_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6239      	str	r1, [r7, #32]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	d011      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 fb59 	bl	800c080 <RCCEx_PLL2_Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b9d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	61b9      	str	r1, [r7, #24]
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	d011      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba04:	3308      	adds	r3, #8
 800ba06:	2102      	movs	r1, #2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fb39 	bl	800c080 <RCCEx_PLL2_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ba14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	6139      	str	r1, [r7, #16]
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d011      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba44:	3328      	adds	r3, #40	@ 0x28
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fbcb 	bl	800c1e4 <RCCEx_PLL3_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800ba54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	d011      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba84:	3328      	adds	r3, #40	@ 0x28
 800ba86:	2101      	movs	r1, #1
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fbab 	bl	800c1e4 <RCCEx_PLL3_Config>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ba94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800baa0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800baa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	2100      	movs	r1, #0
 800baae:	6039      	str	r1, [r7, #0]
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	607b      	str	r3, [r7, #4]
 800bab6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d011      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	3328      	adds	r3, #40	@ 0x28
 800bac6:	2102      	movs	r1, #2
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 fb8b 	bl	800c1e4 <RCCEx_PLL3_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800badc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bae0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bae4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	e000      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800baf8:	46bd      	mov	sp, r7
 800bafa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bafe:	bf00      	nop
 800bb00:	58024400 	.word	0x58024400

0800bb04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800bb08:	f7fe fde2 	bl	800a6d0 <HAL_RCC_GetHCLKFreq>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	4b06      	ldr	r3, [pc, #24]	@ (800bb28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	091b      	lsrs	r3, r3, #4
 800bb14:	f003 0307 	and.w	r3, r3, #7
 800bb18:	4904      	ldr	r1, [pc, #16]	@ (800bb2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb1a:	5ccb      	ldrb	r3, [r1, r3]
 800bb1c:	f003 031f 	and.w	r3, r3, #31
 800bb20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	08018c20 	.word	0x08018c20

0800bb30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b089      	sub	sp, #36	@ 0x24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb38:	4ba1      	ldr	r3, [pc, #644]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3c:	f003 0303 	and.w	r3, r3, #3
 800bb40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb42:	4b9f      	ldr	r3, [pc, #636]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb46:	0b1b      	lsrs	r3, r3, #12
 800bb48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb4e:	4b9c      	ldr	r3, [pc, #624]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb52:	091b      	lsrs	r3, r3, #4
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bb5a:	4b99      	ldr	r3, [pc, #612]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5e:	08db      	lsrs	r3, r3, #3
 800bb60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	fb02 f303 	mul.w	r3, r2, r3
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 8111 	beq.w	800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	f000 8083 	beq.w	800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	f200 80a1 	bhi.w	800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d056      	beq.n	800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb9a:	e099      	b.n	800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb9c:	4b88      	ldr	r3, [pc, #544]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d02d      	beq.n	800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bba8:	4b85      	ldr	r3, [pc, #532]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	08db      	lsrs	r3, r3, #3
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	4a84      	ldr	r2, [pc, #528]	@ (800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	ee07 3a90 	vmov	s15, r3
 800bbc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd2:	4b7b      	ldr	r3, [pc, #492]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbe6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc02:	e087      	b.n	800bd14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bdcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc16:	4b6a      	ldr	r3, [pc, #424]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc1e:	ee07 3a90 	vmov	s15, r3
 800bc22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc46:	e065      	b.n	800bd14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5a:	4b59      	ldr	r3, [pc, #356]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc8a:	e043      	b.n	800bd14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9e:	4b48      	ldr	r3, [pc, #288]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcce:	e021      	b.n	800bd14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce2:	4b37      	ldr	r3, [pc, #220]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bd14:	4b2a      	ldr	r3, [pc, #168]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd18:	0a5b      	lsrs	r3, r3, #9
 800bd1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd1e:	ee07 3a90 	vmov	s15, r3
 800bd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd3a:	ee17 2a90 	vmov	r2, s15
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd42:	4b1f      	ldr	r3, [pc, #124]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4c:	ee07 3a90 	vmov	s15, r3
 800bd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd68:	ee17 2a90 	vmov	r2, s15
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd70:	4b13      	ldr	r3, [pc, #76]	@ (800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd74:	0e1b      	lsrs	r3, r3, #24
 800bd76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd96:	ee17 2a90 	vmov	r2, s15
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd9e:	e008      	b.n	800bdb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	609a      	str	r2, [r3, #8]
}
 800bdb2:	bf00      	nop
 800bdb4:	3724      	adds	r7, #36	@ 0x24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	58024400 	.word	0x58024400
 800bdc4:	03d09000 	.word	0x03d09000
 800bdc8:	46000000 	.word	0x46000000
 800bdcc:	4c742400 	.word	0x4c742400
 800bdd0:	4a742400 	.word	0x4a742400
 800bdd4:	4bb71b00 	.word	0x4bb71b00

0800bdd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b089      	sub	sp, #36	@ 0x24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bde0:	4ba1      	ldr	r3, [pc, #644]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde4:	f003 0303 	and.w	r3, r3, #3
 800bde8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bdea:	4b9f      	ldr	r3, [pc, #636]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdee:	0d1b      	lsrs	r3, r3, #20
 800bdf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdf6:	4b9c      	ldr	r3, [pc, #624]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfa:	0a1b      	lsrs	r3, r3, #8
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be02:	4b99      	ldr	r3, [pc, #612]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be06:	08db      	lsrs	r3, r3, #3
 800be08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	fb02 f303 	mul.w	r3, r2, r3
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8111 	beq.w	800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	2b02      	cmp	r3, #2
 800be2a:	f000 8083 	beq.w	800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b02      	cmp	r3, #2
 800be32:	f200 80a1 	bhi.w	800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d056      	beq.n	800bef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be42:	e099      	b.n	800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be44:	4b88      	ldr	r3, [pc, #544]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 0320 	and.w	r3, r3, #32
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d02d      	beq.n	800beac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be50:	4b85      	ldr	r3, [pc, #532]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	08db      	lsrs	r3, r3, #3
 800be56:	f003 0303 	and.w	r3, r3, #3
 800be5a:	4a84      	ldr	r2, [pc, #528]	@ (800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be5c:	fa22 f303 	lsr.w	r3, r2, r3
 800be60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	ee07 3a90 	vmov	s15, r3
 800be68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be7a:	4b7b      	ldr	r3, [pc, #492]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be82:	ee07 3a90 	vmov	s15, r3
 800be86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800beaa:	e087      	b.n	800bfbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800beba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bebe:	4b6a      	ldr	r3, [pc, #424]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec6:	ee07 3a90 	vmov	s15, r3
 800beca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bece:	ed97 6a03 	vldr	s12, [r7, #12]
 800bed2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beee:	e065      	b.n	800bfbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800befe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf02:	4b59      	ldr	r3, [pc, #356]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf0a:	ee07 3a90 	vmov	s15, r3
 800bf0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf12:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf32:	e043      	b.n	800bfbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	ee07 3a90 	vmov	s15, r3
 800bf3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf46:	4b48      	ldr	r3, [pc, #288]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4e:	ee07 3a90 	vmov	s15, r3
 800bf52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf76:	e021      	b.n	800bfbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8a:	4b37      	ldr	r3, [pc, #220]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bfbc:	4b2a      	ldr	r3, [pc, #168]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc0:	0a5b      	lsrs	r3, r3, #9
 800bfc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfc6:	ee07 3a90 	vmov	s15, r3
 800bfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfe2:	ee17 2a90 	vmov	r2, s15
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bfea:	4b1f      	ldr	r3, [pc, #124]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfee:	0c1b      	lsrs	r3, r3, #16
 800bff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bff4:	ee07 3a90 	vmov	s15, r3
 800bff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c000:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c004:	edd7 6a07 	vldr	s13, [r7, #28]
 800c008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c010:	ee17 2a90 	vmov	r2, s15
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c018:	4b13      	ldr	r3, [pc, #76]	@ (800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c01c:	0e1b      	lsrs	r3, r3, #24
 800c01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c02e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c032:	edd7 6a07 	vldr	s13, [r7, #28]
 800c036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c03a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c03e:	ee17 2a90 	vmov	r2, s15
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c046:	e008      	b.n	800c05a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	609a      	str	r2, [r3, #8]
}
 800c05a:	bf00      	nop
 800c05c:	3724      	adds	r7, #36	@ 0x24
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	58024400 	.word	0x58024400
 800c06c:	03d09000 	.word	0x03d09000
 800c070:	46000000 	.word	0x46000000
 800c074:	4c742400 	.word	0x4c742400
 800c078:	4a742400 	.word	0x4a742400
 800c07c:	4bb71b00 	.word	0x4bb71b00

0800c080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c08e:	4b53      	ldr	r3, [pc, #332]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b03      	cmp	r3, #3
 800c098:	d101      	bne.n	800c09e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e099      	b.n	800c1d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c09e:	4b4f      	ldr	r3, [pc, #316]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a4e      	ldr	r2, [pc, #312]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c0a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c0a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0aa:	f7f9 fca1 	bl	80059f0 <HAL_GetTick>
 800c0ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0b0:	e008      	b.n	800c0c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c0b2:	f7f9 fc9d 	bl	80059f0 <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d901      	bls.n	800c0c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e086      	b.n	800c1d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0c4:	4b45      	ldr	r3, [pc, #276]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1f0      	bne.n	800c0b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0d0:	4b42      	ldr	r3, [pc, #264]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	031b      	lsls	r3, r3, #12
 800c0de:	493f      	ldr	r1, [pc, #252]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	025b      	lsls	r3, r3, #9
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	041b      	lsls	r3, r3, #16
 800c102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c106:	431a      	orrs	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	061b      	lsls	r3, r3, #24
 800c110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c114:	4931      	ldr	r1, [pc, #196]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c116:	4313      	orrs	r3, r2
 800c118:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c11a:	4b30      	ldr	r3, [pc, #192]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	492d      	ldr	r1, [pc, #180]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c12c:	4b2b      	ldr	r3, [pc, #172]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c130:	f023 0220 	bic.w	r2, r3, #32
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	4928      	ldr	r1, [pc, #160]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c13e:	4b27      	ldr	r3, [pc, #156]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c142:	4a26      	ldr	r2, [pc, #152]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c144:	f023 0310 	bic.w	r3, r3, #16
 800c148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c14a:	4b24      	ldr	r3, [pc, #144]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c14c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c14e:	4b24      	ldr	r3, [pc, #144]	@ (800c1e0 <RCCEx_PLL2_Config+0x160>)
 800c150:	4013      	ands	r3, r2
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	69d2      	ldr	r2, [r2, #28]
 800c156:	00d2      	lsls	r2, r2, #3
 800c158:	4920      	ldr	r1, [pc, #128]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c15e:	4b1f      	ldr	r3, [pc, #124]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c162:	4a1e      	ldr	r2, [pc, #120]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c164:	f043 0310 	orr.w	r3, r3, #16
 800c168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d106      	bne.n	800c17e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c170:	4b1a      	ldr	r3, [pc, #104]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	4a19      	ldr	r2, [pc, #100]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c17a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c17c:	e00f      	b.n	800c19e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d106      	bne.n	800c192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c184:	4b15      	ldr	r3, [pc, #84]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c188:	4a14      	ldr	r2, [pc, #80]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c18a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c190:	e005      	b.n	800c19e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c192:	4b12      	ldr	r3, [pc, #72]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	4a11      	ldr	r2, [pc, #68]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c19c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c19e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a0e      	ldr	r2, [pc, #56]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c1a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1aa:	f7f9 fc21 	bl	80059f0 <HAL_GetTick>
 800c1ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1b0:	e008      	b.n	800c1c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1b2:	f7f9 fc1d 	bl	80059f0 <HAL_GetTick>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d901      	bls.n	800c1c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e006      	b.n	800c1d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1c4:	4b05      	ldr	r3, [pc, #20]	@ (800c1dc <RCCEx_PLL2_Config+0x15c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0f0      	beq.n	800c1b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	58024400 	.word	0x58024400
 800c1e0:	ffff0007 	.word	0xffff0007

0800c1e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1f2:	4b53      	ldr	r3, [pc, #332]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d101      	bne.n	800c202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e099      	b.n	800c336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c202:	4b4f      	ldr	r3, [pc, #316]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a4e      	ldr	r2, [pc, #312]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c20c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c20e:	f7f9 fbef 	bl	80059f0 <HAL_GetTick>
 800c212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c214:	e008      	b.n	800c228 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c216:	f7f9 fbeb 	bl	80059f0 <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	d901      	bls.n	800c228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e086      	b.n	800c336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c228:	4b45      	ldr	r3, [pc, #276]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1f0      	bne.n	800c216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c234:	4b42      	ldr	r3, [pc, #264]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	051b      	lsls	r3, r3, #20
 800c242:	493f      	ldr	r1, [pc, #252]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c244:	4313      	orrs	r3, r2
 800c246:	628b      	str	r3, [r1, #40]	@ 0x28
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	3b01      	subs	r3, #1
 800c258:	025b      	lsls	r3, r3, #9
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	431a      	orrs	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	3b01      	subs	r3, #1
 800c264:	041b      	lsls	r3, r3, #16
 800c266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	3b01      	subs	r3, #1
 800c272:	061b      	lsls	r3, r3, #24
 800c274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c278:	4931      	ldr	r1, [pc, #196]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c27a:	4313      	orrs	r3, r2
 800c27c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c27e:	4b30      	ldr	r3, [pc, #192]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	492d      	ldr	r1, [pc, #180]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c290:	4b2b      	ldr	r3, [pc, #172]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c294:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	4928      	ldr	r1, [pc, #160]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2a2:	4b27      	ldr	r3, [pc, #156]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a6:	4a26      	ldr	r2, [pc, #152]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2ae:	4b24      	ldr	r3, [pc, #144]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2b2:	4b24      	ldr	r3, [pc, #144]	@ (800c344 <RCCEx_PLL3_Config+0x160>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	69d2      	ldr	r2, [r2, #28]
 800c2ba:	00d2      	lsls	r2, r2, #3
 800c2bc:	4920      	ldr	r1, [pc, #128]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d106      	bne.n	800c2e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d8:	4a19      	ldr	r2, [pc, #100]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c2de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2e0:	e00f      	b.n	800c302 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d106      	bne.n	800c2f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c2e8:	4b15      	ldr	r3, [pc, #84]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ec:	4a14      	ldr	r2, [pc, #80]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2f4:	e005      	b.n	800c302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c2f6:	4b12      	ldr	r3, [pc, #72]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fa:	4a11      	ldr	r2, [pc, #68]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c2fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c302:	4b0f      	ldr	r3, [pc, #60]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a0e      	ldr	r2, [pc, #56]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c30c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c30e:	f7f9 fb6f 	bl	80059f0 <HAL_GetTick>
 800c312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c314:	e008      	b.n	800c328 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c316:	f7f9 fb6b 	bl	80059f0 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e006      	b.n	800c336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c328:	4b05      	ldr	r3, [pc, #20]	@ (800c340 <RCCEx_PLL3_Config+0x15c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0f0      	beq.n	800c316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	58024400 	.word	0x58024400
 800c344:	ffff0007 	.word	0xffff0007

0800c348 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e10f      	b.n	800c57a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a87      	ldr	r2, [pc, #540]	@ (800c584 <HAL_SPI_Init+0x23c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d00f      	beq.n	800c38a <HAL_SPI_Init+0x42>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a86      	ldr	r2, [pc, #536]	@ (800c588 <HAL_SPI_Init+0x240>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00a      	beq.n	800c38a <HAL_SPI_Init+0x42>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a84      	ldr	r2, [pc, #528]	@ (800c58c <HAL_SPI_Init+0x244>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d005      	beq.n	800c38a <HAL_SPI_Init+0x42>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	2b0f      	cmp	r3, #15
 800c384:	d901      	bls.n	800c38a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e0f7      	b.n	800c57a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 f968 	bl	800d660 <SPI_GetPacketSize>
 800c390:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a7b      	ldr	r2, [pc, #492]	@ (800c584 <HAL_SPI_Init+0x23c>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d00c      	beq.n	800c3b6 <HAL_SPI_Init+0x6e>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a79      	ldr	r2, [pc, #484]	@ (800c588 <HAL_SPI_Init+0x240>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d007      	beq.n	800c3b6 <HAL_SPI_Init+0x6e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a78      	ldr	r2, [pc, #480]	@ (800c58c <HAL_SPI_Init+0x244>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d002      	beq.n	800c3b6 <HAL_SPI_Init+0x6e>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2b08      	cmp	r3, #8
 800c3b4:	d811      	bhi.n	800c3da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3ba:	4a72      	ldr	r2, [pc, #456]	@ (800c584 <HAL_SPI_Init+0x23c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d009      	beq.n	800c3d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a70      	ldr	r2, [pc, #448]	@ (800c588 <HAL_SPI_Init+0x240>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <HAL_SPI_Init+0x8c>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a6f      	ldr	r2, [pc, #444]	@ (800c58c <HAL_SPI_Init+0x244>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d104      	bne.n	800c3de <HAL_SPI_Init+0x96>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b10      	cmp	r3, #16
 800c3d8:	d901      	bls.n	800c3de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e0cd      	b.n	800c57a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7f8 f908 	bl	8004608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0201 	bic.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c41a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c424:	d119      	bne.n	800c45a <HAL_SPI_Init+0x112>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c42e:	d103      	bne.n	800c438 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c434:	2b00      	cmp	r3, #0
 800c436:	d008      	beq.n	800c44a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10c      	bne.n	800c45a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c448:	d107      	bne.n	800c45a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c458:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00f      	beq.n	800c486 <HAL_SPI_Init+0x13e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	2b06      	cmp	r3, #6
 800c46c:	d90b      	bls.n	800c486 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	430a      	orrs	r2, r1
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	e007      	b.n	800c496 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c494:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69da      	ldr	r2, [r3, #28]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a8:	ea42 0103 	orr.w	r1, r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	431a      	orrs	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4f6:	ea42 0103 	orr.w	r1, r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	430a      	orrs	r2, r1
 800c504:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d113      	bne.n	800c536 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c520:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c534:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f022 0201 	bic.w	r2, r2, #1
 800c544:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	430a      	orrs	r2, r1
 800c566:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	40013000 	.word	0x40013000
 800c588:	40003800 	.word	0x40003800
 800c58c:	40003c00 	.word	0x40003c00

0800c590 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af02      	add	r7, sp, #8
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	4613      	mov	r3, r2
 800c59e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3320      	adds	r3, #32
 800c5a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5a8:	f7f9 fa22 	bl	80059f0 <HAL_GetTick>
 800c5ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d001      	beq.n	800c5be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e1d1      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <HAL_SPI_Transmit+0x3a>
 800c5c4:	88fb      	ldrh	r3, [r7, #6]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e1c9      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d101      	bne.n	800c5dc <HAL_SPI_Transmit+0x4c>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e1c2      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	88fa      	ldrh	r2, [r7, #6]
 800c5fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	88fa      	ldrh	r2, [r7, #6]
 800c606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c634:	d108      	bne.n	800c648 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	e009      	b.n	800c65c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c65a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	4b96      	ldr	r3, [pc, #600]	@ (800c8bc <HAL_SPI_Transmit+0x32c>)
 800c664:	4013      	ands	r3, r2
 800c666:	88f9      	ldrh	r1, [r7, #6]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	6812      	ldr	r2, [r2, #0]
 800c66c:	430b      	orrs	r3, r1
 800c66e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f042 0201 	orr.w	r2, r2, #1
 800c67e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c688:	d107      	bne.n	800c69a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b0f      	cmp	r3, #15
 800c6a0:	d947      	bls.n	800c732 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c6a2:	e03f      	b.n	800c724 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d114      	bne.n	800c6dc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c6da:	e023      	b.n	800c724 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6dc:	f7f9 f988 	bl	80059f0 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d803      	bhi.n	800c6f4 <HAL_SPI_Transmit+0x164>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d102      	bne.n	800c6fa <HAL_SPI_Transmit+0x16a>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d114      	bne.n	800c724 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fee2 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e11e      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1b9      	bne.n	800c6a4 <HAL_SPI_Transmit+0x114>
 800c730:	e0f1      	b.n	800c916 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b07      	cmp	r3, #7
 800c738:	f240 80e6 	bls.w	800c908 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c73c:	e05d      	b.n	800c7fa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	f003 0302 	and.w	r3, r3, #2
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d132      	bne.n	800c7b2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c752:	b29b      	uxth	r3, r3
 800c754:	2b01      	cmp	r3, #1
 800c756:	d918      	bls.n	800c78a <HAL_SPI_Transmit+0x1fa>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d014      	beq.n	800c78a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c770:	1d1a      	adds	r2, r3, #4
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3b02      	subs	r3, #2
 800c780:	b29a      	uxth	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c788:	e037      	b.n	800c7fa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c78e:	881a      	ldrh	r2, [r3, #0]
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c798:	1c9a      	adds	r2, r3, #2
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c7b0:	e023      	b.n	800c7fa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7b2:	f7f9 f91d 	bl	80059f0 <HAL_GetTick>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d803      	bhi.n	800c7ca <HAL_SPI_Transmit+0x23a>
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c8:	d102      	bne.n	800c7d0 <HAL_SPI_Transmit+0x240>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d114      	bne.n	800c7fa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f000 fe77 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e0b3      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c800:	b29b      	uxth	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d19b      	bne.n	800c73e <HAL_SPI_Transmit+0x1ae>
 800c806:	e086      	b.n	800c916 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b02      	cmp	r3, #2
 800c814:	d154      	bne.n	800c8c0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d918      	bls.n	800c854 <HAL_SPI_Transmit+0x2c4>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c826:	2b40      	cmp	r3, #64	@ 0x40
 800c828:	d914      	bls.n	800c854 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6812      	ldr	r2, [r2, #0]
 800c834:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c83a:	1d1a      	adds	r2, r3, #4
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c846:	b29b      	uxth	r3, r3
 800c848:	3b04      	subs	r3, #4
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c852:	e059      	b.n	800c908 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d917      	bls.n	800c890 <HAL_SPI_Transmit+0x300>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d013      	beq.n	800c890 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c86c:	881a      	ldrh	r2, [r3, #0]
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c876:	1c9a      	adds	r2, r3, #2
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c882:	b29b      	uxth	r3, r3
 800c884:	3b02      	subs	r3, #2
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c88e:	e03b      	b.n	800c908 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3320      	adds	r3, #32
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8ba:	e025      	b.n	800c908 <HAL_SPI_Transmit+0x378>
 800c8bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8c0:	f7f9 f896 	bl	80059f0 <HAL_GetTick>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d803      	bhi.n	800c8d8 <HAL_SPI_Transmit+0x348>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d6:	d102      	bne.n	800c8de <HAL_SPI_Transmit+0x34e>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d114      	bne.n	800c908 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 fdf0 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c904:	2303      	movs	r3, #3
 800c906:	e02c      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	f47f af79 	bne.w	800c808 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2200      	movs	r2, #0
 800c91e:	2108      	movs	r1, #8
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 fe6f 	bl	800d604 <SPI_WaitOnFlagUntilTimeout>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d007      	beq.n	800c93c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c932:	f043 0220 	orr.w	r2, r3, #32
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 fdc1 	bl	800d4c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e000      	b.n	800c962 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c960:	2300      	movs	r3, #0
  }
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop

0800c96c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	4613      	mov	r3, r2
 800c97a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c980:	095b      	lsrs	r3, r3, #5
 800c982:	b29b      	uxth	r3, r3
 800c984:	3301      	adds	r3, #1
 800c986:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3330      	adds	r3, #48	@ 0x30
 800c98e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c990:	f7f9 f82e 	bl	80059f0 <HAL_GetTick>
 800c994:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d001      	beq.n	800c9a6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	e250      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <HAL_SPI_Receive+0x46>
 800c9ac:	88fb      	ldrh	r3, [r7, #6]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e248      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d101      	bne.n	800c9c4 <HAL_SPI_Receive+0x58>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e241      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	88fa      	ldrh	r2, [r7, #6]
 800c9e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	88fa      	ldrh	r2, [r7, #6]
 800c9ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ca1c:	d108      	bne.n	800ca30 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	e009      	b.n	800ca44 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ca42:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	4b95      	ldr	r3, [pc, #596]	@ (800cca0 <HAL_SPI_Receive+0x334>)
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	88f9      	ldrh	r1, [r7, #6]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	6812      	ldr	r2, [r2, #0]
 800ca54:	430b      	orrs	r3, r1
 800ca56:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0201 	orr.w	r2, r2, #1
 800ca66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca70:	d107      	bne.n	800ca82 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d96c      	bls.n	800cb64 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca8a:	e064      	b.n	800cb56 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d114      	bne.n	800cacc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caaa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800caac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cab2:	1d1a      	adds	r2, r3, #4
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	3b01      	subs	r3, #1
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800caca:	e044      	b.n	800cb56 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	8bfa      	ldrh	r2, [r7, #30]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d919      	bls.n	800cb0e <HAL_SPI_Receive+0x1a2>
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d014      	beq.n	800cb0e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800caee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caf4:	1d1a      	adds	r2, r3, #4
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	3b01      	subs	r3, #1
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb0c:	e023      	b.n	800cb56 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb0e:	f7f8 ff6f 	bl	80059f0 <HAL_GetTick>
 800cb12:	4602      	mov	r2, r0
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d803      	bhi.n	800cb26 <HAL_SPI_Receive+0x1ba>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb24:	d102      	bne.n	800cb2c <HAL_SPI_Receive+0x1c0>
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d114      	bne.n	800cb56 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fcc9 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e178      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d194      	bne.n	800ca8c <HAL_SPI_Receive+0x120>
 800cb62:	e15e      	b.n	800ce22 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b07      	cmp	r3, #7
 800cb6a:	f240 8153 	bls.w	800ce14 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb6e:	e08f      	b.n	800cc90 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d114      	bne.n	800cbb0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	8812      	ldrh	r2, [r2, #0]
 800cb8e:	b292      	uxth	r2, r2
 800cb90:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb96:	1c9a      	adds	r2, r3, #2
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	3b01      	subs	r3, #1
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbae:	e06f      	b.n	800cc90 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	8bfa      	ldrh	r2, [r7, #30]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d924      	bls.n	800cc08 <HAL_SPI_Receive+0x29c>
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01f      	beq.n	800cc08 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbcc:	69ba      	ldr	r2, [r7, #24]
 800cbce:	8812      	ldrh	r2, [r2, #0]
 800cbd0:	b292      	uxth	r2, r2
 800cbd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbd8:	1c9a      	adds	r2, r3, #2
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	8812      	ldrh	r2, [r2, #0]
 800cbe6:	b292      	uxth	r2, r2
 800cbe8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbee:	1c9a      	adds	r2, r3, #2
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	3b02      	subs	r3, #2
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc06:	e043      	b.n	800cc90 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d119      	bne.n	800cc48 <HAL_SPI_Receive+0x2dc>
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d014      	beq.n	800cc48 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	8812      	ldrh	r2, [r2, #0]
 800cc26:	b292      	uxth	r2, r2
 800cc28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc2e:	1c9a      	adds	r2, r3, #2
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc46:	e023      	b.n	800cc90 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc48:	f7f8 fed2 	bl	80059f0 <HAL_GetTick>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d803      	bhi.n	800cc60 <HAL_SPI_Receive+0x2f4>
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	d102      	bne.n	800cc66 <HAL_SPI_Receive+0x2fa>
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d114      	bne.n	800cc90 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 fc2c 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc8c:	2303      	movs	r3, #3
 800cc8e:	e0db      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f47f af69 	bne.w	800cb70 <HAL_SPI_Receive+0x204>
 800cc9e:	e0c0      	b.n	800ce22 <HAL_SPI_Receive+0x4b6>
 800cca0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d117      	bne.n	800ccea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccc6:	7812      	ldrb	r2, [r2, #0]
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cce8:	e094      	b.n	800ce14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	8bfa      	ldrh	r2, [r7, #30]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d946      	bls.n	800cd86 <HAL_SPI_Receive+0x41a>
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d041      	beq.n	800cd86 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd0e:	7812      	ldrb	r2, [r2, #0]
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd2a:	7812      	ldrb	r2, [r2, #0]
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd46:	7812      	ldrb	r2, [r2, #0]
 800cd48:	b2d2      	uxtb	r2, r2
 800cd4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd62:	7812      	ldrb	r2, [r2, #0]
 800cd64:	b2d2      	uxtb	r2, r2
 800cd66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	3b04      	subs	r3, #4
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd84:	e046      	b.n	800ce14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d81c      	bhi.n	800cdcc <HAL_SPI_Receive+0x460>
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d017      	beq.n	800cdcc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cda8:	7812      	ldrb	r2, [r2, #0]
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cdca:	e023      	b.n	800ce14 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdcc:	f7f8 fe10 	bl	80059f0 <HAL_GetTick>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d803      	bhi.n	800cde4 <HAL_SPI_Receive+0x478>
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d102      	bne.n	800cdea <HAL_SPI_Receive+0x47e>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d114      	bne.n	800ce14 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f000 fb6a 	bl	800d4c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e019      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f47f af41 	bne.w	800cca4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 fb4e 	bl	800d4c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e000      	b.n	800ce48 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ce46:	2300      	movs	r3, #0
  }
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3720      	adds	r7, #32
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08e      	sub	sp, #56	@ 0x38
 800ce54:	af02      	add	r7, sp, #8
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3320      	adds	r3, #32
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3330      	adds	r3, #48	@ 0x30
 800ce6c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce72:	095b      	lsrs	r3, r3, #5
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3301      	adds	r3, #1
 800ce78:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce7a:	f7f8 fdb9 	bl	80059f0 <HAL_GetTick>
 800ce7e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800ce80:	887b      	ldrh	r3, [r7, #2]
 800ce82:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800ce84:	887b      	ldrh	r3, [r7, #2]
 800ce86:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d001      	beq.n	800ce98 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ce94:	2302      	movs	r3, #2
 800ce96:	e310      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_SPI_TransmitReceive+0x5a>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <HAL_SPI_TransmitReceive+0x5a>
 800cea4:	887b      	ldrh	r3, [r7, #2]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e305      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_SPI_TransmitReceive+0x6c>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e2fe      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2205      	movs	r2, #5
 800cec8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	887a      	ldrh	r2, [r7, #2]
 800cede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	887a      	ldrh	r2, [r7, #2]
 800cee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	887a      	ldrh	r2, [r7, #2]
 800cef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	887a      	ldrh	r2, [r7, #2]
 800cefc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cf1a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a70      	ldr	r2, [pc, #448]	@ (800d0e4 <HAL_SPI_TransmitReceive+0x294>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d009      	beq.n	800cf3a <HAL_SPI_TransmitReceive+0xea>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a6f      	ldr	r2, [pc, #444]	@ (800d0e8 <HAL_SPI_TransmitReceive+0x298>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d004      	beq.n	800cf3a <HAL_SPI_TransmitReceive+0xea>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a6d      	ldr	r2, [pc, #436]	@ (800d0ec <HAL_SPI_TransmitReceive+0x29c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d102      	bne.n	800cf40 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800cf3a:	2310      	movs	r3, #16
 800cf3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf3e:	e001      	b.n	800cf44 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800cf40:	2308      	movs	r3, #8
 800cf42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	4b69      	ldr	r3, [pc, #420]	@ (800d0f0 <HAL_SPI_TransmitReceive+0x2a0>)
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	8879      	ldrh	r1, [r7, #2]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	6812      	ldr	r2, [r2, #0]
 800cf54:	430b      	orrs	r3, r1
 800cf56:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f042 0201 	orr.w	r2, r2, #1
 800cf66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf70:	d107      	bne.n	800cf82 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	2b0f      	cmp	r3, #15
 800cf88:	f240 80a2 	bls.w	800d0d0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	089b      	lsrs	r3, r3, #2
 800cf90:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf92:	e094      	b.n	800d0be <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d120      	bne.n	800cfe4 <HAL_SPI_TransmitReceive+0x194>
 800cfa2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d01d      	beq.n	800cfe4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cfa8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cfaa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d217      	bcs.n	800cfe4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6812      	ldr	r2, [r2, #0]
 800cfbe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfc4:	1d1a      	adds	r2, r3, #4
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfe2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	695b      	ldr	r3, [r3, #20]
 800cfea:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cfec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d065      	beq.n	800d0be <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	695b      	ldr	r3, [r3, #20]
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d118      	bne.n	800d032 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d008:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d00a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d010:	1d1a      	adds	r2, r3, #4
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	b29a      	uxth	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d02e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d030:	e045      	b.n	800d0be <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d032:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d034:	8bfb      	ldrh	r3, [r7, #30]
 800d036:	429a      	cmp	r2, r3
 800d038:	d21d      	bcs.n	800d076 <HAL_SPI_TransmitReceive+0x226>
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d018      	beq.n	800d076 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d04c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d04e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d054:	1d1a      	adds	r2, r3, #4
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d060:	b29b      	uxth	r3, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d072:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d074:	e023      	b.n	800d0be <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d076:	f7f8 fcbb 	bl	80059f0 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d082:	429a      	cmp	r2, r3
 800d084:	d803      	bhi.n	800d08e <HAL_SPI_TransmitReceive+0x23e>
 800d086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08c:	d102      	bne.n	800d094 <HAL_SPI_TransmitReceive+0x244>
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	2b00      	cmp	r3, #0
 800d092:	d114      	bne.n	800d0be <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fa15 	bl	800d4c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e1fd      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d0be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f47f af67 	bne.w	800cf94 <HAL_SPI_TransmitReceive+0x144>
 800d0c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f47f af63 	bne.w	800cf94 <HAL_SPI_TransmitReceive+0x144>
 800d0ce:	e1ce      	b.n	800d46e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	2b07      	cmp	r3, #7
 800d0d6:	f240 81c2 	bls.w	800d45e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800d0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d0e0:	e0c9      	b.n	800d276 <HAL_SPI_TransmitReceive+0x426>
 800d0e2:	bf00      	nop
 800d0e4:	40013000 	.word	0x40013000
 800d0e8:	40003800 	.word	0x40003800
 800d0ec:	40003c00 	.word	0x40003c00
 800d0f0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	f003 0302 	and.w	r3, r3, #2
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d11f      	bne.n	800d142 <HAL_SPI_TransmitReceive+0x2f2>
 800d102:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d104:	2b00      	cmp	r3, #0
 800d106:	d01c      	beq.n	800d142 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d108:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d10a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d110:	429a      	cmp	r2, r3
 800d112:	d216      	bcs.n	800d142 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d118:	881a      	ldrh	r2, [r3, #0]
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d122:	1c9a      	adds	r2, r3, #2
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d12e:	b29b      	uxth	r3, r3
 800d130:	3b01      	subs	r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d140:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d14a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8092 	beq.w	800d276 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d118      	bne.n	800d192 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d164:	6a3a      	ldr	r2, [r7, #32]
 800d166:	8812      	ldrh	r2, [r2, #0]
 800d168:	b292      	uxth	r2, r2
 800d16a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d170:	1c9a      	adds	r2, r3, #2
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	3b01      	subs	r3, #1
 800d180:	b29a      	uxth	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d18e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d190:	e071      	b.n	800d276 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d192:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d194:	8bfb      	ldrh	r3, [r7, #30]
 800d196:	429a      	cmp	r2, r3
 800d198:	d228      	bcs.n	800d1ec <HAL_SPI_TransmitReceive+0x39c>
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d023      	beq.n	800d1ec <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1a8:	6a3a      	ldr	r2, [r7, #32]
 800d1aa:	8812      	ldrh	r2, [r2, #0]
 800d1ac:	b292      	uxth	r2, r2
 800d1ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1b4:	1c9a      	adds	r2, r3, #2
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1be:	6a3a      	ldr	r2, [r7, #32]
 800d1c0:	8812      	ldrh	r2, [r2, #0]
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1ca:	1c9a      	adds	r2, r3, #2
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3b02      	subs	r3, #2
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d1ea:	e044      	b.n	800d276 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d1ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d11d      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x3de>
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d018      	beq.n	800d22e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d200:	6a3a      	ldr	r2, [r7, #32]
 800d202:	8812      	ldrh	r2, [r2, #0]
 800d204:	b292      	uxth	r2, r2
 800d206:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d20c:	1c9a      	adds	r2, r3, #2
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d22a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d22c:	e023      	b.n	800d276 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d22e:	f7f8 fbdf 	bl	80059f0 <HAL_GetTick>
 800d232:	4602      	mov	r2, r0
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d803      	bhi.n	800d246 <HAL_SPI_TransmitReceive+0x3f6>
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d244:	d102      	bne.n	800d24c <HAL_SPI_TransmitReceive+0x3fc>
 800d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d114      	bne.n	800d276 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 f939 	bl	800d4c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d258:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	e121      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d276:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f47f af3b 	bne.w	800d0f4 <HAL_SPI_TransmitReceive+0x2a4>
 800d27e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d280:	2b00      	cmp	r3, #0
 800d282:	f47f af37 	bne.w	800d0f4 <HAL_SPI_TransmitReceive+0x2a4>
 800d286:	e0f2      	b.n	800d46e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	f003 0302 	and.w	r3, r3, #2
 800d292:	2b02      	cmp	r3, #2
 800d294:	d121      	bne.n	800d2da <HAL_SPI_TransmitReceive+0x48a>
 800d296:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d01e      	beq.n	800d2da <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d29c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d29e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d218      	bcs.n	800d2da <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3320      	adds	r3, #32
 800d2b2:	7812      	ldrb	r2, [r2, #0]
 800d2b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d2e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80ba 	beq.w	800d45e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	695b      	ldr	r3, [r3, #20]
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d11b      	bne.n	800d330 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d304:	7812      	ldrb	r2, [r2, #0]
 800d306:	b2d2      	uxtb	r2, r2
 800d308:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	3b01      	subs	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d32c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d32e:	e096      	b.n	800d45e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d330:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d332:	8bfb      	ldrh	r3, [r7, #30]
 800d334:	429a      	cmp	r2, r3
 800d336:	d24a      	bcs.n	800d3ce <HAL_SPI_TransmitReceive+0x57e>
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d045      	beq.n	800d3ce <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d34e:	7812      	ldrb	r2, [r2, #0]
 800d350:	b2d2      	uxtb	r2, r2
 800d352:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d36a:	7812      	ldrb	r2, [r2, #0]
 800d36c:	b2d2      	uxtb	r2, r2
 800d36e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d386:	7812      	ldrb	r2, [r2, #0]
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3a2:	7812      	ldrb	r2, [r2, #0]
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	3b04      	subs	r3, #4
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d3cc:	e047      	b.n	800d45e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d3ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d820      	bhi.n	800d416 <HAL_SPI_TransmitReceive+0x5c6>
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d01b      	beq.n	800d416 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3ea:	7812      	ldrb	r2, [r2, #0]
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d412:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d414:	e023      	b.n	800d45e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d416:	f7f8 faeb 	bl	80059f0 <HAL_GetTick>
 800d41a:	4602      	mov	r2, r0
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d422:	429a      	cmp	r2, r3
 800d424:	d803      	bhi.n	800d42e <HAL_SPI_TransmitReceive+0x5de>
 800d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42c:	d102      	bne.n	800d434 <HAL_SPI_TransmitReceive+0x5e4>
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	2b00      	cmp	r3, #0
 800d432:	d114      	bne.n	800d45e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 f845 	bl	800d4c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d440:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e02d      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d45e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d460:	2b00      	cmp	r3, #0
 800d462:	f47f af11 	bne.w	800d288 <HAL_SPI_TransmitReceive+0x438>
 800d466:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f47f af0d 	bne.w	800d288 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d474:	2200      	movs	r2, #0
 800d476:	2108      	movs	r1, #8
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 f8c3 	bl	800d604 <SPI_WaitOnFlagUntilTimeout>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d007      	beq.n	800d494 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d48a:	f043 0220 	orr.w	r2, r3, #32
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 f815 	bl	800d4c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e000      	b.n	800d4ba <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
  }
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3730      	adds	r7, #48	@ 0x30
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop

0800d4c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	699a      	ldr	r2, [r3, #24]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f042 0208 	orr.w	r2, r2, #8
 800d4e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	699a      	ldr	r2, [r3, #24]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f042 0210 	orr.w	r2, r2, #16
 800d4f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f022 0201 	bic.w	r2, r2, #1
 800d502:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6919      	ldr	r1, [r3, #16]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	4b3c      	ldr	r3, [pc, #240]	@ (800d600 <SPI_CloseTransfer+0x13c>)
 800d510:	400b      	ands	r3, r1
 800d512:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689a      	ldr	r2, [r3, #8]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d522:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d014      	beq.n	800d55a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f003 0320 	and.w	r3, r3, #32
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00f      	beq.n	800d55a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d540:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	699a      	ldr	r2, [r3, #24]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f042 0220 	orr.w	r2, r2, #32
 800d558:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b03      	cmp	r3, #3
 800d564:	d014      	beq.n	800d590 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00f      	beq.n	800d590 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d576:	f043 0204 	orr.w	r2, r3, #4
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	699a      	ldr	r2, [r3, #24]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d58e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00f      	beq.n	800d5ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5a0:	f043 0201 	orr.w	r2, r3, #1
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	699a      	ldr	r2, [r3, #24]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00f      	beq.n	800d5e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5ca:	f043 0208 	orr.w	r2, r3, #8
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	699a      	ldr	r2, [r3, #24]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d5e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d5f4:	bf00      	nop
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	fffffc90 	.word	0xfffffc90

0800d604 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	4613      	mov	r3, r2
 800d612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d614:	e010      	b.n	800d638 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d616:	f7f8 f9eb 	bl	80059f0 <HAL_GetTick>
 800d61a:	4602      	mov	r2, r0
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d803      	bhi.n	800d62e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62c:	d102      	bne.n	800d634 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	e00f      	b.n	800d658 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	695a      	ldr	r2, [r3, #20]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	4013      	ands	r3, r2
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	429a      	cmp	r2, r3
 800d646:	bf0c      	ite	eq
 800d648:	2301      	moveq	r3, #1
 800d64a:	2300      	movne	r3, #0
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	461a      	mov	r2, r3
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	429a      	cmp	r2, r3
 800d654:	d0df      	beq.n	800d616 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66c:	095b      	lsrs	r3, r3, #5
 800d66e:	3301      	adds	r3, #1
 800d670:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	3301      	adds	r3, #1
 800d678:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	3307      	adds	r3, #7
 800d67e:	08db      	lsrs	r3, r3, #3
 800d680:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	fb02 f303 	mul.w	r3, r2, r3
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e049      	b.n	800d73c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7f7 fc8b 	bl	8004fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f000 fc57 	bl	800df88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b01      	cmp	r3, #1
 800d756:	d001      	beq.n	800d75c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	e054      	b.n	800d806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f042 0201 	orr.w	r2, r2, #1
 800d772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a26      	ldr	r2, [pc, #152]	@ (800d814 <HAL_TIM_Base_Start_IT+0xd0>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d022      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d786:	d01d      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a22      	ldr	r2, [pc, #136]	@ (800d818 <HAL_TIM_Base_Start_IT+0xd4>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d018      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a21      	ldr	r2, [pc, #132]	@ (800d81c <HAL_TIM_Base_Start_IT+0xd8>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d013      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a1f      	ldr	r2, [pc, #124]	@ (800d820 <HAL_TIM_Base_Start_IT+0xdc>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00e      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d824 <HAL_TIM_Base_Start_IT+0xe0>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d009      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d828 <HAL_TIM_Base_Start_IT+0xe4>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d004      	beq.n	800d7c4 <HAL_TIM_Base_Start_IT+0x80>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a1b      	ldr	r2, [pc, #108]	@ (800d82c <HAL_TIM_Base_Start_IT+0xe8>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d115      	bne.n	800d7f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	4b19      	ldr	r3, [pc, #100]	@ (800d830 <HAL_TIM_Base_Start_IT+0xec>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b06      	cmp	r3, #6
 800d7d4:	d015      	beq.n	800d802 <HAL_TIM_Base_Start_IT+0xbe>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7dc:	d011      	beq.n	800d802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f042 0201 	orr.w	r2, r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7ee:	e008      	b.n	800d802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f042 0201 	orr.w	r2, r2, #1
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	e000      	b.n	800d804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	40010000 	.word	0x40010000
 800d818:	40000400 	.word	0x40000400
 800d81c:	40000800 	.word	0x40000800
 800d820:	40000c00 	.word	0x40000c00
 800d824:	40010400 	.word	0x40010400
 800d828:	40001800 	.word	0x40001800
 800d82c:	40014000 	.word	0x40014000
 800d830:	00010007 	.word	0x00010007

0800d834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d101      	bne.n	800d846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	e049      	b.n	800d8da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7f7 fb6e 	bl	8004f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2202      	movs	r2, #2
 800d864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	3304      	adds	r3, #4
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f000 fb88 	bl	800df88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d109      	bne.n	800d908 <HAL_TIM_PWM_Start+0x24>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	bf14      	ite	ne
 800d900:	2301      	movne	r3, #1
 800d902:	2300      	moveq	r3, #0
 800d904:	b2db      	uxtb	r3, r3
 800d906:	e03c      	b.n	800d982 <HAL_TIM_PWM_Start+0x9e>
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b04      	cmp	r3, #4
 800d90c:	d109      	bne.n	800d922 <HAL_TIM_PWM_Start+0x3e>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b01      	cmp	r3, #1
 800d918:	bf14      	ite	ne
 800d91a:	2301      	movne	r3, #1
 800d91c:	2300      	moveq	r3, #0
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	e02f      	b.n	800d982 <HAL_TIM_PWM_Start+0x9e>
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2b08      	cmp	r3, #8
 800d926:	d109      	bne.n	800d93c <HAL_TIM_PWM_Start+0x58>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b01      	cmp	r3, #1
 800d932:	bf14      	ite	ne
 800d934:	2301      	movne	r3, #1
 800d936:	2300      	moveq	r3, #0
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	e022      	b.n	800d982 <HAL_TIM_PWM_Start+0x9e>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b0c      	cmp	r3, #12
 800d940:	d109      	bne.n	800d956 <HAL_TIM_PWM_Start+0x72>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	bf14      	ite	ne
 800d94e:	2301      	movne	r3, #1
 800d950:	2300      	moveq	r3, #0
 800d952:	b2db      	uxtb	r3, r3
 800d954:	e015      	b.n	800d982 <HAL_TIM_PWM_Start+0x9e>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b10      	cmp	r3, #16
 800d95a:	d109      	bne.n	800d970 <HAL_TIM_PWM_Start+0x8c>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b01      	cmp	r3, #1
 800d966:	bf14      	ite	ne
 800d968:	2301      	movne	r3, #1
 800d96a:	2300      	moveq	r3, #0
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	e008      	b.n	800d982 <HAL_TIM_PWM_Start+0x9e>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b01      	cmp	r3, #1
 800d97a:	bf14      	ite	ne
 800d97c:	2301      	movne	r3, #1
 800d97e:	2300      	moveq	r3, #0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e0a1      	b.n	800dace <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <HAL_TIM_PWM_Start+0xb6>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2202      	movs	r2, #2
 800d994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d998:	e023      	b.n	800d9e2 <HAL_TIM_PWM_Start+0xfe>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	d104      	bne.n	800d9aa <HAL_TIM_PWM_Start+0xc6>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9a8:	e01b      	b.n	800d9e2 <HAL_TIM_PWM_Start+0xfe>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b08      	cmp	r3, #8
 800d9ae:	d104      	bne.n	800d9ba <HAL_TIM_PWM_Start+0xd6>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9b8:	e013      	b.n	800d9e2 <HAL_TIM_PWM_Start+0xfe>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b0c      	cmp	r3, #12
 800d9be:	d104      	bne.n	800d9ca <HAL_TIM_PWM_Start+0xe6>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d9c8:	e00b      	b.n	800d9e2 <HAL_TIM_PWM_Start+0xfe>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b10      	cmp	r3, #16
 800d9ce:	d104      	bne.n	800d9da <HAL_TIM_PWM_Start+0xf6>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d9d8:	e003      	b.n	800d9e2 <HAL_TIM_PWM_Start+0xfe>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2202      	movs	r2, #2
 800d9de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fe48 	bl	800e680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a38      	ldr	r2, [pc, #224]	@ (800dad8 <HAL_TIM_PWM_Start+0x1f4>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d013      	beq.n	800da22 <HAL_TIM_PWM_Start+0x13e>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a37      	ldr	r2, [pc, #220]	@ (800dadc <HAL_TIM_PWM_Start+0x1f8>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d00e      	beq.n	800da22 <HAL_TIM_PWM_Start+0x13e>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a35      	ldr	r2, [pc, #212]	@ (800dae0 <HAL_TIM_PWM_Start+0x1fc>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d009      	beq.n	800da22 <HAL_TIM_PWM_Start+0x13e>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a34      	ldr	r2, [pc, #208]	@ (800dae4 <HAL_TIM_PWM_Start+0x200>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d004      	beq.n	800da22 <HAL_TIM_PWM_Start+0x13e>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a32      	ldr	r2, [pc, #200]	@ (800dae8 <HAL_TIM_PWM_Start+0x204>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d101      	bne.n	800da26 <HAL_TIM_PWM_Start+0x142>
 800da22:	2301      	movs	r3, #1
 800da24:	e000      	b.n	800da28 <HAL_TIM_PWM_Start+0x144>
 800da26:	2300      	movs	r3, #0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d007      	beq.n	800da3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a25      	ldr	r2, [pc, #148]	@ (800dad8 <HAL_TIM_PWM_Start+0x1f4>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d022      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da4e:	d01d      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a25      	ldr	r2, [pc, #148]	@ (800daec <HAL_TIM_PWM_Start+0x208>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d018      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a24      	ldr	r2, [pc, #144]	@ (800daf0 <HAL_TIM_PWM_Start+0x20c>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d013      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a22      	ldr	r2, [pc, #136]	@ (800daf4 <HAL_TIM_PWM_Start+0x210>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d00e      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a1a      	ldr	r2, [pc, #104]	@ (800dadc <HAL_TIM_PWM_Start+0x1f8>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d009      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a1e      	ldr	r2, [pc, #120]	@ (800daf8 <HAL_TIM_PWM_Start+0x214>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d004      	beq.n	800da8c <HAL_TIM_PWM_Start+0x1a8>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a16      	ldr	r2, [pc, #88]	@ (800dae0 <HAL_TIM_PWM_Start+0x1fc>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d115      	bne.n	800dab8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	689a      	ldr	r2, [r3, #8]
 800da92:	4b1a      	ldr	r3, [pc, #104]	@ (800dafc <HAL_TIM_PWM_Start+0x218>)
 800da94:	4013      	ands	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b06      	cmp	r3, #6
 800da9c:	d015      	beq.n	800daca <HAL_TIM_PWM_Start+0x1e6>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daa4:	d011      	beq.n	800daca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0201 	orr.w	r2, r2, #1
 800dab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dab6:	e008      	b.n	800daca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f042 0201 	orr.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	e000      	b.n	800dacc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40014000 	.word	0x40014000
 800dae4:	40014400 	.word	0x40014400
 800dae8:	40014800 	.word	0x40014800
 800daec:	40000400 	.word	0x40000400
 800daf0:	40000800 	.word	0x40000800
 800daf4:	40000c00 	.word	0x40000c00
 800daf8:	40001800 	.word	0x40001800
 800dafc:	00010007 	.word	0x00010007

0800db00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f003 0302 	and.w	r3, r3, #2
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d020      	beq.n	800db64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f003 0302 	and.w	r3, r3, #2
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01b      	beq.n	800db64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f06f 0202 	mvn.w	r2, #2
 800db34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	f003 0303 	and.w	r3, r3, #3
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f9fe 	bl	800df4c <HAL_TIM_IC_CaptureCallback>
 800db50:	e005      	b.n	800db5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f9f0 	bl	800df38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 fa01 	bl	800df60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f003 0304 	and.w	r3, r3, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d020      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01b      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f06f 0204 	mvn.w	r2, #4
 800db80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2202      	movs	r2, #2
 800db86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f9d8 	bl	800df4c <HAL_TIM_IC_CaptureCallback>
 800db9c:	e005      	b.n	800dbaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f9ca 	bl	800df38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f9db 	bl	800df60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d020      	beq.n	800dbfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f003 0308 	and.w	r3, r3, #8
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01b      	beq.n	800dbfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f06f 0208 	mvn.w	r2, #8
 800dbcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	f003 0303 	and.w	r3, r3, #3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f9b2 	bl	800df4c <HAL_TIM_IC_CaptureCallback>
 800dbe8:	e005      	b.n	800dbf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f9a4 	bl	800df38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f9b5 	bl	800df60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f003 0310 	and.w	r3, r3, #16
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d020      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f003 0310 	and.w	r3, r3, #16
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d01b      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f06f 0210 	mvn.w	r2, #16
 800dc18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d003      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f98c 	bl	800df4c <HAL_TIM_IC_CaptureCallback>
 800dc34:	e005      	b.n	800dc42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f97e 	bl	800df38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f98f 	bl	800df60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00c      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f003 0301 	and.w	r3, r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d007      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f06f 0201 	mvn.w	r2, #1
 800dc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7f6 fbc6 	bl	80043f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00c      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d007      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fdb1 	bl	800e7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fda9 	bl	800e810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00c      	beq.n	800dce2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 f949 	bl	800df74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f003 0320 	and.w	r3, r3, #32
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00c      	beq.n	800dd06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d007      	beq.n	800dd06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f06f 0220 	mvn.w	r2, #32
 800dcfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fd71 	bl	800e7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd06:	bf00      	nop
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
	...

0800dd10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d101      	bne.n	800dd2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e0ff      	b.n	800df2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b14      	cmp	r3, #20
 800dd3a:	f200 80f0 	bhi.w	800df1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd99 	.word	0x0800dd99
 800dd48:	0800df1f 	.word	0x0800df1f
 800dd4c:	0800df1f 	.word	0x0800df1f
 800dd50:	0800df1f 	.word	0x0800df1f
 800dd54:	0800ddd9 	.word	0x0800ddd9
 800dd58:	0800df1f 	.word	0x0800df1f
 800dd5c:	0800df1f 	.word	0x0800df1f
 800dd60:	0800df1f 	.word	0x0800df1f
 800dd64:	0800de1b 	.word	0x0800de1b
 800dd68:	0800df1f 	.word	0x0800df1f
 800dd6c:	0800df1f 	.word	0x0800df1f
 800dd70:	0800df1f 	.word	0x0800df1f
 800dd74:	0800de5b 	.word	0x0800de5b
 800dd78:	0800df1f 	.word	0x0800df1f
 800dd7c:	0800df1f 	.word	0x0800df1f
 800dd80:	0800df1f 	.word	0x0800df1f
 800dd84:	0800de9d 	.word	0x0800de9d
 800dd88:	0800df1f 	.word	0x0800df1f
 800dd8c:	0800df1f 	.word	0x0800df1f
 800dd90:	0800df1f 	.word	0x0800df1f
 800dd94:	0800dedd 	.word	0x0800dedd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68b9      	ldr	r1, [r7, #8]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f998 	bl	800e0d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	699a      	ldr	r2, [r3, #24]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f042 0208 	orr.w	r2, r2, #8
 800ddb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	699a      	ldr	r2, [r3, #24]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 0204 	bic.w	r2, r2, #4
 800ddc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6999      	ldr	r1, [r3, #24]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	691a      	ldr	r2, [r3, #16]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	619a      	str	r2, [r3, #24]
      break;
 800ddd6:	e0a5      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68b9      	ldr	r1, [r7, #8]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 fa08 	bl	800e1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	699a      	ldr	r2, [r3, #24]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	699a      	ldr	r2, [r3, #24]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	6999      	ldr	r1, [r3, #24]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	021a      	lsls	r2, r3, #8
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	430a      	orrs	r2, r1
 800de16:	619a      	str	r2, [r3, #24]
      break;
 800de18:	e084      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68b9      	ldr	r1, [r7, #8]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 fa71 	bl	800e308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	69da      	ldr	r2, [r3, #28]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f042 0208 	orr.w	r2, r2, #8
 800de34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	69da      	ldr	r2, [r3, #28]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f022 0204 	bic.w	r2, r2, #4
 800de44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	69d9      	ldr	r1, [r3, #28]
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	691a      	ldr	r2, [r3, #16]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	61da      	str	r2, [r3, #28]
      break;
 800de58:	e064      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68b9      	ldr	r1, [r7, #8]
 800de60:	4618      	mov	r0, r3
 800de62:	f000 fad9 	bl	800e418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	69da      	ldr	r2, [r3, #28]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	69da      	ldr	r2, [r3, #28]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	69d9      	ldr	r1, [r3, #28]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	021a      	lsls	r2, r3, #8
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	430a      	orrs	r2, r1
 800de98:	61da      	str	r2, [r3, #28]
      break;
 800de9a:	e043      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 fb22 	bl	800e4ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f042 0208 	orr.w	r2, r2, #8
 800deb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f022 0204 	bic.w	r2, r2, #4
 800dec6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	691a      	ldr	r2, [r3, #16]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	430a      	orrs	r2, r1
 800ded8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800deda:	e023      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68b9      	ldr	r1, [r7, #8]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 fb66 	bl	800e5b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800def6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	021a      	lsls	r2, r3, #8
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	430a      	orrs	r2, r1
 800df1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df1c:	e002      	b.n	800df24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	75fb      	strb	r3, [r7, #23]
      break;
 800df22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop

0800df38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a46      	ldr	r2, [pc, #280]	@ (800e0b4 <TIM_Base_SetConfig+0x12c>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d013      	beq.n	800dfc8 <TIM_Base_SetConfig+0x40>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfa6:	d00f      	beq.n	800dfc8 <TIM_Base_SetConfig+0x40>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a43      	ldr	r2, [pc, #268]	@ (800e0b8 <TIM_Base_SetConfig+0x130>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d00b      	beq.n	800dfc8 <TIM_Base_SetConfig+0x40>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a42      	ldr	r2, [pc, #264]	@ (800e0bc <TIM_Base_SetConfig+0x134>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d007      	beq.n	800dfc8 <TIM_Base_SetConfig+0x40>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a41      	ldr	r2, [pc, #260]	@ (800e0c0 <TIM_Base_SetConfig+0x138>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d003      	beq.n	800dfc8 <TIM_Base_SetConfig+0x40>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a40      	ldr	r2, [pc, #256]	@ (800e0c4 <TIM_Base_SetConfig+0x13c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d108      	bne.n	800dfda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4a35      	ldr	r2, [pc, #212]	@ (800e0b4 <TIM_Base_SetConfig+0x12c>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d01f      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfe8:	d01b      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4a32      	ldr	r2, [pc, #200]	@ (800e0b8 <TIM_Base_SetConfig+0x130>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d017      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4a31      	ldr	r2, [pc, #196]	@ (800e0bc <TIM_Base_SetConfig+0x134>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d013      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a30      	ldr	r2, [pc, #192]	@ (800e0c0 <TIM_Base_SetConfig+0x138>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d00f      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a2f      	ldr	r2, [pc, #188]	@ (800e0c4 <TIM_Base_SetConfig+0x13c>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d00b      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a2e      	ldr	r2, [pc, #184]	@ (800e0c8 <TIM_Base_SetConfig+0x140>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d007      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a2d      	ldr	r2, [pc, #180]	@ (800e0cc <TIM_Base_SetConfig+0x144>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d003      	beq.n	800e022 <TIM_Base_SetConfig+0x9a>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a2c      	ldr	r2, [pc, #176]	@ (800e0d0 <TIM_Base_SetConfig+0x148>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d108      	bne.n	800e034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	4313      	orrs	r3, r2
 800e032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a16      	ldr	r2, [pc, #88]	@ (800e0b4 <TIM_Base_SetConfig+0x12c>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d00f      	beq.n	800e080 <TIM_Base_SetConfig+0xf8>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a18      	ldr	r2, [pc, #96]	@ (800e0c4 <TIM_Base_SetConfig+0x13c>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d00b      	beq.n	800e080 <TIM_Base_SetConfig+0xf8>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a17      	ldr	r2, [pc, #92]	@ (800e0c8 <TIM_Base_SetConfig+0x140>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d007      	beq.n	800e080 <TIM_Base_SetConfig+0xf8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a16      	ldr	r2, [pc, #88]	@ (800e0cc <TIM_Base_SetConfig+0x144>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d003      	beq.n	800e080 <TIM_Base_SetConfig+0xf8>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a15      	ldr	r2, [pc, #84]	@ (800e0d0 <TIM_Base_SetConfig+0x148>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d103      	bne.n	800e088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	691a      	ldr	r2, [r3, #16]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	2b01      	cmp	r3, #1
 800e098:	d105      	bne.n	800e0a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	f023 0201 	bic.w	r2, r3, #1
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	611a      	str	r2, [r3, #16]
  }
}
 800e0a6:	bf00      	nop
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	40010000 	.word	0x40010000
 800e0b8:	40000400 	.word	0x40000400
 800e0bc:	40000800 	.word	0x40000800
 800e0c0:	40000c00 	.word	0x40000c00
 800e0c4:	40010400 	.word	0x40010400
 800e0c8:	40014000 	.word	0x40014000
 800e0cc:	40014400 	.word	0x40014400
 800e0d0:	40014800 	.word	0x40014800

0800e0d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	f023 0201 	bic.w	r2, r3, #1
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4b37      	ldr	r3, [pc, #220]	@ (800e1dc <TIM_OC1_SetConfig+0x108>)
 800e100:	4013      	ands	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f023 0302 	bic.w	r3, r3, #2
 800e11c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	4313      	orrs	r3, r2
 800e126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a2d      	ldr	r2, [pc, #180]	@ (800e1e0 <TIM_OC1_SetConfig+0x10c>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d00f      	beq.n	800e150 <TIM_OC1_SetConfig+0x7c>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a2c      	ldr	r2, [pc, #176]	@ (800e1e4 <TIM_OC1_SetConfig+0x110>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d00b      	beq.n	800e150 <TIM_OC1_SetConfig+0x7c>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a2b      	ldr	r2, [pc, #172]	@ (800e1e8 <TIM_OC1_SetConfig+0x114>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d007      	beq.n	800e150 <TIM_OC1_SetConfig+0x7c>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a2a      	ldr	r2, [pc, #168]	@ (800e1ec <TIM_OC1_SetConfig+0x118>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d003      	beq.n	800e150 <TIM_OC1_SetConfig+0x7c>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a29      	ldr	r2, [pc, #164]	@ (800e1f0 <TIM_OC1_SetConfig+0x11c>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d10c      	bne.n	800e16a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	f023 0308 	bic.w	r3, r3, #8
 800e156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	697a      	ldr	r2, [r7, #20]
 800e15e:	4313      	orrs	r3, r2
 800e160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f023 0304 	bic.w	r3, r3, #4
 800e168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4a1c      	ldr	r2, [pc, #112]	@ (800e1e0 <TIM_OC1_SetConfig+0x10c>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d00f      	beq.n	800e192 <TIM_OC1_SetConfig+0xbe>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	4a1b      	ldr	r2, [pc, #108]	@ (800e1e4 <TIM_OC1_SetConfig+0x110>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d00b      	beq.n	800e192 <TIM_OC1_SetConfig+0xbe>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4a1a      	ldr	r2, [pc, #104]	@ (800e1e8 <TIM_OC1_SetConfig+0x114>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d007      	beq.n	800e192 <TIM_OC1_SetConfig+0xbe>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4a19      	ldr	r2, [pc, #100]	@ (800e1ec <TIM_OC1_SetConfig+0x118>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d003      	beq.n	800e192 <TIM_OC1_SetConfig+0xbe>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a18      	ldr	r2, [pc, #96]	@ (800e1f0 <TIM_OC1_SetConfig+0x11c>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d111      	bne.n	800e1b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	695b      	ldr	r3, [r3, #20]
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	621a      	str	r2, [r3, #32]
}
 800e1d0:	bf00      	nop
 800e1d2:	371c      	adds	r7, #28
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	fffeff8f 	.word	0xfffeff8f
 800e1e0:	40010000 	.word	0x40010000
 800e1e4:	40010400 	.word	0x40010400
 800e1e8:	40014000 	.word	0x40014000
 800e1ec:	40014400 	.word	0x40014400
 800e1f0:	40014800 	.word	0x40014800

0800e1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b087      	sub	sp, #28
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	f023 0210 	bic.w	r2, r3, #16
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	4b34      	ldr	r3, [pc, #208]	@ (800e2f0 <TIM_OC2_SetConfig+0xfc>)
 800e220:	4013      	ands	r3, r2
 800e222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4313      	orrs	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	f023 0320 	bic.w	r3, r3, #32
 800e23e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	011b      	lsls	r3, r3, #4
 800e246:	697a      	ldr	r2, [r7, #20]
 800e248:	4313      	orrs	r3, r2
 800e24a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a29      	ldr	r2, [pc, #164]	@ (800e2f4 <TIM_OC2_SetConfig+0x100>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d003      	beq.n	800e25c <TIM_OC2_SetConfig+0x68>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a28      	ldr	r2, [pc, #160]	@ (800e2f8 <TIM_OC2_SetConfig+0x104>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d10d      	bne.n	800e278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	011b      	lsls	r3, r3, #4
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a1e      	ldr	r2, [pc, #120]	@ (800e2f4 <TIM_OC2_SetConfig+0x100>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d00f      	beq.n	800e2a0 <TIM_OC2_SetConfig+0xac>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a1d      	ldr	r2, [pc, #116]	@ (800e2f8 <TIM_OC2_SetConfig+0x104>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d00b      	beq.n	800e2a0 <TIM_OC2_SetConfig+0xac>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a1c      	ldr	r2, [pc, #112]	@ (800e2fc <TIM_OC2_SetConfig+0x108>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d007      	beq.n	800e2a0 <TIM_OC2_SetConfig+0xac>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a1b      	ldr	r2, [pc, #108]	@ (800e300 <TIM_OC2_SetConfig+0x10c>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d003      	beq.n	800e2a0 <TIM_OC2_SetConfig+0xac>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a1a      	ldr	r2, [pc, #104]	@ (800e304 <TIM_OC2_SetConfig+0x110>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d113      	bne.n	800e2c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	693a      	ldr	r2, [r7, #16]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	693a      	ldr	r2, [r7, #16]
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	693a      	ldr	r2, [r7, #16]
 800e2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	621a      	str	r2, [r3, #32]
}
 800e2e2:	bf00      	nop
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	feff8fff 	.word	0xfeff8fff
 800e2f4:	40010000 	.word	0x40010000
 800e2f8:	40010400 	.word	0x40010400
 800e2fc:	40014000 	.word	0x40014000
 800e300:	40014400 	.word	0x40014400
 800e304:	40014800 	.word	0x40014800

0800e308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e308:	b480      	push	{r7}
 800e30a:	b087      	sub	sp, #28
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	69db      	ldr	r3, [r3, #28]
 800e32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	4b33      	ldr	r3, [pc, #204]	@ (800e400 <TIM_OC3_SetConfig+0xf8>)
 800e334:	4013      	ands	r3, r2
 800e336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f023 0303 	bic.w	r3, r3, #3
 800e33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	4313      	orrs	r3, r2
 800e348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	021b      	lsls	r3, r3, #8
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	4313      	orrs	r3, r2
 800e35c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a28      	ldr	r2, [pc, #160]	@ (800e404 <TIM_OC3_SetConfig+0xfc>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d003      	beq.n	800e36e <TIM_OC3_SetConfig+0x66>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a27      	ldr	r2, [pc, #156]	@ (800e408 <TIM_OC3_SetConfig+0x100>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d10d      	bne.n	800e38a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	021b      	lsls	r3, r3, #8
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	4313      	orrs	r3, r2
 800e380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4a1d      	ldr	r2, [pc, #116]	@ (800e404 <TIM_OC3_SetConfig+0xfc>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d00f      	beq.n	800e3b2 <TIM_OC3_SetConfig+0xaa>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a1c      	ldr	r2, [pc, #112]	@ (800e408 <TIM_OC3_SetConfig+0x100>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d00b      	beq.n	800e3b2 <TIM_OC3_SetConfig+0xaa>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a1b      	ldr	r2, [pc, #108]	@ (800e40c <TIM_OC3_SetConfig+0x104>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d007      	beq.n	800e3b2 <TIM_OC3_SetConfig+0xaa>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a1a      	ldr	r2, [pc, #104]	@ (800e410 <TIM_OC3_SetConfig+0x108>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d003      	beq.n	800e3b2 <TIM_OC3_SetConfig+0xaa>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a19      	ldr	r2, [pc, #100]	@ (800e414 <TIM_OC3_SetConfig+0x10c>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d113      	bne.n	800e3da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	011b      	lsls	r3, r3, #4
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	011b      	lsls	r3, r3, #4
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	621a      	str	r2, [r3, #32]
}
 800e3f4:	bf00      	nop
 800e3f6:	371c      	adds	r7, #28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	fffeff8f 	.word	0xfffeff8f
 800e404:	40010000 	.word	0x40010000
 800e408:	40010400 	.word	0x40010400
 800e40c:	40014000 	.word	0x40014000
 800e410:	40014400 	.word	0x40014400
 800e414:	40014800 	.word	0x40014800

0800e418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e418:	b480      	push	{r7}
 800e41a:	b087      	sub	sp, #28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	4b24      	ldr	r3, [pc, #144]	@ (800e4d4 <TIM_OC4_SetConfig+0xbc>)
 800e444:	4013      	ands	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	021b      	lsls	r3, r3, #8
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	4313      	orrs	r3, r2
 800e45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	031b      	lsls	r3, r3, #12
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a19      	ldr	r2, [pc, #100]	@ (800e4d8 <TIM_OC4_SetConfig+0xc0>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d00f      	beq.n	800e498 <TIM_OC4_SetConfig+0x80>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a18      	ldr	r2, [pc, #96]	@ (800e4dc <TIM_OC4_SetConfig+0xc4>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d00b      	beq.n	800e498 <TIM_OC4_SetConfig+0x80>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a17      	ldr	r2, [pc, #92]	@ (800e4e0 <TIM_OC4_SetConfig+0xc8>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d007      	beq.n	800e498 <TIM_OC4_SetConfig+0x80>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a16      	ldr	r2, [pc, #88]	@ (800e4e4 <TIM_OC4_SetConfig+0xcc>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d003      	beq.n	800e498 <TIM_OC4_SetConfig+0x80>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a15      	ldr	r2, [pc, #84]	@ (800e4e8 <TIM_OC4_SetConfig+0xd0>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d109      	bne.n	800e4ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e49e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	019b      	lsls	r3, r3, #6
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	621a      	str	r2, [r3, #32]
}
 800e4c6:	bf00      	nop
 800e4c8:	371c      	adds	r7, #28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	feff8fff 	.word	0xfeff8fff
 800e4d8:	40010000 	.word	0x40010000
 800e4dc:	40010400 	.word	0x40010400
 800e4e0:	40014000 	.word	0x40014000
 800e4e4:	40014400 	.word	0x40014400
 800e4e8:	40014800 	.word	0x40014800

0800e4ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a1b      	ldr	r3, [r3, #32]
 800e500:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	4b21      	ldr	r3, [pc, #132]	@ (800e59c <TIM_OC5_SetConfig+0xb0>)
 800e518:	4013      	ands	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4313      	orrs	r3, r2
 800e524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e52c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	041b      	lsls	r3, r3, #16
 800e534:	693a      	ldr	r2, [r7, #16]
 800e536:	4313      	orrs	r3, r2
 800e538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a18      	ldr	r2, [pc, #96]	@ (800e5a0 <TIM_OC5_SetConfig+0xb4>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d00f      	beq.n	800e562 <TIM_OC5_SetConfig+0x76>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a17      	ldr	r2, [pc, #92]	@ (800e5a4 <TIM_OC5_SetConfig+0xb8>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d00b      	beq.n	800e562 <TIM_OC5_SetConfig+0x76>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a16      	ldr	r2, [pc, #88]	@ (800e5a8 <TIM_OC5_SetConfig+0xbc>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d007      	beq.n	800e562 <TIM_OC5_SetConfig+0x76>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a15      	ldr	r2, [pc, #84]	@ (800e5ac <TIM_OC5_SetConfig+0xc0>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d003      	beq.n	800e562 <TIM_OC5_SetConfig+0x76>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a14      	ldr	r2, [pc, #80]	@ (800e5b0 <TIM_OC5_SetConfig+0xc4>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d109      	bne.n	800e576 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e568:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	695b      	ldr	r3, [r3, #20]
 800e56e:	021b      	lsls	r3, r3, #8
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	4313      	orrs	r3, r2
 800e574:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	697a      	ldr	r2, [r7, #20]
 800e57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	693a      	ldr	r2, [r7, #16]
 800e58e:	621a      	str	r2, [r3, #32]
}
 800e590:	bf00      	nop
 800e592:	371c      	adds	r7, #28
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	fffeff8f 	.word	0xfffeff8f
 800e5a0:	40010000 	.word	0x40010000
 800e5a4:	40010400 	.word	0x40010400
 800e5a8:	40014000 	.word	0x40014000
 800e5ac:	40014400 	.word	0x40014400
 800e5b0:	40014800 	.word	0x40014800

0800e5b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4b22      	ldr	r3, [pc, #136]	@ (800e668 <TIM_OC6_SetConfig+0xb4>)
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	021b      	lsls	r3, r3, #8
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	051b      	lsls	r3, r3, #20
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	4313      	orrs	r3, r2
 800e602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a19      	ldr	r2, [pc, #100]	@ (800e66c <TIM_OC6_SetConfig+0xb8>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d00f      	beq.n	800e62c <TIM_OC6_SetConfig+0x78>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a18      	ldr	r2, [pc, #96]	@ (800e670 <TIM_OC6_SetConfig+0xbc>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d00b      	beq.n	800e62c <TIM_OC6_SetConfig+0x78>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a17      	ldr	r2, [pc, #92]	@ (800e674 <TIM_OC6_SetConfig+0xc0>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d007      	beq.n	800e62c <TIM_OC6_SetConfig+0x78>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a16      	ldr	r2, [pc, #88]	@ (800e678 <TIM_OC6_SetConfig+0xc4>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d003      	beq.n	800e62c <TIM_OC6_SetConfig+0x78>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a15      	ldr	r2, [pc, #84]	@ (800e67c <TIM_OC6_SetConfig+0xc8>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d109      	bne.n	800e640 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e632:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	695b      	ldr	r3, [r3, #20]
 800e638:	029b      	lsls	r3, r3, #10
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	685a      	ldr	r2, [r3, #4]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	621a      	str	r2, [r3, #32]
}
 800e65a:	bf00      	nop
 800e65c:	371c      	adds	r7, #28
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	feff8fff 	.word	0xfeff8fff
 800e66c:	40010000 	.word	0x40010000
 800e670:	40010400 	.word	0x40010400
 800e674:	40014000 	.word	0x40014000
 800e678:	40014400 	.word	0x40014400
 800e67c:	40014800 	.word	0x40014800

0800e680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e680:	b480      	push	{r7}
 800e682:	b087      	sub	sp, #28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f003 031f 	and.w	r3, r3, #31
 800e692:	2201      	movs	r2, #1
 800e694:	fa02 f303 	lsl.w	r3, r2, r3
 800e698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6a1a      	ldr	r2, [r3, #32]
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	43db      	mvns	r3, r3
 800e6a2:	401a      	ands	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6a1a      	ldr	r2, [r3, #32]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	f003 031f 	and.w	r3, r3, #31
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800e6b8:	431a      	orrs	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	621a      	str	r2, [r3, #32]
}
 800e6be:	bf00      	nop
 800e6c0:	371c      	adds	r7, #28
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
	...

0800e6cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d101      	bne.n	800e6e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	e06d      	b.n	800e7c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a30      	ldr	r2, [pc, #192]	@ (800e7cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d004      	beq.n	800e718 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a2f      	ldr	r2, [pc, #188]	@ (800e7d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d108      	bne.n	800e72a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e71e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	4313      	orrs	r3, r2
 800e728:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e730:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	4313      	orrs	r3, r2
 800e73a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a20      	ldr	r2, [pc, #128]	@ (800e7cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d022      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e756:	d01d      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a1d      	ldr	r2, [pc, #116]	@ (800e7d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d018      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d013      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a1a      	ldr	r2, [pc, #104]	@ (800e7dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d00e      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a15      	ldr	r2, [pc, #84]	@ (800e7d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d009      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a16      	ldr	r2, [pc, #88]	@ (800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d004      	beq.n	800e794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a15      	ldr	r2, [pc, #84]	@ (800e7e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d10c      	bne.n	800e7ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e79a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	40010000 	.word	0x40010000
 800e7d0:	40010400 	.word	0x40010400
 800e7d4:	40000400 	.word	0x40000400
 800e7d8:	40000800 	.word	0x40000800
 800e7dc:	40000c00 	.word	0x40000c00
 800e7e0:	40001800 	.word	0x40001800
 800e7e4:	40014000 	.word	0x40014000

0800e7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	e042      	b.n	800e8bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7f6 fe01 	bl	8005450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2224      	movs	r2, #36	@ 0x24
 800e852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f022 0201 	bic.w	r2, r2, #1
 800e864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f001 fc8c 	bl	801018c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 fe1d 	bl	800f4b4 <UART_SetConfig>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d101      	bne.n	800e884 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e01b      	b.n	800e8bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	689a      	ldr	r2, [r3, #8]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e8a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f042 0201 	orr.w	r2, r2, #1
 800e8b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f001 fd0b 	bl	80102d0 <UART_CheckIdleState>
 800e8ba:	4603      	mov	r3, r0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08a      	sub	sp, #40	@ 0x28
 800e8c8:	af02      	add	r7, sp, #8
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8da:	2b20      	cmp	r3, #32
 800e8dc:	d17b      	bne.n	800e9d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <HAL_UART_Transmit+0x26>
 800e8e4:	88fb      	ldrh	r3, [r7, #6]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e074      	b.n	800e9d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2221      	movs	r2, #33	@ 0x21
 800e8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e8fe:	f7f7 f877 	bl	80059f0 <HAL_GetTick>
 800e902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	88fa      	ldrh	r2, [r7, #6]
 800e908:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	88fa      	ldrh	r2, [r7, #6]
 800e910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e91c:	d108      	bne.n	800e930 <HAL_UART_Transmit+0x6c>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d104      	bne.n	800e930 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	61bb      	str	r3, [r7, #24]
 800e92e:	e003      	b.n	800e938 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e934:	2300      	movs	r3, #0
 800e936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e938:	e030      	b.n	800e99c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2200      	movs	r2, #0
 800e942:	2180      	movs	r1, #128	@ 0x80
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f001 fd6d 	bl	8010424 <UART_WaitOnFlagUntilTimeout>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d005      	beq.n	800e95c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2220      	movs	r2, #32
 800e954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e958:	2303      	movs	r3, #3
 800e95a:	e03d      	b.n	800e9d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10b      	bne.n	800e97a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e970:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	3302      	adds	r3, #2
 800e976:	61bb      	str	r3, [r7, #24]
 800e978:	e007      	b.n	800e98a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	781a      	ldrb	r2, [r3, #0]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	3301      	adds	r3, #1
 800e988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e990:	b29b      	uxth	r3, r3
 800e992:	3b01      	subs	r3, #1
 800e994:	b29a      	uxth	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1c8      	bne.n	800e93a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2140      	movs	r1, #64	@ 0x40
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f001 fd36 	bl	8010424 <UART_WaitOnFlagUntilTimeout>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d005      	beq.n	800e9ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2220      	movs	r2, #32
 800e9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e9c6:	2303      	movs	r3, #3
 800e9c8:	e006      	b.n	800e9d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2220      	movs	r2, #32
 800e9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e000      	b.n	800e9d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e9d6:	2302      	movs	r3, #2
  }
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3720      	adds	r7, #32
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08a      	sub	sp, #40	@ 0x28
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9f4:	2b20      	cmp	r3, #32
 800e9f6:	d137      	bne.n	800ea68 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d002      	beq.n	800ea04 <HAL_UART_Receive_DMA+0x24>
 800e9fe:	88fb      	ldrh	r3, [r7, #6]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e030      	b.n	800ea6a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a18      	ldr	r2, [pc, #96]	@ (800ea74 <HAL_UART_Receive_DMA+0x94>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d01f      	beq.n	800ea58 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d018      	beq.n	800ea58 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	e853 3f00 	ldrex	r3, [r3]
 800ea32:	613b      	str	r3, [r7, #16]
   return(result);
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ea3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea44:	623b      	str	r3, [r7, #32]
 800ea46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	6a3a      	ldr	r2, [r7, #32]
 800ea4c:	e841 2300 	strex	r3, r2, [r1]
 800ea50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e6      	bne.n	800ea26 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ea58:	88fb      	ldrh	r3, [r7, #6]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	68b9      	ldr	r1, [r7, #8]
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f001 fd4e 	bl	8010500 <UART_Start_Receive_DMA>
 800ea64:	4603      	mov	r3, r0
 800ea66:	e000      	b.n	800ea6a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ea68:	2302      	movs	r3, #2
  }
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3728      	adds	r7, #40	@ 0x28
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	58000c00 	.word	0x58000c00

0800ea78 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b0a2      	sub	sp, #136	@ 0x88
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800ea80:	2301      	movs	r3, #1
 800ea82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea8e:	e853 3f00 	ldrex	r3, [r3]
 800ea92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ea94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea96:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ea9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eaa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eaaa:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eaae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eab0:	e841 2300 	strex	r3, r2, [r1]
 800eab4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e4      	bne.n	800ea86 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	3308      	adds	r3, #8
 800eac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eac6:	e853 3f00 	ldrex	r3, [r3]
 800eaca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eacc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eace:	4b85      	ldr	r3, [pc, #532]	@ (800ece4 <HAL_UART_Abort_IT+0x26c>)
 800ead0:	4013      	ands	r3, r2
 800ead2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3308      	adds	r3, #8
 800eada:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eadc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800eade:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eae4:	e841 2300 	strex	r3, r2, [r1]
 800eae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eaea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1e5      	bne.n	800eabc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d118      	bne.n	800eb2a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb08:	f023 0310 	bic.w	r3, r3, #16
 800eb0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	461a      	mov	r2, r3
 800eb14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb16:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb1e:	e841 2300 	strex	r3, r2, [r1]
 800eb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e6      	bne.n	800eaf8 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00f      	beq.n	800eb52 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb3c:	2b80      	cmp	r3, #128	@ 0x80
 800eb3e:	d104      	bne.n	800eb4a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb44:	4a68      	ldr	r2, [pc, #416]	@ (800ece8 <HAL_UART_Abort_IT+0x270>)
 800eb46:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb48:	e003      	b.n	800eb52 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb4e:	2200      	movs	r2, #0
 800eb50:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d011      	beq.n	800eb80 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb66:	2b40      	cmp	r3, #64	@ 0x40
 800eb68:	d105      	bne.n	800eb76 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb70:	4a5e      	ldr	r2, [pc, #376]	@ (800ecec <HAL_UART_Abort_IT+0x274>)
 800eb72:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb74:	e004      	b.n	800eb80 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	689b      	ldr	r3, [r3, #8]
 800eb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb8a:	2b80      	cmp	r3, #128	@ 0x80
 800eb8c:	d12d      	bne.n	800ebea <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3308      	adds	r3, #8
 800eb94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb98:	e853 3f00 	ldrex	r3, [r3]
 800eb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb9e:	6a3b      	ldr	r3, [r7, #32]
 800eba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eba4:	677b      	str	r3, [r7, #116]	@ 0x74
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ebae:	633a      	str	r2, [r7, #48]	@ 0x30
 800ebb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb6:	e841 2300 	strex	r3, r2, [r1]
 800ebba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1e5      	bne.n	800eb8e <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00f      	beq.n	800ebea <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f8 f9b8 	bl	8006f44 <HAL_DMA_Abort_IT>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d004      	beq.n	800ebe4 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebde:	2200      	movs	r2, #0
 800ebe0:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebe2:	e002      	b.n	800ebea <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf4:	2b40      	cmp	r3, #64	@ 0x40
 800ebf6:	d133      	bne.n	800ec60 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3308      	adds	r3, #8
 800ebfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	e853 3f00 	ldrex	r3, [r3]
 800ec06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec0e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	3308      	adds	r3, #8
 800ec16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ec18:	61fa      	str	r2, [r7, #28]
 800ec1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1c:	69b9      	ldr	r1, [r7, #24]
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	e841 2300 	strex	r3, r2, [r1]
 800ec24:	617b      	str	r3, [r7, #20]
   return(result);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e5      	bne.n	800ebf8 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d014      	beq.n	800ec60 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f8 f981 	bl	8006f44 <HAL_DMA_Abort_IT>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d008      	beq.n	800ec5a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec4e:	2200      	movs	r2, #0
 800ec50:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ec52:	2301      	movs	r3, #1
 800ec54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec58:	e002      	b.n	800ec60 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ec60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d138      	bne.n	800ecda <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	220f      	movs	r2, #15
 800ec92:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec9c:	d107      	bne.n	800ecae <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	699a      	ldr	r2, [r3, #24]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0210 	orr.w	r2, r2, #16
 800ecac:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	699a      	ldr	r2, [r3, #24]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f042 0208 	orr.w	r2, r2, #8
 800ecbc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2220      	movs	r2, #32
 800ecc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2220      	movs	r2, #32
 800ecca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fbe3 	bl	800f4a0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3788      	adds	r7, #136	@ 0x88
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	ef7ffffe 	.word	0xef7ffffe
 800ece8:	080109af 	.word	0x080109af
 800ecec:	08010a3b 	.word	0x08010a3b

0800ecf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b0ba      	sub	sp, #232	@ 0xe8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	69db      	ldr	r3, [r3, #28]
 800ecfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ed16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ed1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ed1e:	4013      	ands	r3, r2
 800ed20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ed24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d11b      	bne.n	800ed64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed30:	f003 0320 	and.w	r3, r3, #32
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d015      	beq.n	800ed64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed3c:	f003 0320 	and.w	r3, r3, #32
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d105      	bne.n	800ed50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d009      	beq.n	800ed64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 8377 	beq.w	800f448 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	4798      	blx	r3
      }
      return;
 800ed62:	e371      	b.n	800f448 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 8123 	beq.w	800efb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed72:	4b8d      	ldr	r3, [pc, #564]	@ (800efa8 <HAL_UART_IRQHandler+0x2b8>)
 800ed74:	4013      	ands	r3, r2
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ed7e:	4b8b      	ldr	r3, [pc, #556]	@ (800efac <HAL_UART_IRQHandler+0x2bc>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 8116 	beq.w	800efb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d011      	beq.n	800edb8 <HAL_UART_IRQHandler+0xc8>
 800ed94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00b      	beq.n	800edb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2201      	movs	r2, #1
 800eda6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edae:	f043 0201 	orr.w	r2, r3, #1
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edbc:	f003 0302 	and.w	r3, r3, #2
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d011      	beq.n	800ede8 <HAL_UART_IRQHandler+0xf8>
 800edc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00b      	beq.n	800ede8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2202      	movs	r2, #2
 800edd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edde:	f043 0204 	orr.w	r2, r3, #4
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ede8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edec:	f003 0304 	and.w	r3, r3, #4
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d011      	beq.n	800ee18 <HAL_UART_IRQHandler+0x128>
 800edf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00b      	beq.n	800ee18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2204      	movs	r2, #4
 800ee06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee0e:	f043 0202 	orr.w	r2, r3, #2
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ee18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee1c:	f003 0308 	and.w	r3, r3, #8
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d017      	beq.n	800ee54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee28:	f003 0320 	and.w	r3, r3, #32
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d105      	bne.n	800ee3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ee30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ee34:	4b5c      	ldr	r3, [pc, #368]	@ (800efa8 <HAL_UART_IRQHandler+0x2b8>)
 800ee36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00b      	beq.n	800ee54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2208      	movs	r2, #8
 800ee42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee4a:	f043 0208 	orr.w	r2, r3, #8
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d012      	beq.n	800ee86 <HAL_UART_IRQHandler+0x196>
 800ee60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00c      	beq.n	800ee86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee7c:	f043 0220 	orr.w	r2, r3, #32
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 82dd 	beq.w	800f44c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee96:	f003 0320 	and.w	r3, r3, #32
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d013      	beq.n	800eec6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eea2:	f003 0320 	and.w	r3, r3, #32
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d105      	bne.n	800eeb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eeaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eeae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d007      	beq.n	800eec6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eecc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeda:	2b40      	cmp	r3, #64	@ 0x40
 800eedc:	d005      	beq.n	800eeea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eee2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d054      	beq.n	800ef94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f001 fbf0 	bl	80106d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eefa:	2b40      	cmp	r3, #64	@ 0x40
 800eefc:	d146      	bne.n	800ef8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	3308      	adds	r3, #8
 800ef04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef0c:	e853 3f00 	ldrex	r3, [r3]
 800ef10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ef14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ef18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3308      	adds	r3, #8
 800ef26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ef2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ef2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ef36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ef42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1d9      	bne.n	800eefe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d017      	beq.n	800ef84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef5a:	4a15      	ldr	r2, [pc, #84]	@ (800efb0 <HAL_UART_IRQHandler+0x2c0>)
 800ef5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f7 ffed 	bl	8006f44 <HAL_DMA_Abort_IT>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d019      	beq.n	800efa4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ef7e:	4610      	mov	r0, r2
 800ef80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef82:	e00f      	b.n	800efa4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fa81 	bl	800f48c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef8a:	e00b      	b.n	800efa4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 fa7d 	bl	800f48c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef92:	e007      	b.n	800efa4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fa79 	bl	800f48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800efa2:	e253      	b.n	800f44c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efa4:	bf00      	nop
    return;
 800efa6:	e251      	b.n	800f44c <HAL_UART_IRQHandler+0x75c>
 800efa8:	10000001 	.word	0x10000001
 800efac:	04000120 	.word	0x04000120
 800efb0:	08010983 	.word	0x08010983

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efb8:	2b01      	cmp	r3, #1
 800efba:	f040 81e7 	bne.w	800f38c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800efbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efc2:	f003 0310 	and.w	r3, r3, #16
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 81e0 	beq.w	800f38c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800efcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efd0:	f003 0310 	and.w	r3, r3, #16
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f000 81d9 	beq.w	800f38c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2210      	movs	r2, #16
 800efe0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efec:	2b40      	cmp	r3, #64	@ 0x40
 800efee:	f040 8151 	bne.w	800f294 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a96      	ldr	r2, [pc, #600]	@ (800f254 <HAL_UART_IRQHandler+0x564>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d068      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a93      	ldr	r2, [pc, #588]	@ (800f258 <HAL_UART_IRQHandler+0x568>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d061      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a91      	ldr	r2, [pc, #580]	@ (800f25c <HAL_UART_IRQHandler+0x56c>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d05a      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a8e      	ldr	r2, [pc, #568]	@ (800f260 <HAL_UART_IRQHandler+0x570>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d053      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a8c      	ldr	r2, [pc, #560]	@ (800f264 <HAL_UART_IRQHandler+0x574>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d04c      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a89      	ldr	r2, [pc, #548]	@ (800f268 <HAL_UART_IRQHandler+0x578>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d045      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a87      	ldr	r2, [pc, #540]	@ (800f26c <HAL_UART_IRQHandler+0x57c>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d03e      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a84      	ldr	r2, [pc, #528]	@ (800f270 <HAL_UART_IRQHandler+0x580>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d037      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a82      	ldr	r2, [pc, #520]	@ (800f274 <HAL_UART_IRQHandler+0x584>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d030      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a7f      	ldr	r2, [pc, #508]	@ (800f278 <HAL_UART_IRQHandler+0x588>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d029      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a7d      	ldr	r2, [pc, #500]	@ (800f27c <HAL_UART_IRQHandler+0x58c>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d022      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a7a      	ldr	r2, [pc, #488]	@ (800f280 <HAL_UART_IRQHandler+0x590>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d01b      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a78      	ldr	r2, [pc, #480]	@ (800f284 <HAL_UART_IRQHandler+0x594>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d014      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a75      	ldr	r2, [pc, #468]	@ (800f288 <HAL_UART_IRQHandler+0x598>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d00d      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a73      	ldr	r2, [pc, #460]	@ (800f28c <HAL_UART_IRQHandler+0x59c>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d006      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x3e2>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a70      	ldr	r2, [pc, #448]	@ (800f290 <HAL_UART_IRQHandler+0x5a0>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d106      	bne.n	800f0e0 <HAL_UART_IRQHandler+0x3f0>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	e005      	b.n	800f0ec <HAL_UART_IRQHandler+0x3fc>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f0f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 81ab 	beq.w	800f450 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f100:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f104:	429a      	cmp	r2, r3
 800f106:	f080 81a3 	bcs.w	800f450 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f110:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f11a:	69db      	ldr	r3, [r3, #28]
 800f11c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f120:	f000 8087 	beq.w	800f232 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f130:	e853 3f00 	ldrex	r3, [r3]
 800f134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f13c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f14e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f152:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f15a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f15e:	e841 2300 	strex	r3, r2, [r1]
 800f162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1da      	bne.n	800f124 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	3308      	adds	r3, #8
 800f174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f178:	e853 3f00 	ldrex	r3, [r3]
 800f17c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f17e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f180:	f023 0301 	bic.w	r3, r3, #1
 800f184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3308      	adds	r3, #8
 800f18e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f19e:	e841 2300 	strex	r3, r2, [r1]
 800f1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1e1      	bne.n	800f16e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1b4:	e853 3f00 	ldrex	r3, [r3]
 800f1b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3308      	adds	r3, #8
 800f1ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f1ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f1d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f1d6:	e841 2300 	strex	r3, r2, [r1]
 800f1da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f1dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1e3      	bne.n	800f1aa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2220      	movs	r2, #32
 800f1e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f1fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f200:	f023 0310 	bic.w	r3, r3, #16
 800f204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	461a      	mov	r2, r3
 800f20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f212:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f214:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f21a:	e841 2300 	strex	r3, r2, [r1]
 800f21e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1e4      	bne.n	800f1f0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f7 fb6b 	bl	8006908 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2202      	movs	r2, #2
 800f236:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f244:	b29b      	uxth	r3, r3
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	b29b      	uxth	r3, r3
 800f24a:	4619      	mov	r1, r3
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7f4 fe6f 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f252:	e0fd      	b.n	800f450 <HAL_UART_IRQHandler+0x760>
 800f254:	40020010 	.word	0x40020010
 800f258:	40020028 	.word	0x40020028
 800f25c:	40020040 	.word	0x40020040
 800f260:	40020058 	.word	0x40020058
 800f264:	40020070 	.word	0x40020070
 800f268:	40020088 	.word	0x40020088
 800f26c:	400200a0 	.word	0x400200a0
 800f270:	400200b8 	.word	0x400200b8
 800f274:	40020410 	.word	0x40020410
 800f278:	40020428 	.word	0x40020428
 800f27c:	40020440 	.word	0x40020440
 800f280:	40020458 	.word	0x40020458
 800f284:	40020470 	.word	0x40020470
 800f288:	40020488 	.word	0x40020488
 800f28c:	400204a0 	.word	0x400204a0
 800f290:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 80cf 	beq.w	800f454 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f2b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f000 80ca 	beq.w	800f454 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2c8:	e853 3f00 	ldrex	r3, [r3]
 800f2cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f2d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f2e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2ea:	e841 2300 	strex	r3, r2, [r1]
 800f2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1e4      	bne.n	800f2c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f300:	e853 3f00 	ldrex	r3, [r3]
 800f304:	623b      	str	r3, [r7, #32]
   return(result);
 800f306:	6a3a      	ldr	r2, [r7, #32]
 800f308:	4b55      	ldr	r3, [pc, #340]	@ (800f460 <HAL_UART_IRQHandler+0x770>)
 800f30a:	4013      	ands	r3, r2
 800f30c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	3308      	adds	r3, #8
 800f316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f31a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f322:	e841 2300 	strex	r3, r2, [r1]
 800f326:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1e3      	bne.n	800f2f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2220      	movs	r2, #32
 800f332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	e853 3f00 	ldrex	r3, [r3]
 800f34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f023 0310 	bic.w	r3, r3, #16
 800f356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f364:	61fb      	str	r3, [r7, #28]
 800f366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f368:	69b9      	ldr	r1, [r7, #24]
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	e841 2300 	strex	r3, r2, [r1]
 800f370:	617b      	str	r3, [r7, #20]
   return(result);
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d1e4      	bne.n	800f342 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2202      	movs	r2, #2
 800f37c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f37e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f382:	4619      	mov	r1, r3
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7f4 fdd3 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f38a:	e063      	b.n	800f454 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00e      	beq.n	800f3b6 <HAL_UART_IRQHandler+0x6c6>
 800f398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f39c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d008      	beq.n	800f3b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f3ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f001 fbae 	bl	8010b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3b4:	e051      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d014      	beq.n	800f3ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d105      	bne.n	800f3da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d008      	beq.n	800f3ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d03a      	beq.n	800f458 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	4798      	blx	r3
    }
    return;
 800f3ea:	e035      	b.n	800f458 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d009      	beq.n	800f40c <HAL_UART_IRQHandler+0x71c>
 800f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f400:	2b00      	cmp	r3, #0
 800f402:	d003      	beq.n	800f40c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f001 fb58 	bl	8010aba <UART_EndTransmit_IT>
    return;
 800f40a:	e026      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f414:	2b00      	cmp	r3, #0
 800f416:	d009      	beq.n	800f42c <HAL_UART_IRQHandler+0x73c>
 800f418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f41c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d003      	beq.n	800f42c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fb87 	bl	8010b38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f42a:	e016      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f434:	2b00      	cmp	r3, #0
 800f436:	d010      	beq.n	800f45a <HAL_UART_IRQHandler+0x76a>
 800f438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	da0c      	bge.n	800f45a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f001 fb6f 	bl	8010b24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f446:	e008      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
      return;
 800f448:	bf00      	nop
 800f44a:	e006      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
    return;
 800f44c:	bf00      	nop
 800f44e:	e004      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
      return;
 800f450:	bf00      	nop
 800f452:	e002      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
      return;
 800f454:	bf00      	nop
 800f456:	e000      	b.n	800f45a <HAL_UART_IRQHandler+0x76a>
    return;
 800f458:	bf00      	nop
  }
}
 800f45a:	37e8      	adds	r7, #232	@ 0xe8
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	effffffe 	.word	0xeffffffe

0800f464 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4b8:	b092      	sub	sp, #72	@ 0x48
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	689a      	ldr	r2, [r3, #8]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	431a      	orrs	r2, r3
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	4bbe      	ldr	r3, [pc, #760]	@ (800f7dc <UART_SetConfig+0x328>)
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	6812      	ldr	r2, [r2, #0]
 800f4ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f4ec:	430b      	orrs	r3, r1
 800f4ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	68da      	ldr	r2, [r3, #12]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	430a      	orrs	r2, r1
 800f504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4ab3      	ldr	r2, [pc, #716]	@ (800f7e0 <UART_SetConfig+0x32c>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d004      	beq.n	800f520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f51c:	4313      	orrs	r3, r2
 800f51e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	689a      	ldr	r2, [r3, #8]
 800f526:	4baf      	ldr	r3, [pc, #700]	@ (800f7e4 <UART_SetConfig+0x330>)
 800f528:	4013      	ands	r3, r2
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	6812      	ldr	r2, [r2, #0]
 800f52e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f530:	430b      	orrs	r3, r1
 800f532:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53a:	f023 010f 	bic.w	r1, r3, #15
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	430a      	orrs	r2, r1
 800f548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4aa6      	ldr	r2, [pc, #664]	@ (800f7e8 <UART_SetConfig+0x334>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d177      	bne.n	800f644 <UART_SetConfig+0x190>
 800f554:	4ba5      	ldr	r3, [pc, #660]	@ (800f7ec <UART_SetConfig+0x338>)
 800f556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f55c:	2b28      	cmp	r3, #40	@ 0x28
 800f55e:	d86d      	bhi.n	800f63c <UART_SetConfig+0x188>
 800f560:	a201      	add	r2, pc, #4	@ (adr r2, 800f568 <UART_SetConfig+0xb4>)
 800f562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f566:	bf00      	nop
 800f568:	0800f60d 	.word	0x0800f60d
 800f56c:	0800f63d 	.word	0x0800f63d
 800f570:	0800f63d 	.word	0x0800f63d
 800f574:	0800f63d 	.word	0x0800f63d
 800f578:	0800f63d 	.word	0x0800f63d
 800f57c:	0800f63d 	.word	0x0800f63d
 800f580:	0800f63d 	.word	0x0800f63d
 800f584:	0800f63d 	.word	0x0800f63d
 800f588:	0800f615 	.word	0x0800f615
 800f58c:	0800f63d 	.word	0x0800f63d
 800f590:	0800f63d 	.word	0x0800f63d
 800f594:	0800f63d 	.word	0x0800f63d
 800f598:	0800f63d 	.word	0x0800f63d
 800f59c:	0800f63d 	.word	0x0800f63d
 800f5a0:	0800f63d 	.word	0x0800f63d
 800f5a4:	0800f63d 	.word	0x0800f63d
 800f5a8:	0800f61d 	.word	0x0800f61d
 800f5ac:	0800f63d 	.word	0x0800f63d
 800f5b0:	0800f63d 	.word	0x0800f63d
 800f5b4:	0800f63d 	.word	0x0800f63d
 800f5b8:	0800f63d 	.word	0x0800f63d
 800f5bc:	0800f63d 	.word	0x0800f63d
 800f5c0:	0800f63d 	.word	0x0800f63d
 800f5c4:	0800f63d 	.word	0x0800f63d
 800f5c8:	0800f625 	.word	0x0800f625
 800f5cc:	0800f63d 	.word	0x0800f63d
 800f5d0:	0800f63d 	.word	0x0800f63d
 800f5d4:	0800f63d 	.word	0x0800f63d
 800f5d8:	0800f63d 	.word	0x0800f63d
 800f5dc:	0800f63d 	.word	0x0800f63d
 800f5e0:	0800f63d 	.word	0x0800f63d
 800f5e4:	0800f63d 	.word	0x0800f63d
 800f5e8:	0800f62d 	.word	0x0800f62d
 800f5ec:	0800f63d 	.word	0x0800f63d
 800f5f0:	0800f63d 	.word	0x0800f63d
 800f5f4:	0800f63d 	.word	0x0800f63d
 800f5f8:	0800f63d 	.word	0x0800f63d
 800f5fc:	0800f63d 	.word	0x0800f63d
 800f600:	0800f63d 	.word	0x0800f63d
 800f604:	0800f63d 	.word	0x0800f63d
 800f608:	0800f635 	.word	0x0800f635
 800f60c:	2301      	movs	r3, #1
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f612:	e326      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f614:	2304      	movs	r3, #4
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f61a:	e322      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f61c:	2308      	movs	r3, #8
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f622:	e31e      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f624:	2310      	movs	r3, #16
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62a:	e31a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f62c:	2320      	movs	r3, #32
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f632:	e316      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f634:	2340      	movs	r3, #64	@ 0x40
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63a:	e312      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f63c:	2380      	movs	r3, #128	@ 0x80
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f642:	e30e      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a69      	ldr	r2, [pc, #420]	@ (800f7f0 <UART_SetConfig+0x33c>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d130      	bne.n	800f6b0 <UART_SetConfig+0x1fc>
 800f64e:	4b67      	ldr	r3, [pc, #412]	@ (800f7ec <UART_SetConfig+0x338>)
 800f650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f652:	f003 0307 	and.w	r3, r3, #7
 800f656:	2b05      	cmp	r3, #5
 800f658:	d826      	bhi.n	800f6a8 <UART_SetConfig+0x1f4>
 800f65a:	a201      	add	r2, pc, #4	@ (adr r2, 800f660 <UART_SetConfig+0x1ac>)
 800f65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f660:	0800f679 	.word	0x0800f679
 800f664:	0800f681 	.word	0x0800f681
 800f668:	0800f689 	.word	0x0800f689
 800f66c:	0800f691 	.word	0x0800f691
 800f670:	0800f699 	.word	0x0800f699
 800f674:	0800f6a1 	.word	0x0800f6a1
 800f678:	2300      	movs	r3, #0
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f67e:	e2f0      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f680:	2304      	movs	r3, #4
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f686:	e2ec      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f688:	2308      	movs	r3, #8
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f68e:	e2e8      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f690:	2310      	movs	r3, #16
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f696:	e2e4      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f698:	2320      	movs	r3, #32
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69e:	e2e0      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6a0:	2340      	movs	r3, #64	@ 0x40
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a6:	e2dc      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6a8:	2380      	movs	r3, #128	@ 0x80
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ae:	e2d8      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a4f      	ldr	r2, [pc, #316]	@ (800f7f4 <UART_SetConfig+0x340>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d130      	bne.n	800f71c <UART_SetConfig+0x268>
 800f6ba:	4b4c      	ldr	r3, [pc, #304]	@ (800f7ec <UART_SetConfig+0x338>)
 800f6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6be:	f003 0307 	and.w	r3, r3, #7
 800f6c2:	2b05      	cmp	r3, #5
 800f6c4:	d826      	bhi.n	800f714 <UART_SetConfig+0x260>
 800f6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6cc <UART_SetConfig+0x218>)
 800f6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6cc:	0800f6e5 	.word	0x0800f6e5
 800f6d0:	0800f6ed 	.word	0x0800f6ed
 800f6d4:	0800f6f5 	.word	0x0800f6f5
 800f6d8:	0800f6fd 	.word	0x0800f6fd
 800f6dc:	0800f705 	.word	0x0800f705
 800f6e0:	0800f70d 	.word	0x0800f70d
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ea:	e2ba      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6ec:	2304      	movs	r3, #4
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f2:	e2b6      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6f4:	2308      	movs	r3, #8
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fa:	e2b2      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f6fc:	2310      	movs	r3, #16
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f702:	e2ae      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f704:	2320      	movs	r3, #32
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70a:	e2aa      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f70c:	2340      	movs	r3, #64	@ 0x40
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f712:	e2a6      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f714:	2380      	movs	r3, #128	@ 0x80
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71a:	e2a2      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a35      	ldr	r2, [pc, #212]	@ (800f7f8 <UART_SetConfig+0x344>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d130      	bne.n	800f788 <UART_SetConfig+0x2d4>
 800f726:	4b31      	ldr	r3, [pc, #196]	@ (800f7ec <UART_SetConfig+0x338>)
 800f728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f72a:	f003 0307 	and.w	r3, r3, #7
 800f72e:	2b05      	cmp	r3, #5
 800f730:	d826      	bhi.n	800f780 <UART_SetConfig+0x2cc>
 800f732:	a201      	add	r2, pc, #4	@ (adr r2, 800f738 <UART_SetConfig+0x284>)
 800f734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f738:	0800f751 	.word	0x0800f751
 800f73c:	0800f759 	.word	0x0800f759
 800f740:	0800f761 	.word	0x0800f761
 800f744:	0800f769 	.word	0x0800f769
 800f748:	0800f771 	.word	0x0800f771
 800f74c:	0800f779 	.word	0x0800f779
 800f750:	2300      	movs	r3, #0
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f756:	e284      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f758:	2304      	movs	r3, #4
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75e:	e280      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f760:	2308      	movs	r3, #8
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e27c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f768:	2310      	movs	r3, #16
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e278      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f770:	2320      	movs	r3, #32
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f776:	e274      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f778:	2340      	movs	r3, #64	@ 0x40
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77e:	e270      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f780:	2380      	movs	r3, #128	@ 0x80
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e26c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a1b      	ldr	r2, [pc, #108]	@ (800f7fc <UART_SetConfig+0x348>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d142      	bne.n	800f818 <UART_SetConfig+0x364>
 800f792:	4b16      	ldr	r3, [pc, #88]	@ (800f7ec <UART_SetConfig+0x338>)
 800f794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	d838      	bhi.n	800f810 <UART_SetConfig+0x35c>
 800f79e:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a4 <UART_SetConfig+0x2f0>)
 800f7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a4:	0800f7bd 	.word	0x0800f7bd
 800f7a8:	0800f7c5 	.word	0x0800f7c5
 800f7ac:	0800f7cd 	.word	0x0800f7cd
 800f7b0:	0800f7d5 	.word	0x0800f7d5
 800f7b4:	0800f801 	.word	0x0800f801
 800f7b8:	0800f809 	.word	0x0800f809
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c2:	e24e      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f7c4:	2304      	movs	r3, #4
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ca:	e24a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f7cc:	2308      	movs	r3, #8
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d2:	e246      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f7d4:	2310      	movs	r3, #16
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7da:	e242      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f7dc:	cfff69f3 	.word	0xcfff69f3
 800f7e0:	58000c00 	.word	0x58000c00
 800f7e4:	11fff4ff 	.word	0x11fff4ff
 800f7e8:	40011000 	.word	0x40011000
 800f7ec:	58024400 	.word	0x58024400
 800f7f0:	40004400 	.word	0x40004400
 800f7f4:	40004800 	.word	0x40004800
 800f7f8:	40004c00 	.word	0x40004c00
 800f7fc:	40005000 	.word	0x40005000
 800f800:	2320      	movs	r3, #32
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e22c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f808:	2340      	movs	r3, #64	@ 0x40
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80e:	e228      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f810:	2380      	movs	r3, #128	@ 0x80
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f816:	e224      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4ab1      	ldr	r2, [pc, #708]	@ (800fae4 <UART_SetConfig+0x630>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d176      	bne.n	800f910 <UART_SetConfig+0x45c>
 800f822:	4bb1      	ldr	r3, [pc, #708]	@ (800fae8 <UART_SetConfig+0x634>)
 800f824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f82a:	2b28      	cmp	r3, #40	@ 0x28
 800f82c:	d86c      	bhi.n	800f908 <UART_SetConfig+0x454>
 800f82e:	a201      	add	r2, pc, #4	@ (adr r2, 800f834 <UART_SetConfig+0x380>)
 800f830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f834:	0800f8d9 	.word	0x0800f8d9
 800f838:	0800f909 	.word	0x0800f909
 800f83c:	0800f909 	.word	0x0800f909
 800f840:	0800f909 	.word	0x0800f909
 800f844:	0800f909 	.word	0x0800f909
 800f848:	0800f909 	.word	0x0800f909
 800f84c:	0800f909 	.word	0x0800f909
 800f850:	0800f909 	.word	0x0800f909
 800f854:	0800f8e1 	.word	0x0800f8e1
 800f858:	0800f909 	.word	0x0800f909
 800f85c:	0800f909 	.word	0x0800f909
 800f860:	0800f909 	.word	0x0800f909
 800f864:	0800f909 	.word	0x0800f909
 800f868:	0800f909 	.word	0x0800f909
 800f86c:	0800f909 	.word	0x0800f909
 800f870:	0800f909 	.word	0x0800f909
 800f874:	0800f8e9 	.word	0x0800f8e9
 800f878:	0800f909 	.word	0x0800f909
 800f87c:	0800f909 	.word	0x0800f909
 800f880:	0800f909 	.word	0x0800f909
 800f884:	0800f909 	.word	0x0800f909
 800f888:	0800f909 	.word	0x0800f909
 800f88c:	0800f909 	.word	0x0800f909
 800f890:	0800f909 	.word	0x0800f909
 800f894:	0800f8f1 	.word	0x0800f8f1
 800f898:	0800f909 	.word	0x0800f909
 800f89c:	0800f909 	.word	0x0800f909
 800f8a0:	0800f909 	.word	0x0800f909
 800f8a4:	0800f909 	.word	0x0800f909
 800f8a8:	0800f909 	.word	0x0800f909
 800f8ac:	0800f909 	.word	0x0800f909
 800f8b0:	0800f909 	.word	0x0800f909
 800f8b4:	0800f8f9 	.word	0x0800f8f9
 800f8b8:	0800f909 	.word	0x0800f909
 800f8bc:	0800f909 	.word	0x0800f909
 800f8c0:	0800f909 	.word	0x0800f909
 800f8c4:	0800f909 	.word	0x0800f909
 800f8c8:	0800f909 	.word	0x0800f909
 800f8cc:	0800f909 	.word	0x0800f909
 800f8d0:	0800f909 	.word	0x0800f909
 800f8d4:	0800f901 	.word	0x0800f901
 800f8d8:	2301      	movs	r3, #1
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8de:	e1c0      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f8e0:	2304      	movs	r3, #4
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e6:	e1bc      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f8e8:	2308      	movs	r3, #8
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ee:	e1b8      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f8f0:	2310      	movs	r3, #16
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f6:	e1b4      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f8f8:	2320      	movs	r3, #32
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fe:	e1b0      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f900:	2340      	movs	r3, #64	@ 0x40
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f906:	e1ac      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f908:	2380      	movs	r3, #128	@ 0x80
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e1a8      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a75      	ldr	r2, [pc, #468]	@ (800faec <UART_SetConfig+0x638>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d130      	bne.n	800f97c <UART_SetConfig+0x4c8>
 800f91a:	4b73      	ldr	r3, [pc, #460]	@ (800fae8 <UART_SetConfig+0x634>)
 800f91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f91e:	f003 0307 	and.w	r3, r3, #7
 800f922:	2b05      	cmp	r3, #5
 800f924:	d826      	bhi.n	800f974 <UART_SetConfig+0x4c0>
 800f926:	a201      	add	r2, pc, #4	@ (adr r2, 800f92c <UART_SetConfig+0x478>)
 800f928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92c:	0800f945 	.word	0x0800f945
 800f930:	0800f94d 	.word	0x0800f94d
 800f934:	0800f955 	.word	0x0800f955
 800f938:	0800f95d 	.word	0x0800f95d
 800f93c:	0800f965 	.word	0x0800f965
 800f940:	0800f96d 	.word	0x0800f96d
 800f944:	2300      	movs	r3, #0
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f94a:	e18a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f94c:	2304      	movs	r3, #4
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f952:	e186      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f954:	2308      	movs	r3, #8
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95a:	e182      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f95c:	2310      	movs	r3, #16
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e17e      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f964:	2320      	movs	r3, #32
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e17a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f96c:	2340      	movs	r3, #64	@ 0x40
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f972:	e176      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f974:	2380      	movs	r3, #128	@ 0x80
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e172      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a5b      	ldr	r2, [pc, #364]	@ (800faf0 <UART_SetConfig+0x63c>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d130      	bne.n	800f9e8 <UART_SetConfig+0x534>
 800f986:	4b58      	ldr	r3, [pc, #352]	@ (800fae8 <UART_SetConfig+0x634>)
 800f988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f98a:	f003 0307 	and.w	r3, r3, #7
 800f98e:	2b05      	cmp	r3, #5
 800f990:	d826      	bhi.n	800f9e0 <UART_SetConfig+0x52c>
 800f992:	a201      	add	r2, pc, #4	@ (adr r2, 800f998 <UART_SetConfig+0x4e4>)
 800f994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f998:	0800f9b1 	.word	0x0800f9b1
 800f99c:	0800f9b9 	.word	0x0800f9b9
 800f9a0:	0800f9c1 	.word	0x0800f9c1
 800f9a4:	0800f9c9 	.word	0x0800f9c9
 800f9a8:	0800f9d1 	.word	0x0800f9d1
 800f9ac:	0800f9d9 	.word	0x0800f9d9
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	e154      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9b8:	2304      	movs	r3, #4
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9be:	e150      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9c0:	2308      	movs	r3, #8
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c6:	e14c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9c8:	2310      	movs	r3, #16
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ce:	e148      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9d0:	2320      	movs	r3, #32
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d6:	e144      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9d8:	2340      	movs	r3, #64	@ 0x40
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9de:	e140      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9e0:	2380      	movs	r3, #128	@ 0x80
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e13c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a41      	ldr	r2, [pc, #260]	@ (800faf4 <UART_SetConfig+0x640>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	f040 8082 	bne.w	800faf8 <UART_SetConfig+0x644>
 800f9f4:	4b3c      	ldr	r3, [pc, #240]	@ (800fae8 <UART_SetConfig+0x634>)
 800f9f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9fc:	2b28      	cmp	r3, #40	@ 0x28
 800f9fe:	d86d      	bhi.n	800fadc <UART_SetConfig+0x628>
 800fa00:	a201      	add	r2, pc, #4	@ (adr r2, 800fa08 <UART_SetConfig+0x554>)
 800fa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa06:	bf00      	nop
 800fa08:	0800faad 	.word	0x0800faad
 800fa0c:	0800fadd 	.word	0x0800fadd
 800fa10:	0800fadd 	.word	0x0800fadd
 800fa14:	0800fadd 	.word	0x0800fadd
 800fa18:	0800fadd 	.word	0x0800fadd
 800fa1c:	0800fadd 	.word	0x0800fadd
 800fa20:	0800fadd 	.word	0x0800fadd
 800fa24:	0800fadd 	.word	0x0800fadd
 800fa28:	0800fab5 	.word	0x0800fab5
 800fa2c:	0800fadd 	.word	0x0800fadd
 800fa30:	0800fadd 	.word	0x0800fadd
 800fa34:	0800fadd 	.word	0x0800fadd
 800fa38:	0800fadd 	.word	0x0800fadd
 800fa3c:	0800fadd 	.word	0x0800fadd
 800fa40:	0800fadd 	.word	0x0800fadd
 800fa44:	0800fadd 	.word	0x0800fadd
 800fa48:	0800fabd 	.word	0x0800fabd
 800fa4c:	0800fadd 	.word	0x0800fadd
 800fa50:	0800fadd 	.word	0x0800fadd
 800fa54:	0800fadd 	.word	0x0800fadd
 800fa58:	0800fadd 	.word	0x0800fadd
 800fa5c:	0800fadd 	.word	0x0800fadd
 800fa60:	0800fadd 	.word	0x0800fadd
 800fa64:	0800fadd 	.word	0x0800fadd
 800fa68:	0800fac5 	.word	0x0800fac5
 800fa6c:	0800fadd 	.word	0x0800fadd
 800fa70:	0800fadd 	.word	0x0800fadd
 800fa74:	0800fadd 	.word	0x0800fadd
 800fa78:	0800fadd 	.word	0x0800fadd
 800fa7c:	0800fadd 	.word	0x0800fadd
 800fa80:	0800fadd 	.word	0x0800fadd
 800fa84:	0800fadd 	.word	0x0800fadd
 800fa88:	0800facd 	.word	0x0800facd
 800fa8c:	0800fadd 	.word	0x0800fadd
 800fa90:	0800fadd 	.word	0x0800fadd
 800fa94:	0800fadd 	.word	0x0800fadd
 800fa98:	0800fadd 	.word	0x0800fadd
 800fa9c:	0800fadd 	.word	0x0800fadd
 800faa0:	0800fadd 	.word	0x0800fadd
 800faa4:	0800fadd 	.word	0x0800fadd
 800faa8:	0800fad5 	.word	0x0800fad5
 800faac:	2301      	movs	r3, #1
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e0d6      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fab4:	2304      	movs	r3, #4
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e0d2      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fabc:	2308      	movs	r3, #8
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e0ce      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fac4:	2310      	movs	r3, #16
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e0ca      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800facc:	2320      	movs	r3, #32
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e0c6      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fad4:	2340      	movs	r3, #64	@ 0x40
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fada:	e0c2      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fadc:	2380      	movs	r3, #128	@ 0x80
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae2:	e0be      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fae4:	40011400 	.word	0x40011400
 800fae8:	58024400 	.word	0x58024400
 800faec:	40007800 	.word	0x40007800
 800faf0:	40007c00 	.word	0x40007c00
 800faf4:	40011800 	.word	0x40011800
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4aad      	ldr	r2, [pc, #692]	@ (800fdb4 <UART_SetConfig+0x900>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d176      	bne.n	800fbf0 <UART_SetConfig+0x73c>
 800fb02:	4bad      	ldr	r3, [pc, #692]	@ (800fdb8 <UART_SetConfig+0x904>)
 800fb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb0a:	2b28      	cmp	r3, #40	@ 0x28
 800fb0c:	d86c      	bhi.n	800fbe8 <UART_SetConfig+0x734>
 800fb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb14 <UART_SetConfig+0x660>)
 800fb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb14:	0800fbb9 	.word	0x0800fbb9
 800fb18:	0800fbe9 	.word	0x0800fbe9
 800fb1c:	0800fbe9 	.word	0x0800fbe9
 800fb20:	0800fbe9 	.word	0x0800fbe9
 800fb24:	0800fbe9 	.word	0x0800fbe9
 800fb28:	0800fbe9 	.word	0x0800fbe9
 800fb2c:	0800fbe9 	.word	0x0800fbe9
 800fb30:	0800fbe9 	.word	0x0800fbe9
 800fb34:	0800fbc1 	.word	0x0800fbc1
 800fb38:	0800fbe9 	.word	0x0800fbe9
 800fb3c:	0800fbe9 	.word	0x0800fbe9
 800fb40:	0800fbe9 	.word	0x0800fbe9
 800fb44:	0800fbe9 	.word	0x0800fbe9
 800fb48:	0800fbe9 	.word	0x0800fbe9
 800fb4c:	0800fbe9 	.word	0x0800fbe9
 800fb50:	0800fbe9 	.word	0x0800fbe9
 800fb54:	0800fbc9 	.word	0x0800fbc9
 800fb58:	0800fbe9 	.word	0x0800fbe9
 800fb5c:	0800fbe9 	.word	0x0800fbe9
 800fb60:	0800fbe9 	.word	0x0800fbe9
 800fb64:	0800fbe9 	.word	0x0800fbe9
 800fb68:	0800fbe9 	.word	0x0800fbe9
 800fb6c:	0800fbe9 	.word	0x0800fbe9
 800fb70:	0800fbe9 	.word	0x0800fbe9
 800fb74:	0800fbd1 	.word	0x0800fbd1
 800fb78:	0800fbe9 	.word	0x0800fbe9
 800fb7c:	0800fbe9 	.word	0x0800fbe9
 800fb80:	0800fbe9 	.word	0x0800fbe9
 800fb84:	0800fbe9 	.word	0x0800fbe9
 800fb88:	0800fbe9 	.word	0x0800fbe9
 800fb8c:	0800fbe9 	.word	0x0800fbe9
 800fb90:	0800fbe9 	.word	0x0800fbe9
 800fb94:	0800fbd9 	.word	0x0800fbd9
 800fb98:	0800fbe9 	.word	0x0800fbe9
 800fb9c:	0800fbe9 	.word	0x0800fbe9
 800fba0:	0800fbe9 	.word	0x0800fbe9
 800fba4:	0800fbe9 	.word	0x0800fbe9
 800fba8:	0800fbe9 	.word	0x0800fbe9
 800fbac:	0800fbe9 	.word	0x0800fbe9
 800fbb0:	0800fbe9 	.word	0x0800fbe9
 800fbb4:	0800fbe1 	.word	0x0800fbe1
 800fbb8:	2301      	movs	r3, #1
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e050      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbc0:	2304      	movs	r3, #4
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e04c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbc8:	2308      	movs	r3, #8
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbce:	e048      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbd0:	2310      	movs	r3, #16
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd6:	e044      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbd8:	2320      	movs	r3, #32
 800fbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbde:	e040      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbe0:	2340      	movs	r3, #64	@ 0x40
 800fbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe6:	e03c      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbe8:	2380      	movs	r3, #128	@ 0x80
 800fbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbee:	e038      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a71      	ldr	r2, [pc, #452]	@ (800fdbc <UART_SetConfig+0x908>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d130      	bne.n	800fc5c <UART_SetConfig+0x7a8>
 800fbfa:	4b6f      	ldr	r3, [pc, #444]	@ (800fdb8 <UART_SetConfig+0x904>)
 800fbfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbfe:	f003 0307 	and.w	r3, r3, #7
 800fc02:	2b05      	cmp	r3, #5
 800fc04:	d826      	bhi.n	800fc54 <UART_SetConfig+0x7a0>
 800fc06:	a201      	add	r2, pc, #4	@ (adr r2, 800fc0c <UART_SetConfig+0x758>)
 800fc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0c:	0800fc25 	.word	0x0800fc25
 800fc10:	0800fc2d 	.word	0x0800fc2d
 800fc14:	0800fc35 	.word	0x0800fc35
 800fc18:	0800fc3d 	.word	0x0800fc3d
 800fc1c:	0800fc45 	.word	0x0800fc45
 800fc20:	0800fc4d 	.word	0x0800fc4d
 800fc24:	2302      	movs	r3, #2
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e01a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc2c:	2304      	movs	r3, #4
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e016      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc34:	2308      	movs	r3, #8
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e012      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc3c:	2310      	movs	r3, #16
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e00e      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc44:	2320      	movs	r3, #32
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4a:	e00a      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc4c:	2340      	movs	r3, #64	@ 0x40
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc52:	e006      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc54:	2380      	movs	r3, #128	@ 0x80
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5a:	e002      	b.n	800fc62 <UART_SetConfig+0x7ae>
 800fc5c:	2380      	movs	r3, #128	@ 0x80
 800fc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a55      	ldr	r2, [pc, #340]	@ (800fdbc <UART_SetConfig+0x908>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	f040 80f8 	bne.w	800fe5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc72:	2b20      	cmp	r3, #32
 800fc74:	dc46      	bgt.n	800fd04 <UART_SetConfig+0x850>
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	db75      	blt.n	800fd66 <UART_SetConfig+0x8b2>
 800fc7a:	3b02      	subs	r3, #2
 800fc7c:	2b1e      	cmp	r3, #30
 800fc7e:	d872      	bhi.n	800fd66 <UART_SetConfig+0x8b2>
 800fc80:	a201      	add	r2, pc, #4	@ (adr r2, 800fc88 <UART_SetConfig+0x7d4>)
 800fc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc86:	bf00      	nop
 800fc88:	0800fd0b 	.word	0x0800fd0b
 800fc8c:	0800fd67 	.word	0x0800fd67
 800fc90:	0800fd13 	.word	0x0800fd13
 800fc94:	0800fd67 	.word	0x0800fd67
 800fc98:	0800fd67 	.word	0x0800fd67
 800fc9c:	0800fd67 	.word	0x0800fd67
 800fca0:	0800fd23 	.word	0x0800fd23
 800fca4:	0800fd67 	.word	0x0800fd67
 800fca8:	0800fd67 	.word	0x0800fd67
 800fcac:	0800fd67 	.word	0x0800fd67
 800fcb0:	0800fd67 	.word	0x0800fd67
 800fcb4:	0800fd67 	.word	0x0800fd67
 800fcb8:	0800fd67 	.word	0x0800fd67
 800fcbc:	0800fd67 	.word	0x0800fd67
 800fcc0:	0800fd33 	.word	0x0800fd33
 800fcc4:	0800fd67 	.word	0x0800fd67
 800fcc8:	0800fd67 	.word	0x0800fd67
 800fccc:	0800fd67 	.word	0x0800fd67
 800fcd0:	0800fd67 	.word	0x0800fd67
 800fcd4:	0800fd67 	.word	0x0800fd67
 800fcd8:	0800fd67 	.word	0x0800fd67
 800fcdc:	0800fd67 	.word	0x0800fd67
 800fce0:	0800fd67 	.word	0x0800fd67
 800fce4:	0800fd67 	.word	0x0800fd67
 800fce8:	0800fd67 	.word	0x0800fd67
 800fcec:	0800fd67 	.word	0x0800fd67
 800fcf0:	0800fd67 	.word	0x0800fd67
 800fcf4:	0800fd67 	.word	0x0800fd67
 800fcf8:	0800fd67 	.word	0x0800fd67
 800fcfc:	0800fd67 	.word	0x0800fd67
 800fd00:	0800fd59 	.word	0x0800fd59
 800fd04:	2b40      	cmp	r3, #64	@ 0x40
 800fd06:	d02a      	beq.n	800fd5e <UART_SetConfig+0x8aa>
 800fd08:	e02d      	b.n	800fd66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fd0a:	f7fb fefb 	bl	800bb04 <HAL_RCCEx_GetD3PCLK1Freq>
 800fd0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd10:	e02f      	b.n	800fd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fb ff0a 	bl	800bb30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd20:	e027      	b.n	800fd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd22:	f107 0318 	add.w	r3, r7, #24
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fc f856 	bl	800bdd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd30:	e01f      	b.n	800fd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd32:	4b21      	ldr	r3, [pc, #132]	@ (800fdb8 <UART_SetConfig+0x904>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f003 0320 	and.w	r3, r3, #32
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d009      	beq.n	800fd52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd3e:	4b1e      	ldr	r3, [pc, #120]	@ (800fdb8 <UART_SetConfig+0x904>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	08db      	lsrs	r3, r3, #3
 800fd44:	f003 0303 	and.w	r3, r3, #3
 800fd48:	4a1d      	ldr	r2, [pc, #116]	@ (800fdc0 <UART_SetConfig+0x90c>)
 800fd4a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd50:	e00f      	b.n	800fd72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd52:	4b1b      	ldr	r3, [pc, #108]	@ (800fdc0 <UART_SetConfig+0x90c>)
 800fd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd56:	e00c      	b.n	800fd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd58:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc4 <UART_SetConfig+0x910>)
 800fd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd5c:	e009      	b.n	800fd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd64:	e005      	b.n	800fd72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd66:	2300      	movs	r3, #0
 800fd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 81ee 	beq.w	8010156 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7e:	4a12      	ldr	r2, [pc, #72]	@ (800fdc8 <UART_SetConfig+0x914>)
 800fd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd84:	461a      	mov	r2, r3
 800fd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd88:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	4613      	mov	r3, r2
 800fd94:	005b      	lsls	r3, r3, #1
 800fd96:	4413      	add	r3, r2
 800fd98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d305      	bcc.n	800fdaa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fda4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d910      	bls.n	800fdcc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fdb0:	e1d1      	b.n	8010156 <UART_SetConfig+0xca2>
 800fdb2:	bf00      	nop
 800fdb4:	40011c00 	.word	0x40011c00
 800fdb8:	58024400 	.word	0x58024400
 800fdbc:	58000c00 	.word	0x58000c00
 800fdc0:	03d09000 	.word	0x03d09000
 800fdc4:	003d0900 	.word	0x003d0900
 800fdc8:	08018c38 	.word	0x08018c38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdce:	2200      	movs	r2, #0
 800fdd0:	60bb      	str	r3, [r7, #8]
 800fdd2:	60fa      	str	r2, [r7, #12]
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd8:	4ac0      	ldr	r2, [pc, #768]	@ (80100dc <UART_SetConfig+0xc28>)
 800fdda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	2200      	movs	r2, #0
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	607a      	str	r2, [r7, #4]
 800fde6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fdee:	f7f0 fce3 	bl	80007b8 <__aeabi_uldivmod>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	4610      	mov	r0, r2
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	f04f 0200 	mov.w	r2, #0
 800fdfe:	f04f 0300 	mov.w	r3, #0
 800fe02:	020b      	lsls	r3, r1, #8
 800fe04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe08:	0202      	lsls	r2, r0, #8
 800fe0a:	6979      	ldr	r1, [r7, #20]
 800fe0c:	6849      	ldr	r1, [r1, #4]
 800fe0e:	0849      	lsrs	r1, r1, #1
 800fe10:	2000      	movs	r0, #0
 800fe12:	460c      	mov	r4, r1
 800fe14:	4605      	mov	r5, r0
 800fe16:	eb12 0804 	adds.w	r8, r2, r4
 800fe1a:	eb43 0905 	adc.w	r9, r3, r5
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	469a      	mov	sl, r3
 800fe26:	4693      	mov	fp, r2
 800fe28:	4652      	mov	r2, sl
 800fe2a:	465b      	mov	r3, fp
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4649      	mov	r1, r9
 800fe30:	f7f0 fcc2 	bl	80007b8 <__aeabi_uldivmod>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	4613      	mov	r3, r2
 800fe3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe42:	d308      	bcc.n	800fe56 <UART_SetConfig+0x9a2>
 800fe44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe4a:	d204      	bcs.n	800fe56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe52:	60da      	str	r2, [r3, #12]
 800fe54:	e17f      	b.n	8010156 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe5c:	e17b      	b.n	8010156 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	69db      	ldr	r3, [r3, #28]
 800fe62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe66:	f040 80bd 	bne.w	800ffe4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fe6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe6e:	2b20      	cmp	r3, #32
 800fe70:	dc48      	bgt.n	800ff04 <UART_SetConfig+0xa50>
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	db7b      	blt.n	800ff6e <UART_SetConfig+0xaba>
 800fe76:	2b20      	cmp	r3, #32
 800fe78:	d879      	bhi.n	800ff6e <UART_SetConfig+0xaba>
 800fe7a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe80 <UART_SetConfig+0x9cc>)
 800fe7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe80:	0800ff0b 	.word	0x0800ff0b
 800fe84:	0800ff13 	.word	0x0800ff13
 800fe88:	0800ff6f 	.word	0x0800ff6f
 800fe8c:	0800ff6f 	.word	0x0800ff6f
 800fe90:	0800ff1b 	.word	0x0800ff1b
 800fe94:	0800ff6f 	.word	0x0800ff6f
 800fe98:	0800ff6f 	.word	0x0800ff6f
 800fe9c:	0800ff6f 	.word	0x0800ff6f
 800fea0:	0800ff2b 	.word	0x0800ff2b
 800fea4:	0800ff6f 	.word	0x0800ff6f
 800fea8:	0800ff6f 	.word	0x0800ff6f
 800feac:	0800ff6f 	.word	0x0800ff6f
 800feb0:	0800ff6f 	.word	0x0800ff6f
 800feb4:	0800ff6f 	.word	0x0800ff6f
 800feb8:	0800ff6f 	.word	0x0800ff6f
 800febc:	0800ff6f 	.word	0x0800ff6f
 800fec0:	0800ff3b 	.word	0x0800ff3b
 800fec4:	0800ff6f 	.word	0x0800ff6f
 800fec8:	0800ff6f 	.word	0x0800ff6f
 800fecc:	0800ff6f 	.word	0x0800ff6f
 800fed0:	0800ff6f 	.word	0x0800ff6f
 800fed4:	0800ff6f 	.word	0x0800ff6f
 800fed8:	0800ff6f 	.word	0x0800ff6f
 800fedc:	0800ff6f 	.word	0x0800ff6f
 800fee0:	0800ff6f 	.word	0x0800ff6f
 800fee4:	0800ff6f 	.word	0x0800ff6f
 800fee8:	0800ff6f 	.word	0x0800ff6f
 800feec:	0800ff6f 	.word	0x0800ff6f
 800fef0:	0800ff6f 	.word	0x0800ff6f
 800fef4:	0800ff6f 	.word	0x0800ff6f
 800fef8:	0800ff6f 	.word	0x0800ff6f
 800fefc:	0800ff6f 	.word	0x0800ff6f
 800ff00:	0800ff61 	.word	0x0800ff61
 800ff04:	2b40      	cmp	r3, #64	@ 0x40
 800ff06:	d02e      	beq.n	800ff66 <UART_SetConfig+0xab2>
 800ff08:	e031      	b.n	800ff6e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff0a:	f7fa fc11 	bl	800a730 <HAL_RCC_GetPCLK1Freq>
 800ff0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff10:	e033      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff12:	f7fa fc23 	bl	800a75c <HAL_RCC_GetPCLK2Freq>
 800ff16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff18:	e02f      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fb fe06 	bl	800bb30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff28:	e027      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff2a:	f107 0318 	add.w	r3, r7, #24
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fb ff52 	bl	800bdd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff38:	e01f      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff3a:	4b69      	ldr	r3, [pc, #420]	@ (80100e0 <UART_SetConfig+0xc2c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f003 0320 	and.w	r3, r3, #32
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d009      	beq.n	800ff5a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff46:	4b66      	ldr	r3, [pc, #408]	@ (80100e0 <UART_SetConfig+0xc2c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	08db      	lsrs	r3, r3, #3
 800ff4c:	f003 0303 	and.w	r3, r3, #3
 800ff50:	4a64      	ldr	r2, [pc, #400]	@ (80100e4 <UART_SetConfig+0xc30>)
 800ff52:	fa22 f303 	lsr.w	r3, r2, r3
 800ff56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff58:	e00f      	b.n	800ff7a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ff5a:	4b62      	ldr	r3, [pc, #392]	@ (80100e4 <UART_SetConfig+0xc30>)
 800ff5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff5e:	e00c      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff60:	4b61      	ldr	r3, [pc, #388]	@ (80100e8 <UART_SetConfig+0xc34>)
 800ff62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff64:	e009      	b.n	800ff7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff6c:	e005      	b.n	800ff7a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 80ea 	beq.w	8010156 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff86:	4a55      	ldr	r2, [pc, #340]	@ (80100dc <UART_SetConfig+0xc28>)
 800ff88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff94:	005a      	lsls	r2, r3, #1
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	085b      	lsrs	r3, r3, #1
 800ff9c:	441a      	add	r2, r3
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffaa:	2b0f      	cmp	r3, #15
 800ffac:	d916      	bls.n	800ffdc <UART_SetConfig+0xb28>
 800ffae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffb4:	d212      	bcs.n	800ffdc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	f023 030f 	bic.w	r3, r3, #15
 800ffbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc2:	085b      	lsrs	r3, r3, #1
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f003 0307 	and.w	r3, r3, #7
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ffd8:	60da      	str	r2, [r3, #12]
 800ffda:	e0bc      	b.n	8010156 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ffe2:	e0b8      	b.n	8010156 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffe4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ffe8:	2b20      	cmp	r3, #32
 800ffea:	dc4b      	bgt.n	8010084 <UART_SetConfig+0xbd0>
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f2c0 8087 	blt.w	8010100 <UART_SetConfig+0xc4c>
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	f200 8084 	bhi.w	8010100 <UART_SetConfig+0xc4c>
 800fff8:	a201      	add	r2, pc, #4	@ (adr r2, 8010000 <UART_SetConfig+0xb4c>)
 800fffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffe:	bf00      	nop
 8010000:	0801008b 	.word	0x0801008b
 8010004:	08010093 	.word	0x08010093
 8010008:	08010101 	.word	0x08010101
 801000c:	08010101 	.word	0x08010101
 8010010:	0801009b 	.word	0x0801009b
 8010014:	08010101 	.word	0x08010101
 8010018:	08010101 	.word	0x08010101
 801001c:	08010101 	.word	0x08010101
 8010020:	080100ab 	.word	0x080100ab
 8010024:	08010101 	.word	0x08010101
 8010028:	08010101 	.word	0x08010101
 801002c:	08010101 	.word	0x08010101
 8010030:	08010101 	.word	0x08010101
 8010034:	08010101 	.word	0x08010101
 8010038:	08010101 	.word	0x08010101
 801003c:	08010101 	.word	0x08010101
 8010040:	080100bb 	.word	0x080100bb
 8010044:	08010101 	.word	0x08010101
 8010048:	08010101 	.word	0x08010101
 801004c:	08010101 	.word	0x08010101
 8010050:	08010101 	.word	0x08010101
 8010054:	08010101 	.word	0x08010101
 8010058:	08010101 	.word	0x08010101
 801005c:	08010101 	.word	0x08010101
 8010060:	08010101 	.word	0x08010101
 8010064:	08010101 	.word	0x08010101
 8010068:	08010101 	.word	0x08010101
 801006c:	08010101 	.word	0x08010101
 8010070:	08010101 	.word	0x08010101
 8010074:	08010101 	.word	0x08010101
 8010078:	08010101 	.word	0x08010101
 801007c:	08010101 	.word	0x08010101
 8010080:	080100f3 	.word	0x080100f3
 8010084:	2b40      	cmp	r3, #64	@ 0x40
 8010086:	d037      	beq.n	80100f8 <UART_SetConfig+0xc44>
 8010088:	e03a      	b.n	8010100 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801008a:	f7fa fb51 	bl	800a730 <HAL_RCC_GetPCLK1Freq>
 801008e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010090:	e03c      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010092:	f7fa fb63 	bl	800a75c <HAL_RCC_GetPCLK2Freq>
 8010096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010098:	e038      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801009a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fb fd46 	bl	800bb30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100a8:	e030      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100aa:	f107 0318 	add.w	r3, r7, #24
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fb fe92 	bl	800bdd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100b8:	e028      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ba:	4b09      	ldr	r3, [pc, #36]	@ (80100e0 <UART_SetConfig+0xc2c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f003 0320 	and.w	r3, r3, #32
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d012      	beq.n	80100ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100c6:	4b06      	ldr	r3, [pc, #24]	@ (80100e0 <UART_SetConfig+0xc2c>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	08db      	lsrs	r3, r3, #3
 80100cc:	f003 0303 	and.w	r3, r3, #3
 80100d0:	4a04      	ldr	r2, [pc, #16]	@ (80100e4 <UART_SetConfig+0xc30>)
 80100d2:	fa22 f303 	lsr.w	r3, r2, r3
 80100d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100d8:	e018      	b.n	801010c <UART_SetConfig+0xc58>
 80100da:	bf00      	nop
 80100dc:	08018c38 	.word	0x08018c38
 80100e0:	58024400 	.word	0x58024400
 80100e4:	03d09000 	.word	0x03d09000
 80100e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80100ec:	4b24      	ldr	r3, [pc, #144]	@ (8010180 <UART_SetConfig+0xccc>)
 80100ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100f0:	e00c      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100f2:	4b24      	ldr	r3, [pc, #144]	@ (8010184 <UART_SetConfig+0xcd0>)
 80100f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100f6:	e009      	b.n	801010c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100fe:	e005      	b.n	801010c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010100:	2300      	movs	r3, #0
 8010102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010104:	2301      	movs	r3, #1
 8010106:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801010a:	bf00      	nop
    }

    if (pclk != 0U)
 801010c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801010e:	2b00      	cmp	r3, #0
 8010110:	d021      	beq.n	8010156 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010116:	4a1c      	ldr	r2, [pc, #112]	@ (8010188 <UART_SetConfig+0xcd4>)
 8010118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801011c:	461a      	mov	r2, r3
 801011e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010120:	fbb3 f2f2 	udiv	r2, r3, r2
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	085b      	lsrs	r3, r3, #1
 801012a:	441a      	add	r2, r3
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	fbb2 f3f3 	udiv	r3, r2, r3
 8010134:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010138:	2b0f      	cmp	r3, #15
 801013a:	d909      	bls.n	8010150 <UART_SetConfig+0xc9c>
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010142:	d205      	bcs.n	8010150 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010146:	b29a      	uxth	r2, r3
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60da      	str	r2, [r3, #12]
 801014e:	e002      	b.n	8010156 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010150:	2301      	movs	r3, #1
 8010152:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2201      	movs	r2, #1
 801015a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2201      	movs	r2, #1
 8010162:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2200      	movs	r2, #0
 801016a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2200      	movs	r2, #0
 8010170:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010172:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010176:	4618      	mov	r0, r3
 8010178:	3748      	adds	r7, #72	@ 0x48
 801017a:	46bd      	mov	sp, r7
 801017c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010180:	03d09000 	.word	0x03d09000
 8010184:	003d0900 	.word	0x003d0900
 8010188:	08018c38 	.word	0x08018c38

0801018c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010198:	f003 0308 	and.w	r3, r3, #8
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ba:	f003 0301 	and.w	r3, r3, #1
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00a      	beq.n	80101d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101dc:	f003 0302 	and.w	r3, r3, #2
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d00a      	beq.n	80101fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	430a      	orrs	r2, r1
 80101f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101fe:	f003 0304 	and.w	r3, r3, #4
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00a      	beq.n	801021c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	430a      	orrs	r2, r1
 801021a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	d00a      	beq.n	801023e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	430a      	orrs	r2, r1
 801023c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010242:	f003 0320 	and.w	r3, r3, #32
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00a      	beq.n	8010260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010268:	2b00      	cmp	r3, #0
 801026a:	d01a      	beq.n	80102a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	430a      	orrs	r2, r1
 8010280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801028a:	d10a      	bne.n	80102a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	430a      	orrs	r2, r1
 80102a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	430a      	orrs	r2, r1
 80102c2:	605a      	str	r2, [r3, #4]
  }
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b098      	sub	sp, #96	@ 0x60
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80102e0:	f7f5 fb86 	bl	80059f0 <HAL_GetTick>
 80102e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f003 0308 	and.w	r3, r3, #8
 80102f0:	2b08      	cmp	r3, #8
 80102f2:	d12f      	bne.n	8010354 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102fc:	2200      	movs	r2, #0
 80102fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f88e 	bl	8010424 <UART_WaitOnFlagUntilTimeout>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d022      	beq.n	8010354 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010316:	e853 3f00 	ldrex	r3, [r3]
 801031a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801031c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801031e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010322:	653b      	str	r3, [r7, #80]	@ 0x50
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	461a      	mov	r2, r3
 801032a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801032c:	647b      	str	r3, [r7, #68]	@ 0x44
 801032e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010334:	e841 2300 	strex	r3, r2, [r1]
 8010338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801033a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1e6      	bne.n	801030e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2220      	movs	r2, #32
 8010344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010350:	2303      	movs	r3, #3
 8010352:	e063      	b.n	801041c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 0304 	and.w	r3, r3, #4
 801035e:	2b04      	cmp	r3, #4
 8010360:	d149      	bne.n	80103f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010362:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010366:	9300      	str	r3, [sp, #0]
 8010368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801036a:	2200      	movs	r2, #0
 801036c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f857 	bl	8010424 <UART_WaitOnFlagUntilTimeout>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d03c      	beq.n	80103f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	623b      	str	r3, [r7, #32]
   return(result);
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	461a      	mov	r2, r3
 8010398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801039a:	633b      	str	r3, [r7, #48]	@ 0x30
 801039c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e6      	bne.n	801037c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3308      	adds	r3, #8
 80103b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f023 0301 	bic.w	r3, r3, #1
 80103c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3308      	adds	r3, #8
 80103cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80103ce:	61fa      	str	r2, [r7, #28]
 80103d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	69b9      	ldr	r1, [r7, #24]
 80103d4:	69fa      	ldr	r2, [r7, #28]
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	617b      	str	r3, [r7, #20]
   return(result);
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e5      	bne.n	80103ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2220      	movs	r2, #32
 80103e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e012      	b.n	801041c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2220      	movs	r2, #32
 80103fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2220      	movs	r2, #32
 8010402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3758      	adds	r7, #88	@ 0x58
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	603b      	str	r3, [r7, #0]
 8010430:	4613      	mov	r3, r2
 8010432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010434:	e04f      	b.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043c:	d04b      	beq.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801043e:	f7f5 fad7 	bl	80059f0 <HAL_GetTick>
 8010442:	4602      	mov	r2, r0
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	69ba      	ldr	r2, [r7, #24]
 801044a:	429a      	cmp	r2, r3
 801044c:	d302      	bcc.n	8010454 <UART_WaitOnFlagUntilTimeout+0x30>
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d101      	bne.n	8010458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010454:	2303      	movs	r3, #3
 8010456:	e04e      	b.n	80104f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f003 0304 	and.w	r3, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	d037      	beq.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	2b80      	cmp	r3, #128	@ 0x80
 801046a:	d034      	beq.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	2b40      	cmp	r3, #64	@ 0x40
 8010470:	d031      	beq.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69db      	ldr	r3, [r3, #28]
 8010478:	f003 0308 	and.w	r3, r3, #8
 801047c:	2b08      	cmp	r3, #8
 801047e:	d110      	bne.n	80104a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2208      	movs	r2, #8
 8010486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f921 	bl	80106d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2208      	movs	r2, #8
 8010492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2200      	movs	r2, #0
 801049a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801049e:	2301      	movs	r3, #1
 80104a0:	e029      	b.n	80104f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104b0:	d111      	bne.n	80104d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f000 f907 	bl	80106d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2220      	movs	r2, #32
 80104c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80104d2:	2303      	movs	r3, #3
 80104d4:	e00f      	b.n	80104f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	69da      	ldr	r2, [r3, #28]
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	4013      	ands	r3, r2
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	bf0c      	ite	eq
 80104e6:	2301      	moveq	r3, #1
 80104e8:	2300      	movne	r3, #0
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	461a      	mov	r2, r3
 80104ee:	79fb      	ldrb	r3, [r7, #7]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d0a0      	beq.n	8010436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b096      	sub	sp, #88	@ 0x58
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	88fa      	ldrh	r2, [r7, #6]
 8010518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2200      	movs	r2, #0
 8010520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2222      	movs	r2, #34	@ 0x22
 8010528:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010532:	2b00      	cmp	r3, #0
 8010534:	d02d      	beq.n	8010592 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801053c:	4a40      	ldr	r2, [pc, #256]	@ (8010640 <UART_Start_Receive_DMA+0x140>)
 801053e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010546:	4a3f      	ldr	r2, [pc, #252]	@ (8010644 <UART_Start_Receive_DMA+0x144>)
 8010548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010550:	4a3d      	ldr	r2, [pc, #244]	@ (8010648 <UART_Start_Receive_DMA+0x148>)
 8010552:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801055a:	2200      	movs	r2, #0
 801055c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	3324      	adds	r3, #36	@ 0x24
 801056a:	4619      	mov	r1, r3
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010570:	461a      	mov	r2, r3
 8010572:	88fb      	ldrh	r3, [r7, #6]
 8010574:	f7f5 ff5e 	bl	8006434 <HAL_DMA_Start_IT>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d009      	beq.n	8010592 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2210      	movs	r2, #16
 8010582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2220      	movs	r2, #32
 801058a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801058e:	2301      	movs	r3, #1
 8010590:	e051      	b.n	8010636 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d018      	beq.n	80105cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105a2:	e853 3f00 	ldrex	r3, [r3]
 80105a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	461a      	mov	r2, r3
 80105b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105c0:	e841 2300 	strex	r3, r2, [r1]
 80105c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1e6      	bne.n	801059a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3308      	adds	r3, #8
 80105d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d6:	e853 3f00 	ldrex	r3, [r3]
 80105da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105de:	f043 0301 	orr.w	r3, r3, #1
 80105e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3308      	adds	r3, #8
 80105ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80105ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80105ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80105f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105f4:	e841 2300 	strex	r3, r2, [r1]
 80105f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1e5      	bne.n	80105cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	3308      	adds	r3, #8
 8010606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	e853 3f00 	ldrex	r3, [r3]
 801060e:	613b      	str	r3, [r7, #16]
   return(result);
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	3308      	adds	r3, #8
 801061e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010620:	623a      	str	r2, [r7, #32]
 8010622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010624:	69f9      	ldr	r1, [r7, #28]
 8010626:	6a3a      	ldr	r2, [r7, #32]
 8010628:	e841 2300 	strex	r3, r2, [r1]
 801062c:	61bb      	str	r3, [r7, #24]
   return(result);
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1e5      	bne.n	8010600 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3758      	adds	r7, #88	@ 0x58
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	0801079d 	.word	0x0801079d
 8010644:	080108c5 	.word	0x080108c5
 8010648:	08010903 	.word	0x08010903

0801064c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801064c:	b480      	push	{r7}
 801064e:	b08f      	sub	sp, #60	@ 0x3c
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065a:	6a3b      	ldr	r3, [r7, #32]
 801065c:	e853 3f00 	ldrex	r3, [r3]
 8010660:	61fb      	str	r3, [r7, #28]
   return(result);
 8010662:	69fb      	ldr	r3, [r7, #28]
 8010664:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010668:	637b      	str	r3, [r7, #52]	@ 0x34
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	461a      	mov	r2, r3
 8010670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010674:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801067a:	e841 2300 	strex	r3, r2, [r1]
 801067e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1e6      	bne.n	8010654 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3308      	adds	r3, #8
 801068c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	e853 3f00 	ldrex	r3, [r3]
 8010694:	60bb      	str	r3, [r7, #8]
   return(result);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801069c:	633b      	str	r3, [r7, #48]	@ 0x30
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	3308      	adds	r3, #8
 80106a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106a6:	61ba      	str	r2, [r7, #24]
 80106a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106aa:	6979      	ldr	r1, [r7, #20]
 80106ac:	69ba      	ldr	r2, [r7, #24]
 80106ae:	e841 2300 	strex	r3, r2, [r1]
 80106b2:	613b      	str	r3, [r7, #16]
   return(result);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1e5      	bne.n	8010686 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80106c2:	bf00      	nop
 80106c4:	373c      	adds	r7, #60	@ 0x3c
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
	...

080106d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b095      	sub	sp, #84	@ 0x54
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106e0:	e853 3f00 	ldrex	r3, [r3]
 80106e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80106e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	461a      	mov	r2, r3
 80106f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80106f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106fe:	e841 2300 	strex	r3, r2, [r1]
 8010702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1e6      	bne.n	80106d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	3308      	adds	r3, #8
 8010710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	e853 3f00 	ldrex	r3, [r3]
 8010718:	61fb      	str	r3, [r7, #28]
   return(result);
 801071a:	69fa      	ldr	r2, [r7, #28]
 801071c:	4b1e      	ldr	r3, [pc, #120]	@ (8010798 <UART_EndRxTransfer+0xc8>)
 801071e:	4013      	ands	r3, r2
 8010720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	3308      	adds	r3, #8
 8010728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801072a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801072c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010732:	e841 2300 	strex	r3, r2, [r1]
 8010736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1e5      	bne.n	801070a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010742:	2b01      	cmp	r3, #1
 8010744:	d118      	bne.n	8010778 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	60bb      	str	r3, [r7, #8]
   return(result);
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	f023 0310 	bic.w	r3, r3, #16
 801075a:	647b      	str	r3, [r7, #68]	@ 0x44
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	461a      	mov	r2, r3
 8010762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010764:	61bb      	str	r3, [r7, #24]
 8010766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010768:	6979      	ldr	r1, [r7, #20]
 801076a:	69ba      	ldr	r2, [r7, #24]
 801076c:	e841 2300 	strex	r3, r2, [r1]
 8010770:	613b      	str	r3, [r7, #16]
   return(result);
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1e6      	bne.n	8010746 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2220      	movs	r2, #32
 801077c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801078c:	bf00      	nop
 801078e:	3754      	adds	r7, #84	@ 0x54
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr
 8010798:	effffffe 	.word	0xeffffffe

0801079c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b09c      	sub	sp, #112	@ 0x70
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	69db      	ldr	r3, [r3, #28]
 80107ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107b2:	d071      	beq.n	8010898 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80107b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107b6:	2200      	movs	r2, #0
 80107b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107c4:	e853 3f00 	ldrex	r3, [r3]
 80107c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80107ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	461a      	mov	r2, r3
 80107d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80107dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80107e2:	e841 2300 	strex	r3, r2, [r1]
 80107e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80107e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1e6      	bne.n	80107bc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3308      	adds	r3, #8
 80107f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f8:	e853 3f00 	ldrex	r3, [r3]
 80107fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010800:	f023 0301 	bic.w	r3, r3, #1
 8010804:	667b      	str	r3, [r7, #100]	@ 0x64
 8010806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3308      	adds	r3, #8
 801080c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801080e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010810:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010816:	e841 2300 	strex	r3, r2, [r1]
 801081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801081c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1e5      	bne.n	80107ee <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3308      	adds	r3, #8
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	e853 3f00 	ldrex	r3, [r3]
 8010830:	623b      	str	r3, [r7, #32]
   return(result);
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010838:	663b      	str	r3, [r7, #96]	@ 0x60
 801083a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	3308      	adds	r3, #8
 8010840:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010842:	633a      	str	r2, [r7, #48]	@ 0x30
 8010844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801084a:	e841 2300 	strex	r3, r2, [r1]
 801084e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1e5      	bne.n	8010822 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010858:	2220      	movs	r2, #32
 801085a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801085e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010862:	2b01      	cmp	r3, #1
 8010864:	d118      	bne.n	8010898 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	e853 3f00 	ldrex	r3, [r3]
 8010872:	60fb      	str	r3, [r7, #12]
   return(result);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f023 0310 	bic.w	r3, r3, #16
 801087a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801087c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	461a      	mov	r2, r3
 8010882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010884:	61fb      	str	r3, [r7, #28]
 8010886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010888:	69b9      	ldr	r1, [r7, #24]
 801088a:	69fa      	ldr	r2, [r7, #28]
 801088c:	e841 2300 	strex	r3, r2, [r1]
 8010890:	617b      	str	r3, [r7, #20]
   return(result);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1e6      	bne.n	8010866 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801089a:	2200      	movs	r2, #0
 801089c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801089e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d107      	bne.n	80108b6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80108ac:	4619      	mov	r1, r3
 80108ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108b0:	f7f3 fb3e 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108b4:	e002      	b.n	80108bc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80108b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108b8:	f7f3 fd6a 	bl	8004390 <HAL_UART_RxCpltCallback>
}
 80108bc:	bf00      	nop
 80108be:	3770      	adds	r7, #112	@ 0x70
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2201      	movs	r2, #1
 80108d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d109      	bne.n	80108f4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80108e6:	085b      	lsrs	r3, r3, #1
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	4619      	mov	r1, r3
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7f3 fb1f 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108f2:	e002      	b.n	80108fa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f7fe fdbf 	bl	800f478 <HAL_UART_RxHalfCpltCallback>
}
 80108fa:	bf00      	nop
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b086      	sub	sp, #24
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801090e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010916:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801091e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801092a:	2b80      	cmp	r3, #128	@ 0x80
 801092c:	d109      	bne.n	8010942 <UART_DMAError+0x40>
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2b21      	cmp	r3, #33	@ 0x21
 8010932:	d106      	bne.n	8010942 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	2200      	movs	r2, #0
 8010938:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801093c:	6978      	ldr	r0, [r7, #20]
 801093e:	f7ff fe85 	bl	801064c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801094c:	2b40      	cmp	r3, #64	@ 0x40
 801094e:	d109      	bne.n	8010964 <UART_DMAError+0x62>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2b22      	cmp	r3, #34	@ 0x22
 8010954:	d106      	bne.n	8010964 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	2200      	movs	r2, #0
 801095a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801095e:	6978      	ldr	r0, [r7, #20]
 8010960:	f7ff feb6 	bl	80106d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801096a:	f043 0210 	orr.w	r2, r3, #16
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010974:	6978      	ldr	r0, [r7, #20]
 8010976:	f7fe fd89 	bl	800f48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801097a:	bf00      	nop
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801098e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f7fe fd73 	bl	800f48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109a6:	bf00      	nop
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b084      	sub	sp, #16
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ba:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109c0:	2200      	movs	r2, #0
 80109c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d005      	beq.n	80109da <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d12b      	bne.n	8010a32 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2200      	movs	r2, #0
 80109e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	220f      	movs	r2, #15
 80109f8:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a02:	d107      	bne.n	8010a14 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	699a      	ldr	r2, [r3, #24]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f042 0210 	orr.w	r2, r2, #16
 8010a12:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2220      	movs	r2, #32
 8010a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2200      	movs	r2, #0
 8010a28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f7fe fd38 	bl	800f4a0 <HAL_UART_AbortCpltCallback>
 8010a30:	e000      	b.n	8010a34 <UART_DMATxAbortCallback+0x86>
      return;
 8010a32:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a46:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a4e:	2200      	movs	r2, #0
 8010a50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d004      	beq.n	8010a64 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d126      	bne.n	8010ab2 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	220f      	movs	r2, #15
 8010a82:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	699a      	ldr	r2, [r3, #24]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f042 0208 	orr.w	r2, r2, #8
 8010a92:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2220      	movs	r2, #32
 8010a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2220      	movs	r2, #32
 8010aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7fe fcf8 	bl	800f4a0 <HAL_UART_AbortCpltCallback>
 8010ab0:	e000      	b.n	8010ab4 <UART_DMARxAbortCallback+0x7a>
      return;
 8010ab2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b088      	sub	sp, #32
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	e853 3f00 	ldrex	r3, [r3]
 8010ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ad6:	61fb      	str	r3, [r7, #28]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	61bb      	str	r3, [r7, #24]
 8010ae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae4:	6979      	ldr	r1, [r7, #20]
 8010ae6:	69ba      	ldr	r2, [r7, #24]
 8010ae8:	e841 2300 	strex	r3, r2, [r1]
 8010aec:	613b      	str	r3, [r7, #16]
   return(result);
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1e6      	bne.n	8010ac2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2220      	movs	r2, #32
 8010af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7fe fcae 	bl	800f464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b08:	bf00      	nop
 8010b0a:	3720      	adds	r7, #32
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b18:	bf00      	nop
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010b2c:	bf00      	nop
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010b40:	bf00      	nop
 8010b42:	370c      	adds	r7, #12
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d101      	bne.n	8010b62 <HAL_UARTEx_DisableFifoMode+0x16>
 8010b5e:	2302      	movs	r3, #2
 8010b60:	e027      	b.n	8010bb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2201      	movs	r2, #1
 8010b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2224      	movs	r2, #36	@ 0x24
 8010b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f022 0201 	bic.w	r2, r2, #1
 8010b88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010b90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2220      	movs	r2, #32
 8010ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3714      	adds	r7, #20
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b084      	sub	sp, #16
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
 8010bc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d101      	bne.n	8010bd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bd2:	2302      	movs	r3, #2
 8010bd4:	e02d      	b.n	8010c32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2224      	movs	r2, #36	@ 0x24
 8010be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f022 0201 	bic.w	r2, r2, #1
 8010bfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	430a      	orrs	r2, r1
 8010c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f8a4 	bl	8010d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2220      	movs	r2, #32
 8010c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3710      	adds	r7, #16
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b084      	sub	sp, #16
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
 8010c42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d101      	bne.n	8010c52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c4e:	2302      	movs	r3, #2
 8010c50:	e02d      	b.n	8010cae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2224      	movs	r2, #36	@ 0x24
 8010c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f022 0201 	bic.w	r2, r2, #1
 8010c78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	683a      	ldr	r2, [r7, #0]
 8010c8a:	430a      	orrs	r2, r1
 8010c8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f866 	bl	8010d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2220      	movs	r2, #32
 8010ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010cac:	2300      	movs	r3, #0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b08c      	sub	sp, #48	@ 0x30
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	60f8      	str	r0, [r7, #12]
 8010cbe:	60b9      	str	r1, [r7, #8]
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cca:	2b20      	cmp	r3, #32
 8010ccc:	d142      	bne.n	8010d54 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d002      	beq.n	8010cda <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010cd4:	88fb      	ldrh	r3, [r7, #6]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e03b      	b.n	8010d56 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010cea:	88fb      	ldrh	r3, [r7, #6]
 8010cec:	461a      	mov	r2, r3
 8010cee:	68b9      	ldr	r1, [r7, #8]
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f7ff fc05 	bl	8010500 <UART_Start_Receive_DMA>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d124      	bne.n	8010d4e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d11d      	bne.n	8010d48 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2210      	movs	r2, #16
 8010d12:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1a:	69bb      	ldr	r3, [r7, #24]
 8010d1c:	e853 3f00 	ldrex	r3, [r3]
 8010d20:	617b      	str	r3, [r7, #20]
   return(result);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	f043 0310 	orr.w	r3, r3, #16
 8010d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d34:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d36:	6a39      	ldr	r1, [r7, #32]
 8010d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d3a:	e841 2300 	strex	r3, r2, [r1]
 8010d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d1e6      	bne.n	8010d14 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8010d46:	e002      	b.n	8010d4e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8010d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d52:	e000      	b.n	8010d56 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010d54:	2302      	movs	r3, #2
  }
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3730      	adds	r7, #48	@ 0x30
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
	...

08010d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b085      	sub	sp, #20
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d108      	bne.n	8010d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2201      	movs	r2, #1
 8010d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d80:	e031      	b.n	8010de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d82:	2310      	movs	r3, #16
 8010d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d86:	2310      	movs	r3, #16
 8010d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	0e5b      	lsrs	r3, r3, #25
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f003 0307 	and.w	r3, r3, #7
 8010d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	689b      	ldr	r3, [r3, #8]
 8010da0:	0f5b      	lsrs	r3, r3, #29
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	f003 0307 	and.w	r3, r3, #7
 8010da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010daa:	7bbb      	ldrb	r3, [r7, #14]
 8010dac:	7b3a      	ldrb	r2, [r7, #12]
 8010dae:	4911      	ldr	r1, [pc, #68]	@ (8010df4 <UARTEx_SetNbDataToProcess+0x94>)
 8010db0:	5c8a      	ldrb	r2, [r1, r2]
 8010db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010db6:	7b3a      	ldrb	r2, [r7, #12]
 8010db8:	490f      	ldr	r1, [pc, #60]	@ (8010df8 <UARTEx_SetNbDataToProcess+0x98>)
 8010dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
 8010dca:	7b7a      	ldrb	r2, [r7, #13]
 8010dcc:	4909      	ldr	r1, [pc, #36]	@ (8010df4 <UARTEx_SetNbDataToProcess+0x94>)
 8010dce:	5c8a      	ldrb	r2, [r1, r2]
 8010dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010dd4:	7b7a      	ldrb	r2, [r7, #13]
 8010dd6:	4908      	ldr	r1, [pc, #32]	@ (8010df8 <UARTEx_SetNbDataToProcess+0x98>)
 8010dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010de6:	bf00      	nop
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	08018c50 	.word	0x08018c50
 8010df8:	08018c58 	.word	0x08018c58

08010dfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010e00:	4904      	ldr	r1, [pc, #16]	@ (8010e14 <MX_FATFS_Init+0x18>)
 8010e02:	4805      	ldr	r0, [pc, #20]	@ (8010e18 <MX_FATFS_Init+0x1c>)
 8010e04:	f004 fd9e 	bl	8015944 <FATFS_LinkDriver>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	4b03      	ldr	r3, [pc, #12]	@ (8010e1c <MX_FATFS_Init+0x20>)
 8010e0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010e10:	bf00      	nop
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	24005070 	.word	0x24005070
 8010e18:	240000d0 	.word	0x240000d0
 8010e1c:	2400506c 	.word	0x2400506c

08010e20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010e20:	b480      	push	{r7}
 8010e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010e24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	4603      	mov	r3, r0
 8010e38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 f9fd 	bl	801123c <SD_disk_initialize>
 8010e42:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f000 fad5 	bl	8011408 <SD_disk_status>
 8010e5e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60b9      	str	r1, [r7, #8]
 8010e70:	607a      	str	r2, [r7, #4]
 8010e72:	603b      	str	r3, [r7, #0]
 8010e74:	4603      	mov	r3, r0
 8010e76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8010e78:	7bf8      	ldrb	r0, [r7, #15]
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	68b9      	ldr	r1, [r7, #8]
 8010e80:	f000 fad8 	bl	8011434 <SD_disk_read>
 8010e84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b084      	sub	sp, #16
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	607a      	str	r2, [r7, #4]
 8010e98:	603b      	str	r3, [r7, #0]
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8010e9e:	7bf8      	ldrb	r0, [r7, #15]
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	68b9      	ldr	r1, [r7, #8]
 8010ea6:	f000 fb2f 	bl	8011508 <SD_disk_write>
 8010eaa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	603a      	str	r2, [r7, #0]
 8010ebe:	71fb      	strb	r3, [r7, #7]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8010ec4:	79b9      	ldrb	r1, [r7, #6]
 8010ec6:	79fb      	ldrb	r3, [r7, #7]
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 fba0 	bl	8011610 <SD_disk_ioctl>
 8010ed0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
	...

08010edc <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2110      	movs	r1, #16
 8010ee4:	4802      	ldr	r0, [pc, #8]	@ (8010ef0 <SELECT+0x14>)
 8010ee6:	f7f8 fb09 	bl	80094fc <HAL_GPIO_WritePin>
}
 8010eea:	bf00      	nop
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	58020000 	.word	0x58020000

08010ef4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8010ef8:	2201      	movs	r2, #1
 8010efa:	2110      	movs	r1, #16
 8010efc:	4802      	ldr	r0, [pc, #8]	@ (8010f08 <DESELECT+0x14>)
 8010efe:	f7f8 fafd 	bl	80094fc <HAL_GPIO_WritePin>
}
 8010f02:	bf00      	nop
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	58020000 	.word	0x58020000

08010f0c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010f16:	bf00      	nop
 8010f18:	4b08      	ldr	r3, [pc, #32]	@ (8010f3c <SPI_TxByte+0x30>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	f003 0302 	and.w	r3, r3, #2
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d1f8      	bne.n	8010f18 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8010f26:	1df9      	adds	r1, r7, #7
 8010f28:	2364      	movs	r3, #100	@ 0x64
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	4803      	ldr	r0, [pc, #12]	@ (8010f3c <SPI_TxByte+0x30>)
 8010f2e:	f7fb fb2f 	bl	800c590 <HAL_SPI_Transmit>
}
 8010f32:	bf00      	nop
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	240049d4 	.word	0x240049d4

08010f40 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010f4c:	bf00      	nop
 8010f4e:	4b08      	ldr	r3, [pc, #32]	@ (8010f70 <SPI_TxBuffer+0x30>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	695b      	ldr	r3, [r3, #20]
 8010f54:	f003 0302 	and.w	r3, r3, #2
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d1f8      	bne.n	8010f4e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8010f5c:	887a      	ldrh	r2, [r7, #2]
 8010f5e:	2364      	movs	r3, #100	@ 0x64
 8010f60:	6879      	ldr	r1, [r7, #4]
 8010f62:	4803      	ldr	r0, [pc, #12]	@ (8010f70 <SPI_TxBuffer+0x30>)
 8010f64:	f7fb fb14 	bl	800c590 <HAL_SPI_Transmit>
}
 8010f68:	bf00      	nop
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	240049d4 	.word	0x240049d4

08010f74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8010f7a:	23ff      	movs	r3, #255	@ 0xff
 8010f7c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010f7e:	bf00      	nop
 8010f80:	4b09      	ldr	r3, [pc, #36]	@ (8010fa8 <SPI_RxByte+0x34>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	695b      	ldr	r3, [r3, #20]
 8010f86:	f003 0302 	and.w	r3, r3, #2
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	d1f8      	bne.n	8010f80 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8010f8e:	1dba      	adds	r2, r7, #6
 8010f90:	1df9      	adds	r1, r7, #7
 8010f92:	2364      	movs	r3, #100	@ 0x64
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	2301      	movs	r3, #1
 8010f98:	4803      	ldr	r0, [pc, #12]	@ (8010fa8 <SPI_RxByte+0x34>)
 8010f9a:	f7fb ff59 	bl	800ce50 <HAL_SPI_TransmitReceive>
  return data;
 8010f9e:	79bb      	ldrb	r3, [r7, #6]
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	240049d4 	.word	0x240049d4

08010fac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8010fb4:	f7ff ffde 	bl	8010f74 <SPI_RxByte>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	461a      	mov	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	701a      	strb	r2, [r3, #0]
}
 8010fc0:	bf00      	nop
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8010fce:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff8 <SD_ReadyWait+0x30>)
 8010fd0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8010fd4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8010fd6:	f7ff ffcd 	bl	8010f74 <SPI_RxByte>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	2bff      	cmp	r3, #255	@ 0xff
 8010fe2:	d003      	beq.n	8010fec <SD_ReadyWait+0x24>
 8010fe4:	4b04      	ldr	r3, [pc, #16]	@ (8010ff8 <SD_ReadyWait+0x30>)
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1f4      	bne.n	8010fd6 <SD_ReadyWait+0xe>
  return res;
 8010fec:	79fb      	ldrb	r3, [r7, #7]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	24005076 	.word	0x24005076

08010ffc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8011002:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8011006:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8011008:	f7ff ff74 	bl	8010ef4 <DESELECT>
  for(int i = 0; i < 10; i++)
 801100c:	2300      	movs	r3, #0
 801100e:	60bb      	str	r3, [r7, #8]
 8011010:	e005      	b.n	801101e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8011012:	20ff      	movs	r0, #255	@ 0xff
 8011014:	f7ff ff7a 	bl	8010f0c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	3301      	adds	r3, #1
 801101c:	60bb      	str	r3, [r7, #8]
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	2b09      	cmp	r3, #9
 8011022:	ddf6      	ble.n	8011012 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8011024:	f7ff ff5a 	bl	8010edc <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8011028:	2340      	movs	r3, #64	@ 0x40
 801102a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 801102c:	2300      	movs	r3, #0
 801102e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8011030:	2300      	movs	r3, #0
 8011032:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 801103c:	2395      	movs	r3, #149	@ 0x95
 801103e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8011040:	463b      	mov	r3, r7
 8011042:	2106      	movs	r1, #6
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff ff7b 	bl	8010f40 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 801104a:	e002      	b.n	8011052 <SD_PowerOn+0x56>
  {
    cnt--;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	3b01      	subs	r3, #1
 8011050:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8011052:	f7ff ff8f 	bl	8010f74 <SPI_RxByte>
 8011056:	4603      	mov	r3, r0
 8011058:	2b01      	cmp	r3, #1
 801105a:	d002      	beq.n	8011062 <SD_PowerOn+0x66>
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1f4      	bne.n	801104c <SD_PowerOn+0x50>
  }
  DESELECT();
 8011062:	f7ff ff47 	bl	8010ef4 <DESELECT>
  SPI_TxByte(0XFF);
 8011066:	20ff      	movs	r0, #255	@ 0xff
 8011068:	f7ff ff50 	bl	8010f0c <SPI_TxByte>
  PowerFlag = 1;
 801106c:	4b03      	ldr	r3, [pc, #12]	@ (801107c <SD_PowerOn+0x80>)
 801106e:	2201      	movs	r2, #1
 8011070:	701a      	strb	r2, [r3, #0]
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	24005079 	.word	0x24005079

08011080 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8011080:	b480      	push	{r7}
 8011082:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8011084:	4b03      	ldr	r3, [pc, #12]	@ (8011094 <SD_PowerOff+0x14>)
 8011086:	2200      	movs	r2, #0
 8011088:	701a      	strb	r2, [r3, #0]
}
 801108a:	bf00      	nop
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr
 8011094:	24005079 	.word	0x24005079

08011098 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8011098:	b480      	push	{r7}
 801109a:	af00      	add	r7, sp, #0
  return PowerFlag;
 801109c:	4b03      	ldr	r3, [pc, #12]	@ (80110ac <SD_CheckPower+0x14>)
 801109e:	781b      	ldrb	r3, [r3, #0]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr
 80110aa:	bf00      	nop
 80110ac:	24005079 	.word	0x24005079

080110b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80110ba:	4b13      	ldr	r3, [pc, #76]	@ (8011108 <SD_RxDataBlock+0x58>)
 80110bc:	22c8      	movs	r2, #200	@ 0xc8
 80110be:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80110c0:	f7ff ff58 	bl	8010f74 <SPI_RxByte>
 80110c4:	4603      	mov	r3, r0
 80110c6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
 80110ca:	2bff      	cmp	r3, #255	@ 0xff
 80110cc:	d103      	bne.n	80110d6 <SD_RxDataBlock+0x26>
 80110ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011108 <SD_RxDataBlock+0x58>)
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1f4      	bne.n	80110c0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80110da:	d001      	beq.n	80110e0 <SD_RxDataBlock+0x30>
 80110dc:	2300      	movs	r3, #0
 80110de:	e00f      	b.n	8011100 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	1c5a      	adds	r2, r3, #1
 80110e4:	607a      	str	r2, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7ff ff60 	bl	8010fac <SPI_RxBytePtr>
  } while(len--);
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	1e5a      	subs	r2, r3, #1
 80110f0:	603a      	str	r2, [r7, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1f4      	bne.n	80110e0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80110f6:	f7ff ff3d 	bl	8010f74 <SPI_RxByte>
  SPI_RxByte();
 80110fa:	f7ff ff3b 	bl	8010f74 <SPI_RxByte>
  return TRUE;
 80110fe:	2301      	movs	r3, #1
}
 8011100:	4618      	mov	r0, r3
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	24005074 	.word	0x24005074

0801110c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	460b      	mov	r3, r1
 8011116:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 801111c:	f7ff ff54 	bl	8010fc8 <SD_ReadyWait>
 8011120:	4603      	mov	r3, r0
 8011122:	2bff      	cmp	r3, #255	@ 0xff
 8011124:	d001      	beq.n	801112a <SD_TxDataBlock+0x1e>
 8011126:	2300      	movs	r3, #0
 8011128:	e02f      	b.n	801118a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 801112a:	78fb      	ldrb	r3, [r7, #3]
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff feed 	bl	8010f0c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8011132:	78fb      	ldrb	r3, [r7, #3]
 8011134:	2bfd      	cmp	r3, #253	@ 0xfd
 8011136:	d020      	beq.n	801117a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8011138:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff feff 	bl	8010f40 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8011142:	f7ff ff17 	bl	8010f74 <SPI_RxByte>
    SPI_RxByte();
 8011146:	f7ff ff15 	bl	8010f74 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 801114a:	e00b      	b.n	8011164 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 801114c:	f7ff ff12 	bl	8010f74 <SPI_RxByte>
 8011150:	4603      	mov	r3, r0
 8011152:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8011154:	7bfb      	ldrb	r3, [r7, #15]
 8011156:	f003 031f 	and.w	r3, r3, #31
 801115a:	2b05      	cmp	r3, #5
 801115c:	d006      	beq.n	801116c <SD_TxDataBlock+0x60>
      i++;
 801115e:	7bbb      	ldrb	r3, [r7, #14]
 8011160:	3301      	adds	r3, #1
 8011162:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8011164:	7bbb      	ldrb	r3, [r7, #14]
 8011166:	2b40      	cmp	r3, #64	@ 0x40
 8011168:	d9f0      	bls.n	801114c <SD_TxDataBlock+0x40>
 801116a:	e000      	b.n	801116e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 801116c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 801116e:	bf00      	nop
 8011170:	f7ff ff00 	bl	8010f74 <SPI_RxByte>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0fa      	beq.n	8011170 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 801117a:	7bfb      	ldrb	r3, [r7, #15]
 801117c:	f003 031f 	and.w	r3, r3, #31
 8011180:	2b05      	cmp	r3, #5
 8011182:	d101      	bne.n	8011188 <SD_TxDataBlock+0x7c>
 8011184:	2301      	movs	r3, #1
 8011186:	e000      	b.n	801118a <SD_TxDataBlock+0x7e>

  return FALSE;
 8011188:	2300      	movs	r3, #0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b084      	sub	sp, #16
 8011196:	af00      	add	r7, sp, #0
 8011198:	4603      	mov	r3, r0
 801119a:	6039      	str	r1, [r7, #0]
 801119c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 801119e:	f7ff ff13 	bl	8010fc8 <SD_ReadyWait>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2bff      	cmp	r3, #255	@ 0xff
 80111a6:	d001      	beq.n	80111ac <SD_SendCmd+0x1a>
 80111a8:	23ff      	movs	r3, #255	@ 0xff
 80111aa:	e042      	b.n	8011232 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80111ac:	79fb      	ldrb	r3, [r7, #7]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7ff feac 	bl	8010f0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	0e1b      	lsrs	r3, r3, #24
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ff fea6 	bl	8010f0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	0c1b      	lsrs	r3, r3, #16
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fea0 	bl	8010f0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	0a1b      	lsrs	r3, r3, #8
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff fe9a 	bl	8010f0c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff fe95 	bl	8010f0c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80111e2:	79fb      	ldrb	r3, [r7, #7]
 80111e4:	2b40      	cmp	r3, #64	@ 0x40
 80111e6:	d102      	bne.n	80111ee <SD_SendCmd+0x5c>
 80111e8:	2395      	movs	r3, #149	@ 0x95
 80111ea:	73fb      	strb	r3, [r7, #15]
 80111ec:	e007      	b.n	80111fe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	2b48      	cmp	r3, #72	@ 0x48
 80111f2:	d102      	bne.n	80111fa <SD_SendCmd+0x68>
 80111f4:	2387      	movs	r3, #135	@ 0x87
 80111f6:	73fb      	strb	r3, [r7, #15]
 80111f8:	e001      	b.n	80111fe <SD_SendCmd+0x6c>
  else crc = 1;
 80111fa:	2301      	movs	r3, #1
 80111fc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80111fe:	7bfb      	ldrb	r3, [r7, #15]
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff fe83 	bl	8010f0c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8011206:	79fb      	ldrb	r3, [r7, #7]
 8011208:	2b4c      	cmp	r3, #76	@ 0x4c
 801120a:	d101      	bne.n	8011210 <SD_SendCmd+0x7e>
 801120c:	f7ff feb2 	bl	8010f74 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8011210:	230a      	movs	r3, #10
 8011212:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8011214:	f7ff feae 	bl	8010f74 <SPI_RxByte>
 8011218:	4603      	mov	r3, r0
 801121a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801121c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011220:	2b00      	cmp	r3, #0
 8011222:	da05      	bge.n	8011230 <SD_SendCmd+0x9e>
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	3b01      	subs	r3, #1
 8011228:	73bb      	strb	r3, [r7, #14]
 801122a:	7bbb      	ldrb	r3, [r7, #14]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1f1      	bne.n	8011214 <SD_SendCmd+0x82>

  return res;
 8011230:	7b7b      	ldrb	r3, [r7, #13]
}
 8011232:	4618      	mov	r0, r3
 8011234:	3710      	adds	r7, #16
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
	...

0801123c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 801123c:	b590      	push	{r4, r7, lr}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	4603      	mov	r3, r0
 8011244:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011246:	79fb      	ldrb	r3, [r7, #7]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <SD_disk_initialize+0x14>
 801124c:	2301      	movs	r3, #1
 801124e:	e0d1      	b.n	80113f4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8011250:	4b6a      	ldr	r3, [pc, #424]	@ (80113fc <SD_disk_initialize+0x1c0>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	f003 0302 	and.w	r3, r3, #2
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <SD_disk_initialize+0x2a>
 801125e:	4b67      	ldr	r3, [pc, #412]	@ (80113fc <SD_disk_initialize+0x1c0>)
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	e0c6      	b.n	80113f4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011266:	f7ff fec9 	bl	8010ffc <SD_PowerOn>
  /* slave select */
  SELECT();
 801126a:	f7ff fe37 	bl	8010edc <SELECT>
  /* check disk type */
  type = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8011272:	2100      	movs	r1, #0
 8011274:	2040      	movs	r0, #64	@ 0x40
 8011276:	f7ff ff8c 	bl	8011192 <SD_SendCmd>
 801127a:	4603      	mov	r3, r0
 801127c:	2b01      	cmp	r3, #1
 801127e:	f040 80a1 	bne.w	80113c4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8011282:	4b5f      	ldr	r3, [pc, #380]	@ (8011400 <SD_disk_initialize+0x1c4>)
 8011284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011288:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 801128a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801128e:	2048      	movs	r0, #72	@ 0x48
 8011290:	f7ff ff7f 	bl	8011192 <SD_SendCmd>
 8011294:	4603      	mov	r3, r0
 8011296:	2b01      	cmp	r3, #1
 8011298:	d155      	bne.n	8011346 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 801129a:	2300      	movs	r3, #0
 801129c:	73fb      	strb	r3, [r7, #15]
 801129e:	e00c      	b.n	80112ba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80112a0:	7bfc      	ldrb	r4, [r7, #15]
 80112a2:	f7ff fe67 	bl	8010f74 <SPI_RxByte>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	f104 0310 	add.w	r3, r4, #16
 80112ae:	443b      	add	r3, r7
 80112b0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	3301      	adds	r3, #1
 80112b8:	73fb      	strb	r3, [r7, #15]
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
 80112bc:	2b03      	cmp	r3, #3
 80112be:	d9ef      	bls.n	80112a0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80112c0:	7abb      	ldrb	r3, [r7, #10]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d17e      	bne.n	80113c4 <SD_disk_initialize+0x188>
 80112c6:	7afb      	ldrb	r3, [r7, #11]
 80112c8:	2baa      	cmp	r3, #170	@ 0xaa
 80112ca:	d17b      	bne.n	80113c4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80112cc:	2100      	movs	r1, #0
 80112ce:	2077      	movs	r0, #119	@ 0x77
 80112d0:	f7ff ff5f 	bl	8011192 <SD_SendCmd>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d807      	bhi.n	80112ea <SD_disk_initialize+0xae>
 80112da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80112de:	2069      	movs	r0, #105	@ 0x69
 80112e0:	f7ff ff57 	bl	8011192 <SD_SendCmd>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80112ea:	4b45      	ldr	r3, [pc, #276]	@ (8011400 <SD_disk_initialize+0x1c4>)
 80112ec:	881b      	ldrh	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1ec      	bne.n	80112cc <SD_disk_initialize+0x90>
 80112f2:	e000      	b.n	80112f6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80112f4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80112f6:	4b42      	ldr	r3, [pc, #264]	@ (8011400 <SD_disk_initialize+0x1c4>)
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d062      	beq.n	80113c4 <SD_disk_initialize+0x188>
 80112fe:	2100      	movs	r1, #0
 8011300:	207a      	movs	r0, #122	@ 0x7a
 8011302:	f7ff ff46 	bl	8011192 <SD_SendCmd>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d15b      	bne.n	80113c4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]
 8011310:	e00c      	b.n	801132c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8011312:	7bfc      	ldrb	r4, [r7, #15]
 8011314:	f7ff fe2e 	bl	8010f74 <SPI_RxByte>
 8011318:	4603      	mov	r3, r0
 801131a:	461a      	mov	r2, r3
 801131c:	f104 0310 	add.w	r3, r4, #16
 8011320:	443b      	add	r3, r7
 8011322:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8011326:	7bfb      	ldrb	r3, [r7, #15]
 8011328:	3301      	adds	r3, #1
 801132a:	73fb      	strb	r3, [r7, #15]
 801132c:	7bfb      	ldrb	r3, [r7, #15]
 801132e:	2b03      	cmp	r3, #3
 8011330:	d9ef      	bls.n	8011312 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8011332:	7a3b      	ldrb	r3, [r7, #8]
 8011334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011338:	2b00      	cmp	r3, #0
 801133a:	d001      	beq.n	8011340 <SD_disk_initialize+0x104>
 801133c:	230c      	movs	r3, #12
 801133e:	e000      	b.n	8011342 <SD_disk_initialize+0x106>
 8011340:	2304      	movs	r3, #4
 8011342:	73bb      	strb	r3, [r7, #14]
 8011344:	e03e      	b.n	80113c4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8011346:	2100      	movs	r1, #0
 8011348:	2077      	movs	r0, #119	@ 0x77
 801134a:	f7ff ff22 	bl	8011192 <SD_SendCmd>
 801134e:	4603      	mov	r3, r0
 8011350:	2b01      	cmp	r3, #1
 8011352:	d808      	bhi.n	8011366 <SD_disk_initialize+0x12a>
 8011354:	2100      	movs	r1, #0
 8011356:	2069      	movs	r0, #105	@ 0x69
 8011358:	f7ff ff1b 	bl	8011192 <SD_SendCmd>
 801135c:	4603      	mov	r3, r0
 801135e:	2b01      	cmp	r3, #1
 8011360:	d801      	bhi.n	8011366 <SD_disk_initialize+0x12a>
 8011362:	2302      	movs	r3, #2
 8011364:	e000      	b.n	8011368 <SD_disk_initialize+0x12c>
 8011366:	2301      	movs	r3, #1
 8011368:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 801136a:	7bbb      	ldrb	r3, [r7, #14]
 801136c:	2b02      	cmp	r3, #2
 801136e:	d10e      	bne.n	801138e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8011370:	2100      	movs	r1, #0
 8011372:	2077      	movs	r0, #119	@ 0x77
 8011374:	f7ff ff0d 	bl	8011192 <SD_SendCmd>
 8011378:	4603      	mov	r3, r0
 801137a:	2b01      	cmp	r3, #1
 801137c:	d80e      	bhi.n	801139c <SD_disk_initialize+0x160>
 801137e:	2100      	movs	r1, #0
 8011380:	2069      	movs	r0, #105	@ 0x69
 8011382:	f7ff ff06 	bl	8011192 <SD_SendCmd>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d107      	bne.n	801139c <SD_disk_initialize+0x160>
 801138c:	e00c      	b.n	80113a8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801138e:	2100      	movs	r1, #0
 8011390:	2041      	movs	r0, #65	@ 0x41
 8011392:	f7ff fefe 	bl	8011192 <SD_SendCmd>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d004      	beq.n	80113a6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 801139c:	4b18      	ldr	r3, [pc, #96]	@ (8011400 <SD_disk_initialize+0x1c4>)
 801139e:	881b      	ldrh	r3, [r3, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e2      	bne.n	801136a <SD_disk_initialize+0x12e>
 80113a4:	e000      	b.n	80113a8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80113a6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80113a8:	4b15      	ldr	r3, [pc, #84]	@ (8011400 <SD_disk_initialize+0x1c4>)
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d007      	beq.n	80113c0 <SD_disk_initialize+0x184>
 80113b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80113b4:	2050      	movs	r0, #80	@ 0x50
 80113b6:	f7ff feec 	bl	8011192 <SD_SendCmd>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d001      	beq.n	80113c4 <SD_disk_initialize+0x188>
 80113c0:	2300      	movs	r3, #0
 80113c2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80113c4:	4a0f      	ldr	r2, [pc, #60]	@ (8011404 <SD_disk_initialize+0x1c8>)
 80113c6:	7bbb      	ldrb	r3, [r7, #14]
 80113c8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80113ca:	f7ff fd93 	bl	8010ef4 <DESELECT>
  SPI_RxByte();
 80113ce:	f7ff fdd1 	bl	8010f74 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80113d2:	7bbb      	ldrb	r3, [r7, #14]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d008      	beq.n	80113ea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80113d8:	4b08      	ldr	r3, [pc, #32]	@ (80113fc <SD_disk_initialize+0x1c0>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f023 0301 	bic.w	r3, r3, #1
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	4b05      	ldr	r3, [pc, #20]	@ (80113fc <SD_disk_initialize+0x1c0>)
 80113e6:	701a      	strb	r2, [r3, #0]
 80113e8:	e001      	b.n	80113ee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80113ea:	f7ff fe49 	bl	8011080 <SD_PowerOff>
  }
  return Stat;
 80113ee:	4b03      	ldr	r3, [pc, #12]	@ (80113fc <SD_disk_initialize+0x1c0>)
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	b2db      	uxtb	r3, r3
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3714      	adds	r7, #20
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd90      	pop	{r4, r7, pc}
 80113fc:	240000e4 	.word	0x240000e4
 8011400:	24005074 	.word	0x24005074
 8011404:	24005078 	.word	0x24005078

08011408 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	4603      	mov	r3, r0
 8011410:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8011412:	79fb      	ldrb	r3, [r7, #7]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d001      	beq.n	801141c <SD_disk_status+0x14>
 8011418:	2301      	movs	r3, #1
 801141a:	e002      	b.n	8011422 <SD_disk_status+0x1a>
  return Stat;
 801141c:	4b04      	ldr	r3, [pc, #16]	@ (8011430 <SD_disk_status+0x28>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	b2db      	uxtb	r3, r3
}
 8011422:	4618      	mov	r0, r3
 8011424:	370c      	adds	r7, #12
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	240000e4 	.word	0x240000e4

08011434 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	60b9      	str	r1, [r7, #8]
 801143c:	607a      	str	r2, [r7, #4]
 801143e:	603b      	str	r3, [r7, #0]
 8011440:	4603      	mov	r3, r0
 8011442:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011444:	7bfb      	ldrb	r3, [r7, #15]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d102      	bne.n	8011450 <SD_disk_read+0x1c>
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d101      	bne.n	8011454 <SD_disk_read+0x20>
 8011450:	2304      	movs	r3, #4
 8011452:	e051      	b.n	80114f8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011454:	4b2a      	ldr	r3, [pc, #168]	@ (8011500 <SD_disk_read+0xcc>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	b2db      	uxtb	r3, r3
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	2b00      	cmp	r3, #0
 8011460:	d001      	beq.n	8011466 <SD_disk_read+0x32>
 8011462:	2303      	movs	r3, #3
 8011464:	e048      	b.n	80114f8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8011466:	4b27      	ldr	r3, [pc, #156]	@ (8011504 <SD_disk_read+0xd0>)
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	f003 0304 	and.w	r3, r3, #4
 801146e:	2b00      	cmp	r3, #0
 8011470:	d102      	bne.n	8011478 <SD_disk_read+0x44>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	025b      	lsls	r3, r3, #9
 8011476:	607b      	str	r3, [r7, #4]

  SELECT();
 8011478:	f7ff fd30 	bl	8010edc <SELECT>

  if (count == 1)
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d111      	bne.n	80114a6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8011482:	6879      	ldr	r1, [r7, #4]
 8011484:	2051      	movs	r0, #81	@ 0x51
 8011486:	f7ff fe84 	bl	8011192 <SD_SendCmd>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d129      	bne.n	80114e4 <SD_disk_read+0xb0>
 8011490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011494:	68b8      	ldr	r0, [r7, #8]
 8011496:	f7ff fe0b 	bl	80110b0 <SD_RxDataBlock>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	d021      	beq.n	80114e4 <SD_disk_read+0xb0>
 80114a0:	2300      	movs	r3, #0
 80114a2:	603b      	str	r3, [r7, #0]
 80114a4:	e01e      	b.n	80114e4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	2052      	movs	r0, #82	@ 0x52
 80114aa:	f7ff fe72 	bl	8011192 <SD_SendCmd>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d117      	bne.n	80114e4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80114b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80114b8:	68b8      	ldr	r0, [r7, #8]
 80114ba:	f7ff fdf9 	bl	80110b0 <SD_RxDataBlock>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d00a      	beq.n	80114da <SD_disk_read+0xa6>
        buff += 512;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80114ca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	603b      	str	r3, [r7, #0]
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1ed      	bne.n	80114b4 <SD_disk_read+0x80>
 80114d8:	e000      	b.n	80114dc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80114da:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80114dc:	2100      	movs	r1, #0
 80114de:	204c      	movs	r0, #76	@ 0x4c
 80114e0:	f7ff fe57 	bl	8011192 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80114e4:	f7ff fd06 	bl	8010ef4 <DESELECT>
  SPI_RxByte();
 80114e8:	f7ff fd44 	bl	8010f74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	bf14      	ite	ne
 80114f2:	2301      	movne	r3, #1
 80114f4:	2300      	moveq	r3, #0
 80114f6:	b2db      	uxtb	r3, r3
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	240000e4 	.word	0x240000e4
 8011504:	24005078 	.word	0x24005078

08011508 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	60b9      	str	r1, [r7, #8]
 8011510:	607a      	str	r2, [r7, #4]
 8011512:	603b      	str	r3, [r7, #0]
 8011514:	4603      	mov	r3, r0
 8011516:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d102      	bne.n	8011524 <SD_disk_write+0x1c>
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <SD_disk_write+0x20>
 8011524:	2304      	movs	r3, #4
 8011526:	e06b      	b.n	8011600 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011528:	4b37      	ldr	r3, [pc, #220]	@ (8011608 <SD_disk_write+0x100>)
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	b2db      	uxtb	r3, r3
 801152e:	f003 0301 	and.w	r3, r3, #1
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <SD_disk_write+0x32>
 8011536:	2303      	movs	r3, #3
 8011538:	e062      	b.n	8011600 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801153a:	4b33      	ldr	r3, [pc, #204]	@ (8011608 <SD_disk_write+0x100>)
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	b2db      	uxtb	r3, r3
 8011540:	f003 0304 	and.w	r3, r3, #4
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <SD_disk_write+0x44>
 8011548:	2302      	movs	r3, #2
 801154a:	e059      	b.n	8011600 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801154c:	4b2f      	ldr	r3, [pc, #188]	@ (801160c <SD_disk_write+0x104>)
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	f003 0304 	and.w	r3, r3, #4
 8011554:	2b00      	cmp	r3, #0
 8011556:	d102      	bne.n	801155e <SD_disk_write+0x56>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	025b      	lsls	r3, r3, #9
 801155c:	607b      	str	r3, [r7, #4]

  SELECT();
 801155e:	f7ff fcbd 	bl	8010edc <SELECT>

  if (count == 1)
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	2b01      	cmp	r3, #1
 8011566:	d110      	bne.n	801158a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8011568:	6879      	ldr	r1, [r7, #4]
 801156a:	2058      	movs	r0, #88	@ 0x58
 801156c:	f7ff fe11 	bl	8011192 <SD_SendCmd>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d13a      	bne.n	80115ec <SD_disk_write+0xe4>
 8011576:	21fe      	movs	r1, #254	@ 0xfe
 8011578:	68b8      	ldr	r0, [r7, #8]
 801157a:	f7ff fdc7 	bl	801110c <SD_TxDataBlock>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d033      	beq.n	80115ec <SD_disk_write+0xe4>
      count = 0;
 8011584:	2300      	movs	r3, #0
 8011586:	603b      	str	r3, [r7, #0]
 8011588:	e030      	b.n	80115ec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 801158a:	4b20      	ldr	r3, [pc, #128]	@ (801160c <SD_disk_write+0x104>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	f003 0302 	and.w	r3, r3, #2
 8011592:	2b00      	cmp	r3, #0
 8011594:	d007      	beq.n	80115a6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8011596:	2100      	movs	r1, #0
 8011598:	2077      	movs	r0, #119	@ 0x77
 801159a:	f7ff fdfa 	bl	8011192 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	2057      	movs	r0, #87	@ 0x57
 80115a2:	f7ff fdf6 	bl	8011192 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80115a6:	6879      	ldr	r1, [r7, #4]
 80115a8:	2059      	movs	r0, #89	@ 0x59
 80115aa:	f7ff fdf2 	bl	8011192 <SD_SendCmd>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d11b      	bne.n	80115ec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80115b4:	21fc      	movs	r1, #252	@ 0xfc
 80115b6:	68b8      	ldr	r0, [r7, #8]
 80115b8:	f7ff fda8 	bl	801110c <SD_TxDataBlock>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00a      	beq.n	80115d8 <SD_disk_write+0xd0>
        buff += 512;
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80115c8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	3b01      	subs	r3, #1
 80115ce:	603b      	str	r3, [r7, #0]
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1ee      	bne.n	80115b4 <SD_disk_write+0xac>
 80115d6:	e000      	b.n	80115da <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80115d8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80115da:	21fd      	movs	r1, #253	@ 0xfd
 80115dc:	2000      	movs	r0, #0
 80115de:	f7ff fd95 	bl	801110c <SD_TxDataBlock>
 80115e2:	4603      	mov	r3, r0
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <SD_disk_write+0xe4>
      {
        count = 1;
 80115e8:	2301      	movs	r3, #1
 80115ea:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80115ec:	f7ff fc82 	bl	8010ef4 <DESELECT>
  SPI_RxByte();
 80115f0:	f7ff fcc0 	bl	8010f74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	bf14      	ite	ne
 80115fa:	2301      	movne	r3, #1
 80115fc:	2300      	moveq	r3, #0
 80115fe:	b2db      	uxtb	r3, r3
}
 8011600:	4618      	mov	r0, r3
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	240000e4 	.word	0x240000e4
 801160c:	24005078 	.word	0x24005078

08011610 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8011610:	b590      	push	{r4, r7, lr}
 8011612:	b08b      	sub	sp, #44	@ 0x2c
 8011614:	af00      	add	r7, sp, #0
 8011616:	4603      	mov	r3, r0
 8011618:	603a      	str	r2, [r7, #0]
 801161a:	71fb      	strb	r3, [r7, #7]
 801161c:	460b      	mov	r3, r1
 801161e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8011624:	79fb      	ldrb	r3, [r7, #7]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d001      	beq.n	801162e <SD_disk_ioctl+0x1e>
 801162a:	2304      	movs	r3, #4
 801162c:	e113      	b.n	8011856 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8011634:	79bb      	ldrb	r3, [r7, #6]
 8011636:	2b05      	cmp	r3, #5
 8011638:	d124      	bne.n	8011684 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801163a:	6a3b      	ldr	r3, [r7, #32]
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	2b02      	cmp	r3, #2
 8011640:	d012      	beq.n	8011668 <SD_disk_ioctl+0x58>
 8011642:	2b02      	cmp	r3, #2
 8011644:	dc1a      	bgt.n	801167c <SD_disk_ioctl+0x6c>
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <SD_disk_ioctl+0x40>
 801164a:	2b01      	cmp	r3, #1
 801164c:	d006      	beq.n	801165c <SD_disk_ioctl+0x4c>
 801164e:	e015      	b.n	801167c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8011650:	f7ff fd16 	bl	8011080 <SD_PowerOff>
      res = RES_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801165a:	e0fa      	b.n	8011852 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 801165c:	f7ff fcce 	bl	8010ffc <SD_PowerOn>
      res = RES_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011666:	e0f4      	b.n	8011852 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	1c5c      	adds	r4, r3, #1
 801166c:	f7ff fd14 	bl	8011098 <SD_CheckPower>
 8011670:	4603      	mov	r3, r0
 8011672:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8011674:	2300      	movs	r3, #0
 8011676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801167a:	e0ea      	b.n	8011852 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 801167c:	2304      	movs	r3, #4
 801167e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011682:	e0e6      	b.n	8011852 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8011684:	4b76      	ldr	r3, [pc, #472]	@ (8011860 <SD_disk_ioctl+0x250>)
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d001      	beq.n	8011696 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8011692:	2303      	movs	r3, #3
 8011694:	e0df      	b.n	8011856 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8011696:	f7ff fc21 	bl	8010edc <SELECT>
    switch (ctrl)
 801169a:	79bb      	ldrb	r3, [r7, #6]
 801169c:	2b0d      	cmp	r3, #13
 801169e:	f200 80c9 	bhi.w	8011834 <SD_disk_ioctl+0x224>
 80116a2:	a201      	add	r2, pc, #4	@ (adr r2, 80116a8 <SD_disk_ioctl+0x98>)
 80116a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a8:	0801179f 	.word	0x0801179f
 80116ac:	080116e1 	.word	0x080116e1
 80116b0:	0801178f 	.word	0x0801178f
 80116b4:	08011835 	.word	0x08011835
 80116b8:	08011835 	.word	0x08011835
 80116bc:	08011835 	.word	0x08011835
 80116c0:	08011835 	.word	0x08011835
 80116c4:	08011835 	.word	0x08011835
 80116c8:	08011835 	.word	0x08011835
 80116cc:	08011835 	.word	0x08011835
 80116d0:	08011835 	.word	0x08011835
 80116d4:	080117b1 	.word	0x080117b1
 80116d8:	080117d5 	.word	0x080117d5
 80116dc:	080117f9 	.word	0x080117f9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80116e0:	2100      	movs	r1, #0
 80116e2:	2049      	movs	r0, #73	@ 0x49
 80116e4:	f7ff fd55 	bl	8011192 <SD_SendCmd>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f040 80a6 	bne.w	801183c <SD_disk_ioctl+0x22c>
 80116f0:	f107 030c 	add.w	r3, r7, #12
 80116f4:	2110      	movs	r1, #16
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7ff fcda 	bl	80110b0 <SD_RxDataBlock>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f000 809c 	beq.w	801183c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8011704:	7b3b      	ldrb	r3, [r7, #12]
 8011706:	099b      	lsrs	r3, r3, #6
 8011708:	b2db      	uxtb	r3, r3
 801170a:	2b01      	cmp	r3, #1
 801170c:	d10d      	bne.n	801172a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801170e:	7d7b      	ldrb	r3, [r7, #21]
 8011710:	461a      	mov	r2, r3
 8011712:	7d3b      	ldrb	r3, [r7, #20]
 8011714:	021b      	lsls	r3, r3, #8
 8011716:	b29b      	uxth	r3, r3
 8011718:	4413      	add	r3, r2
 801171a:	b29b      	uxth	r3, r3
 801171c:	3301      	adds	r3, #1
 801171e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8011720:	8bfb      	ldrh	r3, [r7, #30]
 8011722:	029a      	lsls	r2, r3, #10
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	e02d      	b.n	8011786 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801172a:	7c7b      	ldrb	r3, [r7, #17]
 801172c:	f003 030f 	and.w	r3, r3, #15
 8011730:	b2da      	uxtb	r2, r3
 8011732:	7dbb      	ldrb	r3, [r7, #22]
 8011734:	09db      	lsrs	r3, r3, #7
 8011736:	b2db      	uxtb	r3, r3
 8011738:	4413      	add	r3, r2
 801173a:	b2da      	uxtb	r2, r3
 801173c:	7d7b      	ldrb	r3, [r7, #21]
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	b2db      	uxtb	r3, r3
 8011742:	f003 0306 	and.w	r3, r3, #6
 8011746:	b2db      	uxtb	r3, r3
 8011748:	4413      	add	r3, r2
 801174a:	b2db      	uxtb	r3, r3
 801174c:	3302      	adds	r3, #2
 801174e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8011752:	7d3b      	ldrb	r3, [r7, #20]
 8011754:	099b      	lsrs	r3, r3, #6
 8011756:	b2db      	uxtb	r3, r3
 8011758:	461a      	mov	r2, r3
 801175a:	7cfb      	ldrb	r3, [r7, #19]
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	b29b      	uxth	r3, r3
 8011760:	4413      	add	r3, r2
 8011762:	b29a      	uxth	r2, r3
 8011764:	7cbb      	ldrb	r3, [r7, #18]
 8011766:	029b      	lsls	r3, r3, #10
 8011768:	b29b      	uxth	r3, r3
 801176a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801176e:	b29b      	uxth	r3, r3
 8011770:	4413      	add	r3, r2
 8011772:	b29b      	uxth	r3, r3
 8011774:	3301      	adds	r3, #1
 8011776:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8011778:	8bfa      	ldrh	r2, [r7, #30]
 801177a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801177e:	3b09      	subs	r3, #9
 8011780:	409a      	lsls	r2, r3
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8011786:	2300      	movs	r3, #0
 8011788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 801178c:	e056      	b.n	801183c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011794:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801179c:	e055      	b.n	801184a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801179e:	f7ff fc13 	bl	8010fc8 <SD_ReadyWait>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2bff      	cmp	r3, #255	@ 0xff
 80117a6:	d14b      	bne.n	8011840 <SD_disk_ioctl+0x230>
 80117a8:	2300      	movs	r3, #0
 80117aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80117ae:	e047      	b.n	8011840 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80117b0:	2100      	movs	r1, #0
 80117b2:	2049      	movs	r0, #73	@ 0x49
 80117b4:	f7ff fced 	bl	8011192 <SD_SendCmd>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d142      	bne.n	8011844 <SD_disk_ioctl+0x234>
 80117be:	2110      	movs	r1, #16
 80117c0:	6a38      	ldr	r0, [r7, #32]
 80117c2:	f7ff fc75 	bl	80110b0 <SD_RxDataBlock>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d03b      	beq.n	8011844 <SD_disk_ioctl+0x234>
 80117cc:	2300      	movs	r3, #0
 80117ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80117d2:	e037      	b.n	8011844 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80117d4:	2100      	movs	r1, #0
 80117d6:	204a      	movs	r0, #74	@ 0x4a
 80117d8:	f7ff fcdb 	bl	8011192 <SD_SendCmd>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d132      	bne.n	8011848 <SD_disk_ioctl+0x238>
 80117e2:	2110      	movs	r1, #16
 80117e4:	6a38      	ldr	r0, [r7, #32]
 80117e6:	f7ff fc63 	bl	80110b0 <SD_RxDataBlock>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d02b      	beq.n	8011848 <SD_disk_ioctl+0x238>
 80117f0:	2300      	movs	r3, #0
 80117f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80117f6:	e027      	b.n	8011848 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80117f8:	2100      	movs	r1, #0
 80117fa:	207a      	movs	r0, #122	@ 0x7a
 80117fc:	f7ff fcc9 	bl	8011192 <SD_SendCmd>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d116      	bne.n	8011834 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8011806:	2300      	movs	r3, #0
 8011808:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801180c:	e00b      	b.n	8011826 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801180e:	6a3c      	ldr	r4, [r7, #32]
 8011810:	1c63      	adds	r3, r4, #1
 8011812:	623b      	str	r3, [r7, #32]
 8011814:	f7ff fbae 	bl	8010f74 <SPI_RxByte>
 8011818:	4603      	mov	r3, r0
 801181a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 801181c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011820:	3301      	adds	r3, #1
 8011822:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801182a:	2b03      	cmp	r3, #3
 801182c:	d9ef      	bls.n	801180e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801182e:	2300      	movs	r3, #0
 8011830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8011834:	2304      	movs	r3, #4
 8011836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801183a:	e006      	b.n	801184a <SD_disk_ioctl+0x23a>
      break;
 801183c:	bf00      	nop
 801183e:	e004      	b.n	801184a <SD_disk_ioctl+0x23a>
      break;
 8011840:	bf00      	nop
 8011842:	e002      	b.n	801184a <SD_disk_ioctl+0x23a>
      break;
 8011844:	bf00      	nop
 8011846:	e000      	b.n	801184a <SD_disk_ioctl+0x23a>
      break;
 8011848:	bf00      	nop
    }
    DESELECT();
 801184a:	f7ff fb53 	bl	8010ef4 <DESELECT>
    SPI_RxByte();
 801184e:	f7ff fb91 	bl	8010f74 <SPI_RxByte>
  }
  return res;
 8011852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011856:	4618      	mov	r0, r3
 8011858:	372c      	adds	r7, #44	@ 0x2c
 801185a:	46bd      	mov	sp, r7
 801185c:	bd90      	pop	{r4, r7, pc}
 801185e:	bf00      	nop
 8011860:	240000e4 	.word	0x240000e4

08011864 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b084      	sub	sp, #16
 8011868:	af00      	add	r7, sp, #0
 801186a:	4603      	mov	r3, r0
 801186c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801186e:	79fb      	ldrb	r3, [r7, #7]
 8011870:	4a08      	ldr	r2, [pc, #32]	@ (8011894 <disk_status+0x30>)
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	79fa      	ldrb	r2, [r7, #7]
 801187c:	4905      	ldr	r1, [pc, #20]	@ (8011894 <disk_status+0x30>)
 801187e:	440a      	add	r2, r1
 8011880:	7a12      	ldrb	r2, [r2, #8]
 8011882:	4610      	mov	r0, r2
 8011884:	4798      	blx	r3
 8011886:	4603      	mov	r3, r0
 8011888:	73fb      	strb	r3, [r7, #15]
  return stat;
 801188a:	7bfb      	ldrb	r3, [r7, #15]
}
 801188c:	4618      	mov	r0, r3
 801188e:	3710      	adds	r7, #16
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	240052a4 	.word	0x240052a4

08011898 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	4603      	mov	r3, r0
 80118a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80118a2:	2300      	movs	r3, #0
 80118a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80118a6:	79fb      	ldrb	r3, [r7, #7]
 80118a8:	4a0e      	ldr	r2, [pc, #56]	@ (80118e4 <disk_initialize+0x4c>)
 80118aa:	5cd3      	ldrb	r3, [r2, r3]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d114      	bne.n	80118da <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	4a0c      	ldr	r2, [pc, #48]	@ (80118e4 <disk_initialize+0x4c>)
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	79fa      	ldrb	r2, [r7, #7]
 80118be:	4909      	ldr	r1, [pc, #36]	@ (80118e4 <disk_initialize+0x4c>)
 80118c0:	440a      	add	r2, r1
 80118c2:	7a12      	ldrb	r2, [r2, #8]
 80118c4:	4610      	mov	r0, r2
 80118c6:	4798      	blx	r3
 80118c8:	4603      	mov	r3, r0
 80118ca:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d103      	bne.n	80118da <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	4a03      	ldr	r2, [pc, #12]	@ (80118e4 <disk_initialize+0x4c>)
 80118d6:	2101      	movs	r1, #1
 80118d8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80118da:	7bfb      	ldrb	r3, [r7, #15]
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	240052a4 	.word	0x240052a4

080118e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118e8:	b590      	push	{r4, r7, lr}
 80118ea:	b087      	sub	sp, #28
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60b9      	str	r1, [r7, #8]
 80118f0:	607a      	str	r2, [r7, #4]
 80118f2:	603b      	str	r3, [r7, #0]
 80118f4:	4603      	mov	r3, r0
 80118f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
 80118fa:	4a0a      	ldr	r2, [pc, #40]	@ (8011924 <disk_read+0x3c>)
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	4413      	add	r3, r2
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	689c      	ldr	r4, [r3, #8]
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	4a07      	ldr	r2, [pc, #28]	@ (8011924 <disk_read+0x3c>)
 8011908:	4413      	add	r3, r2
 801190a:	7a18      	ldrb	r0, [r3, #8]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	68b9      	ldr	r1, [r7, #8]
 8011912:	47a0      	blx	r4
 8011914:	4603      	mov	r3, r0
 8011916:	75fb      	strb	r3, [r7, #23]
  return res;
 8011918:	7dfb      	ldrb	r3, [r7, #23]
}
 801191a:	4618      	mov	r0, r3
 801191c:	371c      	adds	r7, #28
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}
 8011922:	bf00      	nop
 8011924:	240052a4 	.word	0x240052a4

08011928 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	b087      	sub	sp, #28
 801192c:	af00      	add	r7, sp, #0
 801192e:	60b9      	str	r1, [r7, #8]
 8011930:	607a      	str	r2, [r7, #4]
 8011932:	603b      	str	r3, [r7, #0]
 8011934:	4603      	mov	r3, r0
 8011936:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011938:	7bfb      	ldrb	r3, [r7, #15]
 801193a:	4a0a      	ldr	r2, [pc, #40]	@ (8011964 <disk_write+0x3c>)
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	68dc      	ldr	r4, [r3, #12]
 8011944:	7bfb      	ldrb	r3, [r7, #15]
 8011946:	4a07      	ldr	r2, [pc, #28]	@ (8011964 <disk_write+0x3c>)
 8011948:	4413      	add	r3, r2
 801194a:	7a18      	ldrb	r0, [r3, #8]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	68b9      	ldr	r1, [r7, #8]
 8011952:	47a0      	blx	r4
 8011954:	4603      	mov	r3, r0
 8011956:	75fb      	strb	r3, [r7, #23]
  return res;
 8011958:	7dfb      	ldrb	r3, [r7, #23]
}
 801195a:	4618      	mov	r0, r3
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	bd90      	pop	{r4, r7, pc}
 8011962:	bf00      	nop
 8011964:	240052a4 	.word	0x240052a4

08011968 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	4603      	mov	r3, r0
 8011970:	603a      	str	r2, [r7, #0]
 8011972:	71fb      	strb	r3, [r7, #7]
 8011974:	460b      	mov	r3, r1
 8011976:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011978:	79fb      	ldrb	r3, [r7, #7]
 801197a:	4a09      	ldr	r2, [pc, #36]	@ (80119a0 <disk_ioctl+0x38>)
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	4413      	add	r3, r2
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	79fa      	ldrb	r2, [r7, #7]
 8011986:	4906      	ldr	r1, [pc, #24]	@ (80119a0 <disk_ioctl+0x38>)
 8011988:	440a      	add	r2, r1
 801198a:	7a10      	ldrb	r0, [r2, #8]
 801198c:	79b9      	ldrb	r1, [r7, #6]
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	4798      	blx	r3
 8011992:	4603      	mov	r3, r0
 8011994:	73fb      	strb	r3, [r7, #15]
  return res;
 8011996:	7bfb      	ldrb	r3, [r7, #15]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	240052a4 	.word	0x240052a4

080119a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80119a4:	b480      	push	{r7}
 80119a6:	b085      	sub	sp, #20
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	3301      	adds	r3, #1
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80119b4:	89fb      	ldrh	r3, [r7, #14]
 80119b6:	021b      	lsls	r3, r3, #8
 80119b8:	b21a      	sxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	b21b      	sxth	r3, r3
 80119c0:	4313      	orrs	r3, r2
 80119c2:	b21b      	sxth	r3, r3
 80119c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80119c6:	89fb      	ldrh	r3, [r7, #14]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3714      	adds	r7, #20
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	3303      	adds	r3, #3
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	021b      	lsls	r3, r3, #8
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	3202      	adds	r2, #2
 80119ec:	7812      	ldrb	r2, [r2, #0]
 80119ee:	4313      	orrs	r3, r2
 80119f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	021b      	lsls	r3, r3, #8
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	3201      	adds	r2, #1
 80119fa:	7812      	ldrb	r2, [r2, #0]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	021b      	lsls	r3, r3, #8
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	7812      	ldrb	r2, [r2, #0]
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3714      	adds	r7, #20
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr

08011a1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011a1a:	b480      	push	{r7}
 8011a1c:	b083      	sub	sp, #12
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	460b      	mov	r3, r1
 8011a24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	887a      	ldrh	r2, [r7, #2]
 8011a2e:	b2d2      	uxtb	r2, r2
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	887b      	ldrh	r3, [r7, #2]
 8011a34:	0a1b      	lsrs	r3, r3, #8
 8011a36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	607a      	str	r2, [r7, #4]
 8011a3e:	887a      	ldrh	r2, [r7, #2]
 8011a40:	b2d2      	uxtb	r2, r2
 8011a42:	701a      	strb	r2, [r3, #0]
}
 8011a44:	bf00      	nop
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	1c5a      	adds	r2, r3, #1
 8011a5e:	607a      	str	r2, [r7, #4]
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	b2d2      	uxtb	r2, r2
 8011a64:	701a      	strb	r2, [r3, #0]
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	0a1b      	lsrs	r3, r3, #8
 8011a6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	1c5a      	adds	r2, r3, #1
 8011a70:	607a      	str	r2, [r7, #4]
 8011a72:	683a      	ldr	r2, [r7, #0]
 8011a74:	b2d2      	uxtb	r2, r2
 8011a76:	701a      	strb	r2, [r3, #0]
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	0a1b      	lsrs	r3, r3, #8
 8011a7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	1c5a      	adds	r2, r3, #1
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	683a      	ldr	r2, [r7, #0]
 8011a86:	b2d2      	uxtb	r2, r2
 8011a88:	701a      	strb	r2, [r3, #0]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	0a1b      	lsrs	r3, r3, #8
 8011a8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	1c5a      	adds	r2, r3, #1
 8011a94:	607a      	str	r2, [r7, #4]
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	b2d2      	uxtb	r2, r2
 8011a9a:	701a      	strb	r2, [r3, #0]
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00d      	beq.n	8011ade <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011ac2:	693a      	ldr	r2, [r7, #16]
 8011ac4:	1c53      	adds	r3, r2, #1
 8011ac6:	613b      	str	r3, [r7, #16]
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	1c59      	adds	r1, r3, #1
 8011acc:	6179      	str	r1, [r7, #20]
 8011ace:	7812      	ldrb	r2, [r2, #0]
 8011ad0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	607b      	str	r3, [r7, #4]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1f1      	bne.n	8011ac2 <mem_cpy+0x1a>
	}
}
 8011ade:	bf00      	nop
 8011ae0:	371c      	adds	r7, #28
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr

08011aea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011aea:	b480      	push	{r7}
 8011aec:	b087      	sub	sp, #28
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	60f8      	str	r0, [r7, #12]
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	1c5a      	adds	r2, r3, #1
 8011afe:	617a      	str	r2, [r7, #20]
 8011b00:	68ba      	ldr	r2, [r7, #8]
 8011b02:	b2d2      	uxtb	r2, r2
 8011b04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	3b01      	subs	r3, #1
 8011b0a:	607b      	str	r3, [r7, #4]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1f3      	bne.n	8011afa <mem_set+0x10>
}
 8011b12:	bf00      	nop
 8011b14:	bf00      	nop
 8011b16:	371c      	adds	r7, #28
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011b20:	b480      	push	{r7}
 8011b22:	b089      	sub	sp, #36	@ 0x24
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	61fb      	str	r3, [r7, #28]
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011b34:	2300      	movs	r3, #0
 8011b36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	1c5a      	adds	r2, r3, #1
 8011b3c:	61fa      	str	r2, [r7, #28]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	4619      	mov	r1, r3
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	61ba      	str	r2, [r7, #24]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	1acb      	subs	r3, r1, r3
 8011b4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	3b01      	subs	r3, #1
 8011b52:	607b      	str	r3, [r7, #4]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d002      	beq.n	8011b60 <mem_cmp+0x40>
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d0eb      	beq.n	8011b38 <mem_cmp+0x18>

	return r;
 8011b60:	697b      	ldr	r3, [r7, #20]
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3724      	adds	r7, #36	@ 0x24
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b6e:	b480      	push	{r7}
 8011b70:	b083      	sub	sp, #12
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b78:	e002      	b.n	8011b80 <chk_chr+0x12>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	607b      	str	r3, [r7, #4]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d005      	beq.n	8011b94 <chk_chr+0x26>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d1f2      	bne.n	8011b7a <chk_chr+0xc>
	return *str;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	781b      	ldrb	r3, [r3, #0]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	370c      	adds	r7, #12
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bae:	2300      	movs	r3, #0
 8011bb0:	60bb      	str	r3, [r7, #8]
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	60fb      	str	r3, [r7, #12]
 8011bb6:	e029      	b.n	8011c0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011bb8:	4a27      	ldr	r2, [pc, #156]	@ (8011c58 <chk_lock+0xb4>)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	4413      	add	r3, r2
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d01d      	beq.n	8011c02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bc6:	4a24      	ldr	r2, [pc, #144]	@ (8011c58 <chk_lock+0xb4>)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	011b      	lsls	r3, r3, #4
 8011bcc:	4413      	add	r3, r2
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d116      	bne.n	8011c06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8011c58 <chk_lock+0xb4>)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	011b      	lsls	r3, r3, #4
 8011bde:	4413      	add	r3, r2
 8011be0:	3304      	adds	r3, #4
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d10c      	bne.n	8011c06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011bec:	4a1a      	ldr	r2, [pc, #104]	@ (8011c58 <chk_lock+0xb4>)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	011b      	lsls	r3, r3, #4
 8011bf2:	4413      	add	r3, r2
 8011bf4:	3308      	adds	r3, #8
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d102      	bne.n	8011c06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c00:	e007      	b.n	8011c12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011c02:	2301      	movs	r3, #1
 8011c04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	3301      	adds	r3, #1
 8011c0a:	60fb      	str	r3, [r7, #12]
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d9d2      	bls.n	8011bb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d109      	bne.n	8011c2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d102      	bne.n	8011c24 <chk_lock+0x80>
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d101      	bne.n	8011c28 <chk_lock+0x84>
 8011c24:	2300      	movs	r3, #0
 8011c26:	e010      	b.n	8011c4a <chk_lock+0xa6>
 8011c28:	2312      	movs	r3, #18
 8011c2a:	e00e      	b.n	8011c4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d108      	bne.n	8011c44 <chk_lock+0xa0>
 8011c32:	4a09      	ldr	r2, [pc, #36]	@ (8011c58 <chk_lock+0xb4>)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	011b      	lsls	r3, r3, #4
 8011c38:	4413      	add	r3, r2
 8011c3a:	330c      	adds	r3, #12
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c42:	d101      	bne.n	8011c48 <chk_lock+0xa4>
 8011c44:	2310      	movs	r3, #16
 8011c46:	e000      	b.n	8011c4a <chk_lock+0xa6>
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3714      	adds	r7, #20
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	24005084 	.word	0x24005084

08011c5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b083      	sub	sp, #12
 8011c60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c62:	2300      	movs	r3, #0
 8011c64:	607b      	str	r3, [r7, #4]
 8011c66:	e002      	b.n	8011c6e <enq_lock+0x12>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	607b      	str	r3, [r7, #4]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d806      	bhi.n	8011c82 <enq_lock+0x26>
 8011c74:	4a09      	ldr	r2, [pc, #36]	@ (8011c9c <enq_lock+0x40>)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	011b      	lsls	r3, r3, #4
 8011c7a:	4413      	add	r3, r2
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1f2      	bne.n	8011c68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	bf14      	ite	ne
 8011c88:	2301      	movne	r3, #1
 8011c8a:	2300      	moveq	r3, #0
 8011c8c:	b2db      	uxtb	r3, r3
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	370c      	adds	r7, #12
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	24005084 	.word	0x24005084

08011ca0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011caa:	2300      	movs	r3, #0
 8011cac:	60fb      	str	r3, [r7, #12]
 8011cae:	e01f      	b.n	8011cf0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011cb0:	4a41      	ldr	r2, [pc, #260]	@ (8011db8 <inc_lock+0x118>)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	011b      	lsls	r3, r3, #4
 8011cb6:	4413      	add	r3, r2
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d113      	bne.n	8011cea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8011db8 <inc_lock+0x118>)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	011b      	lsls	r3, r3, #4
 8011cc8:	4413      	add	r3, r2
 8011cca:	3304      	adds	r3, #4
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d109      	bne.n	8011cea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011cd6:	4a38      	ldr	r2, [pc, #224]	@ (8011db8 <inc_lock+0x118>)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	4413      	add	r3, r2
 8011cde:	3308      	adds	r3, #8
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d006      	beq.n	8011cf8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3301      	adds	r3, #1
 8011cee:	60fb      	str	r3, [r7, #12]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d9dc      	bls.n	8011cb0 <inc_lock+0x10>
 8011cf6:	e000      	b.n	8011cfa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011cf8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b02      	cmp	r3, #2
 8011cfe:	d132      	bne.n	8011d66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d00:	2300      	movs	r3, #0
 8011d02:	60fb      	str	r3, [r7, #12]
 8011d04:	e002      	b.n	8011d0c <inc_lock+0x6c>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d806      	bhi.n	8011d20 <inc_lock+0x80>
 8011d12:	4a29      	ldr	r2, [pc, #164]	@ (8011db8 <inc_lock+0x118>)
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	011b      	lsls	r3, r3, #4
 8011d18:	4413      	add	r3, r2
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d1f2      	bne.n	8011d06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d101      	bne.n	8011d2a <inc_lock+0x8a>
 8011d26:	2300      	movs	r3, #0
 8011d28:	e040      	b.n	8011dac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	4922      	ldr	r1, [pc, #136]	@ (8011db8 <inc_lock+0x118>)
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	011b      	lsls	r3, r3, #4
 8011d34:	440b      	add	r3, r1
 8011d36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	689a      	ldr	r2, [r3, #8]
 8011d3c:	491e      	ldr	r1, [pc, #120]	@ (8011db8 <inc_lock+0x118>)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	011b      	lsls	r3, r3, #4
 8011d42:	440b      	add	r3, r1
 8011d44:	3304      	adds	r3, #4
 8011d46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	695a      	ldr	r2, [r3, #20]
 8011d4c:	491a      	ldr	r1, [pc, #104]	@ (8011db8 <inc_lock+0x118>)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	011b      	lsls	r3, r3, #4
 8011d52:	440b      	add	r3, r1
 8011d54:	3308      	adds	r3, #8
 8011d56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d58:	4a17      	ldr	r2, [pc, #92]	@ (8011db8 <inc_lock+0x118>)
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	011b      	lsls	r3, r3, #4
 8011d5e:	4413      	add	r3, r2
 8011d60:	330c      	adds	r3, #12
 8011d62:	2200      	movs	r2, #0
 8011d64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d009      	beq.n	8011d80 <inc_lock+0xe0>
 8011d6c:	4a12      	ldr	r2, [pc, #72]	@ (8011db8 <inc_lock+0x118>)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	011b      	lsls	r3, r3, #4
 8011d72:	4413      	add	r3, r2
 8011d74:	330c      	adds	r3, #12
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d001      	beq.n	8011d80 <inc_lock+0xe0>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	e015      	b.n	8011dac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d108      	bne.n	8011d98 <inc_lock+0xf8>
 8011d86:	4a0c      	ldr	r2, [pc, #48]	@ (8011db8 <inc_lock+0x118>)
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	011b      	lsls	r3, r3, #4
 8011d8c:	4413      	add	r3, r2
 8011d8e:	330c      	adds	r3, #12
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	3301      	adds	r3, #1
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	e001      	b.n	8011d9c <inc_lock+0xfc>
 8011d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011d9c:	4906      	ldr	r1, [pc, #24]	@ (8011db8 <inc_lock+0x118>)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	011b      	lsls	r3, r3, #4
 8011da2:	440b      	add	r3, r1
 8011da4:	330c      	adds	r3, #12
 8011da6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	3301      	adds	r3, #1
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3714      	adds	r7, #20
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr
 8011db8:	24005084 	.word	0x24005084

08011dbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	607b      	str	r3, [r7, #4]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d825      	bhi.n	8011e1c <dec_lock+0x60>
		n = Files[i].ctr;
 8011dd0:	4a17      	ldr	r2, [pc, #92]	@ (8011e30 <dec_lock+0x74>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	011b      	lsls	r3, r3, #4
 8011dd6:	4413      	add	r3, r2
 8011dd8:	330c      	adds	r3, #12
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011dde:	89fb      	ldrh	r3, [r7, #14]
 8011de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011de4:	d101      	bne.n	8011dea <dec_lock+0x2e>
 8011de6:	2300      	movs	r3, #0
 8011de8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011dea:	89fb      	ldrh	r3, [r7, #14]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <dec_lock+0x3a>
 8011df0:	89fb      	ldrh	r3, [r7, #14]
 8011df2:	3b01      	subs	r3, #1
 8011df4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011df6:	4a0e      	ldr	r2, [pc, #56]	@ (8011e30 <dec_lock+0x74>)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	011b      	lsls	r3, r3, #4
 8011dfc:	4413      	add	r3, r2
 8011dfe:	330c      	adds	r3, #12
 8011e00:	89fa      	ldrh	r2, [r7, #14]
 8011e02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011e04:	89fb      	ldrh	r3, [r7, #14]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d105      	bne.n	8011e16 <dec_lock+0x5a>
 8011e0a:	4a09      	ldr	r2, [pc, #36]	@ (8011e30 <dec_lock+0x74>)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	011b      	lsls	r3, r3, #4
 8011e10:	4413      	add	r3, r2
 8011e12:	2200      	movs	r2, #0
 8011e14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	737b      	strb	r3, [r7, #13]
 8011e1a:	e001      	b.n	8011e20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e20:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3714      	adds	r7, #20
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	24005084 	.word	0x24005084

08011e34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	60fb      	str	r3, [r7, #12]
 8011e40:	e010      	b.n	8011e64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e42:	4a0d      	ldr	r2, [pc, #52]	@ (8011e78 <clear_lock+0x44>)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	4413      	add	r3, r2
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d105      	bne.n	8011e5e <clear_lock+0x2a>
 8011e52:	4a09      	ldr	r2, [pc, #36]	@ (8011e78 <clear_lock+0x44>)
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	011b      	lsls	r3, r3, #4
 8011e58:	4413      	add	r3, r2
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	3301      	adds	r3, #1
 8011e62:	60fb      	str	r3, [r7, #12]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d9eb      	bls.n	8011e42 <clear_lock+0xe>
	}
}
 8011e6a:	bf00      	nop
 8011e6c:	bf00      	nop
 8011e6e:	3714      	adds	r7, #20
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	24005084 	.word	0x24005084

08011e7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e84:	2300      	movs	r3, #0
 8011e86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	78db      	ldrb	r3, [r3, #3]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d034      	beq.n	8011efa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	7858      	ldrb	r0, [r3, #1]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	697a      	ldr	r2, [r7, #20]
 8011ea4:	f7ff fd40 	bl	8011928 <disk_write>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d002      	beq.n	8011eb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	73fb      	strb	r3, [r7, #15]
 8011eb2:	e022      	b.n	8011efa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	1ad2      	subs	r2, r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d217      	bcs.n	8011efa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	789b      	ldrb	r3, [r3, #2]
 8011ece:	613b      	str	r3, [r7, #16]
 8011ed0:	e010      	b.n	8011ef4 <sync_window+0x78>
					wsect += fs->fsize;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed6:	697a      	ldr	r2, [r7, #20]
 8011ed8:	4413      	add	r3, r2
 8011eda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	7858      	ldrb	r0, [r3, #1]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	697a      	ldr	r2, [r7, #20]
 8011eea:	f7ff fd1d 	bl	8011928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	613b      	str	r3, [r7, #16]
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	2b01      	cmp	r3, #1
 8011ef8:	d8eb      	bhi.n	8011ed2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3718      	adds	r7, #24
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d01b      	beq.n	8011f54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f7ff ffad 	bl	8011e7c <sync_window>
 8011f22:	4603      	mov	r3, r0
 8011f24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f26:	7bfb      	ldrb	r3, [r7, #15]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d113      	bne.n	8011f54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	7858      	ldrb	r0, [r3, #1]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011f36:	2301      	movs	r3, #1
 8011f38:	683a      	ldr	r2, [r7, #0]
 8011f3a:	f7ff fcd5 	bl	80118e8 <disk_read>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d004      	beq.n	8011f4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f44:	f04f 33ff 	mov.w	r3, #4294967295
 8011f48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	683a      	ldr	r2, [r7, #0]
 8011f52:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8011f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3710      	adds	r7, #16
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
	...

08011f60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff ff87 	bl	8011e7c <sync_window>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f72:	7bfb      	ldrb	r3, [r7, #15]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d159      	bne.n	801202c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d149      	bne.n	8012014 <sync_fs+0xb4>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	791b      	ldrb	r3, [r3, #4]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d145      	bne.n	8012014 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	899b      	ldrh	r3, [r3, #12]
 8011f92:	461a      	mov	r2, r3
 8011f94:	2100      	movs	r1, #0
 8011f96:	f7ff fda8 	bl	8011aea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	333c      	adds	r3, #60	@ 0x3c
 8011f9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011fa2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7ff fd37 	bl	8011a1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	333c      	adds	r3, #60	@ 0x3c
 8011fb0:	4921      	ldr	r1, [pc, #132]	@ (8012038 <sync_fs+0xd8>)
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fd4c 	bl	8011a50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	333c      	adds	r3, #60	@ 0x3c
 8011fbc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011fc0:	491e      	ldr	r1, [pc, #120]	@ (801203c <sync_fs+0xdc>)
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7ff fd44 	bl	8011a50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	333c      	adds	r3, #60	@ 0x3c
 8011fcc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	699b      	ldr	r3, [r3, #24]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	f7ff fd3a 	bl	8011a50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	333c      	adds	r3, #60	@ 0x3c
 8011fe0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	695b      	ldr	r3, [r3, #20]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4610      	mov	r0, r2
 8011fec:	f7ff fd30 	bl	8011a50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ff4:	1c5a      	adds	r2, r3, #1
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	7858      	ldrb	r0, [r3, #1]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012008:	2301      	movs	r3, #1
 801200a:	f7ff fc8d 	bl	8011928 <disk_write>
			fs->fsi_flag = 0;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2200      	movs	r2, #0
 8012012:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	785b      	ldrb	r3, [r3, #1]
 8012018:	2200      	movs	r2, #0
 801201a:	2100      	movs	r1, #0
 801201c:	4618      	mov	r0, r3
 801201e:	f7ff fca3 	bl	8011968 <disk_ioctl>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <sync_fs+0xcc>
 8012028:	2301      	movs	r3, #1
 801202a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801202c:	7bfb      	ldrb	r3, [r7, #15]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	41615252 	.word	0x41615252
 801203c:	61417272 	.word	0x61417272

08012040 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	3b02      	subs	r3, #2
 801204e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6a1b      	ldr	r3, [r3, #32]
 8012054:	3b02      	subs	r3, #2
 8012056:	683a      	ldr	r2, [r7, #0]
 8012058:	429a      	cmp	r2, r3
 801205a:	d301      	bcc.n	8012060 <clust2sect+0x20>
 801205c:	2300      	movs	r3, #0
 801205e:	e008      	b.n	8012072 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	895b      	ldrh	r3, [r3, #10]
 8012064:	461a      	mov	r2, r3
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	fb03 f202 	mul.w	r2, r3, r2
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012070:	4413      	add	r3, r2
}
 8012072:	4618      	mov	r0, r3
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr

0801207e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b086      	sub	sp, #24
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
 8012086:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d904      	bls.n	801209e <get_fat+0x20>
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	6a1b      	ldr	r3, [r3, #32]
 8012098:	683a      	ldr	r2, [r7, #0]
 801209a:	429a      	cmp	r2, r3
 801209c:	d302      	bcc.n	80120a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801209e:	2301      	movs	r3, #1
 80120a0:	617b      	str	r3, [r7, #20]
 80120a2:	e0ba      	b.n	801221a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80120a4:	f04f 33ff 	mov.w	r3, #4294967295
 80120a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	2b03      	cmp	r3, #3
 80120b0:	f000 8082 	beq.w	80121b8 <get_fat+0x13a>
 80120b4:	2b03      	cmp	r3, #3
 80120b6:	f300 80a6 	bgt.w	8012206 <get_fat+0x188>
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d002      	beq.n	80120c4 <get_fat+0x46>
 80120be:	2b02      	cmp	r3, #2
 80120c0:	d055      	beq.n	801216e <get_fat+0xf0>
 80120c2:	e0a0      	b.n	8012206 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	60fb      	str	r3, [r7, #12]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	085b      	lsrs	r3, r3, #1
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	4413      	add	r3, r2
 80120d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	4619      	mov	r1, r3
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	fbb3 f3f1 	udiv	r3, r3, r1
 80120e2:	4413      	add	r3, r2
 80120e4:	4619      	mov	r1, r3
 80120e6:	6938      	ldr	r0, [r7, #16]
 80120e8:	f7ff ff0c 	bl	8011f04 <move_window>
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f040 808c 	bne.w	801220c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	1c5a      	adds	r2, r3, #1
 80120f8:	60fa      	str	r2, [r7, #12]
 80120fa:	693a      	ldr	r2, [r7, #16]
 80120fc:	8992      	ldrh	r2, [r2, #12]
 80120fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8012102:	fb01 f202 	mul.w	r2, r1, r2
 8012106:	1a9b      	subs	r3, r3, r2
 8012108:	693a      	ldr	r2, [r7, #16]
 801210a:	4413      	add	r3, r2
 801210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012110:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	899b      	ldrh	r3, [r3, #12]
 801211a:	4619      	mov	r1, r3
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012122:	4413      	add	r3, r2
 8012124:	4619      	mov	r1, r3
 8012126:	6938      	ldr	r0, [r7, #16]
 8012128:	f7ff feec 	bl	8011f04 <move_window>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d16e      	bne.n	8012210 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	899b      	ldrh	r3, [r3, #12]
 8012136:	461a      	mov	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	fbb3 f1f2 	udiv	r1, r3, r2
 801213e:	fb01 f202 	mul.w	r2, r1, r2
 8012142:	1a9b      	subs	r3, r3, r2
 8012144:	693a      	ldr	r2, [r7, #16]
 8012146:	4413      	add	r3, r2
 8012148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801214c:	021b      	lsls	r3, r3, #8
 801214e:	68ba      	ldr	r2, [r7, #8]
 8012150:	4313      	orrs	r3, r2
 8012152:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	f003 0301 	and.w	r3, r3, #1
 801215a:	2b00      	cmp	r3, #0
 801215c:	d002      	beq.n	8012164 <get_fat+0xe6>
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	091b      	lsrs	r3, r3, #4
 8012162:	e002      	b.n	801216a <get_fat+0xec>
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801216a:	617b      	str	r3, [r7, #20]
			break;
 801216c:	e055      	b.n	801221a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	899b      	ldrh	r3, [r3, #12]
 8012176:	085b      	lsrs	r3, r3, #1
 8012178:	b29b      	uxth	r3, r3
 801217a:	4619      	mov	r1, r3
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012182:	4413      	add	r3, r2
 8012184:	4619      	mov	r1, r3
 8012186:	6938      	ldr	r0, [r7, #16]
 8012188:	f7ff febc 	bl	8011f04 <move_window>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d140      	bne.n	8012214 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	693a      	ldr	r2, [r7, #16]
 801219e:	8992      	ldrh	r2, [r2, #12]
 80121a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80121a4:	fb00 f202 	mul.w	r2, r0, r2
 80121a8:	1a9b      	subs	r3, r3, r2
 80121aa:	440b      	add	r3, r1
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7ff fbf9 	bl	80119a4 <ld_word>
 80121b2:	4603      	mov	r3, r0
 80121b4:	617b      	str	r3, [r7, #20]
			break;
 80121b6:	e030      	b.n	801221a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	899b      	ldrh	r3, [r3, #12]
 80121c0:	089b      	lsrs	r3, r3, #2
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	4619      	mov	r1, r3
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80121cc:	4413      	add	r3, r2
 80121ce:	4619      	mov	r1, r3
 80121d0:	6938      	ldr	r0, [r7, #16]
 80121d2:	f7ff fe97 	bl	8011f04 <move_window>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d11d      	bne.n	8012218 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	693a      	ldr	r2, [r7, #16]
 80121e8:	8992      	ldrh	r2, [r2, #12]
 80121ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80121ee:	fb00 f202 	mul.w	r2, r0, r2
 80121f2:	1a9b      	subs	r3, r3, r2
 80121f4:	440b      	add	r3, r1
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7ff fbec 	bl	80119d4 <ld_dword>
 80121fc:	4603      	mov	r3, r0
 80121fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012202:	617b      	str	r3, [r7, #20]
			break;
 8012204:	e009      	b.n	801221a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012206:	2301      	movs	r3, #1
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	e006      	b.n	801221a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801220c:	bf00      	nop
 801220e:	e004      	b.n	801221a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012210:	bf00      	nop
 8012212:	e002      	b.n	801221a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012214:	bf00      	nop
 8012216:	e000      	b.n	801221a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012218:	bf00      	nop
		}
	}

	return val;
 801221a:	697b      	ldr	r3, [r7, #20]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3718      	adds	r7, #24
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b089      	sub	sp, #36	@ 0x24
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012230:	2302      	movs	r3, #2
 8012232:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b01      	cmp	r3, #1
 8012238:	f240 8109 	bls.w	801244e <put_fat+0x22a>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	6a1b      	ldr	r3, [r3, #32]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	429a      	cmp	r2, r3
 8012244:	f080 8103 	bcs.w	801244e <put_fat+0x22a>
		switch (fs->fs_type) {
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2b03      	cmp	r3, #3
 801224e:	f000 80b6 	beq.w	80123be <put_fat+0x19a>
 8012252:	2b03      	cmp	r3, #3
 8012254:	f300 80fb 	bgt.w	801244e <put_fat+0x22a>
 8012258:	2b01      	cmp	r3, #1
 801225a:	d003      	beq.n	8012264 <put_fat+0x40>
 801225c:	2b02      	cmp	r3, #2
 801225e:	f000 8083 	beq.w	8012368 <put_fat+0x144>
 8012262:	e0f4      	b.n	801244e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	61bb      	str	r3, [r7, #24]
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	085b      	lsrs	r3, r3, #1
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	4413      	add	r3, r2
 8012270:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	899b      	ldrh	r3, [r3, #12]
 801227a:	4619      	mov	r1, r3
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012282:	4413      	add	r3, r2
 8012284:	4619      	mov	r1, r3
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f7ff fe3c 	bl	8011f04 <move_window>
 801228c:	4603      	mov	r3, r0
 801228e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012290:	7ffb      	ldrb	r3, [r7, #31]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f040 80d4 	bne.w	8012440 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	61ba      	str	r2, [r7, #24]
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	8992      	ldrh	r2, [r2, #12]
 80122a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80122ac:	fb00 f202 	mul.w	r2, r0, r2
 80122b0:	1a9b      	subs	r3, r3, r2
 80122b2:	440b      	add	r3, r1
 80122b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	f003 0301 	and.w	r3, r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00d      	beq.n	80122dc <put_fat+0xb8>
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	b25b      	sxtb	r3, r3
 80122c6:	f003 030f 	and.w	r3, r3, #15
 80122ca:	b25a      	sxtb	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	011b      	lsls	r3, r3, #4
 80122d2:	b25b      	sxtb	r3, r3
 80122d4:	4313      	orrs	r3, r2
 80122d6:	b25b      	sxtb	r3, r3
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	e001      	b.n	80122e0 <put_fat+0xbc>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	697a      	ldr	r2, [r7, #20]
 80122e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2201      	movs	r2, #1
 80122e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	899b      	ldrh	r3, [r3, #12]
 80122f2:	4619      	mov	r1, r3
 80122f4:	69bb      	ldr	r3, [r7, #24]
 80122f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80122fa:	4413      	add	r3, r2
 80122fc:	4619      	mov	r1, r3
 80122fe:	68f8      	ldr	r0, [r7, #12]
 8012300:	f7ff fe00 	bl	8011f04 <move_window>
 8012304:	4603      	mov	r3, r0
 8012306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012308:	7ffb      	ldrb	r3, [r7, #31]
 801230a:	2b00      	cmp	r3, #0
 801230c:	f040 809a 	bne.w	8012444 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	899b      	ldrh	r3, [r3, #12]
 801231a:	461a      	mov	r2, r3
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012322:	fb00 f202 	mul.w	r2, r0, r2
 8012326:	1a9b      	subs	r3, r3, r2
 8012328:	440b      	add	r3, r1
 801232a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	f003 0301 	and.w	r3, r3, #1
 8012332:	2b00      	cmp	r3, #0
 8012334:	d003      	beq.n	801233e <put_fat+0x11a>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	091b      	lsrs	r3, r3, #4
 801233a:	b2db      	uxtb	r3, r3
 801233c:	e00e      	b.n	801235c <put_fat+0x138>
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	b25b      	sxtb	r3, r3
 8012344:	f023 030f 	bic.w	r3, r3, #15
 8012348:	b25a      	sxtb	r2, r3
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	0a1b      	lsrs	r3, r3, #8
 801234e:	b25b      	sxtb	r3, r3
 8012350:	f003 030f 	and.w	r3, r3, #15
 8012354:	b25b      	sxtb	r3, r3
 8012356:	4313      	orrs	r3, r2
 8012358:	b25b      	sxtb	r3, r3
 801235a:	b2db      	uxtb	r3, r3
 801235c:	697a      	ldr	r2, [r7, #20]
 801235e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2201      	movs	r2, #1
 8012364:	70da      	strb	r2, [r3, #3]
			break;
 8012366:	e072      	b.n	801244e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	899b      	ldrh	r3, [r3, #12]
 8012370:	085b      	lsrs	r3, r3, #1
 8012372:	b29b      	uxth	r3, r3
 8012374:	4619      	mov	r1, r3
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	fbb3 f3f1 	udiv	r3, r3, r1
 801237c:	4413      	add	r3, r2
 801237e:	4619      	mov	r1, r3
 8012380:	68f8      	ldr	r0, [r7, #12]
 8012382:	f7ff fdbf 	bl	8011f04 <move_window>
 8012386:	4603      	mov	r3, r0
 8012388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801238a:	7ffb      	ldrb	r3, [r7, #31]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d15b      	bne.n	8012448 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	8992      	ldrh	r2, [r2, #12]
 801239e:	fbb3 f0f2 	udiv	r0, r3, r2
 80123a2:	fb00 f202 	mul.w	r2, r0, r2
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	440b      	add	r3, r1
 80123aa:	687a      	ldr	r2, [r7, #4]
 80123ac:	b292      	uxth	r2, r2
 80123ae:	4611      	mov	r1, r2
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff fb32 	bl	8011a1a <st_word>
			fs->wflag = 1;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2201      	movs	r2, #1
 80123ba:	70da      	strb	r2, [r3, #3]
			break;
 80123bc:	e047      	b.n	801244e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	899b      	ldrh	r3, [r3, #12]
 80123c6:	089b      	lsrs	r3, r3, #2
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	4619      	mov	r1, r3
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80123d2:	4413      	add	r3, r2
 80123d4:	4619      	mov	r1, r3
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f7ff fd94 	bl	8011f04 <move_window>
 80123dc:	4603      	mov	r3, r0
 80123de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80123e0:	7ffb      	ldrb	r3, [r7, #31]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d132      	bne.n	801244c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	68fa      	ldr	r2, [r7, #12]
 80123f8:	8992      	ldrh	r2, [r2, #12]
 80123fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80123fe:	fb00 f202 	mul.w	r2, r0, r2
 8012402:	1a9b      	subs	r3, r3, r2
 8012404:	440b      	add	r3, r1
 8012406:	4618      	mov	r0, r3
 8012408:	f7ff fae4 	bl	80119d4 <ld_dword>
 801240c:	4603      	mov	r3, r0
 801240e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012412:	4323      	orrs	r3, r4
 8012414:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	68fa      	ldr	r2, [r7, #12]
 8012422:	8992      	ldrh	r2, [r2, #12]
 8012424:	fbb3 f0f2 	udiv	r0, r3, r2
 8012428:	fb00 f202 	mul.w	r2, r0, r2
 801242c:	1a9b      	subs	r3, r3, r2
 801242e:	440b      	add	r3, r1
 8012430:	6879      	ldr	r1, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	f7ff fb0c 	bl	8011a50 <st_dword>
			fs->wflag = 1;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2201      	movs	r2, #1
 801243c:	70da      	strb	r2, [r3, #3]
			break;
 801243e:	e006      	b.n	801244e <put_fat+0x22a>
			if (res != FR_OK) break;
 8012440:	bf00      	nop
 8012442:	e004      	b.n	801244e <put_fat+0x22a>
			if (res != FR_OK) break;
 8012444:	bf00      	nop
 8012446:	e002      	b.n	801244e <put_fat+0x22a>
			if (res != FR_OK) break;
 8012448:	bf00      	nop
 801244a:	e000      	b.n	801244e <put_fat+0x22a>
			if (res != FR_OK) break;
 801244c:	bf00      	nop
		}
	}
	return res;
 801244e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012450:	4618      	mov	r0, r3
 8012452:	3724      	adds	r7, #36	@ 0x24
 8012454:	46bd      	mov	sp, r7
 8012456:	bd90      	pop	{r4, r7, pc}

08012458 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b088      	sub	sp, #32
 801245c:	af00      	add	r7, sp, #0
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012464:	2300      	movs	r3, #0
 8012466:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d904      	bls.n	801247e <remove_chain+0x26>
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	6a1b      	ldr	r3, [r3, #32]
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	429a      	cmp	r2, r3
 801247c:	d301      	bcc.n	8012482 <remove_chain+0x2a>
 801247e:	2302      	movs	r3, #2
 8012480:	e04b      	b.n	801251a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d00c      	beq.n	80124a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012488:	f04f 32ff 	mov.w	r2, #4294967295
 801248c:	6879      	ldr	r1, [r7, #4]
 801248e:	69b8      	ldr	r0, [r7, #24]
 8012490:	f7ff fec8 	bl	8012224 <put_fat>
 8012494:	4603      	mov	r3, r0
 8012496:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012498:	7ffb      	ldrb	r3, [r7, #31]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d001      	beq.n	80124a2 <remove_chain+0x4a>
 801249e:	7ffb      	ldrb	r3, [r7, #31]
 80124a0:	e03b      	b.n	801251a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80124a2:	68b9      	ldr	r1, [r7, #8]
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff fdea 	bl	801207e <get_fat>
 80124aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d031      	beq.n	8012516 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d101      	bne.n	80124bc <remove_chain+0x64>
 80124b8:	2302      	movs	r3, #2
 80124ba:	e02e      	b.n	801251a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c2:	d101      	bne.n	80124c8 <remove_chain+0x70>
 80124c4:	2301      	movs	r3, #1
 80124c6:	e028      	b.n	801251a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80124c8:	2200      	movs	r2, #0
 80124ca:	68b9      	ldr	r1, [r7, #8]
 80124cc:	69b8      	ldr	r0, [r7, #24]
 80124ce:	f7ff fea9 	bl	8012224 <put_fat>
 80124d2:	4603      	mov	r3, r0
 80124d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80124d6:	7ffb      	ldrb	r3, [r7, #31]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d001      	beq.n	80124e0 <remove_chain+0x88>
 80124dc:	7ffb      	ldrb	r3, [r7, #31]
 80124de:	e01c      	b.n	801251a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	699a      	ldr	r2, [r3, #24]
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	6a1b      	ldr	r3, [r3, #32]
 80124e8:	3b02      	subs	r3, #2
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d20b      	bcs.n	8012506 <remove_chain+0xae>
			fs->free_clst++;
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	1c5a      	adds	r2, r3, #1
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	791b      	ldrb	r3, [r3, #4]
 80124fc:	f043 0301 	orr.w	r3, r3, #1
 8012500:	b2da      	uxtb	r2, r3
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	6a1b      	ldr	r3, [r3, #32]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	429a      	cmp	r2, r3
 8012512:	d3c6      	bcc.n	80124a2 <remove_chain+0x4a>
 8012514:	e000      	b.n	8012518 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012516:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	3720      	adds	r7, #32
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b088      	sub	sp, #32
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10d      	bne.n	8012554 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	695b      	ldr	r3, [r3, #20]
 801253c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d004      	beq.n	801254e <create_chain+0x2c>
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	6a1b      	ldr	r3, [r3, #32]
 8012548:	69ba      	ldr	r2, [r7, #24]
 801254a:	429a      	cmp	r2, r3
 801254c:	d31b      	bcc.n	8012586 <create_chain+0x64>
 801254e:	2301      	movs	r3, #1
 8012550:	61bb      	str	r3, [r7, #24]
 8012552:	e018      	b.n	8012586 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff fd91 	bl	801207e <get_fat>
 801255c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d801      	bhi.n	8012568 <create_chain+0x46>
 8012564:	2301      	movs	r3, #1
 8012566:	e070      	b.n	801264a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256e:	d101      	bne.n	8012574 <create_chain+0x52>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	e06a      	b.n	801264a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	6a1b      	ldr	r3, [r3, #32]
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	429a      	cmp	r2, r3
 801257c:	d201      	bcs.n	8012582 <create_chain+0x60>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	e063      	b.n	801264a <create_chain+0x128>
		scl = clst;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	3301      	adds	r3, #1
 801258e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	6a1b      	ldr	r3, [r3, #32]
 8012594:	69fa      	ldr	r2, [r7, #28]
 8012596:	429a      	cmp	r2, r3
 8012598:	d307      	bcc.n	80125aa <create_chain+0x88>
				ncl = 2;
 801259a:	2302      	movs	r3, #2
 801259c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801259e:	69fa      	ldr	r2, [r7, #28]
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d901      	bls.n	80125aa <create_chain+0x88>
 80125a6:	2300      	movs	r3, #0
 80125a8:	e04f      	b.n	801264a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80125aa:	69f9      	ldr	r1, [r7, #28]
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fd66 	bl	801207e <get_fat>
 80125b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00e      	beq.n	80125d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d003      	beq.n	80125c8 <create_chain+0xa6>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	d101      	bne.n	80125cc <create_chain+0xaa>
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	e03e      	b.n	801264a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80125cc:	69fa      	ldr	r2, [r7, #28]
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d1da      	bne.n	801258a <create_chain+0x68>
 80125d4:	2300      	movs	r3, #0
 80125d6:	e038      	b.n	801264a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80125d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80125da:	f04f 32ff 	mov.w	r2, #4294967295
 80125de:	69f9      	ldr	r1, [r7, #28]
 80125e0:	6938      	ldr	r0, [r7, #16]
 80125e2:	f7ff fe1f 	bl	8012224 <put_fat>
 80125e6:	4603      	mov	r3, r0
 80125e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80125ea:	7dfb      	ldrb	r3, [r7, #23]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d109      	bne.n	8012604 <create_chain+0xe2>
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d006      	beq.n	8012604 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80125f6:	69fa      	ldr	r2, [r7, #28]
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	6938      	ldr	r0, [r7, #16]
 80125fc:	f7ff fe12 	bl	8012224 <put_fat>
 8012600:	4603      	mov	r3, r0
 8012602:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012604:	7dfb      	ldrb	r3, [r7, #23]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d116      	bne.n	8012638 <create_chain+0x116>
		fs->last_clst = ncl;
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	69fa      	ldr	r2, [r7, #28]
 801260e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	699a      	ldr	r2, [r3, #24]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	6a1b      	ldr	r3, [r3, #32]
 8012618:	3b02      	subs	r3, #2
 801261a:	429a      	cmp	r2, r3
 801261c:	d804      	bhi.n	8012628 <create_chain+0x106>
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	699b      	ldr	r3, [r3, #24]
 8012622:	1e5a      	subs	r2, r3, #1
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	791b      	ldrb	r3, [r3, #4]
 801262c:	f043 0301 	orr.w	r3, r3, #1
 8012630:	b2da      	uxtb	r2, r3
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	711a      	strb	r2, [r3, #4]
 8012636:	e007      	b.n	8012648 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012638:	7dfb      	ldrb	r3, [r7, #23]
 801263a:	2b01      	cmp	r3, #1
 801263c:	d102      	bne.n	8012644 <create_chain+0x122>
 801263e:	f04f 33ff 	mov.w	r3, #4294967295
 8012642:	e000      	b.n	8012646 <create_chain+0x124>
 8012644:	2301      	movs	r3, #1
 8012646:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012648:	69fb      	ldr	r3, [r7, #28]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3720      	adds	r7, #32
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012652:	b480      	push	{r7}
 8012654:	b087      	sub	sp, #28
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012666:	3304      	adds	r3, #4
 8012668:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	899b      	ldrh	r3, [r3, #12]
 801266e:	461a      	mov	r2, r3
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	fbb3 f3f2 	udiv	r3, r3, r2
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	8952      	ldrh	r2, [r2, #10]
 801267a:	fbb3 f3f2 	udiv	r3, r3, r2
 801267e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	1d1a      	adds	r2, r3, #4
 8012684:	613a      	str	r2, [r7, #16]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d101      	bne.n	8012694 <clmt_clust+0x42>
 8012690:	2300      	movs	r3, #0
 8012692:	e010      	b.n	80126b6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012694:	697a      	ldr	r2, [r7, #20]
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	429a      	cmp	r2, r3
 801269a:	d307      	bcc.n	80126ac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801269c:	697a      	ldr	r2, [r7, #20]
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	617b      	str	r3, [r7, #20]
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	3304      	adds	r3, #4
 80126a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126aa:	e7e9      	b.n	8012680 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80126ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	4413      	add	r3, r2
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	371c      	adds	r7, #28
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80126c2:	b580      	push	{r7, lr}
 80126c4:	b086      	sub	sp, #24
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
 80126ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80126d8:	d204      	bcs.n	80126e4 <dir_sdi+0x22>
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	f003 031f 	and.w	r3, r3, #31
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d001      	beq.n	80126e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80126e4:	2302      	movs	r3, #2
 80126e6:	e071      	b.n	80127cc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	683a      	ldr	r2, [r7, #0]
 80126ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	689b      	ldr	r3, [r3, #8]
 80126f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d106      	bne.n	8012708 <dir_sdi+0x46>
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	2b02      	cmp	r3, #2
 8012700:	d902      	bls.n	8012708 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012706:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10c      	bne.n	8012728 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	095b      	lsrs	r3, r3, #5
 8012712:	693a      	ldr	r2, [r7, #16]
 8012714:	8912      	ldrh	r2, [r2, #8]
 8012716:	4293      	cmp	r3, r2
 8012718:	d301      	bcc.n	801271e <dir_sdi+0x5c>
 801271a:	2302      	movs	r3, #2
 801271c:	e056      	b.n	80127cc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	61da      	str	r2, [r3, #28]
 8012726:	e02d      	b.n	8012784 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	895b      	ldrh	r3, [r3, #10]
 801272c:	461a      	mov	r2, r3
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	899b      	ldrh	r3, [r3, #12]
 8012732:	fb02 f303 	mul.w	r3, r2, r3
 8012736:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012738:	e019      	b.n	801276e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6979      	ldr	r1, [r7, #20]
 801273e:	4618      	mov	r0, r3
 8012740:	f7ff fc9d 	bl	801207e <get_fat>
 8012744:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274c:	d101      	bne.n	8012752 <dir_sdi+0x90>
 801274e:	2301      	movs	r3, #1
 8012750:	e03c      	b.n	80127cc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d904      	bls.n	8012762 <dir_sdi+0xa0>
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	6a1b      	ldr	r3, [r3, #32]
 801275c:	697a      	ldr	r2, [r7, #20]
 801275e:	429a      	cmp	r2, r3
 8012760:	d301      	bcc.n	8012766 <dir_sdi+0xa4>
 8012762:	2302      	movs	r3, #2
 8012764:	e032      	b.n	80127cc <dir_sdi+0x10a>
			ofs -= csz;
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	429a      	cmp	r2, r3
 8012774:	d2e1      	bcs.n	801273a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012776:	6979      	ldr	r1, [r7, #20]
 8012778:	6938      	ldr	r0, [r7, #16]
 801277a:	f7ff fc61 	bl	8012040 <clust2sect>
 801277e:	4602      	mov	r2, r0
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	697a      	ldr	r2, [r7, #20]
 8012788:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	69db      	ldr	r3, [r3, #28]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d101      	bne.n	8012796 <dir_sdi+0xd4>
 8012792:	2302      	movs	r3, #2
 8012794:	e01a      	b.n	80127cc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	69da      	ldr	r2, [r3, #28]
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	899b      	ldrh	r3, [r3, #12]
 801279e:	4619      	mov	r1, r3
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80127a6:	441a      	add	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	899b      	ldrh	r3, [r3, #12]
 80127b6:	461a      	mov	r2, r3
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80127be:	fb00 f202 	mul.w	r2, r0, r2
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	18ca      	adds	r2, r1, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80127ca:	2300      	movs	r3, #0
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	695b      	ldr	r3, [r3, #20]
 80127e8:	3320      	adds	r3, #32
 80127ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	69db      	ldr	r3, [r3, #28]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d003      	beq.n	80127fc <dir_next+0x28>
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80127fa:	d301      	bcc.n	8012800 <dir_next+0x2c>
 80127fc:	2304      	movs	r3, #4
 80127fe:	e0bb      	b.n	8012978 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	899b      	ldrh	r3, [r3, #12]
 8012804:	461a      	mov	r2, r3
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	fbb3 f1f2 	udiv	r1, r3, r2
 801280c:	fb01 f202 	mul.w	r2, r1, r2
 8012810:	1a9b      	subs	r3, r3, r2
 8012812:	2b00      	cmp	r3, #0
 8012814:	f040 809d 	bne.w	8012952 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	69db      	ldr	r3, [r3, #28]
 801281c:	1c5a      	adds	r2, r3, #1
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	699b      	ldr	r3, [r3, #24]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d10b      	bne.n	8012842 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	095b      	lsrs	r3, r3, #5
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	8912      	ldrh	r2, [r2, #8]
 8012832:	4293      	cmp	r3, r2
 8012834:	f0c0 808d 	bcc.w	8012952 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	61da      	str	r2, [r3, #28]
 801283e:	2304      	movs	r3, #4
 8012840:	e09a      	b.n	8012978 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	899b      	ldrh	r3, [r3, #12]
 8012846:	461a      	mov	r2, r3
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	fbb3 f3f2 	udiv	r3, r3, r2
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	8952      	ldrh	r2, [r2, #10]
 8012852:	3a01      	subs	r2, #1
 8012854:	4013      	ands	r3, r2
 8012856:	2b00      	cmp	r3, #0
 8012858:	d17b      	bne.n	8012952 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	699b      	ldr	r3, [r3, #24]
 8012860:	4619      	mov	r1, r3
 8012862:	4610      	mov	r0, r2
 8012864:	f7ff fc0b 	bl	801207e <get_fat>
 8012868:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	2b01      	cmp	r3, #1
 801286e:	d801      	bhi.n	8012874 <dir_next+0xa0>
 8012870:	2302      	movs	r3, #2
 8012872:	e081      	b.n	8012978 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801287a:	d101      	bne.n	8012880 <dir_next+0xac>
 801287c:	2301      	movs	r3, #1
 801287e:	e07b      	b.n	8012978 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	6a1b      	ldr	r3, [r3, #32]
 8012884:	697a      	ldr	r2, [r7, #20]
 8012886:	429a      	cmp	r2, r3
 8012888:	d359      	bcc.n	801293e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d104      	bne.n	801289a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	61da      	str	r2, [r3, #28]
 8012896:	2304      	movs	r3, #4
 8012898:	e06e      	b.n	8012978 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	4619      	mov	r1, r3
 80128a2:	4610      	mov	r0, r2
 80128a4:	f7ff fe3d 	bl	8012522 <create_chain>
 80128a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d101      	bne.n	80128b4 <dir_next+0xe0>
 80128b0:	2307      	movs	r3, #7
 80128b2:	e061      	b.n	8012978 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d101      	bne.n	80128be <dir_next+0xea>
 80128ba:	2302      	movs	r3, #2
 80128bc:	e05c      	b.n	8012978 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c4:	d101      	bne.n	80128ca <dir_next+0xf6>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e056      	b.n	8012978 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80128ca:	68f8      	ldr	r0, [r7, #12]
 80128cc:	f7ff fad6 	bl	8011e7c <sync_window>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d001      	beq.n	80128da <dir_next+0x106>
 80128d6:	2301      	movs	r3, #1
 80128d8:	e04e      	b.n	8012978 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	899b      	ldrh	r3, [r3, #12]
 80128e4:	461a      	mov	r2, r3
 80128e6:	2100      	movs	r1, #0
 80128e8:	f7ff f8ff 	bl	8011aea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80128ec:	2300      	movs	r3, #0
 80128ee:	613b      	str	r3, [r7, #16]
 80128f0:	6979      	ldr	r1, [r7, #20]
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7ff fba4 	bl	8012040 <clust2sect>
 80128f8:	4602      	mov	r2, r0
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80128fe:	e012      	b.n	8012926 <dir_next+0x152>
						fs->wflag = 1;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2201      	movs	r2, #1
 8012904:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f7ff fab8 	bl	8011e7c <sync_window>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d001      	beq.n	8012916 <dir_next+0x142>
 8012912:	2301      	movs	r3, #1
 8012914:	e030      	b.n	8012978 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	3301      	adds	r3, #1
 801291a:	613b      	str	r3, [r7, #16]
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	639a      	str	r2, [r3, #56]	@ 0x38
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	895b      	ldrh	r3, [r3, #10]
 801292a:	461a      	mov	r2, r3
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	4293      	cmp	r3, r2
 8012930:	d3e6      	bcc.n	8012900 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	1ad2      	subs	r2, r2, r3
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	697a      	ldr	r2, [r7, #20]
 8012942:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012944:	6979      	ldr	r1, [r7, #20]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f7ff fb7a 	bl	8012040 <clust2sect>
 801294c:	4602      	mov	r2, r0
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	899b      	ldrh	r3, [r3, #12]
 8012962:	461a      	mov	r2, r3
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	fbb3 f0f2 	udiv	r0, r3, r2
 801296a:	fb00 f202 	mul.w	r2, r0, r2
 801296e:	1a9b      	subs	r3, r3, r2
 8012970:	18ca      	adds	r2, r1, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012976:	2300      	movs	r3, #0
}
 8012978:	4618      	mov	r0, r3
 801297a:	3718      	adds	r7, #24
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012990:	2100      	movs	r1, #0
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff fe95 	bl	80126c2 <dir_sdi>
 8012998:	4603      	mov	r3, r0
 801299a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801299c:	7dfb      	ldrb	r3, [r7, #23]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d12b      	bne.n	80129fa <dir_alloc+0x7a>
		n = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	69db      	ldr	r3, [r3, #28]
 80129aa:	4619      	mov	r1, r3
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f7ff faa9 	bl	8011f04 <move_window>
 80129b2:	4603      	mov	r3, r0
 80129b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80129b6:	7dfb      	ldrb	r3, [r7, #23]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d11d      	bne.n	80129f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6a1b      	ldr	r3, [r3, #32]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2be5      	cmp	r3, #229	@ 0xe5
 80129c4:	d004      	beq.n	80129d0 <dir_alloc+0x50>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6a1b      	ldr	r3, [r3, #32]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d107      	bne.n	80129e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	3301      	adds	r3, #1
 80129d4:	613b      	str	r3, [r7, #16]
 80129d6:	693a      	ldr	r2, [r7, #16]
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d102      	bne.n	80129e4 <dir_alloc+0x64>
 80129de:	e00c      	b.n	80129fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80129e0:	2300      	movs	r3, #0
 80129e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80129e4:	2101      	movs	r1, #1
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7ff fef4 	bl	80127d4 <dir_next>
 80129ec:	4603      	mov	r3, r0
 80129ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80129f0:	7dfb      	ldrb	r3, [r7, #23]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0d7      	beq.n	80129a6 <dir_alloc+0x26>
 80129f6:	e000      	b.n	80129fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80129f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
 80129fc:	2b04      	cmp	r3, #4
 80129fe:	d101      	bne.n	8012a04 <dir_alloc+0x84>
 8012a00:	2307      	movs	r3, #7
 8012a02:	75fb      	strb	r3, [r7, #23]
	return res;
 8012a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3718      	adds	r7, #24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b084      	sub	sp, #16
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	331a      	adds	r3, #26
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe ffc1 	bl	80119a4 <ld_word>
 8012a22:	4603      	mov	r3, r0
 8012a24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	2b03      	cmp	r3, #3
 8012a2c:	d109      	bne.n	8012a42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	3314      	adds	r3, #20
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fe ffb6 	bl	80119a4 <ld_word>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	041b      	lsls	r3, r3, #16
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012a42:	68fb      	ldr	r3, [r7, #12]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	331a      	adds	r3, #26
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	b292      	uxth	r2, r2
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe ffd9 	bl	8011a1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	2b03      	cmp	r3, #3
 8012a6e:	d109      	bne.n	8012a84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	f103 0214 	add.w	r2, r3, #20
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	0c1b      	lsrs	r3, r3, #16
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	4610      	mov	r0, r2
 8012a80:	f7fe ffcb 	bl	8011a1a <st_word>
	}
}
 8012a84:	bf00      	nop
 8012a86:	3710      	adds	r7, #16
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012a8c:	b590      	push	{r4, r7, lr}
 8012a8e:	b087      	sub	sp, #28
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	331a      	adds	r3, #26
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe ff82 	bl	80119a4 <ld_word>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d001      	beq.n	8012aaa <cmp_lfn+0x1e>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e059      	b.n	8012b5e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012ab2:	1e5a      	subs	r2, r3, #1
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	4413      	add	r3, r2
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	4413      	add	r3, r2
 8012abe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	81fb      	strh	r3, [r7, #14]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	613b      	str	r3, [r7, #16]
 8012ac8:	e033      	b.n	8012b32 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012aca:	4a27      	ldr	r2, [pc, #156]	@ (8012b68 <cmp_lfn+0xdc>)
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fe ff63 	bl	80119a4 <ld_word>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012ae2:	89fb      	ldrh	r3, [r7, #14]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d01a      	beq.n	8012b1e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	2bfe      	cmp	r3, #254	@ 0xfe
 8012aec:	d812      	bhi.n	8012b14 <cmp_lfn+0x88>
 8012aee:	89bb      	ldrh	r3, [r7, #12]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f002 ff73 	bl	80159dc <ff_wtoupper>
 8012af6:	4603      	mov	r3, r0
 8012af8:	461c      	mov	r4, r3
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	1c5a      	adds	r2, r3, #1
 8012afe:	617a      	str	r2, [r7, #20]
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	4413      	add	r3, r2
 8012b06:	881b      	ldrh	r3, [r3, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f002 ff67 	bl	80159dc <ff_wtoupper>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	429c      	cmp	r4, r3
 8012b12:	d001      	beq.n	8012b18 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012b14:	2300      	movs	r3, #0
 8012b16:	e022      	b.n	8012b5e <cmp_lfn+0xd2>
			}
			wc = uc;
 8012b18:	89bb      	ldrh	r3, [r7, #12]
 8012b1a:	81fb      	strh	r3, [r7, #14]
 8012b1c:	e006      	b.n	8012b2c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012b1e:	89bb      	ldrh	r3, [r7, #12]
 8012b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b24:	4293      	cmp	r3, r2
 8012b26:	d001      	beq.n	8012b2c <cmp_lfn+0xa0>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e018      	b.n	8012b5e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	613b      	str	r3, [r7, #16]
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	2b0c      	cmp	r3, #12
 8012b36:	d9c8      	bls.n	8012aca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d00b      	beq.n	8012b5c <cmp_lfn+0xd0>
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d008      	beq.n	8012b5c <cmp_lfn+0xd0>
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	005b      	lsls	r3, r3, #1
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	4413      	add	r3, r2
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <cmp_lfn+0xd0>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	e000      	b.n	8012b5e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012b5c:	2301      	movs	r3, #1
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	371c      	adds	r7, #28
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd90      	pop	{r4, r7, pc}
 8012b66:	bf00      	nop
 8012b68:	08018ce0 	.word	0x08018ce0

08012b6c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	331a      	adds	r3, #26
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fe ff12 	bl	80119a4 <ld_word>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d001      	beq.n	8012b8a <pick_lfn+0x1e>
 8012b86:	2300      	movs	r3, #0
 8012b88:	e04d      	b.n	8012c26 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b92:	1e5a      	subs	r2, r3, #1
 8012b94:	4613      	mov	r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	4413      	add	r3, r2
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	4413      	add	r3, r2
 8012b9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	81fb      	strh	r3, [r7, #14]
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	613b      	str	r3, [r7, #16]
 8012ba8:	e028      	b.n	8012bfc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012baa:	4a21      	ldr	r2, [pc, #132]	@ (8012c30 <pick_lfn+0xc4>)
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	4413      	add	r3, r2
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fe fef3 	bl	80119a4 <ld_word>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012bc2:	89fb      	ldrh	r3, [r7, #14]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00f      	beq.n	8012be8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	2bfe      	cmp	r3, #254	@ 0xfe
 8012bcc:	d901      	bls.n	8012bd2 <pick_lfn+0x66>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e029      	b.n	8012c26 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012bd2:	89bb      	ldrh	r3, [r7, #12]
 8012bd4:	81fb      	strh	r3, [r7, #14]
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	1c5a      	adds	r2, r3, #1
 8012bda:	617a      	str	r2, [r7, #20]
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	4413      	add	r3, r2
 8012be2:	89fa      	ldrh	r2, [r7, #14]
 8012be4:	801a      	strh	r2, [r3, #0]
 8012be6:	e006      	b.n	8012bf6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012be8:	89bb      	ldrh	r3, [r7, #12]
 8012bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d001      	beq.n	8012bf6 <pick_lfn+0x8a>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	e017      	b.n	8012c26 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	613b      	str	r3, [r7, #16]
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	2b0c      	cmp	r3, #12
 8012c00:	d9d3      	bls.n	8012baa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d00a      	beq.n	8012c24 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	2bfe      	cmp	r3, #254	@ 0xfe
 8012c12:	d901      	bls.n	8012c18 <pick_lfn+0xac>
 8012c14:	2300      	movs	r3, #0
 8012c16:	e006      	b.n	8012c26 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	4413      	add	r3, r2
 8012c20:	2200      	movs	r2, #0
 8012c22:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012c24:	2301      	movs	r3, #1
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3718      	adds	r7, #24
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	08018ce0 	.word	0x08018ce0

08012c34 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b088      	sub	sp, #32
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	4611      	mov	r1, r2
 8012c40:	461a      	mov	r2, r3
 8012c42:	460b      	mov	r3, r1
 8012c44:	71fb      	strb	r3, [r7, #7]
 8012c46:	4613      	mov	r3, r2
 8012c48:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	330d      	adds	r3, #13
 8012c4e:	79ba      	ldrb	r2, [r7, #6]
 8012c50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	330b      	adds	r3, #11
 8012c56:	220f      	movs	r2, #15
 8012c58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	330c      	adds	r3, #12
 8012c5e:	2200      	movs	r2, #0
 8012c60:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	331a      	adds	r3, #26
 8012c66:	2100      	movs	r1, #0
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fe fed6 	bl	8011a1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012c6e:	79fb      	ldrb	r3, [r7, #7]
 8012c70:	1e5a      	subs	r2, r3, #1
 8012c72:	4613      	mov	r3, r2
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	4413      	add	r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	4413      	add	r3, r2
 8012c7c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	82fb      	strh	r3, [r7, #22]
 8012c82:	2300      	movs	r3, #0
 8012c84:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012c86:	8afb      	ldrh	r3, [r7, #22]
 8012c88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d007      	beq.n	8012ca0 <put_lfn+0x6c>
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	1c5a      	adds	r2, r3, #1
 8012c94:	61fa      	str	r2, [r7, #28]
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012ca0:	4a17      	ldr	r2, [pc, #92]	@ (8012d00 <put_lfn+0xcc>)
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	4413      	add	r3, r2
 8012cae:	8afa      	ldrh	r2, [r7, #22]
 8012cb0:	4611      	mov	r1, r2
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fe feb1 	bl	8011a1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012cb8:	8afb      	ldrh	r3, [r7, #22]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <put_lfn+0x90>
 8012cbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012cc2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	61bb      	str	r3, [r7, #24]
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2b0c      	cmp	r3, #12
 8012cce:	d9da      	bls.n	8012c86 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012cd0:	8afb      	ldrh	r3, [r7, #22]
 8012cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d006      	beq.n	8012ce8 <put_lfn+0xb4>
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	881b      	ldrh	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d103      	bne.n	8012cf0 <put_lfn+0xbc>
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	79fa      	ldrb	r2, [r7, #7]
 8012cf4:	701a      	strb	r2, [r3, #0]
}
 8012cf6:	bf00      	nop
 8012cf8:	3720      	adds	r7, #32
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	08018ce0 	.word	0x08018ce0

08012d04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08c      	sub	sp, #48	@ 0x30
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	607a      	str	r2, [r7, #4]
 8012d10:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012d12:	220b      	movs	r2, #11
 8012d14:	68b9      	ldr	r1, [r7, #8]
 8012d16:	68f8      	ldr	r0, [r7, #12]
 8012d18:	f7fe fec6 	bl	8011aa8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	2b05      	cmp	r3, #5
 8012d20:	d929      	bls.n	8012d76 <gen_numname+0x72>
		sr = seq;
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012d26:	e020      	b.n	8012d6a <gen_numname+0x66>
			wc = *lfn++;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	1c9a      	adds	r2, r3, #2
 8012d2c:	607a      	str	r2, [r7, #4]
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012d32:	2300      	movs	r3, #0
 8012d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d36:	e015      	b.n	8012d64 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	005a      	lsls	r2, r3, #1
 8012d3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012d3e:	f003 0301 	and.w	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012d46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012d48:	085b      	lsrs	r3, r3, #1
 8012d4a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d003      	beq.n	8012d5e <gen_numname+0x5a>
 8012d56:	69fa      	ldr	r2, [r7, #28]
 8012d58:	4b30      	ldr	r3, [pc, #192]	@ (8012e1c <gen_numname+0x118>)
 8012d5a:	4053      	eors	r3, r2
 8012d5c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d60:	3301      	adds	r3, #1
 8012d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d66:	2b0f      	cmp	r3, #15
 8012d68:	d9e6      	bls.n	8012d38 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	881b      	ldrh	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d1da      	bne.n	8012d28 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012d76:	2307      	movs	r3, #7
 8012d78:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	f003 030f 	and.w	r3, r3, #15
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	3330      	adds	r3, #48	@ 0x30
 8012d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d8e:	2b39      	cmp	r3, #57	@ 0x39
 8012d90:	d904      	bls.n	8012d9c <gen_numname+0x98>
 8012d92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d96:	3307      	adds	r3, #7
 8012d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9e:	1e5a      	subs	r2, r3, #1
 8012da0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012da2:	3330      	adds	r3, #48	@ 0x30
 8012da4:	443b      	add	r3, r7
 8012da6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012daa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	091b      	lsrs	r3, r3, #4
 8012db2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d1df      	bne.n	8012d7a <gen_numname+0x76>
	ns[i] = '~';
 8012dba:	f107 0214 	add.w	r2, r7, #20
 8012dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc0:	4413      	add	r3, r2
 8012dc2:	227e      	movs	r2, #126	@ 0x7e
 8012dc4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dca:	e002      	b.n	8012dd2 <gen_numname+0xce>
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dce:	3301      	adds	r3, #1
 8012dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d205      	bcs.n	8012de6 <gen_numname+0xe2>
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dde:	4413      	add	r3, r2
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	2b20      	cmp	r3, #32
 8012de4:	d1f2      	bne.n	8012dcc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012de8:	2b07      	cmp	r3, #7
 8012dea:	d807      	bhi.n	8012dfc <gen_numname+0xf8>
 8012dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dee:	1c5a      	adds	r2, r3, #1
 8012df0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012df2:	3330      	adds	r3, #48	@ 0x30
 8012df4:	443b      	add	r3, r7
 8012df6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012dfa:	e000      	b.n	8012dfe <gen_numname+0xfa>
 8012dfc:	2120      	movs	r1, #32
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e00:	1c5a      	adds	r2, r3, #1
 8012e02:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	4413      	add	r3, r2
 8012e08:	460a      	mov	r2, r1
 8012e0a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0e:	2b07      	cmp	r3, #7
 8012e10:	d9e9      	bls.n	8012de6 <gen_numname+0xe2>
}
 8012e12:	bf00      	nop
 8012e14:	bf00      	nop
 8012e16:	3730      	adds	r7, #48	@ 0x30
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	00011021 	.word	0x00011021

08012e20 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b085      	sub	sp, #20
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012e2c:	230b      	movs	r3, #11
 8012e2e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012e30:	7bfb      	ldrb	r3, [r7, #15]
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	0852      	lsrs	r2, r2, #1
 8012e36:	01db      	lsls	r3, r3, #7
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	b2da      	uxtb	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	1c59      	adds	r1, r3, #1
 8012e40:	6079      	str	r1, [r7, #4]
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	4413      	add	r3, r2
 8012e46:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	60bb      	str	r3, [r7, #8]
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1ed      	bne.n	8012e30 <sum_sfn+0x10>
	return sum;
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3714      	adds	r7, #20
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b086      	sub	sp, #24
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
 8012e6a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012e6c:	2304      	movs	r3, #4
 8012e6e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012e76:	23ff      	movs	r3, #255	@ 0xff
 8012e78:	757b      	strb	r3, [r7, #21]
 8012e7a:	23ff      	movs	r3, #255	@ 0xff
 8012e7c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012e7e:	e081      	b.n	8012f84 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	69db      	ldr	r3, [r3, #28]
 8012e84:	4619      	mov	r1, r3
 8012e86:	6938      	ldr	r0, [r7, #16]
 8012e88:	f7ff f83c 	bl	8011f04 <move_window>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e90:	7dfb      	ldrb	r3, [r7, #23]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d17c      	bne.n	8012f90 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6a1b      	ldr	r3, [r3, #32]
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012e9e:	7dbb      	ldrb	r3, [r7, #22]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d102      	bne.n	8012eaa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012ea4:	2304      	movs	r3, #4
 8012ea6:	75fb      	strb	r3, [r7, #23]
 8012ea8:	e077      	b.n	8012f9a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6a1b      	ldr	r3, [r3, #32]
 8012eae:	330b      	adds	r3, #11
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012eb6:	73fb      	strb	r3, [r7, #15]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	7bfa      	ldrb	r2, [r7, #15]
 8012ebc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012ebe:	7dbb      	ldrb	r3, [r7, #22]
 8012ec0:	2be5      	cmp	r3, #229	@ 0xe5
 8012ec2:	d00e      	beq.n	8012ee2 <dir_read+0x80>
 8012ec4:	7dbb      	ldrb	r3, [r7, #22]
 8012ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ec8:	d00b      	beq.n	8012ee2 <dir_read+0x80>
 8012eca:	7bfb      	ldrb	r3, [r7, #15]
 8012ecc:	f023 0320 	bic.w	r3, r3, #32
 8012ed0:	2b08      	cmp	r3, #8
 8012ed2:	bf0c      	ite	eq
 8012ed4:	2301      	moveq	r3, #1
 8012ed6:	2300      	movne	r3, #0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	461a      	mov	r2, r3
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d002      	beq.n	8012ee8 <dir_read+0x86>
				ord = 0xFF;
 8012ee2:	23ff      	movs	r3, #255	@ 0xff
 8012ee4:	757b      	strb	r3, [r7, #21]
 8012ee6:	e044      	b.n	8012f72 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012ee8:	7bfb      	ldrb	r3, [r7, #15]
 8012eea:	2b0f      	cmp	r3, #15
 8012eec:	d12f      	bne.n	8012f4e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012eee:	7dbb      	ldrb	r3, [r7, #22]
 8012ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d00d      	beq.n	8012f14 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6a1b      	ldr	r3, [r3, #32]
 8012efc:	7b5b      	ldrb	r3, [r3, #13]
 8012efe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012f00:	7dbb      	ldrb	r3, [r7, #22]
 8012f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012f06:	75bb      	strb	r3, [r7, #22]
 8012f08:	7dbb      	ldrb	r3, [r7, #22]
 8012f0a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	695a      	ldr	r2, [r3, #20]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012f14:	7dba      	ldrb	r2, [r7, #22]
 8012f16:	7d7b      	ldrb	r3, [r7, #21]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d115      	bne.n	8012f48 <dir_read+0xe6>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6a1b      	ldr	r3, [r3, #32]
 8012f20:	330d      	adds	r3, #13
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	7d3a      	ldrb	r2, [r7, #20]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d10e      	bne.n	8012f48 <dir_read+0xe6>
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	691a      	ldr	r2, [r3, #16]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6a1b      	ldr	r3, [r3, #32]
 8012f32:	4619      	mov	r1, r3
 8012f34:	4610      	mov	r0, r2
 8012f36:	f7ff fe19 	bl	8012b6c <pick_lfn>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d003      	beq.n	8012f48 <dir_read+0xe6>
 8012f40:	7d7b      	ldrb	r3, [r7, #21]
 8012f42:	3b01      	subs	r3, #1
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	e000      	b.n	8012f4a <dir_read+0xe8>
 8012f48:	23ff      	movs	r3, #255	@ 0xff
 8012f4a:	757b      	strb	r3, [r7, #21]
 8012f4c:	e011      	b.n	8012f72 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012f4e:	7d7b      	ldrb	r3, [r7, #21]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d109      	bne.n	8012f68 <dir_read+0x106>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6a1b      	ldr	r3, [r3, #32]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff ff61 	bl	8012e20 <sum_sfn>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	461a      	mov	r2, r3
 8012f62:	7d3b      	ldrb	r3, [r7, #20]
 8012f64:	4293      	cmp	r3, r2
 8012f66:	d015      	beq.n	8012f94 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f6e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012f70:	e010      	b.n	8012f94 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012f72:	2100      	movs	r1, #0
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff fc2d 	bl	80127d4 <dir_next>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012f7e:	7dfb      	ldrb	r3, [r7, #23]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d109      	bne.n	8012f98 <dir_read+0x136>
	while (dp->sect) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	69db      	ldr	r3, [r3, #28]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f47f af79 	bne.w	8012e80 <dir_read+0x1e>
 8012f8e:	e004      	b.n	8012f9a <dir_read+0x138>
		if (res != FR_OK) break;
 8012f90:	bf00      	nop
 8012f92:	e002      	b.n	8012f9a <dir_read+0x138>
					break;
 8012f94:	bf00      	nop
 8012f96:	e000      	b.n	8012f9a <dir_read+0x138>
		if (res != FR_OK) break;
 8012f98:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <dir_read+0x144>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	61da      	str	r2, [r3, #28]
	return res;
 8012fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3718      	adds	r7, #24
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7ff fb7e 	bl	80126c2 <dir_sdi>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012fca:	7dfb      	ldrb	r3, [r7, #23]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <dir_find+0x24>
 8012fd0:	7dfb      	ldrb	r3, [r7, #23]
 8012fd2:	e0a9      	b.n	8013128 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012fd4:	23ff      	movs	r3, #255	@ 0xff
 8012fd6:	753b      	strb	r3, [r7, #20]
 8012fd8:	7d3b      	ldrb	r3, [r7, #20]
 8012fda:	757b      	strb	r3, [r7, #21]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	69db      	ldr	r3, [r3, #28]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	6938      	ldr	r0, [r7, #16]
 8012fec:	f7fe ff8a 	bl	8011f04 <move_window>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ff4:	7dfb      	ldrb	r3, [r7, #23]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	f040 8090 	bne.w	801311c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a1b      	ldr	r3, [r3, #32]
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013004:	7dbb      	ldrb	r3, [r7, #22]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d102      	bne.n	8013010 <dir_find+0x60>
 801300a:	2304      	movs	r3, #4
 801300c:	75fb      	strb	r3, [r7, #23]
 801300e:	e08a      	b.n	8013126 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6a1b      	ldr	r3, [r3, #32]
 8013014:	330b      	adds	r3, #11
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801301c:	73fb      	strb	r3, [r7, #15]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	7bfa      	ldrb	r2, [r7, #15]
 8013022:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013024:	7dbb      	ldrb	r3, [r7, #22]
 8013026:	2be5      	cmp	r3, #229	@ 0xe5
 8013028:	d007      	beq.n	801303a <dir_find+0x8a>
 801302a:	7bfb      	ldrb	r3, [r7, #15]
 801302c:	f003 0308 	and.w	r3, r3, #8
 8013030:	2b00      	cmp	r3, #0
 8013032:	d009      	beq.n	8013048 <dir_find+0x98>
 8013034:	7bfb      	ldrb	r3, [r7, #15]
 8013036:	2b0f      	cmp	r3, #15
 8013038:	d006      	beq.n	8013048 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801303a:	23ff      	movs	r3, #255	@ 0xff
 801303c:	757b      	strb	r3, [r7, #21]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f04f 32ff 	mov.w	r2, #4294967295
 8013044:	631a      	str	r2, [r3, #48]	@ 0x30
 8013046:	e05e      	b.n	8013106 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013048:	7bfb      	ldrb	r3, [r7, #15]
 801304a:	2b0f      	cmp	r3, #15
 801304c:	d136      	bne.n	80130bc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013058:	2b00      	cmp	r3, #0
 801305a:	d154      	bne.n	8013106 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801305c:	7dbb      	ldrb	r3, [r7, #22]
 801305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00d      	beq.n	8013082 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6a1b      	ldr	r3, [r3, #32]
 801306a:	7b5b      	ldrb	r3, [r3, #13]
 801306c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801306e:	7dbb      	ldrb	r3, [r7, #22]
 8013070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013074:	75bb      	strb	r3, [r7, #22]
 8013076:	7dbb      	ldrb	r3, [r7, #22]
 8013078:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	695a      	ldr	r2, [r3, #20]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013082:	7dba      	ldrb	r2, [r7, #22]
 8013084:	7d7b      	ldrb	r3, [r7, #21]
 8013086:	429a      	cmp	r2, r3
 8013088:	d115      	bne.n	80130b6 <dir_find+0x106>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6a1b      	ldr	r3, [r3, #32]
 801308e:	330d      	adds	r3, #13
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	7d3a      	ldrb	r2, [r7, #20]
 8013094:	429a      	cmp	r2, r3
 8013096:	d10e      	bne.n	80130b6 <dir_find+0x106>
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	691a      	ldr	r2, [r3, #16]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6a1b      	ldr	r3, [r3, #32]
 80130a0:	4619      	mov	r1, r3
 80130a2:	4610      	mov	r0, r2
 80130a4:	f7ff fcf2 	bl	8012a8c <cmp_lfn>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d003      	beq.n	80130b6 <dir_find+0x106>
 80130ae:	7d7b      	ldrb	r3, [r7, #21]
 80130b0:	3b01      	subs	r3, #1
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	e000      	b.n	80130b8 <dir_find+0x108>
 80130b6:	23ff      	movs	r3, #255	@ 0xff
 80130b8:	757b      	strb	r3, [r7, #21]
 80130ba:	e024      	b.n	8013106 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80130bc:	7d7b      	ldrb	r3, [r7, #21]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d109      	bne.n	80130d6 <dir_find+0x126>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff feaa 	bl	8012e20 <sum_sfn>
 80130cc:	4603      	mov	r3, r0
 80130ce:	461a      	mov	r2, r3
 80130d0:	7d3b      	ldrb	r3, [r7, #20]
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d024      	beq.n	8013120 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80130dc:	f003 0301 	and.w	r3, r3, #1
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d10a      	bne.n	80130fa <dir_find+0x14a>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6a18      	ldr	r0, [r3, #32]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	3324      	adds	r3, #36	@ 0x24
 80130ec:	220b      	movs	r2, #11
 80130ee:	4619      	mov	r1, r3
 80130f0:	f7fe fd16 	bl	8011b20 <mem_cmp>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d014      	beq.n	8013124 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80130fa:	23ff      	movs	r3, #255	@ 0xff
 80130fc:	757b      	strb	r3, [r7, #21]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f04f 32ff 	mov.w	r2, #4294967295
 8013104:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013106:	2100      	movs	r1, #0
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7ff fb63 	bl	80127d4 <dir_next>
 801310e:	4603      	mov	r3, r0
 8013110:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013112:	7dfb      	ldrb	r3, [r7, #23]
 8013114:	2b00      	cmp	r3, #0
 8013116:	f43f af65 	beq.w	8012fe4 <dir_find+0x34>
 801311a:	e004      	b.n	8013126 <dir_find+0x176>
		if (res != FR_OK) break;
 801311c:	bf00      	nop
 801311e:	e002      	b.n	8013126 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013120:	bf00      	nop
 8013122:	e000      	b.n	8013126 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013124:	bf00      	nop

	return res;
 8013126:	7dfb      	ldrb	r3, [r7, #23]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3718      	adds	r7, #24
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b08c      	sub	sp, #48	@ 0x30
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013144:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <dir_register+0x20>
 801314c:	2306      	movs	r3, #6
 801314e:	e0e0      	b.n	8013312 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013150:	2300      	movs	r3, #0
 8013152:	627b      	str	r3, [r7, #36]	@ 0x24
 8013154:	e002      	b.n	801315c <dir_register+0x2c>
 8013156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013158:	3301      	adds	r3, #1
 801315a:	627b      	str	r3, [r7, #36]	@ 0x24
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	691a      	ldr	r2, [r3, #16]
 8013160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	4413      	add	r3, r2
 8013166:	881b      	ldrh	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d1f4      	bne.n	8013156 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8013172:	f107 030c 	add.w	r3, r7, #12
 8013176:	220c      	movs	r2, #12
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe fc95 	bl	8011aa8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801317e:	7dfb      	ldrb	r3, [r7, #23]
 8013180:	f003 0301 	and.w	r3, r3, #1
 8013184:	2b00      	cmp	r3, #0
 8013186:	d032      	beq.n	80131ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2240      	movs	r2, #64	@ 0x40
 801318c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8013190:	2301      	movs	r3, #1
 8013192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013194:	e016      	b.n	80131c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	691a      	ldr	r2, [r3, #16]
 80131a0:	f107 010c 	add.w	r1, r7, #12
 80131a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131a6:	f7ff fdad 	bl	8012d04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7ff ff00 	bl	8012fb0 <dir_find>
 80131b0:	4603      	mov	r3, r0
 80131b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80131b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d106      	bne.n	80131cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80131be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c0:	3301      	adds	r3, #1
 80131c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80131c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c6:	2b63      	cmp	r3, #99	@ 0x63
 80131c8:	d9e5      	bls.n	8013196 <dir_register+0x66>
 80131ca:	e000      	b.n	80131ce <dir_register+0x9e>
			if (res != FR_OK) break;
 80131cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80131ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d0:	2b64      	cmp	r3, #100	@ 0x64
 80131d2:	d101      	bne.n	80131d8 <dir_register+0xa8>
 80131d4:	2307      	movs	r3, #7
 80131d6:	e09c      	b.n	8013312 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80131d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131dc:	2b04      	cmp	r3, #4
 80131de:	d002      	beq.n	80131e6 <dir_register+0xb6>
 80131e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131e4:	e095      	b.n	8013312 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80131e6:	7dfa      	ldrb	r2, [r7, #23]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
 80131f0:	f003 0302 	and.w	r3, r3, #2
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d007      	beq.n	8013208 <dir_register+0xd8>
 80131f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fa:	330c      	adds	r3, #12
 80131fc:	4a47      	ldr	r2, [pc, #284]	@ (801331c <dir_register+0x1ec>)
 80131fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013202:	089b      	lsrs	r3, r3, #2
 8013204:	3301      	adds	r3, #1
 8013206:	e000      	b.n	801320a <dir_register+0xda>
 8013208:	2301      	movs	r3, #1
 801320a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801320c:	6a39      	ldr	r1, [r7, #32]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7ff fbb6 	bl	8012980 <dir_alloc>
 8013214:	4603      	mov	r3, r0
 8013216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801321a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801321e:	2b00      	cmp	r3, #0
 8013220:	d148      	bne.n	80132b4 <dir_register+0x184>
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	3b01      	subs	r3, #1
 8013226:	623b      	str	r3, [r7, #32]
 8013228:	6a3b      	ldr	r3, [r7, #32]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d042      	beq.n	80132b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	695a      	ldr	r2, [r3, #20]
 8013232:	6a3b      	ldr	r3, [r7, #32]
 8013234:	015b      	lsls	r3, r3, #5
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	4619      	mov	r1, r3
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fa41 	bl	80126c2 <dir_sdi>
 8013240:	4603      	mov	r3, r0
 8013242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801324a:	2b00      	cmp	r3, #0
 801324c:	d132      	bne.n	80132b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	3324      	adds	r3, #36	@ 0x24
 8013252:	4618      	mov	r0, r3
 8013254:	f7ff fde4 	bl	8012e20 <sum_sfn>
 8013258:	4603      	mov	r3, r0
 801325a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	69db      	ldr	r3, [r3, #28]
 8013260:	4619      	mov	r1, r3
 8013262:	69f8      	ldr	r0, [r7, #28]
 8013264:	f7fe fe4e 	bl	8011f04 <move_window>
 8013268:	4603      	mov	r3, r0
 801326a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801326e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013272:	2b00      	cmp	r3, #0
 8013274:	d11d      	bne.n	80132b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	6918      	ldr	r0, [r3, #16]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6a19      	ldr	r1, [r3, #32]
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	b2da      	uxtb	r2, r3
 8013282:	7efb      	ldrb	r3, [r7, #27]
 8013284:	f7ff fcd6 	bl	8012c34 <put_lfn>
				fs->wflag = 1;
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	2201      	movs	r2, #1
 801328c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801328e:	2100      	movs	r1, #0
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff fa9f 	bl	80127d4 <dir_next>
 8013296:	4603      	mov	r3, r0
 8013298:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801329c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d107      	bne.n	80132b4 <dir_register+0x184>
 80132a4:	6a3b      	ldr	r3, [r7, #32]
 80132a6:	3b01      	subs	r3, #1
 80132a8:	623b      	str	r3, [r7, #32]
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d1d5      	bne.n	801325c <dir_register+0x12c>
 80132b0:	e000      	b.n	80132b4 <dir_register+0x184>
				if (res != FR_OK) break;
 80132b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80132b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d128      	bne.n	801330e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	69db      	ldr	r3, [r3, #28]
 80132c0:	4619      	mov	r1, r3
 80132c2:	69f8      	ldr	r0, [r7, #28]
 80132c4:	f7fe fe1e 	bl	8011f04 <move_window>
 80132c8:	4603      	mov	r3, r0
 80132ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80132ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d11b      	bne.n	801330e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6a1b      	ldr	r3, [r3, #32]
 80132da:	2220      	movs	r2, #32
 80132dc:	2100      	movs	r1, #0
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fe fc03 	bl	8011aea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6a18      	ldr	r0, [r3, #32]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	3324      	adds	r3, #36	@ 0x24
 80132ec:	220b      	movs	r2, #11
 80132ee:	4619      	mov	r1, r3
 80132f0:	f7fe fbda 	bl	8011aa8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6a1b      	ldr	r3, [r3, #32]
 80132fe:	330c      	adds	r3, #12
 8013300:	f002 0218 	and.w	r2, r2, #24
 8013304:	b2d2      	uxtb	r2, r2
 8013306:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	2201      	movs	r2, #1
 801330c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801330e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013312:	4618      	mov	r0, r3
 8013314:	3730      	adds	r7, #48	@ 0x30
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	4ec4ec4f 	.word	0x4ec4ec4f

08013320 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333c:	d007      	beq.n	801334e <dir_remove+0x2e>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff f9bc 	bl	80126c2 <dir_sdi>
 801334a:	4603      	mov	r3, r0
 801334c:	e000      	b.n	8013350 <dir_remove+0x30>
 801334e:	2300      	movs	r3, #0
 8013350:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013352:	7dfb      	ldrb	r3, [r7, #23]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d128      	bne.n	80133aa <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	69db      	ldr	r3, [r3, #28]
 801335c:	4619      	mov	r1, r3
 801335e:	6938      	ldr	r0, [r7, #16]
 8013360:	f7fe fdd0 	bl	8011f04 <move_window>
 8013364:	4603      	mov	r3, r0
 8013366:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013368:	7dfb      	ldrb	r3, [r7, #23]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d115      	bne.n	801339a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6a1b      	ldr	r3, [r3, #32]
 8013372:	22e5      	movs	r2, #229	@ 0xe5
 8013374:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2201      	movs	r2, #1
 801337a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	695b      	ldr	r3, [r3, #20]
 8013380:	68fa      	ldr	r2, [r7, #12]
 8013382:	429a      	cmp	r2, r3
 8013384:	d90b      	bls.n	801339e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8013386:	2100      	movs	r1, #0
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fa23 	bl	80127d4 <dir_next>
 801338e:	4603      	mov	r3, r0
 8013390:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8013392:	7dfb      	ldrb	r3, [r7, #23]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d0df      	beq.n	8013358 <dir_remove+0x38>
 8013398:	e002      	b.n	80133a0 <dir_remove+0x80>
			if (res != FR_OK) break;
 801339a:	bf00      	nop
 801339c:	e000      	b.n	80133a0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801339e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80133a0:	7dfb      	ldrb	r3, [r7, #23]
 80133a2:	2b04      	cmp	r3, #4
 80133a4:	d101      	bne.n	80133aa <dir_remove+0x8a>
 80133a6:	2302      	movs	r3, #2
 80133a8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80133aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3718      	adds	r7, #24
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b08a      	sub	sp, #40	@ 0x28
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	613b      	str	r3, [r7, #16]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	691b      	ldr	r3, [r3, #16]
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	61ba      	str	r2, [r7, #24]
 80133da:	693a      	ldr	r2, [r7, #16]
 80133dc:	4413      	add	r3, r2
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80133e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133e4:	2b1f      	cmp	r3, #31
 80133e6:	d940      	bls.n	801346a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80133e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80133ec:	d006      	beq.n	80133fc <create_name+0x48>
 80133ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80133f2:	d110      	bne.n	8013416 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80133f4:	e002      	b.n	80133fc <create_name+0x48>
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	3301      	adds	r3, #1
 80133fa:	61bb      	str	r3, [r7, #24]
 80133fc:	693a      	ldr	r2, [r7, #16]
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	4413      	add	r3, r2
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2b2f      	cmp	r3, #47	@ 0x2f
 8013406:	d0f6      	beq.n	80133f6 <create_name+0x42>
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	4413      	add	r3, r2
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	2b5c      	cmp	r3, #92	@ 0x5c
 8013412:	d0f0      	beq.n	80133f6 <create_name+0x42>
			break;
 8013414:	e02a      	b.n	801346c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	2bfe      	cmp	r3, #254	@ 0xfe
 801341a:	d901      	bls.n	8013420 <create_name+0x6c>
 801341c:	2306      	movs	r3, #6
 801341e:	e1ca      	b.n	80137b6 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013420:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013422:	b2db      	uxtb	r3, r3
 8013424:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013428:	2101      	movs	r1, #1
 801342a:	4618      	mov	r0, r3
 801342c:	f002 fa9a 	bl	8015964 <ff_convert>
 8013430:	4603      	mov	r3, r0
 8013432:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013436:	2b00      	cmp	r3, #0
 8013438:	d101      	bne.n	801343e <create_name+0x8a>
 801343a:	2306      	movs	r3, #6
 801343c:	e1bb      	b.n	80137b6 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801343e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013440:	2b7f      	cmp	r3, #127	@ 0x7f
 8013442:	d809      	bhi.n	8013458 <create_name+0xa4>
 8013444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013446:	4619      	mov	r1, r3
 8013448:	489e      	ldr	r0, [pc, #632]	@ (80136c4 <create_name+0x310>)
 801344a:	f7fe fb90 	bl	8011b6e <chk_chr>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d001      	beq.n	8013458 <create_name+0xa4>
 8013454:	2306      	movs	r3, #6
 8013456:	e1ae      	b.n	80137b6 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	617a      	str	r2, [r7, #20]
 801345e:	005b      	lsls	r3, r3, #1
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	4413      	add	r3, r2
 8013464:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013466:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013468:	e7b4      	b.n	80133d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801346a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801346c:	693a      	ldr	r2, [r7, #16]
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	441a      	add	r2, r3
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013478:	2b1f      	cmp	r3, #31
 801347a:	d801      	bhi.n	8013480 <create_name+0xcc>
 801347c:	2304      	movs	r3, #4
 801347e:	e000      	b.n	8013482 <create_name+0xce>
 8013480:	2300      	movs	r3, #0
 8013482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	2b01      	cmp	r3, #1
 801348a:	d109      	bne.n	80134a0 <create_name+0xec>
 801348c:	697a      	ldr	r2, [r7, #20]
 801348e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013492:	4413      	add	r3, r2
 8013494:	005b      	lsls	r3, r3, #1
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	4413      	add	r3, r2
 801349a:	881b      	ldrh	r3, [r3, #0]
 801349c:	2b2e      	cmp	r3, #46	@ 0x2e
 801349e:	d015      	beq.n	80134cc <create_name+0x118>
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	2b02      	cmp	r3, #2
 80134a4:	d14d      	bne.n	8013542 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80134a6:	697a      	ldr	r2, [r7, #20]
 80134a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80134ac:	4413      	add	r3, r2
 80134ae:	005b      	lsls	r3, r3, #1
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	4413      	add	r3, r2
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80134b8:	d143      	bne.n	8013542 <create_name+0x18e>
 80134ba:	697a      	ldr	r2, [r7, #20]
 80134bc:	4b82      	ldr	r3, [pc, #520]	@ (80136c8 <create_name+0x314>)
 80134be:	4413      	add	r3, r2
 80134c0:	005b      	lsls	r3, r3, #1
 80134c2:	68fa      	ldr	r2, [r7, #12]
 80134c4:	4413      	add	r3, r2
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80134ca:	d13a      	bne.n	8013542 <create_name+0x18e>
		lfn[di] = 0;
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	4413      	add	r3, r2
 80134d4:	2200      	movs	r2, #0
 80134d6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80134d8:	2300      	movs	r3, #0
 80134da:	623b      	str	r3, [r7, #32]
 80134dc:	e00f      	b.n	80134fe <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80134de:	6a3a      	ldr	r2, [r7, #32]
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d201      	bcs.n	80134ea <create_name+0x136>
 80134e6:	212e      	movs	r1, #46	@ 0x2e
 80134e8:	e000      	b.n	80134ec <create_name+0x138>
 80134ea:	2120      	movs	r1, #32
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	6a3b      	ldr	r3, [r7, #32]
 80134f0:	4413      	add	r3, r2
 80134f2:	3324      	adds	r3, #36	@ 0x24
 80134f4:	460a      	mov	r2, r1
 80134f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80134f8:	6a3b      	ldr	r3, [r7, #32]
 80134fa:	3301      	adds	r3, #1
 80134fc:	623b      	str	r3, [r7, #32]
 80134fe:	6a3b      	ldr	r3, [r7, #32]
 8013500:	2b0a      	cmp	r3, #10
 8013502:	d9ec      	bls.n	80134de <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8013504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013508:	f043 0320 	orr.w	r3, r3, #32
 801350c:	b2d9      	uxtb	r1, r3
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	6a3b      	ldr	r3, [r7, #32]
 8013512:	4413      	add	r3, r2
 8013514:	3324      	adds	r3, #36	@ 0x24
 8013516:	460a      	mov	r2, r1
 8013518:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801351a:	2300      	movs	r3, #0
 801351c:	e14b      	b.n	80137b6 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801351e:	697a      	ldr	r2, [r7, #20]
 8013520:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013524:	4413      	add	r3, r2
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	4413      	add	r3, r2
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013532:	2b20      	cmp	r3, #32
 8013534:	d002      	beq.n	801353c <create_name+0x188>
 8013536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013538:	2b2e      	cmp	r3, #46	@ 0x2e
 801353a:	d106      	bne.n	801354a <create_name+0x196>
		di--;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	3b01      	subs	r3, #1
 8013540:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1ea      	bne.n	801351e <create_name+0x16a>
 8013548:	e000      	b.n	801354c <create_name+0x198>
		if (w != ' ' && w != '.') break;
 801354a:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	2200      	movs	r2, #0
 8013556:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <create_name+0x1ae>
 801355e:	2306      	movs	r3, #6
 8013560:	e129      	b.n	80137b6 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	3324      	adds	r3, #36	@ 0x24
 8013566:	220b      	movs	r2, #11
 8013568:	2120      	movs	r1, #32
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fabd 	bl	8011aea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013570:	2300      	movs	r3, #0
 8013572:	61bb      	str	r3, [r7, #24]
 8013574:	e002      	b.n	801357c <create_name+0x1c8>
 8013576:	69bb      	ldr	r3, [r7, #24]
 8013578:	3301      	adds	r3, #1
 801357a:	61bb      	str	r3, [r7, #24]
 801357c:	69bb      	ldr	r3, [r7, #24]
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	4413      	add	r3, r2
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	2b20      	cmp	r3, #32
 8013588:	d0f5      	beq.n	8013576 <create_name+0x1c2>
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	005b      	lsls	r3, r3, #1
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	4413      	add	r3, r2
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	2b2e      	cmp	r3, #46	@ 0x2e
 8013596:	d0ee      	beq.n	8013576 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d009      	beq.n	80135b2 <create_name+0x1fe>
 801359e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135a2:	f043 0303 	orr.w	r3, r3, #3
 80135a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80135aa:	e002      	b.n	80135b2 <create_name+0x1fe>
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	3b01      	subs	r3, #1
 80135b0:	617b      	str	r3, [r7, #20]
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d009      	beq.n	80135cc <create_name+0x218>
 80135b8:	697a      	ldr	r2, [r7, #20]
 80135ba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80135be:	4413      	add	r3, r2
 80135c0:	005b      	lsls	r3, r3, #1
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	4413      	add	r3, r2
 80135c6:	881b      	ldrh	r3, [r3, #0]
 80135c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80135ca:	d1ef      	bne.n	80135ac <create_name+0x1f8>

	i = b = 0; ni = 8;
 80135cc:	2300      	movs	r3, #0
 80135ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80135d2:	2300      	movs	r3, #0
 80135d4:	623b      	str	r3, [r7, #32]
 80135d6:	2308      	movs	r3, #8
 80135d8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	1c5a      	adds	r2, r3, #1
 80135de:	61ba      	str	r2, [r7, #24]
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	68fa      	ldr	r2, [r7, #12]
 80135e4:	4413      	add	r3, r2
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80135ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 8098 	beq.w	8013722 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80135f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135f4:	2b20      	cmp	r3, #32
 80135f6:	d006      	beq.n	8013606 <create_name+0x252>
 80135f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80135fc:	d10a      	bne.n	8013614 <create_name+0x260>
 80135fe:	69ba      	ldr	r2, [r7, #24]
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	429a      	cmp	r2, r3
 8013604:	d006      	beq.n	8013614 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8013606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801360a:	f043 0303 	orr.w	r3, r3, #3
 801360e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013612:	e085      	b.n	8013720 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013614:	6a3a      	ldr	r2, [r7, #32]
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	429a      	cmp	r2, r3
 801361a:	d203      	bcs.n	8013624 <create_name+0x270>
 801361c:	69ba      	ldr	r2, [r7, #24]
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	429a      	cmp	r2, r3
 8013622:	d123      	bne.n	801366c <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	2b0b      	cmp	r3, #11
 8013628:	d106      	bne.n	8013638 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801362a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801362e:	f043 0303 	orr.w	r3, r3, #3
 8013632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013636:	e077      	b.n	8013728 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013638:	69ba      	ldr	r2, [r7, #24]
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	429a      	cmp	r2, r3
 801363e:	d005      	beq.n	801364c <create_name+0x298>
 8013640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013644:	f043 0303 	orr.w	r3, r3, #3
 8013648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801364c:	69ba      	ldr	r2, [r7, #24]
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	429a      	cmp	r2, r3
 8013652:	d868      	bhi.n	8013726 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	61bb      	str	r3, [r7, #24]
 8013658:	2308      	movs	r3, #8
 801365a:	623b      	str	r3, [r7, #32]
 801365c:	230b      	movs	r3, #11
 801365e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013664:	009b      	lsls	r3, r3, #2
 8013666:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801366a:	e059      	b.n	8013720 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801366c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801366e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013670:	d914      	bls.n	801369c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013674:	2100      	movs	r1, #0
 8013676:	4618      	mov	r0, r3
 8013678:	f002 f974 	bl	8015964 <ff_convert>
 801367c:	4603      	mov	r3, r0
 801367e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013682:	2b00      	cmp	r3, #0
 8013684:	d004      	beq.n	8013690 <create_name+0x2dc>
 8013686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013688:	3b80      	subs	r3, #128	@ 0x80
 801368a:	4a10      	ldr	r2, [pc, #64]	@ (80136cc <create_name+0x318>)
 801368c:	5cd3      	ldrb	r3, [r2, r3]
 801368e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013694:	f043 0302 	orr.w	r3, r3, #2
 8013698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801369c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d007      	beq.n	80136b2 <create_name+0x2fe>
 80136a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136a4:	4619      	mov	r1, r3
 80136a6:	480a      	ldr	r0, [pc, #40]	@ (80136d0 <create_name+0x31c>)
 80136a8:	f7fe fa61 	bl	8011b6e <chk_chr>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d010      	beq.n	80136d4 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80136b2:	235f      	movs	r3, #95	@ 0x5f
 80136b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80136b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136ba:	f043 0303 	orr.w	r3, r3, #3
 80136be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136c2:	e023      	b.n	801370c <create_name+0x358>
 80136c4:	08018bd8 	.word	0x08018bd8
 80136c8:	7ffffffe 	.word	0x7ffffffe
 80136cc:	08018c60 	.word	0x08018c60
 80136d0:	08018be4 	.word	0x08018be4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80136d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136d6:	2b40      	cmp	r3, #64	@ 0x40
 80136d8:	d909      	bls.n	80136ee <create_name+0x33a>
 80136da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80136de:	d806      	bhi.n	80136ee <create_name+0x33a>
					b |= 2;
 80136e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136e4:	f043 0302 	orr.w	r3, r3, #2
 80136e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80136ec:	e00e      	b.n	801370c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80136ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136f0:	2b60      	cmp	r3, #96	@ 0x60
 80136f2:	d90b      	bls.n	801370c <create_name+0x358>
 80136f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136f6:	2b7a      	cmp	r3, #122	@ 0x7a
 80136f8:	d808      	bhi.n	801370c <create_name+0x358>
						b |= 1; w -= 0x20;
 80136fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136fe:	f043 0301 	orr.w	r3, r3, #1
 8013702:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013708:	3b20      	subs	r3, #32
 801370a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801370c:	6a3b      	ldr	r3, [r7, #32]
 801370e:	1c5a      	adds	r2, r3, #1
 8013710:	623a      	str	r2, [r7, #32]
 8013712:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013714:	b2d1      	uxtb	r1, r2
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	4413      	add	r3, r2
 801371a:	460a      	mov	r2, r1
 801371c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013720:	e75b      	b.n	80135da <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8013722:	bf00      	nop
 8013724:	e000      	b.n	8013728 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8013726:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801372e:	2be5      	cmp	r3, #229	@ 0xe5
 8013730:	d103      	bne.n	801373a <create_name+0x386>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2205      	movs	r2, #5
 8013736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	2b08      	cmp	r3, #8
 801373e:	d104      	bne.n	801374a <create_name+0x396>
 8013740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801374a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801374e:	f003 030c 	and.w	r3, r3, #12
 8013752:	2b0c      	cmp	r3, #12
 8013754:	d005      	beq.n	8013762 <create_name+0x3ae>
 8013756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801375a:	f003 0303 	and.w	r3, r3, #3
 801375e:	2b03      	cmp	r3, #3
 8013760:	d105      	bne.n	801376e <create_name+0x3ba>
 8013762:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013766:	f043 0302 	orr.w	r3, r3, #2
 801376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801376e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013772:	f003 0302 	and.w	r3, r3, #2
 8013776:	2b00      	cmp	r3, #0
 8013778:	d117      	bne.n	80137aa <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801377a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801377e:	f003 0303 	and.w	r3, r3, #3
 8013782:	2b01      	cmp	r3, #1
 8013784:	d105      	bne.n	8013792 <create_name+0x3de>
 8013786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801378a:	f043 0310 	orr.w	r3, r3, #16
 801378e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013792:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013796:	f003 030c 	and.w	r3, r3, #12
 801379a:	2b04      	cmp	r3, #4
 801379c:	d105      	bne.n	80137aa <create_name+0x3f6>
 801379e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137a2:	f043 0308 	orr.w	r3, r3, #8
 80137a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80137b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80137b4:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3728      	adds	r7, #40	@ 0x28
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop

080137c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80137da:	d00b      	beq.n	80137f4 <follow_path+0x34>
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80137e2:	d007      	beq.n	80137f4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	69da      	ldr	r2, [r3, #28]
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	609a      	str	r2, [r3, #8]
 80137ec:	e00d      	b.n	801380a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	3301      	adds	r3, #1
 80137f2:	603b      	str	r3, [r7, #0]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80137fa:	d0f8      	beq.n	80137ee <follow_path+0x2e>
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	2b5c      	cmp	r3, #92	@ 0x5c
 8013802:	d0f4      	beq.n	80137ee <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	2200      	movs	r2, #0
 8013808:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	2b1f      	cmp	r3, #31
 8013810:	d80a      	bhi.n	8013828 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2280      	movs	r2, #128	@ 0x80
 8013816:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801381a:	2100      	movs	r1, #0
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f7fe ff50 	bl	80126c2 <dir_sdi>
 8013822:	4603      	mov	r3, r0
 8013824:	75fb      	strb	r3, [r7, #23]
 8013826:	e05b      	b.n	80138e0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013828:	463b      	mov	r3, r7
 801382a:	4619      	mov	r1, r3
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7ff fdc1 	bl	80133b4 <create_name>
 8013832:	4603      	mov	r3, r0
 8013834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013836:	7dfb      	ldrb	r3, [r7, #23]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d14c      	bne.n	80138d6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff fbb7 	bl	8012fb0 <dir_find>
 8013842:	4603      	mov	r3, r0
 8013844:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801384c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801384e:	7dfb      	ldrb	r3, [r7, #23]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d01b      	beq.n	801388c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013854:	7dfb      	ldrb	r3, [r7, #23]
 8013856:	2b04      	cmp	r3, #4
 8013858:	d13f      	bne.n	80138da <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801385a:	7afb      	ldrb	r3, [r7, #11]
 801385c:	f003 0320 	and.w	r3, r3, #32
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00b      	beq.n	801387c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013864:	7afb      	ldrb	r3, [r7, #11]
 8013866:	f003 0304 	and.w	r3, r3, #4
 801386a:	2b00      	cmp	r3, #0
 801386c:	d031      	beq.n	80138d2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2280      	movs	r2, #128	@ 0x80
 8013872:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8013876:	2300      	movs	r3, #0
 8013878:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801387a:	e02e      	b.n	80138da <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801387c:	7afb      	ldrb	r3, [r7, #11]
 801387e:	f003 0304 	and.w	r3, r3, #4
 8013882:	2b00      	cmp	r3, #0
 8013884:	d129      	bne.n	80138da <follow_path+0x11a>
 8013886:	2305      	movs	r3, #5
 8013888:	75fb      	strb	r3, [r7, #23]
				break;
 801388a:	e026      	b.n	80138da <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801388c:	7afb      	ldrb	r3, [r7, #11]
 801388e:	f003 0304 	and.w	r3, r3, #4
 8013892:	2b00      	cmp	r3, #0
 8013894:	d123      	bne.n	80138de <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	799b      	ldrb	r3, [r3, #6]
 801389a:	f003 0310 	and.w	r3, r3, #16
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d102      	bne.n	80138a8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80138a2:	2305      	movs	r3, #5
 80138a4:	75fb      	strb	r3, [r7, #23]
 80138a6:	e01b      	b.n	80138e0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	695b      	ldr	r3, [r3, #20]
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	8992      	ldrh	r2, [r2, #12]
 80138b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80138ba:	fb00 f202 	mul.w	r2, r0, r2
 80138be:	1a9b      	subs	r3, r3, r2
 80138c0:	440b      	add	r3, r1
 80138c2:	4619      	mov	r1, r3
 80138c4:	68f8      	ldr	r0, [r7, #12]
 80138c6:	f7ff f8a2 	bl	8012a0e <ld_clust>
 80138ca:	4602      	mov	r2, r0
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	609a      	str	r2, [r3, #8]
 80138d0:	e7aa      	b.n	8013828 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80138d2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80138d4:	e7a8      	b.n	8013828 <follow_path+0x68>
			if (res != FR_OK) break;
 80138d6:	bf00      	nop
 80138d8:	e002      	b.n	80138e0 <follow_path+0x120>
				break;
 80138da:	bf00      	nop
 80138dc:	e000      	b.n	80138e0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80138de:	bf00      	nop
			}
		}
	}

	return res;
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3718      	adds	r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}

080138ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80138ea:	b480      	push	{r7}
 80138ec:	b087      	sub	sp, #28
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80138f2:	f04f 33ff 	mov.w	r3, #4294967295
 80138f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d031      	beq.n	8013964 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	e002      	b.n	801390e <get_ldnumber+0x24>
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	3301      	adds	r3, #1
 801390c:	617b      	str	r3, [r7, #20]
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	2b1f      	cmp	r3, #31
 8013914:	d903      	bls.n	801391e <get_ldnumber+0x34>
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	2b3a      	cmp	r3, #58	@ 0x3a
 801391c:	d1f4      	bne.n	8013908 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	2b3a      	cmp	r3, #58	@ 0x3a
 8013924:	d11c      	bne.n	8013960 <get_ldnumber+0x76>
			tp = *path;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	1c5a      	adds	r2, r3, #1
 8013930:	60fa      	str	r2, [r7, #12]
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	3b30      	subs	r3, #48	@ 0x30
 8013936:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	2b09      	cmp	r3, #9
 801393c:	d80e      	bhi.n	801395c <get_ldnumber+0x72>
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	429a      	cmp	r2, r3
 8013944:	d10a      	bne.n	801395c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d107      	bne.n	801395c <get_ldnumber+0x72>
					vol = (int)i;
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	3301      	adds	r3, #1
 8013954:	617b      	str	r3, [r7, #20]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	697a      	ldr	r2, [r7, #20]
 801395a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	e002      	b.n	8013966 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013960:	2300      	movs	r3, #0
 8013962:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013964:	693b      	ldr	r3, [r7, #16]
}
 8013966:	4618      	mov	r0, r3
 8013968:	371c      	adds	r7, #28
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr
	...

08013974 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	70da      	strb	r2, [r3, #3]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f04f 32ff 	mov.w	r2, #4294967295
 801398a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801398c:	6839      	ldr	r1, [r7, #0]
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f7fe fab8 	bl	8011f04 <move_window>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d001      	beq.n	801399e <check_fs+0x2a>
 801399a:	2304      	movs	r3, #4
 801399c:	e038      	b.n	8013a10 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	333c      	adds	r3, #60	@ 0x3c
 80139a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fd fffc 	bl	80119a4 <ld_word>
 80139ac:	4603      	mov	r3, r0
 80139ae:	461a      	mov	r2, r3
 80139b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d001      	beq.n	80139bc <check_fs+0x48>
 80139b8:	2303      	movs	r3, #3
 80139ba:	e029      	b.n	8013a10 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80139c2:	2be9      	cmp	r3, #233	@ 0xe9
 80139c4:	d009      	beq.n	80139da <check_fs+0x66>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80139cc:	2beb      	cmp	r3, #235	@ 0xeb
 80139ce:	d11e      	bne.n	8013a0e <check_fs+0x9a>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80139d6:	2b90      	cmp	r3, #144	@ 0x90
 80139d8:	d119      	bne.n	8013a0e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	333c      	adds	r3, #60	@ 0x3c
 80139de:	3336      	adds	r3, #54	@ 0x36
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fd fff7 	bl	80119d4 <ld_dword>
 80139e6:	4603      	mov	r3, r0
 80139e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80139ec:	4a0a      	ldr	r2, [pc, #40]	@ (8013a18 <check_fs+0xa4>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d101      	bne.n	80139f6 <check_fs+0x82>
 80139f2:	2300      	movs	r3, #0
 80139f4:	e00c      	b.n	8013a10 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	333c      	adds	r3, #60	@ 0x3c
 80139fa:	3352      	adds	r3, #82	@ 0x52
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fd ffe9 	bl	80119d4 <ld_dword>
 8013a02:	4603      	mov	r3, r0
 8013a04:	4a05      	ldr	r2, [pc, #20]	@ (8013a1c <check_fs+0xa8>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d101      	bne.n	8013a0e <check_fs+0x9a>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	e000      	b.n	8013a10 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013a0e:	2302      	movs	r3, #2
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	00544146 	.word	0x00544146
 8013a1c:	33544146 	.word	0x33544146

08013a20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b096      	sub	sp, #88	@ 0x58
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	2200      	movs	r2, #0
 8013a32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f7ff ff58 	bl	80138ea <get_ldnumber>
 8013a3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	da01      	bge.n	8013a46 <find_volume+0x26>
 8013a42:	230b      	movs	r3, #11
 8013a44:	e268      	b.n	8013f18 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013a46:	4a9f      	ldr	r2, [pc, #636]	@ (8013cc4 <find_volume+0x2a4>)
 8013a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d101      	bne.n	8013a5a <find_volume+0x3a>
 8013a56:	230c      	movs	r3, #12
 8013a58:	e25e      	b.n	8013f18 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	f023 0301 	bic.w	r3, r3, #1
 8013a66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d01a      	beq.n	8013aa6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a72:	785b      	ldrb	r3, [r3, #1]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fd fef5 	bl	8011864 <disk_status>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013a80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013a84:	f003 0301 	and.w	r3, r3, #1
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d10c      	bne.n	8013aa6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013a8c:	79fb      	ldrb	r3, [r7, #7]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d007      	beq.n	8013aa2 <find_volume+0x82>
 8013a92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013a96:	f003 0304 	and.w	r3, r3, #4
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013a9e:	230a      	movs	r3, #10
 8013aa0:	e23a      	b.n	8013f18 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	e238      	b.n	8013f18 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013aae:	b2da      	uxtb	r2, r3
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab6:	785b      	ldrb	r3, [r3, #1]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7fd feed 	bl	8011898 <disk_initialize>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013ac8:	f003 0301 	and.w	r3, r3, #1
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d001      	beq.n	8013ad4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013ad0:	2303      	movs	r3, #3
 8013ad2:	e221      	b.n	8013f18 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013ad4:	79fb      	ldrb	r3, [r7, #7]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d007      	beq.n	8013aea <find_volume+0xca>
 8013ada:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013ade:	f003 0304 	and.w	r3, r3, #4
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d001      	beq.n	8013aea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013ae6:	230a      	movs	r3, #10
 8013ae8:	e216      	b.n	8013f18 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aec:	7858      	ldrb	r0, [r3, #1]
 8013aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af0:	330c      	adds	r3, #12
 8013af2:	461a      	mov	r2, r3
 8013af4:	2102      	movs	r1, #2
 8013af6:	f7fd ff37 	bl	8011968 <disk_ioctl>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <find_volume+0xe4>
 8013b00:	2301      	movs	r3, #1
 8013b02:	e209      	b.n	8013f18 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b06:	899b      	ldrh	r3, [r3, #12]
 8013b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b0c:	d80d      	bhi.n	8013b2a <find_volume+0x10a>
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b10:	899b      	ldrh	r3, [r3, #12]
 8013b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b16:	d308      	bcc.n	8013b2a <find_volume+0x10a>
 8013b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1a:	899b      	ldrh	r3, [r3, #12]
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b20:	899b      	ldrh	r3, [r3, #12]
 8013b22:	3b01      	subs	r3, #1
 8013b24:	4013      	ands	r3, r2
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <find_volume+0x10e>
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e1f4      	b.n	8013f18 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013b32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013b34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b36:	f7ff ff1d 	bl	8013974 <check_fs>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b44:	2b02      	cmp	r3, #2
 8013b46:	d149      	bne.n	8013bdc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b48:	2300      	movs	r3, #0
 8013b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013b4c:	e01e      	b.n	8013b8c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b50:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b56:	011b      	lsls	r3, r3, #4
 8013b58:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013b5c:	4413      	add	r3, r2
 8013b5e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b62:	3304      	adds	r3, #4
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d006      	beq.n	8013b78 <find_volume+0x158>
 8013b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b6c:	3308      	adds	r3, #8
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fd ff30 	bl	80119d4 <ld_dword>
 8013b74:	4602      	mov	r2, r0
 8013b76:	e000      	b.n	8013b7a <find_volume+0x15a>
 8013b78:	2200      	movs	r2, #0
 8013b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	3358      	adds	r3, #88	@ 0x58
 8013b80:	443b      	add	r3, r7
 8013b82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b88:	3301      	adds	r3, #1
 8013b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	d9dd      	bls.n	8013b4e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013b92:	2300      	movs	r3, #0
 8013b94:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d002      	beq.n	8013ba2 <find_volume+0x182>
 8013b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b9e:	3b01      	subs	r3, #1
 8013ba0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	3358      	adds	r3, #88	@ 0x58
 8013ba8:	443b      	add	r3, r7
 8013baa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013bae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d005      	beq.n	8013bc2 <find_volume+0x1a2>
 8013bb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013bb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013bba:	f7ff fedb 	bl	8013974 <check_fs>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	e000      	b.n	8013bc4 <find_volume+0x1a4>
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d905      	bls.n	8013bdc <find_volume+0x1bc>
 8013bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8013bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013bd8:	2b03      	cmp	r3, #3
 8013bda:	d9e2      	bls.n	8013ba2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013be0:	2b04      	cmp	r3, #4
 8013be2:	d101      	bne.n	8013be8 <find_volume+0x1c8>
 8013be4:	2301      	movs	r3, #1
 8013be6:	e197      	b.n	8013f18 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013be8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d901      	bls.n	8013bf4 <find_volume+0x1d4>
 8013bf0:	230d      	movs	r3, #13
 8013bf2:	e191      	b.n	8013f18 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf6:	333c      	adds	r3, #60	@ 0x3c
 8013bf8:	330b      	adds	r3, #11
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fd fed2 	bl	80119a4 <ld_word>
 8013c00:	4603      	mov	r3, r0
 8013c02:	461a      	mov	r2, r3
 8013c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c06:	899b      	ldrh	r3, [r3, #12]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d001      	beq.n	8013c10 <find_volume+0x1f0>
 8013c0c:	230d      	movs	r3, #13
 8013c0e:	e183      	b.n	8013f18 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	333c      	adds	r3, #60	@ 0x3c
 8013c14:	3316      	adds	r3, #22
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fd fec4 	bl	80119a4 <ld_word>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <find_volume+0x214>
 8013c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c28:	333c      	adds	r3, #60	@ 0x3c
 8013c2a:	3324      	adds	r3, #36	@ 0x24
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fd fed1 	bl	80119d4 <ld_dword>
 8013c32:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c38:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c3c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8013c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c46:	789b      	ldrb	r3, [r3, #2]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d005      	beq.n	8013c58 <find_volume+0x238>
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c4e:	789b      	ldrb	r3, [r3, #2]
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d001      	beq.n	8013c58 <find_volume+0x238>
 8013c54:	230d      	movs	r3, #13
 8013c56:	e15f      	b.n	8013f18 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c5a:	789b      	ldrb	r3, [r3, #2]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c60:	fb02 f303 	mul.w	r3, r2, r3
 8013c64:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c68:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c74:	895b      	ldrh	r3, [r3, #10]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d008      	beq.n	8013c8c <find_volume+0x26c>
 8013c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c7c:	895b      	ldrh	r3, [r3, #10]
 8013c7e:	461a      	mov	r2, r3
 8013c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c82:	895b      	ldrh	r3, [r3, #10]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	4013      	ands	r3, r2
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <find_volume+0x270>
 8013c8c:	230d      	movs	r3, #13
 8013c8e:	e143      	b.n	8013f18 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c92:	333c      	adds	r3, #60	@ 0x3c
 8013c94:	3311      	adds	r3, #17
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fd fe84 	bl	80119a4 <ld_word>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ca2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ca6:	891b      	ldrh	r3, [r3, #8]
 8013ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013caa:	8992      	ldrh	r2, [r2, #12]
 8013cac:	0952      	lsrs	r2, r2, #5
 8013cae:	b292      	uxth	r2, r2
 8013cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013cb4:	fb01 f202 	mul.w	r2, r1, r2
 8013cb8:	1a9b      	subs	r3, r3, r2
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d003      	beq.n	8013cc8 <find_volume+0x2a8>
 8013cc0:	230d      	movs	r3, #13
 8013cc2:	e129      	b.n	8013f18 <find_volume+0x4f8>
 8013cc4:	2400507c 	.word	0x2400507c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cca:	333c      	adds	r3, #60	@ 0x3c
 8013ccc:	3313      	adds	r3, #19
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fd fe68 	bl	80119a4 <ld_word>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <find_volume+0x2cc>
 8013cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce0:	333c      	adds	r3, #60	@ 0x3c
 8013ce2:	3320      	adds	r3, #32
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fd fe75 	bl	80119d4 <ld_dword>
 8013cea:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cee:	333c      	adds	r3, #60	@ 0x3c
 8013cf0:	330e      	adds	r3, #14
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7fd fe56 	bl	80119a4 <ld_word>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013cfc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <find_volume+0x2e6>
 8013d02:	230d      	movs	r3, #13
 8013d04:	e108      	b.n	8013f18 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013d06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d0a:	4413      	add	r3, r2
 8013d0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d0e:	8911      	ldrh	r1, [r2, #8]
 8013d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d12:	8992      	ldrh	r2, [r2, #12]
 8013d14:	0952      	lsrs	r2, r2, #5
 8013d16:	b292      	uxth	r2, r2
 8013d18:	fbb1 f2f2 	udiv	r2, r1, r2
 8013d1c:	b292      	uxth	r2, r2
 8013d1e:	4413      	add	r3, r2
 8013d20:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d201      	bcs.n	8013d2e <find_volume+0x30e>
 8013d2a:	230d      	movs	r3, #13
 8013d2c:	e0f4      	b.n	8013f18 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d36:	8952      	ldrh	r2, [r2, #10]
 8013d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d3c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d101      	bne.n	8013d48 <find_volume+0x328>
 8013d44:	230d      	movs	r3, #13
 8013d46:	e0e7      	b.n	8013f18 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013d48:	2303      	movs	r3, #3
 8013d4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d50:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d802      	bhi.n	8013d5e <find_volume+0x33e>
 8013d58:	2302      	movs	r3, #2
 8013d5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d60:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d802      	bhi.n	8013d6e <find_volume+0x34e>
 8013d68:	2301      	movs	r3, #1
 8013d6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d70:	1c9a      	adds	r2, r3, #2
 8013d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d74:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d7a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013d7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d80:	441a      	add	r2, r3
 8013d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d84:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013d86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d8a:	441a      	add	r2, r3
 8013d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d8e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013d90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013d94:	2b03      	cmp	r3, #3
 8013d96:	d11e      	bne.n	8013dd6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d9a:	333c      	adds	r3, #60	@ 0x3c
 8013d9c:	332a      	adds	r3, #42	@ 0x2a
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fd fe00 	bl	80119a4 <ld_word>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <find_volume+0x38e>
 8013daa:	230d      	movs	r3, #13
 8013dac:	e0b4      	b.n	8013f18 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013db0:	891b      	ldrh	r3, [r3, #8]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d001      	beq.n	8013dba <find_volume+0x39a>
 8013db6:	230d      	movs	r3, #13
 8013db8:	e0ae      	b.n	8013f18 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dbc:	333c      	adds	r3, #60	@ 0x3c
 8013dbe:	332c      	adds	r3, #44	@ 0x2c
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fd fe07 	bl	80119d4 <ld_dword>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dca:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dce:	6a1b      	ldr	r3, [r3, #32]
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dd4:	e01f      	b.n	8013e16 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd8:	891b      	ldrh	r3, [r3, #8]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <find_volume+0x3c2>
 8013dde:	230d      	movs	r3, #13
 8013de0:	e09a      	b.n	8013f18 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013de8:	441a      	add	r2, r3
 8013dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dec:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013dee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013df2:	2b02      	cmp	r3, #2
 8013df4:	d103      	bne.n	8013dfe <find_volume+0x3de>
 8013df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013df8:	6a1b      	ldr	r3, [r3, #32]
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	e00a      	b.n	8013e14 <find_volume+0x3f4>
 8013dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e00:	6a1a      	ldr	r2, [r3, #32]
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	085a      	lsrs	r2, r3, #1
 8013e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e0c:	6a1b      	ldr	r3, [r3, #32]
 8013e0e:	f003 0301 	and.w	r3, r3, #1
 8013e12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013e14:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e1c:	899b      	ldrh	r3, [r3, #12]
 8013e1e:	4619      	mov	r1, r3
 8013e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e22:	440b      	add	r3, r1
 8013e24:	3b01      	subs	r3, #1
 8013e26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013e28:	8989      	ldrh	r1, [r1, #12]
 8013e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d201      	bcs.n	8013e36 <find_volume+0x416>
 8013e32:	230d      	movs	r3, #13
 8013e34:	e070      	b.n	8013f18 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e38:	f04f 32ff 	mov.w	r2, #4294967295
 8013e3c:	619a      	str	r2, [r3, #24]
 8013e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e40:	699a      	ldr	r2, [r3, #24]
 8013e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e44:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8013e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e48:	2280      	movs	r2, #128	@ 0x80
 8013e4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e50:	2b03      	cmp	r3, #3
 8013e52:	d149      	bne.n	8013ee8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e56:	333c      	adds	r3, #60	@ 0x3c
 8013e58:	3330      	adds	r3, #48	@ 0x30
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fd fda2 	bl	80119a4 <ld_word>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d140      	bne.n	8013ee8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e68:	3301      	adds	r3, #1
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013e6e:	f7fe f849 	bl	8011f04 <move_window>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d137      	bne.n	8013ee8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8013e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e80:	333c      	adds	r3, #60	@ 0x3c
 8013e82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7fd fd8c 	bl	80119a4 <ld_word>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	461a      	mov	r2, r3
 8013e90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d127      	bne.n	8013ee8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9a:	333c      	adds	r3, #60	@ 0x3c
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7fd fd99 	bl	80119d4 <ld_dword>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8013f20 <find_volume+0x500>)
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d11e      	bne.n	8013ee8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eac:	333c      	adds	r3, #60	@ 0x3c
 8013eae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fd fd8e 	bl	80119d4 <ld_dword>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	4a1a      	ldr	r2, [pc, #104]	@ (8013f24 <find_volume+0x504>)
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d113      	bne.n	8013ee8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec2:	333c      	adds	r3, #60	@ 0x3c
 8013ec4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fd fd83 	bl	80119d4 <ld_dword>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ed2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ed6:	333c      	adds	r3, #60	@ 0x3c
 8013ed8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fd fd79 	bl	80119d4 <ld_dword>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ee6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013eee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8013f28 <find_volume+0x508>)
 8013ef2:	881b      	ldrh	r3, [r3, #0]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8013f28 <find_volume+0x508>)
 8013efa:	801a      	strh	r2, [r3, #0]
 8013efc:	4b0a      	ldr	r3, [pc, #40]	@ (8013f28 <find_volume+0x508>)
 8013efe:	881a      	ldrh	r2, [r3, #0]
 8013f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f02:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f06:	4a09      	ldr	r2, [pc, #36]	@ (8013f2c <find_volume+0x50c>)
 8013f08:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013f10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013f12:	f7fd ff8f 	bl	8011e34 <clear_lock>
#endif
	return FR_OK;
 8013f16:	2300      	movs	r3, #0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3758      	adds	r7, #88	@ 0x58
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	41615252 	.word	0x41615252
 8013f24:	61417272 	.word	0x61417272
 8013f28:	24005080 	.word	0x24005080
 8013f2c:	240050a4 	.word	0x240050a4

08013f30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013f3a:	2309      	movs	r3, #9
 8013f3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d01c      	beq.n	8013f7e <validate+0x4e>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d018      	beq.n	8013f7e <validate+0x4e>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d013      	beq.n	8013f7e <validate+0x4e>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	889a      	ldrh	r2, [r3, #4]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	88db      	ldrh	r3, [r3, #6]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d10c      	bne.n	8013f7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	785b      	ldrb	r3, [r3, #1]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fd fc7a 	bl	8011864 <disk_status>
 8013f70:	4603      	mov	r3, r0
 8013f72:	f003 0301 	and.w	r3, r3, #1
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <validate+0x4e>
			res = FR_OK;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013f7e:	7bfb      	ldrb	r3, [r7, #15]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d102      	bne.n	8013f8a <validate+0x5a>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	e000      	b.n	8013f8c <validate+0x5c>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	683a      	ldr	r2, [r7, #0]
 8013f8e:	6013      	str	r3, [r2, #0]
	return res;
 8013f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
	...

08013f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b088      	sub	sp, #32
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013fae:	f107 0310 	add.w	r3, r7, #16
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7ff fc99 	bl	80138ea <get_ldnumber>
 8013fb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	da01      	bge.n	8013fc4 <f_mount+0x28>
 8013fc0:	230b      	movs	r3, #11
 8013fc2:	e02b      	b.n	801401c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013fc4:	4a17      	ldr	r2, [pc, #92]	@ (8014024 <f_mount+0x88>)
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d005      	beq.n	8013fe0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013fd4:	69b8      	ldr	r0, [r7, #24]
 8013fd6:	f7fd ff2d 	bl	8011e34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013fda:	69bb      	ldr	r3, [r7, #24]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d002      	beq.n	8013fec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013fec:	68fa      	ldr	r2, [r7, #12]
 8013fee:	490d      	ldr	r1, [pc, #52]	@ (8014024 <f_mount+0x88>)
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d002      	beq.n	8014002 <f_mount+0x66>
 8013ffc:	79fb      	ldrb	r3, [r7, #7]
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d001      	beq.n	8014006 <f_mount+0x6a>
 8014002:	2300      	movs	r3, #0
 8014004:	e00a      	b.n	801401c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014006:	f107 010c 	add.w	r1, r7, #12
 801400a:	f107 0308 	add.w	r3, r7, #8
 801400e:	2200      	movs	r2, #0
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff fd05 	bl	8013a20 <find_volume>
 8014016:	4603      	mov	r3, r0
 8014018:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801401a:	7dfb      	ldrb	r3, [r7, #23]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3720      	adds	r7, #32
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	2400507c 	.word	0x2400507c

08014028 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b09a      	sub	sp, #104	@ 0x68
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	4613      	mov	r3, r2
 8014034:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <f_open+0x18>
 801403c:	2309      	movs	r3, #9
 801403e:	e1b7      	b.n	80143b0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014040:	79fb      	ldrb	r3, [r7, #7]
 8014042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014046:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014048:	79fa      	ldrb	r2, [r7, #7]
 801404a:	f107 0114 	add.w	r1, r7, #20
 801404e:	f107 0308 	add.w	r3, r7, #8
 8014052:	4618      	mov	r0, r3
 8014054:	f7ff fce4 	bl	8013a20 <find_volume>
 8014058:	4603      	mov	r3, r0
 801405a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801405e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014062:	2b00      	cmp	r3, #0
 8014064:	f040 819b 	bne.w	801439e <f_open+0x376>
		dj.obj.fs = fs;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801406c:	68ba      	ldr	r2, [r7, #8]
 801406e:	f107 0318 	add.w	r3, r7, #24
 8014072:	4611      	mov	r1, r2
 8014074:	4618      	mov	r0, r3
 8014076:	f7ff fba3 	bl	80137c0 <follow_path>
 801407a:	4603      	mov	r3, r0
 801407c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014084:	2b00      	cmp	r3, #0
 8014086:	d118      	bne.n	80140ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014088:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801408c:	b25b      	sxtb	r3, r3
 801408e:	2b00      	cmp	r3, #0
 8014090:	da03      	bge.n	801409a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014092:	2306      	movs	r3, #6
 8014094:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014098:	e00f      	b.n	80140ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801409a:	79fb      	ldrb	r3, [r7, #7]
 801409c:	2b01      	cmp	r3, #1
 801409e:	bf8c      	ite	hi
 80140a0:	2301      	movhi	r3, #1
 80140a2:	2300      	movls	r3, #0
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	461a      	mov	r2, r3
 80140a8:	f107 0318 	add.w	r3, r7, #24
 80140ac:	4611      	mov	r1, r2
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fd fd78 	bl	8011ba4 <chk_lock>
 80140b4:	4603      	mov	r3, r0
 80140b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80140ba:	79fb      	ldrb	r3, [r7, #7]
 80140bc:	f003 031c 	and.w	r3, r3, #28
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d07f      	beq.n	80141c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80140c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d017      	beq.n	80140fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80140cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80140d0:	2b04      	cmp	r3, #4
 80140d2:	d10e      	bne.n	80140f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80140d4:	f7fd fdc2 	bl	8011c5c <enq_lock>
 80140d8:	4603      	mov	r3, r0
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d006      	beq.n	80140ec <f_open+0xc4>
 80140de:	f107 0318 	add.w	r3, r7, #24
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ff f824 	bl	8013130 <dir_register>
 80140e8:	4603      	mov	r3, r0
 80140ea:	e000      	b.n	80140ee <f_open+0xc6>
 80140ec:	2312      	movs	r3, #18
 80140ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80140f2:	79fb      	ldrb	r3, [r7, #7]
 80140f4:	f043 0308 	orr.w	r3, r3, #8
 80140f8:	71fb      	strb	r3, [r7, #7]
 80140fa:	e010      	b.n	801411e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80140fc:	7fbb      	ldrb	r3, [r7, #30]
 80140fe:	f003 0311 	and.w	r3, r3, #17
 8014102:	2b00      	cmp	r3, #0
 8014104:	d003      	beq.n	801410e <f_open+0xe6>
					res = FR_DENIED;
 8014106:	2307      	movs	r3, #7
 8014108:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801410c:	e007      	b.n	801411e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801410e:	79fb      	ldrb	r3, [r7, #7]
 8014110:	f003 0304 	and.w	r3, r3, #4
 8014114:	2b00      	cmp	r3, #0
 8014116:	d002      	beq.n	801411e <f_open+0xf6>
 8014118:	2308      	movs	r3, #8
 801411a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801411e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014122:	2b00      	cmp	r3, #0
 8014124:	d168      	bne.n	80141f8 <f_open+0x1d0>
 8014126:	79fb      	ldrb	r3, [r7, #7]
 8014128:	f003 0308 	and.w	r3, r3, #8
 801412c:	2b00      	cmp	r3, #0
 801412e:	d063      	beq.n	80141f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8014130:	f7fc fe76 	bl	8010e20 <get_fattime>
 8014134:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014138:	330e      	adds	r3, #14
 801413a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801413c:	4618      	mov	r0, r3
 801413e:	f7fd fc87 	bl	8011a50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014144:	3316      	adds	r3, #22
 8014146:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014148:	4618      	mov	r0, r3
 801414a:	f7fd fc81 	bl	8011a50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014150:	330b      	adds	r3, #11
 8014152:	2220      	movs	r2, #32
 8014154:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801415a:	4611      	mov	r1, r2
 801415c:	4618      	mov	r0, r3
 801415e:	f7fe fc56 	bl	8012a0e <ld_clust>
 8014162:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014168:	2200      	movs	r2, #0
 801416a:	4618      	mov	r0, r3
 801416c:	f7fe fc6e 	bl	8012a4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014172:	331c      	adds	r3, #28
 8014174:	2100      	movs	r1, #0
 8014176:	4618      	mov	r0, r3
 8014178:	f7fd fc6a 	bl	8011a50 <st_dword>
					fs->wflag = 1;
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	2201      	movs	r2, #1
 8014180:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014184:	2b00      	cmp	r3, #0
 8014186:	d037      	beq.n	80141f8 <f_open+0x1d0>
						dw = fs->winsect;
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801418c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801418e:	f107 0318 	add.w	r3, r7, #24
 8014192:	2200      	movs	r2, #0
 8014194:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014196:	4618      	mov	r0, r3
 8014198:	f7fe f95e 	bl	8012458 <remove_chain>
 801419c:	4603      	mov	r3, r0
 801419e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80141a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d126      	bne.n	80141f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fd fea8 	bl	8011f04 <move_window>
 80141b4:	4603      	mov	r3, r0
 80141b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80141be:	3a01      	subs	r2, #1
 80141c0:	615a      	str	r2, [r3, #20]
 80141c2:	e019      	b.n	80141f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80141c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d115      	bne.n	80141f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80141cc:	7fbb      	ldrb	r3, [r7, #30]
 80141ce:	f003 0310 	and.w	r3, r3, #16
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d003      	beq.n	80141de <f_open+0x1b6>
					res = FR_NO_FILE;
 80141d6:	2304      	movs	r3, #4
 80141d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80141dc:	e00c      	b.n	80141f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80141de:	79fb      	ldrb	r3, [r7, #7]
 80141e0:	f003 0302 	and.w	r3, r3, #2
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d007      	beq.n	80141f8 <f_open+0x1d0>
 80141e8:	7fbb      	ldrb	r3, [r7, #30]
 80141ea:	f003 0301 	and.w	r3, r3, #1
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <f_open+0x1d0>
						res = FR_DENIED;
 80141f2:	2307      	movs	r3, #7
 80141f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80141f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d126      	bne.n	801424e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	f003 0308 	and.w	r3, r3, #8
 8014206:	2b00      	cmp	r3, #0
 8014208:	d003      	beq.n	8014212 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801420a:	79fb      	ldrb	r3, [r7, #7]
 801420c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014210:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801421a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014220:	79fb      	ldrb	r3, [r7, #7]
 8014222:	2b01      	cmp	r3, #1
 8014224:	bf8c      	ite	hi
 8014226:	2301      	movhi	r3, #1
 8014228:	2300      	movls	r3, #0
 801422a:	b2db      	uxtb	r3, r3
 801422c:	461a      	mov	r2, r3
 801422e:	f107 0318 	add.w	r3, r7, #24
 8014232:	4611      	mov	r1, r2
 8014234:	4618      	mov	r0, r3
 8014236:	f7fd fd33 	bl	8011ca0 <inc_lock>
 801423a:	4602      	mov	r2, r0
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	691b      	ldr	r3, [r3, #16]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d102      	bne.n	801424e <f_open+0x226>
 8014248:	2302      	movs	r3, #2
 801424a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801424e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014252:	2b00      	cmp	r3, #0
 8014254:	f040 80a3 	bne.w	801439e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801425c:	4611      	mov	r1, r2
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe fbd5 	bl	8012a0e <ld_clust>
 8014264:	4602      	mov	r2, r0
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801426c:	331c      	adds	r3, #28
 801426e:	4618      	mov	r0, r3
 8014270:	f7fd fbb0 	bl	80119d4 <ld_dword>
 8014274:	4602      	mov	r2, r0
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2200      	movs	r2, #0
 801427e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	88da      	ldrh	r2, [r3, #6]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	79fa      	ldrb	r2, [r7, #7]
 8014292:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2200      	movs	r2, #0
 8014298:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2200      	movs	r2, #0
 801429e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2200      	movs	r2, #0
 80142a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	3330      	adds	r3, #48	@ 0x30
 80142aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80142ae:	2100      	movs	r1, #0
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fd fc1a 	bl	8011aea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	f003 0320 	and.w	r3, r3, #32
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d06e      	beq.n	801439e <f_open+0x376>
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d06a      	beq.n	801439e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	68da      	ldr	r2, [r3, #12]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	895b      	ldrh	r3, [r3, #10]
 80142d4:	461a      	mov	r2, r3
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	899b      	ldrh	r3, [r3, #12]
 80142da:	fb02 f303 	mul.w	r3, r2, r3
 80142de:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80142ec:	e016      	b.n	801431c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fd fec3 	bl	801207e <get_fat>
 80142f8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80142fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d802      	bhi.n	8014306 <f_open+0x2de>
 8014300:	2302      	movs	r3, #2
 8014302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801430c:	d102      	bne.n	8014314 <f_open+0x2ec>
 801430e:	2301      	movs	r3, #1
 8014310:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014314:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801431c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014320:	2b00      	cmp	r3, #0
 8014322:	d103      	bne.n	801432c <f_open+0x304>
 8014324:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014328:	429a      	cmp	r2, r3
 801432a:	d8e0      	bhi.n	80142ee <f_open+0x2c6>
				}
				fp->clust = clst;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014330:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014332:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014336:	2b00      	cmp	r3, #0
 8014338:	d131      	bne.n	801439e <f_open+0x376>
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	899b      	ldrh	r3, [r3, #12]
 801433e:	461a      	mov	r2, r3
 8014340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014342:	fbb3 f1f2 	udiv	r1, r3, r2
 8014346:	fb01 f202 	mul.w	r2, r1, r2
 801434a:	1a9b      	subs	r3, r3, r2
 801434c:	2b00      	cmp	r3, #0
 801434e:	d026      	beq.n	801439e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014354:	4618      	mov	r0, r3
 8014356:	f7fd fe73 	bl	8012040 <clust2sect>
 801435a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801435c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801435e:	2b00      	cmp	r3, #0
 8014360:	d103      	bne.n	801436a <f_open+0x342>
						res = FR_INT_ERR;
 8014362:	2302      	movs	r3, #2
 8014364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014368:	e019      	b.n	801439e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	899b      	ldrh	r3, [r3, #12]
 801436e:	461a      	mov	r2, r3
 8014370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014372:	fbb3 f2f2 	udiv	r2, r3, r2
 8014376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014378:	441a      	add	r2, r3
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	7858      	ldrb	r0, [r3, #1]
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6a1a      	ldr	r2, [r3, #32]
 801438c:	2301      	movs	r3, #1
 801438e:	f7fd faab 	bl	80118e8 <disk_read>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <f_open+0x376>
 8014398:	2301      	movs	r3, #1
 801439a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801439e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d002      	beq.n	80143ac <f_open+0x384>
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	2200      	movs	r2, #0
 80143aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80143ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3768      	adds	r7, #104	@ 0x68
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b08e      	sub	sp, #56	@ 0x38
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	607a      	str	r2, [r7, #4]
 80143c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2200      	movs	r2, #0
 80143ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f107 0214 	add.w	r2, r7, #20
 80143d6:	4611      	mov	r1, r2
 80143d8:	4618      	mov	r0, r3
 80143da:	f7ff fda9 	bl	8013f30 <validate>
 80143de:	4603      	mov	r3, r0
 80143e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80143e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d107      	bne.n	80143fc <f_read+0x44>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	7d5b      	ldrb	r3, [r3, #21]
 80143f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80143f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <f_read+0x4a>
 80143fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014400:	e135      	b.n	801466e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	7d1b      	ldrb	r3, [r3, #20]
 8014406:	f003 0301 	and.w	r3, r3, #1
 801440a:	2b00      	cmp	r3, #0
 801440c:	d101      	bne.n	8014412 <f_read+0x5a>
 801440e:	2307      	movs	r3, #7
 8014410:	e12d      	b.n	801466e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	68da      	ldr	r2, [r3, #12]
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	699b      	ldr	r3, [r3, #24]
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	6a3b      	ldr	r3, [r7, #32]
 8014422:	429a      	cmp	r2, r3
 8014424:	f240 811e 	bls.w	8014664 <f_read+0x2ac>
 8014428:	6a3b      	ldr	r3, [r7, #32]
 801442a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801442c:	e11a      	b.n	8014664 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	699b      	ldr	r3, [r3, #24]
 8014432:	697a      	ldr	r2, [r7, #20]
 8014434:	8992      	ldrh	r2, [r2, #12]
 8014436:	fbb3 f1f2 	udiv	r1, r3, r2
 801443a:	fb01 f202 	mul.w	r2, r1, r2
 801443e:	1a9b      	subs	r3, r3, r2
 8014440:	2b00      	cmp	r3, #0
 8014442:	f040 80d5 	bne.w	80145f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	697a      	ldr	r2, [r7, #20]
 801444c:	8992      	ldrh	r2, [r2, #12]
 801444e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	8952      	ldrh	r2, [r2, #10]
 8014456:	3a01      	subs	r2, #1
 8014458:	4013      	ands	r3, r2
 801445a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d12f      	bne.n	80144c2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	699b      	ldr	r3, [r3, #24]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d103      	bne.n	8014472 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	689b      	ldr	r3, [r3, #8]
 801446e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014470:	e013      	b.n	801449a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014476:	2b00      	cmp	r3, #0
 8014478:	d007      	beq.n	801448a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	699b      	ldr	r3, [r3, #24]
 801447e:	4619      	mov	r1, r3
 8014480:	68f8      	ldr	r0, [r7, #12]
 8014482:	f7fe f8e6 	bl	8012652 <clmt_clust>
 8014486:	6338      	str	r0, [r7, #48]	@ 0x30
 8014488:	e007      	b.n	801449a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801448a:	68fa      	ldr	r2, [r7, #12]
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	69db      	ldr	r3, [r3, #28]
 8014490:	4619      	mov	r1, r3
 8014492:	4610      	mov	r0, r2
 8014494:	f7fd fdf3 	bl	801207e <get_fat>
 8014498:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801449c:	2b01      	cmp	r3, #1
 801449e:	d804      	bhi.n	80144aa <f_read+0xf2>
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	2202      	movs	r2, #2
 80144a4:	755a      	strb	r2, [r3, #21]
 80144a6:	2302      	movs	r3, #2
 80144a8:	e0e1      	b.n	801466e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144b0:	d104      	bne.n	80144bc <f_read+0x104>
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	2201      	movs	r2, #1
 80144b6:	755a      	strb	r2, [r3, #21]
 80144b8:	2301      	movs	r3, #1
 80144ba:	e0d8      	b.n	801466e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80144c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80144c2:	697a      	ldr	r2, [r7, #20]
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	69db      	ldr	r3, [r3, #28]
 80144c8:	4619      	mov	r1, r3
 80144ca:	4610      	mov	r0, r2
 80144cc:	f7fd fdb8 	bl	8012040 <clust2sect>
 80144d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d104      	bne.n	80144e2 <f_read+0x12a>
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2202      	movs	r2, #2
 80144dc:	755a      	strb	r2, [r3, #21]
 80144de:	2302      	movs	r3, #2
 80144e0:	e0c5      	b.n	801466e <f_read+0x2b6>
			sect += csect;
 80144e2:	69ba      	ldr	r2, [r7, #24]
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	4413      	add	r3, r2
 80144e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	899b      	ldrh	r3, [r3, #12]
 80144ee:	461a      	mov	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80144f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80144f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d041      	beq.n	8014582 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80144fe:	69fa      	ldr	r2, [r7, #28]
 8014500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014502:	4413      	add	r3, r2
 8014504:	697a      	ldr	r2, [r7, #20]
 8014506:	8952      	ldrh	r2, [r2, #10]
 8014508:	4293      	cmp	r3, r2
 801450a:	d905      	bls.n	8014518 <f_read+0x160>
					cc = fs->csize - csect;
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	895b      	ldrh	r3, [r3, #10]
 8014510:	461a      	mov	r2, r3
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	7858      	ldrb	r0, [r3, #1]
 801451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801451e:	69ba      	ldr	r2, [r7, #24]
 8014520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014522:	f7fd f9e1 	bl	80118e8 <disk_read>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d004      	beq.n	8014536 <f_read+0x17e>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2201      	movs	r2, #1
 8014530:	755a      	strb	r2, [r3, #21]
 8014532:	2301      	movs	r3, #1
 8014534:	e09b      	b.n	801466e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	7d1b      	ldrb	r3, [r3, #20]
 801453a:	b25b      	sxtb	r3, r3
 801453c:	2b00      	cmp	r3, #0
 801453e:	da18      	bge.n	8014572 <f_read+0x1ba>
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	6a1a      	ldr	r2, [r3, #32]
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801454a:	429a      	cmp	r2, r3
 801454c:	d911      	bls.n	8014572 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6a1a      	ldr	r2, [r3, #32]
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	1ad3      	subs	r3, r2, r3
 8014556:	697a      	ldr	r2, [r7, #20]
 8014558:	8992      	ldrh	r2, [r2, #12]
 801455a:	fb02 f303 	mul.w	r3, r2, r3
 801455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014560:	18d0      	adds	r0, r2, r3
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	899b      	ldrh	r3, [r3, #12]
 801456c:	461a      	mov	r2, r3
 801456e:	f7fd fa9b 	bl	8011aa8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	899b      	ldrh	r3, [r3, #12]
 8014576:	461a      	mov	r2, r3
 8014578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457a:	fb02 f303 	mul.w	r3, r2, r3
 801457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8014580:	e05c      	b.n	801463c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6a1b      	ldr	r3, [r3, #32]
 8014586:	69ba      	ldr	r2, [r7, #24]
 8014588:	429a      	cmp	r2, r3
 801458a:	d02e      	beq.n	80145ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	7d1b      	ldrb	r3, [r3, #20]
 8014590:	b25b      	sxtb	r3, r3
 8014592:	2b00      	cmp	r3, #0
 8014594:	da18      	bge.n	80145c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	7858      	ldrb	r0, [r3, #1]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6a1a      	ldr	r2, [r3, #32]
 80145a4:	2301      	movs	r3, #1
 80145a6:	f7fd f9bf 	bl	8011928 <disk_write>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d004      	beq.n	80145ba <f_read+0x202>
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2201      	movs	r2, #1
 80145b4:	755a      	strb	r2, [r3, #21]
 80145b6:	2301      	movs	r3, #1
 80145b8:	e059      	b.n	801466e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	7d1b      	ldrb	r3, [r3, #20]
 80145be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145c2:	b2da      	uxtb	r2, r3
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	7858      	ldrb	r0, [r3, #1]
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80145d2:	2301      	movs	r3, #1
 80145d4:	69ba      	ldr	r2, [r7, #24]
 80145d6:	f7fd f987 	bl	80118e8 <disk_read>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d004      	beq.n	80145ea <f_read+0x232>
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2201      	movs	r2, #1
 80145e4:	755a      	strb	r2, [r3, #21]
 80145e6:	2301      	movs	r3, #1
 80145e8:	e041      	b.n	801466e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	69ba      	ldr	r2, [r7, #24]
 80145ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	899b      	ldrh	r3, [r3, #12]
 80145f4:	4618      	mov	r0, r3
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	699b      	ldr	r3, [r3, #24]
 80145fa:	697a      	ldr	r2, [r7, #20]
 80145fc:	8992      	ldrh	r2, [r2, #12]
 80145fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8014602:	fb01 f202 	mul.w	r2, r1, r2
 8014606:	1a9b      	subs	r3, r3, r2
 8014608:	1ac3      	subs	r3, r0, r3
 801460a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	429a      	cmp	r2, r3
 8014612:	d901      	bls.n	8014618 <f_read+0x260>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	699b      	ldr	r3, [r3, #24]
 8014622:	697a      	ldr	r2, [r7, #20]
 8014624:	8992      	ldrh	r2, [r2, #12]
 8014626:	fbb3 f0f2 	udiv	r0, r3, r2
 801462a:	fb00 f202 	mul.w	r2, r0, r2
 801462e:	1a9b      	subs	r3, r3, r2
 8014630:	440b      	add	r3, r1
 8014632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014634:	4619      	mov	r1, r3
 8014636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014638:	f7fd fa36 	bl	8011aa8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014640:	4413      	add	r3, r2
 8014642:	627b      	str	r3, [r7, #36]	@ 0x24
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	699a      	ldr	r2, [r3, #24]
 8014648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801464a:	441a      	add	r2, r3
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	619a      	str	r2, [r3, #24]
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014656:	441a      	add	r2, r3
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014660:	1ad3      	subs	r3, r2, r3
 8014662:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	f47f aee1 	bne.w	801442e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	3738      	adds	r7, #56	@ 0x38
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}

08014676 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b08c      	sub	sp, #48	@ 0x30
 801467a:	af00      	add	r7, sp, #0
 801467c:	60f8      	str	r0, [r7, #12]
 801467e:	60b9      	str	r1, [r7, #8]
 8014680:	607a      	str	r2, [r7, #4]
 8014682:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	2200      	movs	r2, #0
 801468c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f107 0210 	add.w	r2, r7, #16
 8014694:	4611      	mov	r1, r2
 8014696:	4618      	mov	r0, r3
 8014698:	f7ff fc4a 	bl	8013f30 <validate>
 801469c:	4603      	mov	r3, r0
 801469e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80146a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d107      	bne.n	80146ba <f_write+0x44>
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	7d5b      	ldrb	r3, [r3, #21]
 80146ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80146b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d002      	beq.n	80146c0 <f_write+0x4a>
 80146ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80146be:	e16a      	b.n	8014996 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	7d1b      	ldrb	r3, [r3, #20]
 80146c4:	f003 0302 	and.w	r3, r3, #2
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d101      	bne.n	80146d0 <f_write+0x5a>
 80146cc:	2307      	movs	r3, #7
 80146ce:	e162      	b.n	8014996 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	699a      	ldr	r2, [r3, #24]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	441a      	add	r2, r3
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	699b      	ldr	r3, [r3, #24]
 80146dc:	429a      	cmp	r2, r3
 80146de:	f080 814c 	bcs.w	801497a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	699b      	ldr	r3, [r3, #24]
 80146e6:	43db      	mvns	r3, r3
 80146e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80146ea:	e146      	b.n	801497a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	699b      	ldr	r3, [r3, #24]
 80146f0:	693a      	ldr	r2, [r7, #16]
 80146f2:	8992      	ldrh	r2, [r2, #12]
 80146f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80146f8:	fb01 f202 	mul.w	r2, r1, r2
 80146fc:	1a9b      	subs	r3, r3, r2
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f040 80f1 	bne.w	80148e6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	699b      	ldr	r3, [r3, #24]
 8014708:	693a      	ldr	r2, [r7, #16]
 801470a:	8992      	ldrh	r2, [r2, #12]
 801470c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014710:	693a      	ldr	r2, [r7, #16]
 8014712:	8952      	ldrh	r2, [r2, #10]
 8014714:	3a01      	subs	r2, #1
 8014716:	4013      	ands	r3, r2
 8014718:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d143      	bne.n	80147a8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	699b      	ldr	r3, [r3, #24]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10c      	bne.n	8014742 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014730:	2b00      	cmp	r3, #0
 8014732:	d11a      	bne.n	801476a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2100      	movs	r1, #0
 8014738:	4618      	mov	r0, r3
 801473a:	f7fd fef2 	bl	8012522 <create_chain>
 801473e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014740:	e013      	b.n	801476a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014746:	2b00      	cmp	r3, #0
 8014748:	d007      	beq.n	801475a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	699b      	ldr	r3, [r3, #24]
 801474e:	4619      	mov	r1, r3
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	f7fd ff7e 	bl	8012652 <clmt_clust>
 8014756:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014758:	e007      	b.n	801476a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	69db      	ldr	r3, [r3, #28]
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	f7fd fedd 	bl	8012522 <create_chain>
 8014768:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476c:	2b00      	cmp	r3, #0
 801476e:	f000 8109 	beq.w	8014984 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014774:	2b01      	cmp	r3, #1
 8014776:	d104      	bne.n	8014782 <f_write+0x10c>
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2202      	movs	r2, #2
 801477c:	755a      	strb	r2, [r3, #21]
 801477e:	2302      	movs	r3, #2
 8014780:	e109      	b.n	8014996 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014788:	d104      	bne.n	8014794 <f_write+0x11e>
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2201      	movs	r2, #1
 801478e:	755a      	strb	r2, [r3, #21]
 8014790:	2301      	movs	r3, #1
 8014792:	e100      	b.n	8014996 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014798:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d102      	bne.n	80147a8 <f_write+0x132>
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80147a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	7d1b      	ldrb	r3, [r3, #20]
 80147ac:	b25b      	sxtb	r3, r3
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	da18      	bge.n	80147e4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	7858      	ldrb	r0, [r3, #1]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6a1a      	ldr	r2, [r3, #32]
 80147c0:	2301      	movs	r3, #1
 80147c2:	f7fd f8b1 	bl	8011928 <disk_write>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d004      	beq.n	80147d6 <f_write+0x160>
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2201      	movs	r2, #1
 80147d0:	755a      	strb	r2, [r3, #21]
 80147d2:	2301      	movs	r3, #1
 80147d4:	e0df      	b.n	8014996 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	7d1b      	ldrb	r3, [r3, #20]
 80147da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147de:	b2da      	uxtb	r2, r3
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80147e4:	693a      	ldr	r2, [r7, #16]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	69db      	ldr	r3, [r3, #28]
 80147ea:	4619      	mov	r1, r3
 80147ec:	4610      	mov	r0, r2
 80147ee:	f7fd fc27 	bl	8012040 <clust2sect>
 80147f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d104      	bne.n	8014804 <f_write+0x18e>
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2202      	movs	r2, #2
 80147fe:	755a      	strb	r2, [r3, #21]
 8014800:	2302      	movs	r3, #2
 8014802:	e0c8      	b.n	8014996 <f_write+0x320>
			sect += csect;
 8014804:	697a      	ldr	r2, [r7, #20]
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	4413      	add	r3, r2
 801480a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	899b      	ldrh	r3, [r3, #12]
 8014810:	461a      	mov	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	fbb3 f3f2 	udiv	r3, r3, r2
 8014818:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801481a:	6a3b      	ldr	r3, [r7, #32]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d043      	beq.n	80148a8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014820:	69ba      	ldr	r2, [r7, #24]
 8014822:	6a3b      	ldr	r3, [r7, #32]
 8014824:	4413      	add	r3, r2
 8014826:	693a      	ldr	r2, [r7, #16]
 8014828:	8952      	ldrh	r2, [r2, #10]
 801482a:	4293      	cmp	r3, r2
 801482c:	d905      	bls.n	801483a <f_write+0x1c4>
					cc = fs->csize - csect;
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	895b      	ldrh	r3, [r3, #10]
 8014832:	461a      	mov	r2, r3
 8014834:	69bb      	ldr	r3, [r7, #24]
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	7858      	ldrb	r0, [r3, #1]
 801483e:	6a3b      	ldr	r3, [r7, #32]
 8014840:	697a      	ldr	r2, [r7, #20]
 8014842:	69f9      	ldr	r1, [r7, #28]
 8014844:	f7fd f870 	bl	8011928 <disk_write>
 8014848:	4603      	mov	r3, r0
 801484a:	2b00      	cmp	r3, #0
 801484c:	d004      	beq.n	8014858 <f_write+0x1e2>
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2201      	movs	r2, #1
 8014852:	755a      	strb	r2, [r3, #21]
 8014854:	2301      	movs	r3, #1
 8014856:	e09e      	b.n	8014996 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6a1a      	ldr	r2, [r3, #32]
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	6a3a      	ldr	r2, [r7, #32]
 8014862:	429a      	cmp	r2, r3
 8014864:	d918      	bls.n	8014898 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6a1a      	ldr	r2, [r3, #32]
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	693a      	ldr	r2, [r7, #16]
 8014876:	8992      	ldrh	r2, [r2, #12]
 8014878:	fb02 f303 	mul.w	r3, r2, r3
 801487c:	69fa      	ldr	r2, [r7, #28]
 801487e:	18d1      	adds	r1, r2, r3
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	899b      	ldrh	r3, [r3, #12]
 8014884:	461a      	mov	r2, r3
 8014886:	f7fd f90f 	bl	8011aa8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	7d1b      	ldrb	r3, [r3, #20]
 801488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014892:	b2da      	uxtb	r2, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	899b      	ldrh	r3, [r3, #12]
 801489c:	461a      	mov	r2, r3
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	fb02 f303 	mul.w	r3, r2, r3
 80148a4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80148a6:	e04b      	b.n	8014940 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	6a1b      	ldr	r3, [r3, #32]
 80148ac:	697a      	ldr	r2, [r7, #20]
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d016      	beq.n	80148e0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	699a      	ldr	r2, [r3, #24]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d210      	bcs.n	80148e0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	7858      	ldrb	r0, [r3, #1]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80148c8:	2301      	movs	r3, #1
 80148ca:	697a      	ldr	r2, [r7, #20]
 80148cc:	f7fd f80c 	bl	80118e8 <disk_read>
 80148d0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d004      	beq.n	80148e0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	2201      	movs	r2, #1
 80148da:	755a      	strb	r2, [r3, #21]
 80148dc:	2301      	movs	r3, #1
 80148de:	e05a      	b.n	8014996 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	697a      	ldr	r2, [r7, #20]
 80148e4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	899b      	ldrh	r3, [r3, #12]
 80148ea:	4618      	mov	r0, r3
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	8992      	ldrh	r2, [r2, #12]
 80148f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80148f8:	fb01 f202 	mul.w	r2, r1, r2
 80148fc:	1a9b      	subs	r3, r3, r2
 80148fe:	1ac3      	subs	r3, r0, r3
 8014900:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	429a      	cmp	r2, r3
 8014908:	d901      	bls.n	801490e <f_write+0x298>
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	699b      	ldr	r3, [r3, #24]
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	8992      	ldrh	r2, [r2, #12]
 801491c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014920:	fb00 f202 	mul.w	r2, r0, r2
 8014924:	1a9b      	subs	r3, r3, r2
 8014926:	440b      	add	r3, r1
 8014928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801492a:	69f9      	ldr	r1, [r7, #28]
 801492c:	4618      	mov	r0, r3
 801492e:	f7fd f8bb 	bl	8011aa8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	7d1b      	ldrb	r3, [r3, #20]
 8014936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801493a:	b2da      	uxtb	r2, r3
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014940:	69fa      	ldr	r2, [r7, #28]
 8014942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014944:	4413      	add	r3, r2
 8014946:	61fb      	str	r3, [r7, #28]
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	699a      	ldr	r2, [r3, #24]
 801494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801494e:	441a      	add	r2, r3
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	619a      	str	r2, [r3, #24]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	68da      	ldr	r2, [r3, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	699b      	ldr	r3, [r3, #24]
 801495c:	429a      	cmp	r2, r3
 801495e:	bf38      	it	cc
 8014960:	461a      	movcc	r2, r3
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	60da      	str	r2, [r3, #12]
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801496c:	441a      	add	r2, r3
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	601a      	str	r2, [r3, #0]
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	f47f aeb5 	bne.w	80146ec <f_write+0x76>
 8014982:	e000      	b.n	8014986 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014984:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	7d1b      	ldrb	r3, [r3, #20]
 801498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801498e:	b2da      	uxtb	r2, r3
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	3730      	adds	r7, #48	@ 0x30
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b086      	sub	sp, #24
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f107 0208 	add.w	r2, r7, #8
 80149ac:	4611      	mov	r1, r2
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7ff fabe 	bl	8013f30 <validate>
 80149b4:	4603      	mov	r3, r0
 80149b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80149b8:	7dfb      	ldrb	r3, [r7, #23]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d168      	bne.n	8014a90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	7d1b      	ldrb	r3, [r3, #20]
 80149c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d062      	beq.n	8014a90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	7d1b      	ldrb	r3, [r3, #20]
 80149ce:	b25b      	sxtb	r3, r3
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	da15      	bge.n	8014a00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	7858      	ldrb	r0, [r3, #1]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6a1a      	ldr	r2, [r3, #32]
 80149e2:	2301      	movs	r3, #1
 80149e4:	f7fc ffa0 	bl	8011928 <disk_write>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d001      	beq.n	80149f2 <f_sync+0x54>
 80149ee:	2301      	movs	r3, #1
 80149f0:	e04f      	b.n	8014a92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	7d1b      	ldrb	r3, [r3, #20]
 80149f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014a00:	f7fc fa0e 	bl	8010e20 <get_fattime>
 8014a04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014a06:	68ba      	ldr	r2, [r7, #8]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	4610      	mov	r0, r2
 8014a10:	f7fd fa78 	bl	8011f04 <move_window>
 8014a14:	4603      	mov	r3, r0
 8014a16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014a18:	7dfb      	ldrb	r3, [r7, #23]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d138      	bne.n	8014a90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	330b      	adds	r3, #11
 8014a28:	781a      	ldrb	r2, [r3, #0]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	330b      	adds	r3, #11
 8014a2e:	f042 0220 	orr.w	r2, r2, #32
 8014a32:	b2d2      	uxtb	r2, r2
 8014a34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6818      	ldr	r0, [r3, #0]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	461a      	mov	r2, r3
 8014a40:	68f9      	ldr	r1, [r7, #12]
 8014a42:	f7fe f803 	bl	8012a4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f103 021c 	add.w	r2, r3, #28
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	f7fc fffc 	bl	8011a50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	3316      	adds	r3, #22
 8014a5c:	6939      	ldr	r1, [r7, #16]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7fc fff6 	bl	8011a50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	3312      	adds	r3, #18
 8014a68:	2100      	movs	r1, #0
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fc ffd5 	bl	8011a1a <st_word>
					fs->wflag = 1;
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	2201      	movs	r2, #1
 8014a74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fd fa71 	bl	8011f60 <sync_fs>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	7d1b      	ldrb	r3, [r3, #20]
 8014a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}

08014a9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014a9a:	b580      	push	{r7, lr}
 8014a9c:	b084      	sub	sp, #16
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff ff7b 	bl	801499e <f_sync>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014aac:	7bfb      	ldrb	r3, [r7, #15]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d118      	bne.n	8014ae4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f107 0208 	add.w	r2, r7, #8
 8014ab8:	4611      	mov	r1, r2
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7ff fa38 	bl	8013f30 <validate>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10c      	bne.n	8014ae4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	691b      	ldr	r3, [r3, #16]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fd f974 	bl	8011dbc <dec_lock>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014ad8:	7bfb      	ldrb	r3, [r7, #15]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d102      	bne.n	8014ae4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}

08014aee <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014aee:	b590      	push	{r4, r7, lr}
 8014af0:	b093      	sub	sp, #76	@ 0x4c
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014af6:	f107 010c 	add.w	r1, r7, #12
 8014afa:	1d3b      	adds	r3, r7, #4
 8014afc:	2200      	movs	r2, #0
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe ff8e 	bl	8013a20 <find_volume>
 8014b04:	4603      	mov	r3, r0
 8014b06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8014b0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d131      	bne.n	8014b76 <f_chdir+0x88>
		dj.obj.fs = fs;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	f107 0310 	add.w	r3, r7, #16
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe fe4e 	bl	80137c0 <follow_path>
 8014b24:	4603      	mov	r3, r0
 8014b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 8014b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d11a      	bne.n	8014b68 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014b32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014b36:	b25b      	sxtb	r3, r3
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	da03      	bge.n	8014b44 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	69ba      	ldr	r2, [r7, #24]
 8014b40:	61da      	str	r2, [r3, #28]
 8014b42:	e011      	b.n	8014b68 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014b44:	7dbb      	ldrb	r3, [r7, #22]
 8014b46:	f003 0310 	and.w	r3, r3, #16
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d009      	beq.n	8014b62 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b52:	68fc      	ldr	r4, [r7, #12]
 8014b54:	4611      	mov	r1, r2
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fd ff59 	bl	8012a0e <ld_clust>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	61e3      	str	r3, [r4, #28]
 8014b60:	e002      	b.n	8014b68 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014b62:	2305      	movs	r3, #5
 8014b64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014b68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014b6c:	2b04      	cmp	r3, #4
 8014b6e:	d102      	bne.n	8014b76 <f_chdir+0x88>
 8014b70:	2305      	movs	r3, #5
 8014b72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 8014b76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	374c      	adds	r7, #76	@ 0x4c
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd90      	pop	{r4, r7, pc}

08014b82 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014b82:	b580      	push	{r7, lr}
 8014b84:	b090      	sub	sp, #64	@ 0x40
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	6078      	str	r0, [r7, #4]
 8014b8a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f107 0208 	add.w	r2, r7, #8
 8014b92:	4611      	mov	r1, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff f9cb 	bl	8013f30 <validate>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d103      	bne.n	8014bb0 <f_lseek+0x2e>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	7d5b      	ldrb	r3, [r3, #21]
 8014bac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <f_lseek+0x3c>
 8014bb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014bbc:	e201      	b.n	8014fc2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	f000 80d9 	beq.w	8014d7a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bce:	d15a      	bne.n	8014c86 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bd4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd8:	1d1a      	adds	r2, r3, #4
 8014bda:	627a      	str	r2, [r7, #36]	@ 0x24
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	617b      	str	r3, [r7, #20]
 8014be0:	2302      	movs	r3, #2
 8014be2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	689b      	ldr	r3, [r3, #8]
 8014be8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d03a      	beq.n	8014c66 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf2:	613b      	str	r3, [r7, #16]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bfa:	3302      	adds	r3, #2
 8014bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c00:	60fb      	str	r3, [r7, #12]
 8014c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c04:	3301      	adds	r3, #1
 8014c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7fd fa36 	bl	801207e <get_fat>
 8014c12:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c16:	2b01      	cmp	r3, #1
 8014c18:	d804      	bhi.n	8014c24 <f_lseek+0xa2>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2202      	movs	r2, #2
 8014c1e:	755a      	strb	r2, [r3, #21]
 8014c20:	2302      	movs	r3, #2
 8014c22:	e1ce      	b.n	8014fc2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c2a:	d104      	bne.n	8014c36 <f_lseek+0xb4>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	755a      	strb	r2, [r3, #21]
 8014c32:	2301      	movs	r3, #1
 8014c34:	e1c5      	b.n	8014fc2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d0de      	beq.n	8014bfe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d809      	bhi.n	8014c5c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4a:	1d1a      	adds	r2, r3, #4
 8014c4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8014c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c50:	601a      	str	r2, [r3, #0]
 8014c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c54:	1d1a      	adds	r2, r3, #4
 8014c56:	627a      	str	r2, [r7, #36]	@ 0x24
 8014c58:	693a      	ldr	r2, [r7, #16]
 8014c5a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	6a1b      	ldr	r3, [r3, #32]
 8014c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d3c4      	bcc.n	8014bf0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c6c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d803      	bhi.n	8014c7e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c78:	2200      	movs	r2, #0
 8014c7a:	601a      	str	r2, [r3, #0]
 8014c7c:	e19f      	b.n	8014fbe <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014c7e:	2311      	movs	r3, #17
 8014c80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014c84:	e19b      	b.n	8014fbe <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d902      	bls.n	8014c96 <f_lseek+0x114>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	683a      	ldr	r2, [r7, #0]
 8014c9a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	f000 818d 	beq.w	8014fbe <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	3b01      	subs	r3, #1
 8014ca8:	4619      	mov	r1, r3
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7fd fcd1 	bl	8012652 <clmt_clust>
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014cb6:	68ba      	ldr	r2, [r7, #8]
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	69db      	ldr	r3, [r3, #28]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	f7fd f9be 	bl	8012040 <clust2sect>
 8014cc4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d104      	bne.n	8014cd6 <f_lseek+0x154>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2202      	movs	r2, #2
 8014cd0:	755a      	strb	r2, [r3, #21]
 8014cd2:	2302      	movs	r3, #2
 8014cd4:	e175      	b.n	8014fc2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	8992      	ldrh	r2, [r2, #12]
 8014cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ce2:	68ba      	ldr	r2, [r7, #8]
 8014ce4:	8952      	ldrh	r2, [r2, #10]
 8014ce6:	3a01      	subs	r2, #1
 8014ce8:	4013      	ands	r3, r2
 8014cea:	69ba      	ldr	r2, [r7, #24]
 8014cec:	4413      	add	r3, r2
 8014cee:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	699b      	ldr	r3, [r3, #24]
 8014cf4:	68ba      	ldr	r2, [r7, #8]
 8014cf6:	8992      	ldrh	r2, [r2, #12]
 8014cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cfc:	fb01 f202 	mul.w	r2, r1, r2
 8014d00:	1a9b      	subs	r3, r3, r2
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	f000 815b 	beq.w	8014fbe <f_lseek+0x43c>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6a1b      	ldr	r3, [r3, #32]
 8014d0c:	69ba      	ldr	r2, [r7, #24]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	f000 8155 	beq.w	8014fbe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	7d1b      	ldrb	r3, [r3, #20]
 8014d18:	b25b      	sxtb	r3, r3
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	da18      	bge.n	8014d50 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	7858      	ldrb	r0, [r3, #1]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6a1a      	ldr	r2, [r3, #32]
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	f7fc fdfb 	bl	8011928 <disk_write>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d004      	beq.n	8014d42 <f_lseek+0x1c0>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	755a      	strb	r2, [r3, #21]
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e13f      	b.n	8014fc2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	7d1b      	ldrb	r3, [r3, #20]
 8014d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d4a:	b2da      	uxtb	r2, r3
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	7858      	ldrb	r0, [r3, #1]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	69ba      	ldr	r2, [r7, #24]
 8014d5e:	f7fc fdc3 	bl	80118e8 <disk_read>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d004      	beq.n	8014d72 <f_lseek+0x1f0>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	755a      	strb	r2, [r3, #21]
 8014d6e:	2301      	movs	r3, #1
 8014d70:	e127      	b.n	8014fc2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	69ba      	ldr	r2, [r7, #24]
 8014d76:	621a      	str	r2, [r3, #32]
 8014d78:	e121      	b.n	8014fbe <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d908      	bls.n	8014d96 <f_lseek+0x214>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7d1b      	ldrb	r3, [r3, #20]
 8014d88:	f003 0302 	and.w	r3, r3, #2
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d102      	bne.n	8014d96 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	699b      	ldr	r3, [r3, #24]
 8014d9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014da4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	f000 80b5 	beq.w	8014f18 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	895b      	ldrh	r3, [r3, #10]
 8014db2:	461a      	mov	r2, r3
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	899b      	ldrh	r3, [r3, #12]
 8014db8:	fb02 f303 	mul.w	r3, r2, r3
 8014dbc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014dbe:	6a3b      	ldr	r3, [r7, #32]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d01b      	beq.n	8014dfc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	1e5a      	subs	r2, r3, #1
 8014dc8:	69fb      	ldr	r3, [r7, #28]
 8014dca:	fbb2 f2f3 	udiv	r2, r2, r3
 8014dce:	6a3b      	ldr	r3, [r7, #32]
 8014dd0:	1e59      	subs	r1, r3, #1
 8014dd2:	69fb      	ldr	r3, [r7, #28]
 8014dd4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d30f      	bcc.n	8014dfc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014ddc:	6a3b      	ldr	r3, [r7, #32]
 8014dde:	1e5a      	subs	r2, r3, #1
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	425b      	negs	r3, r3
 8014de4:	401a      	ands	r2, r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	699b      	ldr	r3, [r3, #24]
 8014dee:	683a      	ldr	r2, [r7, #0]
 8014df0:	1ad3      	subs	r3, r2, r3
 8014df2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	69db      	ldr	r3, [r3, #28]
 8014df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014dfa:	e022      	b.n	8014e42 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d119      	bne.n	8014e3c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fd fb88 	bl	8012522 <create_chain>
 8014e12:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d104      	bne.n	8014e24 <f_lseek+0x2a2>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2202      	movs	r2, #2
 8014e1e:	755a      	strb	r2, [r3, #21]
 8014e20:	2302      	movs	r3, #2
 8014e22:	e0ce      	b.n	8014fc2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e2a:	d104      	bne.n	8014e36 <f_lseek+0x2b4>
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2201      	movs	r2, #1
 8014e30:	755a      	strb	r2, [r3, #21]
 8014e32:	2301      	movs	r3, #1
 8014e34:	e0c5      	b.n	8014fc2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e3a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e40:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d067      	beq.n	8014f18 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014e48:	e03a      	b.n	8014ec0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014e4a:	683a      	ldr	r2, [r7, #0]
 8014e4c:	69fb      	ldr	r3, [r7, #28]
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	603b      	str	r3, [r7, #0]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	699a      	ldr	r2, [r3, #24]
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	441a      	add	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	7d1b      	ldrb	r3, [r3, #20]
 8014e62:	f003 0302 	and.w	r3, r3, #2
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d00b      	beq.n	8014e82 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fd fb57 	bl	8012522 <create_chain>
 8014e74:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d108      	bne.n	8014e8e <f_lseek+0x30c>
							ofs = 0; break;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	603b      	str	r3, [r7, #0]
 8014e80:	e022      	b.n	8014ec8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fd f8f9 	bl	801207e <get_fat>
 8014e8c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e94:	d104      	bne.n	8014ea0 <f_lseek+0x31e>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2201      	movs	r2, #1
 8014e9a:	755a      	strb	r2, [r3, #21]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e090      	b.n	8014fc2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d904      	bls.n	8014eb0 <f_lseek+0x32e>
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	6a1b      	ldr	r3, [r3, #32]
 8014eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d304      	bcc.n	8014eba <f_lseek+0x338>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2202      	movs	r2, #2
 8014eb4:	755a      	strb	r2, [r3, #21]
 8014eb6:	2302      	movs	r3, #2
 8014eb8:	e083      	b.n	8014fc2 <f_lseek+0x440>
					fp->clust = clst;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014ebe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014ec0:	683a      	ldr	r2, [r7, #0]
 8014ec2:	69fb      	ldr	r3, [r7, #28]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d8c0      	bhi.n	8014e4a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	699a      	ldr	r2, [r3, #24]
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	441a      	add	r2, r3
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	899b      	ldrh	r3, [r3, #12]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ee0:	fb01 f202 	mul.w	r2, r1, r2
 8014ee4:	1a9b      	subs	r3, r3, r2
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d016      	beq.n	8014f18 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fd f8a6 	bl	8012040 <clust2sect>
 8014ef4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d104      	bne.n	8014f06 <f_lseek+0x384>
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2202      	movs	r2, #2
 8014f00:	755a      	strb	r2, [r3, #21]
 8014f02:	2302      	movs	r3, #2
 8014f04:	e05d      	b.n	8014fc2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	899b      	ldrh	r3, [r3, #12]
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f14:	4413      	add	r3, r2
 8014f16:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	699a      	ldr	r2, [r3, #24]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d90a      	bls.n	8014f3a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	699a      	ldr	r2, [r3, #24]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	7d1b      	ldrb	r3, [r3, #20]
 8014f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f34:	b2da      	uxtb	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	699b      	ldr	r3, [r3, #24]
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	8992      	ldrh	r2, [r2, #12]
 8014f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f46:	fb01 f202 	mul.w	r2, r1, r2
 8014f4a:	1a9b      	subs	r3, r3, r2
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d036      	beq.n	8014fbe <f_lseek+0x43c>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6a1b      	ldr	r3, [r3, #32]
 8014f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d031      	beq.n	8014fbe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	7d1b      	ldrb	r3, [r3, #20]
 8014f5e:	b25b      	sxtb	r3, r3
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	da18      	bge.n	8014f96 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	7858      	ldrb	r0, [r3, #1]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6a1a      	ldr	r2, [r3, #32]
 8014f72:	2301      	movs	r3, #1
 8014f74:	f7fc fcd8 	bl	8011928 <disk_write>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d004      	beq.n	8014f88 <f_lseek+0x406>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2201      	movs	r2, #1
 8014f82:	755a      	strb	r2, [r3, #21]
 8014f84:	2301      	movs	r3, #1
 8014f86:	e01c      	b.n	8014fc2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	7d1b      	ldrb	r3, [r3, #20]
 8014f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	7858      	ldrb	r0, [r3, #1]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014fa4:	f7fc fca0 	bl	80118e8 <disk_read>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d004      	beq.n	8014fb8 <f_lseek+0x436>
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	755a      	strb	r2, [r3, #21]
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e004      	b.n	8014fc2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014fbc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014fbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3740      	adds	r7, #64	@ 0x40
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}

08014fca <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014fca:	b580      	push	{r7, lr}
 8014fcc:	b0a0      	sub	sp, #128	@ 0x80
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014fd6:	f107 010c 	add.w	r1, r7, #12
 8014fda:	1d3b      	adds	r3, r7, #4
 8014fdc:	2202      	movs	r2, #2
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7fe fd1e 	bl	8013a20 <find_volume>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8014fee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	f040 80a4 	bne.w	8015140 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014ffe:	4611      	mov	r1, r2
 8015000:	4618      	mov	r0, r3
 8015002:	f7fe fbdd 	bl	80137c0 <follow_path>
 8015006:	4603      	mov	r3, r0
 8015008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801500c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015010:	2b00      	cmp	r3, #0
 8015012:	d108      	bne.n	8015026 <f_unlink+0x5c>
 8015014:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8015018:	f003 0320 	and.w	r3, r3, #32
 801501c:	2b00      	cmp	r3, #0
 801501e:	d002      	beq.n	8015026 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8015020:	2306      	movs	r3, #6
 8015022:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015026:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801502a:	2b00      	cmp	r3, #0
 801502c:	d108      	bne.n	8015040 <f_unlink+0x76>
 801502e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015032:	2102      	movs	r1, #2
 8015034:	4618      	mov	r0, r3
 8015036:	f7fc fdb5 	bl	8011ba4 <chk_lock>
 801503a:	4603      	mov	r3, r0
 801503c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8015040:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015044:	2b00      	cmp	r3, #0
 8015046:	d17b      	bne.n	8015140 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015048:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801504c:	b25b      	sxtb	r3, r3
 801504e:	2b00      	cmp	r3, #0
 8015050:	da03      	bge.n	801505a <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8015052:	2306      	movs	r3, #6
 8015054:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8015058:	e008      	b.n	801506c <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801505a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801505e:	f003 0301 	and.w	r3, r3, #1
 8015062:	2b00      	cmp	r3, #0
 8015064:	d002      	beq.n	801506c <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015066:	2307      	movs	r3, #7
 8015068:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801506c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015070:	2b00      	cmp	r3, #0
 8015072:	d13d      	bne.n	80150f0 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015078:	4611      	mov	r1, r2
 801507a:	4618      	mov	r0, r3
 801507c:	f7fd fcc7 	bl	8012a0e <ld_clust>
 8015080:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015082:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8015086:	f003 0310 	and.w	r3, r3, #16
 801508a:	2b00      	cmp	r3, #0
 801508c:	d030      	beq.n	80150f0 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	69db      	ldr	r3, [r3, #28]
 8015092:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015094:	429a      	cmp	r2, r3
 8015096:	d103      	bne.n	80150a0 <f_unlink+0xd6>
						res = FR_DENIED;
 8015098:	2307      	movs	r3, #7
 801509a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801509e:	e027      	b.n	80150f0 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80150a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80150a6:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80150a8:	f107 0310 	add.w	r3, r7, #16
 80150ac:	2100      	movs	r1, #0
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fd fb07 	bl	80126c2 <dir_sdi>
 80150b4:	4603      	mov	r3, r0
 80150b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 80150ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d116      	bne.n	80150f0 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80150c2:	f107 0310 	add.w	r3, r7, #16
 80150c6:	2100      	movs	r1, #0
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fd feca 	bl	8012e62 <dir_read>
 80150ce:	4603      	mov	r3, r0
 80150d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80150d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d102      	bne.n	80150e2 <f_unlink+0x118>
 80150dc:	2307      	movs	r3, #7
 80150de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80150e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80150e6:	2b04      	cmp	r3, #4
 80150e8:	d102      	bne.n	80150f0 <f_unlink+0x126>
 80150ea:	2300      	movs	r3, #0
 80150ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 80150f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d123      	bne.n	8015140 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80150f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7fe f90f 	bl	8013320 <dir_remove>
 8015102:	4603      	mov	r3, r0
 8015104:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015108:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801510c:	2b00      	cmp	r3, #0
 801510e:	d10c      	bne.n	801512a <f_unlink+0x160>
 8015110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015112:	2b00      	cmp	r3, #0
 8015114:	d009      	beq.n	801512a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015116:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801511a:	2200      	movs	r2, #0
 801511c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd f99a 	bl	8012458 <remove_chain>
 8015124:	4603      	mov	r3, r0
 8015126:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801512a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801512e:	2b00      	cmp	r3, #0
 8015130:	d106      	bne.n	8015140 <f_unlink+0x176>
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	4618      	mov	r0, r3
 8015136:	f7fc ff13 	bl	8011f60 <sync_fs>
 801513a:	4603      	mov	r3, r0
 801513c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015140:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8015144:	4618      	mov	r0, r3
 8015146:	3780      	adds	r7, #128	@ 0x80
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b098      	sub	sp, #96	@ 0x60
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015154:	f107 010c 	add.w	r1, r7, #12
 8015158:	1d3b      	adds	r3, r7, #4
 801515a:	2202      	movs	r2, #2
 801515c:	4618      	mov	r0, r3
 801515e:	f7fe fc5f 	bl	8013a20 <find_volume>
 8015162:	4603      	mov	r3, r0
 8015164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 801516c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015170:	2b00      	cmp	r3, #0
 8015172:	f040 80ff 	bne.w	8015374 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	f107 0310 	add.w	r3, r7, #16
 801517c:	4611      	mov	r1, r2
 801517e:	4618      	mov	r0, r3
 8015180:	f7fe fb1e 	bl	80137c0 <follow_path>
 8015184:	4603      	mov	r3, r0
 8015186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801518a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801518e:	2b00      	cmp	r3, #0
 8015190:	d102      	bne.n	8015198 <f_mkdir+0x4c>
 8015192:	2308      	movs	r3, #8
 8015194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015198:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801519c:	2b04      	cmp	r3, #4
 801519e:	d108      	bne.n	80151b2 <f_mkdir+0x66>
 80151a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80151a4:	f003 0320 	and.w	r3, r3, #32
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d002      	beq.n	80151b2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80151ac:	2306      	movs	r3, #6
 80151ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80151b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80151b6:	2b04      	cmp	r3, #4
 80151b8:	f040 80dc 	bne.w	8015374 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80151bc:	f107 0310 	add.w	r3, r7, #16
 80151c0:	2100      	movs	r1, #0
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7fd f9ad 	bl	8012522 <create_chain>
 80151c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	895b      	ldrh	r3, [r3, #10]
 80151ce:	461a      	mov	r2, r3
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	899b      	ldrh	r3, [r3, #12]
 80151d4:	fb02 f303 	mul.w	r3, r2, r3
 80151d8:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80151da:	2300      	movs	r3, #0
 80151dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80151e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d102      	bne.n	80151ec <f_mkdir+0xa0>
 80151e6:	2307      	movs	r3, #7
 80151e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 80151ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151ee:	2b01      	cmp	r3, #1
 80151f0:	d102      	bne.n	80151f8 <f_mkdir+0xac>
 80151f2:	2302      	movs	r3, #2
 80151f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80151f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151fe:	d102      	bne.n	8015206 <f_mkdir+0xba>
 8015200:	2301      	movs	r3, #1
 8015202:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015206:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <f_mkdir+0xd0>
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	4618      	mov	r0, r3
 8015212:	f7fc fe33 	bl	8011e7c <sync_window>
 8015216:	4603      	mov	r3, r0
 8015218:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 801521c:	f7fb fe00 	bl	8010e20 <get_fattime>
 8015220:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015222:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015226:	2b00      	cmp	r3, #0
 8015228:	d16c      	bne.n	8015304 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801522e:	4618      	mov	r0, r3
 8015230:	f7fc ff06 	bl	8012040 <clust2sect>
 8015234:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	333c      	adds	r3, #60	@ 0x3c
 801523a:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	899b      	ldrh	r3, [r3, #12]
 8015240:	461a      	mov	r2, r3
 8015242:	2100      	movs	r1, #0
 8015244:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015246:	f7fc fc50 	bl	8011aea <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801524a:	220b      	movs	r2, #11
 801524c:	2120      	movs	r1, #32
 801524e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015250:	f7fc fc4b 	bl	8011aea <mem_set>
					dir[DIR_Name] = '.';
 8015254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015256:	222e      	movs	r2, #46	@ 0x2e
 8015258:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801525a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801525c:	330b      	adds	r3, #11
 801525e:	2210      	movs	r2, #16
 8015260:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015264:	3316      	adds	r3, #22
 8015266:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015268:	4618      	mov	r0, r3
 801526a:	f7fc fbf1 	bl	8011a50 <st_dword>
					st_clust(fs, dir, dcl);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015272:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015274:	4618      	mov	r0, r3
 8015276:	f7fd fbe9 	bl	8012a4c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801527a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801527c:	3320      	adds	r3, #32
 801527e:	2220      	movs	r2, #32
 8015280:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015282:	4618      	mov	r0, r3
 8015284:	f7fc fc10 	bl	8011aa8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801528a:	3321      	adds	r3, #33	@ 0x21
 801528c:	222e      	movs	r2, #46	@ 0x2e
 801528e:	701a      	strb	r2, [r3, #0]
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b03      	cmp	r3, #3
 801529a:	d106      	bne.n	80152aa <f_mkdir+0x15e>
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d101      	bne.n	80152aa <f_mkdir+0x15e>
 80152a6:	2300      	movs	r3, #0
 80152a8:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80152aa:	68f8      	ldr	r0, [r7, #12]
 80152ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152ae:	3320      	adds	r3, #32
 80152b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152b2:	4619      	mov	r1, r3
 80152b4:	f7fd fbca 	bl	8012a4c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	895b      	ldrh	r3, [r3, #10]
 80152bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80152be:	e01c      	b.n	80152fa <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 80152c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80152c2:	1c5a      	adds	r2, r3, #1
 80152c4:	657a      	str	r2, [r7, #84]	@ 0x54
 80152c6:	68fa      	ldr	r2, [r7, #12]
 80152c8:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2201      	movs	r2, #1
 80152ce:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7fc fdd2 	bl	8011e7c <sync_window>
 80152d8:	4603      	mov	r3, r0
 80152da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 80152de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d10d      	bne.n	8015302 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	899b      	ldrh	r3, [r3, #12]
 80152ea:	461a      	mov	r2, r3
 80152ec:	2100      	movs	r1, #0
 80152ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80152f0:	f7fc fbfb 	bl	8011aea <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80152f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152f6:	3b01      	subs	r3, #1
 80152f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80152fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d1df      	bne.n	80152c0 <f_mkdir+0x174>
 8015300:	e000      	b.n	8015304 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8015302:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015304:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015308:	2b00      	cmp	r3, #0
 801530a:	d107      	bne.n	801531c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801530c:	f107 0310 	add.w	r3, r7, #16
 8015310:	4618      	mov	r0, r3
 8015312:	f7fd ff0d 	bl	8013130 <dir_register>
 8015316:	4603      	mov	r3, r0
 8015318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 801531c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015320:	2b00      	cmp	r3, #0
 8015322:	d120      	bne.n	8015366 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015326:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801532a:	3316      	adds	r3, #22
 801532c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801532e:	4618      	mov	r0, r3
 8015330:	f7fc fb8e 	bl	8011a50 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015338:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801533a:	4618      	mov	r0, r3
 801533c:	f7fd fb86 	bl	8012a4c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015342:	330b      	adds	r3, #11
 8015344:	2210      	movs	r2, #16
 8015346:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2201      	movs	r2, #1
 801534c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801534e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10e      	bne.n	8015374 <f_mkdir+0x228>
					res = sync_fs(fs);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	4618      	mov	r0, r3
 801535a:	f7fc fe01 	bl	8011f60 <sync_fs>
 801535e:	4603      	mov	r3, r0
 8015360:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015364:	e006      	b.n	8015374 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	2200      	movs	r2, #0
 801536c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801536e:	4618      	mov	r0, r3
 8015370:	f7fd f872 	bl	8012458 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015374:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015378:	4618      	mov	r0, r3
 801537a:	3760      	adds	r7, #96	@ 0x60
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	460b      	mov	r3, r1
 801538a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801538c:	78fb      	ldrb	r3, [r7, #3]
 801538e:	2b0a      	cmp	r3, #10
 8015390:	d103      	bne.n	801539a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015392:	210d      	movs	r1, #13
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7ff fff3 	bl	8015380 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	db25      	blt.n	80153f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	1c5a      	adds	r2, r3, #1
 80153aa:	60fa      	str	r2, [r7, #12]
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	4413      	add	r3, r2
 80153b0:	78fa      	ldrb	r2, [r7, #3]
 80153b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2b3c      	cmp	r3, #60	@ 0x3c
 80153b8:	dd12      	ble.n	80153e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f103 010c 	add.w	r1, r3, #12
 80153c4:	68fa      	ldr	r2, [r7, #12]
 80153c6:	f107 0308 	add.w	r3, r7, #8
 80153ca:	f7ff f954 	bl	8014676 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d101      	bne.n	80153da <putc_bfd+0x5a>
 80153d6:	2300      	movs	r3, #0
 80153d8:	e001      	b.n	80153de <putc_bfd+0x5e>
 80153da:	f04f 33ff 	mov.w	r3, #4294967295
 80153de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	689b      	ldr	r3, [r3, #8]
 80153ea:	1c5a      	adds	r2, r3, #1
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	609a      	str	r2, [r3, #8]
 80153f0:	e000      	b.n	80153f4 <putc_bfd+0x74>
	if (i < 0) return;
 80153f2:	bf00      	nop
}
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}

080153fa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80153fa:	b580      	push	{r7, lr}
 80153fc:	b084      	sub	sp, #16
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	db16      	blt.n	8015438 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6818      	ldr	r0, [r3, #0]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f103 010c 	add.w	r1, r3, #12
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	461a      	mov	r2, r3
 801541a:	f107 030c 	add.w	r3, r7, #12
 801541e:	f7ff f92a 	bl	8014676 <f_write>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d107      	bne.n	8015438 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	68fa      	ldr	r2, [r7, #12]
 801542e:	4293      	cmp	r3, r2
 8015430:	d102      	bne.n	8015438 <putc_flush+0x3e>
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	689b      	ldr	r3, [r3, #8]
 8015436:	e001      	b.n	801543c <putc_flush+0x42>
	return EOF;
 8015438:	f04f 33ff 	mov.w	r3, #4294967295
}
 801543c:	4618      	mov	r0, r3
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015444:	b480      	push	{r7}
 8015446:	b083      	sub	sp, #12
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	683a      	ldr	r2, [r7, #0]
 8015452:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2200      	movs	r2, #0
 8015458:	605a      	str	r2, [r3, #4]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685a      	ldr	r2, [r3, #4]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	609a      	str	r2, [r3, #8]
}
 8015462:	bf00      	nop
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
	...

08015470 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8015470:	b40e      	push	{r1, r2, r3}
 8015472:	b580      	push	{r7, lr}
 8015474:	b0a7      	sub	sp, #156	@ 0x9c
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801547a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801547e:	6879      	ldr	r1, [r7, #4]
 8015480:	4618      	mov	r0, r3
 8015482:	f7ff ffdf 	bl	8015444 <putc_init>

	va_start(arp, fmt);
 8015486:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801548a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 801548c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015490:	1c5a      	adds	r2, r3, #1
 8015492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 801549c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	f000 81f2 	beq.w	801588a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80154a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80154aa:	2b25      	cmp	r3, #37	@ 0x25
 80154ac:	d008      	beq.n	80154c0 <f_printf+0x50>
			putc_bfd(&pb, c);
 80154ae:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80154b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154b6:	4611      	mov	r1, r2
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff ff61 	bl	8015380 <putc_bfd>
			continue;
 80154be:	e1e3      	b.n	8015888 <f_printf+0x418>
		}
		w = f = 0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80154c6:	2300      	movs	r3, #0
 80154c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80154cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80154d0:	1c5a      	adds	r2, r3, #1
 80154d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80154dc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80154e0:	2b30      	cmp	r3, #48	@ 0x30
 80154e2:	d10b      	bne.n	80154fc <f_printf+0x8c>
			f = 1; c = *fmt++;
 80154e4:	2301      	movs	r3, #1
 80154e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80154ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80154ee:	1c5a      	adds	r2, r3, #1
 80154f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80154fa:	e024      	b.n	8015546 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80154fc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015500:	2b2d      	cmp	r3, #45	@ 0x2d
 8015502:	d120      	bne.n	8015546 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015504:	2302      	movs	r3, #2
 8015506:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801550a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801550e:	1c5a      	adds	r2, r3, #1
 8015510:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801551a:	e014      	b.n	8015546 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801551c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015520:	4613      	mov	r3, r2
 8015522:	009b      	lsls	r3, r3, #2
 8015524:	4413      	add	r3, r2
 8015526:	005b      	lsls	r3, r3, #1
 8015528:	461a      	mov	r2, r3
 801552a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801552e:	4413      	add	r3, r2
 8015530:	3b30      	subs	r3, #48	@ 0x30
 8015532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8015536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801553a:	1c5a      	adds	r2, r3, #1
 801553c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8015546:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801554a:	2b2f      	cmp	r3, #47	@ 0x2f
 801554c:	d903      	bls.n	8015556 <f_printf+0xe6>
 801554e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015552:	2b39      	cmp	r3, #57	@ 0x39
 8015554:	d9e2      	bls.n	801551c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8015556:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801555a:	2b6c      	cmp	r3, #108	@ 0x6c
 801555c:	d003      	beq.n	8015566 <f_printf+0xf6>
 801555e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015562:	2b4c      	cmp	r3, #76	@ 0x4c
 8015564:	d10d      	bne.n	8015582 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8015566:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801556a:	f043 0304 	orr.w	r3, r3, #4
 801556e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8015572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015576:	1c5a      	adds	r2, r3, #1
 8015578:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8015582:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015586:	2b00      	cmp	r3, #0
 8015588:	f000 8181 	beq.w	801588e <f_printf+0x41e>
		d = c;
 801558c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015590:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8015594:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015598:	2b60      	cmp	r3, #96	@ 0x60
 801559a:	d908      	bls.n	80155ae <f_printf+0x13e>
 801559c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80155a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80155a2:	d804      	bhi.n	80155ae <f_printf+0x13e>
 80155a4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80155a8:	3b20      	subs	r3, #32
 80155aa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80155ae:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80155b2:	3b42      	subs	r3, #66	@ 0x42
 80155b4:	2b16      	cmp	r3, #22
 80155b6:	f200 8098 	bhi.w	80156ea <f_printf+0x27a>
 80155ba:	a201      	add	r2, pc, #4	@ (adr r2, 80155c0 <f_printf+0x150>)
 80155bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155c0:	080156cb 	.word	0x080156cb
 80155c4:	080156b3 	.word	0x080156b3
 80155c8:	080156db 	.word	0x080156db
 80155cc:	080156eb 	.word	0x080156eb
 80155d0:	080156eb 	.word	0x080156eb
 80155d4:	080156eb 	.word	0x080156eb
 80155d8:	080156eb 	.word	0x080156eb
 80155dc:	080156eb 	.word	0x080156eb
 80155e0:	080156eb 	.word	0x080156eb
 80155e4:	080156eb 	.word	0x080156eb
 80155e8:	080156eb 	.word	0x080156eb
 80155ec:	080156eb 	.word	0x080156eb
 80155f0:	080156eb 	.word	0x080156eb
 80155f4:	080156d3 	.word	0x080156d3
 80155f8:	080156eb 	.word	0x080156eb
 80155fc:	080156eb 	.word	0x080156eb
 8015600:	080156eb 	.word	0x080156eb
 8015604:	0801561d 	.word	0x0801561d
 8015608:	080156eb 	.word	0x080156eb
 801560c:	080156db 	.word	0x080156db
 8015610:	080156eb 	.word	0x080156eb
 8015614:	080156eb 	.word	0x080156eb
 8015618:	080156e3 	.word	0x080156e3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801561c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801561e:	1d1a      	adds	r2, r3, #4
 8015620:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8015626:	2300      	movs	r3, #0
 8015628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801562c:	e004      	b.n	8015638 <f_printf+0x1c8>
 801562e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015632:	3301      	adds	r3, #1
 8015634:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015638:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801563a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801563e:	4413      	add	r3, r2
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1f3      	bne.n	801562e <f_printf+0x1be>
			if (!(f & 2)) {
 8015646:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801564a:	f003 0302 	and.w	r3, r3, #2
 801564e:	2b00      	cmp	r3, #0
 8015650:	d11a      	bne.n	8015688 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8015652:	e005      	b.n	8015660 <f_printf+0x1f0>
 8015654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015658:	2120      	movs	r1, #32
 801565a:	4618      	mov	r0, r3
 801565c:	f7ff fe90 	bl	8015380 <putc_bfd>
 8015660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015664:	1c5a      	adds	r2, r3, #1
 8015666:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801566a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801566e:	429a      	cmp	r2, r3
 8015670:	d8f0      	bhi.n	8015654 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8015672:	e009      	b.n	8015688 <f_printf+0x218>
 8015674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015676:	1c5a      	adds	r2, r3, #1
 8015678:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801567a:	781a      	ldrb	r2, [r3, #0]
 801567c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015680:	4611      	mov	r1, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f7ff fe7c 	bl	8015380 <putc_bfd>
 8015688:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d1f1      	bne.n	8015674 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8015690:	e005      	b.n	801569e <f_printf+0x22e>
 8015692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015696:	2120      	movs	r1, #32
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff fe71 	bl	8015380 <putc_bfd>
 801569e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80156a2:	1c5a      	adds	r2, r3, #1
 80156a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80156a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d8f0      	bhi.n	8015692 <f_printf+0x222>
			continue;
 80156b0:	e0ea      	b.n	8015888 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80156b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156b4:	1d1a      	adds	r2, r3, #4
 80156b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	b2da      	uxtb	r2, r3
 80156bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80156c0:	4611      	mov	r1, r2
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7ff fe5c 	bl	8015380 <putc_bfd>
 80156c8:	e0de      	b.n	8015888 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80156ca:	2302      	movs	r3, #2
 80156cc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80156d0:	e014      	b.n	80156fc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80156d2:	2308      	movs	r3, #8
 80156d4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80156d8:	e010      	b.n	80156fc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80156da:	230a      	movs	r3, #10
 80156dc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80156e0:	e00c      	b.n	80156fc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80156e2:	2310      	movs	r3, #16
 80156e4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80156e8:	e008      	b.n	80156fc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80156ea:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80156ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80156f2:	4611      	mov	r1, r2
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7ff fe43 	bl	8015380 <putc_bfd>
 80156fa:	e0c5      	b.n	8015888 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80156fc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015700:	f003 0304 	and.w	r3, r3, #4
 8015704:	2b00      	cmp	r3, #0
 8015706:	d004      	beq.n	8015712 <f_printf+0x2a2>
 8015708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801570a:	1d1a      	adds	r2, r3, #4
 801570c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	e00c      	b.n	801572c <f_printf+0x2bc>
 8015712:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015716:	2b44      	cmp	r3, #68	@ 0x44
 8015718:	d104      	bne.n	8015724 <f_printf+0x2b4>
 801571a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801571c:	1d1a      	adds	r2, r3, #4
 801571e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	e003      	b.n	801572c <f_printf+0x2bc>
 8015724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015726:	1d1a      	adds	r2, r3, #4
 8015728:	67ba      	str	r2, [r7, #120]	@ 0x78
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8015730:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015734:	2b44      	cmp	r3, #68	@ 0x44
 8015736:	d10e      	bne.n	8015756 <f_printf+0x2e6>
 8015738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801573c:	2b00      	cmp	r3, #0
 801573e:	da0a      	bge.n	8015756 <f_printf+0x2e6>
			v = 0 - v;
 8015740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015744:	425b      	negs	r3, r3
 8015746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 801574a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801574e:	f043 0308 	orr.w	r3, r3, #8
 8015752:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801575c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8015760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015764:	fbb3 f1f2 	udiv	r1, r3, r2
 8015768:	fb01 f202 	mul.w	r2, r1, r2
 801576c:	1a9b      	subs	r3, r3, r2
 801576e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8015772:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015776:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801577a:	fbb2 f3f3 	udiv	r3, r2, r3
 801577e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8015782:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015786:	2b09      	cmp	r3, #9
 8015788:	d90b      	bls.n	80157a2 <f_printf+0x332>
 801578a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801578e:	2b78      	cmp	r3, #120	@ 0x78
 8015790:	d101      	bne.n	8015796 <f_printf+0x326>
 8015792:	2227      	movs	r2, #39	@ 0x27
 8015794:	e000      	b.n	8015798 <f_printf+0x328>
 8015796:	2207      	movs	r2, #7
 8015798:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801579c:	4413      	add	r3, r2
 801579e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 80157a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80157a6:	1c5a      	adds	r2, r3, #1
 80157a8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80157ac:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80157b0:	3230      	adds	r2, #48	@ 0x30
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	3398      	adds	r3, #152	@ 0x98
 80157b6:	443b      	add	r3, r7
 80157b8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80157bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d003      	beq.n	80157cc <f_printf+0x35c>
 80157c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80157c8:	2b1f      	cmp	r3, #31
 80157ca:	d9c7      	bls.n	801575c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80157cc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80157d0:	f003 0308 	and.w	r3, r3, #8
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d009      	beq.n	80157ec <f_printf+0x37c>
 80157d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80157dc:	1c5a      	adds	r2, r3, #1
 80157de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80157e2:	3398      	adds	r3, #152	@ 0x98
 80157e4:	443b      	add	r3, r7
 80157e6:	222d      	movs	r2, #45	@ 0x2d
 80157e8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80157ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80157f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80157f4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80157f8:	f003 0301 	and.w	r3, r3, #1
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d001      	beq.n	8015804 <f_printf+0x394>
 8015800:	2330      	movs	r3, #48	@ 0x30
 8015802:	e000      	b.n	8015806 <f_printf+0x396>
 8015804:	2320      	movs	r3, #32
 8015806:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801580a:	e007      	b.n	801581c <f_printf+0x3ac>
 801580c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015814:	4611      	mov	r1, r2
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff fdb2 	bl	8015380 <putc_bfd>
 801581c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015820:	f003 0302 	and.w	r3, r3, #2
 8015824:	2b00      	cmp	r3, #0
 8015826:	d108      	bne.n	801583a <f_printf+0x3ca>
 8015828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015832:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015836:	429a      	cmp	r2, r3
 8015838:	d8e8      	bhi.n	801580c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801583a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801583e:	3b01      	subs	r3, #1
 8015840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015844:	f107 020c 	add.w	r2, r7, #12
 8015848:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801584c:	4413      	add	r3, r2
 801584e:	781a      	ldrb	r2, [r3, #0]
 8015850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015854:	4611      	mov	r1, r2
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff fd92 	bl	8015380 <putc_bfd>
		} while (i);
 801585c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1ea      	bne.n	801583a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8015864:	e007      	b.n	8015876 <f_printf+0x406>
 8015866:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801586a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801586e:	4611      	mov	r1, r2
 8015870:	4618      	mov	r0, r3
 8015872:	f7ff fd85 	bl	8015380 <putc_bfd>
 8015876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801587a:	1c5a      	adds	r2, r3, #1
 801587c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015880:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015884:	429a      	cmp	r2, r3
 8015886:	d8ee      	bhi.n	8015866 <f_printf+0x3f6>
		c = *fmt++;
 8015888:	e600      	b.n	801548c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801588a:	bf00      	nop
 801588c:	e000      	b.n	8015890 <f_printf+0x420>
		if (!c) break;
 801588e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff fdb0 	bl	80153fa <putc_flush>
 801589a:	4603      	mov	r3, r0
}
 801589c:	4618      	mov	r0, r3
 801589e:	379c      	adds	r7, #156	@ 0x9c
 80158a0:	46bd      	mov	sp, r7
 80158a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80158a6:	b003      	add	sp, #12
 80158a8:	4770      	bx	lr
 80158aa:	bf00      	nop

080158ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b087      	sub	sp, #28
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	4613      	mov	r3, r2
 80158b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80158ba:	2301      	movs	r3, #1
 80158bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80158be:	2300      	movs	r3, #0
 80158c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80158c2:	4b1f      	ldr	r3, [pc, #124]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158c4:	7a5b      	ldrb	r3, [r3, #9]
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d131      	bne.n	8015930 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80158cc:	4b1c      	ldr	r3, [pc, #112]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158ce:	7a5b      	ldrb	r3, [r3, #9]
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	461a      	mov	r2, r3
 80158d4:	4b1a      	ldr	r3, [pc, #104]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158d6:	2100      	movs	r1, #0
 80158d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80158da:	4b19      	ldr	r3, [pc, #100]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158dc:	7a5b      	ldrb	r3, [r3, #9]
 80158de:	b2db      	uxtb	r3, r3
 80158e0:	4a17      	ldr	r2, [pc, #92]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	4413      	add	r3, r2
 80158e6:	68fa      	ldr	r2, [r7, #12]
 80158e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80158ea:	4b15      	ldr	r3, [pc, #84]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158ec:	7a5b      	ldrb	r3, [r3, #9]
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	461a      	mov	r2, r3
 80158f2:	4b13      	ldr	r3, [pc, #76]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158f4:	4413      	add	r3, r2
 80158f6:	79fa      	ldrb	r2, [r7, #7]
 80158f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80158fa:	4b11      	ldr	r3, [pc, #68]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 80158fc:	7a5b      	ldrb	r3, [r3, #9]
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	1c5a      	adds	r2, r3, #1
 8015902:	b2d1      	uxtb	r1, r2
 8015904:	4a0e      	ldr	r2, [pc, #56]	@ (8015940 <FATFS_LinkDriverEx+0x94>)
 8015906:	7251      	strb	r1, [r2, #9]
 8015908:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801590a:	7dbb      	ldrb	r3, [r7, #22]
 801590c:	3330      	adds	r3, #48	@ 0x30
 801590e:	b2da      	uxtb	r2, r3
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	3301      	adds	r3, #1
 8015918:	223a      	movs	r2, #58	@ 0x3a
 801591a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	3302      	adds	r3, #2
 8015920:	222f      	movs	r2, #47	@ 0x2f
 8015922:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	3303      	adds	r3, #3
 8015928:	2200      	movs	r2, #0
 801592a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801592c:	2300      	movs	r3, #0
 801592e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015930:	7dfb      	ldrb	r3, [r7, #23]
}
 8015932:	4618      	mov	r0, r3
 8015934:	371c      	adds	r7, #28
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
 801593e:	bf00      	nop
 8015940:	240052a4 	.word	0x240052a4

08015944 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801594e:	2200      	movs	r2, #0
 8015950:	6839      	ldr	r1, [r7, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7ff ffaa 	bl	80158ac <FATFS_LinkDriverEx>
 8015958:	4603      	mov	r3, r0
}
 801595a:	4618      	mov	r0, r3
 801595c:	3708      	adds	r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
	...

08015964 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015964:	b480      	push	{r7}
 8015966:	b085      	sub	sp, #20
 8015968:	af00      	add	r7, sp, #0
 801596a:	4603      	mov	r3, r0
 801596c:	6039      	str	r1, [r7, #0]
 801596e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015970:	88fb      	ldrh	r3, [r7, #6]
 8015972:	2b7f      	cmp	r3, #127	@ 0x7f
 8015974:	d802      	bhi.n	801597c <ff_convert+0x18>
		c = chr;
 8015976:	88fb      	ldrh	r3, [r7, #6]
 8015978:	81fb      	strh	r3, [r7, #14]
 801597a:	e025      	b.n	80159c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d00b      	beq.n	801599a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015982:	88fb      	ldrh	r3, [r7, #6]
 8015984:	2bff      	cmp	r3, #255	@ 0xff
 8015986:	d805      	bhi.n	8015994 <ff_convert+0x30>
 8015988:	88fb      	ldrh	r3, [r7, #6]
 801598a:	3b80      	subs	r3, #128	@ 0x80
 801598c:	4a12      	ldr	r2, [pc, #72]	@ (80159d8 <ff_convert+0x74>)
 801598e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015992:	e000      	b.n	8015996 <ff_convert+0x32>
 8015994:	2300      	movs	r3, #0
 8015996:	81fb      	strh	r3, [r7, #14]
 8015998:	e016      	b.n	80159c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801599a:	2300      	movs	r3, #0
 801599c:	81fb      	strh	r3, [r7, #14]
 801599e:	e009      	b.n	80159b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80159a0:	89fb      	ldrh	r3, [r7, #14]
 80159a2:	4a0d      	ldr	r2, [pc, #52]	@ (80159d8 <ff_convert+0x74>)
 80159a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159a8:	88fa      	ldrh	r2, [r7, #6]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d006      	beq.n	80159bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80159ae:	89fb      	ldrh	r3, [r7, #14]
 80159b0:	3301      	adds	r3, #1
 80159b2:	81fb      	strh	r3, [r7, #14]
 80159b4:	89fb      	ldrh	r3, [r7, #14]
 80159b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80159b8:	d9f2      	bls.n	80159a0 <ff_convert+0x3c>
 80159ba:	e000      	b.n	80159be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80159bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80159be:	89fb      	ldrh	r3, [r7, #14]
 80159c0:	3380      	adds	r3, #128	@ 0x80
 80159c2:	b29b      	uxth	r3, r3
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80159c8:	89fb      	ldrh	r3, [r7, #14]
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3714      	adds	r7, #20
 80159ce:	46bd      	mov	sp, r7
 80159d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	08018cf0 	.word	0x08018cf0

080159dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80159dc:	b480      	push	{r7}
 80159de:	b087      	sub	sp, #28
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4603      	mov	r3, r0
 80159e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80159e6:	88fb      	ldrh	r3, [r7, #6]
 80159e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80159ec:	d201      	bcs.n	80159f2 <ff_wtoupper+0x16>
 80159ee:	4b3e      	ldr	r3, [pc, #248]	@ (8015ae8 <ff_wtoupper+0x10c>)
 80159f0:	e000      	b.n	80159f4 <ff_wtoupper+0x18>
 80159f2:	4b3e      	ldr	r3, [pc, #248]	@ (8015aec <ff_wtoupper+0x110>)
 80159f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80159f6:	697b      	ldr	r3, [r7, #20]
 80159f8:	1c9a      	adds	r2, r3, #2
 80159fa:	617a      	str	r2, [r7, #20]
 80159fc:	881b      	ldrh	r3, [r3, #0]
 80159fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015a00:	8a7b      	ldrh	r3, [r7, #18]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d068      	beq.n	8015ad8 <ff_wtoupper+0xfc>
 8015a06:	88fa      	ldrh	r2, [r7, #6]
 8015a08:	8a7b      	ldrh	r3, [r7, #18]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d364      	bcc.n	8015ad8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	1c9a      	adds	r2, r3, #2
 8015a12:	617a      	str	r2, [r7, #20]
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	823b      	strh	r3, [r7, #16]
 8015a18:	8a3b      	ldrh	r3, [r7, #16]
 8015a1a:	0a1b      	lsrs	r3, r3, #8
 8015a1c:	81fb      	strh	r3, [r7, #14]
 8015a1e:	8a3b      	ldrh	r3, [r7, #16]
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015a24:	88fa      	ldrh	r2, [r7, #6]
 8015a26:	8a79      	ldrh	r1, [r7, #18]
 8015a28:	8a3b      	ldrh	r3, [r7, #16]
 8015a2a:	440b      	add	r3, r1
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	da49      	bge.n	8015ac4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015a30:	89fb      	ldrh	r3, [r7, #14]
 8015a32:	2b08      	cmp	r3, #8
 8015a34:	d84f      	bhi.n	8015ad6 <ff_wtoupper+0xfa>
 8015a36:	a201      	add	r2, pc, #4	@ (adr r2, 8015a3c <ff_wtoupper+0x60>)
 8015a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a3c:	08015a61 	.word	0x08015a61
 8015a40:	08015a73 	.word	0x08015a73
 8015a44:	08015a89 	.word	0x08015a89
 8015a48:	08015a91 	.word	0x08015a91
 8015a4c:	08015a99 	.word	0x08015a99
 8015a50:	08015aa1 	.word	0x08015aa1
 8015a54:	08015aa9 	.word	0x08015aa9
 8015a58:	08015ab1 	.word	0x08015ab1
 8015a5c:	08015ab9 	.word	0x08015ab9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015a60:	88fa      	ldrh	r2, [r7, #6]
 8015a62:	8a7b      	ldrh	r3, [r7, #18]
 8015a64:	1ad3      	subs	r3, r2, r3
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	697a      	ldr	r2, [r7, #20]
 8015a6a:	4413      	add	r3, r2
 8015a6c:	881b      	ldrh	r3, [r3, #0]
 8015a6e:	80fb      	strh	r3, [r7, #6]
 8015a70:	e027      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015a72:	88fa      	ldrh	r2, [r7, #6]
 8015a74:	8a7b      	ldrh	r3, [r7, #18]
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	f003 0301 	and.w	r3, r3, #1
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	88fa      	ldrh	r2, [r7, #6]
 8015a82:	1ad3      	subs	r3, r2, r3
 8015a84:	80fb      	strh	r3, [r7, #6]
 8015a86:	e01c      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015a88:	88fb      	ldrh	r3, [r7, #6]
 8015a8a:	3b10      	subs	r3, #16
 8015a8c:	80fb      	strh	r3, [r7, #6]
 8015a8e:	e018      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015a90:	88fb      	ldrh	r3, [r7, #6]
 8015a92:	3b20      	subs	r3, #32
 8015a94:	80fb      	strh	r3, [r7, #6]
 8015a96:	e014      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015a98:	88fb      	ldrh	r3, [r7, #6]
 8015a9a:	3b30      	subs	r3, #48	@ 0x30
 8015a9c:	80fb      	strh	r3, [r7, #6]
 8015a9e:	e010      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015aa0:	88fb      	ldrh	r3, [r7, #6]
 8015aa2:	3b1a      	subs	r3, #26
 8015aa4:	80fb      	strh	r3, [r7, #6]
 8015aa6:	e00c      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015aa8:	88fb      	ldrh	r3, [r7, #6]
 8015aaa:	3308      	adds	r3, #8
 8015aac:	80fb      	strh	r3, [r7, #6]
 8015aae:	e008      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015ab0:	88fb      	ldrh	r3, [r7, #6]
 8015ab2:	3b50      	subs	r3, #80	@ 0x50
 8015ab4:	80fb      	strh	r3, [r7, #6]
 8015ab6:	e004      	b.n	8015ac2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015ab8:	88fb      	ldrh	r3, [r7, #6]
 8015aba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8015abe:	80fb      	strh	r3, [r7, #6]
 8015ac0:	bf00      	nop
			}
			break;
 8015ac2:	e008      	b.n	8015ad6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d195      	bne.n	80159f6 <ff_wtoupper+0x1a>
 8015aca:	8a3b      	ldrh	r3, [r7, #16]
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	697a      	ldr	r2, [r7, #20]
 8015ad0:	4413      	add	r3, r2
 8015ad2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015ad4:	e78f      	b.n	80159f6 <ff_wtoupper+0x1a>
			break;
 8015ad6:	bf00      	nop
	}

	return chr;
 8015ad8:	88fb      	ldrh	r3, [r7, #6]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	371c      	adds	r7, #28
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	08018df0 	.word	0x08018df0
 8015aec:	08018fe4 	.word	0x08018fe4

08015af0 <malloc>:
 8015af0:	4b02      	ldr	r3, [pc, #8]	@ (8015afc <malloc+0xc>)
 8015af2:	4601      	mov	r1, r0
 8015af4:	6818      	ldr	r0, [r3, #0]
 8015af6:	f000 b82d 	b.w	8015b54 <_malloc_r>
 8015afa:	bf00      	nop
 8015afc:	24000260 	.word	0x24000260

08015b00 <free>:
 8015b00:	4b02      	ldr	r3, [pc, #8]	@ (8015b0c <free+0xc>)
 8015b02:	4601      	mov	r1, r0
 8015b04:	6818      	ldr	r0, [r3, #0]
 8015b06:	f001 b98f 	b.w	8016e28 <_free_r>
 8015b0a:	bf00      	nop
 8015b0c:	24000260 	.word	0x24000260

08015b10 <sbrk_aligned>:
 8015b10:	b570      	push	{r4, r5, r6, lr}
 8015b12:	4e0f      	ldr	r6, [pc, #60]	@ (8015b50 <sbrk_aligned+0x40>)
 8015b14:	460c      	mov	r4, r1
 8015b16:	6831      	ldr	r1, [r6, #0]
 8015b18:	4605      	mov	r5, r0
 8015b1a:	b911      	cbnz	r1, 8015b22 <sbrk_aligned+0x12>
 8015b1c:	f001 f8f0 	bl	8016d00 <_sbrk_r>
 8015b20:	6030      	str	r0, [r6, #0]
 8015b22:	4621      	mov	r1, r4
 8015b24:	4628      	mov	r0, r5
 8015b26:	f001 f8eb 	bl	8016d00 <_sbrk_r>
 8015b2a:	1c43      	adds	r3, r0, #1
 8015b2c:	d103      	bne.n	8015b36 <sbrk_aligned+0x26>
 8015b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8015b32:	4620      	mov	r0, r4
 8015b34:	bd70      	pop	{r4, r5, r6, pc}
 8015b36:	1cc4      	adds	r4, r0, #3
 8015b38:	f024 0403 	bic.w	r4, r4, #3
 8015b3c:	42a0      	cmp	r0, r4
 8015b3e:	d0f8      	beq.n	8015b32 <sbrk_aligned+0x22>
 8015b40:	1a21      	subs	r1, r4, r0
 8015b42:	4628      	mov	r0, r5
 8015b44:	f001 f8dc 	bl	8016d00 <_sbrk_r>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d1f2      	bne.n	8015b32 <sbrk_aligned+0x22>
 8015b4c:	e7ef      	b.n	8015b2e <sbrk_aligned+0x1e>
 8015b4e:	bf00      	nop
 8015b50:	240052b0 	.word	0x240052b0

08015b54 <_malloc_r>:
 8015b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b58:	1ccd      	adds	r5, r1, #3
 8015b5a:	f025 0503 	bic.w	r5, r5, #3
 8015b5e:	3508      	adds	r5, #8
 8015b60:	2d0c      	cmp	r5, #12
 8015b62:	bf38      	it	cc
 8015b64:	250c      	movcc	r5, #12
 8015b66:	2d00      	cmp	r5, #0
 8015b68:	4606      	mov	r6, r0
 8015b6a:	db01      	blt.n	8015b70 <_malloc_r+0x1c>
 8015b6c:	42a9      	cmp	r1, r5
 8015b6e:	d904      	bls.n	8015b7a <_malloc_r+0x26>
 8015b70:	230c      	movs	r3, #12
 8015b72:	6033      	str	r3, [r6, #0]
 8015b74:	2000      	movs	r0, #0
 8015b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c50 <_malloc_r+0xfc>
 8015b7e:	f000 f869 	bl	8015c54 <__malloc_lock>
 8015b82:	f8d8 3000 	ldr.w	r3, [r8]
 8015b86:	461c      	mov	r4, r3
 8015b88:	bb44      	cbnz	r4, 8015bdc <_malloc_r+0x88>
 8015b8a:	4629      	mov	r1, r5
 8015b8c:	4630      	mov	r0, r6
 8015b8e:	f7ff ffbf 	bl	8015b10 <sbrk_aligned>
 8015b92:	1c43      	adds	r3, r0, #1
 8015b94:	4604      	mov	r4, r0
 8015b96:	d158      	bne.n	8015c4a <_malloc_r+0xf6>
 8015b98:	f8d8 4000 	ldr.w	r4, [r8]
 8015b9c:	4627      	mov	r7, r4
 8015b9e:	2f00      	cmp	r7, #0
 8015ba0:	d143      	bne.n	8015c2a <_malloc_r+0xd6>
 8015ba2:	2c00      	cmp	r4, #0
 8015ba4:	d04b      	beq.n	8015c3e <_malloc_r+0xea>
 8015ba6:	6823      	ldr	r3, [r4, #0]
 8015ba8:	4639      	mov	r1, r7
 8015baa:	4630      	mov	r0, r6
 8015bac:	eb04 0903 	add.w	r9, r4, r3
 8015bb0:	f001 f8a6 	bl	8016d00 <_sbrk_r>
 8015bb4:	4581      	cmp	r9, r0
 8015bb6:	d142      	bne.n	8015c3e <_malloc_r+0xea>
 8015bb8:	6821      	ldr	r1, [r4, #0]
 8015bba:	1a6d      	subs	r5, r5, r1
 8015bbc:	4629      	mov	r1, r5
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	f7ff ffa6 	bl	8015b10 <sbrk_aligned>
 8015bc4:	3001      	adds	r0, #1
 8015bc6:	d03a      	beq.n	8015c3e <_malloc_r+0xea>
 8015bc8:	6823      	ldr	r3, [r4, #0]
 8015bca:	442b      	add	r3, r5
 8015bcc:	6023      	str	r3, [r4, #0]
 8015bce:	f8d8 3000 	ldr.w	r3, [r8]
 8015bd2:	685a      	ldr	r2, [r3, #4]
 8015bd4:	bb62      	cbnz	r2, 8015c30 <_malloc_r+0xdc>
 8015bd6:	f8c8 7000 	str.w	r7, [r8]
 8015bda:	e00f      	b.n	8015bfc <_malloc_r+0xa8>
 8015bdc:	6822      	ldr	r2, [r4, #0]
 8015bde:	1b52      	subs	r2, r2, r5
 8015be0:	d420      	bmi.n	8015c24 <_malloc_r+0xd0>
 8015be2:	2a0b      	cmp	r2, #11
 8015be4:	d917      	bls.n	8015c16 <_malloc_r+0xc2>
 8015be6:	1961      	adds	r1, r4, r5
 8015be8:	42a3      	cmp	r3, r4
 8015bea:	6025      	str	r5, [r4, #0]
 8015bec:	bf18      	it	ne
 8015bee:	6059      	strne	r1, [r3, #4]
 8015bf0:	6863      	ldr	r3, [r4, #4]
 8015bf2:	bf08      	it	eq
 8015bf4:	f8c8 1000 	streq.w	r1, [r8]
 8015bf8:	5162      	str	r2, [r4, r5]
 8015bfa:	604b      	str	r3, [r1, #4]
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f000 f82f 	bl	8015c60 <__malloc_unlock>
 8015c02:	f104 000b 	add.w	r0, r4, #11
 8015c06:	1d23      	adds	r3, r4, #4
 8015c08:	f020 0007 	bic.w	r0, r0, #7
 8015c0c:	1ac2      	subs	r2, r0, r3
 8015c0e:	bf1c      	itt	ne
 8015c10:	1a1b      	subne	r3, r3, r0
 8015c12:	50a3      	strne	r3, [r4, r2]
 8015c14:	e7af      	b.n	8015b76 <_malloc_r+0x22>
 8015c16:	6862      	ldr	r2, [r4, #4]
 8015c18:	42a3      	cmp	r3, r4
 8015c1a:	bf0c      	ite	eq
 8015c1c:	f8c8 2000 	streq.w	r2, [r8]
 8015c20:	605a      	strne	r2, [r3, #4]
 8015c22:	e7eb      	b.n	8015bfc <_malloc_r+0xa8>
 8015c24:	4623      	mov	r3, r4
 8015c26:	6864      	ldr	r4, [r4, #4]
 8015c28:	e7ae      	b.n	8015b88 <_malloc_r+0x34>
 8015c2a:	463c      	mov	r4, r7
 8015c2c:	687f      	ldr	r7, [r7, #4]
 8015c2e:	e7b6      	b.n	8015b9e <_malloc_r+0x4a>
 8015c30:	461a      	mov	r2, r3
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	42a3      	cmp	r3, r4
 8015c36:	d1fb      	bne.n	8015c30 <_malloc_r+0xdc>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	6053      	str	r3, [r2, #4]
 8015c3c:	e7de      	b.n	8015bfc <_malloc_r+0xa8>
 8015c3e:	230c      	movs	r3, #12
 8015c40:	6033      	str	r3, [r6, #0]
 8015c42:	4630      	mov	r0, r6
 8015c44:	f000 f80c 	bl	8015c60 <__malloc_unlock>
 8015c48:	e794      	b.n	8015b74 <_malloc_r+0x20>
 8015c4a:	6005      	str	r5, [r0, #0]
 8015c4c:	e7d6      	b.n	8015bfc <_malloc_r+0xa8>
 8015c4e:	bf00      	nop
 8015c50:	240052b4 	.word	0x240052b4

08015c54 <__malloc_lock>:
 8015c54:	4801      	ldr	r0, [pc, #4]	@ (8015c5c <__malloc_lock+0x8>)
 8015c56:	f001 b8a0 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8015c5a:	bf00      	nop
 8015c5c:	240053f8 	.word	0x240053f8

08015c60 <__malloc_unlock>:
 8015c60:	4801      	ldr	r0, [pc, #4]	@ (8015c68 <__malloc_unlock+0x8>)
 8015c62:	f001 b89b 	b.w	8016d9c <__retarget_lock_release_recursive>
 8015c66:	bf00      	nop
 8015c68:	240053f8 	.word	0x240053f8

08015c6c <sulp>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	4604      	mov	r4, r0
 8015c70:	460d      	mov	r5, r1
 8015c72:	4616      	mov	r6, r2
 8015c74:	ec45 4b10 	vmov	d0, r4, r5
 8015c78:	f001 ffe0 	bl	8017c3c <__ulp>
 8015c7c:	b17e      	cbz	r6, 8015c9e <sulp+0x32>
 8015c7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015c82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	dd09      	ble.n	8015c9e <sulp+0x32>
 8015c8a:	051b      	lsls	r3, r3, #20
 8015c8c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015c90:	2000      	movs	r0, #0
 8015c92:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015c96:	ec41 0b17 	vmov	d7, r0, r1
 8015c9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015c9e:	bd70      	pop	{r4, r5, r6, pc}

08015ca0 <_strtod_l>:
 8015ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca4:	ed2d 8b0a 	vpush	{d8-d12}
 8015ca8:	b097      	sub	sp, #92	@ 0x5c
 8015caa:	4688      	mov	r8, r1
 8015cac:	920e      	str	r2, [sp, #56]	@ 0x38
 8015cae:	2200      	movs	r2, #0
 8015cb0:	9212      	str	r2, [sp, #72]	@ 0x48
 8015cb2:	9005      	str	r0, [sp, #20]
 8015cb4:	f04f 0a00 	mov.w	sl, #0
 8015cb8:	f04f 0b00 	mov.w	fp, #0
 8015cbc:	460a      	mov	r2, r1
 8015cbe:	9211      	str	r2, [sp, #68]	@ 0x44
 8015cc0:	7811      	ldrb	r1, [r2, #0]
 8015cc2:	292b      	cmp	r1, #43	@ 0x2b
 8015cc4:	d04c      	beq.n	8015d60 <_strtod_l+0xc0>
 8015cc6:	d839      	bhi.n	8015d3c <_strtod_l+0x9c>
 8015cc8:	290d      	cmp	r1, #13
 8015cca:	d833      	bhi.n	8015d34 <_strtod_l+0x94>
 8015ccc:	2908      	cmp	r1, #8
 8015cce:	d833      	bhi.n	8015d38 <_strtod_l+0x98>
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d03c      	beq.n	8015d4e <_strtod_l+0xae>
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	9208      	str	r2, [sp, #32]
 8015cd8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015cda:	782a      	ldrb	r2, [r5, #0]
 8015cdc:	2a30      	cmp	r2, #48	@ 0x30
 8015cde:	f040 80b5 	bne.w	8015e4c <_strtod_l+0x1ac>
 8015ce2:	786a      	ldrb	r2, [r5, #1]
 8015ce4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015ce8:	2a58      	cmp	r2, #88	@ 0x58
 8015cea:	d170      	bne.n	8015dce <_strtod_l+0x12e>
 8015cec:	9302      	str	r3, [sp, #8]
 8015cee:	9b08      	ldr	r3, [sp, #32]
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	ab12      	add	r3, sp, #72	@ 0x48
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	4a8b      	ldr	r2, [pc, #556]	@ (8015f24 <_strtod_l+0x284>)
 8015cf8:	9805      	ldr	r0, [sp, #20]
 8015cfa:	ab13      	add	r3, sp, #76	@ 0x4c
 8015cfc:	a911      	add	r1, sp, #68	@ 0x44
 8015cfe:	f001 f945 	bl	8016f8c <__gethex>
 8015d02:	f010 060f 	ands.w	r6, r0, #15
 8015d06:	4604      	mov	r4, r0
 8015d08:	d005      	beq.n	8015d16 <_strtod_l+0x76>
 8015d0a:	2e06      	cmp	r6, #6
 8015d0c:	d12a      	bne.n	8015d64 <_strtod_l+0xc4>
 8015d0e:	3501      	adds	r5, #1
 8015d10:	2300      	movs	r3, #0
 8015d12:	9511      	str	r5, [sp, #68]	@ 0x44
 8015d14:	9308      	str	r3, [sp, #32]
 8015d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	f040 852f 	bne.w	801677c <_strtod_l+0xadc>
 8015d1e:	9b08      	ldr	r3, [sp, #32]
 8015d20:	ec4b ab10 	vmov	d0, sl, fp
 8015d24:	b1cb      	cbz	r3, 8015d5a <_strtod_l+0xba>
 8015d26:	eeb1 0b40 	vneg.f64	d0, d0
 8015d2a:	b017      	add	sp, #92	@ 0x5c
 8015d2c:	ecbd 8b0a 	vpop	{d8-d12}
 8015d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d34:	2920      	cmp	r1, #32
 8015d36:	d1cd      	bne.n	8015cd4 <_strtod_l+0x34>
 8015d38:	3201      	adds	r2, #1
 8015d3a:	e7c0      	b.n	8015cbe <_strtod_l+0x1e>
 8015d3c:	292d      	cmp	r1, #45	@ 0x2d
 8015d3e:	d1c9      	bne.n	8015cd4 <_strtod_l+0x34>
 8015d40:	2101      	movs	r1, #1
 8015d42:	9108      	str	r1, [sp, #32]
 8015d44:	1c51      	adds	r1, r2, #1
 8015d46:	9111      	str	r1, [sp, #68]	@ 0x44
 8015d48:	7852      	ldrb	r2, [r2, #1]
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	d1c4      	bne.n	8015cd8 <_strtod_l+0x38>
 8015d4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d50:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f040 850f 	bne.w	8016778 <_strtod_l+0xad8>
 8015d5a:	ec4b ab10 	vmov	d0, sl, fp
 8015d5e:	e7e4      	b.n	8015d2a <_strtod_l+0x8a>
 8015d60:	2100      	movs	r1, #0
 8015d62:	e7ee      	b.n	8015d42 <_strtod_l+0xa2>
 8015d64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015d66:	b13a      	cbz	r2, 8015d78 <_strtod_l+0xd8>
 8015d68:	2135      	movs	r1, #53	@ 0x35
 8015d6a:	a814      	add	r0, sp, #80	@ 0x50
 8015d6c:	f002 f85d 	bl	8017e2a <__copybits>
 8015d70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015d72:	9805      	ldr	r0, [sp, #20]
 8015d74:	f001 fc2e 	bl	80175d4 <_Bfree>
 8015d78:	1e73      	subs	r3, r6, #1
 8015d7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	d806      	bhi.n	8015d8e <_strtod_l+0xee>
 8015d80:	e8df f003 	tbb	[pc, r3]
 8015d84:	201d0314 	.word	0x201d0314
 8015d88:	14          	.byte	0x14
 8015d89:	00          	.byte	0x00
 8015d8a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015d8e:	05e3      	lsls	r3, r4, #23
 8015d90:	bf48      	it	mi
 8015d92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d9a:	0d1b      	lsrs	r3, r3, #20
 8015d9c:	051b      	lsls	r3, r3, #20
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1b9      	bne.n	8015d16 <_strtod_l+0x76>
 8015da2:	f000 ffcf 	bl	8016d44 <__errno>
 8015da6:	2322      	movs	r3, #34	@ 0x22
 8015da8:	6003      	str	r3, [r0, #0]
 8015daa:	e7b4      	b.n	8015d16 <_strtod_l+0x76>
 8015dac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015db0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015db4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015db8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015dbc:	e7e7      	b.n	8015d8e <_strtod_l+0xee>
 8015dbe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015f2c <_strtod_l+0x28c>
 8015dc2:	e7e4      	b.n	8015d8e <_strtod_l+0xee>
 8015dc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015dc8:	f04f 3aff 	mov.w	sl, #4294967295
 8015dcc:	e7df      	b.n	8015d8e <_strtod_l+0xee>
 8015dce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015dd0:	1c5a      	adds	r2, r3, #1
 8015dd2:	9211      	str	r2, [sp, #68]	@ 0x44
 8015dd4:	785b      	ldrb	r3, [r3, #1]
 8015dd6:	2b30      	cmp	r3, #48	@ 0x30
 8015dd8:	d0f9      	beq.n	8015dce <_strtod_l+0x12e>
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d09b      	beq.n	8015d16 <_strtod_l+0x76>
 8015dde:	2301      	movs	r3, #1
 8015de0:	2600      	movs	r6, #0
 8015de2:	9307      	str	r3, [sp, #28]
 8015de4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8015de8:	46b1      	mov	r9, r6
 8015dea:	4635      	mov	r5, r6
 8015dec:	220a      	movs	r2, #10
 8015dee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015df0:	7804      	ldrb	r4, [r0, #0]
 8015df2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015df6:	b2d9      	uxtb	r1, r3
 8015df8:	2909      	cmp	r1, #9
 8015dfa:	d929      	bls.n	8015e50 <_strtod_l+0x1b0>
 8015dfc:	494a      	ldr	r1, [pc, #296]	@ (8015f28 <_strtod_l+0x288>)
 8015dfe:	2201      	movs	r2, #1
 8015e00:	f000 fec5 	bl	8016b8e <strncmp>
 8015e04:	b378      	cbz	r0, 8015e66 <_strtod_l+0x1c6>
 8015e06:	2000      	movs	r0, #0
 8015e08:	4622      	mov	r2, r4
 8015e0a:	462b      	mov	r3, r5
 8015e0c:	4607      	mov	r7, r0
 8015e0e:	9006      	str	r0, [sp, #24]
 8015e10:	2a65      	cmp	r2, #101	@ 0x65
 8015e12:	d001      	beq.n	8015e18 <_strtod_l+0x178>
 8015e14:	2a45      	cmp	r2, #69	@ 0x45
 8015e16:	d117      	bne.n	8015e48 <_strtod_l+0x1a8>
 8015e18:	b91b      	cbnz	r3, 8015e22 <_strtod_l+0x182>
 8015e1a:	9b07      	ldr	r3, [sp, #28]
 8015e1c:	4303      	orrs	r3, r0
 8015e1e:	d096      	beq.n	8015d4e <_strtod_l+0xae>
 8015e20:	2300      	movs	r3, #0
 8015e22:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015e26:	f108 0201 	add.w	r2, r8, #1
 8015e2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015e2c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015e30:	2a2b      	cmp	r2, #43	@ 0x2b
 8015e32:	d06b      	beq.n	8015f0c <_strtod_l+0x26c>
 8015e34:	2a2d      	cmp	r2, #45	@ 0x2d
 8015e36:	d071      	beq.n	8015f1c <_strtod_l+0x27c>
 8015e38:	f04f 0e00 	mov.w	lr, #0
 8015e3c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015e40:	2c09      	cmp	r4, #9
 8015e42:	d979      	bls.n	8015f38 <_strtod_l+0x298>
 8015e44:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015e48:	2400      	movs	r4, #0
 8015e4a:	e094      	b.n	8015f76 <_strtod_l+0x2d6>
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	e7c7      	b.n	8015de0 <_strtod_l+0x140>
 8015e50:	2d08      	cmp	r5, #8
 8015e52:	f100 0001 	add.w	r0, r0, #1
 8015e56:	bfd4      	ite	le
 8015e58:	fb02 3909 	mlale	r9, r2, r9, r3
 8015e5c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015e60:	3501      	adds	r5, #1
 8015e62:	9011      	str	r0, [sp, #68]	@ 0x44
 8015e64:	e7c3      	b.n	8015dee <_strtod_l+0x14e>
 8015e66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e68:	1c5a      	adds	r2, r3, #1
 8015e6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015e6c:	785a      	ldrb	r2, [r3, #1]
 8015e6e:	b375      	cbz	r5, 8015ece <_strtod_l+0x22e>
 8015e70:	4607      	mov	r7, r0
 8015e72:	462b      	mov	r3, r5
 8015e74:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015e78:	2909      	cmp	r1, #9
 8015e7a:	d913      	bls.n	8015ea4 <_strtod_l+0x204>
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	9106      	str	r1, [sp, #24]
 8015e80:	e7c6      	b.n	8015e10 <_strtod_l+0x170>
 8015e82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e84:	1c5a      	adds	r2, r3, #1
 8015e86:	9211      	str	r2, [sp, #68]	@ 0x44
 8015e88:	785a      	ldrb	r2, [r3, #1]
 8015e8a:	3001      	adds	r0, #1
 8015e8c:	2a30      	cmp	r2, #48	@ 0x30
 8015e8e:	d0f8      	beq.n	8015e82 <_strtod_l+0x1e2>
 8015e90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015e94:	2b08      	cmp	r3, #8
 8015e96:	f200 8476 	bhi.w	8016786 <_strtod_l+0xae6>
 8015e9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e9e:	4607      	mov	r7, r0
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	3a30      	subs	r2, #48	@ 0x30
 8015ea6:	f100 0101 	add.w	r1, r0, #1
 8015eaa:	d023      	beq.n	8015ef4 <_strtod_l+0x254>
 8015eac:	440f      	add	r7, r1
 8015eae:	eb00 0c03 	add.w	ip, r0, r3
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	240a      	movs	r4, #10
 8015eb6:	4561      	cmp	r1, ip
 8015eb8:	d10b      	bne.n	8015ed2 <_strtod_l+0x232>
 8015eba:	1c5c      	adds	r4, r3, #1
 8015ebc:	4403      	add	r3, r0
 8015ebe:	2b08      	cmp	r3, #8
 8015ec0:	4404      	add	r4, r0
 8015ec2:	dc11      	bgt.n	8015ee8 <_strtod_l+0x248>
 8015ec4:	230a      	movs	r3, #10
 8015ec6:	fb03 2909 	mla	r9, r3, r9, r2
 8015eca:	2100      	movs	r1, #0
 8015ecc:	e013      	b.n	8015ef6 <_strtod_l+0x256>
 8015ece:	4628      	mov	r0, r5
 8015ed0:	e7dc      	b.n	8015e8c <_strtod_l+0x1ec>
 8015ed2:	2908      	cmp	r1, #8
 8015ed4:	f101 0101 	add.w	r1, r1, #1
 8015ed8:	dc02      	bgt.n	8015ee0 <_strtod_l+0x240>
 8015eda:	fb04 f909 	mul.w	r9, r4, r9
 8015ede:	e7ea      	b.n	8015eb6 <_strtod_l+0x216>
 8015ee0:	2910      	cmp	r1, #16
 8015ee2:	bfd8      	it	le
 8015ee4:	4366      	mulle	r6, r4
 8015ee6:	e7e6      	b.n	8015eb6 <_strtod_l+0x216>
 8015ee8:	2b0f      	cmp	r3, #15
 8015eea:	dcee      	bgt.n	8015eca <_strtod_l+0x22a>
 8015eec:	230a      	movs	r3, #10
 8015eee:	fb03 2606 	mla	r6, r3, r6, r2
 8015ef2:	e7ea      	b.n	8015eca <_strtod_l+0x22a>
 8015ef4:	461c      	mov	r4, r3
 8015ef6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ef8:	1c5a      	adds	r2, r3, #1
 8015efa:	9211      	str	r2, [sp, #68]	@ 0x44
 8015efc:	785a      	ldrb	r2, [r3, #1]
 8015efe:	4608      	mov	r0, r1
 8015f00:	4623      	mov	r3, r4
 8015f02:	e7b7      	b.n	8015e74 <_strtod_l+0x1d4>
 8015f04:	2301      	movs	r3, #1
 8015f06:	2700      	movs	r7, #0
 8015f08:	9306      	str	r3, [sp, #24]
 8015f0a:	e786      	b.n	8015e1a <_strtod_l+0x17a>
 8015f0c:	f04f 0e00 	mov.w	lr, #0
 8015f10:	f108 0202 	add.w	r2, r8, #2
 8015f14:	9211      	str	r2, [sp, #68]	@ 0x44
 8015f16:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015f1a:	e78f      	b.n	8015e3c <_strtod_l+0x19c>
 8015f1c:	f04f 0e01 	mov.w	lr, #1
 8015f20:	e7f6      	b.n	8015f10 <_strtod_l+0x270>
 8015f22:	bf00      	nop
 8015f24:	080190c4 	.word	0x080190c4
 8015f28:	080190a0 	.word	0x080190a0
 8015f2c:	7ff00000 	.word	0x7ff00000
 8015f30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015f32:	1c54      	adds	r4, r2, #1
 8015f34:	9411      	str	r4, [sp, #68]	@ 0x44
 8015f36:	7852      	ldrb	r2, [r2, #1]
 8015f38:	2a30      	cmp	r2, #48	@ 0x30
 8015f3a:	d0f9      	beq.n	8015f30 <_strtod_l+0x290>
 8015f3c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015f40:	2c08      	cmp	r4, #8
 8015f42:	d881      	bhi.n	8015e48 <_strtod_l+0x1a8>
 8015f44:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015f48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015f4e:	1c51      	adds	r1, r2, #1
 8015f50:	9111      	str	r1, [sp, #68]	@ 0x44
 8015f52:	7852      	ldrb	r2, [r2, #1]
 8015f54:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015f58:	2c09      	cmp	r4, #9
 8015f5a:	d938      	bls.n	8015fce <_strtod_l+0x32e>
 8015f5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015f5e:	1b0c      	subs	r4, r1, r4
 8015f60:	2c08      	cmp	r4, #8
 8015f62:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015f66:	dc02      	bgt.n	8015f6e <_strtod_l+0x2ce>
 8015f68:	4564      	cmp	r4, ip
 8015f6a:	bfa8      	it	ge
 8015f6c:	4664      	movge	r4, ip
 8015f6e:	f1be 0f00 	cmp.w	lr, #0
 8015f72:	d000      	beq.n	8015f76 <_strtod_l+0x2d6>
 8015f74:	4264      	negs	r4, r4
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d14e      	bne.n	8016018 <_strtod_l+0x378>
 8015f7a:	9b07      	ldr	r3, [sp, #28]
 8015f7c:	4318      	orrs	r0, r3
 8015f7e:	f47f aeca 	bne.w	8015d16 <_strtod_l+0x76>
 8015f82:	9b06      	ldr	r3, [sp, #24]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	f47f aee2 	bne.w	8015d4e <_strtod_l+0xae>
 8015f8a:	2a69      	cmp	r2, #105	@ 0x69
 8015f8c:	d027      	beq.n	8015fde <_strtod_l+0x33e>
 8015f8e:	dc24      	bgt.n	8015fda <_strtod_l+0x33a>
 8015f90:	2a49      	cmp	r2, #73	@ 0x49
 8015f92:	d024      	beq.n	8015fde <_strtod_l+0x33e>
 8015f94:	2a4e      	cmp	r2, #78	@ 0x4e
 8015f96:	f47f aeda 	bne.w	8015d4e <_strtod_l+0xae>
 8015f9a:	4997      	ldr	r1, [pc, #604]	@ (80161f8 <_strtod_l+0x558>)
 8015f9c:	a811      	add	r0, sp, #68	@ 0x44
 8015f9e:	f001 fa17 	bl	80173d0 <__match>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	f43f aed3 	beq.w	8015d4e <_strtod_l+0xae>
 8015fa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	2b28      	cmp	r3, #40	@ 0x28
 8015fae:	d12d      	bne.n	801600c <_strtod_l+0x36c>
 8015fb0:	4992      	ldr	r1, [pc, #584]	@ (80161fc <_strtod_l+0x55c>)
 8015fb2:	aa14      	add	r2, sp, #80	@ 0x50
 8015fb4:	a811      	add	r0, sp, #68	@ 0x44
 8015fb6:	f001 fa1f 	bl	80173f8 <__hexnan>
 8015fba:	2805      	cmp	r0, #5
 8015fbc:	d126      	bne.n	801600c <_strtod_l+0x36c>
 8015fbe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015fc0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015fc4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015fc8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015fcc:	e6a3      	b.n	8015d16 <_strtod_l+0x76>
 8015fce:	240a      	movs	r4, #10
 8015fd0:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015fd4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015fd8:	e7b8      	b.n	8015f4c <_strtod_l+0x2ac>
 8015fda:	2a6e      	cmp	r2, #110	@ 0x6e
 8015fdc:	e7db      	b.n	8015f96 <_strtod_l+0x2f6>
 8015fde:	4988      	ldr	r1, [pc, #544]	@ (8016200 <_strtod_l+0x560>)
 8015fe0:	a811      	add	r0, sp, #68	@ 0x44
 8015fe2:	f001 f9f5 	bl	80173d0 <__match>
 8015fe6:	2800      	cmp	r0, #0
 8015fe8:	f43f aeb1 	beq.w	8015d4e <_strtod_l+0xae>
 8015fec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015fee:	4985      	ldr	r1, [pc, #532]	@ (8016204 <_strtod_l+0x564>)
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	a811      	add	r0, sp, #68	@ 0x44
 8015ff4:	9311      	str	r3, [sp, #68]	@ 0x44
 8015ff6:	f001 f9eb 	bl	80173d0 <__match>
 8015ffa:	b910      	cbnz	r0, 8016002 <_strtod_l+0x362>
 8015ffc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ffe:	3301      	adds	r3, #1
 8016000:	9311      	str	r3, [sp, #68]	@ 0x44
 8016002:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016218 <_strtod_l+0x578>
 8016006:	f04f 0a00 	mov.w	sl, #0
 801600a:	e684      	b.n	8015d16 <_strtod_l+0x76>
 801600c:	487e      	ldr	r0, [pc, #504]	@ (8016208 <_strtod_l+0x568>)
 801600e:	f000 fedf 	bl	8016dd0 <nan>
 8016012:	ec5b ab10 	vmov	sl, fp, d0
 8016016:	e67e      	b.n	8015d16 <_strtod_l+0x76>
 8016018:	ee07 9a90 	vmov	s15, r9
 801601c:	1be2      	subs	r2, r4, r7
 801601e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016022:	2d00      	cmp	r5, #0
 8016024:	bf08      	it	eq
 8016026:	461d      	moveq	r5, r3
 8016028:	2b10      	cmp	r3, #16
 801602a:	9209      	str	r2, [sp, #36]	@ 0x24
 801602c:	461a      	mov	r2, r3
 801602e:	bfa8      	it	ge
 8016030:	2210      	movge	r2, #16
 8016032:	2b09      	cmp	r3, #9
 8016034:	ec5b ab17 	vmov	sl, fp, d7
 8016038:	dc15      	bgt.n	8016066 <_strtod_l+0x3c6>
 801603a:	1be1      	subs	r1, r4, r7
 801603c:	2900      	cmp	r1, #0
 801603e:	f43f ae6a 	beq.w	8015d16 <_strtod_l+0x76>
 8016042:	eba4 0107 	sub.w	r1, r4, r7
 8016046:	dd72      	ble.n	801612e <_strtod_l+0x48e>
 8016048:	2916      	cmp	r1, #22
 801604a:	dc59      	bgt.n	8016100 <_strtod_l+0x460>
 801604c:	4b6f      	ldr	r3, [pc, #444]	@ (801620c <_strtod_l+0x56c>)
 801604e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016054:	ed93 7b00 	vldr	d7, [r3]
 8016058:	ec4b ab16 	vmov	d6, sl, fp
 801605c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016060:	ec5b ab17 	vmov	sl, fp, d7
 8016064:	e657      	b.n	8015d16 <_strtod_l+0x76>
 8016066:	4969      	ldr	r1, [pc, #420]	@ (801620c <_strtod_l+0x56c>)
 8016068:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801606c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016070:	ee06 6a90 	vmov	s13, r6
 8016074:	2b0f      	cmp	r3, #15
 8016076:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801607a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801607e:	ec5b ab16 	vmov	sl, fp, d6
 8016082:	ddda      	ble.n	801603a <_strtod_l+0x39a>
 8016084:	1a9a      	subs	r2, r3, r2
 8016086:	1be1      	subs	r1, r4, r7
 8016088:	440a      	add	r2, r1
 801608a:	2a00      	cmp	r2, #0
 801608c:	f340 8094 	ble.w	80161b8 <_strtod_l+0x518>
 8016090:	f012 000f 	ands.w	r0, r2, #15
 8016094:	d00a      	beq.n	80160ac <_strtod_l+0x40c>
 8016096:	495d      	ldr	r1, [pc, #372]	@ (801620c <_strtod_l+0x56c>)
 8016098:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801609c:	ed91 7b00 	vldr	d7, [r1]
 80160a0:	ec4b ab16 	vmov	d6, sl, fp
 80160a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80160a8:	ec5b ab17 	vmov	sl, fp, d7
 80160ac:	f032 020f 	bics.w	r2, r2, #15
 80160b0:	d073      	beq.n	801619a <_strtod_l+0x4fa>
 80160b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80160b6:	dd47      	ble.n	8016148 <_strtod_l+0x4a8>
 80160b8:	2400      	movs	r4, #0
 80160ba:	4625      	mov	r5, r4
 80160bc:	9407      	str	r4, [sp, #28]
 80160be:	4626      	mov	r6, r4
 80160c0:	9a05      	ldr	r2, [sp, #20]
 80160c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016218 <_strtod_l+0x578>
 80160c6:	2322      	movs	r3, #34	@ 0x22
 80160c8:	6013      	str	r3, [r2, #0]
 80160ca:	f04f 0a00 	mov.w	sl, #0
 80160ce:	9b07      	ldr	r3, [sp, #28]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	f43f ae20 	beq.w	8015d16 <_strtod_l+0x76>
 80160d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80160d8:	9805      	ldr	r0, [sp, #20]
 80160da:	f001 fa7b 	bl	80175d4 <_Bfree>
 80160de:	9805      	ldr	r0, [sp, #20]
 80160e0:	4631      	mov	r1, r6
 80160e2:	f001 fa77 	bl	80175d4 <_Bfree>
 80160e6:	9805      	ldr	r0, [sp, #20]
 80160e8:	4629      	mov	r1, r5
 80160ea:	f001 fa73 	bl	80175d4 <_Bfree>
 80160ee:	9907      	ldr	r1, [sp, #28]
 80160f0:	9805      	ldr	r0, [sp, #20]
 80160f2:	f001 fa6f 	bl	80175d4 <_Bfree>
 80160f6:	9805      	ldr	r0, [sp, #20]
 80160f8:	4621      	mov	r1, r4
 80160fa:	f001 fa6b 	bl	80175d4 <_Bfree>
 80160fe:	e60a      	b.n	8015d16 <_strtod_l+0x76>
 8016100:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016104:	1be0      	subs	r0, r4, r7
 8016106:	4281      	cmp	r1, r0
 8016108:	dbbc      	blt.n	8016084 <_strtod_l+0x3e4>
 801610a:	4a40      	ldr	r2, [pc, #256]	@ (801620c <_strtod_l+0x56c>)
 801610c:	f1c3 030f 	rsb	r3, r3, #15
 8016110:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016114:	ed91 7b00 	vldr	d7, [r1]
 8016118:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801611a:	ec4b ab16 	vmov	d6, sl, fp
 801611e:	1acb      	subs	r3, r1, r3
 8016120:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016124:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016128:	ed92 6b00 	vldr	d6, [r2]
 801612c:	e796      	b.n	801605c <_strtod_l+0x3bc>
 801612e:	3116      	adds	r1, #22
 8016130:	dba8      	blt.n	8016084 <_strtod_l+0x3e4>
 8016132:	4b36      	ldr	r3, [pc, #216]	@ (801620c <_strtod_l+0x56c>)
 8016134:	1b3c      	subs	r4, r7, r4
 8016136:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801613a:	ed94 7b00 	vldr	d7, [r4]
 801613e:	ec4b ab16 	vmov	d6, sl, fp
 8016142:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016146:	e78b      	b.n	8016060 <_strtod_l+0x3c0>
 8016148:	2000      	movs	r0, #0
 801614a:	ec4b ab17 	vmov	d7, sl, fp
 801614e:	4e30      	ldr	r6, [pc, #192]	@ (8016210 <_strtod_l+0x570>)
 8016150:	1112      	asrs	r2, r2, #4
 8016152:	4601      	mov	r1, r0
 8016154:	2a01      	cmp	r2, #1
 8016156:	dc23      	bgt.n	80161a0 <_strtod_l+0x500>
 8016158:	b108      	cbz	r0, 801615e <_strtod_l+0x4be>
 801615a:	ec5b ab17 	vmov	sl, fp, d7
 801615e:	4a2c      	ldr	r2, [pc, #176]	@ (8016210 <_strtod_l+0x570>)
 8016160:	482c      	ldr	r0, [pc, #176]	@ (8016214 <_strtod_l+0x574>)
 8016162:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016166:	ed92 7b00 	vldr	d7, [r2]
 801616a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801616e:	ec4b ab16 	vmov	d6, sl, fp
 8016172:	4a29      	ldr	r2, [pc, #164]	@ (8016218 <_strtod_l+0x578>)
 8016174:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016178:	ee17 1a90 	vmov	r1, s15
 801617c:	400a      	ands	r2, r1
 801617e:	4282      	cmp	r2, r0
 8016180:	ec5b ab17 	vmov	sl, fp, d7
 8016184:	d898      	bhi.n	80160b8 <_strtod_l+0x418>
 8016186:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801618a:	4282      	cmp	r2, r0
 801618c:	bf86      	itte	hi
 801618e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801621c <_strtod_l+0x57c>
 8016192:	f04f 3aff 	movhi.w	sl, #4294967295
 8016196:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801619a:	2200      	movs	r2, #0
 801619c:	9206      	str	r2, [sp, #24]
 801619e:	e076      	b.n	801628e <_strtod_l+0x5ee>
 80161a0:	f012 0f01 	tst.w	r2, #1
 80161a4:	d004      	beq.n	80161b0 <_strtod_l+0x510>
 80161a6:	ed96 6b00 	vldr	d6, [r6]
 80161aa:	2001      	movs	r0, #1
 80161ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80161b0:	3101      	adds	r1, #1
 80161b2:	1052      	asrs	r2, r2, #1
 80161b4:	3608      	adds	r6, #8
 80161b6:	e7cd      	b.n	8016154 <_strtod_l+0x4b4>
 80161b8:	d0ef      	beq.n	801619a <_strtod_l+0x4fa>
 80161ba:	4252      	negs	r2, r2
 80161bc:	f012 000f 	ands.w	r0, r2, #15
 80161c0:	d00a      	beq.n	80161d8 <_strtod_l+0x538>
 80161c2:	4912      	ldr	r1, [pc, #72]	@ (801620c <_strtod_l+0x56c>)
 80161c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80161c8:	ed91 7b00 	vldr	d7, [r1]
 80161cc:	ec4b ab16 	vmov	d6, sl, fp
 80161d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80161d4:	ec5b ab17 	vmov	sl, fp, d7
 80161d8:	1112      	asrs	r2, r2, #4
 80161da:	d0de      	beq.n	801619a <_strtod_l+0x4fa>
 80161dc:	2a1f      	cmp	r2, #31
 80161de:	dd1f      	ble.n	8016220 <_strtod_l+0x580>
 80161e0:	2400      	movs	r4, #0
 80161e2:	4625      	mov	r5, r4
 80161e4:	9407      	str	r4, [sp, #28]
 80161e6:	4626      	mov	r6, r4
 80161e8:	9a05      	ldr	r2, [sp, #20]
 80161ea:	2322      	movs	r3, #34	@ 0x22
 80161ec:	f04f 0a00 	mov.w	sl, #0
 80161f0:	f04f 0b00 	mov.w	fp, #0
 80161f4:	6013      	str	r3, [r2, #0]
 80161f6:	e76a      	b.n	80160ce <_strtod_l+0x42e>
 80161f8:	080190ab 	.word	0x080190ab
 80161fc:	080190b0 	.word	0x080190b0
 8016200:	080190a2 	.word	0x080190a2
 8016204:	080190a5 	.word	0x080190a5
 8016208:	080192b5 	.word	0x080192b5
 801620c:	080193b8 	.word	0x080193b8
 8016210:	08019390 	.word	0x08019390
 8016214:	7ca00000 	.word	0x7ca00000
 8016218:	7ff00000 	.word	0x7ff00000
 801621c:	7fefffff 	.word	0x7fefffff
 8016220:	f012 0110 	ands.w	r1, r2, #16
 8016224:	bf18      	it	ne
 8016226:	216a      	movne	r1, #106	@ 0x6a
 8016228:	9106      	str	r1, [sp, #24]
 801622a:	ec4b ab17 	vmov	d7, sl, fp
 801622e:	49b0      	ldr	r1, [pc, #704]	@ (80164f0 <_strtod_l+0x850>)
 8016230:	2000      	movs	r0, #0
 8016232:	07d6      	lsls	r6, r2, #31
 8016234:	d504      	bpl.n	8016240 <_strtod_l+0x5a0>
 8016236:	ed91 6b00 	vldr	d6, [r1]
 801623a:	2001      	movs	r0, #1
 801623c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016240:	1052      	asrs	r2, r2, #1
 8016242:	f101 0108 	add.w	r1, r1, #8
 8016246:	d1f4      	bne.n	8016232 <_strtod_l+0x592>
 8016248:	b108      	cbz	r0, 801624e <_strtod_l+0x5ae>
 801624a:	ec5b ab17 	vmov	sl, fp, d7
 801624e:	9a06      	ldr	r2, [sp, #24]
 8016250:	b1b2      	cbz	r2, 8016280 <_strtod_l+0x5e0>
 8016252:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8016256:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801625a:	2a00      	cmp	r2, #0
 801625c:	4658      	mov	r0, fp
 801625e:	dd0f      	ble.n	8016280 <_strtod_l+0x5e0>
 8016260:	2a1f      	cmp	r2, #31
 8016262:	dd55      	ble.n	8016310 <_strtod_l+0x670>
 8016264:	2a34      	cmp	r2, #52	@ 0x34
 8016266:	bfde      	ittt	le
 8016268:	f04f 32ff 	movle.w	r2, #4294967295
 801626c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016270:	408a      	lslle	r2, r1
 8016272:	f04f 0a00 	mov.w	sl, #0
 8016276:	bfcc      	ite	gt
 8016278:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801627c:	ea02 0b00 	andle.w	fp, r2, r0
 8016280:	ec4b ab17 	vmov	d7, sl, fp
 8016284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801628c:	d0a8      	beq.n	80161e0 <_strtod_l+0x540>
 801628e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016290:	9805      	ldr	r0, [sp, #20]
 8016292:	f8cd 9000 	str.w	r9, [sp]
 8016296:	462a      	mov	r2, r5
 8016298:	f001 fa04 	bl	80176a4 <__s2b>
 801629c:	9007      	str	r0, [sp, #28]
 801629e:	2800      	cmp	r0, #0
 80162a0:	f43f af0a 	beq.w	80160b8 <_strtod_l+0x418>
 80162a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162a6:	1b3f      	subs	r7, r7, r4
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	bfb4      	ite	lt
 80162ac:	463b      	movlt	r3, r7
 80162ae:	2300      	movge	r3, #0
 80162b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80162b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162b4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80164e0 <_strtod_l+0x840>
 80162b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80162bc:	2400      	movs	r4, #0
 80162be:	930d      	str	r3, [sp, #52]	@ 0x34
 80162c0:	4625      	mov	r5, r4
 80162c2:	9b07      	ldr	r3, [sp, #28]
 80162c4:	9805      	ldr	r0, [sp, #20]
 80162c6:	6859      	ldr	r1, [r3, #4]
 80162c8:	f001 f944 	bl	8017554 <_Balloc>
 80162cc:	4606      	mov	r6, r0
 80162ce:	2800      	cmp	r0, #0
 80162d0:	f43f aef6 	beq.w	80160c0 <_strtod_l+0x420>
 80162d4:	9b07      	ldr	r3, [sp, #28]
 80162d6:	691a      	ldr	r2, [r3, #16]
 80162d8:	ec4b ab19 	vmov	d9, sl, fp
 80162dc:	3202      	adds	r2, #2
 80162de:	f103 010c 	add.w	r1, r3, #12
 80162e2:	0092      	lsls	r2, r2, #2
 80162e4:	300c      	adds	r0, #12
 80162e6:	f000 fd62 	bl	8016dae <memcpy>
 80162ea:	eeb0 0b49 	vmov.f64	d0, d9
 80162ee:	9805      	ldr	r0, [sp, #20]
 80162f0:	aa14      	add	r2, sp, #80	@ 0x50
 80162f2:	a913      	add	r1, sp, #76	@ 0x4c
 80162f4:	f001 fd12 	bl	8017d1c <__d2b>
 80162f8:	9012      	str	r0, [sp, #72]	@ 0x48
 80162fa:	2800      	cmp	r0, #0
 80162fc:	f43f aee0 	beq.w	80160c0 <_strtod_l+0x420>
 8016300:	9805      	ldr	r0, [sp, #20]
 8016302:	2101      	movs	r1, #1
 8016304:	f001 fa64 	bl	80177d0 <__i2b>
 8016308:	4605      	mov	r5, r0
 801630a:	b940      	cbnz	r0, 801631e <_strtod_l+0x67e>
 801630c:	2500      	movs	r5, #0
 801630e:	e6d7      	b.n	80160c0 <_strtod_l+0x420>
 8016310:	f04f 31ff 	mov.w	r1, #4294967295
 8016314:	fa01 f202 	lsl.w	r2, r1, r2
 8016318:	ea02 0a0a 	and.w	sl, r2, sl
 801631c:	e7b0      	b.n	8016280 <_strtod_l+0x5e0>
 801631e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016320:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016322:	2f00      	cmp	r7, #0
 8016324:	bfab      	itete	ge
 8016326:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016328:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801632a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801632e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016332:	bfac      	ite	ge
 8016334:	eb07 0903 	addge.w	r9, r7, r3
 8016338:	eba3 0807 	sublt.w	r8, r3, r7
 801633c:	9b06      	ldr	r3, [sp, #24]
 801633e:	1aff      	subs	r7, r7, r3
 8016340:	4417      	add	r7, r2
 8016342:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016346:	4a6b      	ldr	r2, [pc, #428]	@ (80164f4 <_strtod_l+0x854>)
 8016348:	3f01      	subs	r7, #1
 801634a:	4297      	cmp	r7, r2
 801634c:	da51      	bge.n	80163f2 <_strtod_l+0x752>
 801634e:	1bd1      	subs	r1, r2, r7
 8016350:	291f      	cmp	r1, #31
 8016352:	eba3 0301 	sub.w	r3, r3, r1
 8016356:	f04f 0201 	mov.w	r2, #1
 801635a:	dc3e      	bgt.n	80163da <_strtod_l+0x73a>
 801635c:	408a      	lsls	r2, r1
 801635e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016360:	2200      	movs	r2, #0
 8016362:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016364:	eb09 0703 	add.w	r7, r9, r3
 8016368:	4498      	add	r8, r3
 801636a:	9b06      	ldr	r3, [sp, #24]
 801636c:	45b9      	cmp	r9, r7
 801636e:	4498      	add	r8, r3
 8016370:	464b      	mov	r3, r9
 8016372:	bfa8      	it	ge
 8016374:	463b      	movge	r3, r7
 8016376:	4543      	cmp	r3, r8
 8016378:	bfa8      	it	ge
 801637a:	4643      	movge	r3, r8
 801637c:	2b00      	cmp	r3, #0
 801637e:	bfc2      	ittt	gt
 8016380:	1aff      	subgt	r7, r7, r3
 8016382:	eba8 0803 	subgt.w	r8, r8, r3
 8016386:	eba9 0903 	subgt.w	r9, r9, r3
 801638a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801638c:	2b00      	cmp	r3, #0
 801638e:	dd16      	ble.n	80163be <_strtod_l+0x71e>
 8016390:	4629      	mov	r1, r5
 8016392:	9805      	ldr	r0, [sp, #20]
 8016394:	461a      	mov	r2, r3
 8016396:	f001 fadb 	bl	8017950 <__pow5mult>
 801639a:	4605      	mov	r5, r0
 801639c:	2800      	cmp	r0, #0
 801639e:	d0b5      	beq.n	801630c <_strtod_l+0x66c>
 80163a0:	4601      	mov	r1, r0
 80163a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80163a4:	9805      	ldr	r0, [sp, #20]
 80163a6:	f001 fa29 	bl	80177fc <__multiply>
 80163aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80163ac:	2800      	cmp	r0, #0
 80163ae:	f43f ae87 	beq.w	80160c0 <_strtod_l+0x420>
 80163b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80163b4:	9805      	ldr	r0, [sp, #20]
 80163b6:	f001 f90d 	bl	80175d4 <_Bfree>
 80163ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80163be:	2f00      	cmp	r7, #0
 80163c0:	dc1b      	bgt.n	80163fa <_strtod_l+0x75a>
 80163c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dd21      	ble.n	801640c <_strtod_l+0x76c>
 80163c8:	4631      	mov	r1, r6
 80163ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80163cc:	9805      	ldr	r0, [sp, #20]
 80163ce:	f001 fabf 	bl	8017950 <__pow5mult>
 80163d2:	4606      	mov	r6, r0
 80163d4:	b9d0      	cbnz	r0, 801640c <_strtod_l+0x76c>
 80163d6:	2600      	movs	r6, #0
 80163d8:	e672      	b.n	80160c0 <_strtod_l+0x420>
 80163da:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80163de:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80163e2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80163e6:	37e2      	adds	r7, #226	@ 0xe2
 80163e8:	fa02 f107 	lsl.w	r1, r2, r7
 80163ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80163ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80163f0:	e7b8      	b.n	8016364 <_strtod_l+0x6c4>
 80163f2:	2200      	movs	r2, #0
 80163f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80163f6:	2201      	movs	r2, #1
 80163f8:	e7f9      	b.n	80163ee <_strtod_l+0x74e>
 80163fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80163fc:	9805      	ldr	r0, [sp, #20]
 80163fe:	463a      	mov	r2, r7
 8016400:	f001 fb00 	bl	8017a04 <__lshift>
 8016404:	9012      	str	r0, [sp, #72]	@ 0x48
 8016406:	2800      	cmp	r0, #0
 8016408:	d1db      	bne.n	80163c2 <_strtod_l+0x722>
 801640a:	e659      	b.n	80160c0 <_strtod_l+0x420>
 801640c:	f1b8 0f00 	cmp.w	r8, #0
 8016410:	dd07      	ble.n	8016422 <_strtod_l+0x782>
 8016412:	4631      	mov	r1, r6
 8016414:	9805      	ldr	r0, [sp, #20]
 8016416:	4642      	mov	r2, r8
 8016418:	f001 faf4 	bl	8017a04 <__lshift>
 801641c:	4606      	mov	r6, r0
 801641e:	2800      	cmp	r0, #0
 8016420:	d0d9      	beq.n	80163d6 <_strtod_l+0x736>
 8016422:	f1b9 0f00 	cmp.w	r9, #0
 8016426:	dd08      	ble.n	801643a <_strtod_l+0x79a>
 8016428:	4629      	mov	r1, r5
 801642a:	9805      	ldr	r0, [sp, #20]
 801642c:	464a      	mov	r2, r9
 801642e:	f001 fae9 	bl	8017a04 <__lshift>
 8016432:	4605      	mov	r5, r0
 8016434:	2800      	cmp	r0, #0
 8016436:	f43f ae43 	beq.w	80160c0 <_strtod_l+0x420>
 801643a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801643c:	9805      	ldr	r0, [sp, #20]
 801643e:	4632      	mov	r2, r6
 8016440:	f001 fb68 	bl	8017b14 <__mdiff>
 8016444:	4604      	mov	r4, r0
 8016446:	2800      	cmp	r0, #0
 8016448:	f43f ae3a 	beq.w	80160c0 <_strtod_l+0x420>
 801644c:	2300      	movs	r3, #0
 801644e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016452:	60c3      	str	r3, [r0, #12]
 8016454:	4629      	mov	r1, r5
 8016456:	f001 fb41 	bl	8017adc <__mcmp>
 801645a:	2800      	cmp	r0, #0
 801645c:	da4e      	bge.n	80164fc <_strtod_l+0x85c>
 801645e:	ea58 080a 	orrs.w	r8, r8, sl
 8016462:	d174      	bne.n	801654e <_strtod_l+0x8ae>
 8016464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016468:	2b00      	cmp	r3, #0
 801646a:	d170      	bne.n	801654e <_strtod_l+0x8ae>
 801646c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016470:	0d1b      	lsrs	r3, r3, #20
 8016472:	051b      	lsls	r3, r3, #20
 8016474:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016478:	d969      	bls.n	801654e <_strtod_l+0x8ae>
 801647a:	6963      	ldr	r3, [r4, #20]
 801647c:	b913      	cbnz	r3, 8016484 <_strtod_l+0x7e4>
 801647e:	6923      	ldr	r3, [r4, #16]
 8016480:	2b01      	cmp	r3, #1
 8016482:	dd64      	ble.n	801654e <_strtod_l+0x8ae>
 8016484:	4621      	mov	r1, r4
 8016486:	2201      	movs	r2, #1
 8016488:	9805      	ldr	r0, [sp, #20]
 801648a:	f001 fabb 	bl	8017a04 <__lshift>
 801648e:	4629      	mov	r1, r5
 8016490:	4604      	mov	r4, r0
 8016492:	f001 fb23 	bl	8017adc <__mcmp>
 8016496:	2800      	cmp	r0, #0
 8016498:	dd59      	ble.n	801654e <_strtod_l+0x8ae>
 801649a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801649e:	9a06      	ldr	r2, [sp, #24]
 80164a0:	0d1b      	lsrs	r3, r3, #20
 80164a2:	051b      	lsls	r3, r3, #20
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	d070      	beq.n	801658a <_strtod_l+0x8ea>
 80164a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80164ac:	d86d      	bhi.n	801658a <_strtod_l+0x8ea>
 80164ae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80164b2:	f67f ae99 	bls.w	80161e8 <_strtod_l+0x548>
 80164b6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80164e8 <_strtod_l+0x848>
 80164ba:	ec4b ab16 	vmov	d6, sl, fp
 80164be:	4b0e      	ldr	r3, [pc, #56]	@ (80164f8 <_strtod_l+0x858>)
 80164c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80164c4:	ee17 2a90 	vmov	r2, s15
 80164c8:	4013      	ands	r3, r2
 80164ca:	ec5b ab17 	vmov	sl, fp, d7
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f47f ae01 	bne.w	80160d6 <_strtod_l+0x436>
 80164d4:	9a05      	ldr	r2, [sp, #20]
 80164d6:	2322      	movs	r3, #34	@ 0x22
 80164d8:	6013      	str	r3, [r2, #0]
 80164da:	e5fc      	b.n	80160d6 <_strtod_l+0x436>
 80164dc:	f3af 8000 	nop.w
 80164e0:	ffc00000 	.word	0xffc00000
 80164e4:	41dfffff 	.word	0x41dfffff
 80164e8:	00000000 	.word	0x00000000
 80164ec:	39500000 	.word	0x39500000
 80164f0:	080190d8 	.word	0x080190d8
 80164f4:	fffffc02 	.word	0xfffffc02
 80164f8:	7ff00000 	.word	0x7ff00000
 80164fc:	46d9      	mov	r9, fp
 80164fe:	d15d      	bne.n	80165bc <_strtod_l+0x91c>
 8016500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016504:	f1b8 0f00 	cmp.w	r8, #0
 8016508:	d02a      	beq.n	8016560 <_strtod_l+0x8c0>
 801650a:	4aab      	ldr	r2, [pc, #684]	@ (80167b8 <_strtod_l+0xb18>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d12a      	bne.n	8016566 <_strtod_l+0x8c6>
 8016510:	9b06      	ldr	r3, [sp, #24]
 8016512:	4652      	mov	r2, sl
 8016514:	b1fb      	cbz	r3, 8016556 <_strtod_l+0x8b6>
 8016516:	4ba9      	ldr	r3, [pc, #676]	@ (80167bc <_strtod_l+0xb1c>)
 8016518:	ea0b 0303 	and.w	r3, fp, r3
 801651c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016520:	f04f 31ff 	mov.w	r1, #4294967295
 8016524:	d81a      	bhi.n	801655c <_strtod_l+0x8bc>
 8016526:	0d1b      	lsrs	r3, r3, #20
 8016528:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801652c:	fa01 f303 	lsl.w	r3, r1, r3
 8016530:	429a      	cmp	r2, r3
 8016532:	d118      	bne.n	8016566 <_strtod_l+0x8c6>
 8016534:	4ba2      	ldr	r3, [pc, #648]	@ (80167c0 <_strtod_l+0xb20>)
 8016536:	4599      	cmp	r9, r3
 8016538:	d102      	bne.n	8016540 <_strtod_l+0x8a0>
 801653a:	3201      	adds	r2, #1
 801653c:	f43f adc0 	beq.w	80160c0 <_strtod_l+0x420>
 8016540:	4b9e      	ldr	r3, [pc, #632]	@ (80167bc <_strtod_l+0xb1c>)
 8016542:	ea09 0303 	and.w	r3, r9, r3
 8016546:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801654a:	f04f 0a00 	mov.w	sl, #0
 801654e:	9b06      	ldr	r3, [sp, #24]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1b0      	bne.n	80164b6 <_strtod_l+0x816>
 8016554:	e5bf      	b.n	80160d6 <_strtod_l+0x436>
 8016556:	f04f 33ff 	mov.w	r3, #4294967295
 801655a:	e7e9      	b.n	8016530 <_strtod_l+0x890>
 801655c:	460b      	mov	r3, r1
 801655e:	e7e7      	b.n	8016530 <_strtod_l+0x890>
 8016560:	ea53 030a 	orrs.w	r3, r3, sl
 8016564:	d099      	beq.n	801649a <_strtod_l+0x7fa>
 8016566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016568:	b1c3      	cbz	r3, 801659c <_strtod_l+0x8fc>
 801656a:	ea13 0f09 	tst.w	r3, r9
 801656e:	d0ee      	beq.n	801654e <_strtod_l+0x8ae>
 8016570:	9a06      	ldr	r2, [sp, #24]
 8016572:	4650      	mov	r0, sl
 8016574:	4659      	mov	r1, fp
 8016576:	f1b8 0f00 	cmp.w	r8, #0
 801657a:	d013      	beq.n	80165a4 <_strtod_l+0x904>
 801657c:	f7ff fb76 	bl	8015c6c <sulp>
 8016580:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016584:	ec5b ab17 	vmov	sl, fp, d7
 8016588:	e7e1      	b.n	801654e <_strtod_l+0x8ae>
 801658a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801658e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016592:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016596:	f04f 3aff 	mov.w	sl, #4294967295
 801659a:	e7d8      	b.n	801654e <_strtod_l+0x8ae>
 801659c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801659e:	ea13 0f0a 	tst.w	r3, sl
 80165a2:	e7e4      	b.n	801656e <_strtod_l+0x8ce>
 80165a4:	f7ff fb62 	bl	8015c6c <sulp>
 80165a8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80165ac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80165b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165b4:	ec5b ab10 	vmov	sl, fp, d0
 80165b8:	d1c9      	bne.n	801654e <_strtod_l+0x8ae>
 80165ba:	e615      	b.n	80161e8 <_strtod_l+0x548>
 80165bc:	4629      	mov	r1, r5
 80165be:	4620      	mov	r0, r4
 80165c0:	f001 fc04 	bl	8017dcc <__ratio>
 80165c4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80165c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80165cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165d0:	d85d      	bhi.n	801668e <_strtod_l+0x9ee>
 80165d2:	f1b8 0f00 	cmp.w	r8, #0
 80165d6:	d164      	bne.n	80166a2 <_strtod_l+0xa02>
 80165d8:	f1ba 0f00 	cmp.w	sl, #0
 80165dc:	d14b      	bne.n	8016676 <_strtod_l+0x9d6>
 80165de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165e2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d160      	bne.n	80166ac <_strtod_l+0xa0c>
 80165ea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80165ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80165f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f6:	d401      	bmi.n	80165fc <_strtod_l+0x95c>
 80165f8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80165fc:	eeb1 ab48 	vneg.f64	d10, d8
 8016600:	486e      	ldr	r0, [pc, #440]	@ (80167bc <_strtod_l+0xb1c>)
 8016602:	4970      	ldr	r1, [pc, #448]	@ (80167c4 <_strtod_l+0xb24>)
 8016604:	ea09 0700 	and.w	r7, r9, r0
 8016608:	428f      	cmp	r7, r1
 801660a:	ec53 2b1a 	vmov	r2, r3, d10
 801660e:	d17d      	bne.n	801670c <_strtod_l+0xa6c>
 8016610:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016614:	ec4b ab1c 	vmov	d12, sl, fp
 8016618:	eeb0 0b4c 	vmov.f64	d0, d12
 801661c:	f001 fb0e 	bl	8017c3c <__ulp>
 8016620:	4866      	ldr	r0, [pc, #408]	@ (80167bc <_strtod_l+0xb1c>)
 8016622:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016626:	ee1c 3a90 	vmov	r3, s25
 801662a:	4a67      	ldr	r2, [pc, #412]	@ (80167c8 <_strtod_l+0xb28>)
 801662c:	ea03 0100 	and.w	r1, r3, r0
 8016630:	4291      	cmp	r1, r2
 8016632:	ec5b ab1c 	vmov	sl, fp, d12
 8016636:	d93c      	bls.n	80166b2 <_strtod_l+0xa12>
 8016638:	ee19 2a90 	vmov	r2, s19
 801663c:	4b60      	ldr	r3, [pc, #384]	@ (80167c0 <_strtod_l+0xb20>)
 801663e:	429a      	cmp	r2, r3
 8016640:	d104      	bne.n	801664c <_strtod_l+0x9ac>
 8016642:	ee19 3a10 	vmov	r3, s18
 8016646:	3301      	adds	r3, #1
 8016648:	f43f ad3a 	beq.w	80160c0 <_strtod_l+0x420>
 801664c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80167c0 <_strtod_l+0xb20>
 8016650:	f04f 3aff 	mov.w	sl, #4294967295
 8016654:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016656:	9805      	ldr	r0, [sp, #20]
 8016658:	f000 ffbc 	bl	80175d4 <_Bfree>
 801665c:	9805      	ldr	r0, [sp, #20]
 801665e:	4631      	mov	r1, r6
 8016660:	f000 ffb8 	bl	80175d4 <_Bfree>
 8016664:	9805      	ldr	r0, [sp, #20]
 8016666:	4629      	mov	r1, r5
 8016668:	f000 ffb4 	bl	80175d4 <_Bfree>
 801666c:	9805      	ldr	r0, [sp, #20]
 801666e:	4621      	mov	r1, r4
 8016670:	f000 ffb0 	bl	80175d4 <_Bfree>
 8016674:	e625      	b.n	80162c2 <_strtod_l+0x622>
 8016676:	f1ba 0f01 	cmp.w	sl, #1
 801667a:	d103      	bne.n	8016684 <_strtod_l+0x9e4>
 801667c:	f1bb 0f00 	cmp.w	fp, #0
 8016680:	f43f adb2 	beq.w	80161e8 <_strtod_l+0x548>
 8016684:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016688:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801668c:	e7b8      	b.n	8016600 <_strtod_l+0x960>
 801668e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016692:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016696:	f1b8 0f00 	cmp.w	r8, #0
 801669a:	d0af      	beq.n	80165fc <_strtod_l+0x95c>
 801669c:	eeb0 ab48 	vmov.f64	d10, d8
 80166a0:	e7ae      	b.n	8016600 <_strtod_l+0x960>
 80166a2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80166a6:	eeb0 8b4a 	vmov.f64	d8, d10
 80166aa:	e7a9      	b.n	8016600 <_strtod_l+0x960>
 80166ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80166b0:	e7a6      	b.n	8016600 <_strtod_l+0x960>
 80166b2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80166b6:	9b06      	ldr	r3, [sp, #24]
 80166b8:	46d9      	mov	r9, fp
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d1ca      	bne.n	8016654 <_strtod_l+0x9b4>
 80166be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80166c2:	0d1b      	lsrs	r3, r3, #20
 80166c4:	051b      	lsls	r3, r3, #20
 80166c6:	429f      	cmp	r7, r3
 80166c8:	d1c4      	bne.n	8016654 <_strtod_l+0x9b4>
 80166ca:	ec51 0b18 	vmov	r0, r1, d8
 80166ce:	f7ea f88b 	bl	80007e8 <__aeabi_d2lz>
 80166d2:	f7e9 fff3 	bl	80006bc <__aeabi_l2d>
 80166d6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80166da:	ec41 0b17 	vmov	d7, r0, r1
 80166de:	ea49 090a 	orr.w	r9, r9, sl
 80166e2:	ea59 0908 	orrs.w	r9, r9, r8
 80166e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80166ea:	d03c      	beq.n	8016766 <_strtod_l+0xac6>
 80166ec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80167a0 <_strtod_l+0xb00>
 80166f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80166f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f8:	f53f aced 	bmi.w	80160d6 <_strtod_l+0x436>
 80166fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80167a8 <_strtod_l+0xb08>
 8016700:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016708:	dda4      	ble.n	8016654 <_strtod_l+0x9b4>
 801670a:	e4e4      	b.n	80160d6 <_strtod_l+0x436>
 801670c:	9906      	ldr	r1, [sp, #24]
 801670e:	b1e1      	cbz	r1, 801674a <_strtod_l+0xaaa>
 8016710:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016714:	d819      	bhi.n	801674a <_strtod_l+0xaaa>
 8016716:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671e:	d811      	bhi.n	8016744 <_strtod_l+0xaa4>
 8016720:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016724:	ee18 3a10 	vmov	r3, s16
 8016728:	2b01      	cmp	r3, #1
 801672a:	bf38      	it	cc
 801672c:	2301      	movcc	r3, #1
 801672e:	ee08 3a10 	vmov	s16, r3
 8016732:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016736:	f1b8 0f00 	cmp.w	r8, #0
 801673a:	d111      	bne.n	8016760 <_strtod_l+0xac0>
 801673c:	eeb1 7b48 	vneg.f64	d7, d8
 8016740:	ec53 2b17 	vmov	r2, r3, d7
 8016744:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016748:	1bcb      	subs	r3, r1, r7
 801674a:	eeb0 0b49 	vmov.f64	d0, d9
 801674e:	ec43 2b1a 	vmov	d10, r2, r3
 8016752:	f001 fa73 	bl	8017c3c <__ulp>
 8016756:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801675a:	ec5b ab19 	vmov	sl, fp, d9
 801675e:	e7aa      	b.n	80166b6 <_strtod_l+0xa16>
 8016760:	eeb0 7b48 	vmov.f64	d7, d8
 8016764:	e7ec      	b.n	8016740 <_strtod_l+0xaa0>
 8016766:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80167b0 <_strtod_l+0xb10>
 801676a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016772:	f57f af6f 	bpl.w	8016654 <_strtod_l+0x9b4>
 8016776:	e4ae      	b.n	80160d6 <_strtod_l+0x436>
 8016778:	2300      	movs	r3, #0
 801677a:	9308      	str	r3, [sp, #32]
 801677c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801677e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016780:	6013      	str	r3, [r2, #0]
 8016782:	f7ff bacc 	b.w	8015d1e <_strtod_l+0x7e>
 8016786:	2a65      	cmp	r2, #101	@ 0x65
 8016788:	f43f abbc 	beq.w	8015f04 <_strtod_l+0x264>
 801678c:	2a45      	cmp	r2, #69	@ 0x45
 801678e:	f43f abb9 	beq.w	8015f04 <_strtod_l+0x264>
 8016792:	2301      	movs	r3, #1
 8016794:	9306      	str	r3, [sp, #24]
 8016796:	f7ff bbf0 	b.w	8015f7a <_strtod_l+0x2da>
 801679a:	bf00      	nop
 801679c:	f3af 8000 	nop.w
 80167a0:	94a03595 	.word	0x94a03595
 80167a4:	3fdfffff 	.word	0x3fdfffff
 80167a8:	35afe535 	.word	0x35afe535
 80167ac:	3fe00000 	.word	0x3fe00000
 80167b0:	94a03595 	.word	0x94a03595
 80167b4:	3fcfffff 	.word	0x3fcfffff
 80167b8:	000fffff 	.word	0x000fffff
 80167bc:	7ff00000 	.word	0x7ff00000
 80167c0:	7fefffff 	.word	0x7fefffff
 80167c4:	7fe00000 	.word	0x7fe00000
 80167c8:	7c9fffff 	.word	0x7c9fffff
 80167cc:	00000000 	.word	0x00000000

080167d0 <strtof>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	4c21      	ldr	r4, [pc, #132]	@ (8016858 <strtof+0x88>)
 80167d4:	4b21      	ldr	r3, [pc, #132]	@ (801685c <strtof+0x8c>)
 80167d6:	460a      	mov	r2, r1
 80167d8:	4601      	mov	r1, r0
 80167da:	6820      	ldr	r0, [r4, #0]
 80167dc:	f7ff fa60 	bl	8015ca0 <_strtod_l>
 80167e0:	eeb4 0b40 	vcmp.f64	d0, d0
 80167e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e8:	eeb0 7b40 	vmov.f64	d7, d0
 80167ec:	d70d      	bvc.n	801680a <strtof+0x3a>
 80167ee:	ee17 3a90 	vmov	r3, s15
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	481a      	ldr	r0, [pc, #104]	@ (8016860 <strtof+0x90>)
 80167f6:	da04      	bge.n	8016802 <strtof+0x32>
 80167f8:	f000 faf2 	bl	8016de0 <nanf>
 80167fc:	eeb1 0a40 	vneg.f32	s0, s0
 8016800:	bd10      	pop	{r4, pc}
 8016802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016806:	f000 baeb 	b.w	8016de0 <nanf>
 801680a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801680e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8016864 <strtof+0x94>
 8016812:	eeb0 6ac0 	vabs.f32	s12, s0
 8016816:	eeb4 6a66 	vcmp.f32	s12, s13
 801681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681e:	dd08      	ble.n	8016832 <strtof+0x62>
 8016820:	eeb0 6bc7 	vabs.f64	d6, d7
 8016824:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8016850 <strtof+0x80>
 8016828:	eeb4 6b45 	vcmp.f64	d6, d5
 801682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016830:	dd0a      	ble.n	8016848 <strtof+0x78>
 8016832:	ee10 3a10 	vmov	r3, s0
 8016836:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801683a:	d1e1      	bne.n	8016800 <strtof+0x30>
 801683c:	ee17 2a90 	vmov	r2, s15
 8016840:	4b09      	ldr	r3, [pc, #36]	@ (8016868 <strtof+0x98>)
 8016842:	4013      	ands	r3, r2
 8016844:	2b00      	cmp	r3, #0
 8016846:	d0db      	beq.n	8016800 <strtof+0x30>
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	2222      	movs	r2, #34	@ 0x22
 801684c:	601a      	str	r2, [r3, #0]
 801684e:	e7d7      	b.n	8016800 <strtof+0x30>
 8016850:	ffffffff 	.word	0xffffffff
 8016854:	7fefffff 	.word	0x7fefffff
 8016858:	24000260 	.word	0x24000260
 801685c:	240000f4 	.word	0x240000f4
 8016860:	080192b5 	.word	0x080192b5
 8016864:	7f7fffff 	.word	0x7f7fffff
 8016868:	7ff00000 	.word	0x7ff00000

0801686c <_strtol_l.constprop.0>:
 801686c:	2b24      	cmp	r3, #36	@ 0x24
 801686e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016872:	4686      	mov	lr, r0
 8016874:	4690      	mov	r8, r2
 8016876:	d801      	bhi.n	801687c <_strtol_l.constprop.0+0x10>
 8016878:	2b01      	cmp	r3, #1
 801687a:	d106      	bne.n	801688a <_strtol_l.constprop.0+0x1e>
 801687c:	f000 fa62 	bl	8016d44 <__errno>
 8016880:	2316      	movs	r3, #22
 8016882:	6003      	str	r3, [r0, #0]
 8016884:	2000      	movs	r0, #0
 8016886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801688a:	4834      	ldr	r0, [pc, #208]	@ (801695c <_strtol_l.constprop.0+0xf0>)
 801688c:	460d      	mov	r5, r1
 801688e:	462a      	mov	r2, r5
 8016890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016894:	5d06      	ldrb	r6, [r0, r4]
 8016896:	f016 0608 	ands.w	r6, r6, #8
 801689a:	d1f8      	bne.n	801688e <_strtol_l.constprop.0+0x22>
 801689c:	2c2d      	cmp	r4, #45	@ 0x2d
 801689e:	d12d      	bne.n	80168fc <_strtol_l.constprop.0+0x90>
 80168a0:	782c      	ldrb	r4, [r5, #0]
 80168a2:	2601      	movs	r6, #1
 80168a4:	1c95      	adds	r5, r2, #2
 80168a6:	f033 0210 	bics.w	r2, r3, #16
 80168aa:	d109      	bne.n	80168c0 <_strtol_l.constprop.0+0x54>
 80168ac:	2c30      	cmp	r4, #48	@ 0x30
 80168ae:	d12a      	bne.n	8016906 <_strtol_l.constprop.0+0x9a>
 80168b0:	782a      	ldrb	r2, [r5, #0]
 80168b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80168b6:	2a58      	cmp	r2, #88	@ 0x58
 80168b8:	d125      	bne.n	8016906 <_strtol_l.constprop.0+0x9a>
 80168ba:	786c      	ldrb	r4, [r5, #1]
 80168bc:	2310      	movs	r3, #16
 80168be:	3502      	adds	r5, #2
 80168c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80168c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80168c8:	2200      	movs	r2, #0
 80168ca:	fbbc f9f3 	udiv	r9, ip, r3
 80168ce:	4610      	mov	r0, r2
 80168d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80168d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80168d8:	2f09      	cmp	r7, #9
 80168da:	d81b      	bhi.n	8016914 <_strtol_l.constprop.0+0xa8>
 80168dc:	463c      	mov	r4, r7
 80168de:	42a3      	cmp	r3, r4
 80168e0:	dd27      	ble.n	8016932 <_strtol_l.constprop.0+0xc6>
 80168e2:	1c57      	adds	r7, r2, #1
 80168e4:	d007      	beq.n	80168f6 <_strtol_l.constprop.0+0x8a>
 80168e6:	4581      	cmp	r9, r0
 80168e8:	d320      	bcc.n	801692c <_strtol_l.constprop.0+0xc0>
 80168ea:	d101      	bne.n	80168f0 <_strtol_l.constprop.0+0x84>
 80168ec:	45a2      	cmp	sl, r4
 80168ee:	db1d      	blt.n	801692c <_strtol_l.constprop.0+0xc0>
 80168f0:	fb00 4003 	mla	r0, r0, r3, r4
 80168f4:	2201      	movs	r2, #1
 80168f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168fa:	e7eb      	b.n	80168d4 <_strtol_l.constprop.0+0x68>
 80168fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80168fe:	bf04      	itt	eq
 8016900:	782c      	ldrbeq	r4, [r5, #0]
 8016902:	1c95      	addeq	r5, r2, #2
 8016904:	e7cf      	b.n	80168a6 <_strtol_l.constprop.0+0x3a>
 8016906:	2b00      	cmp	r3, #0
 8016908:	d1da      	bne.n	80168c0 <_strtol_l.constprop.0+0x54>
 801690a:	2c30      	cmp	r4, #48	@ 0x30
 801690c:	bf0c      	ite	eq
 801690e:	2308      	moveq	r3, #8
 8016910:	230a      	movne	r3, #10
 8016912:	e7d5      	b.n	80168c0 <_strtol_l.constprop.0+0x54>
 8016914:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016918:	2f19      	cmp	r7, #25
 801691a:	d801      	bhi.n	8016920 <_strtol_l.constprop.0+0xb4>
 801691c:	3c37      	subs	r4, #55	@ 0x37
 801691e:	e7de      	b.n	80168de <_strtol_l.constprop.0+0x72>
 8016920:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016924:	2f19      	cmp	r7, #25
 8016926:	d804      	bhi.n	8016932 <_strtol_l.constprop.0+0xc6>
 8016928:	3c57      	subs	r4, #87	@ 0x57
 801692a:	e7d8      	b.n	80168de <_strtol_l.constprop.0+0x72>
 801692c:	f04f 32ff 	mov.w	r2, #4294967295
 8016930:	e7e1      	b.n	80168f6 <_strtol_l.constprop.0+0x8a>
 8016932:	1c53      	adds	r3, r2, #1
 8016934:	d108      	bne.n	8016948 <_strtol_l.constprop.0+0xdc>
 8016936:	2322      	movs	r3, #34	@ 0x22
 8016938:	f8ce 3000 	str.w	r3, [lr]
 801693c:	4660      	mov	r0, ip
 801693e:	f1b8 0f00 	cmp.w	r8, #0
 8016942:	d0a0      	beq.n	8016886 <_strtol_l.constprop.0+0x1a>
 8016944:	1e69      	subs	r1, r5, #1
 8016946:	e006      	b.n	8016956 <_strtol_l.constprop.0+0xea>
 8016948:	b106      	cbz	r6, 801694c <_strtol_l.constprop.0+0xe0>
 801694a:	4240      	negs	r0, r0
 801694c:	f1b8 0f00 	cmp.w	r8, #0
 8016950:	d099      	beq.n	8016886 <_strtol_l.constprop.0+0x1a>
 8016952:	2a00      	cmp	r2, #0
 8016954:	d1f6      	bne.n	8016944 <_strtol_l.constprop.0+0xd8>
 8016956:	f8c8 1000 	str.w	r1, [r8]
 801695a:	e794      	b.n	8016886 <_strtol_l.constprop.0+0x1a>
 801695c:	08019101 	.word	0x08019101

08016960 <strtol>:
 8016960:	4613      	mov	r3, r2
 8016962:	460a      	mov	r2, r1
 8016964:	4601      	mov	r1, r0
 8016966:	4802      	ldr	r0, [pc, #8]	@ (8016970 <strtol+0x10>)
 8016968:	6800      	ldr	r0, [r0, #0]
 801696a:	f7ff bf7f 	b.w	801686c <_strtol_l.constprop.0>
 801696e:	bf00      	nop
 8016970:	24000260 	.word	0x24000260

08016974 <std>:
 8016974:	2300      	movs	r3, #0
 8016976:	b510      	push	{r4, lr}
 8016978:	4604      	mov	r4, r0
 801697a:	e9c0 3300 	strd	r3, r3, [r0]
 801697e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016982:	6083      	str	r3, [r0, #8]
 8016984:	8181      	strh	r1, [r0, #12]
 8016986:	6643      	str	r3, [r0, #100]	@ 0x64
 8016988:	81c2      	strh	r2, [r0, #14]
 801698a:	6183      	str	r3, [r0, #24]
 801698c:	4619      	mov	r1, r3
 801698e:	2208      	movs	r2, #8
 8016990:	305c      	adds	r0, #92	@ 0x5c
 8016992:	f000 f8f4 	bl	8016b7e <memset>
 8016996:	4b0d      	ldr	r3, [pc, #52]	@ (80169cc <std+0x58>)
 8016998:	6263      	str	r3, [r4, #36]	@ 0x24
 801699a:	4b0d      	ldr	r3, [pc, #52]	@ (80169d0 <std+0x5c>)
 801699c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801699e:	4b0d      	ldr	r3, [pc, #52]	@ (80169d4 <std+0x60>)
 80169a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80169a2:	4b0d      	ldr	r3, [pc, #52]	@ (80169d8 <std+0x64>)
 80169a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80169a6:	4b0d      	ldr	r3, [pc, #52]	@ (80169dc <std+0x68>)
 80169a8:	6224      	str	r4, [r4, #32]
 80169aa:	429c      	cmp	r4, r3
 80169ac:	d006      	beq.n	80169bc <std+0x48>
 80169ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169b2:	4294      	cmp	r4, r2
 80169b4:	d002      	beq.n	80169bc <std+0x48>
 80169b6:	33d0      	adds	r3, #208	@ 0xd0
 80169b8:	429c      	cmp	r4, r3
 80169ba:	d105      	bne.n	80169c8 <std+0x54>
 80169bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80169c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169c4:	f000 b9e8 	b.w	8016d98 <__retarget_lock_init_recursive>
 80169c8:	bd10      	pop	{r4, pc}
 80169ca:	bf00      	nop
 80169cc:	08016af9 	.word	0x08016af9
 80169d0:	08016b1b 	.word	0x08016b1b
 80169d4:	08016b53 	.word	0x08016b53
 80169d8:	08016b77 	.word	0x08016b77
 80169dc:	240052b8 	.word	0x240052b8

080169e0 <stdio_exit_handler>:
 80169e0:	4a02      	ldr	r2, [pc, #8]	@ (80169ec <stdio_exit_handler+0xc>)
 80169e2:	4903      	ldr	r1, [pc, #12]	@ (80169f0 <stdio_exit_handler+0x10>)
 80169e4:	4803      	ldr	r0, [pc, #12]	@ (80169f4 <stdio_exit_handler+0x14>)
 80169e6:	f000 b869 	b.w	8016abc <_fwalk_sglue>
 80169ea:	bf00      	nop
 80169ec:	240000e8 	.word	0x240000e8
 80169f0:	08017fd5 	.word	0x08017fd5
 80169f4:	24000264 	.word	0x24000264

080169f8 <cleanup_stdio>:
 80169f8:	6841      	ldr	r1, [r0, #4]
 80169fa:	4b0c      	ldr	r3, [pc, #48]	@ (8016a2c <cleanup_stdio+0x34>)
 80169fc:	4299      	cmp	r1, r3
 80169fe:	b510      	push	{r4, lr}
 8016a00:	4604      	mov	r4, r0
 8016a02:	d001      	beq.n	8016a08 <cleanup_stdio+0x10>
 8016a04:	f001 fae6 	bl	8017fd4 <_fflush_r>
 8016a08:	68a1      	ldr	r1, [r4, #8]
 8016a0a:	4b09      	ldr	r3, [pc, #36]	@ (8016a30 <cleanup_stdio+0x38>)
 8016a0c:	4299      	cmp	r1, r3
 8016a0e:	d002      	beq.n	8016a16 <cleanup_stdio+0x1e>
 8016a10:	4620      	mov	r0, r4
 8016a12:	f001 fadf 	bl	8017fd4 <_fflush_r>
 8016a16:	68e1      	ldr	r1, [r4, #12]
 8016a18:	4b06      	ldr	r3, [pc, #24]	@ (8016a34 <cleanup_stdio+0x3c>)
 8016a1a:	4299      	cmp	r1, r3
 8016a1c:	d004      	beq.n	8016a28 <cleanup_stdio+0x30>
 8016a1e:	4620      	mov	r0, r4
 8016a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a24:	f001 bad6 	b.w	8017fd4 <_fflush_r>
 8016a28:	bd10      	pop	{r4, pc}
 8016a2a:	bf00      	nop
 8016a2c:	240052b8 	.word	0x240052b8
 8016a30:	24005320 	.word	0x24005320
 8016a34:	24005388 	.word	0x24005388

08016a38 <global_stdio_init.part.0>:
 8016a38:	b510      	push	{r4, lr}
 8016a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a68 <global_stdio_init.part.0+0x30>)
 8016a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8016a6c <global_stdio_init.part.0+0x34>)
 8016a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8016a70 <global_stdio_init.part.0+0x38>)
 8016a40:	601a      	str	r2, [r3, #0]
 8016a42:	4620      	mov	r0, r4
 8016a44:	2200      	movs	r2, #0
 8016a46:	2104      	movs	r1, #4
 8016a48:	f7ff ff94 	bl	8016974 <std>
 8016a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016a50:	2201      	movs	r2, #1
 8016a52:	2109      	movs	r1, #9
 8016a54:	f7ff ff8e 	bl	8016974 <std>
 8016a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016a5c:	2202      	movs	r2, #2
 8016a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a62:	2112      	movs	r1, #18
 8016a64:	f7ff bf86 	b.w	8016974 <std>
 8016a68:	240053f0 	.word	0x240053f0
 8016a6c:	240052b8 	.word	0x240052b8
 8016a70:	080169e1 	.word	0x080169e1

08016a74 <__sfp_lock_acquire>:
 8016a74:	4801      	ldr	r0, [pc, #4]	@ (8016a7c <__sfp_lock_acquire+0x8>)
 8016a76:	f000 b990 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8016a7a:	bf00      	nop
 8016a7c:	240053f9 	.word	0x240053f9

08016a80 <__sfp_lock_release>:
 8016a80:	4801      	ldr	r0, [pc, #4]	@ (8016a88 <__sfp_lock_release+0x8>)
 8016a82:	f000 b98b 	b.w	8016d9c <__retarget_lock_release_recursive>
 8016a86:	bf00      	nop
 8016a88:	240053f9 	.word	0x240053f9

08016a8c <__sinit>:
 8016a8c:	b510      	push	{r4, lr}
 8016a8e:	4604      	mov	r4, r0
 8016a90:	f7ff fff0 	bl	8016a74 <__sfp_lock_acquire>
 8016a94:	6a23      	ldr	r3, [r4, #32]
 8016a96:	b11b      	cbz	r3, 8016aa0 <__sinit+0x14>
 8016a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a9c:	f7ff bff0 	b.w	8016a80 <__sfp_lock_release>
 8016aa0:	4b04      	ldr	r3, [pc, #16]	@ (8016ab4 <__sinit+0x28>)
 8016aa2:	6223      	str	r3, [r4, #32]
 8016aa4:	4b04      	ldr	r3, [pc, #16]	@ (8016ab8 <__sinit+0x2c>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1f5      	bne.n	8016a98 <__sinit+0xc>
 8016aac:	f7ff ffc4 	bl	8016a38 <global_stdio_init.part.0>
 8016ab0:	e7f2      	b.n	8016a98 <__sinit+0xc>
 8016ab2:	bf00      	nop
 8016ab4:	080169f9 	.word	0x080169f9
 8016ab8:	240053f0 	.word	0x240053f0

08016abc <_fwalk_sglue>:
 8016abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ac0:	4607      	mov	r7, r0
 8016ac2:	4688      	mov	r8, r1
 8016ac4:	4614      	mov	r4, r2
 8016ac6:	2600      	movs	r6, #0
 8016ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016acc:	f1b9 0901 	subs.w	r9, r9, #1
 8016ad0:	d505      	bpl.n	8016ade <_fwalk_sglue+0x22>
 8016ad2:	6824      	ldr	r4, [r4, #0]
 8016ad4:	2c00      	cmp	r4, #0
 8016ad6:	d1f7      	bne.n	8016ac8 <_fwalk_sglue+0xc>
 8016ad8:	4630      	mov	r0, r6
 8016ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ade:	89ab      	ldrh	r3, [r5, #12]
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d907      	bls.n	8016af4 <_fwalk_sglue+0x38>
 8016ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	d003      	beq.n	8016af4 <_fwalk_sglue+0x38>
 8016aec:	4629      	mov	r1, r5
 8016aee:	4638      	mov	r0, r7
 8016af0:	47c0      	blx	r8
 8016af2:	4306      	orrs	r6, r0
 8016af4:	3568      	adds	r5, #104	@ 0x68
 8016af6:	e7e9      	b.n	8016acc <_fwalk_sglue+0x10>

08016af8 <__sread>:
 8016af8:	b510      	push	{r4, lr}
 8016afa:	460c      	mov	r4, r1
 8016afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b00:	f000 f8ec 	bl	8016cdc <_read_r>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	bfab      	itete	ge
 8016b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8016b0c:	181b      	addge	r3, r3, r0
 8016b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016b12:	bfac      	ite	ge
 8016b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016b16:	81a3      	strhlt	r3, [r4, #12]
 8016b18:	bd10      	pop	{r4, pc}

08016b1a <__swrite>:
 8016b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1e:	461f      	mov	r7, r3
 8016b20:	898b      	ldrh	r3, [r1, #12]
 8016b22:	05db      	lsls	r3, r3, #23
 8016b24:	4605      	mov	r5, r0
 8016b26:	460c      	mov	r4, r1
 8016b28:	4616      	mov	r6, r2
 8016b2a:	d505      	bpl.n	8016b38 <__swrite+0x1e>
 8016b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b30:	2302      	movs	r3, #2
 8016b32:	2200      	movs	r2, #0
 8016b34:	f000 f8c0 	bl	8016cb8 <_lseek_r>
 8016b38:	89a3      	ldrh	r3, [r4, #12]
 8016b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b42:	81a3      	strh	r3, [r4, #12]
 8016b44:	4632      	mov	r2, r6
 8016b46:	463b      	mov	r3, r7
 8016b48:	4628      	mov	r0, r5
 8016b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4e:	f000 b8e7 	b.w	8016d20 <_write_r>

08016b52 <__sseek>:
 8016b52:	b510      	push	{r4, lr}
 8016b54:	460c      	mov	r4, r1
 8016b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b5a:	f000 f8ad 	bl	8016cb8 <_lseek_r>
 8016b5e:	1c43      	adds	r3, r0, #1
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	bf15      	itete	ne
 8016b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b6e:	81a3      	strheq	r3, [r4, #12]
 8016b70:	bf18      	it	ne
 8016b72:	81a3      	strhne	r3, [r4, #12]
 8016b74:	bd10      	pop	{r4, pc}

08016b76 <__sclose>:
 8016b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b7a:	f000 b88d 	b.w	8016c98 <_close_r>

08016b7e <memset>:
 8016b7e:	4402      	add	r2, r0
 8016b80:	4603      	mov	r3, r0
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d100      	bne.n	8016b88 <memset+0xa>
 8016b86:	4770      	bx	lr
 8016b88:	f803 1b01 	strb.w	r1, [r3], #1
 8016b8c:	e7f9      	b.n	8016b82 <memset+0x4>

08016b8e <strncmp>:
 8016b8e:	b510      	push	{r4, lr}
 8016b90:	b16a      	cbz	r2, 8016bae <strncmp+0x20>
 8016b92:	3901      	subs	r1, #1
 8016b94:	1884      	adds	r4, r0, r2
 8016b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d103      	bne.n	8016baa <strncmp+0x1c>
 8016ba2:	42a0      	cmp	r0, r4
 8016ba4:	d001      	beq.n	8016baa <strncmp+0x1c>
 8016ba6:	2a00      	cmp	r2, #0
 8016ba8:	d1f5      	bne.n	8016b96 <strncmp+0x8>
 8016baa:	1ad0      	subs	r0, r2, r3
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	4610      	mov	r0, r2
 8016bb0:	e7fc      	b.n	8016bac <strncmp+0x1e>
	...

08016bb4 <strtok>:
 8016bb4:	4b16      	ldr	r3, [pc, #88]	@ (8016c10 <strtok+0x5c>)
 8016bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bba:	681f      	ldr	r7, [r3, #0]
 8016bbc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8016bbe:	4605      	mov	r5, r0
 8016bc0:	460e      	mov	r6, r1
 8016bc2:	b9ec      	cbnz	r4, 8016c00 <strtok+0x4c>
 8016bc4:	2050      	movs	r0, #80	@ 0x50
 8016bc6:	f7fe ff93 	bl	8015af0 <malloc>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	6478      	str	r0, [r7, #68]	@ 0x44
 8016bce:	b920      	cbnz	r0, 8016bda <strtok+0x26>
 8016bd0:	4b10      	ldr	r3, [pc, #64]	@ (8016c14 <strtok+0x60>)
 8016bd2:	4811      	ldr	r0, [pc, #68]	@ (8016c18 <strtok+0x64>)
 8016bd4:	215b      	movs	r1, #91	@ 0x5b
 8016bd6:	f000 f909 	bl	8016dec <__assert_func>
 8016bda:	e9c0 4400 	strd	r4, r4, [r0]
 8016bde:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016be2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016be6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8016bea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8016bee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8016bf2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8016bf6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8016bfa:	6184      	str	r4, [r0, #24]
 8016bfc:	7704      	strb	r4, [r0, #28]
 8016bfe:	6244      	str	r4, [r0, #36]	@ 0x24
 8016c00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016c02:	4631      	mov	r1, r6
 8016c04:	4628      	mov	r0, r5
 8016c06:	2301      	movs	r3, #1
 8016c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c0c:	f000 b806 	b.w	8016c1c <__strtok_r>
 8016c10:	24000260 	.word	0x24000260
 8016c14:	08019201 	.word	0x08019201
 8016c18:	08019218 	.word	0x08019218

08016c1c <__strtok_r>:
 8016c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c1e:	4604      	mov	r4, r0
 8016c20:	b908      	cbnz	r0, 8016c26 <__strtok_r+0xa>
 8016c22:	6814      	ldr	r4, [r2, #0]
 8016c24:	b144      	cbz	r4, 8016c38 <__strtok_r+0x1c>
 8016c26:	4620      	mov	r0, r4
 8016c28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016c2c:	460f      	mov	r7, r1
 8016c2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016c32:	b91e      	cbnz	r6, 8016c3c <__strtok_r+0x20>
 8016c34:	b965      	cbnz	r5, 8016c50 <__strtok_r+0x34>
 8016c36:	6015      	str	r5, [r2, #0]
 8016c38:	2000      	movs	r0, #0
 8016c3a:	e005      	b.n	8016c48 <__strtok_r+0x2c>
 8016c3c:	42b5      	cmp	r5, r6
 8016c3e:	d1f6      	bne.n	8016c2e <__strtok_r+0x12>
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d1f0      	bne.n	8016c26 <__strtok_r+0xa>
 8016c44:	6014      	str	r4, [r2, #0]
 8016c46:	7003      	strb	r3, [r0, #0]
 8016c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c4a:	461c      	mov	r4, r3
 8016c4c:	e00c      	b.n	8016c68 <__strtok_r+0x4c>
 8016c4e:	b915      	cbnz	r5, 8016c56 <__strtok_r+0x3a>
 8016c50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016c54:	460e      	mov	r6, r1
 8016c56:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016c5a:	42ab      	cmp	r3, r5
 8016c5c:	d1f7      	bne.n	8016c4e <__strtok_r+0x32>
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d0f3      	beq.n	8016c4a <__strtok_r+0x2e>
 8016c62:	2300      	movs	r3, #0
 8016c64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016c68:	6014      	str	r4, [r2, #0]
 8016c6a:	e7ed      	b.n	8016c48 <__strtok_r+0x2c>

08016c6c <strstr>:
 8016c6c:	780a      	ldrb	r2, [r1, #0]
 8016c6e:	b570      	push	{r4, r5, r6, lr}
 8016c70:	b96a      	cbnz	r2, 8016c8e <strstr+0x22>
 8016c72:	bd70      	pop	{r4, r5, r6, pc}
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d109      	bne.n	8016c8c <strstr+0x20>
 8016c78:	460c      	mov	r4, r1
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d0f6      	beq.n	8016c72 <strstr+0x6>
 8016c84:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016c88:	429e      	cmp	r6, r3
 8016c8a:	d0f7      	beq.n	8016c7c <strstr+0x10>
 8016c8c:	3001      	adds	r0, #1
 8016c8e:	7803      	ldrb	r3, [r0, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d1ef      	bne.n	8016c74 <strstr+0x8>
 8016c94:	4618      	mov	r0, r3
 8016c96:	e7ec      	b.n	8016c72 <strstr+0x6>

08016c98 <_close_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d06      	ldr	r5, [pc, #24]	@ (8016cb4 <_close_r+0x1c>)
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	4608      	mov	r0, r1
 8016ca2:	602b      	str	r3, [r5, #0]
 8016ca4:	f7ed fe76 	bl	8004994 <_close>
 8016ca8:	1c43      	adds	r3, r0, #1
 8016caa:	d102      	bne.n	8016cb2 <_close_r+0x1a>
 8016cac:	682b      	ldr	r3, [r5, #0]
 8016cae:	b103      	cbz	r3, 8016cb2 <_close_r+0x1a>
 8016cb0:	6023      	str	r3, [r4, #0]
 8016cb2:	bd38      	pop	{r3, r4, r5, pc}
 8016cb4:	240053f4 	.word	0x240053f4

08016cb8 <_lseek_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d07      	ldr	r5, [pc, #28]	@ (8016cd8 <_lseek_r+0x20>)
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	4608      	mov	r0, r1
 8016cc0:	4611      	mov	r1, r2
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	602a      	str	r2, [r5, #0]
 8016cc6:	461a      	mov	r2, r3
 8016cc8:	f7ed fe8b 	bl	80049e2 <_lseek>
 8016ccc:	1c43      	adds	r3, r0, #1
 8016cce:	d102      	bne.n	8016cd6 <_lseek_r+0x1e>
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	b103      	cbz	r3, 8016cd6 <_lseek_r+0x1e>
 8016cd4:	6023      	str	r3, [r4, #0]
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	240053f4 	.word	0x240053f4

08016cdc <_read_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4d07      	ldr	r5, [pc, #28]	@ (8016cfc <_read_r+0x20>)
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	4608      	mov	r0, r1
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	602a      	str	r2, [r5, #0]
 8016cea:	461a      	mov	r2, r3
 8016cec:	f7ed fe19 	bl	8004922 <_read>
 8016cf0:	1c43      	adds	r3, r0, #1
 8016cf2:	d102      	bne.n	8016cfa <_read_r+0x1e>
 8016cf4:	682b      	ldr	r3, [r5, #0]
 8016cf6:	b103      	cbz	r3, 8016cfa <_read_r+0x1e>
 8016cf8:	6023      	str	r3, [r4, #0]
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	240053f4 	.word	0x240053f4

08016d00 <_sbrk_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	4d06      	ldr	r5, [pc, #24]	@ (8016d1c <_sbrk_r+0x1c>)
 8016d04:	2300      	movs	r3, #0
 8016d06:	4604      	mov	r4, r0
 8016d08:	4608      	mov	r0, r1
 8016d0a:	602b      	str	r3, [r5, #0]
 8016d0c:	f7ed fe76 	bl	80049fc <_sbrk>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	d102      	bne.n	8016d1a <_sbrk_r+0x1a>
 8016d14:	682b      	ldr	r3, [r5, #0]
 8016d16:	b103      	cbz	r3, 8016d1a <_sbrk_r+0x1a>
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	bd38      	pop	{r3, r4, r5, pc}
 8016d1c:	240053f4 	.word	0x240053f4

08016d20 <_write_r>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	4d07      	ldr	r5, [pc, #28]	@ (8016d40 <_write_r+0x20>)
 8016d24:	4604      	mov	r4, r0
 8016d26:	4608      	mov	r0, r1
 8016d28:	4611      	mov	r1, r2
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	602a      	str	r2, [r5, #0]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	f7ed fe14 	bl	800495c <_write>
 8016d34:	1c43      	adds	r3, r0, #1
 8016d36:	d102      	bne.n	8016d3e <_write_r+0x1e>
 8016d38:	682b      	ldr	r3, [r5, #0]
 8016d3a:	b103      	cbz	r3, 8016d3e <_write_r+0x1e>
 8016d3c:	6023      	str	r3, [r4, #0]
 8016d3e:	bd38      	pop	{r3, r4, r5, pc}
 8016d40:	240053f4 	.word	0x240053f4

08016d44 <__errno>:
 8016d44:	4b01      	ldr	r3, [pc, #4]	@ (8016d4c <__errno+0x8>)
 8016d46:	6818      	ldr	r0, [r3, #0]
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	24000260 	.word	0x24000260

08016d50 <__libc_init_array>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	4d0d      	ldr	r5, [pc, #52]	@ (8016d88 <__libc_init_array+0x38>)
 8016d54:	4c0d      	ldr	r4, [pc, #52]	@ (8016d8c <__libc_init_array+0x3c>)
 8016d56:	1b64      	subs	r4, r4, r5
 8016d58:	10a4      	asrs	r4, r4, #2
 8016d5a:	2600      	movs	r6, #0
 8016d5c:	42a6      	cmp	r6, r4
 8016d5e:	d109      	bne.n	8016d74 <__libc_init_array+0x24>
 8016d60:	4d0b      	ldr	r5, [pc, #44]	@ (8016d90 <__libc_init_array+0x40>)
 8016d62:	4c0c      	ldr	r4, [pc, #48]	@ (8016d94 <__libc_init_array+0x44>)
 8016d64:	f001 fee4 	bl	8018b30 <_init>
 8016d68:	1b64      	subs	r4, r4, r5
 8016d6a:	10a4      	asrs	r4, r4, #2
 8016d6c:	2600      	movs	r6, #0
 8016d6e:	42a6      	cmp	r6, r4
 8016d70:	d105      	bne.n	8016d7e <__libc_init_array+0x2e>
 8016d72:	bd70      	pop	{r4, r5, r6, pc}
 8016d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d78:	4798      	blx	r3
 8016d7a:	3601      	adds	r6, #1
 8016d7c:	e7ee      	b.n	8016d5c <__libc_init_array+0xc>
 8016d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d82:	4798      	blx	r3
 8016d84:	3601      	adds	r6, #1
 8016d86:	e7f2      	b.n	8016d6e <__libc_init_array+0x1e>
 8016d88:	08019d50 	.word	0x08019d50
 8016d8c:	08019d50 	.word	0x08019d50
 8016d90:	08019d50 	.word	0x08019d50
 8016d94:	08019d54 	.word	0x08019d54

08016d98 <__retarget_lock_init_recursive>:
 8016d98:	4770      	bx	lr

08016d9a <__retarget_lock_acquire_recursive>:
 8016d9a:	4770      	bx	lr

08016d9c <__retarget_lock_release_recursive>:
 8016d9c:	4770      	bx	lr

08016d9e <strcpy>:
 8016d9e:	4603      	mov	r3, r0
 8016da0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016da4:	f803 2b01 	strb.w	r2, [r3], #1
 8016da8:	2a00      	cmp	r2, #0
 8016daa:	d1f9      	bne.n	8016da0 <strcpy+0x2>
 8016dac:	4770      	bx	lr

08016dae <memcpy>:
 8016dae:	440a      	add	r2, r1
 8016db0:	4291      	cmp	r1, r2
 8016db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016db6:	d100      	bne.n	8016dba <memcpy+0xc>
 8016db8:	4770      	bx	lr
 8016dba:	b510      	push	{r4, lr}
 8016dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dc4:	4291      	cmp	r1, r2
 8016dc6:	d1f9      	bne.n	8016dbc <memcpy+0xe>
 8016dc8:	bd10      	pop	{r4, pc}
 8016dca:	0000      	movs	r0, r0
 8016dcc:	0000      	movs	r0, r0
	...

08016dd0 <nan>:
 8016dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016dd8 <nan+0x8>
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop
 8016dd8:	00000000 	.word	0x00000000
 8016ddc:	7ff80000 	.word	0x7ff80000

08016de0 <nanf>:
 8016de0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016de8 <nanf+0x8>
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop
 8016de8:	7fc00000 	.word	0x7fc00000

08016dec <__assert_func>:
 8016dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dee:	4614      	mov	r4, r2
 8016df0:	461a      	mov	r2, r3
 8016df2:	4b09      	ldr	r3, [pc, #36]	@ (8016e18 <__assert_func+0x2c>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	4605      	mov	r5, r0
 8016df8:	68d8      	ldr	r0, [r3, #12]
 8016dfa:	b954      	cbnz	r4, 8016e12 <__assert_func+0x26>
 8016dfc:	4b07      	ldr	r3, [pc, #28]	@ (8016e1c <__assert_func+0x30>)
 8016dfe:	461c      	mov	r4, r3
 8016e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016e04:	9100      	str	r1, [sp, #0]
 8016e06:	462b      	mov	r3, r5
 8016e08:	4905      	ldr	r1, [pc, #20]	@ (8016e20 <__assert_func+0x34>)
 8016e0a:	f001 f90b 	bl	8018024 <fiprintf>
 8016e0e:	f001 f91b 	bl	8018048 <abort>
 8016e12:	4b04      	ldr	r3, [pc, #16]	@ (8016e24 <__assert_func+0x38>)
 8016e14:	e7f4      	b.n	8016e00 <__assert_func+0x14>
 8016e16:	bf00      	nop
 8016e18:	24000260 	.word	0x24000260
 8016e1c:	080192b5 	.word	0x080192b5
 8016e20:	08019287 	.word	0x08019287
 8016e24:	0801927a 	.word	0x0801927a

08016e28 <_free_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	2900      	cmp	r1, #0
 8016e2e:	d041      	beq.n	8016eb4 <_free_r+0x8c>
 8016e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e34:	1f0c      	subs	r4, r1, #4
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	bfb8      	it	lt
 8016e3a:	18e4      	addlt	r4, r4, r3
 8016e3c:	f7fe ff0a 	bl	8015c54 <__malloc_lock>
 8016e40:	4a1d      	ldr	r2, [pc, #116]	@ (8016eb8 <_free_r+0x90>)
 8016e42:	6813      	ldr	r3, [r2, #0]
 8016e44:	b933      	cbnz	r3, 8016e54 <_free_r+0x2c>
 8016e46:	6063      	str	r3, [r4, #4]
 8016e48:	6014      	str	r4, [r2, #0]
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e50:	f7fe bf06 	b.w	8015c60 <__malloc_unlock>
 8016e54:	42a3      	cmp	r3, r4
 8016e56:	d908      	bls.n	8016e6a <_free_r+0x42>
 8016e58:	6820      	ldr	r0, [r4, #0]
 8016e5a:	1821      	adds	r1, r4, r0
 8016e5c:	428b      	cmp	r3, r1
 8016e5e:	bf01      	itttt	eq
 8016e60:	6819      	ldreq	r1, [r3, #0]
 8016e62:	685b      	ldreq	r3, [r3, #4]
 8016e64:	1809      	addeq	r1, r1, r0
 8016e66:	6021      	streq	r1, [r4, #0]
 8016e68:	e7ed      	b.n	8016e46 <_free_r+0x1e>
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	b10b      	cbz	r3, 8016e74 <_free_r+0x4c>
 8016e70:	42a3      	cmp	r3, r4
 8016e72:	d9fa      	bls.n	8016e6a <_free_r+0x42>
 8016e74:	6811      	ldr	r1, [r2, #0]
 8016e76:	1850      	adds	r0, r2, r1
 8016e78:	42a0      	cmp	r0, r4
 8016e7a:	d10b      	bne.n	8016e94 <_free_r+0x6c>
 8016e7c:	6820      	ldr	r0, [r4, #0]
 8016e7e:	4401      	add	r1, r0
 8016e80:	1850      	adds	r0, r2, r1
 8016e82:	4283      	cmp	r3, r0
 8016e84:	6011      	str	r1, [r2, #0]
 8016e86:	d1e0      	bne.n	8016e4a <_free_r+0x22>
 8016e88:	6818      	ldr	r0, [r3, #0]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	6053      	str	r3, [r2, #4]
 8016e8e:	4408      	add	r0, r1
 8016e90:	6010      	str	r0, [r2, #0]
 8016e92:	e7da      	b.n	8016e4a <_free_r+0x22>
 8016e94:	d902      	bls.n	8016e9c <_free_r+0x74>
 8016e96:	230c      	movs	r3, #12
 8016e98:	602b      	str	r3, [r5, #0]
 8016e9a:	e7d6      	b.n	8016e4a <_free_r+0x22>
 8016e9c:	6820      	ldr	r0, [r4, #0]
 8016e9e:	1821      	adds	r1, r4, r0
 8016ea0:	428b      	cmp	r3, r1
 8016ea2:	bf04      	itt	eq
 8016ea4:	6819      	ldreq	r1, [r3, #0]
 8016ea6:	685b      	ldreq	r3, [r3, #4]
 8016ea8:	6063      	str	r3, [r4, #4]
 8016eaa:	bf04      	itt	eq
 8016eac:	1809      	addeq	r1, r1, r0
 8016eae:	6021      	streq	r1, [r4, #0]
 8016eb0:	6054      	str	r4, [r2, #4]
 8016eb2:	e7ca      	b.n	8016e4a <_free_r+0x22>
 8016eb4:	bd38      	pop	{r3, r4, r5, pc}
 8016eb6:	bf00      	nop
 8016eb8:	240052b4 	.word	0x240052b4

08016ebc <rshift>:
 8016ebc:	6903      	ldr	r3, [r0, #16]
 8016ebe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016eca:	f100 0414 	add.w	r4, r0, #20
 8016ece:	dd45      	ble.n	8016f5c <rshift+0xa0>
 8016ed0:	f011 011f 	ands.w	r1, r1, #31
 8016ed4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ed8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016edc:	d10c      	bne.n	8016ef8 <rshift+0x3c>
 8016ede:	f100 0710 	add.w	r7, r0, #16
 8016ee2:	4629      	mov	r1, r5
 8016ee4:	42b1      	cmp	r1, r6
 8016ee6:	d334      	bcc.n	8016f52 <rshift+0x96>
 8016ee8:	1a9b      	subs	r3, r3, r2
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	1eea      	subs	r2, r5, #3
 8016eee:	4296      	cmp	r6, r2
 8016ef0:	bf38      	it	cc
 8016ef2:	2300      	movcc	r3, #0
 8016ef4:	4423      	add	r3, r4
 8016ef6:	e015      	b.n	8016f24 <rshift+0x68>
 8016ef8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016efc:	f1c1 0820 	rsb	r8, r1, #32
 8016f00:	40cf      	lsrs	r7, r1
 8016f02:	f105 0e04 	add.w	lr, r5, #4
 8016f06:	46a1      	mov	r9, r4
 8016f08:	4576      	cmp	r6, lr
 8016f0a:	46f4      	mov	ip, lr
 8016f0c:	d815      	bhi.n	8016f3a <rshift+0x7e>
 8016f0e:	1a9a      	subs	r2, r3, r2
 8016f10:	0092      	lsls	r2, r2, #2
 8016f12:	3a04      	subs	r2, #4
 8016f14:	3501      	adds	r5, #1
 8016f16:	42ae      	cmp	r6, r5
 8016f18:	bf38      	it	cc
 8016f1a:	2200      	movcc	r2, #0
 8016f1c:	18a3      	adds	r3, r4, r2
 8016f1e:	50a7      	str	r7, [r4, r2]
 8016f20:	b107      	cbz	r7, 8016f24 <rshift+0x68>
 8016f22:	3304      	adds	r3, #4
 8016f24:	1b1a      	subs	r2, r3, r4
 8016f26:	42a3      	cmp	r3, r4
 8016f28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016f2c:	bf08      	it	eq
 8016f2e:	2300      	moveq	r3, #0
 8016f30:	6102      	str	r2, [r0, #16]
 8016f32:	bf08      	it	eq
 8016f34:	6143      	streq	r3, [r0, #20]
 8016f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f3a:	f8dc c000 	ldr.w	ip, [ip]
 8016f3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016f42:	ea4c 0707 	orr.w	r7, ip, r7
 8016f46:	f849 7b04 	str.w	r7, [r9], #4
 8016f4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f4e:	40cf      	lsrs	r7, r1
 8016f50:	e7da      	b.n	8016f08 <rshift+0x4c>
 8016f52:	f851 cb04 	ldr.w	ip, [r1], #4
 8016f56:	f847 cf04 	str.w	ip, [r7, #4]!
 8016f5a:	e7c3      	b.n	8016ee4 <rshift+0x28>
 8016f5c:	4623      	mov	r3, r4
 8016f5e:	e7e1      	b.n	8016f24 <rshift+0x68>

08016f60 <__hexdig_fun>:
 8016f60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016f64:	2b09      	cmp	r3, #9
 8016f66:	d802      	bhi.n	8016f6e <__hexdig_fun+0xe>
 8016f68:	3820      	subs	r0, #32
 8016f6a:	b2c0      	uxtb	r0, r0
 8016f6c:	4770      	bx	lr
 8016f6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016f72:	2b05      	cmp	r3, #5
 8016f74:	d801      	bhi.n	8016f7a <__hexdig_fun+0x1a>
 8016f76:	3847      	subs	r0, #71	@ 0x47
 8016f78:	e7f7      	b.n	8016f6a <__hexdig_fun+0xa>
 8016f7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016f7e:	2b05      	cmp	r3, #5
 8016f80:	d801      	bhi.n	8016f86 <__hexdig_fun+0x26>
 8016f82:	3827      	subs	r0, #39	@ 0x27
 8016f84:	e7f1      	b.n	8016f6a <__hexdig_fun+0xa>
 8016f86:	2000      	movs	r0, #0
 8016f88:	4770      	bx	lr
	...

08016f8c <__gethex>:
 8016f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f90:	b085      	sub	sp, #20
 8016f92:	468a      	mov	sl, r1
 8016f94:	9302      	str	r3, [sp, #8]
 8016f96:	680b      	ldr	r3, [r1, #0]
 8016f98:	9001      	str	r0, [sp, #4]
 8016f9a:	4690      	mov	r8, r2
 8016f9c:	1c9c      	adds	r4, r3, #2
 8016f9e:	46a1      	mov	r9, r4
 8016fa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016fa4:	2830      	cmp	r0, #48	@ 0x30
 8016fa6:	d0fa      	beq.n	8016f9e <__gethex+0x12>
 8016fa8:	eba9 0303 	sub.w	r3, r9, r3
 8016fac:	f1a3 0b02 	sub.w	fp, r3, #2
 8016fb0:	f7ff ffd6 	bl	8016f60 <__hexdig_fun>
 8016fb4:	4605      	mov	r5, r0
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d168      	bne.n	801708c <__gethex+0x100>
 8016fba:	49a0      	ldr	r1, [pc, #640]	@ (801723c <__gethex+0x2b0>)
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	4648      	mov	r0, r9
 8016fc0:	f7ff fde5 	bl	8016b8e <strncmp>
 8016fc4:	4607      	mov	r7, r0
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	d167      	bne.n	801709a <__gethex+0x10e>
 8016fca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016fce:	4626      	mov	r6, r4
 8016fd0:	f7ff ffc6 	bl	8016f60 <__hexdig_fun>
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d062      	beq.n	801709e <__gethex+0x112>
 8016fd8:	4623      	mov	r3, r4
 8016fda:	7818      	ldrb	r0, [r3, #0]
 8016fdc:	2830      	cmp	r0, #48	@ 0x30
 8016fde:	4699      	mov	r9, r3
 8016fe0:	f103 0301 	add.w	r3, r3, #1
 8016fe4:	d0f9      	beq.n	8016fda <__gethex+0x4e>
 8016fe6:	f7ff ffbb 	bl	8016f60 <__hexdig_fun>
 8016fea:	fab0 f580 	clz	r5, r0
 8016fee:	096d      	lsrs	r5, r5, #5
 8016ff0:	f04f 0b01 	mov.w	fp, #1
 8016ff4:	464a      	mov	r2, r9
 8016ff6:	4616      	mov	r6, r2
 8016ff8:	3201      	adds	r2, #1
 8016ffa:	7830      	ldrb	r0, [r6, #0]
 8016ffc:	f7ff ffb0 	bl	8016f60 <__hexdig_fun>
 8017000:	2800      	cmp	r0, #0
 8017002:	d1f8      	bne.n	8016ff6 <__gethex+0x6a>
 8017004:	498d      	ldr	r1, [pc, #564]	@ (801723c <__gethex+0x2b0>)
 8017006:	2201      	movs	r2, #1
 8017008:	4630      	mov	r0, r6
 801700a:	f7ff fdc0 	bl	8016b8e <strncmp>
 801700e:	2800      	cmp	r0, #0
 8017010:	d13f      	bne.n	8017092 <__gethex+0x106>
 8017012:	b944      	cbnz	r4, 8017026 <__gethex+0x9a>
 8017014:	1c74      	adds	r4, r6, #1
 8017016:	4622      	mov	r2, r4
 8017018:	4616      	mov	r6, r2
 801701a:	3201      	adds	r2, #1
 801701c:	7830      	ldrb	r0, [r6, #0]
 801701e:	f7ff ff9f 	bl	8016f60 <__hexdig_fun>
 8017022:	2800      	cmp	r0, #0
 8017024:	d1f8      	bne.n	8017018 <__gethex+0x8c>
 8017026:	1ba4      	subs	r4, r4, r6
 8017028:	00a7      	lsls	r7, r4, #2
 801702a:	7833      	ldrb	r3, [r6, #0]
 801702c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017030:	2b50      	cmp	r3, #80	@ 0x50
 8017032:	d13e      	bne.n	80170b2 <__gethex+0x126>
 8017034:	7873      	ldrb	r3, [r6, #1]
 8017036:	2b2b      	cmp	r3, #43	@ 0x2b
 8017038:	d033      	beq.n	80170a2 <__gethex+0x116>
 801703a:	2b2d      	cmp	r3, #45	@ 0x2d
 801703c:	d034      	beq.n	80170a8 <__gethex+0x11c>
 801703e:	1c71      	adds	r1, r6, #1
 8017040:	2400      	movs	r4, #0
 8017042:	7808      	ldrb	r0, [r1, #0]
 8017044:	f7ff ff8c 	bl	8016f60 <__hexdig_fun>
 8017048:	1e43      	subs	r3, r0, #1
 801704a:	b2db      	uxtb	r3, r3
 801704c:	2b18      	cmp	r3, #24
 801704e:	d830      	bhi.n	80170b2 <__gethex+0x126>
 8017050:	f1a0 0210 	sub.w	r2, r0, #16
 8017054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017058:	f7ff ff82 	bl	8016f60 <__hexdig_fun>
 801705c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017060:	fa5f fc8c 	uxtb.w	ip, ip
 8017064:	f1bc 0f18 	cmp.w	ip, #24
 8017068:	f04f 030a 	mov.w	r3, #10
 801706c:	d91e      	bls.n	80170ac <__gethex+0x120>
 801706e:	b104      	cbz	r4, 8017072 <__gethex+0xe6>
 8017070:	4252      	negs	r2, r2
 8017072:	4417      	add	r7, r2
 8017074:	f8ca 1000 	str.w	r1, [sl]
 8017078:	b1ed      	cbz	r5, 80170b6 <__gethex+0x12a>
 801707a:	f1bb 0f00 	cmp.w	fp, #0
 801707e:	bf0c      	ite	eq
 8017080:	2506      	moveq	r5, #6
 8017082:	2500      	movne	r5, #0
 8017084:	4628      	mov	r0, r5
 8017086:	b005      	add	sp, #20
 8017088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708c:	2500      	movs	r5, #0
 801708e:	462c      	mov	r4, r5
 8017090:	e7b0      	b.n	8016ff4 <__gethex+0x68>
 8017092:	2c00      	cmp	r4, #0
 8017094:	d1c7      	bne.n	8017026 <__gethex+0x9a>
 8017096:	4627      	mov	r7, r4
 8017098:	e7c7      	b.n	801702a <__gethex+0x9e>
 801709a:	464e      	mov	r6, r9
 801709c:	462f      	mov	r7, r5
 801709e:	2501      	movs	r5, #1
 80170a0:	e7c3      	b.n	801702a <__gethex+0x9e>
 80170a2:	2400      	movs	r4, #0
 80170a4:	1cb1      	adds	r1, r6, #2
 80170a6:	e7cc      	b.n	8017042 <__gethex+0xb6>
 80170a8:	2401      	movs	r4, #1
 80170aa:	e7fb      	b.n	80170a4 <__gethex+0x118>
 80170ac:	fb03 0002 	mla	r0, r3, r2, r0
 80170b0:	e7ce      	b.n	8017050 <__gethex+0xc4>
 80170b2:	4631      	mov	r1, r6
 80170b4:	e7de      	b.n	8017074 <__gethex+0xe8>
 80170b6:	eba6 0309 	sub.w	r3, r6, r9
 80170ba:	3b01      	subs	r3, #1
 80170bc:	4629      	mov	r1, r5
 80170be:	2b07      	cmp	r3, #7
 80170c0:	dc0a      	bgt.n	80170d8 <__gethex+0x14c>
 80170c2:	9801      	ldr	r0, [sp, #4]
 80170c4:	f000 fa46 	bl	8017554 <_Balloc>
 80170c8:	4604      	mov	r4, r0
 80170ca:	b940      	cbnz	r0, 80170de <__gethex+0x152>
 80170cc:	4b5c      	ldr	r3, [pc, #368]	@ (8017240 <__gethex+0x2b4>)
 80170ce:	4602      	mov	r2, r0
 80170d0:	21e4      	movs	r1, #228	@ 0xe4
 80170d2:	485c      	ldr	r0, [pc, #368]	@ (8017244 <__gethex+0x2b8>)
 80170d4:	f7ff fe8a 	bl	8016dec <__assert_func>
 80170d8:	3101      	adds	r1, #1
 80170da:	105b      	asrs	r3, r3, #1
 80170dc:	e7ef      	b.n	80170be <__gethex+0x132>
 80170de:	f100 0a14 	add.w	sl, r0, #20
 80170e2:	2300      	movs	r3, #0
 80170e4:	4655      	mov	r5, sl
 80170e6:	469b      	mov	fp, r3
 80170e8:	45b1      	cmp	r9, r6
 80170ea:	d337      	bcc.n	801715c <__gethex+0x1d0>
 80170ec:	f845 bb04 	str.w	fp, [r5], #4
 80170f0:	eba5 050a 	sub.w	r5, r5, sl
 80170f4:	10ad      	asrs	r5, r5, #2
 80170f6:	6125      	str	r5, [r4, #16]
 80170f8:	4658      	mov	r0, fp
 80170fa:	f000 fb1d 	bl	8017738 <__hi0bits>
 80170fe:	016d      	lsls	r5, r5, #5
 8017100:	f8d8 6000 	ldr.w	r6, [r8]
 8017104:	1a2d      	subs	r5, r5, r0
 8017106:	42b5      	cmp	r5, r6
 8017108:	dd54      	ble.n	80171b4 <__gethex+0x228>
 801710a:	1bad      	subs	r5, r5, r6
 801710c:	4629      	mov	r1, r5
 801710e:	4620      	mov	r0, r4
 8017110:	f000 feae 	bl	8017e70 <__any_on>
 8017114:	4681      	mov	r9, r0
 8017116:	b178      	cbz	r0, 8017138 <__gethex+0x1ac>
 8017118:	1e6b      	subs	r3, r5, #1
 801711a:	1159      	asrs	r1, r3, #5
 801711c:	f003 021f 	and.w	r2, r3, #31
 8017120:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017124:	f04f 0901 	mov.w	r9, #1
 8017128:	fa09 f202 	lsl.w	r2, r9, r2
 801712c:	420a      	tst	r2, r1
 801712e:	d003      	beq.n	8017138 <__gethex+0x1ac>
 8017130:	454b      	cmp	r3, r9
 8017132:	dc36      	bgt.n	80171a2 <__gethex+0x216>
 8017134:	f04f 0902 	mov.w	r9, #2
 8017138:	4629      	mov	r1, r5
 801713a:	4620      	mov	r0, r4
 801713c:	f7ff febe 	bl	8016ebc <rshift>
 8017140:	442f      	add	r7, r5
 8017142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017146:	42bb      	cmp	r3, r7
 8017148:	da42      	bge.n	80171d0 <__gethex+0x244>
 801714a:	9801      	ldr	r0, [sp, #4]
 801714c:	4621      	mov	r1, r4
 801714e:	f000 fa41 	bl	80175d4 <_Bfree>
 8017152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017154:	2300      	movs	r3, #0
 8017156:	6013      	str	r3, [r2, #0]
 8017158:	25a3      	movs	r5, #163	@ 0xa3
 801715a:	e793      	b.n	8017084 <__gethex+0xf8>
 801715c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017160:	2a2e      	cmp	r2, #46	@ 0x2e
 8017162:	d012      	beq.n	801718a <__gethex+0x1fe>
 8017164:	2b20      	cmp	r3, #32
 8017166:	d104      	bne.n	8017172 <__gethex+0x1e6>
 8017168:	f845 bb04 	str.w	fp, [r5], #4
 801716c:	f04f 0b00 	mov.w	fp, #0
 8017170:	465b      	mov	r3, fp
 8017172:	7830      	ldrb	r0, [r6, #0]
 8017174:	9303      	str	r3, [sp, #12]
 8017176:	f7ff fef3 	bl	8016f60 <__hexdig_fun>
 801717a:	9b03      	ldr	r3, [sp, #12]
 801717c:	f000 000f 	and.w	r0, r0, #15
 8017180:	4098      	lsls	r0, r3
 8017182:	ea4b 0b00 	orr.w	fp, fp, r0
 8017186:	3304      	adds	r3, #4
 8017188:	e7ae      	b.n	80170e8 <__gethex+0x15c>
 801718a:	45b1      	cmp	r9, r6
 801718c:	d8ea      	bhi.n	8017164 <__gethex+0x1d8>
 801718e:	492b      	ldr	r1, [pc, #172]	@ (801723c <__gethex+0x2b0>)
 8017190:	9303      	str	r3, [sp, #12]
 8017192:	2201      	movs	r2, #1
 8017194:	4630      	mov	r0, r6
 8017196:	f7ff fcfa 	bl	8016b8e <strncmp>
 801719a:	9b03      	ldr	r3, [sp, #12]
 801719c:	2800      	cmp	r0, #0
 801719e:	d1e1      	bne.n	8017164 <__gethex+0x1d8>
 80171a0:	e7a2      	b.n	80170e8 <__gethex+0x15c>
 80171a2:	1ea9      	subs	r1, r5, #2
 80171a4:	4620      	mov	r0, r4
 80171a6:	f000 fe63 	bl	8017e70 <__any_on>
 80171aa:	2800      	cmp	r0, #0
 80171ac:	d0c2      	beq.n	8017134 <__gethex+0x1a8>
 80171ae:	f04f 0903 	mov.w	r9, #3
 80171b2:	e7c1      	b.n	8017138 <__gethex+0x1ac>
 80171b4:	da09      	bge.n	80171ca <__gethex+0x23e>
 80171b6:	1b75      	subs	r5, r6, r5
 80171b8:	4621      	mov	r1, r4
 80171ba:	9801      	ldr	r0, [sp, #4]
 80171bc:	462a      	mov	r2, r5
 80171be:	f000 fc21 	bl	8017a04 <__lshift>
 80171c2:	1b7f      	subs	r7, r7, r5
 80171c4:	4604      	mov	r4, r0
 80171c6:	f100 0a14 	add.w	sl, r0, #20
 80171ca:	f04f 0900 	mov.w	r9, #0
 80171ce:	e7b8      	b.n	8017142 <__gethex+0x1b6>
 80171d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80171d4:	42bd      	cmp	r5, r7
 80171d6:	dd6f      	ble.n	80172b8 <__gethex+0x32c>
 80171d8:	1bed      	subs	r5, r5, r7
 80171da:	42ae      	cmp	r6, r5
 80171dc:	dc34      	bgt.n	8017248 <__gethex+0x2bc>
 80171de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80171e2:	2b02      	cmp	r3, #2
 80171e4:	d022      	beq.n	801722c <__gethex+0x2a0>
 80171e6:	2b03      	cmp	r3, #3
 80171e8:	d024      	beq.n	8017234 <__gethex+0x2a8>
 80171ea:	2b01      	cmp	r3, #1
 80171ec:	d115      	bne.n	801721a <__gethex+0x28e>
 80171ee:	42ae      	cmp	r6, r5
 80171f0:	d113      	bne.n	801721a <__gethex+0x28e>
 80171f2:	2e01      	cmp	r6, #1
 80171f4:	d10b      	bne.n	801720e <__gethex+0x282>
 80171f6:	9a02      	ldr	r2, [sp, #8]
 80171f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80171fc:	6013      	str	r3, [r2, #0]
 80171fe:	2301      	movs	r3, #1
 8017200:	6123      	str	r3, [r4, #16]
 8017202:	f8ca 3000 	str.w	r3, [sl]
 8017206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017208:	2562      	movs	r5, #98	@ 0x62
 801720a:	601c      	str	r4, [r3, #0]
 801720c:	e73a      	b.n	8017084 <__gethex+0xf8>
 801720e:	1e71      	subs	r1, r6, #1
 8017210:	4620      	mov	r0, r4
 8017212:	f000 fe2d 	bl	8017e70 <__any_on>
 8017216:	2800      	cmp	r0, #0
 8017218:	d1ed      	bne.n	80171f6 <__gethex+0x26a>
 801721a:	9801      	ldr	r0, [sp, #4]
 801721c:	4621      	mov	r1, r4
 801721e:	f000 f9d9 	bl	80175d4 <_Bfree>
 8017222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017224:	2300      	movs	r3, #0
 8017226:	6013      	str	r3, [r2, #0]
 8017228:	2550      	movs	r5, #80	@ 0x50
 801722a:	e72b      	b.n	8017084 <__gethex+0xf8>
 801722c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801722e:	2b00      	cmp	r3, #0
 8017230:	d1f3      	bne.n	801721a <__gethex+0x28e>
 8017232:	e7e0      	b.n	80171f6 <__gethex+0x26a>
 8017234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017236:	2b00      	cmp	r3, #0
 8017238:	d1dd      	bne.n	80171f6 <__gethex+0x26a>
 801723a:	e7ee      	b.n	801721a <__gethex+0x28e>
 801723c:	080190a0 	.word	0x080190a0
 8017240:	080192b6 	.word	0x080192b6
 8017244:	080192c7 	.word	0x080192c7
 8017248:	1e6f      	subs	r7, r5, #1
 801724a:	f1b9 0f00 	cmp.w	r9, #0
 801724e:	d130      	bne.n	80172b2 <__gethex+0x326>
 8017250:	b127      	cbz	r7, 801725c <__gethex+0x2d0>
 8017252:	4639      	mov	r1, r7
 8017254:	4620      	mov	r0, r4
 8017256:	f000 fe0b 	bl	8017e70 <__any_on>
 801725a:	4681      	mov	r9, r0
 801725c:	117a      	asrs	r2, r7, #5
 801725e:	2301      	movs	r3, #1
 8017260:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017264:	f007 071f 	and.w	r7, r7, #31
 8017268:	40bb      	lsls	r3, r7
 801726a:	4213      	tst	r3, r2
 801726c:	4629      	mov	r1, r5
 801726e:	4620      	mov	r0, r4
 8017270:	bf18      	it	ne
 8017272:	f049 0902 	orrne.w	r9, r9, #2
 8017276:	f7ff fe21 	bl	8016ebc <rshift>
 801727a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801727e:	1b76      	subs	r6, r6, r5
 8017280:	2502      	movs	r5, #2
 8017282:	f1b9 0f00 	cmp.w	r9, #0
 8017286:	d047      	beq.n	8017318 <__gethex+0x38c>
 8017288:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801728c:	2b02      	cmp	r3, #2
 801728e:	d015      	beq.n	80172bc <__gethex+0x330>
 8017290:	2b03      	cmp	r3, #3
 8017292:	d017      	beq.n	80172c4 <__gethex+0x338>
 8017294:	2b01      	cmp	r3, #1
 8017296:	d109      	bne.n	80172ac <__gethex+0x320>
 8017298:	f019 0f02 	tst.w	r9, #2
 801729c:	d006      	beq.n	80172ac <__gethex+0x320>
 801729e:	f8da 3000 	ldr.w	r3, [sl]
 80172a2:	ea49 0903 	orr.w	r9, r9, r3
 80172a6:	f019 0f01 	tst.w	r9, #1
 80172aa:	d10e      	bne.n	80172ca <__gethex+0x33e>
 80172ac:	f045 0510 	orr.w	r5, r5, #16
 80172b0:	e032      	b.n	8017318 <__gethex+0x38c>
 80172b2:	f04f 0901 	mov.w	r9, #1
 80172b6:	e7d1      	b.n	801725c <__gethex+0x2d0>
 80172b8:	2501      	movs	r5, #1
 80172ba:	e7e2      	b.n	8017282 <__gethex+0x2f6>
 80172bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172be:	f1c3 0301 	rsb	r3, r3, #1
 80172c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80172c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d0f0      	beq.n	80172ac <__gethex+0x320>
 80172ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80172ce:	f104 0314 	add.w	r3, r4, #20
 80172d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80172d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80172da:	f04f 0c00 	mov.w	ip, #0
 80172de:	4618      	mov	r0, r3
 80172e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80172e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80172e8:	d01b      	beq.n	8017322 <__gethex+0x396>
 80172ea:	3201      	adds	r2, #1
 80172ec:	6002      	str	r2, [r0, #0]
 80172ee:	2d02      	cmp	r5, #2
 80172f0:	f104 0314 	add.w	r3, r4, #20
 80172f4:	d13c      	bne.n	8017370 <__gethex+0x3e4>
 80172f6:	f8d8 2000 	ldr.w	r2, [r8]
 80172fa:	3a01      	subs	r2, #1
 80172fc:	42b2      	cmp	r2, r6
 80172fe:	d109      	bne.n	8017314 <__gethex+0x388>
 8017300:	1171      	asrs	r1, r6, #5
 8017302:	2201      	movs	r2, #1
 8017304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017308:	f006 061f 	and.w	r6, r6, #31
 801730c:	fa02 f606 	lsl.w	r6, r2, r6
 8017310:	421e      	tst	r6, r3
 8017312:	d13a      	bne.n	801738a <__gethex+0x3fe>
 8017314:	f045 0520 	orr.w	r5, r5, #32
 8017318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801731a:	601c      	str	r4, [r3, #0]
 801731c:	9b02      	ldr	r3, [sp, #8]
 801731e:	601f      	str	r7, [r3, #0]
 8017320:	e6b0      	b.n	8017084 <__gethex+0xf8>
 8017322:	4299      	cmp	r1, r3
 8017324:	f843 cc04 	str.w	ip, [r3, #-4]
 8017328:	d8d9      	bhi.n	80172de <__gethex+0x352>
 801732a:	68a3      	ldr	r3, [r4, #8]
 801732c:	459b      	cmp	fp, r3
 801732e:	db17      	blt.n	8017360 <__gethex+0x3d4>
 8017330:	6861      	ldr	r1, [r4, #4]
 8017332:	9801      	ldr	r0, [sp, #4]
 8017334:	3101      	adds	r1, #1
 8017336:	f000 f90d 	bl	8017554 <_Balloc>
 801733a:	4681      	mov	r9, r0
 801733c:	b918      	cbnz	r0, 8017346 <__gethex+0x3ba>
 801733e:	4b1a      	ldr	r3, [pc, #104]	@ (80173a8 <__gethex+0x41c>)
 8017340:	4602      	mov	r2, r0
 8017342:	2184      	movs	r1, #132	@ 0x84
 8017344:	e6c5      	b.n	80170d2 <__gethex+0x146>
 8017346:	6922      	ldr	r2, [r4, #16]
 8017348:	3202      	adds	r2, #2
 801734a:	f104 010c 	add.w	r1, r4, #12
 801734e:	0092      	lsls	r2, r2, #2
 8017350:	300c      	adds	r0, #12
 8017352:	f7ff fd2c 	bl	8016dae <memcpy>
 8017356:	4621      	mov	r1, r4
 8017358:	9801      	ldr	r0, [sp, #4]
 801735a:	f000 f93b 	bl	80175d4 <_Bfree>
 801735e:	464c      	mov	r4, r9
 8017360:	6923      	ldr	r3, [r4, #16]
 8017362:	1c5a      	adds	r2, r3, #1
 8017364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017368:	6122      	str	r2, [r4, #16]
 801736a:	2201      	movs	r2, #1
 801736c:	615a      	str	r2, [r3, #20]
 801736e:	e7be      	b.n	80172ee <__gethex+0x362>
 8017370:	6922      	ldr	r2, [r4, #16]
 8017372:	455a      	cmp	r2, fp
 8017374:	dd0b      	ble.n	801738e <__gethex+0x402>
 8017376:	2101      	movs	r1, #1
 8017378:	4620      	mov	r0, r4
 801737a:	f7ff fd9f 	bl	8016ebc <rshift>
 801737e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017382:	3701      	adds	r7, #1
 8017384:	42bb      	cmp	r3, r7
 8017386:	f6ff aee0 	blt.w	801714a <__gethex+0x1be>
 801738a:	2501      	movs	r5, #1
 801738c:	e7c2      	b.n	8017314 <__gethex+0x388>
 801738e:	f016 061f 	ands.w	r6, r6, #31
 8017392:	d0fa      	beq.n	801738a <__gethex+0x3fe>
 8017394:	4453      	add	r3, sl
 8017396:	f1c6 0620 	rsb	r6, r6, #32
 801739a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801739e:	f000 f9cb 	bl	8017738 <__hi0bits>
 80173a2:	42b0      	cmp	r0, r6
 80173a4:	dbe7      	blt.n	8017376 <__gethex+0x3ea>
 80173a6:	e7f0      	b.n	801738a <__gethex+0x3fe>
 80173a8:	080192b6 	.word	0x080192b6

080173ac <L_shift>:
 80173ac:	f1c2 0208 	rsb	r2, r2, #8
 80173b0:	0092      	lsls	r2, r2, #2
 80173b2:	b570      	push	{r4, r5, r6, lr}
 80173b4:	f1c2 0620 	rsb	r6, r2, #32
 80173b8:	6843      	ldr	r3, [r0, #4]
 80173ba:	6804      	ldr	r4, [r0, #0]
 80173bc:	fa03 f506 	lsl.w	r5, r3, r6
 80173c0:	432c      	orrs	r4, r5
 80173c2:	40d3      	lsrs	r3, r2
 80173c4:	6004      	str	r4, [r0, #0]
 80173c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80173ca:	4288      	cmp	r0, r1
 80173cc:	d3f4      	bcc.n	80173b8 <L_shift+0xc>
 80173ce:	bd70      	pop	{r4, r5, r6, pc}

080173d0 <__match>:
 80173d0:	b530      	push	{r4, r5, lr}
 80173d2:	6803      	ldr	r3, [r0, #0]
 80173d4:	3301      	adds	r3, #1
 80173d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173da:	b914      	cbnz	r4, 80173e2 <__match+0x12>
 80173dc:	6003      	str	r3, [r0, #0]
 80173de:	2001      	movs	r0, #1
 80173e0:	bd30      	pop	{r4, r5, pc}
 80173e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80173ea:	2d19      	cmp	r5, #25
 80173ec:	bf98      	it	ls
 80173ee:	3220      	addls	r2, #32
 80173f0:	42a2      	cmp	r2, r4
 80173f2:	d0f0      	beq.n	80173d6 <__match+0x6>
 80173f4:	2000      	movs	r0, #0
 80173f6:	e7f3      	b.n	80173e0 <__match+0x10>

080173f8 <__hexnan>:
 80173f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173fc:	680b      	ldr	r3, [r1, #0]
 80173fe:	6801      	ldr	r1, [r0, #0]
 8017400:	115e      	asrs	r6, r3, #5
 8017402:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017406:	f013 031f 	ands.w	r3, r3, #31
 801740a:	b087      	sub	sp, #28
 801740c:	bf18      	it	ne
 801740e:	3604      	addne	r6, #4
 8017410:	2500      	movs	r5, #0
 8017412:	1f37      	subs	r7, r6, #4
 8017414:	4682      	mov	sl, r0
 8017416:	4690      	mov	r8, r2
 8017418:	9301      	str	r3, [sp, #4]
 801741a:	f846 5c04 	str.w	r5, [r6, #-4]
 801741e:	46b9      	mov	r9, r7
 8017420:	463c      	mov	r4, r7
 8017422:	9502      	str	r5, [sp, #8]
 8017424:	46ab      	mov	fp, r5
 8017426:	784a      	ldrb	r2, [r1, #1]
 8017428:	1c4b      	adds	r3, r1, #1
 801742a:	9303      	str	r3, [sp, #12]
 801742c:	b342      	cbz	r2, 8017480 <__hexnan+0x88>
 801742e:	4610      	mov	r0, r2
 8017430:	9105      	str	r1, [sp, #20]
 8017432:	9204      	str	r2, [sp, #16]
 8017434:	f7ff fd94 	bl	8016f60 <__hexdig_fun>
 8017438:	2800      	cmp	r0, #0
 801743a:	d151      	bne.n	80174e0 <__hexnan+0xe8>
 801743c:	9a04      	ldr	r2, [sp, #16]
 801743e:	9905      	ldr	r1, [sp, #20]
 8017440:	2a20      	cmp	r2, #32
 8017442:	d818      	bhi.n	8017476 <__hexnan+0x7e>
 8017444:	9b02      	ldr	r3, [sp, #8]
 8017446:	459b      	cmp	fp, r3
 8017448:	dd13      	ble.n	8017472 <__hexnan+0x7a>
 801744a:	454c      	cmp	r4, r9
 801744c:	d206      	bcs.n	801745c <__hexnan+0x64>
 801744e:	2d07      	cmp	r5, #7
 8017450:	dc04      	bgt.n	801745c <__hexnan+0x64>
 8017452:	462a      	mov	r2, r5
 8017454:	4649      	mov	r1, r9
 8017456:	4620      	mov	r0, r4
 8017458:	f7ff ffa8 	bl	80173ac <L_shift>
 801745c:	4544      	cmp	r4, r8
 801745e:	d952      	bls.n	8017506 <__hexnan+0x10e>
 8017460:	2300      	movs	r3, #0
 8017462:	f1a4 0904 	sub.w	r9, r4, #4
 8017466:	f844 3c04 	str.w	r3, [r4, #-4]
 801746a:	f8cd b008 	str.w	fp, [sp, #8]
 801746e:	464c      	mov	r4, r9
 8017470:	461d      	mov	r5, r3
 8017472:	9903      	ldr	r1, [sp, #12]
 8017474:	e7d7      	b.n	8017426 <__hexnan+0x2e>
 8017476:	2a29      	cmp	r2, #41	@ 0x29
 8017478:	d157      	bne.n	801752a <__hexnan+0x132>
 801747a:	3102      	adds	r1, #2
 801747c:	f8ca 1000 	str.w	r1, [sl]
 8017480:	f1bb 0f00 	cmp.w	fp, #0
 8017484:	d051      	beq.n	801752a <__hexnan+0x132>
 8017486:	454c      	cmp	r4, r9
 8017488:	d206      	bcs.n	8017498 <__hexnan+0xa0>
 801748a:	2d07      	cmp	r5, #7
 801748c:	dc04      	bgt.n	8017498 <__hexnan+0xa0>
 801748e:	462a      	mov	r2, r5
 8017490:	4649      	mov	r1, r9
 8017492:	4620      	mov	r0, r4
 8017494:	f7ff ff8a 	bl	80173ac <L_shift>
 8017498:	4544      	cmp	r4, r8
 801749a:	d936      	bls.n	801750a <__hexnan+0x112>
 801749c:	f1a8 0204 	sub.w	r2, r8, #4
 80174a0:	4623      	mov	r3, r4
 80174a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80174a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80174aa:	429f      	cmp	r7, r3
 80174ac:	d2f9      	bcs.n	80174a2 <__hexnan+0xaa>
 80174ae:	1b3b      	subs	r3, r7, r4
 80174b0:	f023 0303 	bic.w	r3, r3, #3
 80174b4:	3304      	adds	r3, #4
 80174b6:	3401      	adds	r4, #1
 80174b8:	3e03      	subs	r6, #3
 80174ba:	42b4      	cmp	r4, r6
 80174bc:	bf88      	it	hi
 80174be:	2304      	movhi	r3, #4
 80174c0:	4443      	add	r3, r8
 80174c2:	2200      	movs	r2, #0
 80174c4:	f843 2b04 	str.w	r2, [r3], #4
 80174c8:	429f      	cmp	r7, r3
 80174ca:	d2fb      	bcs.n	80174c4 <__hexnan+0xcc>
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	b91b      	cbnz	r3, 80174d8 <__hexnan+0xe0>
 80174d0:	4547      	cmp	r7, r8
 80174d2:	d128      	bne.n	8017526 <__hexnan+0x12e>
 80174d4:	2301      	movs	r3, #1
 80174d6:	603b      	str	r3, [r7, #0]
 80174d8:	2005      	movs	r0, #5
 80174da:	b007      	add	sp, #28
 80174dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e0:	3501      	adds	r5, #1
 80174e2:	2d08      	cmp	r5, #8
 80174e4:	f10b 0b01 	add.w	fp, fp, #1
 80174e8:	dd06      	ble.n	80174f8 <__hexnan+0x100>
 80174ea:	4544      	cmp	r4, r8
 80174ec:	d9c1      	bls.n	8017472 <__hexnan+0x7a>
 80174ee:	2300      	movs	r3, #0
 80174f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80174f4:	2501      	movs	r5, #1
 80174f6:	3c04      	subs	r4, #4
 80174f8:	6822      	ldr	r2, [r4, #0]
 80174fa:	f000 000f 	and.w	r0, r0, #15
 80174fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017502:	6020      	str	r0, [r4, #0]
 8017504:	e7b5      	b.n	8017472 <__hexnan+0x7a>
 8017506:	2508      	movs	r5, #8
 8017508:	e7b3      	b.n	8017472 <__hexnan+0x7a>
 801750a:	9b01      	ldr	r3, [sp, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d0dd      	beq.n	80174cc <__hexnan+0xd4>
 8017510:	f1c3 0320 	rsb	r3, r3, #32
 8017514:	f04f 32ff 	mov.w	r2, #4294967295
 8017518:	40da      	lsrs	r2, r3
 801751a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801751e:	4013      	ands	r3, r2
 8017520:	f846 3c04 	str.w	r3, [r6, #-4]
 8017524:	e7d2      	b.n	80174cc <__hexnan+0xd4>
 8017526:	3f04      	subs	r7, #4
 8017528:	e7d0      	b.n	80174cc <__hexnan+0xd4>
 801752a:	2004      	movs	r0, #4
 801752c:	e7d5      	b.n	80174da <__hexnan+0xe2>

0801752e <__ascii_mbtowc>:
 801752e:	b082      	sub	sp, #8
 8017530:	b901      	cbnz	r1, 8017534 <__ascii_mbtowc+0x6>
 8017532:	a901      	add	r1, sp, #4
 8017534:	b142      	cbz	r2, 8017548 <__ascii_mbtowc+0x1a>
 8017536:	b14b      	cbz	r3, 801754c <__ascii_mbtowc+0x1e>
 8017538:	7813      	ldrb	r3, [r2, #0]
 801753a:	600b      	str	r3, [r1, #0]
 801753c:	7812      	ldrb	r2, [r2, #0]
 801753e:	1e10      	subs	r0, r2, #0
 8017540:	bf18      	it	ne
 8017542:	2001      	movne	r0, #1
 8017544:	b002      	add	sp, #8
 8017546:	4770      	bx	lr
 8017548:	4610      	mov	r0, r2
 801754a:	e7fb      	b.n	8017544 <__ascii_mbtowc+0x16>
 801754c:	f06f 0001 	mvn.w	r0, #1
 8017550:	e7f8      	b.n	8017544 <__ascii_mbtowc+0x16>
	...

08017554 <_Balloc>:
 8017554:	b570      	push	{r4, r5, r6, lr}
 8017556:	69c6      	ldr	r6, [r0, #28]
 8017558:	4604      	mov	r4, r0
 801755a:	460d      	mov	r5, r1
 801755c:	b976      	cbnz	r6, 801757c <_Balloc+0x28>
 801755e:	2010      	movs	r0, #16
 8017560:	f7fe fac6 	bl	8015af0 <malloc>
 8017564:	4602      	mov	r2, r0
 8017566:	61e0      	str	r0, [r4, #28]
 8017568:	b920      	cbnz	r0, 8017574 <_Balloc+0x20>
 801756a:	4b18      	ldr	r3, [pc, #96]	@ (80175cc <_Balloc+0x78>)
 801756c:	4818      	ldr	r0, [pc, #96]	@ (80175d0 <_Balloc+0x7c>)
 801756e:	216b      	movs	r1, #107	@ 0x6b
 8017570:	f7ff fc3c 	bl	8016dec <__assert_func>
 8017574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017578:	6006      	str	r6, [r0, #0]
 801757a:	60c6      	str	r6, [r0, #12]
 801757c:	69e6      	ldr	r6, [r4, #28]
 801757e:	68f3      	ldr	r3, [r6, #12]
 8017580:	b183      	cbz	r3, 80175a4 <_Balloc+0x50>
 8017582:	69e3      	ldr	r3, [r4, #28]
 8017584:	68db      	ldr	r3, [r3, #12]
 8017586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801758a:	b9b8      	cbnz	r0, 80175bc <_Balloc+0x68>
 801758c:	2101      	movs	r1, #1
 801758e:	fa01 f605 	lsl.w	r6, r1, r5
 8017592:	1d72      	adds	r2, r6, #5
 8017594:	0092      	lsls	r2, r2, #2
 8017596:	4620      	mov	r0, r4
 8017598:	f000 fd5d 	bl	8018056 <_calloc_r>
 801759c:	b160      	cbz	r0, 80175b8 <_Balloc+0x64>
 801759e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80175a2:	e00e      	b.n	80175c2 <_Balloc+0x6e>
 80175a4:	2221      	movs	r2, #33	@ 0x21
 80175a6:	2104      	movs	r1, #4
 80175a8:	4620      	mov	r0, r4
 80175aa:	f000 fd54 	bl	8018056 <_calloc_r>
 80175ae:	69e3      	ldr	r3, [r4, #28]
 80175b0:	60f0      	str	r0, [r6, #12]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d1e4      	bne.n	8017582 <_Balloc+0x2e>
 80175b8:	2000      	movs	r0, #0
 80175ba:	bd70      	pop	{r4, r5, r6, pc}
 80175bc:	6802      	ldr	r2, [r0, #0]
 80175be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80175c2:	2300      	movs	r3, #0
 80175c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80175c8:	e7f7      	b.n	80175ba <_Balloc+0x66>
 80175ca:	bf00      	nop
 80175cc:	08019201 	.word	0x08019201
 80175d0:	08019327 	.word	0x08019327

080175d4 <_Bfree>:
 80175d4:	b570      	push	{r4, r5, r6, lr}
 80175d6:	69c6      	ldr	r6, [r0, #28]
 80175d8:	4605      	mov	r5, r0
 80175da:	460c      	mov	r4, r1
 80175dc:	b976      	cbnz	r6, 80175fc <_Bfree+0x28>
 80175de:	2010      	movs	r0, #16
 80175e0:	f7fe fa86 	bl	8015af0 <malloc>
 80175e4:	4602      	mov	r2, r0
 80175e6:	61e8      	str	r0, [r5, #28]
 80175e8:	b920      	cbnz	r0, 80175f4 <_Bfree+0x20>
 80175ea:	4b09      	ldr	r3, [pc, #36]	@ (8017610 <_Bfree+0x3c>)
 80175ec:	4809      	ldr	r0, [pc, #36]	@ (8017614 <_Bfree+0x40>)
 80175ee:	218f      	movs	r1, #143	@ 0x8f
 80175f0:	f7ff fbfc 	bl	8016dec <__assert_func>
 80175f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80175f8:	6006      	str	r6, [r0, #0]
 80175fa:	60c6      	str	r6, [r0, #12]
 80175fc:	b13c      	cbz	r4, 801760e <_Bfree+0x3a>
 80175fe:	69eb      	ldr	r3, [r5, #28]
 8017600:	6862      	ldr	r2, [r4, #4]
 8017602:	68db      	ldr	r3, [r3, #12]
 8017604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017608:	6021      	str	r1, [r4, #0]
 801760a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801760e:	bd70      	pop	{r4, r5, r6, pc}
 8017610:	08019201 	.word	0x08019201
 8017614:	08019327 	.word	0x08019327

08017618 <__multadd>:
 8017618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801761c:	690d      	ldr	r5, [r1, #16]
 801761e:	4607      	mov	r7, r0
 8017620:	460c      	mov	r4, r1
 8017622:	461e      	mov	r6, r3
 8017624:	f101 0c14 	add.w	ip, r1, #20
 8017628:	2000      	movs	r0, #0
 801762a:	f8dc 3000 	ldr.w	r3, [ip]
 801762e:	b299      	uxth	r1, r3
 8017630:	fb02 6101 	mla	r1, r2, r1, r6
 8017634:	0c1e      	lsrs	r6, r3, #16
 8017636:	0c0b      	lsrs	r3, r1, #16
 8017638:	fb02 3306 	mla	r3, r2, r6, r3
 801763c:	b289      	uxth	r1, r1
 801763e:	3001      	adds	r0, #1
 8017640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017644:	4285      	cmp	r5, r0
 8017646:	f84c 1b04 	str.w	r1, [ip], #4
 801764a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801764e:	dcec      	bgt.n	801762a <__multadd+0x12>
 8017650:	b30e      	cbz	r6, 8017696 <__multadd+0x7e>
 8017652:	68a3      	ldr	r3, [r4, #8]
 8017654:	42ab      	cmp	r3, r5
 8017656:	dc19      	bgt.n	801768c <__multadd+0x74>
 8017658:	6861      	ldr	r1, [r4, #4]
 801765a:	4638      	mov	r0, r7
 801765c:	3101      	adds	r1, #1
 801765e:	f7ff ff79 	bl	8017554 <_Balloc>
 8017662:	4680      	mov	r8, r0
 8017664:	b928      	cbnz	r0, 8017672 <__multadd+0x5a>
 8017666:	4602      	mov	r2, r0
 8017668:	4b0c      	ldr	r3, [pc, #48]	@ (801769c <__multadd+0x84>)
 801766a:	480d      	ldr	r0, [pc, #52]	@ (80176a0 <__multadd+0x88>)
 801766c:	21ba      	movs	r1, #186	@ 0xba
 801766e:	f7ff fbbd 	bl	8016dec <__assert_func>
 8017672:	6922      	ldr	r2, [r4, #16]
 8017674:	3202      	adds	r2, #2
 8017676:	f104 010c 	add.w	r1, r4, #12
 801767a:	0092      	lsls	r2, r2, #2
 801767c:	300c      	adds	r0, #12
 801767e:	f7ff fb96 	bl	8016dae <memcpy>
 8017682:	4621      	mov	r1, r4
 8017684:	4638      	mov	r0, r7
 8017686:	f7ff ffa5 	bl	80175d4 <_Bfree>
 801768a:	4644      	mov	r4, r8
 801768c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017690:	3501      	adds	r5, #1
 8017692:	615e      	str	r6, [r3, #20]
 8017694:	6125      	str	r5, [r4, #16]
 8017696:	4620      	mov	r0, r4
 8017698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801769c:	080192b6 	.word	0x080192b6
 80176a0:	08019327 	.word	0x08019327

080176a4 <__s2b>:
 80176a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176a8:	460c      	mov	r4, r1
 80176aa:	4615      	mov	r5, r2
 80176ac:	461f      	mov	r7, r3
 80176ae:	2209      	movs	r2, #9
 80176b0:	3308      	adds	r3, #8
 80176b2:	4606      	mov	r6, r0
 80176b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80176b8:	2100      	movs	r1, #0
 80176ba:	2201      	movs	r2, #1
 80176bc:	429a      	cmp	r2, r3
 80176be:	db09      	blt.n	80176d4 <__s2b+0x30>
 80176c0:	4630      	mov	r0, r6
 80176c2:	f7ff ff47 	bl	8017554 <_Balloc>
 80176c6:	b940      	cbnz	r0, 80176da <__s2b+0x36>
 80176c8:	4602      	mov	r2, r0
 80176ca:	4b19      	ldr	r3, [pc, #100]	@ (8017730 <__s2b+0x8c>)
 80176cc:	4819      	ldr	r0, [pc, #100]	@ (8017734 <__s2b+0x90>)
 80176ce:	21d3      	movs	r1, #211	@ 0xd3
 80176d0:	f7ff fb8c 	bl	8016dec <__assert_func>
 80176d4:	0052      	lsls	r2, r2, #1
 80176d6:	3101      	adds	r1, #1
 80176d8:	e7f0      	b.n	80176bc <__s2b+0x18>
 80176da:	9b08      	ldr	r3, [sp, #32]
 80176dc:	6143      	str	r3, [r0, #20]
 80176de:	2d09      	cmp	r5, #9
 80176e0:	f04f 0301 	mov.w	r3, #1
 80176e4:	6103      	str	r3, [r0, #16]
 80176e6:	dd16      	ble.n	8017716 <__s2b+0x72>
 80176e8:	f104 0909 	add.w	r9, r4, #9
 80176ec:	46c8      	mov	r8, r9
 80176ee:	442c      	add	r4, r5
 80176f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80176f4:	4601      	mov	r1, r0
 80176f6:	3b30      	subs	r3, #48	@ 0x30
 80176f8:	220a      	movs	r2, #10
 80176fa:	4630      	mov	r0, r6
 80176fc:	f7ff ff8c 	bl	8017618 <__multadd>
 8017700:	45a0      	cmp	r8, r4
 8017702:	d1f5      	bne.n	80176f0 <__s2b+0x4c>
 8017704:	f1a5 0408 	sub.w	r4, r5, #8
 8017708:	444c      	add	r4, r9
 801770a:	1b2d      	subs	r5, r5, r4
 801770c:	1963      	adds	r3, r4, r5
 801770e:	42bb      	cmp	r3, r7
 8017710:	db04      	blt.n	801771c <__s2b+0x78>
 8017712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017716:	340a      	adds	r4, #10
 8017718:	2509      	movs	r5, #9
 801771a:	e7f6      	b.n	801770a <__s2b+0x66>
 801771c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017720:	4601      	mov	r1, r0
 8017722:	3b30      	subs	r3, #48	@ 0x30
 8017724:	220a      	movs	r2, #10
 8017726:	4630      	mov	r0, r6
 8017728:	f7ff ff76 	bl	8017618 <__multadd>
 801772c:	e7ee      	b.n	801770c <__s2b+0x68>
 801772e:	bf00      	nop
 8017730:	080192b6 	.word	0x080192b6
 8017734:	08019327 	.word	0x08019327

08017738 <__hi0bits>:
 8017738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801773c:	4603      	mov	r3, r0
 801773e:	bf36      	itet	cc
 8017740:	0403      	lslcc	r3, r0, #16
 8017742:	2000      	movcs	r0, #0
 8017744:	2010      	movcc	r0, #16
 8017746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801774a:	bf3c      	itt	cc
 801774c:	021b      	lslcc	r3, r3, #8
 801774e:	3008      	addcc	r0, #8
 8017750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017754:	bf3c      	itt	cc
 8017756:	011b      	lslcc	r3, r3, #4
 8017758:	3004      	addcc	r0, #4
 801775a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801775e:	bf3c      	itt	cc
 8017760:	009b      	lslcc	r3, r3, #2
 8017762:	3002      	addcc	r0, #2
 8017764:	2b00      	cmp	r3, #0
 8017766:	db05      	blt.n	8017774 <__hi0bits+0x3c>
 8017768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801776c:	f100 0001 	add.w	r0, r0, #1
 8017770:	bf08      	it	eq
 8017772:	2020      	moveq	r0, #32
 8017774:	4770      	bx	lr

08017776 <__lo0bits>:
 8017776:	6803      	ldr	r3, [r0, #0]
 8017778:	4602      	mov	r2, r0
 801777a:	f013 0007 	ands.w	r0, r3, #7
 801777e:	d00b      	beq.n	8017798 <__lo0bits+0x22>
 8017780:	07d9      	lsls	r1, r3, #31
 8017782:	d421      	bmi.n	80177c8 <__lo0bits+0x52>
 8017784:	0798      	lsls	r0, r3, #30
 8017786:	bf49      	itett	mi
 8017788:	085b      	lsrmi	r3, r3, #1
 801778a:	089b      	lsrpl	r3, r3, #2
 801778c:	2001      	movmi	r0, #1
 801778e:	6013      	strmi	r3, [r2, #0]
 8017790:	bf5c      	itt	pl
 8017792:	6013      	strpl	r3, [r2, #0]
 8017794:	2002      	movpl	r0, #2
 8017796:	4770      	bx	lr
 8017798:	b299      	uxth	r1, r3
 801779a:	b909      	cbnz	r1, 80177a0 <__lo0bits+0x2a>
 801779c:	0c1b      	lsrs	r3, r3, #16
 801779e:	2010      	movs	r0, #16
 80177a0:	b2d9      	uxtb	r1, r3
 80177a2:	b909      	cbnz	r1, 80177a8 <__lo0bits+0x32>
 80177a4:	3008      	adds	r0, #8
 80177a6:	0a1b      	lsrs	r3, r3, #8
 80177a8:	0719      	lsls	r1, r3, #28
 80177aa:	bf04      	itt	eq
 80177ac:	091b      	lsreq	r3, r3, #4
 80177ae:	3004      	addeq	r0, #4
 80177b0:	0799      	lsls	r1, r3, #30
 80177b2:	bf04      	itt	eq
 80177b4:	089b      	lsreq	r3, r3, #2
 80177b6:	3002      	addeq	r0, #2
 80177b8:	07d9      	lsls	r1, r3, #31
 80177ba:	d403      	bmi.n	80177c4 <__lo0bits+0x4e>
 80177bc:	085b      	lsrs	r3, r3, #1
 80177be:	f100 0001 	add.w	r0, r0, #1
 80177c2:	d003      	beq.n	80177cc <__lo0bits+0x56>
 80177c4:	6013      	str	r3, [r2, #0]
 80177c6:	4770      	bx	lr
 80177c8:	2000      	movs	r0, #0
 80177ca:	4770      	bx	lr
 80177cc:	2020      	movs	r0, #32
 80177ce:	4770      	bx	lr

080177d0 <__i2b>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	460c      	mov	r4, r1
 80177d4:	2101      	movs	r1, #1
 80177d6:	f7ff febd 	bl	8017554 <_Balloc>
 80177da:	4602      	mov	r2, r0
 80177dc:	b928      	cbnz	r0, 80177ea <__i2b+0x1a>
 80177de:	4b05      	ldr	r3, [pc, #20]	@ (80177f4 <__i2b+0x24>)
 80177e0:	4805      	ldr	r0, [pc, #20]	@ (80177f8 <__i2b+0x28>)
 80177e2:	f240 1145 	movw	r1, #325	@ 0x145
 80177e6:	f7ff fb01 	bl	8016dec <__assert_func>
 80177ea:	2301      	movs	r3, #1
 80177ec:	6144      	str	r4, [r0, #20]
 80177ee:	6103      	str	r3, [r0, #16]
 80177f0:	bd10      	pop	{r4, pc}
 80177f2:	bf00      	nop
 80177f4:	080192b6 	.word	0x080192b6
 80177f8:	08019327 	.word	0x08019327

080177fc <__multiply>:
 80177fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017800:	4614      	mov	r4, r2
 8017802:	690a      	ldr	r2, [r1, #16]
 8017804:	6923      	ldr	r3, [r4, #16]
 8017806:	429a      	cmp	r2, r3
 8017808:	bfa8      	it	ge
 801780a:	4623      	movge	r3, r4
 801780c:	460f      	mov	r7, r1
 801780e:	bfa4      	itt	ge
 8017810:	460c      	movge	r4, r1
 8017812:	461f      	movge	r7, r3
 8017814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801781c:	68a3      	ldr	r3, [r4, #8]
 801781e:	6861      	ldr	r1, [r4, #4]
 8017820:	eb0a 0609 	add.w	r6, sl, r9
 8017824:	42b3      	cmp	r3, r6
 8017826:	b085      	sub	sp, #20
 8017828:	bfb8      	it	lt
 801782a:	3101      	addlt	r1, #1
 801782c:	f7ff fe92 	bl	8017554 <_Balloc>
 8017830:	b930      	cbnz	r0, 8017840 <__multiply+0x44>
 8017832:	4602      	mov	r2, r0
 8017834:	4b44      	ldr	r3, [pc, #272]	@ (8017948 <__multiply+0x14c>)
 8017836:	4845      	ldr	r0, [pc, #276]	@ (801794c <__multiply+0x150>)
 8017838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801783c:	f7ff fad6 	bl	8016dec <__assert_func>
 8017840:	f100 0514 	add.w	r5, r0, #20
 8017844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017848:	462b      	mov	r3, r5
 801784a:	2200      	movs	r2, #0
 801784c:	4543      	cmp	r3, r8
 801784e:	d321      	bcc.n	8017894 <__multiply+0x98>
 8017850:	f107 0114 	add.w	r1, r7, #20
 8017854:	f104 0214 	add.w	r2, r4, #20
 8017858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801785c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017860:	9302      	str	r3, [sp, #8]
 8017862:	1b13      	subs	r3, r2, r4
 8017864:	3b15      	subs	r3, #21
 8017866:	f023 0303 	bic.w	r3, r3, #3
 801786a:	3304      	adds	r3, #4
 801786c:	f104 0715 	add.w	r7, r4, #21
 8017870:	42ba      	cmp	r2, r7
 8017872:	bf38      	it	cc
 8017874:	2304      	movcc	r3, #4
 8017876:	9301      	str	r3, [sp, #4]
 8017878:	9b02      	ldr	r3, [sp, #8]
 801787a:	9103      	str	r1, [sp, #12]
 801787c:	428b      	cmp	r3, r1
 801787e:	d80c      	bhi.n	801789a <__multiply+0x9e>
 8017880:	2e00      	cmp	r6, #0
 8017882:	dd03      	ble.n	801788c <__multiply+0x90>
 8017884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017888:	2b00      	cmp	r3, #0
 801788a:	d05b      	beq.n	8017944 <__multiply+0x148>
 801788c:	6106      	str	r6, [r0, #16]
 801788e:	b005      	add	sp, #20
 8017890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017894:	f843 2b04 	str.w	r2, [r3], #4
 8017898:	e7d8      	b.n	801784c <__multiply+0x50>
 801789a:	f8b1 a000 	ldrh.w	sl, [r1]
 801789e:	f1ba 0f00 	cmp.w	sl, #0
 80178a2:	d024      	beq.n	80178ee <__multiply+0xf2>
 80178a4:	f104 0e14 	add.w	lr, r4, #20
 80178a8:	46a9      	mov	r9, r5
 80178aa:	f04f 0c00 	mov.w	ip, #0
 80178ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178b2:	f8d9 3000 	ldr.w	r3, [r9]
 80178b6:	fa1f fb87 	uxth.w	fp, r7
 80178ba:	b29b      	uxth	r3, r3
 80178bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80178c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80178c4:	f8d9 7000 	ldr.w	r7, [r9]
 80178c8:	4463      	add	r3, ip
 80178ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80178ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80178d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80178dc:	4572      	cmp	r2, lr
 80178de:	f849 3b04 	str.w	r3, [r9], #4
 80178e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80178e6:	d8e2      	bhi.n	80178ae <__multiply+0xb2>
 80178e8:	9b01      	ldr	r3, [sp, #4]
 80178ea:	f845 c003 	str.w	ip, [r5, r3]
 80178ee:	9b03      	ldr	r3, [sp, #12]
 80178f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80178f4:	3104      	adds	r1, #4
 80178f6:	f1b9 0f00 	cmp.w	r9, #0
 80178fa:	d021      	beq.n	8017940 <__multiply+0x144>
 80178fc:	682b      	ldr	r3, [r5, #0]
 80178fe:	f104 0c14 	add.w	ip, r4, #20
 8017902:	46ae      	mov	lr, r5
 8017904:	f04f 0a00 	mov.w	sl, #0
 8017908:	f8bc b000 	ldrh.w	fp, [ip]
 801790c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017910:	fb09 770b 	mla	r7, r9, fp, r7
 8017914:	4457      	add	r7, sl
 8017916:	b29b      	uxth	r3, r3
 8017918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801791c:	f84e 3b04 	str.w	r3, [lr], #4
 8017920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017928:	f8be 3000 	ldrh.w	r3, [lr]
 801792c:	fb09 330a 	mla	r3, r9, sl, r3
 8017930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017934:	4562      	cmp	r2, ip
 8017936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801793a:	d8e5      	bhi.n	8017908 <__multiply+0x10c>
 801793c:	9f01      	ldr	r7, [sp, #4]
 801793e:	51eb      	str	r3, [r5, r7]
 8017940:	3504      	adds	r5, #4
 8017942:	e799      	b.n	8017878 <__multiply+0x7c>
 8017944:	3e01      	subs	r6, #1
 8017946:	e79b      	b.n	8017880 <__multiply+0x84>
 8017948:	080192b6 	.word	0x080192b6
 801794c:	08019327 	.word	0x08019327

08017950 <__pow5mult>:
 8017950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017954:	4615      	mov	r5, r2
 8017956:	f012 0203 	ands.w	r2, r2, #3
 801795a:	4607      	mov	r7, r0
 801795c:	460e      	mov	r6, r1
 801795e:	d007      	beq.n	8017970 <__pow5mult+0x20>
 8017960:	4c25      	ldr	r4, [pc, #148]	@ (80179f8 <__pow5mult+0xa8>)
 8017962:	3a01      	subs	r2, #1
 8017964:	2300      	movs	r3, #0
 8017966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801796a:	f7ff fe55 	bl	8017618 <__multadd>
 801796e:	4606      	mov	r6, r0
 8017970:	10ad      	asrs	r5, r5, #2
 8017972:	d03d      	beq.n	80179f0 <__pow5mult+0xa0>
 8017974:	69fc      	ldr	r4, [r7, #28]
 8017976:	b97c      	cbnz	r4, 8017998 <__pow5mult+0x48>
 8017978:	2010      	movs	r0, #16
 801797a:	f7fe f8b9 	bl	8015af0 <malloc>
 801797e:	4602      	mov	r2, r0
 8017980:	61f8      	str	r0, [r7, #28]
 8017982:	b928      	cbnz	r0, 8017990 <__pow5mult+0x40>
 8017984:	4b1d      	ldr	r3, [pc, #116]	@ (80179fc <__pow5mult+0xac>)
 8017986:	481e      	ldr	r0, [pc, #120]	@ (8017a00 <__pow5mult+0xb0>)
 8017988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801798c:	f7ff fa2e 	bl	8016dec <__assert_func>
 8017990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017994:	6004      	str	r4, [r0, #0]
 8017996:	60c4      	str	r4, [r0, #12]
 8017998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801799c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80179a0:	b94c      	cbnz	r4, 80179b6 <__pow5mult+0x66>
 80179a2:	f240 2171 	movw	r1, #625	@ 0x271
 80179a6:	4638      	mov	r0, r7
 80179a8:	f7ff ff12 	bl	80177d0 <__i2b>
 80179ac:	2300      	movs	r3, #0
 80179ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80179b2:	4604      	mov	r4, r0
 80179b4:	6003      	str	r3, [r0, #0]
 80179b6:	f04f 0900 	mov.w	r9, #0
 80179ba:	07eb      	lsls	r3, r5, #31
 80179bc:	d50a      	bpl.n	80179d4 <__pow5mult+0x84>
 80179be:	4631      	mov	r1, r6
 80179c0:	4622      	mov	r2, r4
 80179c2:	4638      	mov	r0, r7
 80179c4:	f7ff ff1a 	bl	80177fc <__multiply>
 80179c8:	4631      	mov	r1, r6
 80179ca:	4680      	mov	r8, r0
 80179cc:	4638      	mov	r0, r7
 80179ce:	f7ff fe01 	bl	80175d4 <_Bfree>
 80179d2:	4646      	mov	r6, r8
 80179d4:	106d      	asrs	r5, r5, #1
 80179d6:	d00b      	beq.n	80179f0 <__pow5mult+0xa0>
 80179d8:	6820      	ldr	r0, [r4, #0]
 80179da:	b938      	cbnz	r0, 80179ec <__pow5mult+0x9c>
 80179dc:	4622      	mov	r2, r4
 80179de:	4621      	mov	r1, r4
 80179e0:	4638      	mov	r0, r7
 80179e2:	f7ff ff0b 	bl	80177fc <__multiply>
 80179e6:	6020      	str	r0, [r4, #0]
 80179e8:	f8c0 9000 	str.w	r9, [r0]
 80179ec:	4604      	mov	r4, r0
 80179ee:	e7e4      	b.n	80179ba <__pow5mult+0x6a>
 80179f0:	4630      	mov	r0, r6
 80179f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179f6:	bf00      	nop
 80179f8:	08019380 	.word	0x08019380
 80179fc:	08019201 	.word	0x08019201
 8017a00:	08019327 	.word	0x08019327

08017a04 <__lshift>:
 8017a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a08:	460c      	mov	r4, r1
 8017a0a:	6849      	ldr	r1, [r1, #4]
 8017a0c:	6923      	ldr	r3, [r4, #16]
 8017a0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017a12:	68a3      	ldr	r3, [r4, #8]
 8017a14:	4607      	mov	r7, r0
 8017a16:	4691      	mov	r9, r2
 8017a18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017a1c:	f108 0601 	add.w	r6, r8, #1
 8017a20:	42b3      	cmp	r3, r6
 8017a22:	db0b      	blt.n	8017a3c <__lshift+0x38>
 8017a24:	4638      	mov	r0, r7
 8017a26:	f7ff fd95 	bl	8017554 <_Balloc>
 8017a2a:	4605      	mov	r5, r0
 8017a2c:	b948      	cbnz	r0, 8017a42 <__lshift+0x3e>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	4b28      	ldr	r3, [pc, #160]	@ (8017ad4 <__lshift+0xd0>)
 8017a32:	4829      	ldr	r0, [pc, #164]	@ (8017ad8 <__lshift+0xd4>)
 8017a34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017a38:	f7ff f9d8 	bl	8016dec <__assert_func>
 8017a3c:	3101      	adds	r1, #1
 8017a3e:	005b      	lsls	r3, r3, #1
 8017a40:	e7ee      	b.n	8017a20 <__lshift+0x1c>
 8017a42:	2300      	movs	r3, #0
 8017a44:	f100 0114 	add.w	r1, r0, #20
 8017a48:	f100 0210 	add.w	r2, r0, #16
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	4553      	cmp	r3, sl
 8017a50:	db33      	blt.n	8017aba <__lshift+0xb6>
 8017a52:	6920      	ldr	r0, [r4, #16]
 8017a54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017a58:	f104 0314 	add.w	r3, r4, #20
 8017a5c:	f019 091f 	ands.w	r9, r9, #31
 8017a60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017a68:	d02b      	beq.n	8017ac2 <__lshift+0xbe>
 8017a6a:	f1c9 0e20 	rsb	lr, r9, #32
 8017a6e:	468a      	mov	sl, r1
 8017a70:	2200      	movs	r2, #0
 8017a72:	6818      	ldr	r0, [r3, #0]
 8017a74:	fa00 f009 	lsl.w	r0, r0, r9
 8017a78:	4310      	orrs	r0, r2
 8017a7a:	f84a 0b04 	str.w	r0, [sl], #4
 8017a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a82:	459c      	cmp	ip, r3
 8017a84:	fa22 f20e 	lsr.w	r2, r2, lr
 8017a88:	d8f3      	bhi.n	8017a72 <__lshift+0x6e>
 8017a8a:	ebac 0304 	sub.w	r3, ip, r4
 8017a8e:	3b15      	subs	r3, #21
 8017a90:	f023 0303 	bic.w	r3, r3, #3
 8017a94:	3304      	adds	r3, #4
 8017a96:	f104 0015 	add.w	r0, r4, #21
 8017a9a:	4584      	cmp	ip, r0
 8017a9c:	bf38      	it	cc
 8017a9e:	2304      	movcc	r3, #4
 8017aa0:	50ca      	str	r2, [r1, r3]
 8017aa2:	b10a      	cbz	r2, 8017aa8 <__lshift+0xa4>
 8017aa4:	f108 0602 	add.w	r6, r8, #2
 8017aa8:	3e01      	subs	r6, #1
 8017aaa:	4638      	mov	r0, r7
 8017aac:	612e      	str	r6, [r5, #16]
 8017aae:	4621      	mov	r1, r4
 8017ab0:	f7ff fd90 	bl	80175d4 <_Bfree>
 8017ab4:	4628      	mov	r0, r5
 8017ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8017abe:	3301      	adds	r3, #1
 8017ac0:	e7c5      	b.n	8017a4e <__lshift+0x4a>
 8017ac2:	3904      	subs	r1, #4
 8017ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ac8:	f841 2f04 	str.w	r2, [r1, #4]!
 8017acc:	459c      	cmp	ip, r3
 8017ace:	d8f9      	bhi.n	8017ac4 <__lshift+0xc0>
 8017ad0:	e7ea      	b.n	8017aa8 <__lshift+0xa4>
 8017ad2:	bf00      	nop
 8017ad4:	080192b6 	.word	0x080192b6
 8017ad8:	08019327 	.word	0x08019327

08017adc <__mcmp>:
 8017adc:	690a      	ldr	r2, [r1, #16]
 8017ade:	4603      	mov	r3, r0
 8017ae0:	6900      	ldr	r0, [r0, #16]
 8017ae2:	1a80      	subs	r0, r0, r2
 8017ae4:	b530      	push	{r4, r5, lr}
 8017ae6:	d10e      	bne.n	8017b06 <__mcmp+0x2a>
 8017ae8:	3314      	adds	r3, #20
 8017aea:	3114      	adds	r1, #20
 8017aec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017af0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017afc:	4295      	cmp	r5, r2
 8017afe:	d003      	beq.n	8017b08 <__mcmp+0x2c>
 8017b00:	d205      	bcs.n	8017b0e <__mcmp+0x32>
 8017b02:	f04f 30ff 	mov.w	r0, #4294967295
 8017b06:	bd30      	pop	{r4, r5, pc}
 8017b08:	42a3      	cmp	r3, r4
 8017b0a:	d3f3      	bcc.n	8017af4 <__mcmp+0x18>
 8017b0c:	e7fb      	b.n	8017b06 <__mcmp+0x2a>
 8017b0e:	2001      	movs	r0, #1
 8017b10:	e7f9      	b.n	8017b06 <__mcmp+0x2a>
	...

08017b14 <__mdiff>:
 8017b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b18:	4689      	mov	r9, r1
 8017b1a:	4606      	mov	r6, r0
 8017b1c:	4611      	mov	r1, r2
 8017b1e:	4648      	mov	r0, r9
 8017b20:	4614      	mov	r4, r2
 8017b22:	f7ff ffdb 	bl	8017adc <__mcmp>
 8017b26:	1e05      	subs	r5, r0, #0
 8017b28:	d112      	bne.n	8017b50 <__mdiff+0x3c>
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	f7ff fd11 	bl	8017554 <_Balloc>
 8017b32:	4602      	mov	r2, r0
 8017b34:	b928      	cbnz	r0, 8017b42 <__mdiff+0x2e>
 8017b36:	4b3f      	ldr	r3, [pc, #252]	@ (8017c34 <__mdiff+0x120>)
 8017b38:	f240 2137 	movw	r1, #567	@ 0x237
 8017b3c:	483e      	ldr	r0, [pc, #248]	@ (8017c38 <__mdiff+0x124>)
 8017b3e:	f7ff f955 	bl	8016dec <__assert_func>
 8017b42:	2301      	movs	r3, #1
 8017b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017b48:	4610      	mov	r0, r2
 8017b4a:	b003      	add	sp, #12
 8017b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b50:	bfbc      	itt	lt
 8017b52:	464b      	movlt	r3, r9
 8017b54:	46a1      	movlt	r9, r4
 8017b56:	4630      	mov	r0, r6
 8017b58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017b5c:	bfba      	itte	lt
 8017b5e:	461c      	movlt	r4, r3
 8017b60:	2501      	movlt	r5, #1
 8017b62:	2500      	movge	r5, #0
 8017b64:	f7ff fcf6 	bl	8017554 <_Balloc>
 8017b68:	4602      	mov	r2, r0
 8017b6a:	b918      	cbnz	r0, 8017b74 <__mdiff+0x60>
 8017b6c:	4b31      	ldr	r3, [pc, #196]	@ (8017c34 <__mdiff+0x120>)
 8017b6e:	f240 2145 	movw	r1, #581	@ 0x245
 8017b72:	e7e3      	b.n	8017b3c <__mdiff+0x28>
 8017b74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017b78:	6926      	ldr	r6, [r4, #16]
 8017b7a:	60c5      	str	r5, [r0, #12]
 8017b7c:	f109 0310 	add.w	r3, r9, #16
 8017b80:	f109 0514 	add.w	r5, r9, #20
 8017b84:	f104 0e14 	add.w	lr, r4, #20
 8017b88:	f100 0b14 	add.w	fp, r0, #20
 8017b8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017b90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017b94:	9301      	str	r3, [sp, #4]
 8017b96:	46d9      	mov	r9, fp
 8017b98:	f04f 0c00 	mov.w	ip, #0
 8017b9c:	9b01      	ldr	r3, [sp, #4]
 8017b9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017ba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017ba6:	9301      	str	r3, [sp, #4]
 8017ba8:	fa1f f38a 	uxth.w	r3, sl
 8017bac:	4619      	mov	r1, r3
 8017bae:	b283      	uxth	r3, r0
 8017bb0:	1acb      	subs	r3, r1, r3
 8017bb2:	0c00      	lsrs	r0, r0, #16
 8017bb4:	4463      	add	r3, ip
 8017bb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017bba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017bc4:	4576      	cmp	r6, lr
 8017bc6:	f849 3b04 	str.w	r3, [r9], #4
 8017bca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017bce:	d8e5      	bhi.n	8017b9c <__mdiff+0x88>
 8017bd0:	1b33      	subs	r3, r6, r4
 8017bd2:	3b15      	subs	r3, #21
 8017bd4:	f023 0303 	bic.w	r3, r3, #3
 8017bd8:	3415      	adds	r4, #21
 8017bda:	3304      	adds	r3, #4
 8017bdc:	42a6      	cmp	r6, r4
 8017bde:	bf38      	it	cc
 8017be0:	2304      	movcc	r3, #4
 8017be2:	441d      	add	r5, r3
 8017be4:	445b      	add	r3, fp
 8017be6:	461e      	mov	r6, r3
 8017be8:	462c      	mov	r4, r5
 8017bea:	4544      	cmp	r4, r8
 8017bec:	d30e      	bcc.n	8017c0c <__mdiff+0xf8>
 8017bee:	f108 0103 	add.w	r1, r8, #3
 8017bf2:	1b49      	subs	r1, r1, r5
 8017bf4:	f021 0103 	bic.w	r1, r1, #3
 8017bf8:	3d03      	subs	r5, #3
 8017bfa:	45a8      	cmp	r8, r5
 8017bfc:	bf38      	it	cc
 8017bfe:	2100      	movcc	r1, #0
 8017c00:	440b      	add	r3, r1
 8017c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c06:	b191      	cbz	r1, 8017c2e <__mdiff+0x11a>
 8017c08:	6117      	str	r7, [r2, #16]
 8017c0a:	e79d      	b.n	8017b48 <__mdiff+0x34>
 8017c0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017c10:	46e6      	mov	lr, ip
 8017c12:	0c08      	lsrs	r0, r1, #16
 8017c14:	fa1c fc81 	uxtah	ip, ip, r1
 8017c18:	4471      	add	r1, lr
 8017c1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017c1e:	b289      	uxth	r1, r1
 8017c20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017c24:	f846 1b04 	str.w	r1, [r6], #4
 8017c28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017c2c:	e7dd      	b.n	8017bea <__mdiff+0xd6>
 8017c2e:	3f01      	subs	r7, #1
 8017c30:	e7e7      	b.n	8017c02 <__mdiff+0xee>
 8017c32:	bf00      	nop
 8017c34:	080192b6 	.word	0x080192b6
 8017c38:	08019327 	.word	0x08019327

08017c3c <__ulp>:
 8017c3c:	b082      	sub	sp, #8
 8017c3e:	ed8d 0b00 	vstr	d0, [sp]
 8017c42:	9a01      	ldr	r2, [sp, #4]
 8017c44:	4b0f      	ldr	r3, [pc, #60]	@ (8017c84 <__ulp+0x48>)
 8017c46:	4013      	ands	r3, r2
 8017c48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	dc08      	bgt.n	8017c62 <__ulp+0x26>
 8017c50:	425b      	negs	r3, r3
 8017c52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017c56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017c5a:	da04      	bge.n	8017c66 <__ulp+0x2a>
 8017c5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017c60:	4113      	asrs	r3, r2
 8017c62:	2200      	movs	r2, #0
 8017c64:	e008      	b.n	8017c78 <__ulp+0x3c>
 8017c66:	f1a2 0314 	sub.w	r3, r2, #20
 8017c6a:	2b1e      	cmp	r3, #30
 8017c6c:	bfda      	itte	le
 8017c6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017c72:	40da      	lsrle	r2, r3
 8017c74:	2201      	movgt	r2, #1
 8017c76:	2300      	movs	r3, #0
 8017c78:	4619      	mov	r1, r3
 8017c7a:	4610      	mov	r0, r2
 8017c7c:	ec41 0b10 	vmov	d0, r0, r1
 8017c80:	b002      	add	sp, #8
 8017c82:	4770      	bx	lr
 8017c84:	7ff00000 	.word	0x7ff00000

08017c88 <__b2d>:
 8017c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c8c:	6906      	ldr	r6, [r0, #16]
 8017c8e:	f100 0814 	add.w	r8, r0, #20
 8017c92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017c96:	1f37      	subs	r7, r6, #4
 8017c98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017c9c:	4610      	mov	r0, r2
 8017c9e:	f7ff fd4b 	bl	8017738 <__hi0bits>
 8017ca2:	f1c0 0320 	rsb	r3, r0, #32
 8017ca6:	280a      	cmp	r0, #10
 8017ca8:	600b      	str	r3, [r1, #0]
 8017caa:	491b      	ldr	r1, [pc, #108]	@ (8017d18 <__b2d+0x90>)
 8017cac:	dc15      	bgt.n	8017cda <__b2d+0x52>
 8017cae:	f1c0 0c0b 	rsb	ip, r0, #11
 8017cb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8017cb6:	45b8      	cmp	r8, r7
 8017cb8:	ea43 0501 	orr.w	r5, r3, r1
 8017cbc:	bf34      	ite	cc
 8017cbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017cc2:	2300      	movcs	r3, #0
 8017cc4:	3015      	adds	r0, #21
 8017cc6:	fa02 f000 	lsl.w	r0, r2, r0
 8017cca:	fa23 f30c 	lsr.w	r3, r3, ip
 8017cce:	4303      	orrs	r3, r0
 8017cd0:	461c      	mov	r4, r3
 8017cd2:	ec45 4b10 	vmov	d0, r4, r5
 8017cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cda:	45b8      	cmp	r8, r7
 8017cdc:	bf3a      	itte	cc
 8017cde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017ce2:	f1a6 0708 	subcc.w	r7, r6, #8
 8017ce6:	2300      	movcs	r3, #0
 8017ce8:	380b      	subs	r0, #11
 8017cea:	d012      	beq.n	8017d12 <__b2d+0x8a>
 8017cec:	f1c0 0120 	rsb	r1, r0, #32
 8017cf0:	fa23 f401 	lsr.w	r4, r3, r1
 8017cf4:	4082      	lsls	r2, r0
 8017cf6:	4322      	orrs	r2, r4
 8017cf8:	4547      	cmp	r7, r8
 8017cfa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017cfe:	bf8c      	ite	hi
 8017d00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017d04:	2200      	movls	r2, #0
 8017d06:	4083      	lsls	r3, r0
 8017d08:	40ca      	lsrs	r2, r1
 8017d0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017d0e:	4313      	orrs	r3, r2
 8017d10:	e7de      	b.n	8017cd0 <__b2d+0x48>
 8017d12:	ea42 0501 	orr.w	r5, r2, r1
 8017d16:	e7db      	b.n	8017cd0 <__b2d+0x48>
 8017d18:	3ff00000 	.word	0x3ff00000

08017d1c <__d2b>:
 8017d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d20:	460f      	mov	r7, r1
 8017d22:	2101      	movs	r1, #1
 8017d24:	ec59 8b10 	vmov	r8, r9, d0
 8017d28:	4616      	mov	r6, r2
 8017d2a:	f7ff fc13 	bl	8017554 <_Balloc>
 8017d2e:	4604      	mov	r4, r0
 8017d30:	b930      	cbnz	r0, 8017d40 <__d2b+0x24>
 8017d32:	4602      	mov	r2, r0
 8017d34:	4b23      	ldr	r3, [pc, #140]	@ (8017dc4 <__d2b+0xa8>)
 8017d36:	4824      	ldr	r0, [pc, #144]	@ (8017dc8 <__d2b+0xac>)
 8017d38:	f240 310f 	movw	r1, #783	@ 0x30f
 8017d3c:	f7ff f856 	bl	8016dec <__assert_func>
 8017d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d48:	b10d      	cbz	r5, 8017d4e <__d2b+0x32>
 8017d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017d4e:	9301      	str	r3, [sp, #4]
 8017d50:	f1b8 0300 	subs.w	r3, r8, #0
 8017d54:	d023      	beq.n	8017d9e <__d2b+0x82>
 8017d56:	4668      	mov	r0, sp
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	f7ff fd0c 	bl	8017776 <__lo0bits>
 8017d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017d62:	b1d0      	cbz	r0, 8017d9a <__d2b+0x7e>
 8017d64:	f1c0 0320 	rsb	r3, r0, #32
 8017d68:	fa02 f303 	lsl.w	r3, r2, r3
 8017d6c:	430b      	orrs	r3, r1
 8017d6e:	40c2      	lsrs	r2, r0
 8017d70:	6163      	str	r3, [r4, #20]
 8017d72:	9201      	str	r2, [sp, #4]
 8017d74:	9b01      	ldr	r3, [sp, #4]
 8017d76:	61a3      	str	r3, [r4, #24]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	bf0c      	ite	eq
 8017d7c:	2201      	moveq	r2, #1
 8017d7e:	2202      	movne	r2, #2
 8017d80:	6122      	str	r2, [r4, #16]
 8017d82:	b1a5      	cbz	r5, 8017dae <__d2b+0x92>
 8017d84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017d88:	4405      	add	r5, r0
 8017d8a:	603d      	str	r5, [r7, #0]
 8017d8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017d90:	6030      	str	r0, [r6, #0]
 8017d92:	4620      	mov	r0, r4
 8017d94:	b003      	add	sp, #12
 8017d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d9a:	6161      	str	r1, [r4, #20]
 8017d9c:	e7ea      	b.n	8017d74 <__d2b+0x58>
 8017d9e:	a801      	add	r0, sp, #4
 8017da0:	f7ff fce9 	bl	8017776 <__lo0bits>
 8017da4:	9b01      	ldr	r3, [sp, #4]
 8017da6:	6163      	str	r3, [r4, #20]
 8017da8:	3020      	adds	r0, #32
 8017daa:	2201      	movs	r2, #1
 8017dac:	e7e8      	b.n	8017d80 <__d2b+0x64>
 8017dae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017db2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017db6:	6038      	str	r0, [r7, #0]
 8017db8:	6918      	ldr	r0, [r3, #16]
 8017dba:	f7ff fcbd 	bl	8017738 <__hi0bits>
 8017dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017dc2:	e7e5      	b.n	8017d90 <__d2b+0x74>
 8017dc4:	080192b6 	.word	0x080192b6
 8017dc8:	08019327 	.word	0x08019327

08017dcc <__ratio>:
 8017dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd0:	4688      	mov	r8, r1
 8017dd2:	4669      	mov	r1, sp
 8017dd4:	4681      	mov	r9, r0
 8017dd6:	f7ff ff57 	bl	8017c88 <__b2d>
 8017dda:	a901      	add	r1, sp, #4
 8017ddc:	4640      	mov	r0, r8
 8017dde:	ec55 4b10 	vmov	r4, r5, d0
 8017de2:	f7ff ff51 	bl	8017c88 <__b2d>
 8017de6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017dea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017dee:	1ad2      	subs	r2, r2, r3
 8017df0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017df4:	1a5b      	subs	r3, r3, r1
 8017df6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017dfa:	ec57 6b10 	vmov	r6, r7, d0
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	bfd6      	itet	le
 8017e02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017e06:	462a      	movgt	r2, r5
 8017e08:	463a      	movle	r2, r7
 8017e0a:	46ab      	mov	fp, r5
 8017e0c:	46a2      	mov	sl, r4
 8017e0e:	bfce      	itee	gt
 8017e10:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017e14:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017e18:	ee00 3a90 	vmovle	s1, r3
 8017e1c:	ec4b ab17 	vmov	d7, sl, fp
 8017e20:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017e24:	b003      	add	sp, #12
 8017e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e2a <__copybits>:
 8017e2a:	3901      	subs	r1, #1
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	1149      	asrs	r1, r1, #5
 8017e30:	6914      	ldr	r4, [r2, #16]
 8017e32:	3101      	adds	r1, #1
 8017e34:	f102 0314 	add.w	r3, r2, #20
 8017e38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017e3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017e40:	1f05      	subs	r5, r0, #4
 8017e42:	42a3      	cmp	r3, r4
 8017e44:	d30c      	bcc.n	8017e60 <__copybits+0x36>
 8017e46:	1aa3      	subs	r3, r4, r2
 8017e48:	3b11      	subs	r3, #17
 8017e4a:	f023 0303 	bic.w	r3, r3, #3
 8017e4e:	3211      	adds	r2, #17
 8017e50:	42a2      	cmp	r2, r4
 8017e52:	bf88      	it	hi
 8017e54:	2300      	movhi	r3, #0
 8017e56:	4418      	add	r0, r3
 8017e58:	2300      	movs	r3, #0
 8017e5a:	4288      	cmp	r0, r1
 8017e5c:	d305      	bcc.n	8017e6a <__copybits+0x40>
 8017e5e:	bd70      	pop	{r4, r5, r6, pc}
 8017e60:	f853 6b04 	ldr.w	r6, [r3], #4
 8017e64:	f845 6f04 	str.w	r6, [r5, #4]!
 8017e68:	e7eb      	b.n	8017e42 <__copybits+0x18>
 8017e6a:	f840 3b04 	str.w	r3, [r0], #4
 8017e6e:	e7f4      	b.n	8017e5a <__copybits+0x30>

08017e70 <__any_on>:
 8017e70:	f100 0214 	add.w	r2, r0, #20
 8017e74:	6900      	ldr	r0, [r0, #16]
 8017e76:	114b      	asrs	r3, r1, #5
 8017e78:	4298      	cmp	r0, r3
 8017e7a:	b510      	push	{r4, lr}
 8017e7c:	db11      	blt.n	8017ea2 <__any_on+0x32>
 8017e7e:	dd0a      	ble.n	8017e96 <__any_on+0x26>
 8017e80:	f011 011f 	ands.w	r1, r1, #31
 8017e84:	d007      	beq.n	8017e96 <__any_on+0x26>
 8017e86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017e8a:	fa24 f001 	lsr.w	r0, r4, r1
 8017e8e:	fa00 f101 	lsl.w	r1, r0, r1
 8017e92:	428c      	cmp	r4, r1
 8017e94:	d10b      	bne.n	8017eae <__any_on+0x3e>
 8017e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e9a:	4293      	cmp	r3, r2
 8017e9c:	d803      	bhi.n	8017ea6 <__any_on+0x36>
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	bd10      	pop	{r4, pc}
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	e7f7      	b.n	8017e96 <__any_on+0x26>
 8017ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017eaa:	2900      	cmp	r1, #0
 8017eac:	d0f5      	beq.n	8017e9a <__any_on+0x2a>
 8017eae:	2001      	movs	r0, #1
 8017eb0:	e7f6      	b.n	8017ea0 <__any_on+0x30>

08017eb2 <__ascii_wctomb>:
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	4608      	mov	r0, r1
 8017eb6:	b141      	cbz	r1, 8017eca <__ascii_wctomb+0x18>
 8017eb8:	2aff      	cmp	r2, #255	@ 0xff
 8017eba:	d904      	bls.n	8017ec6 <__ascii_wctomb+0x14>
 8017ebc:	228a      	movs	r2, #138	@ 0x8a
 8017ebe:	601a      	str	r2, [r3, #0]
 8017ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec4:	4770      	bx	lr
 8017ec6:	700a      	strb	r2, [r1, #0]
 8017ec8:	2001      	movs	r0, #1
 8017eca:	4770      	bx	lr

08017ecc <__sflush_r>:
 8017ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed4:	0716      	lsls	r6, r2, #28
 8017ed6:	4605      	mov	r5, r0
 8017ed8:	460c      	mov	r4, r1
 8017eda:	d454      	bmi.n	8017f86 <__sflush_r+0xba>
 8017edc:	684b      	ldr	r3, [r1, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	dc02      	bgt.n	8017ee8 <__sflush_r+0x1c>
 8017ee2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	dd48      	ble.n	8017f7a <__sflush_r+0xae>
 8017ee8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017eea:	2e00      	cmp	r6, #0
 8017eec:	d045      	beq.n	8017f7a <__sflush_r+0xae>
 8017eee:	2300      	movs	r3, #0
 8017ef0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ef4:	682f      	ldr	r7, [r5, #0]
 8017ef6:	6a21      	ldr	r1, [r4, #32]
 8017ef8:	602b      	str	r3, [r5, #0]
 8017efa:	d030      	beq.n	8017f5e <__sflush_r+0x92>
 8017efc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017efe:	89a3      	ldrh	r3, [r4, #12]
 8017f00:	0759      	lsls	r1, r3, #29
 8017f02:	d505      	bpl.n	8017f10 <__sflush_r+0x44>
 8017f04:	6863      	ldr	r3, [r4, #4]
 8017f06:	1ad2      	subs	r2, r2, r3
 8017f08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017f0a:	b10b      	cbz	r3, 8017f10 <__sflush_r+0x44>
 8017f0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f0e:	1ad2      	subs	r2, r2, r3
 8017f10:	2300      	movs	r3, #0
 8017f12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f14:	6a21      	ldr	r1, [r4, #32]
 8017f16:	4628      	mov	r0, r5
 8017f18:	47b0      	blx	r6
 8017f1a:	1c43      	adds	r3, r0, #1
 8017f1c:	89a3      	ldrh	r3, [r4, #12]
 8017f1e:	d106      	bne.n	8017f2e <__sflush_r+0x62>
 8017f20:	6829      	ldr	r1, [r5, #0]
 8017f22:	291d      	cmp	r1, #29
 8017f24:	d82b      	bhi.n	8017f7e <__sflush_r+0xb2>
 8017f26:	4a2a      	ldr	r2, [pc, #168]	@ (8017fd0 <__sflush_r+0x104>)
 8017f28:	410a      	asrs	r2, r1
 8017f2a:	07d6      	lsls	r6, r2, #31
 8017f2c:	d427      	bmi.n	8017f7e <__sflush_r+0xb2>
 8017f2e:	2200      	movs	r2, #0
 8017f30:	6062      	str	r2, [r4, #4]
 8017f32:	04d9      	lsls	r1, r3, #19
 8017f34:	6922      	ldr	r2, [r4, #16]
 8017f36:	6022      	str	r2, [r4, #0]
 8017f38:	d504      	bpl.n	8017f44 <__sflush_r+0x78>
 8017f3a:	1c42      	adds	r2, r0, #1
 8017f3c:	d101      	bne.n	8017f42 <__sflush_r+0x76>
 8017f3e:	682b      	ldr	r3, [r5, #0]
 8017f40:	b903      	cbnz	r3, 8017f44 <__sflush_r+0x78>
 8017f42:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f46:	602f      	str	r7, [r5, #0]
 8017f48:	b1b9      	cbz	r1, 8017f7a <__sflush_r+0xae>
 8017f4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f4e:	4299      	cmp	r1, r3
 8017f50:	d002      	beq.n	8017f58 <__sflush_r+0x8c>
 8017f52:	4628      	mov	r0, r5
 8017f54:	f7fe ff68 	bl	8016e28 <_free_r>
 8017f58:	2300      	movs	r3, #0
 8017f5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f5c:	e00d      	b.n	8017f7a <__sflush_r+0xae>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	4628      	mov	r0, r5
 8017f62:	47b0      	blx	r6
 8017f64:	4602      	mov	r2, r0
 8017f66:	1c50      	adds	r0, r2, #1
 8017f68:	d1c9      	bne.n	8017efe <__sflush_r+0x32>
 8017f6a:	682b      	ldr	r3, [r5, #0]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d0c6      	beq.n	8017efe <__sflush_r+0x32>
 8017f70:	2b1d      	cmp	r3, #29
 8017f72:	d001      	beq.n	8017f78 <__sflush_r+0xac>
 8017f74:	2b16      	cmp	r3, #22
 8017f76:	d11e      	bne.n	8017fb6 <__sflush_r+0xea>
 8017f78:	602f      	str	r7, [r5, #0]
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	e022      	b.n	8017fc4 <__sflush_r+0xf8>
 8017f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f82:	b21b      	sxth	r3, r3
 8017f84:	e01b      	b.n	8017fbe <__sflush_r+0xf2>
 8017f86:	690f      	ldr	r7, [r1, #16]
 8017f88:	2f00      	cmp	r7, #0
 8017f8a:	d0f6      	beq.n	8017f7a <__sflush_r+0xae>
 8017f8c:	0793      	lsls	r3, r2, #30
 8017f8e:	680e      	ldr	r6, [r1, #0]
 8017f90:	bf08      	it	eq
 8017f92:	694b      	ldreq	r3, [r1, #20]
 8017f94:	600f      	str	r7, [r1, #0]
 8017f96:	bf18      	it	ne
 8017f98:	2300      	movne	r3, #0
 8017f9a:	eba6 0807 	sub.w	r8, r6, r7
 8017f9e:	608b      	str	r3, [r1, #8]
 8017fa0:	f1b8 0f00 	cmp.w	r8, #0
 8017fa4:	dde9      	ble.n	8017f7a <__sflush_r+0xae>
 8017fa6:	6a21      	ldr	r1, [r4, #32]
 8017fa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017faa:	4643      	mov	r3, r8
 8017fac:	463a      	mov	r2, r7
 8017fae:	4628      	mov	r0, r5
 8017fb0:	47b0      	blx	r6
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	dc08      	bgt.n	8017fc8 <__sflush_r+0xfc>
 8017fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fbe:	81a3      	strh	r3, [r4, #12]
 8017fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc8:	4407      	add	r7, r0
 8017fca:	eba8 0800 	sub.w	r8, r8, r0
 8017fce:	e7e7      	b.n	8017fa0 <__sflush_r+0xd4>
 8017fd0:	dfbffffe 	.word	0xdfbffffe

08017fd4 <_fflush_r>:
 8017fd4:	b538      	push	{r3, r4, r5, lr}
 8017fd6:	690b      	ldr	r3, [r1, #16]
 8017fd8:	4605      	mov	r5, r0
 8017fda:	460c      	mov	r4, r1
 8017fdc:	b913      	cbnz	r3, 8017fe4 <_fflush_r+0x10>
 8017fde:	2500      	movs	r5, #0
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	bd38      	pop	{r3, r4, r5, pc}
 8017fe4:	b118      	cbz	r0, 8017fee <_fflush_r+0x1a>
 8017fe6:	6a03      	ldr	r3, [r0, #32]
 8017fe8:	b90b      	cbnz	r3, 8017fee <_fflush_r+0x1a>
 8017fea:	f7fe fd4f 	bl	8016a8c <__sinit>
 8017fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d0f3      	beq.n	8017fde <_fflush_r+0xa>
 8017ff6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ff8:	07d0      	lsls	r0, r2, #31
 8017ffa:	d404      	bmi.n	8018006 <_fflush_r+0x32>
 8017ffc:	0599      	lsls	r1, r3, #22
 8017ffe:	d402      	bmi.n	8018006 <_fflush_r+0x32>
 8018000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018002:	f7fe feca 	bl	8016d9a <__retarget_lock_acquire_recursive>
 8018006:	4628      	mov	r0, r5
 8018008:	4621      	mov	r1, r4
 801800a:	f7ff ff5f 	bl	8017ecc <__sflush_r>
 801800e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018010:	07da      	lsls	r2, r3, #31
 8018012:	4605      	mov	r5, r0
 8018014:	d4e4      	bmi.n	8017fe0 <_fflush_r+0xc>
 8018016:	89a3      	ldrh	r3, [r4, #12]
 8018018:	059b      	lsls	r3, r3, #22
 801801a:	d4e1      	bmi.n	8017fe0 <_fflush_r+0xc>
 801801c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801801e:	f7fe febd 	bl	8016d9c <__retarget_lock_release_recursive>
 8018022:	e7dd      	b.n	8017fe0 <_fflush_r+0xc>

08018024 <fiprintf>:
 8018024:	b40e      	push	{r1, r2, r3}
 8018026:	b503      	push	{r0, r1, lr}
 8018028:	4601      	mov	r1, r0
 801802a:	ab03      	add	r3, sp, #12
 801802c:	4805      	ldr	r0, [pc, #20]	@ (8018044 <fiprintf+0x20>)
 801802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018032:	6800      	ldr	r0, [r0, #0]
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	f000 f84b 	bl	80180d0 <_vfiprintf_r>
 801803a:	b002      	add	sp, #8
 801803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018040:	b003      	add	sp, #12
 8018042:	4770      	bx	lr
 8018044:	24000260 	.word	0x24000260

08018048 <abort>:
 8018048:	b508      	push	{r3, lr}
 801804a:	2006      	movs	r0, #6
 801804c:	f000 fba2 	bl	8018794 <raise>
 8018050:	2001      	movs	r0, #1
 8018052:	f7ec fc5b 	bl	800490c <_exit>

08018056 <_calloc_r>:
 8018056:	b570      	push	{r4, r5, r6, lr}
 8018058:	fba1 5402 	umull	r5, r4, r1, r2
 801805c:	b93c      	cbnz	r4, 801806e <_calloc_r+0x18>
 801805e:	4629      	mov	r1, r5
 8018060:	f7fd fd78 	bl	8015b54 <_malloc_r>
 8018064:	4606      	mov	r6, r0
 8018066:	b928      	cbnz	r0, 8018074 <_calloc_r+0x1e>
 8018068:	2600      	movs	r6, #0
 801806a:	4630      	mov	r0, r6
 801806c:	bd70      	pop	{r4, r5, r6, pc}
 801806e:	220c      	movs	r2, #12
 8018070:	6002      	str	r2, [r0, #0]
 8018072:	e7f9      	b.n	8018068 <_calloc_r+0x12>
 8018074:	462a      	mov	r2, r5
 8018076:	4621      	mov	r1, r4
 8018078:	f7fe fd81 	bl	8016b7e <memset>
 801807c:	e7f5      	b.n	801806a <_calloc_r+0x14>

0801807e <__sfputc_r>:
 801807e:	6893      	ldr	r3, [r2, #8]
 8018080:	3b01      	subs	r3, #1
 8018082:	2b00      	cmp	r3, #0
 8018084:	b410      	push	{r4}
 8018086:	6093      	str	r3, [r2, #8]
 8018088:	da08      	bge.n	801809c <__sfputc_r+0x1e>
 801808a:	6994      	ldr	r4, [r2, #24]
 801808c:	42a3      	cmp	r3, r4
 801808e:	db01      	blt.n	8018094 <__sfputc_r+0x16>
 8018090:	290a      	cmp	r1, #10
 8018092:	d103      	bne.n	801809c <__sfputc_r+0x1e>
 8018094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018098:	f000 bac0 	b.w	801861c <__swbuf_r>
 801809c:	6813      	ldr	r3, [r2, #0]
 801809e:	1c58      	adds	r0, r3, #1
 80180a0:	6010      	str	r0, [r2, #0]
 80180a2:	7019      	strb	r1, [r3, #0]
 80180a4:	4608      	mov	r0, r1
 80180a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <__sfputs_r>:
 80180ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ae:	4606      	mov	r6, r0
 80180b0:	460f      	mov	r7, r1
 80180b2:	4614      	mov	r4, r2
 80180b4:	18d5      	adds	r5, r2, r3
 80180b6:	42ac      	cmp	r4, r5
 80180b8:	d101      	bne.n	80180be <__sfputs_r+0x12>
 80180ba:	2000      	movs	r0, #0
 80180bc:	e007      	b.n	80180ce <__sfputs_r+0x22>
 80180be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180c2:	463a      	mov	r2, r7
 80180c4:	4630      	mov	r0, r6
 80180c6:	f7ff ffda 	bl	801807e <__sfputc_r>
 80180ca:	1c43      	adds	r3, r0, #1
 80180cc:	d1f3      	bne.n	80180b6 <__sfputs_r+0xa>
 80180ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080180d0 <_vfiprintf_r>:
 80180d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d4:	460d      	mov	r5, r1
 80180d6:	b09d      	sub	sp, #116	@ 0x74
 80180d8:	4614      	mov	r4, r2
 80180da:	4698      	mov	r8, r3
 80180dc:	4606      	mov	r6, r0
 80180de:	b118      	cbz	r0, 80180e8 <_vfiprintf_r+0x18>
 80180e0:	6a03      	ldr	r3, [r0, #32]
 80180e2:	b90b      	cbnz	r3, 80180e8 <_vfiprintf_r+0x18>
 80180e4:	f7fe fcd2 	bl	8016a8c <__sinit>
 80180e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80180ea:	07d9      	lsls	r1, r3, #31
 80180ec:	d405      	bmi.n	80180fa <_vfiprintf_r+0x2a>
 80180ee:	89ab      	ldrh	r3, [r5, #12]
 80180f0:	059a      	lsls	r2, r3, #22
 80180f2:	d402      	bmi.n	80180fa <_vfiprintf_r+0x2a>
 80180f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180f6:	f7fe fe50 	bl	8016d9a <__retarget_lock_acquire_recursive>
 80180fa:	89ab      	ldrh	r3, [r5, #12]
 80180fc:	071b      	lsls	r3, r3, #28
 80180fe:	d501      	bpl.n	8018104 <_vfiprintf_r+0x34>
 8018100:	692b      	ldr	r3, [r5, #16]
 8018102:	b99b      	cbnz	r3, 801812c <_vfiprintf_r+0x5c>
 8018104:	4629      	mov	r1, r5
 8018106:	4630      	mov	r0, r6
 8018108:	f000 fac6 	bl	8018698 <__swsetup_r>
 801810c:	b170      	cbz	r0, 801812c <_vfiprintf_r+0x5c>
 801810e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018110:	07dc      	lsls	r4, r3, #31
 8018112:	d504      	bpl.n	801811e <_vfiprintf_r+0x4e>
 8018114:	f04f 30ff 	mov.w	r0, #4294967295
 8018118:	b01d      	add	sp, #116	@ 0x74
 801811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801811e:	89ab      	ldrh	r3, [r5, #12]
 8018120:	0598      	lsls	r0, r3, #22
 8018122:	d4f7      	bmi.n	8018114 <_vfiprintf_r+0x44>
 8018124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018126:	f7fe fe39 	bl	8016d9c <__retarget_lock_release_recursive>
 801812a:	e7f3      	b.n	8018114 <_vfiprintf_r+0x44>
 801812c:	2300      	movs	r3, #0
 801812e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018130:	2320      	movs	r3, #32
 8018132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018136:	f8cd 800c 	str.w	r8, [sp, #12]
 801813a:	2330      	movs	r3, #48	@ 0x30
 801813c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80182ec <_vfiprintf_r+0x21c>
 8018140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018144:	f04f 0901 	mov.w	r9, #1
 8018148:	4623      	mov	r3, r4
 801814a:	469a      	mov	sl, r3
 801814c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018150:	b10a      	cbz	r2, 8018156 <_vfiprintf_r+0x86>
 8018152:	2a25      	cmp	r2, #37	@ 0x25
 8018154:	d1f9      	bne.n	801814a <_vfiprintf_r+0x7a>
 8018156:	ebba 0b04 	subs.w	fp, sl, r4
 801815a:	d00b      	beq.n	8018174 <_vfiprintf_r+0xa4>
 801815c:	465b      	mov	r3, fp
 801815e:	4622      	mov	r2, r4
 8018160:	4629      	mov	r1, r5
 8018162:	4630      	mov	r0, r6
 8018164:	f7ff ffa2 	bl	80180ac <__sfputs_r>
 8018168:	3001      	adds	r0, #1
 801816a:	f000 80a7 	beq.w	80182bc <_vfiprintf_r+0x1ec>
 801816e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018170:	445a      	add	r2, fp
 8018172:	9209      	str	r2, [sp, #36]	@ 0x24
 8018174:	f89a 3000 	ldrb.w	r3, [sl]
 8018178:	2b00      	cmp	r3, #0
 801817a:	f000 809f 	beq.w	80182bc <_vfiprintf_r+0x1ec>
 801817e:	2300      	movs	r3, #0
 8018180:	f04f 32ff 	mov.w	r2, #4294967295
 8018184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018188:	f10a 0a01 	add.w	sl, sl, #1
 801818c:	9304      	str	r3, [sp, #16]
 801818e:	9307      	str	r3, [sp, #28]
 8018190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018194:	931a      	str	r3, [sp, #104]	@ 0x68
 8018196:	4654      	mov	r4, sl
 8018198:	2205      	movs	r2, #5
 801819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801819e:	4853      	ldr	r0, [pc, #332]	@ (80182ec <_vfiprintf_r+0x21c>)
 80181a0:	f7e8 f8ae 	bl	8000300 <memchr>
 80181a4:	9a04      	ldr	r2, [sp, #16]
 80181a6:	b9d8      	cbnz	r0, 80181e0 <_vfiprintf_r+0x110>
 80181a8:	06d1      	lsls	r1, r2, #27
 80181aa:	bf44      	itt	mi
 80181ac:	2320      	movmi	r3, #32
 80181ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181b2:	0713      	lsls	r3, r2, #28
 80181b4:	bf44      	itt	mi
 80181b6:	232b      	movmi	r3, #43	@ 0x2b
 80181b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181bc:	f89a 3000 	ldrb.w	r3, [sl]
 80181c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80181c2:	d015      	beq.n	80181f0 <_vfiprintf_r+0x120>
 80181c4:	9a07      	ldr	r2, [sp, #28]
 80181c6:	4654      	mov	r4, sl
 80181c8:	2000      	movs	r0, #0
 80181ca:	f04f 0c0a 	mov.w	ip, #10
 80181ce:	4621      	mov	r1, r4
 80181d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181d4:	3b30      	subs	r3, #48	@ 0x30
 80181d6:	2b09      	cmp	r3, #9
 80181d8:	d94b      	bls.n	8018272 <_vfiprintf_r+0x1a2>
 80181da:	b1b0      	cbz	r0, 801820a <_vfiprintf_r+0x13a>
 80181dc:	9207      	str	r2, [sp, #28]
 80181de:	e014      	b.n	801820a <_vfiprintf_r+0x13a>
 80181e0:	eba0 0308 	sub.w	r3, r0, r8
 80181e4:	fa09 f303 	lsl.w	r3, r9, r3
 80181e8:	4313      	orrs	r3, r2
 80181ea:	9304      	str	r3, [sp, #16]
 80181ec:	46a2      	mov	sl, r4
 80181ee:	e7d2      	b.n	8018196 <_vfiprintf_r+0xc6>
 80181f0:	9b03      	ldr	r3, [sp, #12]
 80181f2:	1d19      	adds	r1, r3, #4
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	9103      	str	r1, [sp, #12]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	bfbb      	ittet	lt
 80181fc:	425b      	neglt	r3, r3
 80181fe:	f042 0202 	orrlt.w	r2, r2, #2
 8018202:	9307      	strge	r3, [sp, #28]
 8018204:	9307      	strlt	r3, [sp, #28]
 8018206:	bfb8      	it	lt
 8018208:	9204      	strlt	r2, [sp, #16]
 801820a:	7823      	ldrb	r3, [r4, #0]
 801820c:	2b2e      	cmp	r3, #46	@ 0x2e
 801820e:	d10a      	bne.n	8018226 <_vfiprintf_r+0x156>
 8018210:	7863      	ldrb	r3, [r4, #1]
 8018212:	2b2a      	cmp	r3, #42	@ 0x2a
 8018214:	d132      	bne.n	801827c <_vfiprintf_r+0x1ac>
 8018216:	9b03      	ldr	r3, [sp, #12]
 8018218:	1d1a      	adds	r2, r3, #4
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	9203      	str	r2, [sp, #12]
 801821e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018222:	3402      	adds	r4, #2
 8018224:	9305      	str	r3, [sp, #20]
 8018226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80182fc <_vfiprintf_r+0x22c>
 801822a:	7821      	ldrb	r1, [r4, #0]
 801822c:	2203      	movs	r2, #3
 801822e:	4650      	mov	r0, sl
 8018230:	f7e8 f866 	bl	8000300 <memchr>
 8018234:	b138      	cbz	r0, 8018246 <_vfiprintf_r+0x176>
 8018236:	9b04      	ldr	r3, [sp, #16]
 8018238:	eba0 000a 	sub.w	r0, r0, sl
 801823c:	2240      	movs	r2, #64	@ 0x40
 801823e:	4082      	lsls	r2, r0
 8018240:	4313      	orrs	r3, r2
 8018242:	3401      	adds	r4, #1
 8018244:	9304      	str	r3, [sp, #16]
 8018246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801824a:	4829      	ldr	r0, [pc, #164]	@ (80182f0 <_vfiprintf_r+0x220>)
 801824c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018250:	2206      	movs	r2, #6
 8018252:	f7e8 f855 	bl	8000300 <memchr>
 8018256:	2800      	cmp	r0, #0
 8018258:	d03f      	beq.n	80182da <_vfiprintf_r+0x20a>
 801825a:	4b26      	ldr	r3, [pc, #152]	@ (80182f4 <_vfiprintf_r+0x224>)
 801825c:	bb1b      	cbnz	r3, 80182a6 <_vfiprintf_r+0x1d6>
 801825e:	9b03      	ldr	r3, [sp, #12]
 8018260:	3307      	adds	r3, #7
 8018262:	f023 0307 	bic.w	r3, r3, #7
 8018266:	3308      	adds	r3, #8
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801826c:	443b      	add	r3, r7
 801826e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018270:	e76a      	b.n	8018148 <_vfiprintf_r+0x78>
 8018272:	fb0c 3202 	mla	r2, ip, r2, r3
 8018276:	460c      	mov	r4, r1
 8018278:	2001      	movs	r0, #1
 801827a:	e7a8      	b.n	80181ce <_vfiprintf_r+0xfe>
 801827c:	2300      	movs	r3, #0
 801827e:	3401      	adds	r4, #1
 8018280:	9305      	str	r3, [sp, #20]
 8018282:	4619      	mov	r1, r3
 8018284:	f04f 0c0a 	mov.w	ip, #10
 8018288:	4620      	mov	r0, r4
 801828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801828e:	3a30      	subs	r2, #48	@ 0x30
 8018290:	2a09      	cmp	r2, #9
 8018292:	d903      	bls.n	801829c <_vfiprintf_r+0x1cc>
 8018294:	2b00      	cmp	r3, #0
 8018296:	d0c6      	beq.n	8018226 <_vfiprintf_r+0x156>
 8018298:	9105      	str	r1, [sp, #20]
 801829a:	e7c4      	b.n	8018226 <_vfiprintf_r+0x156>
 801829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80182a0:	4604      	mov	r4, r0
 80182a2:	2301      	movs	r3, #1
 80182a4:	e7f0      	b.n	8018288 <_vfiprintf_r+0x1b8>
 80182a6:	ab03      	add	r3, sp, #12
 80182a8:	9300      	str	r3, [sp, #0]
 80182aa:	462a      	mov	r2, r5
 80182ac:	4b12      	ldr	r3, [pc, #72]	@ (80182f8 <_vfiprintf_r+0x228>)
 80182ae:	a904      	add	r1, sp, #16
 80182b0:	4630      	mov	r0, r6
 80182b2:	f3af 8000 	nop.w
 80182b6:	4607      	mov	r7, r0
 80182b8:	1c78      	adds	r0, r7, #1
 80182ba:	d1d6      	bne.n	801826a <_vfiprintf_r+0x19a>
 80182bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182be:	07d9      	lsls	r1, r3, #31
 80182c0:	d405      	bmi.n	80182ce <_vfiprintf_r+0x1fe>
 80182c2:	89ab      	ldrh	r3, [r5, #12]
 80182c4:	059a      	lsls	r2, r3, #22
 80182c6:	d402      	bmi.n	80182ce <_vfiprintf_r+0x1fe>
 80182c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182ca:	f7fe fd67 	bl	8016d9c <__retarget_lock_release_recursive>
 80182ce:	89ab      	ldrh	r3, [r5, #12]
 80182d0:	065b      	lsls	r3, r3, #25
 80182d2:	f53f af1f 	bmi.w	8018114 <_vfiprintf_r+0x44>
 80182d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80182d8:	e71e      	b.n	8018118 <_vfiprintf_r+0x48>
 80182da:	ab03      	add	r3, sp, #12
 80182dc:	9300      	str	r3, [sp, #0]
 80182de:	462a      	mov	r2, r5
 80182e0:	4b05      	ldr	r3, [pc, #20]	@ (80182f8 <_vfiprintf_r+0x228>)
 80182e2:	a904      	add	r1, sp, #16
 80182e4:	4630      	mov	r0, r6
 80182e6:	f000 f879 	bl	80183dc <_printf_i>
 80182ea:	e7e4      	b.n	80182b6 <_vfiprintf_r+0x1e6>
 80182ec:	08019480 	.word	0x08019480
 80182f0:	0801948a 	.word	0x0801948a
 80182f4:	00000000 	.word	0x00000000
 80182f8:	080180ad 	.word	0x080180ad
 80182fc:	08019486 	.word	0x08019486

08018300 <_printf_common>:
 8018300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018304:	4616      	mov	r6, r2
 8018306:	4698      	mov	r8, r3
 8018308:	688a      	ldr	r2, [r1, #8]
 801830a:	690b      	ldr	r3, [r1, #16]
 801830c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018310:	4293      	cmp	r3, r2
 8018312:	bfb8      	it	lt
 8018314:	4613      	movlt	r3, r2
 8018316:	6033      	str	r3, [r6, #0]
 8018318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801831c:	4607      	mov	r7, r0
 801831e:	460c      	mov	r4, r1
 8018320:	b10a      	cbz	r2, 8018326 <_printf_common+0x26>
 8018322:	3301      	adds	r3, #1
 8018324:	6033      	str	r3, [r6, #0]
 8018326:	6823      	ldr	r3, [r4, #0]
 8018328:	0699      	lsls	r1, r3, #26
 801832a:	bf42      	ittt	mi
 801832c:	6833      	ldrmi	r3, [r6, #0]
 801832e:	3302      	addmi	r3, #2
 8018330:	6033      	strmi	r3, [r6, #0]
 8018332:	6825      	ldr	r5, [r4, #0]
 8018334:	f015 0506 	ands.w	r5, r5, #6
 8018338:	d106      	bne.n	8018348 <_printf_common+0x48>
 801833a:	f104 0a19 	add.w	sl, r4, #25
 801833e:	68e3      	ldr	r3, [r4, #12]
 8018340:	6832      	ldr	r2, [r6, #0]
 8018342:	1a9b      	subs	r3, r3, r2
 8018344:	42ab      	cmp	r3, r5
 8018346:	dc26      	bgt.n	8018396 <_printf_common+0x96>
 8018348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801834c:	6822      	ldr	r2, [r4, #0]
 801834e:	3b00      	subs	r3, #0
 8018350:	bf18      	it	ne
 8018352:	2301      	movne	r3, #1
 8018354:	0692      	lsls	r2, r2, #26
 8018356:	d42b      	bmi.n	80183b0 <_printf_common+0xb0>
 8018358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801835c:	4641      	mov	r1, r8
 801835e:	4638      	mov	r0, r7
 8018360:	47c8      	blx	r9
 8018362:	3001      	adds	r0, #1
 8018364:	d01e      	beq.n	80183a4 <_printf_common+0xa4>
 8018366:	6823      	ldr	r3, [r4, #0]
 8018368:	6922      	ldr	r2, [r4, #16]
 801836a:	f003 0306 	and.w	r3, r3, #6
 801836e:	2b04      	cmp	r3, #4
 8018370:	bf02      	ittt	eq
 8018372:	68e5      	ldreq	r5, [r4, #12]
 8018374:	6833      	ldreq	r3, [r6, #0]
 8018376:	1aed      	subeq	r5, r5, r3
 8018378:	68a3      	ldr	r3, [r4, #8]
 801837a:	bf0c      	ite	eq
 801837c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018380:	2500      	movne	r5, #0
 8018382:	4293      	cmp	r3, r2
 8018384:	bfc4      	itt	gt
 8018386:	1a9b      	subgt	r3, r3, r2
 8018388:	18ed      	addgt	r5, r5, r3
 801838a:	2600      	movs	r6, #0
 801838c:	341a      	adds	r4, #26
 801838e:	42b5      	cmp	r5, r6
 8018390:	d11a      	bne.n	80183c8 <_printf_common+0xc8>
 8018392:	2000      	movs	r0, #0
 8018394:	e008      	b.n	80183a8 <_printf_common+0xa8>
 8018396:	2301      	movs	r3, #1
 8018398:	4652      	mov	r2, sl
 801839a:	4641      	mov	r1, r8
 801839c:	4638      	mov	r0, r7
 801839e:	47c8      	blx	r9
 80183a0:	3001      	adds	r0, #1
 80183a2:	d103      	bne.n	80183ac <_printf_common+0xac>
 80183a4:	f04f 30ff 	mov.w	r0, #4294967295
 80183a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183ac:	3501      	adds	r5, #1
 80183ae:	e7c6      	b.n	801833e <_printf_common+0x3e>
 80183b0:	18e1      	adds	r1, r4, r3
 80183b2:	1c5a      	adds	r2, r3, #1
 80183b4:	2030      	movs	r0, #48	@ 0x30
 80183b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80183ba:	4422      	add	r2, r4
 80183bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80183c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80183c4:	3302      	adds	r3, #2
 80183c6:	e7c7      	b.n	8018358 <_printf_common+0x58>
 80183c8:	2301      	movs	r3, #1
 80183ca:	4622      	mov	r2, r4
 80183cc:	4641      	mov	r1, r8
 80183ce:	4638      	mov	r0, r7
 80183d0:	47c8      	blx	r9
 80183d2:	3001      	adds	r0, #1
 80183d4:	d0e6      	beq.n	80183a4 <_printf_common+0xa4>
 80183d6:	3601      	adds	r6, #1
 80183d8:	e7d9      	b.n	801838e <_printf_common+0x8e>
	...

080183dc <_printf_i>:
 80183dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80183e0:	7e0f      	ldrb	r7, [r1, #24]
 80183e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80183e4:	2f78      	cmp	r7, #120	@ 0x78
 80183e6:	4691      	mov	r9, r2
 80183e8:	4680      	mov	r8, r0
 80183ea:	460c      	mov	r4, r1
 80183ec:	469a      	mov	sl, r3
 80183ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80183f2:	d807      	bhi.n	8018404 <_printf_i+0x28>
 80183f4:	2f62      	cmp	r7, #98	@ 0x62
 80183f6:	d80a      	bhi.n	801840e <_printf_i+0x32>
 80183f8:	2f00      	cmp	r7, #0
 80183fa:	f000 80d2 	beq.w	80185a2 <_printf_i+0x1c6>
 80183fe:	2f58      	cmp	r7, #88	@ 0x58
 8018400:	f000 80b9 	beq.w	8018576 <_printf_i+0x19a>
 8018404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801840c:	e03a      	b.n	8018484 <_printf_i+0xa8>
 801840e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018412:	2b15      	cmp	r3, #21
 8018414:	d8f6      	bhi.n	8018404 <_printf_i+0x28>
 8018416:	a101      	add	r1, pc, #4	@ (adr r1, 801841c <_printf_i+0x40>)
 8018418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801841c:	08018475 	.word	0x08018475
 8018420:	08018489 	.word	0x08018489
 8018424:	08018405 	.word	0x08018405
 8018428:	08018405 	.word	0x08018405
 801842c:	08018405 	.word	0x08018405
 8018430:	08018405 	.word	0x08018405
 8018434:	08018489 	.word	0x08018489
 8018438:	08018405 	.word	0x08018405
 801843c:	08018405 	.word	0x08018405
 8018440:	08018405 	.word	0x08018405
 8018444:	08018405 	.word	0x08018405
 8018448:	08018589 	.word	0x08018589
 801844c:	080184b3 	.word	0x080184b3
 8018450:	08018543 	.word	0x08018543
 8018454:	08018405 	.word	0x08018405
 8018458:	08018405 	.word	0x08018405
 801845c:	080185ab 	.word	0x080185ab
 8018460:	08018405 	.word	0x08018405
 8018464:	080184b3 	.word	0x080184b3
 8018468:	08018405 	.word	0x08018405
 801846c:	08018405 	.word	0x08018405
 8018470:	0801854b 	.word	0x0801854b
 8018474:	6833      	ldr	r3, [r6, #0]
 8018476:	1d1a      	adds	r2, r3, #4
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	6032      	str	r2, [r6, #0]
 801847c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018484:	2301      	movs	r3, #1
 8018486:	e09d      	b.n	80185c4 <_printf_i+0x1e8>
 8018488:	6833      	ldr	r3, [r6, #0]
 801848a:	6820      	ldr	r0, [r4, #0]
 801848c:	1d19      	adds	r1, r3, #4
 801848e:	6031      	str	r1, [r6, #0]
 8018490:	0606      	lsls	r6, r0, #24
 8018492:	d501      	bpl.n	8018498 <_printf_i+0xbc>
 8018494:	681d      	ldr	r5, [r3, #0]
 8018496:	e003      	b.n	80184a0 <_printf_i+0xc4>
 8018498:	0645      	lsls	r5, r0, #25
 801849a:	d5fb      	bpl.n	8018494 <_printf_i+0xb8>
 801849c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80184a0:	2d00      	cmp	r5, #0
 80184a2:	da03      	bge.n	80184ac <_printf_i+0xd0>
 80184a4:	232d      	movs	r3, #45	@ 0x2d
 80184a6:	426d      	negs	r5, r5
 80184a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80184ac:	4859      	ldr	r0, [pc, #356]	@ (8018614 <_printf_i+0x238>)
 80184ae:	230a      	movs	r3, #10
 80184b0:	e011      	b.n	80184d6 <_printf_i+0xfa>
 80184b2:	6821      	ldr	r1, [r4, #0]
 80184b4:	6833      	ldr	r3, [r6, #0]
 80184b6:	0608      	lsls	r0, r1, #24
 80184b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80184bc:	d402      	bmi.n	80184c4 <_printf_i+0xe8>
 80184be:	0649      	lsls	r1, r1, #25
 80184c0:	bf48      	it	mi
 80184c2:	b2ad      	uxthmi	r5, r5
 80184c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80184c6:	4853      	ldr	r0, [pc, #332]	@ (8018614 <_printf_i+0x238>)
 80184c8:	6033      	str	r3, [r6, #0]
 80184ca:	bf14      	ite	ne
 80184cc:	230a      	movne	r3, #10
 80184ce:	2308      	moveq	r3, #8
 80184d0:	2100      	movs	r1, #0
 80184d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80184d6:	6866      	ldr	r6, [r4, #4]
 80184d8:	60a6      	str	r6, [r4, #8]
 80184da:	2e00      	cmp	r6, #0
 80184dc:	bfa2      	ittt	ge
 80184de:	6821      	ldrge	r1, [r4, #0]
 80184e0:	f021 0104 	bicge.w	r1, r1, #4
 80184e4:	6021      	strge	r1, [r4, #0]
 80184e6:	b90d      	cbnz	r5, 80184ec <_printf_i+0x110>
 80184e8:	2e00      	cmp	r6, #0
 80184ea:	d04b      	beq.n	8018584 <_printf_i+0x1a8>
 80184ec:	4616      	mov	r6, r2
 80184ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80184f2:	fb03 5711 	mls	r7, r3, r1, r5
 80184f6:	5dc7      	ldrb	r7, [r0, r7]
 80184f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80184fc:	462f      	mov	r7, r5
 80184fe:	42bb      	cmp	r3, r7
 8018500:	460d      	mov	r5, r1
 8018502:	d9f4      	bls.n	80184ee <_printf_i+0x112>
 8018504:	2b08      	cmp	r3, #8
 8018506:	d10b      	bne.n	8018520 <_printf_i+0x144>
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	07df      	lsls	r7, r3, #31
 801850c:	d508      	bpl.n	8018520 <_printf_i+0x144>
 801850e:	6923      	ldr	r3, [r4, #16]
 8018510:	6861      	ldr	r1, [r4, #4]
 8018512:	4299      	cmp	r1, r3
 8018514:	bfde      	ittt	le
 8018516:	2330      	movle	r3, #48	@ 0x30
 8018518:	f806 3c01 	strble.w	r3, [r6, #-1]
 801851c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018520:	1b92      	subs	r2, r2, r6
 8018522:	6122      	str	r2, [r4, #16]
 8018524:	f8cd a000 	str.w	sl, [sp]
 8018528:	464b      	mov	r3, r9
 801852a:	aa03      	add	r2, sp, #12
 801852c:	4621      	mov	r1, r4
 801852e:	4640      	mov	r0, r8
 8018530:	f7ff fee6 	bl	8018300 <_printf_common>
 8018534:	3001      	adds	r0, #1
 8018536:	d14a      	bne.n	80185ce <_printf_i+0x1f2>
 8018538:	f04f 30ff 	mov.w	r0, #4294967295
 801853c:	b004      	add	sp, #16
 801853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018542:	6823      	ldr	r3, [r4, #0]
 8018544:	f043 0320 	orr.w	r3, r3, #32
 8018548:	6023      	str	r3, [r4, #0]
 801854a:	4833      	ldr	r0, [pc, #204]	@ (8018618 <_printf_i+0x23c>)
 801854c:	2778      	movs	r7, #120	@ 0x78
 801854e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018552:	6823      	ldr	r3, [r4, #0]
 8018554:	6831      	ldr	r1, [r6, #0]
 8018556:	061f      	lsls	r7, r3, #24
 8018558:	f851 5b04 	ldr.w	r5, [r1], #4
 801855c:	d402      	bmi.n	8018564 <_printf_i+0x188>
 801855e:	065f      	lsls	r7, r3, #25
 8018560:	bf48      	it	mi
 8018562:	b2ad      	uxthmi	r5, r5
 8018564:	6031      	str	r1, [r6, #0]
 8018566:	07d9      	lsls	r1, r3, #31
 8018568:	bf44      	itt	mi
 801856a:	f043 0320 	orrmi.w	r3, r3, #32
 801856e:	6023      	strmi	r3, [r4, #0]
 8018570:	b11d      	cbz	r5, 801857a <_printf_i+0x19e>
 8018572:	2310      	movs	r3, #16
 8018574:	e7ac      	b.n	80184d0 <_printf_i+0xf4>
 8018576:	4827      	ldr	r0, [pc, #156]	@ (8018614 <_printf_i+0x238>)
 8018578:	e7e9      	b.n	801854e <_printf_i+0x172>
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	f023 0320 	bic.w	r3, r3, #32
 8018580:	6023      	str	r3, [r4, #0]
 8018582:	e7f6      	b.n	8018572 <_printf_i+0x196>
 8018584:	4616      	mov	r6, r2
 8018586:	e7bd      	b.n	8018504 <_printf_i+0x128>
 8018588:	6833      	ldr	r3, [r6, #0]
 801858a:	6825      	ldr	r5, [r4, #0]
 801858c:	6961      	ldr	r1, [r4, #20]
 801858e:	1d18      	adds	r0, r3, #4
 8018590:	6030      	str	r0, [r6, #0]
 8018592:	062e      	lsls	r6, r5, #24
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	d501      	bpl.n	801859c <_printf_i+0x1c0>
 8018598:	6019      	str	r1, [r3, #0]
 801859a:	e002      	b.n	80185a2 <_printf_i+0x1c6>
 801859c:	0668      	lsls	r0, r5, #25
 801859e:	d5fb      	bpl.n	8018598 <_printf_i+0x1bc>
 80185a0:	8019      	strh	r1, [r3, #0]
 80185a2:	2300      	movs	r3, #0
 80185a4:	6123      	str	r3, [r4, #16]
 80185a6:	4616      	mov	r6, r2
 80185a8:	e7bc      	b.n	8018524 <_printf_i+0x148>
 80185aa:	6833      	ldr	r3, [r6, #0]
 80185ac:	1d1a      	adds	r2, r3, #4
 80185ae:	6032      	str	r2, [r6, #0]
 80185b0:	681e      	ldr	r6, [r3, #0]
 80185b2:	6862      	ldr	r2, [r4, #4]
 80185b4:	2100      	movs	r1, #0
 80185b6:	4630      	mov	r0, r6
 80185b8:	f7e7 fea2 	bl	8000300 <memchr>
 80185bc:	b108      	cbz	r0, 80185c2 <_printf_i+0x1e6>
 80185be:	1b80      	subs	r0, r0, r6
 80185c0:	6060      	str	r0, [r4, #4]
 80185c2:	6863      	ldr	r3, [r4, #4]
 80185c4:	6123      	str	r3, [r4, #16]
 80185c6:	2300      	movs	r3, #0
 80185c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80185cc:	e7aa      	b.n	8018524 <_printf_i+0x148>
 80185ce:	6923      	ldr	r3, [r4, #16]
 80185d0:	4632      	mov	r2, r6
 80185d2:	4649      	mov	r1, r9
 80185d4:	4640      	mov	r0, r8
 80185d6:	47d0      	blx	sl
 80185d8:	3001      	adds	r0, #1
 80185da:	d0ad      	beq.n	8018538 <_printf_i+0x15c>
 80185dc:	6823      	ldr	r3, [r4, #0]
 80185de:	079b      	lsls	r3, r3, #30
 80185e0:	d413      	bmi.n	801860a <_printf_i+0x22e>
 80185e2:	68e0      	ldr	r0, [r4, #12]
 80185e4:	9b03      	ldr	r3, [sp, #12]
 80185e6:	4298      	cmp	r0, r3
 80185e8:	bfb8      	it	lt
 80185ea:	4618      	movlt	r0, r3
 80185ec:	e7a6      	b.n	801853c <_printf_i+0x160>
 80185ee:	2301      	movs	r3, #1
 80185f0:	4632      	mov	r2, r6
 80185f2:	4649      	mov	r1, r9
 80185f4:	4640      	mov	r0, r8
 80185f6:	47d0      	blx	sl
 80185f8:	3001      	adds	r0, #1
 80185fa:	d09d      	beq.n	8018538 <_printf_i+0x15c>
 80185fc:	3501      	adds	r5, #1
 80185fe:	68e3      	ldr	r3, [r4, #12]
 8018600:	9903      	ldr	r1, [sp, #12]
 8018602:	1a5b      	subs	r3, r3, r1
 8018604:	42ab      	cmp	r3, r5
 8018606:	dcf2      	bgt.n	80185ee <_printf_i+0x212>
 8018608:	e7eb      	b.n	80185e2 <_printf_i+0x206>
 801860a:	2500      	movs	r5, #0
 801860c:	f104 0619 	add.w	r6, r4, #25
 8018610:	e7f5      	b.n	80185fe <_printf_i+0x222>
 8018612:	bf00      	nop
 8018614:	08019491 	.word	0x08019491
 8018618:	080194a2 	.word	0x080194a2

0801861c <__swbuf_r>:
 801861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801861e:	460e      	mov	r6, r1
 8018620:	4614      	mov	r4, r2
 8018622:	4605      	mov	r5, r0
 8018624:	b118      	cbz	r0, 801862e <__swbuf_r+0x12>
 8018626:	6a03      	ldr	r3, [r0, #32]
 8018628:	b90b      	cbnz	r3, 801862e <__swbuf_r+0x12>
 801862a:	f7fe fa2f 	bl	8016a8c <__sinit>
 801862e:	69a3      	ldr	r3, [r4, #24]
 8018630:	60a3      	str	r3, [r4, #8]
 8018632:	89a3      	ldrh	r3, [r4, #12]
 8018634:	071a      	lsls	r2, r3, #28
 8018636:	d501      	bpl.n	801863c <__swbuf_r+0x20>
 8018638:	6923      	ldr	r3, [r4, #16]
 801863a:	b943      	cbnz	r3, 801864e <__swbuf_r+0x32>
 801863c:	4621      	mov	r1, r4
 801863e:	4628      	mov	r0, r5
 8018640:	f000 f82a 	bl	8018698 <__swsetup_r>
 8018644:	b118      	cbz	r0, 801864e <__swbuf_r+0x32>
 8018646:	f04f 37ff 	mov.w	r7, #4294967295
 801864a:	4638      	mov	r0, r7
 801864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801864e:	6823      	ldr	r3, [r4, #0]
 8018650:	6922      	ldr	r2, [r4, #16]
 8018652:	1a98      	subs	r0, r3, r2
 8018654:	6963      	ldr	r3, [r4, #20]
 8018656:	b2f6      	uxtb	r6, r6
 8018658:	4283      	cmp	r3, r0
 801865a:	4637      	mov	r7, r6
 801865c:	dc05      	bgt.n	801866a <__swbuf_r+0x4e>
 801865e:	4621      	mov	r1, r4
 8018660:	4628      	mov	r0, r5
 8018662:	f7ff fcb7 	bl	8017fd4 <_fflush_r>
 8018666:	2800      	cmp	r0, #0
 8018668:	d1ed      	bne.n	8018646 <__swbuf_r+0x2a>
 801866a:	68a3      	ldr	r3, [r4, #8]
 801866c:	3b01      	subs	r3, #1
 801866e:	60a3      	str	r3, [r4, #8]
 8018670:	6823      	ldr	r3, [r4, #0]
 8018672:	1c5a      	adds	r2, r3, #1
 8018674:	6022      	str	r2, [r4, #0]
 8018676:	701e      	strb	r6, [r3, #0]
 8018678:	6962      	ldr	r2, [r4, #20]
 801867a:	1c43      	adds	r3, r0, #1
 801867c:	429a      	cmp	r2, r3
 801867e:	d004      	beq.n	801868a <__swbuf_r+0x6e>
 8018680:	89a3      	ldrh	r3, [r4, #12]
 8018682:	07db      	lsls	r3, r3, #31
 8018684:	d5e1      	bpl.n	801864a <__swbuf_r+0x2e>
 8018686:	2e0a      	cmp	r6, #10
 8018688:	d1df      	bne.n	801864a <__swbuf_r+0x2e>
 801868a:	4621      	mov	r1, r4
 801868c:	4628      	mov	r0, r5
 801868e:	f7ff fca1 	bl	8017fd4 <_fflush_r>
 8018692:	2800      	cmp	r0, #0
 8018694:	d0d9      	beq.n	801864a <__swbuf_r+0x2e>
 8018696:	e7d6      	b.n	8018646 <__swbuf_r+0x2a>

08018698 <__swsetup_r>:
 8018698:	b538      	push	{r3, r4, r5, lr}
 801869a:	4b29      	ldr	r3, [pc, #164]	@ (8018740 <__swsetup_r+0xa8>)
 801869c:	4605      	mov	r5, r0
 801869e:	6818      	ldr	r0, [r3, #0]
 80186a0:	460c      	mov	r4, r1
 80186a2:	b118      	cbz	r0, 80186ac <__swsetup_r+0x14>
 80186a4:	6a03      	ldr	r3, [r0, #32]
 80186a6:	b90b      	cbnz	r3, 80186ac <__swsetup_r+0x14>
 80186a8:	f7fe f9f0 	bl	8016a8c <__sinit>
 80186ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186b0:	0719      	lsls	r1, r3, #28
 80186b2:	d422      	bmi.n	80186fa <__swsetup_r+0x62>
 80186b4:	06da      	lsls	r2, r3, #27
 80186b6:	d407      	bmi.n	80186c8 <__swsetup_r+0x30>
 80186b8:	2209      	movs	r2, #9
 80186ba:	602a      	str	r2, [r5, #0]
 80186bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186c0:	81a3      	strh	r3, [r4, #12]
 80186c2:	f04f 30ff 	mov.w	r0, #4294967295
 80186c6:	e033      	b.n	8018730 <__swsetup_r+0x98>
 80186c8:	0758      	lsls	r0, r3, #29
 80186ca:	d512      	bpl.n	80186f2 <__swsetup_r+0x5a>
 80186cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186ce:	b141      	cbz	r1, 80186e2 <__swsetup_r+0x4a>
 80186d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186d4:	4299      	cmp	r1, r3
 80186d6:	d002      	beq.n	80186de <__swsetup_r+0x46>
 80186d8:	4628      	mov	r0, r5
 80186da:	f7fe fba5 	bl	8016e28 <_free_r>
 80186de:	2300      	movs	r3, #0
 80186e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80186e2:	89a3      	ldrh	r3, [r4, #12]
 80186e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80186e8:	81a3      	strh	r3, [r4, #12]
 80186ea:	2300      	movs	r3, #0
 80186ec:	6063      	str	r3, [r4, #4]
 80186ee:	6923      	ldr	r3, [r4, #16]
 80186f0:	6023      	str	r3, [r4, #0]
 80186f2:	89a3      	ldrh	r3, [r4, #12]
 80186f4:	f043 0308 	orr.w	r3, r3, #8
 80186f8:	81a3      	strh	r3, [r4, #12]
 80186fa:	6923      	ldr	r3, [r4, #16]
 80186fc:	b94b      	cbnz	r3, 8018712 <__swsetup_r+0x7a>
 80186fe:	89a3      	ldrh	r3, [r4, #12]
 8018700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018708:	d003      	beq.n	8018712 <__swsetup_r+0x7a>
 801870a:	4621      	mov	r1, r4
 801870c:	4628      	mov	r0, r5
 801870e:	f000 f883 	bl	8018818 <__smakebuf_r>
 8018712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018716:	f013 0201 	ands.w	r2, r3, #1
 801871a:	d00a      	beq.n	8018732 <__swsetup_r+0x9a>
 801871c:	2200      	movs	r2, #0
 801871e:	60a2      	str	r2, [r4, #8]
 8018720:	6962      	ldr	r2, [r4, #20]
 8018722:	4252      	negs	r2, r2
 8018724:	61a2      	str	r2, [r4, #24]
 8018726:	6922      	ldr	r2, [r4, #16]
 8018728:	b942      	cbnz	r2, 801873c <__swsetup_r+0xa4>
 801872a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801872e:	d1c5      	bne.n	80186bc <__swsetup_r+0x24>
 8018730:	bd38      	pop	{r3, r4, r5, pc}
 8018732:	0799      	lsls	r1, r3, #30
 8018734:	bf58      	it	pl
 8018736:	6962      	ldrpl	r2, [r4, #20]
 8018738:	60a2      	str	r2, [r4, #8]
 801873a:	e7f4      	b.n	8018726 <__swsetup_r+0x8e>
 801873c:	2000      	movs	r0, #0
 801873e:	e7f7      	b.n	8018730 <__swsetup_r+0x98>
 8018740:	24000260 	.word	0x24000260

08018744 <_raise_r>:
 8018744:	291f      	cmp	r1, #31
 8018746:	b538      	push	{r3, r4, r5, lr}
 8018748:	4605      	mov	r5, r0
 801874a:	460c      	mov	r4, r1
 801874c:	d904      	bls.n	8018758 <_raise_r+0x14>
 801874e:	2316      	movs	r3, #22
 8018750:	6003      	str	r3, [r0, #0]
 8018752:	f04f 30ff 	mov.w	r0, #4294967295
 8018756:	bd38      	pop	{r3, r4, r5, pc}
 8018758:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801875a:	b112      	cbz	r2, 8018762 <_raise_r+0x1e>
 801875c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018760:	b94b      	cbnz	r3, 8018776 <_raise_r+0x32>
 8018762:	4628      	mov	r0, r5
 8018764:	f000 f830 	bl	80187c8 <_getpid_r>
 8018768:	4622      	mov	r2, r4
 801876a:	4601      	mov	r1, r0
 801876c:	4628      	mov	r0, r5
 801876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018772:	f000 b817 	b.w	80187a4 <_kill_r>
 8018776:	2b01      	cmp	r3, #1
 8018778:	d00a      	beq.n	8018790 <_raise_r+0x4c>
 801877a:	1c59      	adds	r1, r3, #1
 801877c:	d103      	bne.n	8018786 <_raise_r+0x42>
 801877e:	2316      	movs	r3, #22
 8018780:	6003      	str	r3, [r0, #0]
 8018782:	2001      	movs	r0, #1
 8018784:	e7e7      	b.n	8018756 <_raise_r+0x12>
 8018786:	2100      	movs	r1, #0
 8018788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801878c:	4620      	mov	r0, r4
 801878e:	4798      	blx	r3
 8018790:	2000      	movs	r0, #0
 8018792:	e7e0      	b.n	8018756 <_raise_r+0x12>

08018794 <raise>:
 8018794:	4b02      	ldr	r3, [pc, #8]	@ (80187a0 <raise+0xc>)
 8018796:	4601      	mov	r1, r0
 8018798:	6818      	ldr	r0, [r3, #0]
 801879a:	f7ff bfd3 	b.w	8018744 <_raise_r>
 801879e:	bf00      	nop
 80187a0:	24000260 	.word	0x24000260

080187a4 <_kill_r>:
 80187a4:	b538      	push	{r3, r4, r5, lr}
 80187a6:	4d07      	ldr	r5, [pc, #28]	@ (80187c4 <_kill_r+0x20>)
 80187a8:	2300      	movs	r3, #0
 80187aa:	4604      	mov	r4, r0
 80187ac:	4608      	mov	r0, r1
 80187ae:	4611      	mov	r1, r2
 80187b0:	602b      	str	r3, [r5, #0]
 80187b2:	f7ec f89b 	bl	80048ec <_kill>
 80187b6:	1c43      	adds	r3, r0, #1
 80187b8:	d102      	bne.n	80187c0 <_kill_r+0x1c>
 80187ba:	682b      	ldr	r3, [r5, #0]
 80187bc:	b103      	cbz	r3, 80187c0 <_kill_r+0x1c>
 80187be:	6023      	str	r3, [r4, #0]
 80187c0:	bd38      	pop	{r3, r4, r5, pc}
 80187c2:	bf00      	nop
 80187c4:	240053f4 	.word	0x240053f4

080187c8 <_getpid_r>:
 80187c8:	f7ec b888 	b.w	80048dc <_getpid>

080187cc <__swhatbuf_r>:
 80187cc:	b570      	push	{r4, r5, r6, lr}
 80187ce:	460c      	mov	r4, r1
 80187d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187d4:	2900      	cmp	r1, #0
 80187d6:	b096      	sub	sp, #88	@ 0x58
 80187d8:	4615      	mov	r5, r2
 80187da:	461e      	mov	r6, r3
 80187dc:	da0d      	bge.n	80187fa <__swhatbuf_r+0x2e>
 80187de:	89a3      	ldrh	r3, [r4, #12]
 80187e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80187e4:	f04f 0100 	mov.w	r1, #0
 80187e8:	bf14      	ite	ne
 80187ea:	2340      	movne	r3, #64	@ 0x40
 80187ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80187f0:	2000      	movs	r0, #0
 80187f2:	6031      	str	r1, [r6, #0]
 80187f4:	602b      	str	r3, [r5, #0]
 80187f6:	b016      	add	sp, #88	@ 0x58
 80187f8:	bd70      	pop	{r4, r5, r6, pc}
 80187fa:	466a      	mov	r2, sp
 80187fc:	f000 f848 	bl	8018890 <_fstat_r>
 8018800:	2800      	cmp	r0, #0
 8018802:	dbec      	blt.n	80187de <__swhatbuf_r+0x12>
 8018804:	9901      	ldr	r1, [sp, #4]
 8018806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801880a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801880e:	4259      	negs	r1, r3
 8018810:	4159      	adcs	r1, r3
 8018812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018816:	e7eb      	b.n	80187f0 <__swhatbuf_r+0x24>

08018818 <__smakebuf_r>:
 8018818:	898b      	ldrh	r3, [r1, #12]
 801881a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801881c:	079d      	lsls	r5, r3, #30
 801881e:	4606      	mov	r6, r0
 8018820:	460c      	mov	r4, r1
 8018822:	d507      	bpl.n	8018834 <__smakebuf_r+0x1c>
 8018824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018828:	6023      	str	r3, [r4, #0]
 801882a:	6123      	str	r3, [r4, #16]
 801882c:	2301      	movs	r3, #1
 801882e:	6163      	str	r3, [r4, #20]
 8018830:	b003      	add	sp, #12
 8018832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018834:	ab01      	add	r3, sp, #4
 8018836:	466a      	mov	r2, sp
 8018838:	f7ff ffc8 	bl	80187cc <__swhatbuf_r>
 801883c:	9f00      	ldr	r7, [sp, #0]
 801883e:	4605      	mov	r5, r0
 8018840:	4639      	mov	r1, r7
 8018842:	4630      	mov	r0, r6
 8018844:	f7fd f986 	bl	8015b54 <_malloc_r>
 8018848:	b948      	cbnz	r0, 801885e <__smakebuf_r+0x46>
 801884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801884e:	059a      	lsls	r2, r3, #22
 8018850:	d4ee      	bmi.n	8018830 <__smakebuf_r+0x18>
 8018852:	f023 0303 	bic.w	r3, r3, #3
 8018856:	f043 0302 	orr.w	r3, r3, #2
 801885a:	81a3      	strh	r3, [r4, #12]
 801885c:	e7e2      	b.n	8018824 <__smakebuf_r+0xc>
 801885e:	89a3      	ldrh	r3, [r4, #12]
 8018860:	6020      	str	r0, [r4, #0]
 8018862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018866:	81a3      	strh	r3, [r4, #12]
 8018868:	9b01      	ldr	r3, [sp, #4]
 801886a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801886e:	b15b      	cbz	r3, 8018888 <__smakebuf_r+0x70>
 8018870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018874:	4630      	mov	r0, r6
 8018876:	f000 f81d 	bl	80188b4 <_isatty_r>
 801887a:	b128      	cbz	r0, 8018888 <__smakebuf_r+0x70>
 801887c:	89a3      	ldrh	r3, [r4, #12]
 801887e:	f023 0303 	bic.w	r3, r3, #3
 8018882:	f043 0301 	orr.w	r3, r3, #1
 8018886:	81a3      	strh	r3, [r4, #12]
 8018888:	89a3      	ldrh	r3, [r4, #12]
 801888a:	431d      	orrs	r5, r3
 801888c:	81a5      	strh	r5, [r4, #12]
 801888e:	e7cf      	b.n	8018830 <__smakebuf_r+0x18>

08018890 <_fstat_r>:
 8018890:	b538      	push	{r3, r4, r5, lr}
 8018892:	4d07      	ldr	r5, [pc, #28]	@ (80188b0 <_fstat_r+0x20>)
 8018894:	2300      	movs	r3, #0
 8018896:	4604      	mov	r4, r0
 8018898:	4608      	mov	r0, r1
 801889a:	4611      	mov	r1, r2
 801889c:	602b      	str	r3, [r5, #0]
 801889e:	f7ec f885 	bl	80049ac <_fstat>
 80188a2:	1c43      	adds	r3, r0, #1
 80188a4:	d102      	bne.n	80188ac <_fstat_r+0x1c>
 80188a6:	682b      	ldr	r3, [r5, #0]
 80188a8:	b103      	cbz	r3, 80188ac <_fstat_r+0x1c>
 80188aa:	6023      	str	r3, [r4, #0]
 80188ac:	bd38      	pop	{r3, r4, r5, pc}
 80188ae:	bf00      	nop
 80188b0:	240053f4 	.word	0x240053f4

080188b4 <_isatty_r>:
 80188b4:	b538      	push	{r3, r4, r5, lr}
 80188b6:	4d06      	ldr	r5, [pc, #24]	@ (80188d0 <_isatty_r+0x1c>)
 80188b8:	2300      	movs	r3, #0
 80188ba:	4604      	mov	r4, r0
 80188bc:	4608      	mov	r0, r1
 80188be:	602b      	str	r3, [r5, #0]
 80188c0:	f7ec f884 	bl	80049cc <_isatty>
 80188c4:	1c43      	adds	r3, r0, #1
 80188c6:	d102      	bne.n	80188ce <_isatty_r+0x1a>
 80188c8:	682b      	ldr	r3, [r5, #0]
 80188ca:	b103      	cbz	r3, 80188ce <_isatty_r+0x1a>
 80188cc:	6023      	str	r3, [r4, #0]
 80188ce:	bd38      	pop	{r3, r4, r5, pc}
 80188d0:	240053f4 	.word	0x240053f4
 80188d4:	00000000 	.word	0x00000000

080188d8 <log>:
 80188d8:	b4f0      	push	{r4, r5, r6, r7}
 80188da:	ee10 0a90 	vmov	r0, s1
 80188de:	ee10 3a10 	vmov	r3, s0
 80188e2:	f04f 34ff 	mov.w	r4, #4294967295
 80188e6:	429c      	cmp	r4, r3
 80188e8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80188ec:	4c70      	ldr	r4, [pc, #448]	@ (8018ab0 <log+0x1d8>)
 80188ee:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80188f2:	418c      	sbcs	r4, r1
 80188f4:	ed2d 8b02 	vpush	{d8}
 80188f8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80188fc:	d35a      	bcc.n	80189b4 <log+0xdc>
 80188fe:	4a6d      	ldr	r2, [pc, #436]	@ (8018ab4 <log+0x1dc>)
 8018900:	4290      	cmp	r0, r2
 8018902:	bf08      	it	eq
 8018904:	2b00      	cmpeq	r3, #0
 8018906:	f000 80c4 	beq.w	8018a92 <log+0x1ba>
 801890a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801890e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018912:	4b69      	ldr	r3, [pc, #420]	@ (8018ab8 <log+0x1e0>)
 8018914:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018918:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801891c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018920:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8018924:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018928:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801892c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018930:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018934:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018938:	eea5 6b00 	vfma.f64	d6, d5, d0
 801893c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8018940:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8018944:	eea5 6b02 	vfma.f64	d6, d5, d2
 8018948:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801894c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8018950:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8018954:	eea3 5b02 	vfma.f64	d5, d3, d2
 8018958:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801895c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8018960:	eea5 6b04 	vfma.f64	d6, d5, d4
 8018964:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8018968:	eea6 7b04 	vfma.f64	d7, d6, d4
 801896c:	eeb0 2b47 	vmov.f64	d2, d7
 8018970:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018a98 <log+0x1c0>
 8018974:	eeb0 6b40 	vmov.f64	d6, d0
 8018978:	eeb0 3b40 	vmov.f64	d3, d0
 801897c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018980:	eea0 6b47 	vfms.f64	d6, d0, d7
 8018984:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018988:	ee26 1b06 	vmul.f64	d1, d6, d6
 801898c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018990:	ee30 7b43 	vsub.f64	d7, d0, d3
 8018994:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018998:	eea1 7b05 	vfma.f64	d7, d1, d5
 801899c:	ee25 5b08 	vmul.f64	d5, d5, d8
 80189a0:	eea5 7b00 	vfma.f64	d7, d5, d0
 80189a4:	eea2 7b04 	vfma.f64	d7, d2, d4
 80189a8:	ee33 0b07 	vadd.f64	d0, d3, d7
 80189ac:	ecbd 8b02 	vpop	{d8}
 80189b0:	bcf0      	pop	{r4, r5, r6, r7}
 80189b2:	4770      	bx	lr
 80189b4:	f1a2 0410 	sub.w	r4, r2, #16
 80189b8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80189bc:	428c      	cmp	r4, r1
 80189be:	d923      	bls.n	8018a08 <log+0x130>
 80189c0:	18d9      	adds	r1, r3, r3
 80189c2:	eb40 0400 	adc.w	r4, r0, r0
 80189c6:	4321      	orrs	r1, r4
 80189c8:	d105      	bne.n	80189d6 <log+0xfe>
 80189ca:	ecbd 8b02 	vpop	{d8}
 80189ce:	2001      	movs	r0, #1
 80189d0:	bcf0      	pop	{r4, r5, r6, r7}
 80189d2:	f000 b885 	b.w	8018ae0 <__math_divzero>
 80189d6:	4939      	ldr	r1, [pc, #228]	@ (8018abc <log+0x1e4>)
 80189d8:	4288      	cmp	r0, r1
 80189da:	bf08      	it	eq
 80189dc:	2b00      	cmpeq	r3, #0
 80189de:	d0e5      	beq.n	80189ac <log+0xd4>
 80189e0:	0413      	lsls	r3, r2, #16
 80189e2:	d403      	bmi.n	80189ec <log+0x114>
 80189e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80189e8:	4393      	bics	r3, r2
 80189ea:	d104      	bne.n	80189f6 <log+0x11e>
 80189ec:	ecbd 8b02 	vpop	{d8}
 80189f0:	bcf0      	pop	{r4, r5, r6, r7}
 80189f2:	f000 b88d 	b.w	8018b10 <__math_invalid>
 80189f6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018aa0 <log+0x1c8>
 80189fa:	ee20 7b07 	vmul.f64	d7, d0, d7
 80189fe:	ec53 2b17 	vmov	r2, r3, d7
 8018a02:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018a06:	4613      	mov	r3, r2
 8018a08:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018a0c:	492a      	ldr	r1, [pc, #168]	@ (8018ab8 <log+0x1e0>)
 8018a0e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018a12:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018a16:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8018a1a:	0d15      	lsrs	r5, r2, #20
 8018a1c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018a20:	052d      	lsls	r5, r5, #20
 8018a22:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8018a26:	1e1e      	subs	r6, r3, #0
 8018a28:	1b47      	subs	r7, r0, r5
 8018a2a:	ec47 6b16 	vmov	d6, r6, r7
 8018a2e:	1512      	asrs	r2, r2, #20
 8018a30:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018a34:	ee07 2a90 	vmov	s15, r2
 8018a38:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018a3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018a40:	ed91 4b00 	vldr	d4, [r1]
 8018a44:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018a48:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8018a4c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018a50:	ee35 4b07 	vadd.f64	d4, d5, d7
 8018a54:	ee37 0b44 	vsub.f64	d0, d7, d4
 8018a58:	ed91 7b02 	vldr	d7, [r1, #8]
 8018a5c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8018a60:	eea7 0b06 	vfma.f64	d0, d7, d6
 8018a64:	ed91 7b04 	vldr	d7, [r1, #16]
 8018a68:	ed91 6b08 	vldr	d6, [r1, #32]
 8018a6c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8018a70:	ed91 7b06 	vldr	d7, [r1, #24]
 8018a74:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018a78:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018a7c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018a80:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018a84:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018a88:	eea1 0b07 	vfma.f64	d0, d1, d7
 8018a8c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018a90:	e78c      	b.n	80189ac <log+0xd4>
 8018a92:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018aa8 <log+0x1d0>
 8018a96:	e789      	b.n	80189ac <log+0xd4>
 8018a98:	00000000 	.word	0x00000000
 8018a9c:	41a00000 	.word	0x41a00000
 8018aa0:	00000000 	.word	0x00000000
 8018aa4:	43300000 	.word	0x43300000
	...
 8018ab0:	000308ff 	.word	0x000308ff
 8018ab4:	3ff00000 	.word	0x3ff00000
 8018ab8:	080194b8 	.word	0x080194b8
 8018abc:	7ff00000 	.word	0x7ff00000

08018ac0 <with_errno>:
 8018ac0:	b510      	push	{r4, lr}
 8018ac2:	ed2d 8b02 	vpush	{d8}
 8018ac6:	eeb0 8b40 	vmov.f64	d8, d0
 8018aca:	4604      	mov	r4, r0
 8018acc:	f7fe f93a 	bl	8016d44 <__errno>
 8018ad0:	eeb0 0b48 	vmov.f64	d0, d8
 8018ad4:	ecbd 8b02 	vpop	{d8}
 8018ad8:	6004      	str	r4, [r0, #0]
 8018ada:	bd10      	pop	{r4, pc}
 8018adc:	0000      	movs	r0, r0
	...

08018ae0 <__math_divzero>:
 8018ae0:	b082      	sub	sp, #8
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018ae8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018aec:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018af0:	ed8d 7b00 	vstr	d7, [sp]
 8018af4:	ed9d 0b00 	vldr	d0, [sp]
 8018af8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018b08 <__math_divzero+0x28>
 8018afc:	2022      	movs	r0, #34	@ 0x22
 8018afe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018b02:	b002      	add	sp, #8
 8018b04:	f7ff bfdc 	b.w	8018ac0 <with_errno>
	...

08018b10 <__math_invalid>:
 8018b10:	eeb0 7b40 	vmov.f64	d7, d0
 8018b14:	eeb4 7b47 	vcmp.f64	d7, d7
 8018b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b1c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018b20:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018b24:	d602      	bvs.n	8018b2c <__math_invalid+0x1c>
 8018b26:	2021      	movs	r0, #33	@ 0x21
 8018b28:	f7ff bfca 	b.w	8018ac0 <with_errno>
 8018b2c:	4770      	bx	lr
	...

08018b30 <_init>:
 8018b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b32:	bf00      	nop
 8018b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b36:	bc08      	pop	{r3}
 8018b38:	469e      	mov	lr, r3
 8018b3a:	4770      	bx	lr

08018b3c <_fini>:
 8018b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b3e:	bf00      	nop
 8018b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b42:	bc08      	pop	{r3}
 8018b44:	469e      	mov	lr, r3
 8018b46:	4770      	bx	lr
