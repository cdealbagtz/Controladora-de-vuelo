
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147a8  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08014a58  08014a58  00015a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015820  08015820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015828  08015828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801582c  0801582c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000138  24000000  08015830  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004e00  24000138  08015968  00017138  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24004f38  08015968  00017f38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a6cc  00000000  00000000  00017166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055b3  00000000  00000000  00041832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002020  00000000  00000000  00046de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001900  00000000  00000000  00048e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f9d  00000000  00000000  0004a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000322e4  00000000  00000000  000826a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001558dd  00000000  00000000  000b4989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020a266  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000089e8  00000000  00000000  0020a2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00212c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000138 	.word	0x24000138
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08014a40 	.word	0x08014a40

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400013c 	.word	0x2400013c
 80002ec:	08014a40 	.word	0x08014a40

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f007 fdb4 	bl	8008204 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f00a fdf3 	bl	800b298 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f00a fded 	bl	800b298 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f007 fd9d 	bl	8008204 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24004628 	.word	0x24004628

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f007 fd84 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f00a fdc7 	bl	800b298 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a ffae 	bl	800b674 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f007 fd70 	bl	8008204 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24004628 	.word	0x24004628

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f007 fd45 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f00a fd88 	bl	800b298 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a ff70 	bl	800b674 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f007 fd32 	bl	8008204 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24004628 	.word	0x24004628
 800088c:	24000168 	.word	0x24000168
 8000890:	2400016c 	.word	0x2400016c
 8000894:	2400016e 	.word	0x2400016e
 8000898:	2400016a 	.word	0x2400016a
 800089c:	24000170 	.word	0x24000170
 80008a0:	24000172 	.word	0x24000172
 80008a4:	24000174 	.word	0x24000174
 80008a8:	24000176 	.word	0x24000176
 80008ac:	24000178 	.word	0x24000178
 80008b0:	2400017a 	.word	0x2400017a
 80008b4:	2400017c 	.word	0x2400017c
 80008b8:	2400017e 	.word	0x2400017e

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f007 fc95 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f00a fcd9 	bl	800b298 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a fec1 	bl	800b674 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f007 fc83 	bl	8008204 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24004628 	.word	0x24004628
 800093c:	24000184 	.word	0x24000184
 8000940:	24000180 	.word	0x24000180

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000180 	.word	0x24000180
 80009bc:	24000168 	.word	0x24000168
 80009c0:	2400016c 	.word	0x2400016c
 80009c4:	2400016e 	.word	0x2400016e
 80009c8:	24000188 	.word	0x24000188

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000188 	.word	0x24000188
 8000c9c:	24000178 	.word	0x24000178
 8000ca0:	24000176 	.word	0x24000176
 8000ca4:	24000174 	.word	0x24000174
 8000ca8:	24000172 	.word	0x24000172
 8000cac:	24000170 	.word	0x24000170
 8000cb0:	2400016a 	.word	0x2400016a
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	2400017e 	.word	0x2400017e
 8000f50:	2400017c 	.word	0x2400017c
 8000f54:	2400017a 	.word	0x2400017a

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f013 fc31 	bl	80147e8 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f007 f8f2 	bl	8008204 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	24000154 	.word	0x24000154
 8001058:	24000180 	.word	0x24000180

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000154 	.word	0x24000154
 80010c8:	24000180 	.word	0x24000180
 80010cc:	24000184 	.word	0x24000184

080010d0 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <bno055_delay+0x24>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4413      	add	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <bno055_delay+0x24>)
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	2400028f 	.word	0x2400028f

080010f8 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001108:	23aa      	movs	r3, #170	@ 0xaa
 800110a:	723b      	strb	r3, [r7, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	727b      	strb	r3, [r7, #9]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	72bb      	strb	r3, [r7, #10]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <BNO_Read+0x44>)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <BNO_Read+0x48>)
 8001128:	f00c fa50 	bl	800d5cc <HAL_UART_Transmit>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400018c 	.word	0x2400018c
 8001140:	240049a0 	.word	0x240049a0

08001144 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8001154:	23aa      	movs	r3, #170	@ 0xaa
 8001156:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2205      	movs	r2, #5
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <BNO_Write+0x40>)
 8001172:	f00c fa2b 	bl	800d5cc <HAL_UART_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	240049a0 	.word	0x240049a0

08001188 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001188:	b580      	push	{r7, lr}
 800118a:	b0c4      	sub	sp, #272	@ 0x110
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800119c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011a0:	4602      	mov	r2, r0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011a8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80011ac:	460a      	mov	r2, r1
 80011ae:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80011b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b8:	22aa      	movs	r2, #170	@ 0xaa
 80011ba:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80011bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 80011c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011d4:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 80011dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011e8:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011f6:	e015      	b.n	8001224 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80011f8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001200:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	441a      	add	r2, r3
 8001208:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800120c:	3304      	adds	r3, #4
 800120e:	7811      	ldrb	r1, [r2, #0]
 8001210:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001214:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001218:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800121e:	3301      	adds	r3, #1
 8001220:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001228:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800122c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3e0      	bcc.n	80011f8 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8001236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3304      	adds	r3, #4
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <BNO_Write_MB+0xe0>)
 800124e:	f00c f9bd 	bl	800d5cc <HAL_UART_Transmit>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001258:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 800125c:	4618      	mov	r0, r3
 800125e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	240049a0 	.word	0x240049a0
 800126c:	00000000 	.word	0x00000000

08001270 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001274:	4ba6      	ldr	r3, [pc, #664]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b55      	cmp	r3, #85	@ 0x55
 800127a:	f300 8247 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800127e:	2b35      	cmp	r3, #53	@ 0x35
 8001280:	da0a      	bge.n	8001298 <BNO_Page0Adress+0x28>
 8001282:	2b08      	cmp	r3, #8
 8001284:	f000 814a 	beq.w	800151c <BNO_Page0Adress+0x2ac>
 8001288:	2b08      	cmp	r3, #8
 800128a:	f300 823f 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04c      	beq.n	800132c <BNO_Page0Adress+0xbc>
 8001292:	2b07      	cmp	r3, #7
 8001294:	d065      	beq.n	8001362 <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8001296:	e239      	b.n	800170c <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001298:	3b35      	subs	r3, #53	@ 0x35
 800129a:	2b20      	cmp	r3, #32
 800129c:	f200 8236 	bhi.w	800170c <BNO_Page0Adress+0x49c>
 80012a0:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <BNO_Page0Adress+0x38>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080013ab 	.word	0x080013ab
 80012ac:	0800170d 	.word	0x0800170d
 80012b0:	0800170d 	.word	0x0800170d
 80012b4:	0800170d 	.word	0x0800170d
 80012b8:	08001387 	.word	0x08001387
 80012bc:	0800170d 	.word	0x0800170d
 80012c0:	08001375 	.word	0x08001375
 80012c4:	0800170d 	.word	0x0800170d
 80012c8:	08001399 	.word	0x08001399
 80012cc:	0800170d 	.word	0x0800170d
 80012d0:	0800170d 	.word	0x0800170d
 80012d4:	0800170d 	.word	0x0800170d
 80012d8:	0800170d 	.word	0x0800170d
 80012dc:	0800170d 	.word	0x0800170d
 80012e0:	0800170d 	.word	0x0800170d
 80012e4:	0800170d 	.word	0x0800170d
 80012e8:	0800170d 	.word	0x0800170d
 80012ec:	0800170d 	.word	0x0800170d
 80012f0:	0800170d 	.word	0x0800170d
 80012f4:	0800170d 	.word	0x0800170d
 80012f8:	0800170d 	.word	0x0800170d
 80012fc:	0800170d 	.word	0x0800170d
 8001300:	0800170d 	.word	0x0800170d
 8001304:	0800170d 	.word	0x0800170d
 8001308:	0800170d 	.word	0x0800170d
 800130c:	0800170d 	.word	0x0800170d
 8001310:	0800170d 	.word	0x0800170d
 8001314:	0800170d 	.word	0x0800170d
 8001318:	0800170d 	.word	0x0800170d
 800131c:	0800170d 	.word	0x0800170d
 8001320:	0800170d 	.word	0x0800170d
 8001324:	0800170d 	.word	0x0800170d
 8001328:	08001403 	.word	0x08001403
			if(BNO_RxBuffer[1] != 160) return;
 800132c:	4b78      	ldr	r3, [pc, #480]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	2ba0      	cmp	r3, #160	@ 0xa0
 8001332:	f040 81ed 	bne.w	8001710 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001338:	785a      	ldrb	r2, [r3, #1]
 800133a:	4b76      	ldr	r3, [pc, #472]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800133c:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001340:	789a      	ldrb	r2, [r3, #2]
 8001342:	4b74      	ldr	r3, [pc, #464]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001344:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8001346:	4b72      	ldr	r3, [pc, #456]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001348:	78da      	ldrb	r2, [r3, #3]
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800134c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001350:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001352:	791a      	ldrb	r2, [r3, #4]
 8001354:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001356:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 800135a:	4b6f      	ldr	r3, [pc, #444]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800135c:	220b      	movs	r2, #11
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e1d7      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8001362:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001364:	785a      	ldrb	r2, [r3, #1]
 8001366:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800136e:	220b      	movs	r2, #11
 8001370:	701a      	strb	r2, [r3, #0]
			break;
 8001372:	e1ce      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800137a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 800137e:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001380:	220b      	movs	r2, #11
 8001382:	701a      	strb	r2, [r3, #0]
			break;
 8001384:	e1c5      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8001386:	4b62      	ldr	r3, [pc, #392]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001388:	785a      	ldrb	r2, [r3, #1]
 800138a:	4b62      	ldr	r3, [pc, #392]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800138c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001390:	4b61      	ldr	r3, [pc, #388]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001392:	220b      	movs	r2, #11
 8001394:	701a      	strb	r2, [r3, #0]
			break;
 8001396:	e1bc      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800139a:	785a      	ldrb	r2, [r3, #1]
 800139c:	4b5d      	ldr	r3, [pc, #372]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800139e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013a4:	220b      	movs	r2, #11
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e1b3      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ac:	785a      	ldrb	r2, [r3, #1]
 80013ae:	4b59      	ldr	r3, [pc, #356]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013b0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80013b4:	4b56      	ldr	r3, [pc, #344]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013be:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013d2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 80013d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013e6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	701a      	strb	r2, [r3, #0]
			break;
 8001400:	e187      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001416:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800142e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001434:	799b      	ldrb	r3, [r3, #6]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001446:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001454:	79db      	ldrb	r3, [r3, #7]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800145e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001464:	7a9b      	ldrb	r3, [r3, #10]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001476:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001484:	7adb      	ldrb	r3, [r3, #11]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800148e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001494:	7b9b      	ldrb	r3, [r3, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014a6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014ac:	7c1b      	ldrb	r3, [r3, #16]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014b4:	7bdb      	ldrb	r3, [r3, #15]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014be:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014c4:	7c9b      	ldrb	r3, [r3, #18]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014d6:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014dc:	7d1b      	ldrb	r3, [r3, #20]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014e4:	7cdb      	ldrb	r3, [r3, #19]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014f0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014f6:	7d9b      	ldrb	r3, [r3, #22]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014fe:	7d5b      	ldrb	r3, [r3, #21]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800150a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 800150e:	e100      	b.n	8001712 <BNO_Page0Adress+0x4a2>
 8001510:	2400018c 	.word	0x2400018c
 8001514:	24000298 	.word	0x24000298
 8001518:	2400028d 	.word	0x2400028d
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 800151c:	4b82      	ldr	r3, [pc, #520]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b80      	ldr	r3, [pc, #512]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001536:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800153a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001540:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8001544:	4b78      	ldr	r3, [pc, #480]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001546:	791b      	ldrb	r3, [r3, #4]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800155e:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001720 <BNO_Page0Adress+0x4b0>
 8001562:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001566:	4b71      	ldr	r3, [pc, #452]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001568:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 800156c:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b6c      	ldr	r3, [pc, #432]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001586:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800158a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158e:	4b67      	ldr	r3, [pc, #412]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001590:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800159e:	79db      	ldrb	r3, [r3, #7]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015ae:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015b8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 80015bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015be:	7a9b      	ldrb	r3, [r3, #10]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015c6:	7a5b      	ldrb	r3, [r3, #9]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015d6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015e0:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 80015e4:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015ee:	7adb      	ldrb	r3, [r3, #11]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001608:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 800160c:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800160e:	7b9b      	ldrb	r3, [r3, #14]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001616:	7b5b      	ldrb	r3, [r3, #13]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001626:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800162a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001630:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001636:	7c1b      	ldrb	r3, [r3, #16]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800163e:	7bdb      	ldrb	r3, [r3, #15]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164e:	eeb1 6b47 	vneg.f64	d6, d7
 8001652:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <BNO_Page0Adress+0x4bc>)
 800165c:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001662:	7c9b      	ldrb	r3, [r3, #18]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800166a:	7c5b      	ldrb	r3, [r3, #17]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800167a:	eeb1 6b47 	vneg.f64	d6, d7
 800167e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001682:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001688:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001696:	7cdb      	ldrb	r3, [r3, #19]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016a6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016b0:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016b6:	7d9b      	ldrb	r3, [r3, #22]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016be:	7d5b      	ldrb	r3, [r3, #21]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ce:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016d8:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016e6:	7ddb      	ldrb	r3, [r3, #23]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016f6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001700:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <BNO_Page0Adress+0x4c0>)
 8001706:	220b      	movs	r2, #11
 8001708:	701a      	strb	r2, [r3, #0]
			break;
 800170a:	e002      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			break;
 800170c:	bf00      	nop
 800170e:	e000      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001710:	bf00      	nop
	}
}
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	00000000 	.word	0x00000000
 8001724:	40590000 	.word	0x40590000
 8001728:	2400018c 	.word	0x2400018c
 800172c:	24000298 	.word	0x24000298
 8001730:	2400028d 	.word	0x2400028d

08001734 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <BNO_Page1Adress+0x2c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b07      	cmp	r3, #7
 800173e:	d108      	bne.n	8001752 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <BNO_Page1Adress+0x2c>)
 8001742:	785a      	ldrb	r2, [r3, #1]
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <BNO_Page1Adress+0x30>)
 8001746:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <BNO_Page1Adress+0x34>)
 800174c:	220b      	movs	r2, #11
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	e000      	b.n	8001754 <BNO_Page1Adress+0x20>

		default:
			break;
 8001752:	bf00      	nop
	}
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400018c 	.word	0x2400018c
 8001764:	24000298 	.word	0x24000298
 8001768:	2400028d 	.word	0x2400028d

0800176c <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <BNO_EmptyingBuffer+0x30>)
 8001772:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <BNO_EmptyingBuffer+0x14>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 800177e:	e005      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001780:	f7ff fd76 	bl	8001270 <BNO_Page0Adress>
			break;
 8001784:	e002      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001786:	f7ff ffd5 	bl	8001734 <BNO_Page1Adress>
			break;
 800178a:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800178c:	22ff      	movs	r2, #255	@ 0xff
 800178e:	2100      	movs	r1, #0
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <BNO_EmptyingBuffer+0x34>)
 8001792:	f012 ffe9 	bl	8014768 <memset>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000298 	.word	0x24000298
 80017a0:	2400018c 	.word	0x2400018c

080017a4 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80017a8:	2120      	movs	r1, #32
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f7ff fcca 	bl	8001144 <BNO_Write>
	bno055_delay(70);
 80017b0:	2046      	movs	r0, #70	@ 0x46
 80017b2:	f7ff fc8d 	bl	80010d0 <bno055_delay>
	IMU.ID = 0x00;
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <BNO_SWReset+0x24>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <BNO_SWReset+0x28>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24000298 	.word	0x24000298
 80017cc:	24000290 	.word	0x24000290

080017d0 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4619      	mov	r1, r3
 80017de:	203d      	movs	r0, #61	@ 0x3d
 80017e0:	f7ff fcb0 	bl	8001144 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f7ff fc70 	bl	80010d0 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 80017f0:	e002      	b.n	80017f8 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f7ff fc6c 	bl	80010d0 <bno055_delay>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ffe3 	bl	80017d0 <bno055_setOperationMode>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}

0800180e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001812:	200c      	movs	r0, #12
 8001814:	f7ff ffdc 	bl	80017d0 <bno055_setOperationMode>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001820:	2116      	movs	r1, #22
 8001822:	2055      	movs	r0, #85	@ 0x55
 8001824:	f7ff fc68 	bl	80010f8 <BNO_Read>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001832:	463b      	mov	r3, r7
 8001834:	2206      	movs	r2, #6
 8001836:	4619      	mov	r1, r3
 8001838:	4814      	ldr	r0, [pc, #80]	@ (800188c <BNO_SetCalibrationData+0x60>)
 800183a:	f012 ffc7 	bl	80147cc <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800183e:	463b      	mov	r3, r7
 8001840:	3306      	adds	r3, #6
 8001842:	2206      	movs	r2, #6
 8001844:	4619      	mov	r1, r3
 8001846:	4812      	ldr	r0, [pc, #72]	@ (8001890 <BNO_SetCalibrationData+0x64>)
 8001848:	f012 ffc0 	bl	80147cc <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 800184c:	463b      	mov	r3, r7
 800184e:	330c      	adds	r3, #12
 8001850:	2206      	movs	r2, #6
 8001852:	4619      	mov	r1, r3
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <BNO_SetCalibrationData+0x68>)
 8001856:	f012 ffb9 	bl	80147cc <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 800185a:	463b      	mov	r3, r7
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001864:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001868:	463b      	mov	r3, r7
 800186a:	3314      	adds	r3, #20
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001872:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001876:	463b      	mov	r3, r7
 8001878:	461a      	mov	r2, r3
 800187a:	2116      	movs	r1, #22
 800187c:	2055      	movs	r0, #85	@ 0x55
 800187e:	f7ff fc83 	bl	8001188 <BNO_Write_MB>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2400032e 	.word	0x2400032e
 8001890:	24000328 	.word	0x24000328
 8001894:	24000322 	.word	0x24000322
 8001898:	24000298 	.word	0x24000298

0800189c <BNO_Init>:

void BNO_Init(void){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <BNO_Init+0x2c>)
 80018a6:	f006 fcad 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b0:	4806      	ldr	r0, [pc, #24]	@ (80018cc <BNO_Init+0x30>)
 80018b2:	f006 fca7 	bl	8008204 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f7ff fc0a 	bl	80010d0 <bno055_delay>

	BNO_CurrentState = Reset;
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <BNO_Init+0x34>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	58020400 	.word	0x58020400
 80018d0:	24000290 	.word	0x24000290

080018d4 <BNO_Config>:

void BNO_Config(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <BNO_Config+0x88>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d839      	bhi.n	8001954 <BNO_Config+0x80>
 80018e0:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <BNO_Config+0x14>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001909 	.word	0x08001909
 80018f0:	08001915 	.word	0x08001915
 80018f4:	08001937 	.word	0x08001937
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80018f8:	2100      	movs	r1, #0
 80018fa:	203f      	movs	r0, #63	@ 0x3f
 80018fc:	f7ff fc22 	bl	8001144 <BNO_Write>
			ConfigFlag = 1;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <BNO_Config+0x88>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
			break;
 8001906:	e026      	b.n	8001956 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001908:	f7ff ff7a 	bl	8001800 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <BNO_Config+0x88>)
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
			break;
 8001912:	e020      	b.n	8001956 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001914:	2101      	movs	r1, #1
 8001916:	203d      	movs	r0, #61	@ 0x3d
 8001918:	f7ff fbee 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <BNO_Config+0x8c>)
 800191e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <BNO_Config+0x88>)
 8001928:	2203      	movs	r2, #3
 800192a:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 800192c:	e013      	b.n	8001956 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <BNO_Config+0x88>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
			break;
 8001934:	e00f      	b.n	8001956 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001936:	2104      	movs	r1, #4
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fbdd 	bl	80010f8 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <BNO_Config+0x8c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2ba0      	cmp	r3, #160	@ 0xa0
 8001944:	d102      	bne.n	800194c <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <BNO_Config+0x90>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <BNO_Config+0x88>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			break;
 8001952:	e000      	b.n	8001956 <BNO_Config+0x82>
		default:
			break;
 8001954:	bf00      	nop
	}

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000338 	.word	0x24000338
 8001960:	24000298 	.word	0x24000298
 8001964:	24000290 	.word	0x24000290

08001968 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d870      	bhi.n	8001a56 <BNO_CalibrationStatus+0xee>
 8001974:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <BNO_CalibrationStatus+0x14>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800199d 	.word	0x0800199d
 8001980:	080019ad 	.word	0x080019ad
 8001984:	080019b9 	.word	0x080019b9
 8001988:	080019f1 	.word	0x080019f1
 800198c:	08001a0b 	.word	0x08001a0b
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a39 	.word	0x08001a39
 8001998:	08001a4b 	.word	0x08001a4b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800199c:	2100      	movs	r1, #0
 800199e:	203f      	movs	r0, #63	@ 0x3f
 80019a0:	f7ff fbd0 	bl	8001144 <BNO_Write>
			CalibrationFlag = 1;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
			break;
 80019aa:	e059      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80019ac:	f7ff ff2f 	bl	800180e <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	e053      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80019b8:	2101      	movs	r1, #1
 80019ba:	203d      	movs	r0, #61	@ 0x3d
 80019bc:	f7ff fb9c 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019c2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d10e      	bne.n	80019e8 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <BNO_CalibrationStatus+0x108>)
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 80019de:	e03f      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e03b      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
			break;
 80019ee:	e037      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 80019f0:	2101      	movs	r1, #1
 80019f2:	2035      	movs	r0, #53	@ 0x35
 80019f4:	f7ff fb80 	bl	80010f8 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019fa:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d12d      	bne.n	8001a5e <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001a08:	e029      	b.n	8001a5e <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001a0a:	f7ff fef9 	bl	8001800 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e024      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	203d      	movs	r0, #61	@ 0x3d
 8001a1a:	f7ff fb6d 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 8001a20:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001a2e:	e017      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
			break;
 8001a36:	e013      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001a38:	f7ff fef0 	bl	800181c <BNO_GetCalibrationData>
			Calibrated = 1;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
			break;
 8001a48:	e00a      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001a4a:	f7ff feef 	bl	800182c <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
			break;
 8001a54:	e004      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001a56:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
			break;
 8001a5c:	e000      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			break;
 8001a5e:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000339 	.word	0x24000339
 8001a68:	24000298 	.word	0x24000298
 8001a6c:	24000000 	.word	0x24000000
 8001a70:	24000290 	.word	0x24000290

08001a74 <BNO_GetData>:

void BNO_GetData(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001a78:	2118      	movs	r1, #24
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fb3c 	bl	80010f8 <BNO_Read>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <BNO_Receive+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <BNO_Receive+0xc0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2bff      	cmp	r3, #255	@ 0xff
 8001a9a:	d027      	beq.n	8001aec <BNO_Receive+0x68>
 8001a9c:	2bff      	cmp	r3, #255	@ 0xff
 8001a9e:	dc46      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa0:	2bee      	cmp	r3, #238	@ 0xee
 8001aa2:	d017      	beq.n	8001ad4 <BNO_Receive+0x50>
 8001aa4:	2bee      	cmp	r3, #238	@ 0xee
 8001aa6:	dc42      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <BNO_Receive+0x2e>
 8001aac:	2bbb      	cmp	r3, #187	@ 0xbb
 8001aae:	d00a      	beq.n	8001ac6 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001ab0:	e03d      	b.n	8001b2e <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab6:	d002      	beq.n	8001abe <BNO_Receive+0x3a>
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2bee      	cmp	r3, #238	@ 0xee
 8001abc:	d139      	bne.n	8001b32 <BNO_Receive+0xae>
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	7013      	strb	r3, [r2, #0]
			break;
 8001ac4:	e035      	b.n	8001b32 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001ac6:	4a20      	ldr	r2, [pc, #128]	@ (8001b48 <BNO_Receive+0xc4>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	701a      	strb	r2, [r3, #0]
			break;
 8001ad2:	e031      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <BNO_Receive+0xc8>)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <BNO_Receive+0xc0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001ae0:	22ff      	movs	r2, #255	@ 0xff
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	481a      	ldr	r0, [pc, #104]	@ (8001b50 <BNO_Receive+0xcc>)
 8001ae6:	f012 fe3f 	bl	8014768 <memset>
			break;
 8001aea:	e025      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <BNO_Receive+0xd0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4917      	ldr	r1, [pc, #92]	@ (8001b50 <BNO_Receive+0xcc>)
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <BNO_Receive+0xd0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b02:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d112      	bne.n	8001b36 <BNO_Receive+0xb2>
				Counter = 0;
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <BNO_Receive+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <BNO_Receive+0xc8>)
 8001b24:	220b      	movs	r2, #11
 8001b26:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001b28:	f7ff fe20 	bl	800176c <BNO_EmptyingBuffer>
			break;
 8001b2c:	e003      	b.n	8001b36 <BNO_Receive+0xb2>
			break;
 8001b2e:	bf00      	nop
 8001b30:	e002      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b36:	bf00      	nop
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2400028e 	.word	0x2400028e
 8001b44:	2400028c 	.word	0x2400028c
 8001b48:	2400033a 	.word	0x2400033a
 8001b4c:	2400028d 	.word	0x2400028d
 8001b50:	2400018c 	.word	0x2400018c
 8001b54:	2400033b 	.word	0x2400033b

08001b58 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d912      	bls.n	8001b8a <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 8001b64:	480b      	ldr	r0, [pc, #44]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b66:	f002 fd03 	bl	8004570 <Reset_UART>
		BNO_ComsCounter = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <BNO_FaultManager+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <BNO_FaultManager+0x44>)
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b7c:	f00b fdb4 	bl	800d6e8 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	2100      	movs	r1, #0
 8001b84:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <BNO_FaultManager+0x48>)
 8001b86:	f012 fdef 	bl	8014768 <memset>
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2400028e 	.word	0x2400028e
 8001b94:	240049a0 	.word	0x240049a0
 8001b98:	2400028c 	.word	0x2400028c
 8001b9c:	2400028b 	.word	0x2400028b
 8001ba0:	2400018c 	.word	0x2400018c

08001ba4 <BNO_Tasks>:

void BNO_Tasks(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <BNO_Tasks+0x74>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d128      	bne.n	8001c02 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <BNO_Tasks+0x78>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d81c      	bhi.n	8001bf2 <BNO_Tasks+0x4e>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <BNO_Tasks+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001be1 	.word	0x08001be1
 8001bc8:	08001be7 	.word	0x08001be7
 8001bcc:	08001bed 	.word	0x08001bed
 8001bd0:	08001bdb 	.word	0x08001bdb
			case Init:
				BNO_Init();
 8001bd4:	f7ff fe62 	bl	800189c <BNO_Init>
				break;
 8001bd8:	e00c      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8001bda:	f7ff fde3 	bl	80017a4 <BNO_SWReset>
			break;
 8001bde:	e009      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8001be0:	f7ff fe78 	bl	80018d4 <BNO_Config>
				break;
 8001be4:	e006      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8001be6:	f7ff febf 	bl	8001968 <BNO_CalibrationStatus>
				break;
 8001bea:	e003      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8001bec:	f7ff ff42 	bl	8001a74 <BNO_GetData>
				break;
 8001bf0:	e000      	b.n	8001bf4 <BNO_Tasks+0x50>

			default:
				break;
 8001bf2:	bf00      	nop
		}
		++BNO_ComsCounter;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e005      	b.n	8001c0e <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c0c:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8001c0e:	f7ff ffa3 	bl	8001b58 <BNO_FaultManager>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2400028f 	.word	0x2400028f
 8001c1c:	24000290 	.word	0x24000290
 8001c20:	2400028e 	.word	0x2400028e

08001c24 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8001c24:	b084      	sub	sp, #16
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	f107 001c 	add.w	r0, r7, #28
 8001c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8001c36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <LED_blink+0x20>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d010      	beq.n	8001c64 <LED_blink+0x40>
 8001c42:	e01f      	b.n	8001c84 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8001c44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d31f      	bcc.n	8001c8c <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	8c39      	ldrh	r1, [r7, #32]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fad6 	bl	8008204 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c62:	e013      	b.n	8001c8c <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001c64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d311      	bcc.n	8001c90 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	8c39      	ldrh	r1, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 fac6 	bl	8008204 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c82:	e005      	b.n	8001c90 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001c8a:	e002      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c90:	bf00      	nop
		}

	LED.count++;
 8001c92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cb2:	b004      	add	sp, #16
 8001cb4:	4770      	bx	lr

08001cb6 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	f107 001c 	add.w	r0, r7, #28
 8001cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d117      	bne.n	8001d00 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <LED_Rutine+0x28>
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d007      	beq.n	8001cec <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001cdc:	e018      	b.n	8001d10 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	8c39      	ldrh	r1, [r7, #32]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fa8d 	bl	8008204 <HAL_GPIO_WritePin>
				break;
 8001cea:	e011      	b.n	8001d10 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001cec:	f107 001c 	add.w	r0, r7, #28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	f7ff ff93 	bl	8001c24 <LED_blink>
				break;
 8001cfe:	e007      	b.n	8001d10 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	8c39      	ldrh	r1, [r7, #32]
 8001d04:	2200      	movs	r2, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fa7c 	bl	8008204 <HAL_GPIO_WritePin>
		LED.count = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	461c      	mov	r4, r3
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d28:	b004      	add	sp, #16
 8001d2a:	4770      	bx	lr

08001d2c <LED_Tasks>:

void LED_Tasks (void){
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8001d32:	4c24      	ldr	r4, [pc, #144]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d34:	4638      	mov	r0, r7
 8001d36:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	f7ff ffba 	bl	8001cb6 <LED_Rutine>
 8001d42:	463b      	mov	r3, r7
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8001d4a:	4c1e      	ldr	r4, [pc, #120]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	3310      	adds	r3, #16
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	f7ff ffad 	bl	8001cb6 <LED_Rutine>
 8001d5c:	3410      	adds	r4, #16
 8001d5e:	463b      	mov	r3, r7
 8001d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001d66:	4c17      	ldr	r4, [pc, #92]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d68:	4638      	mov	r0, r7
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	3320      	adds	r3, #32
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	f7ff ff9f 	bl	8001cb6 <LED_Rutine>
 8001d78:	3420      	adds	r4, #32
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001d82:	4c10      	ldr	r4, [pc, #64]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d84:	4638      	mov	r0, r7
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	3330      	adds	r3, #48	@ 0x30
 8001d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d90:	f7ff ff91 	bl	8001cb6 <LED_Rutine>
 8001d94:	3430      	adds	r4, #48	@ 0x30
 8001d96:	463b      	mov	r3, r7
 8001d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001d9e:	4c09      	ldr	r4, [pc, #36]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da0:	4638      	mov	r0, r7
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da6:	9200      	str	r2, [sp, #0]
 8001da8:	3340      	adds	r3, #64	@ 0x40
 8001daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dac:	f7ff ff83 	bl	8001cb6 <LED_Rutine>
 8001db0:	3440      	adds	r4, #64	@ 0x40
 8001db2:	463b      	mov	r3, r7
 8001db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24000004 	.word	0x24000004

08001dc8 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dd8:	885a      	ldrh	r2, [r3, #2]
 8001dda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dde:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001de0:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <PWM_Assing+0xb0>)
 8001de2:	889a      	ldrh	r2, [r3, #4]
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <PWM_Assing+0xb4>)
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dea:	88da      	ldrh	r2, [r3, #6]
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <PWM_Assing+0xb4>)
 8001dee:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <PWM_Assing+0xb0>)
 8001df2:	891a      	ldrh	r2, [r3, #8]
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <PWM_Assing+0xb8>)
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dfa:	895a      	ldrh	r2, [r3, #10]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <PWM_Assing+0xb8>)
 8001dfe:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e02:	899a      	ldrh	r2, [r3, #12]
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e0a:	89da      	ldrh	r2, [r3, #14]
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e12:	8a1a      	ldrh	r2, [r3, #16]
 8001e14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e1c:	8a5a      	ldrh	r2, [r3, #18]
 8001e1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001e24:	2100      	movs	r1, #0
 8001e26:	4817      	ldr	r0, [pc, #92]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e28:	f00a fbe0 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4815      	ldr	r0, [pc, #84]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e30:	f00a fbdc 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e34:	2108      	movs	r1, #8
 8001e36:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e38:	f00a fbd8 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e40:	f00a fbd4 	bl	800c5ec <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e48:	f00a fbd0 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e50:	f00a fbcc 	bl	800c5ec <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e54:	2100      	movs	r1, #0
 8001e56:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e58:	f00a fbc8 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e60:	f00a fbc4 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001e64:	2108      	movs	r1, #8
 8001e66:	4809      	ldr	r0, [pc, #36]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e68:	f00a fbc0 	bl	800c5ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	4807      	ldr	r0, [pc, #28]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e70:	f00a fbbc 	bl	800c5ec <HAL_TIM_PWM_Start>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	24000054 	.word	0x24000054
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	240046b0 	.word	0x240046b0
 8001e88:	240046fc 	.word	0x240046fc
 8001e8c:	24004748 	.word	0x24004748

08001e90 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <SBUS_Receive+0x18>
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d017      	beq.n	8001ed6 <SBUS_Receive+0x46>
 8001ea6:	e02f      	b.n	8001f08 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	d10f      	bne.n	8001ece <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <SBUS_Receive+0x94>)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eca:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001ecc:	e021      	b.n	8001f12 <SBUS_Receive+0x82>
				RxCount = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			break;
 8001ed4:	e01d      	b.n	8001f12 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <SBUS_Receive+0x94>)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eec:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	d10c      	bne.n	8001f10 <SBUS_Receive+0x80>
				RxCount = 0;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001f02:	f000 f845 	bl	8001f90 <SBUS_getData>
			}
			break;
 8001f06:	e003      	b.n	8001f10 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			break;
 8001f0e:	e000      	b.n	8001f12 <SBUS_Receive+0x82>
			break;
 8001f10:	bf00      	nop
	}
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000356 	.word	0x24000356
 8001f20:	24000357 	.word	0x24000357
 8001f24:	2400033c 	.word	0x2400033c

08001f28 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f2e:	885a      	ldrh	r2, [r3, #2]
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f32:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f36:	889a      	ldrh	r2, [r3, #4]
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f3a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f3e:	88da      	ldrh	r2, [r3, #6]
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f42:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f46:	891a      	ldrh	r2, [r3, #8]
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f4a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f4e:	895a      	ldrh	r2, [r3, #10]
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f52:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f56:	899a      	ldrh	r2, [r3, #12]
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f5a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f5e:	89da      	ldrh	r2, [r3, #14]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f62:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f66:	8a1a      	ldrh	r2, [r3, #16]
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f6a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f6e:	8a5a      	ldrh	r2, [r3, #18]
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f72:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f76:	8a9a      	ldrh	r2, [r3, #20]
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f7a:	825a      	strh	r2, [r3, #18]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	24000068 	.word	0x24000068
 8001f8c:	24000054 	.word	0x24000054

08001f90 <SBUS_getData>:

void SBUS_getData(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001f94:	4b95      	ldr	r3, [pc, #596]	@ (80021ec <SBUS_getData+0x25c>)
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b94      	ldr	r3, [pc, #592]	@ (80021ec <SBUS_getData+0x25c>)
 8001f9c:	789b      	ldrb	r3, [r3, #2]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <SBUS_getData+0x260>)
 8001fb0:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <SBUS_getData+0x25c>)
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	4b8b      	ldr	r3, [pc, #556]	@ (80021ec <SBUS_getData+0x25c>)
 8001fbe:	78db      	ldrb	r3, [r3, #3]
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b87      	ldr	r3, [pc, #540]	@ (80021f0 <SBUS_getData+0x260>)
 8001fd2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001fd4:	4b85      	ldr	r3, [pc, #532]	@ (80021ec <SBUS_getData+0x25c>)
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b83      	ldr	r3, [pc, #524]	@ (80021ec <SBUS_getData+0x25c>)
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <SBUS_getData+0x25c>)
 8001fec:	795b      	ldrb	r3, [r3, #5]
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80021f0 <SBUS_getData+0x260>)
 8002000:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8002002:	4b7a      	ldr	r3, [pc, #488]	@ (80021ec <SBUS_getData+0x25c>)
 8002004:	795b      	ldrb	r3, [r3, #5]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	b21a      	sxth	r2, r3
 800200c:	4b77      	ldr	r3, [pc, #476]	@ (80021ec <SBUS_getData+0x25c>)
 800200e:	799b      	ldrb	r3, [r3, #6]
 8002010:	01db      	lsls	r3, r3, #7
 8002012:	b21b      	sxth	r3, r3
 8002014:	4313      	orrs	r3, r2
 8002016:	b21b      	sxth	r3, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b73      	ldr	r3, [pc, #460]	@ (80021f0 <SBUS_getData+0x260>)
 8002022:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8002024:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <SBUS_getData+0x25c>)
 8002026:	799b      	ldrb	r3, [r3, #6]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	b2db      	uxtb	r3, r3
 800202c:	b21a      	sxth	r2, r3
 800202e:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <SBUS_getData+0x25c>)
 8002030:	79db      	ldrb	r3, [r3, #7]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	b29b      	uxth	r3, r3
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <SBUS_getData+0x260>)
 8002044:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8002046:	4b69      	ldr	r3, [pc, #420]	@ (80021ec <SBUS_getData+0x25c>)
 8002048:	79db      	ldrb	r3, [r3, #7]
 800204a:	09db      	lsrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	b21a      	sxth	r2, r3
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <SBUS_getData+0x25c>)
 8002052:	7a1b      	ldrb	r3, [r3, #8]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b21b      	sxth	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <SBUS_getData+0x25c>)
 800205e:	7a5b      	ldrb	r3, [r3, #9]
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <SBUS_getData+0x260>)
 8002072:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8002074:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <SBUS_getData+0x25c>)
 8002076:	7a5b      	ldrb	r3, [r3, #9]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <SBUS_getData+0x25c>)
 8002080:	7a9b      	ldrb	r3, [r3, #10]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b21b      	sxth	r3, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b57      	ldr	r3, [pc, #348]	@ (80021f0 <SBUS_getData+0x260>)
 8002094:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8002096:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <SBUS_getData+0x25c>)
 8002098:	7a9b      	ldrb	r3, [r3, #10]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b52      	ldr	r3, [pc, #328]	@ (80021ec <SBUS_getData+0x25c>)
 80020a2:	7adb      	ldrb	r3, [r3, #11]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <SBUS_getData+0x260>)
 80020b6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <SBUS_getData+0x25c>)
 80020ba:	7b1b      	ldrb	r3, [r3, #12]
 80020bc:	b21a      	sxth	r2, r3
 80020be:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <SBUS_getData+0x25c>)
 80020c0:	7b5b      	ldrb	r3, [r3, #13]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <SBUS_getData+0x260>)
 80020d4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80020d6:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <SBUS_getData+0x25c>)
 80020d8:	7b5b      	ldrb	r3, [r3, #13]
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	b21a      	sxth	r2, r3
 80020e0:	4b42      	ldr	r3, [pc, #264]	@ (80021ec <SBUS_getData+0x25c>)
 80020e2:	7b9b      	ldrb	r3, [r3, #14]
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b3e      	ldr	r3, [pc, #248]	@ (80021f0 <SBUS_getData+0x260>)
 80020f6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80020f8:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <SBUS_getData+0x25c>)
 80020fa:	7b9b      	ldrb	r3, [r3, #14]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	b21a      	sxth	r2, r3
 8002102:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <SBUS_getData+0x25c>)
 8002104:	7bdb      	ldrb	r3, [r3, #15]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21a      	sxth	r2, r3
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <SBUS_getData+0x25c>)
 8002110:	7c1b      	ldrb	r3, [r3, #16]
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <SBUS_getData+0x260>)
 8002124:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <SBUS_getData+0x25c>)
 8002128:	7c1b      	ldrb	r3, [r3, #16]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <SBUS_getData+0x25c>)
 8002132:	7c5b      	ldrb	r3, [r3, #17]
 8002134:	01db      	lsls	r3, r3, #7
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29b      	uxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <SBUS_getData+0x260>)
 8002146:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <SBUS_getData+0x25c>)
 800214a:	7c5b      	ldrb	r3, [r3, #17]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <SBUS_getData+0x25c>)
 8002154:	7c9b      	ldrb	r3, [r3, #18]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <SBUS_getData+0x260>)
 8002168:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <SBUS_getData+0x25c>)
 800216c:	7c9b      	ldrb	r3, [r3, #18]
 800216e:	09db      	lsrs	r3, r3, #7
 8002170:	b2db      	uxtb	r3, r3
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <SBUS_getData+0x25c>)
 8002176:	7cdb      	ldrb	r3, [r3, #19]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <SBUS_getData+0x25c>)
 8002182:	7d1b      	ldrb	r3, [r3, #20]
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21b      	sxth	r3, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <SBUS_getData+0x260>)
 8002196:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <SBUS_getData+0x25c>)
 800219a:	7d1b      	ldrb	r3, [r3, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <SBUS_getData+0x25c>)
 80021a4:	7d5b      	ldrb	r3, [r3, #21]
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <SBUS_getData+0x260>)
 80021b8:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <SBUS_getData+0x25c>)
 80021bc:	7d5b      	ldrb	r3, [r3, #21]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <SBUS_getData+0x25c>)
 80021c6:	7d9b      	ldrb	r3, [r3, #22]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <SBUS_getData+0x260>)
 80021da:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80021dc:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <SBUS_getData+0x260>)
 80021de:	885b      	ldrh	r3, [r3, #2]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e8:	e00a      	b.n	8002200 <SBUS_getData+0x270>
 80021ea:	bf00      	nop
 80021ec:	2400033c 	.word	0x2400033c
 80021f0:	24000068 	.word	0x24000068
 80021f4:	43b00000 	.word	0x43b00000
 80021f8:	44a80000 	.word	0x44a80000
 80021fc:	447a0000 	.word	0x447a0000
 8002200:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80021f4 <SBUS_getData+0x264>
 8002204:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002208:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80021f8 <SBUS_getData+0x268>
 800220c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002210:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80021fc <SBUS_getData+0x26c>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	b29b      	uxth	r3, r3
 8002222:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002226:	b29a      	uxth	r2, r3
 8002228:	4bd1      	ldr	r3, [pc, #836]	@ (8002570 <SBUS_getData+0x5e0>)
 800222a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800222c:	4bd0      	ldr	r3, [pc, #832]	@ (8002570 <SBUS_getData+0x5e0>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002238:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002574 <SBUS_getData+0x5e4>
 800223c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002240:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002578 <SBUS_getData+0x5e8>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800257c <SBUS_getData+0x5ec>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002254:	ee17 3a90 	vmov	r3, s15
 8002258:	b29b      	uxth	r3, r3
 800225a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800225e:	b29a      	uxth	r2, r3
 8002260:	4bc3      	ldr	r3, [pc, #780]	@ (8002570 <SBUS_getData+0x5e0>)
 8002262:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8002264:	4bc2      	ldr	r3, [pc, #776]	@ (8002570 <SBUS_getData+0x5e0>)
 8002266:	88db      	ldrh	r3, [r3, #6]
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002270:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002574 <SBUS_getData+0x5e4>
 8002274:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002278:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002578 <SBUS_getData+0x5e8>
 800227c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002280:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800257c <SBUS_getData+0x5ec>
 8002284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	b29b      	uxth	r3, r3
 8002292:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002296:	b29a      	uxth	r2, r3
 8002298:	4bb5      	ldr	r3, [pc, #724]	@ (8002570 <SBUS_getData+0x5e0>)
 800229a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800229c:	4bb4      	ldr	r3, [pc, #720]	@ (8002570 <SBUS_getData+0x5e0>)
 800229e:	891b      	ldrh	r3, [r3, #8]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002574 <SBUS_getData+0x5e4>
 80022ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022b0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002578 <SBUS_getData+0x5e8>
 80022b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800257c <SBUS_getData+0x5ec>
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c4:	ee17 3a90 	vmov	r3, s15
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002570 <SBUS_getData+0x5e0>)
 80022d2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80022d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002570 <SBUS_getData+0x5e0>)
 80022d6:	895b      	ldrh	r3, [r3, #10]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002574 <SBUS_getData+0x5e4>
 80022e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022e8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002578 <SBUS_getData+0x5e8>
 80022ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800257c <SBUS_getData+0x5ec>
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	b29b      	uxth	r3, r3
 8002302:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <SBUS_getData+0x5e0>)
 800230a:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 800230c:	4b98      	ldr	r3, [pc, #608]	@ (8002570 <SBUS_getData+0x5e0>)
 800230e:	899b      	ldrh	r3, [r3, #12]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002574 <SBUS_getData+0x5e4>
 800231c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002320:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002578 <SBUS_getData+0x5e8>
 8002324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002328:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800257c <SBUS_getData+0x5ec>
 800232c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002334:	ee17 3a90 	vmov	r3, s15
 8002338:	b29b      	uxth	r3, r3
 800233a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b8b      	ldr	r3, [pc, #556]	@ (8002570 <SBUS_getData+0x5e0>)
 8002342:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8002344:	4b8a      	ldr	r3, [pc, #552]	@ (8002570 <SBUS_getData+0x5e0>)
 8002346:	89db      	ldrh	r3, [r3, #14]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002350:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002574 <SBUS_getData+0x5e4>
 8002354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002358:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002578 <SBUS_getData+0x5e8>
 800235c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002360:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800257c <SBUS_getData+0x5ec>
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236c:	ee17 3a90 	vmov	r3, s15
 8002370:	b29b      	uxth	r3, r3
 8002372:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <SBUS_getData+0x5e0>)
 800237a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800237c:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <SBUS_getData+0x5e0>)
 800237e:	8a1b      	ldrh	r3, [r3, #16]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002388:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002574 <SBUS_getData+0x5e4>
 800238c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002390:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002578 <SBUS_getData+0x5e8>
 8002394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002398:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800257c <SBUS_getData+0x5ec>
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <SBUS_getData+0x5e0>)
 80023b2:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80023b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002570 <SBUS_getData+0x5e0>)
 80023b6:	8a5b      	ldrh	r3, [r3, #18]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002574 <SBUS_getData+0x5e4>
 80023c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023c8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002578 <SBUS_getData+0x5e8>
 80023cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800257c <SBUS_getData+0x5ec>
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b61      	ldr	r3, [pc, #388]	@ (8002570 <SBUS_getData+0x5e0>)
 80023ea:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80023ec:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <SBUS_getData+0x5e0>)
 80023ee:	8a9b      	ldrh	r3, [r3, #20]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002574 <SBUS_getData+0x5e4>
 80023fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002400:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002578 <SBUS_getData+0x5e8>
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800257c <SBUS_getData+0x5ec>
 800240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	b29b      	uxth	r3, r3
 800241a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <SBUS_getData+0x5e0>)
 8002422:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8002424:	4b52      	ldr	r3, [pc, #328]	@ (8002570 <SBUS_getData+0x5e0>)
 8002426:	8adb      	ldrh	r3, [r3, #22]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002430:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002574 <SBUS_getData+0x5e4>
 8002434:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002438:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002578 <SBUS_getData+0x5e8>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800257c <SBUS_getData+0x5ec>
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	b29b      	uxth	r3, r3
 8002452:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <SBUS_getData+0x5e0>)
 800245a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <SBUS_getData+0x5e0>)
 800245e:	8b1b      	ldrh	r3, [r3, #24]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002574 <SBUS_getData+0x5e4>
 800246c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002470:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002578 <SBUS_getData+0x5e8>
 8002474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002478:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800257c <SBUS_getData+0x5ec>
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002484:	ee17 3a90 	vmov	r3, s15
 8002488:	b29b      	uxth	r3, r3
 800248a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <SBUS_getData+0x5e0>)
 8002492:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <SBUS_getData+0x5e0>)
 8002496:	8b5b      	ldrh	r3, [r3, #26]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002574 <SBUS_getData+0x5e4>
 80024a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024a8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002578 <SBUS_getData+0x5e8>
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800257c <SBUS_getData+0x5ec>
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <SBUS_getData+0x5e0>)
 80024ca:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <SBUS_getData+0x5e0>)
 80024ce:	8b9b      	ldrh	r3, [r3, #28]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002574 <SBUS_getData+0x5e4>
 80024dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024e0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002578 <SBUS_getData+0x5e8>
 80024e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800257c <SBUS_getData+0x5ec>
 80024ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <SBUS_getData+0x5e0>)
 8002502:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <SBUS_getData+0x5e0>)
 8002506:	8bdb      	ldrh	r3, [r3, #30]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002574 <SBUS_getData+0x5e4>
 8002514:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002518:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002578 <SBUS_getData+0x5e8>
 800251c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002520:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800257c <SBUS_getData+0x5ec>
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	ee17 3a90 	vmov	r3, s15
 8002530:	b29b      	uxth	r3, r3
 8002532:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <SBUS_getData+0x5e0>)
 800253a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <SBUS_getData+0x5e0>)
 800253e:	8c1b      	ldrh	r3, [r3, #32]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002548:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002574 <SBUS_getData+0x5e4>
 800254c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002550:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002578 <SBUS_getData+0x5e8>
 8002554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002558:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800257c <SBUS_getData+0x5ec>
 800255c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002564:	ee17 3a90 	vmov	r3, s15
 8002568:	b29b      	uxth	r3, r3
 800256a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800256e:	e007      	b.n	8002580 <SBUS_getData+0x5f0>
 8002570:	24000068 	.word	0x24000068
 8002574:	43b00000 	.word	0x43b00000
 8002578:	44a80000 	.word	0x44a80000
 800257c:	447a0000 	.word	0x447a0000
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <SBUS_getData+0x69c>)
 8002584:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <SBUS_getData+0x6a0>)
 8002588:	7dda      	ldrb	r2, [r3, #23]
 800258a:	4b28      	ldr	r3, [pc, #160]	@ (800262c <SBUS_getData+0x69c>)
 800258c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 800258e:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <SBUS_getData+0x6a0>)
 8002590:	7ddb      	ldrb	r3, [r3, #23]
 8002592:	2b07      	cmp	r3, #7
 8002594:	d90a      	bls.n	80025ac <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002596:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <SBUS_getData+0x6a0>)
 8002598:	7ddb      	ldrb	r3, [r3, #23]
 800259a:	3b08      	subs	r3, #8
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <SBUS_getData+0x6a0>)
 80025a0:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <SBUS_getData+0x69c>)
 80025a4:	2235      	movs	r2, #53	@ 0x35
 80025a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80025aa:	e003      	b.n	80025b4 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <SBUS_getData+0x69c>)
 80025ae:	22aa      	movs	r2, #170	@ 0xaa
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <SBUS_getData+0x6a0>)
 80025b6:	7ddb      	ldrb	r3, [r3, #23]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d90a      	bls.n	80025d2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <SBUS_getData+0x6a0>)
 80025be:	7ddb      	ldrb	r3, [r3, #23]
 80025c0:	3b04      	subs	r3, #4
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <SBUS_getData+0x6a0>)
 80025c6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <SBUS_getData+0x69c>)
 80025ca:	2210      	movs	r2, #16
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025d0:	e003      	b.n	80025da <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <SBUS_getData+0x69c>)
 80025d4:	22aa      	movs	r2, #170	@ 0xaa
 80025d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <SBUS_getData+0x6a0>)
 80025dc:	7ddb      	ldrb	r3, [r3, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d90a      	bls.n	80025f8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <SBUS_getData+0x6a0>)
 80025e4:	7ddb      	ldrb	r3, [r3, #23]
 80025e6:	3b02      	subs	r3, #2
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <SBUS_getData+0x6a0>)
 80025ec:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <SBUS_getData+0x69c>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80025f6:	e003      	b.n	8002600 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <SBUS_getData+0x69c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <SBUS_getData+0x6a0>)
 8002602:	7ddb      	ldrb	r3, [r3, #23]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <SBUS_getData+0x69c>)
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002610:	e003      	b.n	800261a <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <SBUS_getData+0x69c>)
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <SBUS_getData+0x69c>)
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002622:	f7ff fc81 	bl	8001f28 <Temp_BypassFunct>

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	24000068 	.word	0x24000068
 8002630:	2400033c 	.word	0x2400033c

08002634 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800263a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800263e:	2bff      	cmp	r3, #255	@ 0xff
 8002640:	d00c      	beq.n	800265c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002644:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800264e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002654:	22aa      	movs	r2, #170	@ 0xaa
 8002656:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800265a:	e007      	b.n	800266c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002666:	2235      	movs	r2, #53	@ 0x35
 8002668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24000068 	.word	0x24000068

0800267c <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 800268c:	2300      	movs	r3, #0
 800268e:	73bb      	strb	r3, [r7, #14]
 8002690:	e011      	b.n	80026b6 <ASCII2uint8+0x3a>
		inter *= 10;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	461a      	mov	r2, r3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4413      	add	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 800269e:	7bbb      	ldrb	r3, [r7, #14]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	4413      	add	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3b30      	subs	r3, #48	@ 0x30
 80026ae:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73bb      	strb	r3, [r7, #14]
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3e9      	bcc.n	8002692 <ASCII2uint8+0x16>
	}
	return inter;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <uint82ASCII+0xac>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	4a20      	ldr	r2, [pc, #128]	@ (800277c <uint82ASCII+0xb0>)
 80026fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002700:	1092      	asrs	r2, r2, #2
 8002702:	17db      	asrs	r3, r3, #31
 8002704:	1ad2      	subs	r2, r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	441a      	add	r2, r3
 8002718:	00d2      	lsls	r2, r2, #3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	b2da      	uxtb	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	0149      	lsls	r1, r1, #5
 800272a:	1ac9      	subs	r1, r1, r3
 800272c:	0089      	lsls	r1, r1, #2
 800272e:	1acb      	subs	r3, r1, r3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4413      	add	r3, r2
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3302      	adds	r3, #2
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	440a      	add	r2, r1
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e00c      	b.n	8002764 <uint82ASCII+0x98>
		Output[n] +=48;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	440b      	add	r3, r1
 8002758:	3230      	adds	r2, #48	@ 0x30
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	3301      	adds	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d9ef      	bls.n	800274a <uint82ASCII+0x7e>
	}
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	51eb851f 	.word	0x51eb851f
 800277c:	66666667 	.word	0x66666667

08002780 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002784:	480c      	ldr	r0, [pc, #48]	@ (80027b8 <ConfigFile_Create+0x38>)
 8002786:	f011 fa5c 	bl	8013c42 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800278a:	2213      	movs	r2, #19
 800278c:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <ConfigFile_Create+0x38>)
 800278e:	480b      	ldr	r0, [pc, #44]	@ (80027bc <ConfigFile_Create+0x3c>)
 8002790:	f010 fa86 	bl	8012ca0 <f_open>

	f_printf(&Config, "Version: ");
 8002794:	490a      	ldr	r1, [pc, #40]	@ (80027c0 <ConfigFile_Create+0x40>)
 8002796:	4809      	ldr	r0, [pc, #36]	@ (80027bc <ConfigFile_Create+0x3c>)
 8002798:	f011 fca6 	bl	80140e8 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 800279c:	4909      	ldr	r1, [pc, #36]	@ (80027c4 <ConfigFile_Create+0x44>)
 800279e:	4807      	ldr	r0, [pc, #28]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027a0:	f011 fca2 	bl	80140e8 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 80027a4:	4908      	ldr	r1, [pc, #32]	@ (80027c8 <ConfigFile_Create+0x48>)
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027a8:	f011 fc9e 	bl	80140e8 <f_printf>
	f_close(&Config);
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027ae:	f010 ffb0 	bl	8013712 <f_close>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	240000b0 	.word	0x240000b0
 80027bc:	240023c4 	.word	0x240023c4
 80027c0:	08014a58 	.word	0x08014a58
 80027c4:	24000090 	.word	0x24000090
 80027c8:	08014a64 	.word	0x08014a64

080027cc <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	2300      	movs	r3, #0
 80027d8:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80027da:	2213      	movs	r2, #19
 80027dc:	492b      	ldr	r1, [pc, #172]	@ (800288c <SD_ConfigFileInit+0xc0>)
 80027de:	482c      	ldr	r0, [pc, #176]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027e0:	f010 fa5e 	bl	8012ca0 <f_open>

	f_lseek(&Config, Config_FWVersion);
 80027e4:	2109      	movs	r1, #9
 80027e6:	482a      	ldr	r0, [pc, #168]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027e8:	f011 f807 	bl	80137fa <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 80027ec:	4639      	mov	r1, r7
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <SD_ConfigFileInit+0xc8>)
 80027f0:	2205      	movs	r2, #5
 80027f2:	4827      	ldr	r0, [pc, #156]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027f4:	f010 fc1c 	bl	8013030 <f_read>

	f_close(&Config);
 80027f8:	4825      	ldr	r0, [pc, #148]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027fa:	f010 ff8a 	bl	8013712 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	e010      	b.n	8002826 <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	3308      	adds	r3, #8
 8002808:	443b      	add	r3, r7
 800280a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4921      	ldr	r1, [pc, #132]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	429a      	cmp	r2, r3
 8002816:	d003      	beq.n	8002820 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002818:	f7ff ffb2 	bl	8002780 <ConfigFile_Create>
			n = 5;
 800281c:	2305      	movs	r3, #5
 800281e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	3301      	adds	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d9eb      	bls.n	8002804 <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800282c:	2213      	movs	r2, #19
 800282e:	4917      	ldr	r1, [pc, #92]	@ (800288c <SD_ConfigFileInit+0xc0>)
 8002830:	4817      	ldr	r0, [pc, #92]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002832:	f010 fa35 	bl	8012ca0 <f_open>

	f_lseek(&Config, 26);
 8002836:	211a      	movs	r1, #26
 8002838:	4815      	ldr	r0, [pc, #84]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800283a:	f010 ffde 	bl	80137fa <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <SD_ConfigFileInit+0xc8>)
 8002840:	2203      	movs	r2, #3
 8002842:	4916      	ldr	r1, [pc, #88]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002844:	4812      	ldr	r0, [pc, #72]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002846:	f010 fbf3 	bl	8013030 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 800284a:	2103      	movs	r1, #3
 800284c:	4813      	ldr	r0, [pc, #76]	@ (800289c <SD_ConfigFileInit+0xd0>)
 800284e:	f7ff ff15 	bl	800267c <ASCII2uint8>
 8002852:	4603      	mov	r3, r0
 8002854:	3301      	adds	r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 800285a:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 800285e:	795b      	ldrb	r3, [r3, #5]
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff32 	bl	80026cc <uint82ASCII>

	f_lseek(&Config, 26);
 8002868:	211a      	movs	r1, #26
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800286c:	f010 ffc5 	bl	80137fa <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <SD_ConfigFileInit+0xd4>)
 8002872:	2203      	movs	r2, #3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002878:	f010 fd39 	bl	80132ee <f_write>

	f_close(&Config);
 800287c:	4804      	ldr	r0, [pc, #16]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800287e:	f010 ff48 	bl	8013712 <f_close>

}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	240000b0 	.word	0x240000b0
 8002890:	240023c4 	.word	0x240023c4
 8002894:	240033f8 	.word	0x240033f8
 8002898:	24000090 	.word	0x24000090
 800289c:	240000bc 	.word	0x240000bc
 80028a0:	240033fc 	.word	0x240033fc

080028a4 <SD_GainsInit>:

void SD_GainsInit(void){
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0

}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 80028b8:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028be:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028c2:	785a      	ldrb	r2, [r3, #1]
 80028c4:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028c6:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028ca:	789a      	ldrb	r2, [r3, #2]
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028ce:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028d2:	f011 fa77 	bl	8013dc4 <f_mkdir>
	f_chdir(FlightPaht);
 80028d6:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028d8:	f010 ff45 	bl	8013766 <f_chdir>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	240000bc 	.word	0x240000bc
 80028e4:	24000098 	.word	0x24000098

080028e8 <SD_blackbox_init>:

void SD_blackbox_init(void){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80028ec:	2213      	movs	r2, #19
 80028ee:	4903      	ldr	r1, [pc, #12]	@ (80028fc <SD_blackbox_init+0x14>)
 80028f0:	4803      	ldr	r0, [pc, #12]	@ (8002900 <SD_blackbox_init+0x18>)
 80028f2:	f010 f9d5 	bl	8012ca0 <f_open>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	240000a4 	.word	0x240000a4
 8002900:	24001394 	.word	0x24001394

08002904 <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002908:	4b7e      	ldr	r3, [pc, #504]	@ (8002b04 <SD_blackbox_refresh+0x200>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7e      	ldr	r2, [pc, #504]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 800290e:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002910:	4b7e      	ldr	r3, [pc, #504]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 8002912:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002916:	497c      	ldr	r1, [pc, #496]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002918:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 800291c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 800291e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002922:	4979      	ldr	r1, [pc, #484]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002924:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002928:	4b78      	ldr	r3, [pc, #480]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 800292a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800292e:	4976      	ldr	r1, [pc, #472]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002930:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002934:	4b75      	ldr	r3, [pc, #468]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 8002936:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800293a:	4973      	ldr	r1, [pc, #460]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 800293c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002940:	4b72      	ldr	r3, [pc, #456]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 8002942:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002946:	4970      	ldr	r1, [pc, #448]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002948:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 800294c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 800294e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002952:	496d      	ldr	r1, [pc, #436]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002954:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002958:	496b      	ldr	r1, [pc, #428]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002966:	4968      	ldr	r1, [pc, #416]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002974:	4964      	ldr	r1, [pc, #400]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002982:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 8002984:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002988:	495f      	ldr	r1, [pc, #380]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 800298a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 800298e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 8002990:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002994:	495c      	ldr	r1, [pc, #368]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002996:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 800299a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b0c <SD_blackbox_refresh+0x208>)
 800299c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80029a0:	4959      	ldr	r1, [pc, #356]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80029a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b10 <SD_blackbox_refresh+0x20c>)
 80029a8:	8a1a      	ldrh	r2, [r3, #16]
 80029aa:	4b57      	ldr	r3, [pc, #348]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029ac:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 80029b0:	4b55      	ldr	r3, [pc, #340]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 80029b6:	4b54      	ldr	r3, [pc, #336]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 80029bc:	4b52      	ldr	r3, [pc, #328]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 80029c4:	4b52      	ldr	r3, [pc, #328]	@ (8002b10 <SD_blackbox_refresh+0x20c>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80029cc:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029d2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 80029d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 80029de:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 80029e0:	885a      	ldrh	r2, [r3, #2]
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029e4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 80029e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 80029ea:	889a      	ldrh	r2, [r3, #4]
 80029ec:	4b46      	ldr	r3, [pc, #280]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029ee:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 80029f2:	4b48      	ldr	r3, [pc, #288]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 80029f4:	88da      	ldrh	r2, [r3, #6]
 80029f6:	4b44      	ldr	r3, [pc, #272]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 80029f8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 80029fe:	891a      	ldrh	r2, [r3, #8]
 8002a00:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a02:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002a06:	4b43      	ldr	r3, [pc, #268]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a08:	895a      	ldrh	r2, [r3, #10]
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a0c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002a10:	4b40      	ldr	r3, [pc, #256]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a12:	899a      	ldrh	r2, [r3, #12]
 8002a14:	4b3c      	ldr	r3, [pc, #240]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a16:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a1c:	89da      	ldrh	r2, [r3, #14]
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a20:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a26:	8a1a      	ldrh	r2, [r3, #16]
 8002a28:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a2a:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002a2e:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a30:	8a5a      	ldrh	r2, [r3, #18]
 8002a32:	4b35      	ldr	r3, [pc, #212]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a34:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a3a:	8a9a      	ldrh	r2, [r3, #20]
 8002a3c:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a3e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002a42:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a44:	8ada      	ldrh	r2, [r3, #22]
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a48:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a4e:	8b1a      	ldrh	r2, [r3, #24]
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a52:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002a56:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a58:	8b5a      	ldrh	r2, [r3, #26]
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a5c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a62:	8b9a      	ldrh	r2, [r3, #28]
 8002a64:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a66:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a6c:	8bda      	ldrh	r2, [r3, #30]
 8002a6e:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a70:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002a74:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a76:	8c1a      	ldrh	r2, [r3, #32]
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a7a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002a7e:	4b25      	ldr	r3, [pc, #148]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a80:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002a84:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a86:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <SD_blackbox_refresh+0x210>)
 8002a8c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002a90:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a92:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002a96:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002a9c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002aa2:	885a      	ldrh	r2, [r3, #2]
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002aa6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002aac:	889a      	ldrh	r2, [r3, #4]
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002ab0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002ab6:	88da      	ldrh	r2, [r3, #6]
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002aba:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002abe:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002ac0:	891a      	ldrh	r2, [r3, #8]
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002ac4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002aca:	895a      	ldrh	r2, [r3, #10]
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002ace:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002ad4:	899a      	ldrh	r2, [r3, #12]
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002ad8:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002ade:	89da      	ldrh	r2, [r3, #14]
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002ae2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002ae8:	8a1a      	ldrh	r2, [r3, #16]
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002aec:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <SD_blackbox_refresh+0x214>)
 8002af2:	8a5a      	ldrh	r2, [r3, #18]
 8002af4:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <SD_blackbox_refresh+0x204>)
 8002af6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	2400459c 	.word	0x2400459c
 8002b08:	240043f0 	.word	0x240043f0
 8002b0c:	24000298 	.word	0x24000298
 8002b10:	24000154 	.word	0x24000154
 8002b14:	24000068 	.word	0x24000068
 8002b18:	24000054 	.word	0x24000054

08002b1c <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8002b22:	f7ff feef 	bl	8002904 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <SD_blackbox_write+0xa4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <SD_blackbox_write+0xa8>)
 8002b2c:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8002b2e:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <SD_blackbox_write+0xac>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4613      	mov	r3, r2
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <SD_blackbox_write+0xb0>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	22b0      	movs	r2, #176	@ 0xb0
 8002b40:	4920      	ldr	r1, [pc, #128]	@ (8002bc4 <SD_blackbox_write+0xa8>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f011 fe42 	bl	80147cc <memcpy>

	if(WriteCount == 15){
 8002b48:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <SD_blackbox_write+0xac>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d129      	bne.n	8002ba4 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	e00d      	b.n	8002b72 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <SD_blackbox_write+0xb0>)
 8002b60:	1899      	adds	r1, r3, r2
 8002b62:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <SD_blackbox_write+0xb4>)
 8002b64:	22b0      	movs	r2, #176	@ 0xb0
 8002b66:	481b      	ldr	r0, [pc, #108]	@ (8002bd4 <SD_blackbox_write+0xb8>)
 8002b68:	f010 fbc1 	bl	80132ee <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d9ee      	bls.n	8002b56 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8002b78:	4816      	ldr	r0, [pc, #88]	@ (8002bd4 <SD_blackbox_write+0xb8>)
 8002b7a:	f010 fd4c 	bl	8013616 <f_sync>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <SD_blackbox_write+0xbc>)
 8002b84:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <SD_blackbox_write+0xac>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <SD_blackbox_write+0xc0>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <SD_blackbox_write+0xc0>)
 8002b96:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <SD_blackbox_write+0xa4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4a08      	ldr	r2, [pc, #32]	@ (8002bc0 <SD_blackbox_write+0xa4>)
 8002ba0:	6013      	str	r3, [r2, #0]
		return;
 8002ba2:	e00a      	b.n	8002bba <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8002ba4:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <SD_blackbox_write+0xac>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <SD_blackbox_write+0xac>)
 8002bae:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <SD_blackbox_write+0xa4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a02      	ldr	r2, [pc, #8]	@ (8002bc0 <SD_blackbox_write+0xa4>)
 8002bb8:	6013      	str	r3, [r2, #0]
}
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	240044a0 	.word	0x240044a0
 8002bc4:	240043f0 	.word	0x240043f0
 8002bc8:	240044a4 	.word	0x240044a4
 8002bcc:	24003400 	.word	0x24003400
 8002bd0:	240033fc 	.word	0x240033fc
 8002bd4:	24001394 	.word	0x24001394
 8002bd8:	240033f4 	.word	0x240033f4
 8002bdc:	240044a6 	.word	0x240044a6

08002be0 <SD_init>:


void SD_init(void){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8002be4:	2201      	movs	r2, #1
 8002be6:	4909      	ldr	r1, [pc, #36]	@ (8002c0c <SD_init+0x2c>)
 8002be8:	4809      	ldr	r0, [pc, #36]	@ (8002c10 <SD_init+0x30>)
 8002bea:	f010 f813 	bl	8012c14 <f_mount>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <SD_init+0x34>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 8002bf6:	f7ff fde9 	bl	80027cc <SD_ConfigFileInit>
	  SD_GainsInit();
 8002bfa:	f7ff fe53 	bl	80028a4 <SD_GainsInit>
	  SD_CreateFlightPath();
 8002bfe:	f7ff fe59 	bl	80028b4 <SD_CreateFlightPath>
	  SD_blackbox_init();
 8002c02:	f7ff fe71 	bl	80028e8 <SD_blackbox_init>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08014a74 	.word	0x08014a74
 8002c10:	24000358 	.word	0x24000358
 8002c14:	240033f4 	.word	0x240033f4

08002c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <MX_DMA_Init+0x4c>)
 8002c20:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002c24:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <MX_DMA_Init+0x4c>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <MX_DMA_Init+0x4c>)
 8002c30:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	200b      	movs	r0, #11
 8002c42:	f001 fe40 	bl	80048c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c46:	200b      	movs	r0, #11
 8002c48:	f001 fe57 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	200c      	movs	r0, #12
 8002c52:	f001 fe38 	bl	80048c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c56:	200c      	movs	r0, #12
 8002c58:	f001 fe4f 	bl	80048fa <HAL_NVIC_EnableIRQ>

}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	58024400 	.word	0x58024400

08002c68 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d2c <MX_FDCAN1_Init+0xc4>)
 8002c70:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002c8a:	4b27      	ldr	r3, [pc, #156]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c92:	2210      	movs	r2, #16
 8002c94:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002ca2:	4b21      	ldr	r3, [pc, #132]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002cae:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cda:	2204      	movs	r2, #4
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002d08:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002d10:	2204      	movs	r2, #4
 8002d12:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002d14:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <MX_FDCAN1_Init+0xc0>)
 8002d16:	f004 fd61 	bl	80077dc <HAL_FDCAN_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8002d20:	f000 fb46 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	240044a8 	.word	0x240044a8
 8002d2c:	4000a000 	.word	0x4000a000

08002d30 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	@ 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	22c0      	movs	r2, #192	@ 0xc0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f011 fd09 	bl	8014768 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e18 <HAL_FDCAN_MspInit+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d157      	bne.n	8002e10 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8002d70:	2308      	movs	r3, #8
 8002d72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002d74:	2302      	movs	r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002d80:	23c0      	movs	r3, #192	@ 0xc0
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002d8c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f006 fb79 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002da4:	f000 fb04 	bl	80033b0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002da8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002daa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002dae:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002db8:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002dba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dcc:	4a13      	ldr	r2, [pc, #76]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_FDCAN_MspInit+0xec>)
 8002dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002de4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002de8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002dfe:	2309      	movs	r3, #9
 8002e00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <HAL_FDCAN_MspInit+0xf0>)
 8002e0c:	f005 f84a 	bl	8007ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002e10:	bf00      	nop
 8002e12:	37e8      	adds	r7, #232	@ 0xe8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	4000a000 	.word	0x4000a000
 8002e1c:	58024400 	.word	0x58024400
 8002e20:	58020000 	.word	0x58020000

08002e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e40:	4a4c      	ldr	r2, [pc, #304]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e5e:	4a45      	ldr	r2, [pc, #276]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e68:	4b42      	ldr	r3, [pc, #264]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e94:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e9a:	4a36      	ldr	r2, [pc, #216]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002ea4:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <MX_GPIO_Init+0x150>)
 8002ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002eb8:	482f      	ldr	r0, [pc, #188]	@ (8002f78 <MX_GPIO_Init+0x154>)
 8002eba:	f005 f9a3 	bl	8008204 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	482e      	ldr	r0, [pc, #184]	@ (8002f7c <MX_GPIO_Init+0x158>)
 8002ec4:	f005 f99e 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002ece:	482c      	ldr	r0, [pc, #176]	@ (8002f80 <MX_GPIO_Init+0x15c>)
 8002ed0:	f005 f998 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	482a      	ldr	r0, [pc, #168]	@ (8002f84 <MX_GPIO_Init+0x160>)
 8002eda:	f005 f993 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002ede:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002ee2:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4820      	ldr	r0, [pc, #128]	@ (8002f78 <MX_GPIO_Init+0x154>)
 8002ef8:	f004 ffd4 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002efc:	2310      	movs	r3, #16
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	481a      	ldr	r0, [pc, #104]	@ (8002f7c <MX_GPIO_Init+0x158>)
 8002f14:	f004 ffc6 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002f18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4813      	ldr	r0, [pc, #76]	@ (8002f80 <MX_GPIO_Init+0x15c>)
 8002f32:	f004 ffb7 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	480b      	ldr	r0, [pc, #44]	@ (8002f78 <MX_GPIO_Init+0x154>)
 8002f4c:	f004 ffaa 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8002f50:	2304      	movs	r3, #4
 8002f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4807      	ldr	r0, [pc, #28]	@ (8002f84 <MX_GPIO_Init+0x160>)
 8002f68:	f004 ff9c 	bl	8007ea4 <HAL_GPIO_Init>

}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	@ 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58020800 	.word	0x58020800
 8002f7c:	58020000 	.word	0x58020000
 8002f80:	58020400 	.word	0x58020400
 8002f84:	58020c00 	.word	0x58020c00

08002f88 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <MX_I2C3_Init+0x78>)
 8002f90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002f94:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <MX_I2C3_Init+0x7c>)
 8002f96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002f98:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa4:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002faa:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002fc2:	480e      	ldr	r0, [pc, #56]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fc4:	f005 f938 	bl	8008238 <HAL_I2C_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002fce:	f000 f9ef 	bl	80033b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4809      	ldr	r0, [pc, #36]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fd6:	f005 f9cb 	bl	8008370 <HAL_I2CEx_ConfigAnalogFilter>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002fe0:	f000 f9e6 	bl	80033b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_I2C3_Init+0x74>)
 8002fe8:	f005 fa0d 	bl	8008406 <HAL_I2CEx_ConfigDigitalFilter>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002ff2:	f000 f9dd 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	24004548 	.word	0x24004548
 8003000:	40005c00 	.word	0x40005c00
 8003004:	20b0ccff 	.word	0x20b0ccff

08003008 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0bc      	sub	sp, #240	@ 0xf0
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	22c0      	movs	r2, #192	@ 0xc0
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f011 fb9d 	bl	8014768 <memset>
  if(i2cHandle->Instance==I2C3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a39      	ldr	r2, [pc, #228]	@ (8003118 <HAL_I2C_MspInit+0x110>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d16b      	bne.n	8003110 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003038:	f04f 0208 	mov.w	r2, #8
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304a:	f107 0318 	add.w	r3, r7, #24
 800304e:	4618      	mov	r0, r3
 8003050:	f006 fa1e 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800305a:	f000 f9a9 	bl	80033b0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <HAL_I2C_MspInit+0x114>)
 8003060:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003064:	4a2d      	ldr	r2, [pc, #180]	@ (800311c <HAL_I2C_MspInit+0x114>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800306e:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <HAL_I2C_MspInit+0x114>)
 8003070:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_I2C_MspInit+0x114>)
 800307e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003082:	4a26      	ldr	r2, [pc, #152]	@ (800311c <HAL_I2C_MspInit+0x114>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_I2C_MspInit+0x114>)
 800308e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800309a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800309e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030a2:	2312      	movs	r3, #18
 80030a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030b4:	2304      	movs	r3, #4
 80030b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030be:	4619      	mov	r1, r3
 80030c0:	4817      	ldr	r0, [pc, #92]	@ (8003120 <HAL_I2C_MspInit+0x118>)
 80030c2:	f004 feef 	bl	8007ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ce:	2312      	movs	r3, #18
 80030d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030e0:	2304      	movs	r3, #4
 80030e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030ea:	4619      	mov	r1, r3
 80030ec:	480d      	ldr	r0, [pc, #52]	@ (8003124 <HAL_I2C_MspInit+0x11c>)
 80030ee:	f004 fed9 	bl	8007ea4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_I2C_MspInit+0x114>)
 80030f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030f8:	4a08      	ldr	r2, [pc, #32]	@ (800311c <HAL_I2C_MspInit+0x114>)
 80030fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030fe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_I2C_MspInit+0x114>)
 8003104:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003110:	bf00      	nop
 8003112:	37f0      	adds	r7, #240	@ 0xf0
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40005c00 	.word	0x40005c00
 800311c:	58024400 	.word	0x58024400
 8003120:	58020800 	.word	0x58020800
 8003124:	58020000 	.word	0x58020000

08003128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800312c:	f000 f914 	bl	8003358 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003130:	f001 fa5c 	bl	80045ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003134:	f000 f83c 	bl	80031b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003138:	f7ff fe74 	bl	8002e24 <MX_GPIO_Init>
  MX_DMA_Init();
 800313c:	f7ff fd6c 	bl	8002c18 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003140:	f7ff fd92 	bl	8002c68 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003144:	f7ff ff20 	bl	8002f88 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003148:	f000 f938 	bl	80033bc <MX_SPI1_Init>
  MX_SPI2_Init();
 800314c:	f000 f98c 	bl	8003468 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003150:	f000 fbb8 	bl	80038c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003154:	f000 fc32 	bl	80039bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003158:	f000 fc96 	bl	8003a88 <MX_TIM4_Init>
  MX_UART4_Init();
 800315c:	f000 fefa 	bl	8003f54 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003160:	f000 ff44 	bl	8003fec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003164:	f000 ffde 	bl	8004124 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003168:	f000 fd7a 	bl	8003c60 <MX_TIM13_Init>
  MX_FATFS_Init();
 800316c:	f00c fc82 	bl	800fa74 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003170:	f000 fd06 	bl	8003b80 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8003174:	f000 ff8a 	bl	800408c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8003178:	f000 fd3a 	bl	8003bf0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 800317c:	f7fd ff48 	bl	8001010 <BMP280_init>
  SD_init();
 8003180:	f7ff fd2e 	bl	8002be0 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003184:	2201      	movs	r2, #1
 8003186:	4906      	ldr	r1, [pc, #24]	@ (80031a0 <main+0x78>)
 8003188:	4806      	ldr	r0, [pc, #24]	@ (80031a4 <main+0x7c>)
 800318a:	f00a faad 	bl	800d6e8 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 800318e:	4806      	ldr	r0, [pc, #24]	@ (80031a8 <main+0x80>)
 8003190:	f009 f95c 	bl	800c44c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003194:	4805      	ldr	r0, [pc, #20]	@ (80031ac <main+0x84>)
 8003196:	f009 f959 	bl	800c44c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800319a:	bf00      	nop
 800319c:	e7fd      	b.n	800319a <main+0x72>
 800319e:	bf00      	nop
 80031a0:	2400028b 	.word	0x2400028b
 80031a4:	240049a0 	.word	0x240049a0
 80031a8:	24004794 	.word	0x24004794
 80031ac:	240047e0 	.word	0x240047e0

080031b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b09c      	sub	sp, #112	@ 0x70
 80031b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ba:	224c      	movs	r2, #76	@ 0x4c
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f011 fad2 	bl	8014768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2220      	movs	r2, #32
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f011 facc 	bl	8014768 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <SystemClock_Config+0xe4>)
 80031d2:	f04f 32ff 	mov.w	r2, #4294967295
 80031d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80031da:	2002      	movs	r0, #2
 80031dc:	f005 f960 	bl	80084a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80031e0:	2300      	movs	r3, #0
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003298 <SystemClock_Config+0xe8>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <SystemClock_Config+0xe8>)
 80031ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <SystemClock_Config+0xe8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80031fc:	bf00      	nop
 80031fe:	4b26      	ldr	r3, [pc, #152]	@ (8003298 <SystemClock_Config+0xe8>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800320a:	d1f8      	bne.n	80031fe <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800320c:	2302      	movs	r3, #2
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003210:	2301      	movs	r3, #1
 8003212:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003214:	2340      	movs	r3, #64	@ 0x40
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003218:	2302      	movs	r3, #2
 800321a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800321c:	2300      	movs	r3, #0
 800321e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003220:	2304      	movs	r3, #4
 8003222:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003224:	2323      	movs	r3, #35	@ 0x23
 8003226:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003228:	2302      	movs	r3, #2
 800322a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800322c:	2302      	movs	r3, #2
 800322e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003230:	2302      	movs	r3, #2
 8003232:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003234:	230c      	movs	r3, #12
 8003236:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003238:	2300      	movs	r3, #0
 800323a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003244:	4618      	mov	r0, r3
 8003246:	f005 f965 	bl	8008514 <HAL_RCC_OscConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003250:	f000 f8ae 	bl	80033b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003254:	233f      	movs	r3, #63	@ 0x3f
 8003256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003258:	2303      	movs	r3, #3
 800325a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003264:	2340      	movs	r3, #64	@ 0x40
 8003266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003268:	2340      	movs	r3, #64	@ 0x40
 800326a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800326c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003272:	2340      	movs	r3, #64	@ 0x40
 8003274:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	2106      	movs	r1, #6
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fd7c 	bl	8008d78 <HAL_RCC_ClockConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003286:	f000 f893 	bl	80033b0 <Error_Handler>
  }
}
 800328a:	bf00      	nop
 800328c:	3770      	adds	r7, #112	@ 0x70
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	58024400 	.word	0x58024400
 8003298:	58024800 	.word	0x58024800

0800329c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a10      	ldr	r2, [pc, #64]	@ (80032ec <HAL_UART_RxCpltCallback+0x50>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10a      	bne.n	80032c4 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_UART_RxCpltCallback+0x54>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fdec 	bl	8001e90 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80032b8:	2201      	movs	r2, #1
 80032ba:	490d      	ldr	r1, [pc, #52]	@ (80032f0 <HAL_UART_RxCpltCallback+0x54>)
 80032bc:	480d      	ldr	r0, [pc, #52]	@ (80032f4 <HAL_UART_RxCpltCallback+0x58>)
 80032be:	f00a fa13 	bl	800d6e8 <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 80032c2:	e00e      	b.n	80032e2 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <HAL_UART_RxCpltCallback+0x5c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d109      	bne.n	80032e2 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_UART_RxCpltCallback+0x60>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fbd6 	bl	8001a84 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80032d8:	2201      	movs	r2, #1
 80032da:	4908      	ldr	r1, [pc, #32]	@ (80032fc <HAL_UART_RxCpltCallback+0x60>)
 80032dc:	4808      	ldr	r0, [pc, #32]	@ (8003300 <HAL_UART_RxCpltCallback+0x64>)
 80032de:	f00a fa03 	bl	800d6e8 <HAL_UART_Receive_DMA>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40011000 	.word	0x40011000
 80032f0:	24000355 	.word	0x24000355
 80032f4:	2400490c 	.word	0x2400490c
 80032f8:	40004800 	.word	0x40004800
 80032fc:	2400028b 	.word	0x2400028b
 8003300:	240049a0 	.word	0x240049a0

08003304 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0e      	ldr	r2, [pc, #56]	@ (800334c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 8003316:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	4a0c      	ldr	r2, [pc, #48]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800331e:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 8003320:	f7fe fd04 	bl	8001d2c <LED_Tasks>
		SBUS_IntegrityVerification();
 8003324:	f7ff f986 	bl	8002634 <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d107      	bne.n	8003342 <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 8003332:	f7fe fc37 	bl	8001ba4 <BNO_Tasks>
		BMP280_calculate();
 8003336:	f7fd fe91 	bl	800105c <BMP280_calculate>

		PWM_Assing();
 800333a:	f7fe fd45 	bl	8001dc8 <PWM_Assing>
		SD_blackbox_write();
 800333e:	f7ff fbed 	bl	8002b1c <SD_blackbox_write>
	}
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40001000 	.word	0x40001000
 8003350:	2400459c 	.word	0x2400459c
 8003354:	40001400 	.word	0x40001400

08003358 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800335e:	463b      	mov	r3, r7
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800336a:	f001 fae1 	bl	8004930 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800336e:	2301      	movs	r3, #1
 8003370:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003372:	2300      	movs	r3, #0
 8003374:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800337a:	231f      	movs	r3, #31
 800337c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800337e:	2387      	movs	r3, #135	@ 0x87
 8003380:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003382:	2300      	movs	r3, #0
 8003384:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003386:	2300      	movs	r3, #0
 8003388:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800338a:	2301      	movs	r3, #1
 800338c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800338e:	2301      	movs	r3, #1
 8003390:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800339a:	463b      	mov	r3, r7
 800339c:	4618      	mov	r0, r3
 800339e:	f001 faff 	bl	80049a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80033a2:	2004      	movs	r0, #4
 80033a4:	f001 fadc 	bl	8004960 <HAL_MPU_Enable>

}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b4:	b672      	cpsid	i
}
 80033b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <Error_Handler+0x8>

080033bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033c2:	4a28      	ldr	r2, [pc, #160]	@ (8003464 <MX_SPI1_Init+0xa8>)
 80033c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033ce:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033d4:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033d6:	2207      	movs	r2, #7
 80033d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033da:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80033ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033f0:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80033f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033fc:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <MX_SPI1_Init+0xa4>)
 80033fe:	2200      	movs	r2, #0
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003402:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003404:	2200      	movs	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <MX_SPI1_Init+0xa4>)
 800340a:	2200      	movs	r2, #0
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800340e:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003410:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003414:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003418:	2200      	movs	r2, #0
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800341c:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <MX_SPI1_Init+0xa4>)
 800341e:	2200      	movs	r2, #0
 8003420:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <MX_SPI1_Init+0xa4>)
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800342e:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003430:	2200      	movs	r2, #0
 8003432:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003436:	2200      	movs	r2, #0
 8003438:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <MX_SPI1_Init+0xa4>)
 800343c:	2200      	movs	r2, #0
 800343e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003442:	2200      	movs	r2, #0
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <MX_SPI1_Init+0xa4>)
 8003448:	2200      	movs	r2, #0
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800344c:	4804      	ldr	r0, [pc, #16]	@ (8003460 <MX_SPI1_Init+0xa4>)
 800344e:	f007 fdff 	bl	800b050 <HAL_SPI_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003458:	f7ff ffaa 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	240045a0 	.word	0x240045a0
 8003464:	40013000 	.word	0x40013000

08003468 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <MX_SPI2_Init+0xa4>)
 800346e:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <MX_SPI2_Init+0xa8>)
 8003470:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <MX_SPI2_Init+0xa4>)
 8003474:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003478:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800347a:	4b24      	ldr	r3, [pc, #144]	@ (800350c <MX_SPI2_Init+0xa4>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003480:	4b22      	ldr	r3, [pc, #136]	@ (800350c <MX_SPI2_Init+0xa4>)
 8003482:	2207      	movs	r2, #7
 8003484:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003486:	4b21      	ldr	r3, [pc, #132]	@ (800350c <MX_SPI2_Init+0xa4>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800348c:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <MX_SPI2_Init+0xa4>)
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003492:	4b1e      	ldr	r3, [pc, #120]	@ (800350c <MX_SPI2_Init+0xa4>)
 8003494:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003498:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800349a:	4b1c      	ldr	r3, [pc, #112]	@ (800350c <MX_SPI2_Init+0xa4>)
 800349c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80034a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034a8:	4b18      	ldr	r3, [pc, #96]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ae:	4b17      	ldr	r3, [pc, #92]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80034b4:	4b15      	ldr	r3, [pc, #84]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034ba:	4b14      	ldr	r3, [pc, #80]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80034c8:	4b10      	ldr	r3, [pc, #64]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034ce:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80034da:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80034e6:	4b09      	ldr	r3, [pc, #36]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034f8:	4804      	ldr	r0, [pc, #16]	@ (800350c <MX_SPI2_Init+0xa4>)
 80034fa:	f007 fda9 	bl	800b050 <HAL_SPI_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003504:	f7ff ff54 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	24004628 	.word	0x24004628
 8003510:	40003800 	.word	0x40003800

08003514 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0bc      	sub	sp, #240	@ 0xf0
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800352c:	f107 0318 	add.w	r3, r7, #24
 8003530:	22c0      	movs	r2, #192	@ 0xc0
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f011 f917 	bl	8014768 <memset>
  if(spiHandle->Instance==SPI1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4c      	ldr	r2, [pc, #304]	@ (8003670 <HAL_SPI_MspInit+0x15c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d145      	bne.n	80035d0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003544:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003550:	2300      	movs	r3, #0
 8003552:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f005 ff99 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003564:	f7ff ff24 	bl	80033b0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003568:	4b42      	ldr	r3, [pc, #264]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 800356a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800356e:	4a41      	ldr	r2, [pc, #260]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003574:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003578:	4b3e      	ldr	r3, [pc, #248]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 800357a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800357e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003588:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800358c:	4a39      	ldr	r2, [pc, #228]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003596:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003598:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80035a4:	23e0      	movs	r3, #224	@ 0xe0
 80035a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035bc:	2305      	movs	r3, #5
 80035be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035c6:	4619      	mov	r1, r3
 80035c8:	482b      	ldr	r0, [pc, #172]	@ (8003678 <HAL_SPI_MspInit+0x164>)
 80035ca:	f004 fc6b 	bl	8007ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035ce:	e04a      	b.n	8003666 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a29      	ldr	r2, [pc, #164]	@ (800367c <HAL_SPI_MspInit+0x168>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d145      	bne.n	8003666 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80035da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ea:	f107 0318 	add.w	r3, r7, #24
 80035ee:	4618      	mov	r0, r3
 80035f0:	f005 ff4e 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80035fa:	f7ff fed9 	bl	80033b0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003600:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800360a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800360e:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003610:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 800361e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003622:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800362c:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <HAL_SPI_MspInit+0x160>)
 800362e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800363a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800363e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003654:	2305      	movs	r3, #5
 8003656:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	@ (8003680 <HAL_SPI_MspInit+0x16c>)
 8003662:	f004 fc1f 	bl	8007ea4 <HAL_GPIO_Init>
}
 8003666:	bf00      	nop
 8003668:	37f0      	adds	r7, #240	@ 0xf0
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40013000 	.word	0x40013000
 8003674:	58024400 	.word	0x58024400
 8003678:	58020000 	.word	0x58020000
 800367c:	40003800 	.word	0x40003800
 8003680:	58020400 	.word	0x58020400

08003684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <HAL_MspInit+0x30>)
 800368c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003690:	4a08      	ldr	r2, [pc, #32]	@ (80036b4 <HAL_MspInit+0x30>)
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_MspInit+0x30>)
 800369c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	58024400 	.word	0x58024400

080036b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <NMI_Handler+0x4>

080036c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <HardFault_Handler+0x4>

080036c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <MemManage_Handler+0x4>

080036d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <BusFault_Handler+0x4>

080036d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <UsageFault_Handler+0x4>

080036e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <SysTick_Handler+0x34>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <SysTick_Handler+0x18>
	    Timer1--;
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <SysTick_Handler+0x34>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <SysTick_Handler+0x34>)
 8003722:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8003724:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <SysTick_Handler+0x38>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <SysTick_Handler+0x2c>
	    Timer2--;
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <SysTick_Handler+0x38>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <SysTick_Handler+0x38>)
 8003736:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003738:	f000 ffca 	bl	80046d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}
 8003740:	24004bc4 	.word	0x24004bc4
 8003744:	24004bc6 	.word	0x24004bc6

08003748 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800374c:	4802      	ldr	r0, [pc, #8]	@ (8003758 <DMA1_Stream0_IRQHandler+0x10>)
 800374e:	f002 fcc3 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	24004ac8 	.word	0x24004ac8

0800375c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003760:	4802      	ldr	r0, [pc, #8]	@ (800376c <DMA1_Stream1_IRQHandler+0x10>)
 8003762:	f002 fcb9 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	24004b40 	.word	0x24004b40

08003770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <USART1_IRQHandler+0x10>)
 8003776:	f00a f93f 	bl	800d9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2400490c 	.word	0x2400490c

08003784 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003788:	4802      	ldr	r0, [pc, #8]	@ (8003794 <USART3_IRQHandler+0x10>)
 800378a:	f00a f935 	bl	800d9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	240049a0 	.word	0x240049a0

08003798 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800379c:	4802      	ldr	r0, [pc, #8]	@ (80037a8 <UART4_IRQHandler+0x10>)
 800379e:	f00a f92b 	bl	800d9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	24004878 	.word	0x24004878

080037ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <TIM6_DAC_IRQHandler+0x10>)
 80037b2:	f009 f829 	bl	800c808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	24004794 	.word	0x24004794

080037c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80037c4:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <TIM7_IRQHandler+0x10>)
 80037c6:	f009 f81f 	bl	800c808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	240047e0 	.word	0x240047e0

080037d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <SystemInit+0xd0>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	4a31      	ldr	r2, [pc, #196]	@ (80038a4 <SystemInit+0xd0>)
 80037e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037e8:	4b2f      	ldr	r3, [pc, #188]	@ (80038a8 <SystemInit+0xd4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d807      	bhi.n	8003804 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037f4:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <SystemInit+0xd4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 030f 	bic.w	r3, r3, #15
 80037fc:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <SystemInit+0xd4>)
 80037fe:	f043 0303 	orr.w	r3, r3, #3
 8003802:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003804:	4b29      	ldr	r3, [pc, #164]	@ (80038ac <SystemInit+0xd8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <SystemInit+0xd8>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003810:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <SystemInit+0xd8>)
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <SystemInit+0xd8>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4924      	ldr	r1, [pc, #144]	@ (80038ac <SystemInit+0xd8>)
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <SystemInit+0xdc>)
 800381e:	4013      	ands	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003822:	4b21      	ldr	r3, [pc, #132]	@ (80038a8 <SystemInit+0xd4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800382e:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <SystemInit+0xd4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	4a1c      	ldr	r2, [pc, #112]	@ (80038a8 <SystemInit+0xd4>)
 8003838:	f043 0303 	orr.w	r3, r3, #3
 800383c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800383e:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <SystemInit+0xd8>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <SystemInit+0xd8>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800384a:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <SystemInit+0xd8>)
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003850:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <SystemInit+0xd8>)
 8003852:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <SystemInit+0xe0>)
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <SystemInit+0xd8>)
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <SystemInit+0xe4>)
 800385a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800385c:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <SystemInit+0xd8>)
 800385e:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <SystemInit+0xe8>)
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <SystemInit+0xd8>)
 8003864:	2200      	movs	r2, #0
 8003866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003868:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <SystemInit+0xd8>)
 800386a:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <SystemInit+0xe8>)
 800386c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800386e:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <SystemInit+0xd8>)
 8003870:	2200      	movs	r2, #0
 8003872:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003874:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <SystemInit+0xd8>)
 8003876:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <SystemInit+0xe8>)
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800387a:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <SystemInit+0xd8>)
 800387c:	2200      	movs	r2, #0
 800387e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <SystemInit+0xd8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <SystemInit+0xd8>)
 8003886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800388a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800388c:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <SystemInit+0xd8>)
 800388e:	2200      	movs	r2, #0
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <SystemInit+0xec>)
 8003894:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003898:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	52002000 	.word	0x52002000
 80038ac:	58024400 	.word	0x58024400
 80038b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80038b4:	02020200 	.word	0x02020200
 80038b8:	01ff0000 	.word	0x01ff0000
 80038bc:	01010280 	.word	0x01010280
 80038c0:	52004000 	.word	0x52004000

080038c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	@ 0x28
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	463b      	mov	r3, r7
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038e8:	4b33      	ldr	r3, [pc, #204]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 80038ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80038f0:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 80038f2:	f240 1217 	movw	r2, #279	@ 0x117
 80038f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f8:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80038fe:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003900:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003906:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003912:	4829      	ldr	r0, [pc, #164]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003914:	f008 fe12 	bl	800c53c <HAL_TIM_PWM_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800391e:	f7ff fd47 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800392a:	f107 031c 	add.w	r3, r7, #28
 800392e:	4619      	mov	r1, r3
 8003930:	4821      	ldr	r0, [pc, #132]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003932:	f009 fd4f 	bl	800d3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800393c:	f7ff fd38 	bl	80033b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003940:	2360      	movs	r3, #96	@ 0x60
 8003942:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003950:	463b      	mov	r3, r7
 8003952:	2200      	movs	r2, #0
 8003954:	4619      	mov	r1, r3
 8003956:	4818      	ldr	r0, [pc, #96]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003958:	f009 f85e 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003962:	f7ff fd25 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	2204      	movs	r2, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4812      	ldr	r0, [pc, #72]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 800396e:	f009 f853 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003978:	f7ff fd1a 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800397c:	463b      	mov	r3, r7
 800397e:	2208      	movs	r2, #8
 8003980:	4619      	mov	r1, r3
 8003982:	480d      	ldr	r0, [pc, #52]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 8003984:	f009 f848 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800398e:	f7ff fd0f 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003992:	463b      	mov	r3, r7
 8003994:	220c      	movs	r2, #12
 8003996:	4619      	mov	r1, r3
 8003998:	4807      	ldr	r0, [pc, #28]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 800399a:	f009 f83d 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80039a4:	f7ff fd04 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80039a8:	4803      	ldr	r0, [pc, #12]	@ (80039b8 <MX_TIM2_Init+0xf4>)
 80039aa:	f000 fa29 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	@ 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	240046b0 	.word	0x240046b0

080039bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	@ 0x28
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	f107 031c 	add.w	r3, r7, #28
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ce:	463b      	mov	r3, r7
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
 80039dc:	615a      	str	r2, [r3, #20]
 80039de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039e0:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 80039e2:	4a28      	ldr	r2, [pc, #160]	@ (8003a84 <MX_TIM3_Init+0xc8>)
 80039e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80039e6:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 80039e8:	f240 1217 	movw	r2, #279	@ 0x117
 80039ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ee:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80039f4:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 80039f6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80039fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fc:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a02:	4b1f      	ldr	r3, [pc, #124]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a08:	481d      	ldr	r0, [pc, #116]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a0a:	f008 fd97 	bl	800c53c <HAL_TIM_PWM_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003a14:	f7ff fccc 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	4816      	ldr	r0, [pc, #88]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a28:	f009 fcd4 	bl	800d3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003a32:	f7ff fcbd 	bl	80033b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a36:	2360      	movs	r3, #96	@ 0x60
 8003a38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a46:	463b      	mov	r3, r7
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	480c      	ldr	r0, [pc, #48]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a4e:	f008 ffe3 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003a58:	f7ff fcaa 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2204      	movs	r2, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4807      	ldr	r0, [pc, #28]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a64:	f008 ffd8 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003a6e:	f7ff fc9f 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a72:	4803      	ldr	r0, [pc, #12]	@ (8003a80 <MX_TIM3_Init+0xc4>)
 8003a74:	f000 f9c4 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	@ 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	240046fc 	.word	0x240046fc
 8003a84:	40000400 	.word	0x40000400

08003a88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	@ 0x28
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
 8003aa8:	615a      	str	r2, [r3, #20]
 8003aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003aac:	4b32      	ldr	r3, [pc, #200]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <MX_TIM4_Init+0xf4>)
 8003ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003ab4:	f240 1217 	movw	r2, #279	@ 0x117
 8003ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aba:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003ac2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ace:	4b2a      	ldr	r3, [pc, #168]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ad4:	4828      	ldr	r0, [pc, #160]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003ad6:	f008 fd31 	bl	800c53c <HAL_TIM_PWM_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003ae0:	f7ff fc66 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	4821      	ldr	r0, [pc, #132]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003af4:	f009 fc6e 	bl	800d3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003afe:	f7ff fc57 	bl	80033b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b02:	2360      	movs	r3, #96	@ 0x60
 8003b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b12:	463b      	mov	r3, r7
 8003b14:	2200      	movs	r2, #0
 8003b16:	4619      	mov	r1, r3
 8003b18:	4817      	ldr	r0, [pc, #92]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003b1a:	f008 ff7d 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003b24:	f7ff fc44 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b28:	463b      	mov	r3, r7
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4812      	ldr	r0, [pc, #72]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003b30:	f008 ff72 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003b3a:	f7ff fc39 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b3e:	463b      	mov	r3, r7
 8003b40:	2208      	movs	r2, #8
 8003b42:	4619      	mov	r1, r3
 8003b44:	480c      	ldr	r0, [pc, #48]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003b46:	f008 ff67 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003b50:	f7ff fc2e 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b54:	463b      	mov	r3, r7
 8003b56:	220c      	movs	r2, #12
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4807      	ldr	r0, [pc, #28]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003b5c:	f008 ff5c 	bl	800ca18 <HAL_TIM_PWM_ConfigChannel>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003b66:	f7ff fc23 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b6a:	4803      	ldr	r0, [pc, #12]	@ (8003b78 <MX_TIM4_Init+0xf0>)
 8003b6c:	f000 f948 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 8003b70:	bf00      	nop
 8003b72:	3728      	adds	r7, #40	@ 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	24004748 	.word	0x24004748
 8003b7c:	40000800 	.word	0x40000800

08003b80 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b90:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003b92:	4a16      	ldr	r2, [pc, #88]	@ (8003bec <MX_TIM6_Init+0x6c>)
 8003b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003b98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9e:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8003ba4:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003ba6:	f240 1217 	movw	r2, #279	@ 0x117
 8003baa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bb2:	480d      	ldr	r0, [pc, #52]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003bb4:	f008 fbf3 	bl	800c39e <HAL_TIM_Base_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003bbe:	f7ff fbf7 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4806      	ldr	r0, [pc, #24]	@ (8003be8 <MX_TIM6_Init+0x68>)
 8003bd0:	f009 fc00 	bl	800d3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003bda:	f7ff fbe9 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	24004794 	.word	0x24004794
 8003bec:	40001000 	.word	0x40001000

08003bf0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c00:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c02:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <MX_TIM7_Init+0x6c>)
 8003c04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8003c06:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c08:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003c0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c0e:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8003c14:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c16:	f240 1217 	movw	r2, #279	@ 0x117
 8003c1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c22:	480d      	ldr	r0, [pc, #52]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c24:	f008 fbbb 	bl	800c39e <HAL_TIM_Base_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003c2e:	f7ff fbbf 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4806      	ldr	r0, [pc, #24]	@ (8003c58 <MX_TIM7_Init+0x68>)
 8003c40:	f009 fbc8 	bl	800d3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003c4a:	f7ff fbb1 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	240047e0 	.word	0x240047e0
 8003c5c:	40001400 	.word	0x40001400

08003c60 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca4 <MX_TIM13_Init+0x44>)
 8003c68:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c6c:	f240 1217 	movw	r2, #279	@ 0x117
 8003c70:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003c78:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c7e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003c8c:	4804      	ldr	r0, [pc, #16]	@ (8003ca0 <MX_TIM13_Init+0x40>)
 8003c8e:	f008 fb86 	bl	800c39e <HAL_TIM_Base_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003c98:	f7ff fb8a 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2400482c 	.word	0x2400482c
 8003ca4:	40001c00 	.word	0x40001c00

08003ca8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb8:	d10f      	bne.n	8003cda <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003cbc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003ccc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cd8:	e028      	b.n	8003d2c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <HAL_TIM_PWM_MspInit+0x94>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10f      	bne.n	8003d04 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ce4:	4b14      	ldr	r3, [pc, #80]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003ce6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cea:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003cf6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]
}
 8003d02:	e013      	b.n	8003d2c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <HAL_TIM_PWM_MspInit+0x98>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003d10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d14:	4a08      	ldr	r2, [pc, #32]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_TIM_PWM_MspInit+0x90>)
 8003d20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800

08003d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_TIM_Base_MspInit+0xac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d117      	bne.n	8003d86 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d56:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d58:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d66:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d68:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2036      	movs	r0, #54	@ 0x36
 8003d7a:	f000 fda4 	bl	80048c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d7e:	2036      	movs	r0, #54	@ 0x36
 8003d80:	f000 fdbb 	bl	80048fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003d84:	e030      	b.n	8003de8 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003df8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d117      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d90:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d96:	4a17      	ldr	r2, [pc, #92]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d98:	f043 0320 	orr.w	r3, r3, #32
 8003d9c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003da2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	2037      	movs	r0, #55	@ 0x37
 8003db4:	f000 fd87 	bl	80048c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003db8:	2037      	movs	r0, #55	@ 0x37
 8003dba:	f000 fd9e 	bl	80048fa <HAL_NVIC_EnableIRQ>
}
 8003dbe:	e013      	b.n	8003de8 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <HAL_TIM_Base_MspInit+0xb8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003dca:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003dcc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003dd0:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_TIM_Base_MspInit+0xb0>)
 8003ddc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40001000 	.word	0x40001000
 8003df4:	58024400 	.word	0x58024400
 8003df8:	40001400 	.word	0x40001400
 8003dfc:	40001c00 	.word	0x40001c00

08003e00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	@ 0x30
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e20:	d13f      	bne.n	8003ea2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e28:	4a45      	ldr	r2, [pc, #276]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e32:	4b43      	ldr	r3, [pc, #268]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e40:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e46:	4a3e      	ldr	r2, [pc, #248]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003e5e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e70:	2301      	movs	r3, #1
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 031c 	add.w	r3, r7, #28
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4832      	ldr	r0, [pc, #200]	@ (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e7c:	f004 f812 	bl	8007ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e80:	2308      	movs	r3, #8
 8003e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e90:	2301      	movs	r3, #1
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	f107 031c 	add.w	r3, r7, #28
 8003e98:	4619      	mov	r1, r3
 8003e9a:	482b      	ldr	r0, [pc, #172]	@ (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003e9c:	f004 f802 	bl	8007ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003ea0:	e049      	b.n	8003f36 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	@ (8003f4c <HAL_TIM_MspPostInit+0x14c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d11f      	bne.n	8003eec <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eac:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003eae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003eb2:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ebc:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003eca:	2330      	movs	r3, #48	@ 0x30
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eda:	2302      	movs	r3, #2
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ede:	f107 031c 	add.w	r3, r7, #28
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4818      	ldr	r0, [pc, #96]	@ (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003ee6:	f003 ffdd 	bl	8007ea4 <HAL_GPIO_Init>
}
 8003eea:	e024      	b.n	8003f36 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	@ (8003f50 <HAL_TIM_MspPostInit+0x150>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d11f      	bne.n	8003f36 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003ef8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003efc:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003f06:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <HAL_TIM_MspPostInit+0x140>)
 8003f08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003f14:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f26:	2302      	movs	r3, #2
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4805      	ldr	r0, [pc, #20]	@ (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003f32:	f003 ffb7 	bl	8007ea4 <HAL_GPIO_Init>
}
 8003f36:	bf00      	nop
 8003f38:	3730      	adds	r7, #48	@ 0x30
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	58024400 	.word	0x58024400
 8003f44:	58020000 	.word	0x58020000
 8003f48:	58020400 	.word	0x58020400
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800

08003f54 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f58:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f5a:	4a23      	ldr	r2, [pc, #140]	@ (8003fe8 <MX_UART4_Init+0x94>)
 8003f5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003f5e:	4b21      	ldr	r3, [pc, #132]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f66:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f84:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f9c:	4811      	ldr	r0, [pc, #68]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003f9e:	f009 fac5 	bl	800d52c <HAL_UART_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003fa8:	f7ff fa02 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fac:	2100      	movs	r1, #0
 8003fae:	480d      	ldr	r0, [pc, #52]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003fb0:	f00b fc95 	bl	800f8de <HAL_UARTEx_SetTxFifoThreshold>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003fba:	f7ff f9f9 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4808      	ldr	r0, [pc, #32]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003fc2:	f00b fcca 	bl	800f95a <HAL_UARTEx_SetRxFifoThreshold>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003fcc:	f7ff f9f0 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	@ (8003fe4 <MX_UART4_Init+0x90>)
 8003fd2:	f00b fc4b 	bl	800f86c <HAL_UARTEx_DisableFifoMode>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003fdc:	f7ff f9e8 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	24004878 	.word	0x24004878
 8003fe8:	40004c00 	.word	0x40004c00

08003fec <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8003ff2:	4a24      	ldr	r2, [pc, #144]	@ (8004084 <MX_USART1_UART_Init+0x98>)
 8003ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003ff6:	4b22      	ldr	r3, [pc, #136]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8003ff8:	4a23      	ldr	r2, [pc, #140]	@ (8004088 <MX_USART1_UART_Init+0x9c>)
 8003ffa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003ffc:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8003ffe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004004:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800400a:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800400c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004010:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004014:	220c      	movs	r2, #12
 8004016:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800401e:	4b18      	ldr	r3, [pc, #96]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004020:	2200      	movs	r2, #0
 8004022:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004024:	4b16      	ldr	r3, [pc, #88]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004026:	2200      	movs	r2, #0
 8004028:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800402a:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800402c:	2200      	movs	r2, #0
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004030:	4b13      	ldr	r3, [pc, #76]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004032:	2200      	movs	r2, #0
 8004034:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004036:	4812      	ldr	r0, [pc, #72]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 8004038:	f009 fa78 	bl	800d52c <HAL_UART_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004042:	f7ff f9b5 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004046:	2100      	movs	r1, #0
 8004048:	480d      	ldr	r0, [pc, #52]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800404a:	f00b fc48 	bl	800f8de <HAL_UARTEx_SetTxFifoThreshold>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004054:	f7ff f9ac 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004058:	2100      	movs	r1, #0
 800405a:	4809      	ldr	r0, [pc, #36]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800405c:	f00b fc7d 	bl	800f95a <HAL_UARTEx_SetRxFifoThreshold>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004066:	f7ff f9a3 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800406a:	4805      	ldr	r0, [pc, #20]	@ (8004080 <MX_USART1_UART_Init+0x94>)
 800406c:	f00b fbfe 	bl	800f86c <HAL_UARTEx_DisableFifoMode>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004076:	f7ff f99b 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2400490c 	.word	0x2400490c
 8004084:	40011000 	.word	0x40011000
 8004088:	000186a0 	.word	0x000186a0

0800408c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004090:	4b22      	ldr	r3, [pc, #136]	@ (800411c <MX_USART3_UART_Init+0x90>)
 8004092:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <MX_USART3_UART_Init+0x94>)
 8004094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004096:	4b21      	ldr	r3, [pc, #132]	@ (800411c <MX_USART3_UART_Init+0x90>)
 8004098:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800409c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800409e:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040aa:	4b1c      	ldr	r3, [pc, #112]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040b0:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040b2:	220c      	movs	r2, #12
 80040b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040b6:	4b19      	ldr	r3, [pc, #100]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040bc:	4b17      	ldr	r3, [pc, #92]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040be:	2200      	movs	r2, #0
 80040c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040c8:	4b14      	ldr	r3, [pc, #80]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040ce:	4b13      	ldr	r3, [pc, #76]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040d4:	4811      	ldr	r0, [pc, #68]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040d6:	f009 fa29 	bl	800d52c <HAL_UART_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80040e0:	f7ff f966 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040e4:	2100      	movs	r1, #0
 80040e6:	480d      	ldr	r0, [pc, #52]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040e8:	f00b fbf9 	bl	800f8de <HAL_UARTEx_SetTxFifoThreshold>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80040f2:	f7ff f95d 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040f6:	2100      	movs	r1, #0
 80040f8:	4808      	ldr	r0, [pc, #32]	@ (800411c <MX_USART3_UART_Init+0x90>)
 80040fa:	f00b fc2e 	bl	800f95a <HAL_UARTEx_SetRxFifoThreshold>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004104:	f7ff f954 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004108:	4804      	ldr	r0, [pc, #16]	@ (800411c <MX_USART3_UART_Init+0x90>)
 800410a:	f00b fbaf 	bl	800f86c <HAL_UARTEx_DisableFifoMode>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004114:	f7ff f94c 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	240049a0 	.word	0x240049a0
 8004120:	40004800 	.word	0x40004800

08004124 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004128:	4b22      	ldr	r3, [pc, #136]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 800412a:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <MX_USART6_UART_Init+0x94>)
 800412c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800412e:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004134:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800413c:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004142:	4b1c      	ldr	r3, [pc, #112]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 800414a:	220c      	movs	r2, #12
 800414c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004154:	4b17      	ldr	r3, [pc, #92]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800415a:	4b16      	ldr	r3, [pc, #88]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 800415c:	2200      	movs	r2, #0
 800415e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004162:	2200      	movs	r2, #0
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800416c:	4811      	ldr	r0, [pc, #68]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 800416e:	f009 f9dd 	bl	800d52c <HAL_UART_Init>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004178:	f7ff f91a 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800417c:	2100      	movs	r1, #0
 800417e:	480d      	ldr	r0, [pc, #52]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004180:	f00b fbad 	bl	800f8de <HAL_UARTEx_SetTxFifoThreshold>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800418a:	f7ff f911 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800418e:	2100      	movs	r1, #0
 8004190:	4808      	ldr	r0, [pc, #32]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 8004192:	f00b fbe2 	bl	800f95a <HAL_UARTEx_SetRxFifoThreshold>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800419c:	f7ff f908 	bl	80033b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80041a0:	4804      	ldr	r0, [pc, #16]	@ (80041b4 <MX_USART6_UART_Init+0x90>)
 80041a2:	f00b fb63 	bl	800f86c <HAL_UARTEx_DisableFifoMode>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80041ac:	f7ff f900 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	24004a34 	.word	0x24004a34
 80041b8:	40011400 	.word	0x40011400

080041bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0c0      	sub	sp, #256	@ 0x100
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041d8:	22c0      	movs	r2, #192	@ 0xc0
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f010 fac3 	bl	8014768 <memset>
  if(uartHandle->Instance==UART4)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4aad      	ldr	r2, [pc, #692]	@ (800449c <HAL_UART_MspInit+0x2e0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d14e      	bne.n	800428a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80041ec:	f04f 0202 	mov.w	r2, #2
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004202:	4618      	mov	r0, r3
 8004204:	f005 f944 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800420e:	f7ff f8cf 	bl	80033b0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004212:	4ba3      	ldr	r3, [pc, #652]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 8004214:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004218:	4aa1      	ldr	r2, [pc, #644]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 800421a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800421e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004222:	4b9f      	ldr	r3, [pc, #636]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 8004224:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004230:	4b9b      	ldr	r3, [pc, #620]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 8004232:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004236:	4a9a      	ldr	r2, [pc, #616]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004240:	4b97      	ldr	r3, [pc, #604]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 8004242:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800424e:	2303      	movs	r3, #3
 8004250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004254:	2302      	movs	r3, #2
 8004256:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004266:	2308      	movs	r3, #8
 8004268:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004270:	4619      	mov	r1, r3
 8004272:	488c      	ldr	r0, [pc, #560]	@ (80044a4 <HAL_UART_MspInit+0x2e8>)
 8004274:	f003 fe16 	bl	8007ea4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	2100      	movs	r1, #0
 800427c:	2034      	movs	r0, #52	@ 0x34
 800427e:	f000 fb22 	bl	80048c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004282:	2034      	movs	r0, #52	@ 0x34
 8004284:	f000 fb39 	bl	80048fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004288:	e167      	b.n	800455a <HAL_UART_MspInit+0x39e>
  else if(uartHandle->Instance==USART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a86      	ldr	r2, [pc, #536]	@ (80044a8 <HAL_UART_MspInit+0x2ec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d17f      	bne.n	8004394 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004294:	f04f 0201 	mov.w	r2, #1
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042aa:	4618      	mov	r0, r3
 80042ac:	f005 f8f0 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80042b6:	f7ff f87b 	bl	80033b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80042ba:	4b79      	ldr	r3, [pc, #484]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042c0:	4a77      	ldr	r2, [pc, #476]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042c2:	f043 0310 	orr.w	r3, r3, #16
 80042c6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80042ca:	4b75      	ldr	r3, [pc, #468]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	4b71      	ldr	r3, [pc, #452]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042de:	4a70      	ldr	r2, [pc, #448]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042e8:	4b6d      	ldr	r3, [pc, #436]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80042ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80042f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80042fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004310:	2307      	movs	r3, #7
 8004312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800431a:	4619      	mov	r1, r3
 800431c:	4861      	ldr	r0, [pc, #388]	@ (80044a4 <HAL_UART_MspInit+0x2e8>)
 800431e:	f003 fdc1 	bl	8007ea4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004322:	4b62      	ldr	r3, [pc, #392]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004324:	4a62      	ldr	r2, [pc, #392]	@ (80044b0 <HAL_UART_MspInit+0x2f4>)
 8004326:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004328:	4b60      	ldr	r3, [pc, #384]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 800432a:	2229      	movs	r2, #41	@ 0x29
 800432c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800432e:	4b5f      	ldr	r3, [pc, #380]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004334:	4b5d      	ldr	r3, [pc, #372]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004336:	2200      	movs	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800433a:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 800433c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004340:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004342:	4b5a      	ldr	r3, [pc, #360]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004348:	4b58      	ldr	r3, [pc, #352]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800434e:	4b57      	ldr	r3, [pc, #348]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004354:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004356:	4b55      	ldr	r3, [pc, #340]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004358:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800435c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800435e:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004360:	2200      	movs	r2, #0
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004364:	4851      	ldr	r0, [pc, #324]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004366:	f000 fb5b 	bl	8004a20 <HAL_DMA_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8004370:	f7ff f81e 	bl	80033b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a4d      	ldr	r2, [pc, #308]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800437c:	4a4b      	ldr	r2, [pc, #300]	@ (80044ac <HAL_UART_MspInit+0x2f0>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	2025      	movs	r0, #37	@ 0x25
 8004388:	f000 fa9d 	bl	80048c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800438c:	2025      	movs	r0, #37	@ 0x25
 800438e:	f000 fab4 	bl	80048fa <HAL_NVIC_EnableIRQ>
}
 8004392:	e0e2      	b.n	800455a <HAL_UART_MspInit+0x39e>
  else if(uartHandle->Instance==USART3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a46      	ldr	r2, [pc, #280]	@ (80044b4 <HAL_UART_MspInit+0x2f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	f040 8092 	bne.w	80044c4 <HAL_UART_MspInit+0x308>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80043a0:	f04f 0202 	mov.w	r2, #2
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043b6:	4618      	mov	r0, r3
 80043b8:	f005 f86a 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80043c2:	f7fe fff5 	bl	80033b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043c6:	4b36      	ldr	r3, [pc, #216]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043cc:	4a34      	ldr	r2, [pc, #208]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80043d6:	4b32      	ldr	r3, [pc, #200]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e4:	4b2e      	ldr	r3, [pc, #184]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043ea:	4a2d      	ldr	r2, [pc, #180]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80043f4:	4b2a      	ldr	r3, [pc, #168]	@ (80044a0 <HAL_UART_MspInit+0x2e4>)
 80043f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004402:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004406:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	2302      	movs	r3, #2
 800440c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800441c:	2307      	movs	r3, #7
 800441e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004422:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004426:	4619      	mov	r1, r3
 8004428:	4823      	ldr	r0, [pc, #140]	@ (80044b8 <HAL_UART_MspInit+0x2fc>)
 800442a:	f003 fd3b 	bl	8007ea4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800442e:	4b23      	ldr	r3, [pc, #140]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004430:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <HAL_UART_MspInit+0x304>)
 8004432:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004434:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004436:	222d      	movs	r2, #45	@ 0x2d
 8004438:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800443a:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <HAL_UART_MspInit+0x300>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004440:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004446:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800444c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004450:	2200      	movs	r2, #0
 8004452:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004456:	2200      	movs	r2, #0
 8004458:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800445a:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_UART_MspInit+0x300>)
 800445c:	2200      	movs	r2, #0
 800445e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004460:	4b16      	ldr	r3, [pc, #88]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004462:	2200      	movs	r2, #0
 8004464:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800446c:	4813      	ldr	r0, [pc, #76]	@ (80044bc <HAL_UART_MspInit+0x300>)
 800446e:	f000 fad7 	bl	8004a20 <HAL_DMA_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_UART_MspInit+0x2c0>
      Error_Handler();
 8004478:	f7fe ff9a 	bl	80033b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0f      	ldr	r2, [pc, #60]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004484:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <HAL_UART_MspInit+0x300>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	2100      	movs	r1, #0
 800448e:	2027      	movs	r0, #39	@ 0x27
 8004490:	f000 fa19 	bl	80048c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004494:	2027      	movs	r0, #39	@ 0x27
 8004496:	f000 fa30 	bl	80048fa <HAL_NVIC_EnableIRQ>
}
 800449a:	e05e      	b.n	800455a <HAL_UART_MspInit+0x39e>
 800449c:	40004c00 	.word	0x40004c00
 80044a0:	58024400 	.word	0x58024400
 80044a4:	58020000 	.word	0x58020000
 80044a8:	40011000 	.word	0x40011000
 80044ac:	24004ac8 	.word	0x24004ac8
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40004800 	.word	0x40004800
 80044b8:	58020800 	.word	0x58020800
 80044bc:	24004b40 	.word	0x24004b40
 80044c0:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a26      	ldr	r2, [pc, #152]	@ (8004564 <HAL_UART_MspInit+0x3a8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d145      	bne.n	800455a <HAL_UART_MspInit+0x39e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80044ce:	f04f 0201 	mov.w	r2, #1
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 ffd3 	bl	8009490 <HAL_RCCEx_PeriphCLKConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_MspInit+0x338>
      Error_Handler();
 80044f0:	f7fe ff5e 	bl	80033b0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 80044f6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80044fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 80044fc:	f043 0320 	orr.w	r3, r3, #32
 8004500:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004504:	4b18      	ldr	r3, [pc, #96]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 8004506:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 8004514:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004518:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 800451a:	f043 0304 	orr.w	r3, r3, #4
 800451e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_UART_MspInit+0x3ac>)
 8004524:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004530:	23c0      	movs	r3, #192	@ 0xc0
 8004532:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004548:	2307      	movs	r3, #7
 800454a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004552:	4619      	mov	r1, r3
 8004554:	4805      	ldr	r0, [pc, #20]	@ (800456c <HAL_UART_MspInit+0x3b0>)
 8004556:	f003 fca5 	bl	8007ea4 <HAL_GPIO_Init>
}
 800455a:	bf00      	nop
 800455c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40011400 	.word	0x40011400
 8004568:	58024400 	.word	0x58024400
 800456c:	58020800 	.word	0x58020800

08004570 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	220f      	movs	r2, #15
 800457e:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f009 f8fd 	bl	800d780 <HAL_UART_Abort_IT>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 800458c:	f7fe ff10 	bl	80033b0 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800459c:	f7ff f91a 	bl	80037d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045a0:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045a2:	490d      	ldr	r1, [pc, #52]	@ (80045d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a8:	e002      	b.n	80045b0 <LoopCopyDataInit>

080045aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ae:	3304      	adds	r3, #4

080045b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80045b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b4:	d3f9      	bcc.n	80045aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045b6:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045b8:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045bc:	e001      	b.n	80045c2 <LoopFillZerobss>

080045be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c0:	3204      	adds	r2, #4

080045c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c4:	d3fb      	bcc.n	80045be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80045c6:	f010 f8dd 	bl	8014784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ca:	f7fe fdad 	bl	8003128 <main>
  bx  lr
 80045ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045d0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80045d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80045d8:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 80045dc:	08015830 	.word	0x08015830
  ldr r2, =_sbss
 80045e0:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80045e4:	24004f38 	.word	0x24004f38

080045e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <ADC_IRQHandler>
	...

080045ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045f2:	2003      	movs	r0, #3
 80045f4:	f000 f95c 	bl	80048b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045f8:	f004 fd74 	bl	80090e4 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <HAL_Init+0x68>)
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	4913      	ldr	r1, [pc, #76]	@ (8004658 <HAL_Init+0x6c>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004616:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <HAL_Init+0x68>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <HAL_Init+0x6c>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	4a0b      	ldr	r2, [pc, #44]	@ (800465c <HAL_Init+0x70>)
 800462e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004630:	4a0b      	ldr	r2, [pc, #44]	@ (8004660 <HAL_Init+0x74>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004636:	200f      	movs	r0, #15
 8004638:	f000 f814 	bl	8004664 <HAL_InitTick>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e002      	b.n	800464c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004646:	f7ff f81d 	bl	8003684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	58024400 	.word	0x58024400
 8004658:	08014b0c 	.word	0x08014b0c
 800465c:	240000c4 	.word	0x240000c4
 8004660:	240000c0 	.word	0x240000c0

08004664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800466c:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <HAL_InitTick+0x60>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e021      	b.n	80046bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <HAL_InitTick+0x64>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_InitTick+0x60>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004686:	fbb3 f3f1 	udiv	r3, r3, r1
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f941 	bl	8004916 <HAL_SYSTICK_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e00e      	b.n	80046bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d80a      	bhi.n	80046ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a4:	2200      	movs	r2, #0
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	f000 f90b 	bl	80048c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046b0:	4a06      	ldr	r2, [pc, #24]	@ (80046cc <HAL_InitTick+0x68>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	240000cc 	.word	0x240000cc
 80046c8:	240000c0 	.word	0x240000c0
 80046cc:	240000c8 	.word	0x240000c8

080046d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_IncTick+0x20>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_IncTick+0x24>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <HAL_IncTick+0x24>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	240000cc 	.word	0x240000cc
 80046f4:	24004bb8 	.word	0x24004bb8

080046f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return uwTick;
 80046fc:	4b03      	ldr	r3, [pc, #12]	@ (800470c <HAL_GetTick+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	24004bb8 	.word	0x24004bb8

08004710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <__NVIC_SetPriorityGrouping+0x40>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004738:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473e:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <__NVIC_SetPriorityGrouping+0x40>)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	60d3      	str	r3, [r2, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000ed00 	.word	0xe000ed00
 8004754:	05fa0000 	.word	0x05fa0000

08004758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <__NVIC_GetPriorityGrouping+0x18>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0307 	and.w	r3, r3, #7
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db0b      	blt.n	800479e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4907      	ldr	r1, [pc, #28]	@ (80047ac <__NVIC_EnableIRQ+0x38>)
 800478e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db0a      	blt.n	80047da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	490c      	ldr	r1, [pc, #48]	@ (80047fc <__NVIC_SetPriority+0x4c>)
 80047ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d8:	e00a      	b.n	80047f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4908      	ldr	r1, [pc, #32]	@ (8004800 <__NVIC_SetPriority+0x50>)
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3b04      	subs	r3, #4
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	440b      	add	r3, r1
 80047ee:	761a      	strb	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	e000e100 	.word	0xe000e100
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	@ 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf28      	it	cs
 8004822:	2304      	movcs	r3, #4
 8004824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3304      	adds	r3, #4
 800482a:	2b06      	cmp	r3, #6
 800482c:	d902      	bls.n	8004834 <NVIC_EncodePriority+0x30>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b03      	subs	r3, #3
 8004832:	e000      	b.n	8004836 <NVIC_EncodePriority+0x32>
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800484c:	f04f 31ff 	mov.w	r1, #4294967295
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43d9      	mvns	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	4313      	orrs	r3, r2
         );
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	@ 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800487c:	d301      	bcc.n	8004882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487e:	2301      	movs	r3, #1
 8004880:	e00f      	b.n	80048a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004882:	4a0a      	ldr	r2, [pc, #40]	@ (80048ac <SysTick_Config+0x40>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800488a:	210f      	movs	r1, #15
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	f7ff ff8e 	bl	80047b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <SysTick_Config+0x40>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800489a:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <SysTick_Config+0x40>)
 800489c:	2207      	movs	r2, #7
 800489e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	e000e010 	.word	0xe000e010

080048b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff29 	bl	8004710 <__NVIC_SetPriorityGrouping>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	4603      	mov	r3, r0
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048d4:	f7ff ff40 	bl	8004758 <__NVIC_GetPriorityGrouping>
 80048d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff90 	bl	8004804 <NVIC_EncodePriority>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff5f 	bl	80047b0 <__NVIC_SetPriority>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff33 	bl	8004774 <__NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffa4 	bl	800486c <SysTick_Config>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004934:	f3bf 8f5f 	dmb	sy
}
 8004938:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <HAL_MPU_Disable+0x28>)
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	4a06      	ldr	r2, [pc, #24]	@ (8004958 <HAL_MPU_Disable+0x28>)
 8004940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004944:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_MPU_Disable+0x2c>)
 8004948:	2200      	movs	r2, #0
 800494a:	605a      	str	r2, [r3, #4]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000ed00 	.word	0xe000ed00
 800495c:	e000ed90 	.word	0xe000ed90

08004960 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004968:	4a0b      	ldr	r2, [pc, #44]	@ (8004998 <HAL_MPU_Enable+0x38>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004972:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <HAL_MPU_Enable+0x3c>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	4a09      	ldr	r2, [pc, #36]	@ (800499c <HAL_MPU_Enable+0x3c>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800497e:	f3bf 8f4f 	dsb	sy
}
 8004982:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004984:	f3bf 8f6f 	isb	sy
}
 8004988:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000ed90 	.word	0xe000ed90
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	785a      	ldrb	r2, [r3, #1]
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_MPU_ConfigRegion+0x7c>)
 80049ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80049b0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a1c <HAL_MPU_ConfigRegion+0x7c>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_MPU_ConfigRegion+0x7c>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80049bc:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_MPU_ConfigRegion+0x7c>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7b1b      	ldrb	r3, [r3, #12]
 80049c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7adb      	ldrb	r3, [r3, #11]
 80049ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7a9b      	ldrb	r3, [r3, #10]
 80049d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80049d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7b5b      	ldrb	r3, [r3, #13]
 80049de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80049e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7b9b      	ldrb	r3, [r3, #14]
 80049e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80049e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	7bdb      	ldrb	r3, [r3, #15]
 80049ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7a5b      	ldrb	r3, [r3, #9]
 80049f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7a1b      	ldrb	r3, [r3, #8]
 80049fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a0c:	6113      	str	r3, [r2, #16]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000ed90 	.word	0xe000ed90

08004a20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a28:	f7ff fe66 	bl	80046f8 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e37d      	b.n	8005134 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a66      	ldr	r2, [pc, #408]	@ (8004bd8 <HAL_DMA_Init+0x1b8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d04a      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a65      	ldr	r2, [pc, #404]	@ (8004bdc <HAL_DMA_Init+0x1bc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d045      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a63      	ldr	r2, [pc, #396]	@ (8004be0 <HAL_DMA_Init+0x1c0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d040      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a62      	ldr	r2, [pc, #392]	@ (8004be4 <HAL_DMA_Init+0x1c4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d03b      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a60      	ldr	r2, [pc, #384]	@ (8004be8 <HAL_DMA_Init+0x1c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d036      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bec <HAL_DMA_Init+0x1cc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d031      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf0 <HAL_DMA_Init+0x1d0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02c      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf4 <HAL_DMA_Init+0x1d4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d027      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf8 <HAL_DMA_Init+0x1d8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a59      	ldr	r2, [pc, #356]	@ (8004bfc <HAL_DMA_Init+0x1dc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01d      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a57      	ldr	r2, [pc, #348]	@ (8004c00 <HAL_DMA_Init+0x1e0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a56      	ldr	r2, [pc, #344]	@ (8004c04 <HAL_DMA_Init+0x1e4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	@ (8004c08 <HAL_DMA_Init+0x1e8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a53      	ldr	r2, [pc, #332]	@ (8004c0c <HAL_DMA_Init+0x1ec>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a51      	ldr	r2, [pc, #324]	@ (8004c10 <HAL_DMA_Init+0x1f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a50      	ldr	r2, [pc, #320]	@ (8004c14 <HAL_DMA_Init+0x1f4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_DMA_Init+0xbc>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_DMA_Init+0xbe>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 813c 	beq.w	8004d5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <HAL_DMA_Init+0x1b8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a36      	ldr	r2, [pc, #216]	@ (8004bdc <HAL_DMA_Init+0x1bc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a34      	ldr	r2, [pc, #208]	@ (8004be0 <HAL_DMA_Init+0x1c0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a33      	ldr	r2, [pc, #204]	@ (8004be4 <HAL_DMA_Init+0x1c4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a31      	ldr	r2, [pc, #196]	@ (8004be8 <HAL_DMA_Init+0x1c8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a30      	ldr	r2, [pc, #192]	@ (8004bec <HAL_DMA_Init+0x1cc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <HAL_DMA_Init+0x1d0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf4 <HAL_DMA_Init+0x1d4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_DMA_Init+0x1d8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2a      	ldr	r2, [pc, #168]	@ (8004bfc <HAL_DMA_Init+0x1dc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <HAL_DMA_Init+0x1e0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a27      	ldr	r2, [pc, #156]	@ (8004c04 <HAL_DMA_Init+0x1e4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <HAL_DMA_Init+0x1e8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <HAL_DMA_Init+0x1ec>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <HAL_DMA_Init+0x1f0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <HAL_DMA_Init+0x1f4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <HAL_DMA_Init+0x186>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e007      	b.n	8004bb6 <HAL_DMA_Init+0x196>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bb6:	e02f      	b.n	8004c18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bb8:	f7ff fd9e 	bl	80046f8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d928      	bls.n	8004c18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e2ad      	b.n	8005134 <HAL_DMA_Init+0x714>
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1c8      	bne.n	8004bb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4b73      	ldr	r3, [pc, #460]	@ (8004e00 <HAL_DMA_Init+0x3e0>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d107      	bne.n	8004c7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	4313      	orrs	r3, r2
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b28      	cmp	r3, #40	@ 0x28
 8004c82:	d903      	bls.n	8004c8c <HAL_DMA_Init+0x26c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c8a:	d91f      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c92:	d903      	bls.n	8004c9c <HAL_DMA_Init+0x27c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b42      	cmp	r3, #66	@ 0x42
 8004c9a:	d917      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b46      	cmp	r3, #70	@ 0x46
 8004ca2:	d903      	bls.n	8004cac <HAL_DMA_Init+0x28c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b48      	cmp	r3, #72	@ 0x48
 8004caa:	d90f      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b4e      	cmp	r3, #78	@ 0x4e
 8004cb2:	d903      	bls.n	8004cbc <HAL_DMA_Init+0x29c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b52      	cmp	r3, #82	@ 0x52
 8004cba:	d907      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b73      	cmp	r3, #115	@ 0x73
 8004cc2:	d905      	bls.n	8004cd0 <HAL_DMA_Init+0x2b0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b77      	cmp	r3, #119	@ 0x77
 8004cca:	d801      	bhi.n	8004cd0 <HAL_DMA_Init+0x2b0>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_DMA_Init+0x2b2>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d117      	bne.n	8004d38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f002 fbd4 	bl	80074c8 <DMA_CheckFifoParam>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2240      	movs	r2, #64	@ 0x40
 8004d2a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e1fd      	b.n	8005134 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f002 fb0f 	bl	8007364 <DMA_CalcBaseAndBitshift>
 8004d46:	4603      	mov	r3, r0
 8004d48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	223f      	movs	r2, #63	@ 0x3f
 8004d54:	409a      	lsls	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	e0fd      	b.n	8004f58 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a28      	ldr	r2, [pc, #160]	@ (8004e04 <HAL_DMA_Init+0x3e4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d04a      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a27      	ldr	r2, [pc, #156]	@ (8004e08 <HAL_DMA_Init+0x3e8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d045      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a25      	ldr	r2, [pc, #148]	@ (8004e0c <HAL_DMA_Init+0x3ec>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d040      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <HAL_DMA_Init+0x3f0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d03b      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a22      	ldr	r2, [pc, #136]	@ (8004e14 <HAL_DMA_Init+0x3f4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d036      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <HAL_DMA_Init+0x3f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d031      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e1c <HAL_DMA_Init+0x3fc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02c      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <HAL_DMA_Init+0x400>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d027      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <HAL_DMA_Init+0x404>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <HAL_DMA_Init+0x408>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <HAL_DMA_Init+0x40c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <HAL_DMA_Init+0x410>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	@ (8004e34 <HAL_DMA_Init+0x414>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a15      	ldr	r2, [pc, #84]	@ (8004e38 <HAL_DMA_Init+0x418>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a13      	ldr	r2, [pc, #76]	@ (8004e3c <HAL_DMA_Init+0x41c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_DMA_Init+0x3dc>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a12      	ldr	r2, [pc, #72]	@ (8004e40 <HAL_DMA_Init+0x420>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d123      	bne.n	8004e44 <HAL_DMA_Init+0x424>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e022      	b.n	8004e46 <HAL_DMA_Init+0x426>
 8004e00:	fe10803f 	.word	0xfe10803f
 8004e04:	48022c08 	.word	0x48022c08
 8004e08:	48022c1c 	.word	0x48022c1c
 8004e0c:	48022c30 	.word	0x48022c30
 8004e10:	48022c44 	.word	0x48022c44
 8004e14:	48022c58 	.word	0x48022c58
 8004e18:	48022c6c 	.word	0x48022c6c
 8004e1c:	48022c80 	.word	0x48022c80
 8004e20:	48022c94 	.word	0x48022c94
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d07d      	beq.n	8004f46 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7f      	ldr	r2, [pc, #508]	@ (800504c <HAL_DMA_Init+0x62c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d021      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7d      	ldr	r2, [pc, #500]	@ (8005050 <HAL_DMA_Init+0x630>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01c      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7c      	ldr	r2, [pc, #496]	@ (8005054 <HAL_DMA_Init+0x634>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d017      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7a      	ldr	r2, [pc, #488]	@ (8005058 <HAL_DMA_Init+0x638>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d012      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a79      	ldr	r2, [pc, #484]	@ (800505c <HAL_DMA_Init+0x63c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00d      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a77      	ldr	r2, [pc, #476]	@ (8005060 <HAL_DMA_Init+0x640>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d008      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a76      	ldr	r2, [pc, #472]	@ (8005064 <HAL_DMA_Init+0x644>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <HAL_DMA_Init+0x478>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a74      	ldr	r2, [pc, #464]	@ (8005068 <HAL_DMA_Init+0x648>)
 8004e96:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	@ (800506c <HAL_DMA_Init+0x64c>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d008      	beq.n	8004ed2 <HAL_DMA_Init+0x4b2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b80      	cmp	r3, #128	@ 0x80
 8004ec6:	d102      	bne.n	8004ece <HAL_DMA_Init+0x4ae>
 8004ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ecc:	e002      	b.n	8004ed4 <HAL_DMA_Init+0x4b4>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_DMA_Init+0x4b4>
 8004ed2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68d2      	ldr	r2, [r2, #12]
 8004ed8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eda:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ee2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ef2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004efa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f02:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b55      	ldr	r3, [pc, #340]	@ (8005070 <HAL_DMA_Init+0x650>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	4a55      	ldr	r2, [pc, #340]	@ (8005074 <HAL_DMA_Init+0x654>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	009a      	lsls	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f002 fa1a 	bl	8007364 <DMA_CalcBaseAndBitshift>
 8004f30:	4603      	mov	r3, r0
 8004f32:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	e008      	b.n	8004f58 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2240      	movs	r2, #64	@ 0x40
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ed      	b.n	8005134 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a46      	ldr	r2, [pc, #280]	@ (8005078 <HAL_DMA_Init+0x658>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d072      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a45      	ldr	r2, [pc, #276]	@ (800507c <HAL_DMA_Init+0x65c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d06d      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a43      	ldr	r2, [pc, #268]	@ (8005080 <HAL_DMA_Init+0x660>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d068      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <HAL_DMA_Init+0x664>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d063      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a40      	ldr	r2, [pc, #256]	@ (8005088 <HAL_DMA_Init+0x668>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d05e      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800508c <HAL_DMA_Init+0x66c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d059      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3d      	ldr	r2, [pc, #244]	@ (8005090 <HAL_DMA_Init+0x670>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d054      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8005094 <HAL_DMA_Init+0x674>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04f      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3a      	ldr	r2, [pc, #232]	@ (8005098 <HAL_DMA_Init+0x678>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d04a      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a39      	ldr	r2, [pc, #228]	@ (800509c <HAL_DMA_Init+0x67c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d045      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a37      	ldr	r2, [pc, #220]	@ (80050a0 <HAL_DMA_Init+0x680>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d040      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a36      	ldr	r2, [pc, #216]	@ (80050a4 <HAL_DMA_Init+0x684>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d03b      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a34      	ldr	r2, [pc, #208]	@ (80050a8 <HAL_DMA_Init+0x688>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d036      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a33      	ldr	r2, [pc, #204]	@ (80050ac <HAL_DMA_Init+0x68c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d031      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	@ (80050b0 <HAL_DMA_Init+0x690>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02c      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a30      	ldr	r2, [pc, #192]	@ (80050b4 <HAL_DMA_Init+0x694>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d027      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	@ (800504c <HAL_DMA_Init+0x62c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d022      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <HAL_DMA_Init+0x630>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d01d      	beq.n	8005048 <HAL_DMA_Init+0x628>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a10      	ldr	r2, [pc, #64]	@ (8005054 <HAL_DMA_Init+0x634>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d018      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a0f      	ldr	r2, [pc, #60]	@ (8005058 <HAL_DMA_Init+0x638>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0d      	ldr	r2, [pc, #52]	@ (800505c <HAL_DMA_Init+0x63c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_DMA_Init+0x628>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a0c      	ldr	r2, [pc, #48]	@ (8005060 <HAL_DMA_Init+0x640>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d009      	beq.n	8005048 <HAL_DMA_Init+0x628>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <HAL_DMA_Init+0x644>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_DMA_Init+0x628>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <HAL_DMA_Init+0x648>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d137      	bne.n	80050b8 <HAL_DMA_Init+0x698>
 8005048:	2301      	movs	r3, #1
 800504a:	e036      	b.n	80050ba <HAL_DMA_Init+0x69a>
 800504c:	58025408 	.word	0x58025408
 8005050:	5802541c 	.word	0x5802541c
 8005054:	58025430 	.word	0x58025430
 8005058:	58025444 	.word	0x58025444
 800505c:	58025458 	.word	0x58025458
 8005060:	5802546c 	.word	0x5802546c
 8005064:	58025480 	.word	0x58025480
 8005068:	58025494 	.word	0x58025494
 800506c:	fffe000f 	.word	0xfffe000f
 8005070:	a7fdabf8 	.word	0xa7fdabf8
 8005074:	cccccccd 	.word	0xcccccccd
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d032      	beq.n	8005124 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f002 fa7e 	bl	80075c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b80      	cmp	r3, #128	@ 0x80
 80050ca:	d102      	bne.n	80050d2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050e6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d010      	beq.n	8005112 <HAL_DMA_Init+0x6f2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d80c      	bhi.n	8005112 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f002 fafb 	bl	80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	e008      	b.n	8005124 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e226      	b.n	80055a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_DMA_Start_IT+0x2a>
 8005162:	2302      	movs	r3, #2
 8005164:	e21f      	b.n	80055a6 <HAL_DMA_Start_IT+0x46a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 820a 	bne.w	8005590 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a68      	ldr	r2, [pc, #416]	@ (8005330 <HAL_DMA_Start_IT+0x1f4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d04a      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a66      	ldr	r2, [pc, #408]	@ (8005334 <HAL_DMA_Start_IT+0x1f8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d045      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a65      	ldr	r2, [pc, #404]	@ (8005338 <HAL_DMA_Start_IT+0x1fc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d040      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a63      	ldr	r2, [pc, #396]	@ (800533c <HAL_DMA_Start_IT+0x200>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d03b      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a62      	ldr	r2, [pc, #392]	@ (8005340 <HAL_DMA_Start_IT+0x204>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d036      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a60      	ldr	r2, [pc, #384]	@ (8005344 <HAL_DMA_Start_IT+0x208>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005348 <HAL_DMA_Start_IT+0x20c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02c      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5d      	ldr	r2, [pc, #372]	@ (800534c <HAL_DMA_Start_IT+0x210>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a5c      	ldr	r2, [pc, #368]	@ (8005350 <HAL_DMA_Start_IT+0x214>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005354 <HAL_DMA_Start_IT+0x218>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a59      	ldr	r2, [pc, #356]	@ (8005358 <HAL_DMA_Start_IT+0x21c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a57      	ldr	r2, [pc, #348]	@ (800535c <HAL_DMA_Start_IT+0x220>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a56      	ldr	r2, [pc, #344]	@ (8005360 <HAL_DMA_Start_IT+0x224>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a54      	ldr	r2, [pc, #336]	@ (8005364 <HAL_DMA_Start_IT+0x228>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a53      	ldr	r2, [pc, #332]	@ (8005368 <HAL_DMA_Start_IT+0x22c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a51      	ldr	r2, [pc, #324]	@ (800536c <HAL_DMA_Start_IT+0x230>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d108      	bne.n	800523c <HAL_DMA_Start_IT+0x100>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e007      	b.n	800524c <HAL_DMA_Start_IT+0x110>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fea2 	bl	8006f9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a34      	ldr	r2, [pc, #208]	@ (8005330 <HAL_DMA_Start_IT+0x1f4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a33      	ldr	r2, [pc, #204]	@ (8005334 <HAL_DMA_Start_IT+0x1f8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a31      	ldr	r2, [pc, #196]	@ (8005338 <HAL_DMA_Start_IT+0x1fc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a30      	ldr	r2, [pc, #192]	@ (800533c <HAL_DMA_Start_IT+0x200>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2e      	ldr	r2, [pc, #184]	@ (8005340 <HAL_DMA_Start_IT+0x204>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <HAL_DMA_Start_IT+0x208>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <HAL_DMA_Start_IT+0x20c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <HAL_DMA_Start_IT+0x210>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a28      	ldr	r2, [pc, #160]	@ (8005350 <HAL_DMA_Start_IT+0x214>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a27      	ldr	r2, [pc, #156]	@ (8005354 <HAL_DMA_Start_IT+0x218>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <HAL_DMA_Start_IT+0x21c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a24      	ldr	r2, [pc, #144]	@ (800535c <HAL_DMA_Start_IT+0x220>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a22      	ldr	r2, [pc, #136]	@ (8005360 <HAL_DMA_Start_IT+0x224>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a21      	ldr	r2, [pc, #132]	@ (8005364 <HAL_DMA_Start_IT+0x228>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <HAL_DMA_Start_IT+0x22c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <HAL_DMA_Start_IT+0x230>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_DMA_Start_IT+0x1c0>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_DMA_Start_IT+0x1c2>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d036      	beq.n	8005370 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 021e 	bic.w	r2, r3, #30
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0216 	orr.w	r2, r2, #22
 8005314:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03e      	beq.n	800539c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e035      	b.n	800539c <HAL_DMA_Start_IT+0x260>
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 020e 	bic.w	r2, r3, #14
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 020a 	orr.w	r2, r2, #10
 8005382:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0204 	orr.w	r2, r2, #4
 800539a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a83      	ldr	r2, [pc, #524]	@ (80055b0 <HAL_DMA_Start_IT+0x474>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d072      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a82      	ldr	r2, [pc, #520]	@ (80055b4 <HAL_DMA_Start_IT+0x478>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d06d      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a80      	ldr	r2, [pc, #512]	@ (80055b8 <HAL_DMA_Start_IT+0x47c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d068      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7f      	ldr	r2, [pc, #508]	@ (80055bc <HAL_DMA_Start_IT+0x480>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d063      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7d      	ldr	r2, [pc, #500]	@ (80055c0 <HAL_DMA_Start_IT+0x484>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d05e      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a7c      	ldr	r2, [pc, #496]	@ (80055c4 <HAL_DMA_Start_IT+0x488>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d059      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7a      	ldr	r2, [pc, #488]	@ (80055c8 <HAL_DMA_Start_IT+0x48c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d054      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a79      	ldr	r2, [pc, #484]	@ (80055cc <HAL_DMA_Start_IT+0x490>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04f      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a77      	ldr	r2, [pc, #476]	@ (80055d0 <HAL_DMA_Start_IT+0x494>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a76      	ldr	r2, [pc, #472]	@ (80055d4 <HAL_DMA_Start_IT+0x498>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a74      	ldr	r2, [pc, #464]	@ (80055d8 <HAL_DMA_Start_IT+0x49c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a73      	ldr	r2, [pc, #460]	@ (80055dc <HAL_DMA_Start_IT+0x4a0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a71      	ldr	r2, [pc, #452]	@ (80055e0 <HAL_DMA_Start_IT+0x4a4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a70      	ldr	r2, [pc, #448]	@ (80055e4 <HAL_DMA_Start_IT+0x4a8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6e      	ldr	r2, [pc, #440]	@ (80055e8 <HAL_DMA_Start_IT+0x4ac>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6d      	ldr	r2, [pc, #436]	@ (80055ec <HAL_DMA_Start_IT+0x4b0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a6b      	ldr	r2, [pc, #428]	@ (80055f0 <HAL_DMA_Start_IT+0x4b4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6a      	ldr	r2, [pc, #424]	@ (80055f4 <HAL_DMA_Start_IT+0x4b8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a68      	ldr	r2, [pc, #416]	@ (80055f8 <HAL_DMA_Start_IT+0x4bc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a67      	ldr	r2, [pc, #412]	@ (80055fc <HAL_DMA_Start_IT+0x4c0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a65      	ldr	r2, [pc, #404]	@ (8005600 <HAL_DMA_Start_IT+0x4c4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a64      	ldr	r2, [pc, #400]	@ (8005604 <HAL_DMA_Start_IT+0x4c8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a62      	ldr	r2, [pc, #392]	@ (8005608 <HAL_DMA_Start_IT+0x4cc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a61      	ldr	r2, [pc, #388]	@ (800560c <HAL_DMA_Start_IT+0x4d0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_DMA_Start_IT+0x354>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <HAL_DMA_Start_IT+0x356>
 8005490:	2300      	movs	r3, #0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01a      	beq.n	80054cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a37      	ldr	r2, [pc, #220]	@ (80055b0 <HAL_DMA_Start_IT+0x474>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04a      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a36      	ldr	r2, [pc, #216]	@ (80055b4 <HAL_DMA_Start_IT+0x478>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d045      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a34      	ldr	r2, [pc, #208]	@ (80055b8 <HAL_DMA_Start_IT+0x47c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d040      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <HAL_DMA_Start_IT+0x480>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d03b      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <HAL_DMA_Start_IT+0x484>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d036      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a30      	ldr	r2, [pc, #192]	@ (80055c4 <HAL_DMA_Start_IT+0x488>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d031      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <HAL_DMA_Start_IT+0x48c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02c      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2d      	ldr	r2, [pc, #180]	@ (80055cc <HAL_DMA_Start_IT+0x490>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d027      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <HAL_DMA_Start_IT+0x494>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <HAL_DMA_Start_IT+0x498>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01d      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a28      	ldr	r2, [pc, #160]	@ (80055d8 <HAL_DMA_Start_IT+0x49c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <HAL_DMA_Start_IT+0x4a0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <HAL_DMA_Start_IT+0x4a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <HAL_DMA_Start_IT+0x4a8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	@ (80055e8 <HAL_DMA_Start_IT+0x4ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <HAL_DMA_Start_IT+0x4b0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <HAL_DMA_Start_IT+0x442>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e012      	b.n	80055a4 <HAL_DMA_Start_IT+0x468>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e009      	b.n	80055a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	58025408 	.word	0x58025408
 80055f4:	5802541c 	.word	0x5802541c
 80055f8:	58025430 	.word	0x58025430
 80055fc:	58025444 	.word	0x58025444
 8005600:	58025458 	.word	0x58025458
 8005604:	5802546c 	.word	0x5802546c
 8005608:	58025480 	.word	0x58025480
 800560c:	58025494 	.word	0x58025494

08005610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005618:	f7ff f86e 	bl	80046f8 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e2dc      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d008      	beq.n	8005646 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2280      	movs	r2, #128	@ 0x80
 8005638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e2cd      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a76      	ldr	r2, [pc, #472]	@ (8005824 <HAL_DMA_Abort+0x214>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d04a      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a74      	ldr	r2, [pc, #464]	@ (8005828 <HAL_DMA_Abort+0x218>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d045      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a73      	ldr	r2, [pc, #460]	@ (800582c <HAL_DMA_Abort+0x21c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d040      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a71      	ldr	r2, [pc, #452]	@ (8005830 <HAL_DMA_Abort+0x220>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d03b      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a70      	ldr	r2, [pc, #448]	@ (8005834 <HAL_DMA_Abort+0x224>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d036      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6e      	ldr	r2, [pc, #440]	@ (8005838 <HAL_DMA_Abort+0x228>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d031      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6d      	ldr	r2, [pc, #436]	@ (800583c <HAL_DMA_Abort+0x22c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d02c      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6b      	ldr	r2, [pc, #428]	@ (8005840 <HAL_DMA_Abort+0x230>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a6a      	ldr	r2, [pc, #424]	@ (8005844 <HAL_DMA_Abort+0x234>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a68      	ldr	r2, [pc, #416]	@ (8005848 <HAL_DMA_Abort+0x238>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a67      	ldr	r2, [pc, #412]	@ (800584c <HAL_DMA_Abort+0x23c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a65      	ldr	r2, [pc, #404]	@ (8005850 <HAL_DMA_Abort+0x240>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a64      	ldr	r2, [pc, #400]	@ (8005854 <HAL_DMA_Abort+0x244>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a62      	ldr	r2, [pc, #392]	@ (8005858 <HAL_DMA_Abort+0x248>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a61      	ldr	r2, [pc, #388]	@ (800585c <HAL_DMA_Abort+0x24c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005860 <HAL_DMA_Abort+0x250>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_Abort+0xda>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_DMA_Abort+0xdc>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 021e 	bic.w	r2, r2, #30
 80056fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800570e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e00a      	b.n	800572e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 020e 	bic.w	r2, r2, #14
 8005726:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3c      	ldr	r2, [pc, #240]	@ (8005824 <HAL_DMA_Abort+0x214>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d072      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3a      	ldr	r2, [pc, #232]	@ (8005828 <HAL_DMA_Abort+0x218>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d06d      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a39      	ldr	r2, [pc, #228]	@ (800582c <HAL_DMA_Abort+0x21c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d068      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a37      	ldr	r2, [pc, #220]	@ (8005830 <HAL_DMA_Abort+0x220>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d063      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a36      	ldr	r2, [pc, #216]	@ (8005834 <HAL_DMA_Abort+0x224>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d05e      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a34      	ldr	r2, [pc, #208]	@ (8005838 <HAL_DMA_Abort+0x228>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d059      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a33      	ldr	r2, [pc, #204]	@ (800583c <HAL_DMA_Abort+0x22c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d054      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a31      	ldr	r2, [pc, #196]	@ (8005840 <HAL_DMA_Abort+0x230>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04f      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a30      	ldr	r2, [pc, #192]	@ (8005844 <HAL_DMA_Abort+0x234>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d04a      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2e      	ldr	r2, [pc, #184]	@ (8005848 <HAL_DMA_Abort+0x238>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d045      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2d      	ldr	r2, [pc, #180]	@ (800584c <HAL_DMA_Abort+0x23c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d040      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005850 <HAL_DMA_Abort+0x240>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d03b      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005854 <HAL_DMA_Abort+0x244>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d036      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a28      	ldr	r2, [pc, #160]	@ (8005858 <HAL_DMA_Abort+0x248>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d031      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a27      	ldr	r2, [pc, #156]	@ (800585c <HAL_DMA_Abort+0x24c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d02c      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a25      	ldr	r2, [pc, #148]	@ (8005860 <HAL_DMA_Abort+0x250>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d027      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a24      	ldr	r2, [pc, #144]	@ (8005864 <HAL_DMA_Abort+0x254>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a22      	ldr	r2, [pc, #136]	@ (8005868 <HAL_DMA_Abort+0x258>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	@ (800586c <HAL_DMA_Abort+0x25c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HAL_DMA_Abort+0x260>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005874 <HAL_DMA_Abort+0x264>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <HAL_DMA_Abort+0x268>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_DMA_Abort+0x26c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <HAL_DMA_Abort+0x270>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d132      	bne.n	8005884 <HAL_DMA_Abort+0x274>
 800581e:	2301      	movs	r3, #1
 8005820:	e031      	b.n	8005886 <HAL_DMA_Abort+0x276>
 8005822:	bf00      	nop
 8005824:	40020010 	.word	0x40020010
 8005828:	40020028 	.word	0x40020028
 800582c:	40020040 	.word	0x40020040
 8005830:	40020058 	.word	0x40020058
 8005834:	40020070 	.word	0x40020070
 8005838:	40020088 	.word	0x40020088
 800583c:	400200a0 	.word	0x400200a0
 8005840:	400200b8 	.word	0x400200b8
 8005844:	40020410 	.word	0x40020410
 8005848:	40020428 	.word	0x40020428
 800584c:	40020440 	.word	0x40020440
 8005850:	40020458 	.word	0x40020458
 8005854:	40020470 	.word	0x40020470
 8005858:	40020488 	.word	0x40020488
 800585c:	400204a0 	.word	0x400204a0
 8005860:	400204b8 	.word	0x400204b8
 8005864:	58025408 	.word	0x58025408
 8005868:	5802541c 	.word	0x5802541c
 800586c:	58025430 	.word	0x58025430
 8005870:	58025444 	.word	0x58025444
 8005874:	58025458 	.word	0x58025458
 8005878:	5802546c 	.word	0x5802546c
 800587c:	58025480 	.word	0x58025480
 8005880:	58025494 	.word	0x58025494
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005898:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a54 <HAL_DMA_Abort+0x444>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6b      	ldr	r2, [pc, #428]	@ (8005a58 <HAL_DMA_Abort+0x448>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a5c <HAL_DMA_Abort+0x44c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a68      	ldr	r2, [pc, #416]	@ (8005a60 <HAL_DMA_Abort+0x450>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a67      	ldr	r2, [pc, #412]	@ (8005a64 <HAL_DMA_Abort+0x454>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a65      	ldr	r2, [pc, #404]	@ (8005a68 <HAL_DMA_Abort+0x458>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a64      	ldr	r2, [pc, #400]	@ (8005a6c <HAL_DMA_Abort+0x45c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a62      	ldr	r2, [pc, #392]	@ (8005a70 <HAL_DMA_Abort+0x460>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a61      	ldr	r2, [pc, #388]	@ (8005a74 <HAL_DMA_Abort+0x464>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a78 <HAL_DMA_Abort+0x468>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5e      	ldr	r2, [pc, #376]	@ (8005a7c <HAL_DMA_Abort+0x46c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5c      	ldr	r2, [pc, #368]	@ (8005a80 <HAL_DMA_Abort+0x470>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5b      	ldr	r2, [pc, #364]	@ (8005a84 <HAL_DMA_Abort+0x474>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a59      	ldr	r2, [pc, #356]	@ (8005a88 <HAL_DMA_Abort+0x478>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a58      	ldr	r2, [pc, #352]	@ (8005a8c <HAL_DMA_Abort+0x47c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a56      	ldr	r2, [pc, #344]	@ (8005a90 <HAL_DMA_Abort+0x480>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <HAL_DMA_Abort+0x33c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e007      	b.n	800595c <HAL_DMA_Abort+0x34c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800595c:	e013      	b.n	8005986 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800595e:	f7fe fecb 	bl	80046f8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b05      	cmp	r3, #5
 800596a:	d90c      	bls.n	8005986 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2203      	movs	r2, #3
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e12d      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2f      	ldr	r2, [pc, #188]	@ (8005a54 <HAL_DMA_Abort+0x444>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d04a      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <HAL_DMA_Abort+0x448>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d045      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2c      	ldr	r2, [pc, #176]	@ (8005a5c <HAL_DMA_Abort+0x44c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d040      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a60 <HAL_DMA_Abort+0x450>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d03b      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a29      	ldr	r2, [pc, #164]	@ (8005a64 <HAL_DMA_Abort+0x454>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d036      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a27      	ldr	r2, [pc, #156]	@ (8005a68 <HAL_DMA_Abort+0x458>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d031      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <HAL_DMA_Abort+0x45c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d02c      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a24      	ldr	r2, [pc, #144]	@ (8005a70 <HAL_DMA_Abort+0x460>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d027      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a23      	ldr	r2, [pc, #140]	@ (8005a74 <HAL_DMA_Abort+0x464>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a21      	ldr	r2, [pc, #132]	@ (8005a78 <HAL_DMA_Abort+0x468>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01d      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a20      	ldr	r2, [pc, #128]	@ (8005a7c <HAL_DMA_Abort+0x46c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <HAL_DMA_Abort+0x470>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005a84 <HAL_DMA_Abort+0x474>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	@ (8005a88 <HAL_DMA_Abort+0x478>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	@ (8005a8c <HAL_DMA_Abort+0x47c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	@ (8005a90 <HAL_DMA_Abort+0x480>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Abort+0x426>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_Abort+0x428>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d02b      	beq.n	8005a94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	223f      	movs	r2, #63	@ 0x3f
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e02a      	b.n	8005aaa <HAL_DMA_Abort+0x49a>
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4f      	ldr	r2, [pc, #316]	@ (8005bec <HAL_DMA_Abort+0x5dc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d072      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8005bf0 <HAL_DMA_Abort+0x5e0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d06d      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8005bf4 <HAL_DMA_Abort+0x5e4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d068      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf8 <HAL_DMA_Abort+0x5e8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d063      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a49      	ldr	r2, [pc, #292]	@ (8005bfc <HAL_DMA_Abort+0x5ec>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d05e      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a47      	ldr	r2, [pc, #284]	@ (8005c00 <HAL_DMA_Abort+0x5f0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d059      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a46      	ldr	r2, [pc, #280]	@ (8005c04 <HAL_DMA_Abort+0x5f4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d054      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a44      	ldr	r2, [pc, #272]	@ (8005c08 <HAL_DMA_Abort+0x5f8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04f      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a43      	ldr	r2, [pc, #268]	@ (8005c0c <HAL_DMA_Abort+0x5fc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a41      	ldr	r2, [pc, #260]	@ (8005c10 <HAL_DMA_Abort+0x600>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a40      	ldr	r2, [pc, #256]	@ (8005c14 <HAL_DMA_Abort+0x604>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c18 <HAL_DMA_Abort+0x608>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3d      	ldr	r2, [pc, #244]	@ (8005c1c <HAL_DMA_Abort+0x60c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <HAL_DMA_Abort+0x610>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c24 <HAL_DMA_Abort+0x614>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a38      	ldr	r2, [pc, #224]	@ (8005c28 <HAL_DMA_Abort+0x618>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a37      	ldr	r2, [pc, #220]	@ (8005c2c <HAL_DMA_Abort+0x61c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	@ (8005c30 <HAL_DMA_Abort+0x620>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a34      	ldr	r2, [pc, #208]	@ (8005c34 <HAL_DMA_Abort+0x624>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a32      	ldr	r2, [pc, #200]	@ (8005c38 <HAL_DMA_Abort+0x628>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a31      	ldr	r2, [pc, #196]	@ (8005c3c <HAL_DMA_Abort+0x62c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2f      	ldr	r2, [pc, #188]	@ (8005c40 <HAL_DMA_Abort+0x630>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c44 <HAL_DMA_Abort+0x634>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <HAL_DMA_Abort+0x638>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Abort+0x58e>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_DMA_Abort+0x590>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005bac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8
 8005c2c:	58025408 	.word	0x58025408
 8005c30:	5802541c 	.word	0x5802541c
 8005c34:	58025430 	.word	0x58025430
 8005c38:	58025444 	.word	0x58025444
 8005c3c:	58025458 	.word	0x58025458
 8005c40:	5802546c 	.word	0x5802546c
 8005c44:	58025480 	.word	0x58025480
 8005c48:	58025494 	.word	0x58025494

08005c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e237      	b.n	80060ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d004      	beq.n	8005c74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2280      	movs	r2, #128	@ 0x80
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e22c      	b.n	80060ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5c      	ldr	r2, [pc, #368]	@ (8005dec <HAL_DMA_Abort_IT+0x1a0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5b      	ldr	r2, [pc, #364]	@ (8005df0 <HAL_DMA_Abort_IT+0x1a4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a59      	ldr	r2, [pc, #356]	@ (8005df4 <HAL_DMA_Abort_IT+0x1a8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a58      	ldr	r2, [pc, #352]	@ (8005df8 <HAL_DMA_Abort_IT+0x1ac>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a56      	ldr	r2, [pc, #344]	@ (8005dfc <HAL_DMA_Abort_IT+0x1b0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a55      	ldr	r2, [pc, #340]	@ (8005e00 <HAL_DMA_Abort_IT+0x1b4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a53      	ldr	r2, [pc, #332]	@ (8005e04 <HAL_DMA_Abort_IT+0x1b8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a52      	ldr	r2, [pc, #328]	@ (8005e08 <HAL_DMA_Abort_IT+0x1bc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a50      	ldr	r2, [pc, #320]	@ (8005e0c <HAL_DMA_Abort_IT+0x1c0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8005e10 <HAL_DMA_Abort_IT+0x1c4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8005e14 <HAL_DMA_Abort_IT+0x1c8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8005e18 <HAL_DMA_Abort_IT+0x1cc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8005e1c <HAL_DMA_Abort_IT+0x1d0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a49      	ldr	r2, [pc, #292]	@ (8005e20 <HAL_DMA_Abort_IT+0x1d4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a47      	ldr	r2, [pc, #284]	@ (8005e24 <HAL_DMA_Abort_IT+0x1d8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a46      	ldr	r2, [pc, #280]	@ (8005e28 <HAL_DMA_Abort_IT+0x1dc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_DMA_Abort_IT+0xcc>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_DMA_Abort_IT+0xce>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8086 	beq.w	8005e2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005dec <HAL_DMA_Abort_IT+0x1a0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04a      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2e      	ldr	r2, [pc, #184]	@ (8005df0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d045      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	@ (8005df4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d040      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005df8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d03b      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <HAL_DMA_Abort_IT+0x1b0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d036      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	@ (8005e00 <HAL_DMA_Abort_IT+0x1b4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <HAL_DMA_Abort_IT+0x1b8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02c      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	@ (8005e08 <HAL_DMA_Abort_IT+0x1bc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d027      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a23      	ldr	r2, [pc, #140]	@ (8005e0c <HAL_DMA_Abort_IT+0x1c0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a22      	ldr	r2, [pc, #136]	@ (8005e10 <HAL_DMA_Abort_IT+0x1c4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a20      	ldr	r2, [pc, #128]	@ (8005e14 <HAL_DMA_Abort_IT+0x1c8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_DMA_Abort_IT+0x1cc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_DMA_Abort_IT+0x1d0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_DMA_Abort_IT+0x1d4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e24 <HAL_DMA_Abort_IT+0x1d8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a19      	ldr	r2, [pc, #100]	@ (8005e28 <HAL_DMA_Abort_IT+0x1dc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_DMA_Abort_IT+0x18e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e178      	b.n	80060cc <HAL_DMA_Abort_IT+0x480>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e16f      	b.n	80060cc <HAL_DMA_Abort_IT+0x480>
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 020e 	bic.w	r2, r2, #14
 8005e3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6c      	ldr	r2, [pc, #432]	@ (8005ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a69      	ldr	r2, [pc, #420]	@ (8005ffc <HAL_DMA_Abort_IT+0x3b0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a68      	ldr	r2, [pc, #416]	@ (8006000 <HAL_DMA_Abort_IT+0x3b4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a66      	ldr	r2, [pc, #408]	@ (8006004 <HAL_DMA_Abort_IT+0x3b8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a65      	ldr	r2, [pc, #404]	@ (8006008 <HAL_DMA_Abort_IT+0x3bc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a63      	ldr	r2, [pc, #396]	@ (800600c <HAL_DMA_Abort_IT+0x3c0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a62      	ldr	r2, [pc, #392]	@ (8006010 <HAL_DMA_Abort_IT+0x3c4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a60      	ldr	r2, [pc, #384]	@ (8006014 <HAL_DMA_Abort_IT+0x3c8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8006018 <HAL_DMA_Abort_IT+0x3cc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800601c <HAL_DMA_Abort_IT+0x3d0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5c      	ldr	r2, [pc, #368]	@ (8006020 <HAL_DMA_Abort_IT+0x3d4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8006024 <HAL_DMA_Abort_IT+0x3d8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a59      	ldr	r2, [pc, #356]	@ (8006028 <HAL_DMA_Abort_IT+0x3dc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a57      	ldr	r2, [pc, #348]	@ (800602c <HAL_DMA_Abort_IT+0x3e0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a56      	ldr	r2, [pc, #344]	@ (8006030 <HAL_DMA_Abort_IT+0x3e4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <HAL_DMA_Abort_IT+0x2a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e007      	b.n	8005efe <HAL_DMA_Abort_IT+0x2b2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3c      	ldr	r2, [pc, #240]	@ (8005ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d072      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8005ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d06d      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a39      	ldr	r2, [pc, #228]	@ (8005ffc <HAL_DMA_Abort_IT+0x3b0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d068      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a37      	ldr	r2, [pc, #220]	@ (8006000 <HAL_DMA_Abort_IT+0x3b4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d063      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a36      	ldr	r2, [pc, #216]	@ (8006004 <HAL_DMA_Abort_IT+0x3b8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d05e      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a34      	ldr	r2, [pc, #208]	@ (8006008 <HAL_DMA_Abort_IT+0x3bc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d059      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a33      	ldr	r2, [pc, #204]	@ (800600c <HAL_DMA_Abort_IT+0x3c0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d054      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a31      	ldr	r2, [pc, #196]	@ (8006010 <HAL_DMA_Abort_IT+0x3c4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04f      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <HAL_DMA_Abort_IT+0x3c8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d04a      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <HAL_DMA_Abort_IT+0x3cc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d045      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <HAL_DMA_Abort_IT+0x3d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d040      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2b      	ldr	r2, [pc, #172]	@ (8006020 <HAL_DMA_Abort_IT+0x3d4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d03b      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8006024 <HAL_DMA_Abort_IT+0x3d8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d036      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a28      	ldr	r2, [pc, #160]	@ (8006028 <HAL_DMA_Abort_IT+0x3dc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d031      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a27      	ldr	r2, [pc, #156]	@ (800602c <HAL_DMA_Abort_IT+0x3e0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d02c      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a25      	ldr	r2, [pc, #148]	@ (8006030 <HAL_DMA_Abort_IT+0x3e4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d027      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <HAL_DMA_Abort_IT+0x3e8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	@ (8006038 <HAL_DMA_Abort_IT+0x3ec>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	@ (800603c <HAL_DMA_Abort_IT+0x3f0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006040 <HAL_DMA_Abort_IT+0x3f4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	@ (8006044 <HAL_DMA_Abort_IT+0x3f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <HAL_DMA_Abort_IT+0x3fc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	@ (800604c <HAL_DMA_Abort_IT+0x400>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	@ (8006050 <HAL_DMA_Abort_IT+0x404>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d132      	bne.n	8006054 <HAL_DMA_Abort_IT+0x408>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e031      	b.n	8006056 <HAL_DMA_Abort_IT+0x40a>
 8005ff2:	bf00      	nop
 8005ff4:	40020010 	.word	0x40020010
 8005ff8:	40020028 	.word	0x40020028
 8005ffc:	40020040 	.word	0x40020040
 8006000:	40020058 	.word	0x40020058
 8006004:	40020070 	.word	0x40020070
 8006008:	40020088 	.word	0x40020088
 800600c:	400200a0 	.word	0x400200a0
 8006010:	400200b8 	.word	0x400200b8
 8006014:	40020410 	.word	0x40020410
 8006018:	40020428 	.word	0x40020428
 800601c:	40020440 	.word	0x40020440
 8006020:	40020458 	.word	0x40020458
 8006024:	40020470 	.word	0x40020470
 8006028:	40020488 	.word	0x40020488
 800602c:	400204a0 	.word	0x400204a0
 8006030:	400204b8 	.word	0x400204b8
 8006034:	58025408 	.word	0x58025408
 8006038:	5802541c 	.word	0x5802541c
 800603c:	58025430 	.word	0x58025430
 8006040:	58025444 	.word	0x58025444
 8006044:	58025458 	.word	0x58025458
 8006048:	5802546c 	.word	0x5802546c
 800604c:	58025480 	.word	0x58025480
 8006050:	58025494 	.word	0x58025494
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d028      	beq.n	80060ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006068:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006088:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060e4:	4b67      	ldr	r3, [pc, #412]	@ (8006284 <HAL_DMA_IRQHandler+0x1ac>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a67      	ldr	r2, [pc, #412]	@ (8006288 <HAL_DMA_IRQHandler+0x1b0>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5f      	ldr	r2, [pc, #380]	@ (800628c <HAL_DMA_IRQHandler+0x1b4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04a      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5d      	ldr	r2, [pc, #372]	@ (8006290 <HAL_DMA_IRQHandler+0x1b8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5c      	ldr	r2, [pc, #368]	@ (8006294 <HAL_DMA_IRQHandler+0x1bc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d040      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5a      	ldr	r2, [pc, #360]	@ (8006298 <HAL_DMA_IRQHandler+0x1c0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03b      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a59      	ldr	r2, [pc, #356]	@ (800629c <HAL_DMA_IRQHandler+0x1c4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d036      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a57      	ldr	r2, [pc, #348]	@ (80062a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d031      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a56      	ldr	r2, [pc, #344]	@ (80062a4 <HAL_DMA_IRQHandler+0x1cc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02c      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a54      	ldr	r2, [pc, #336]	@ (80062a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d027      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a53      	ldr	r2, [pc, #332]	@ (80062ac <HAL_DMA_IRQHandler+0x1d4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a51      	ldr	r2, [pc, #324]	@ (80062b0 <HAL_DMA_IRQHandler+0x1d8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a50      	ldr	r2, [pc, #320]	@ (80062b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a4e      	ldr	r2, [pc, #312]	@ (80062b8 <HAL_DMA_IRQHandler+0x1e0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a4d      	ldr	r2, [pc, #308]	@ (80062bc <HAL_DMA_IRQHandler+0x1e4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a4b      	ldr	r2, [pc, #300]	@ (80062c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4a      	ldr	r2, [pc, #296]	@ (80062c4 <HAL_DMA_IRQHandler+0x1ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a48      	ldr	r2, [pc, #288]	@ (80062c8 <HAL_DMA_IRQHandler+0x1f0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d101      	bne.n	80061ae <HAL_DMA_IRQHandler+0xd6>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <HAL_DMA_IRQHandler+0xd8>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 842b 	beq.w	8006a0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2208      	movs	r2, #8
 80061c0:	409a      	lsls	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a2 	beq.w	8006310 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2e      	ldr	r2, [pc, #184]	@ (800628c <HAL_DMA_IRQHandler+0x1b4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d04a      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2d      	ldr	r2, [pc, #180]	@ (8006290 <HAL_DMA_IRQHandler+0x1b8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d045      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <HAL_DMA_IRQHandler+0x1bc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d040      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <HAL_DMA_IRQHandler+0x1c0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d03b      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	@ (800629c <HAL_DMA_IRQHandler+0x1c4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d036      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a27      	ldr	r2, [pc, #156]	@ (80062a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d031      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a25      	ldr	r2, [pc, #148]	@ (80062a4 <HAL_DMA_IRQHandler+0x1cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d02c      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a24      	ldr	r2, [pc, #144]	@ (80062a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d027      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a22      	ldr	r2, [pc, #136]	@ (80062ac <HAL_DMA_IRQHandler+0x1d4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a21      	ldr	r2, [pc, #132]	@ (80062b0 <HAL_DMA_IRQHandler+0x1d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1f      	ldr	r2, [pc, #124]	@ (80062b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <HAL_DMA_IRQHandler+0x1e4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	@ (80062c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a19      	ldr	r2, [pc, #100]	@ (80062c4 <HAL_DMA_IRQHandler+0x1ec>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	@ (80062c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d12f      	bne.n	80062cc <HAL_DMA_IRQHandler+0x1f4>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e02e      	b.n	80062e0 <HAL_DMA_IRQHandler+0x208>
 8006282:	bf00      	nop
 8006284:	240000c0 	.word	0x240000c0
 8006288:	1b4e81b5 	.word	0x1b4e81b5
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2208      	movs	r2, #8
 80062fe:	409a      	lsls	r2, r3
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d06e      	beq.n	8006404 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a69      	ldr	r2, [pc, #420]	@ (80064d0 <HAL_DMA_IRQHandler+0x3f8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a67      	ldr	r2, [pc, #412]	@ (80064d4 <HAL_DMA_IRQHandler+0x3fc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a66      	ldr	r2, [pc, #408]	@ (80064d8 <HAL_DMA_IRQHandler+0x400>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a64      	ldr	r2, [pc, #400]	@ (80064dc <HAL_DMA_IRQHandler+0x404>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a63      	ldr	r2, [pc, #396]	@ (80064e0 <HAL_DMA_IRQHandler+0x408>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a61      	ldr	r2, [pc, #388]	@ (80064e4 <HAL_DMA_IRQHandler+0x40c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a60      	ldr	r2, [pc, #384]	@ (80064e8 <HAL_DMA_IRQHandler+0x410>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5e      	ldr	r2, [pc, #376]	@ (80064ec <HAL_DMA_IRQHandler+0x414>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5d      	ldr	r2, [pc, #372]	@ (80064f0 <HAL_DMA_IRQHandler+0x418>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5b      	ldr	r2, [pc, #364]	@ (80064f4 <HAL_DMA_IRQHandler+0x41c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a5a      	ldr	r2, [pc, #360]	@ (80064f8 <HAL_DMA_IRQHandler+0x420>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a58      	ldr	r2, [pc, #352]	@ (80064fc <HAL_DMA_IRQHandler+0x424>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a57      	ldr	r2, [pc, #348]	@ (8006500 <HAL_DMA_IRQHandler+0x428>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a55      	ldr	r2, [pc, #340]	@ (8006504 <HAL_DMA_IRQHandler+0x42c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a54      	ldr	r2, [pc, #336]	@ (8006508 <HAL_DMA_IRQHandler+0x430>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a52      	ldr	r2, [pc, #328]	@ (800650c <HAL_DMA_IRQHandler+0x434>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10a      	bne.n	80063dc <HAL_DMA_IRQHandler+0x304>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e003      	b.n	80063e4 <HAL_DMA_IRQHandler+0x30c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00d      	beq.n	8006404 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	f043 0202 	orr.w	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2204      	movs	r2, #4
 800640e:	409a      	lsls	r2, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 808f 	beq.w	8006538 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2c      	ldr	r2, [pc, #176]	@ (80064d0 <HAL_DMA_IRQHandler+0x3f8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d04a      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2a      	ldr	r2, [pc, #168]	@ (80064d4 <HAL_DMA_IRQHandler+0x3fc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d045      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a29      	ldr	r2, [pc, #164]	@ (80064d8 <HAL_DMA_IRQHandler+0x400>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d040      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a27      	ldr	r2, [pc, #156]	@ (80064dc <HAL_DMA_IRQHandler+0x404>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d03b      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a26      	ldr	r2, [pc, #152]	@ (80064e0 <HAL_DMA_IRQHandler+0x408>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d036      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a24      	ldr	r2, [pc, #144]	@ (80064e4 <HAL_DMA_IRQHandler+0x40c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d031      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a23      	ldr	r2, [pc, #140]	@ (80064e8 <HAL_DMA_IRQHandler+0x410>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d02c      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <HAL_DMA_IRQHandler+0x414>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d027      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a20      	ldr	r2, [pc, #128]	@ (80064f0 <HAL_DMA_IRQHandler+0x418>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <HAL_DMA_IRQHandler+0x41c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01d      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <HAL_DMA_IRQHandler+0x420>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1b      	ldr	r2, [pc, #108]	@ (80064fc <HAL_DMA_IRQHandler+0x424>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1a      	ldr	r2, [pc, #104]	@ (8006500 <HAL_DMA_IRQHandler+0x428>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a18      	ldr	r2, [pc, #96]	@ (8006504 <HAL_DMA_IRQHandler+0x42c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	@ (8006508 <HAL_DMA_IRQHandler+0x430>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a15      	ldr	r2, [pc, #84]	@ (800650c <HAL_DMA_IRQHandler+0x434>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d12a      	bne.n	8006510 <HAL_DMA_IRQHandler+0x438>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e023      	b.n	8006518 <HAL_DMA_IRQHandler+0x440>
 80064d0:	40020010 	.word	0x40020010
 80064d4:	40020028 	.word	0x40020028
 80064d8:	40020040 	.word	0x40020040
 80064dc:	40020058 	.word	0x40020058
 80064e0:	40020070 	.word	0x40020070
 80064e4:	40020088 	.word	0x40020088
 80064e8:	400200a0 	.word	0x400200a0
 80064ec:	400200b8 	.word	0x400200b8
 80064f0:	40020410 	.word	0x40020410
 80064f4:	40020428 	.word	0x40020428
 80064f8:	40020440 	.word	0x40020440
 80064fc:	40020458 	.word	0x40020458
 8006500:	40020470 	.word	0x40020470
 8006504:	40020488 	.word	0x40020488
 8006508:	400204a0 	.word	0x400204a0
 800650c:	400204b8 	.word	0x400204b8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2204      	movs	r2, #4
 8006526:	409a      	lsls	r2, r3
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006530:	f043 0204 	orr.w	r2, r3, #4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2210      	movs	r2, #16
 8006542:	409a      	lsls	r2, r3
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80a6 	beq.w	800669a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a85      	ldr	r2, [pc, #532]	@ (8006768 <HAL_DMA_IRQHandler+0x690>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04a      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a83      	ldr	r2, [pc, #524]	@ (800676c <HAL_DMA_IRQHandler+0x694>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d045      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a82      	ldr	r2, [pc, #520]	@ (8006770 <HAL_DMA_IRQHandler+0x698>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d040      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a80      	ldr	r2, [pc, #512]	@ (8006774 <HAL_DMA_IRQHandler+0x69c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d03b      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a7f      	ldr	r2, [pc, #508]	@ (8006778 <HAL_DMA_IRQHandler+0x6a0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d036      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a7d      	ldr	r2, [pc, #500]	@ (800677c <HAL_DMA_IRQHandler+0x6a4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d031      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a7c      	ldr	r2, [pc, #496]	@ (8006780 <HAL_DMA_IRQHandler+0x6a8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d02c      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7a      	ldr	r2, [pc, #488]	@ (8006784 <HAL_DMA_IRQHandler+0x6ac>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d027      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a79      	ldr	r2, [pc, #484]	@ (8006788 <HAL_DMA_IRQHandler+0x6b0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a77      	ldr	r2, [pc, #476]	@ (800678c <HAL_DMA_IRQHandler+0x6b4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a76      	ldr	r2, [pc, #472]	@ (8006790 <HAL_DMA_IRQHandler+0x6b8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a74      	ldr	r2, [pc, #464]	@ (8006794 <HAL_DMA_IRQHandler+0x6bc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a73      	ldr	r2, [pc, #460]	@ (8006798 <HAL_DMA_IRQHandler+0x6c0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a71      	ldr	r2, [pc, #452]	@ (800679c <HAL_DMA_IRQHandler+0x6c4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a70      	ldr	r2, [pc, #448]	@ (80067a0 <HAL_DMA_IRQHandler+0x6c8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6e      	ldr	r2, [pc, #440]	@ (80067a4 <HAL_DMA_IRQHandler+0x6cc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10a      	bne.n	8006604 <HAL_DMA_IRQHandler+0x52c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e009      	b.n	8006618 <HAL_DMA_IRQHandler+0x540>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf14      	ite	ne
 8006612:	2301      	movne	r3, #1
 8006614:	2300      	moveq	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d03e      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	2210      	movs	r2, #16
 8006626:	409a      	lsls	r2, r3
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d024      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
 8006658:	e01f      	b.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01b      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	e016      	b.n	800669a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0208 	bic.w	r2, r2, #8
 8006688:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2220      	movs	r2, #32
 80066a4:	409a      	lsls	r2, r3
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8110 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <HAL_DMA_IRQHandler+0x690>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04a      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <HAL_DMA_IRQHandler+0x694>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d045      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a29      	ldr	r2, [pc, #164]	@ (8006770 <HAL_DMA_IRQHandler+0x698>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d040      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a28      	ldr	r2, [pc, #160]	@ (8006774 <HAL_DMA_IRQHandler+0x69c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d03b      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <HAL_DMA_IRQHandler+0x6a0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d036      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a25      	ldr	r2, [pc, #148]	@ (800677c <HAL_DMA_IRQHandler+0x6a4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d031      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a23      	ldr	r2, [pc, #140]	@ (8006780 <HAL_DMA_IRQHandler+0x6a8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d02c      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a22      	ldr	r2, [pc, #136]	@ (8006784 <HAL_DMA_IRQHandler+0x6ac>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d027      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a20      	ldr	r2, [pc, #128]	@ (8006788 <HAL_DMA_IRQHandler+0x6b0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1f      	ldr	r2, [pc, #124]	@ (800678c <HAL_DMA_IRQHandler+0x6b4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_DMA_IRQHandler+0x6b8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	@ (8006794 <HAL_DMA_IRQHandler+0x6bc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <HAL_DMA_IRQHandler+0x6c0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a19      	ldr	r2, [pc, #100]	@ (800679c <HAL_DMA_IRQHandler+0x6c4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a17      	ldr	r2, [pc, #92]	@ (80067a0 <HAL_DMA_IRQHandler+0x6c8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <HAL_DMA_IRQHandler+0x6cc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d12b      	bne.n	80067a8 <HAL_DMA_IRQHandler+0x6d0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e02a      	b.n	80067bc <HAL_DMA_IRQHandler+0x6e4>
 8006766:	bf00      	nop
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8087 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2220      	movs	r2, #32
 80067cc:	409a      	lsls	r2, r3
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d139      	bne.n	8006852 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0216 	bic.w	r2, r2, #22
 80067ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <HAL_DMA_IRQHandler+0x736>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0208 	bic.w	r2, r2, #8
 800681c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	223f      	movs	r2, #63	@ 0x3f
 8006828:	409a      	lsls	r2, r3
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8382 	beq.w	8006f4c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
          }
          return;
 8006850:	e37c      	b.n	8006f4c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d018      	beq.n	8006892 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d108      	bne.n	8006880 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	2b00      	cmp	r3, #0
 8006874:	d02c      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	e027      	b.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d023      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	e01e      	b.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10f      	bne.n	80068c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0210 	bic.w	r2, r2, #16
 80068ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 833e 	beq.w	8006f56 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8088 	beq.w	80069f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a89      	ldr	r2, [pc, #548]	@ (8006b1c <HAL_DMA_IRQHandler+0xa44>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d04a      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a88      	ldr	r2, [pc, #544]	@ (8006b20 <HAL_DMA_IRQHandler+0xa48>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d045      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a86      	ldr	r2, [pc, #536]	@ (8006b24 <HAL_DMA_IRQHandler+0xa4c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d040      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a85      	ldr	r2, [pc, #532]	@ (8006b28 <HAL_DMA_IRQHandler+0xa50>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d03b      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a83      	ldr	r2, [pc, #524]	@ (8006b2c <HAL_DMA_IRQHandler+0xa54>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d036      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a82      	ldr	r2, [pc, #520]	@ (8006b30 <HAL_DMA_IRQHandler+0xa58>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d031      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a80      	ldr	r2, [pc, #512]	@ (8006b34 <HAL_DMA_IRQHandler+0xa5c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d02c      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7f      	ldr	r2, [pc, #508]	@ (8006b38 <HAL_DMA_IRQHandler+0xa60>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d027      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7d      	ldr	r2, [pc, #500]	@ (8006b3c <HAL_DMA_IRQHandler+0xa64>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d022      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b40 <HAL_DMA_IRQHandler+0xa68>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01d      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7a      	ldr	r2, [pc, #488]	@ (8006b44 <HAL_DMA_IRQHandler+0xa6c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a79      	ldr	r2, [pc, #484]	@ (8006b48 <HAL_DMA_IRQHandler+0xa70>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	@ (8006b4c <HAL_DMA_IRQHandler+0xa74>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a76      	ldr	r2, [pc, #472]	@ (8006b50 <HAL_DMA_IRQHandler+0xa78>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	@ (8006b54 <HAL_DMA_IRQHandler+0xa7c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a73      	ldr	r2, [pc, #460]	@ (8006b58 <HAL_DMA_IRQHandler+0xa80>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d108      	bne.n	80069a2 <HAL_DMA_IRQHandler+0x8ca>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e007      	b.n	80069b2 <HAL_DMA_IRQHandler+0x8da>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d307      	bcc.n	80069ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f2      	bne.n	80069b2 <HAL_DMA_IRQHandler+0x8da>
 80069cc:	e000      	b.n	80069d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80069e6:	e003      	b.n	80069f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 82aa 	beq.w	8006f56 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	e2a4      	b.n	8006f56 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a52      	ldr	r2, [pc, #328]	@ (8006b5c <HAL_DMA_IRQHandler+0xa84>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d04a      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a51      	ldr	r2, [pc, #324]	@ (8006b60 <HAL_DMA_IRQHandler+0xa88>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d045      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a4f      	ldr	r2, [pc, #316]	@ (8006b64 <HAL_DMA_IRQHandler+0xa8c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d040      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8006b68 <HAL_DMA_IRQHandler+0xa90>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d03b      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4c      	ldr	r2, [pc, #304]	@ (8006b6c <HAL_DMA_IRQHandler+0xa94>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d036      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4b      	ldr	r2, [pc, #300]	@ (8006b70 <HAL_DMA_IRQHandler+0xa98>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d031      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a49      	ldr	r2, [pc, #292]	@ (8006b74 <HAL_DMA_IRQHandler+0xa9c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d02c      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a48      	ldr	r2, [pc, #288]	@ (8006b78 <HAL_DMA_IRQHandler+0xaa0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d027      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a46      	ldr	r2, [pc, #280]	@ (8006b7c <HAL_DMA_IRQHandler+0xaa4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d022      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a45      	ldr	r2, [pc, #276]	@ (8006b80 <HAL_DMA_IRQHandler+0xaa8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d01d      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a43      	ldr	r2, [pc, #268]	@ (8006b84 <HAL_DMA_IRQHandler+0xaac>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d018      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a42      	ldr	r2, [pc, #264]	@ (8006b88 <HAL_DMA_IRQHandler+0xab0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a40      	ldr	r2, [pc, #256]	@ (8006b8c <HAL_DMA_IRQHandler+0xab4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00e      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a3f      	ldr	r2, [pc, #252]	@ (8006b90 <HAL_DMA_IRQHandler+0xab8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d009      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b94 <HAL_DMA_IRQHandler+0xabc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_DMA_IRQHandler+0x9d4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8006b98 <HAL_DMA_IRQHandler+0xac0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d101      	bne.n	8006ab0 <HAL_DMA_IRQHandler+0x9d8>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <HAL_DMA_IRQHandler+0x9da>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 824f 	beq.w	8006f56 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2204      	movs	r2, #4
 8006aca:	409a      	lsls	r2, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80dd 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xbb8>
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80d7 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2204      	movs	r2, #4
 8006aec:	409a      	lsls	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d059      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d14a      	bne.n	8006b9c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8220 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b18:	e21a      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe78>
 8006b1a:	bf00      	nop
 8006b1c:	40020010 	.word	0x40020010
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40020040 	.word	0x40020040
 8006b28:	40020058 	.word	0x40020058
 8006b2c:	40020070 	.word	0x40020070
 8006b30:	40020088 	.word	0x40020088
 8006b34:	400200a0 	.word	0x400200a0
 8006b38:	400200b8 	.word	0x400200b8
 8006b3c:	40020410 	.word	0x40020410
 8006b40:	40020428 	.word	0x40020428
 8006b44:	40020440 	.word	0x40020440
 8006b48:	40020458 	.word	0x40020458
 8006b4c:	40020470 	.word	0x40020470
 8006b50:	40020488 	.word	0x40020488
 8006b54:	400204a0 	.word	0x400204a0
 8006b58:	400204b8 	.word	0x400204b8
 8006b5c:	48022c08 	.word	0x48022c08
 8006b60:	48022c1c 	.word	0x48022c1c
 8006b64:	48022c30 	.word	0x48022c30
 8006b68:	48022c44 	.word	0x48022c44
 8006b6c:	48022c58 	.word	0x48022c58
 8006b70:	48022c6c 	.word	0x48022c6c
 8006b74:	48022c80 	.word	0x48022c80
 8006b78:	48022c94 	.word	0x48022c94
 8006b7c:	58025408 	.word	0x58025408
 8006b80:	5802541c 	.word	0x5802541c
 8006b84:	58025430 	.word	0x58025430
 8006b88:	58025444 	.word	0x58025444
 8006b8c:	58025458 	.word	0x58025458
 8006b90:	5802546c 	.word	0x5802546c
 8006b94:	58025480 	.word	0x58025480
 8006b98:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 81d5 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bae:	e1cf      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d160      	bne.n	8006c7c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a7f      	ldr	r2, [pc, #508]	@ (8006dbc <HAL_DMA_IRQHandler+0xce4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d04a      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a7d      	ldr	r2, [pc, #500]	@ (8006dc0 <HAL_DMA_IRQHandler+0xce8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d045      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	@ (8006dc4 <HAL_DMA_IRQHandler+0xcec>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d040      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a7a      	ldr	r2, [pc, #488]	@ (8006dc8 <HAL_DMA_IRQHandler+0xcf0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d03b      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a79      	ldr	r2, [pc, #484]	@ (8006dcc <HAL_DMA_IRQHandler+0xcf4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d036      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a77      	ldr	r2, [pc, #476]	@ (8006dd0 <HAL_DMA_IRQHandler+0xcf8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d031      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a76      	ldr	r2, [pc, #472]	@ (8006dd4 <HAL_DMA_IRQHandler+0xcfc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d02c      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a74      	ldr	r2, [pc, #464]	@ (8006dd8 <HAL_DMA_IRQHandler+0xd00>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d027      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a73      	ldr	r2, [pc, #460]	@ (8006ddc <HAL_DMA_IRQHandler+0xd04>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d022      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a71      	ldr	r2, [pc, #452]	@ (8006de0 <HAL_DMA_IRQHandler+0xd08>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01d      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a70      	ldr	r2, [pc, #448]	@ (8006de4 <HAL_DMA_IRQHandler+0xd0c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d018      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006de8 <HAL_DMA_IRQHandler+0xd10>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d013      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6d      	ldr	r2, [pc, #436]	@ (8006dec <HAL_DMA_IRQHandler+0xd14>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6b      	ldr	r2, [pc, #428]	@ (8006df0 <HAL_DMA_IRQHandler+0xd18>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d009      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8006df4 <HAL_DMA_IRQHandler+0xd1c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d004      	beq.n	8006c5a <HAL_DMA_IRQHandler+0xb82>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a68      	ldr	r2, [pc, #416]	@ (8006df8 <HAL_DMA_IRQHandler+0xd20>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d108      	bne.n	8006c6c <HAL_DMA_IRQHandler+0xb94>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0208 	bic.w	r2, r2, #8
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e007      	b.n	8006c7c <HAL_DMA_IRQHandler+0xba4>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0204 	bic.w	r2, r2, #4
 8006c7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8165 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8e:	e15f      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2202      	movs	r2, #2
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80c5 	beq.w	8006e30 <HAL_DMA_IRQHandler+0xd58>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80bf 	beq.w	8006e30 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2202      	movs	r2, #2
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d018      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 813a 	beq.w	8006f54 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce8:	e134      	b.n	8006f54 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8130 	beq.w	8006f54 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cfc:	e12a      	b.n	8006f54 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 8089 	bne.w	8006e1c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8006dbc <HAL_DMA_IRQHandler+0xce4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d04a      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a29      	ldr	r2, [pc, #164]	@ (8006dc0 <HAL_DMA_IRQHandler+0xce8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d045      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a28      	ldr	r2, [pc, #160]	@ (8006dc4 <HAL_DMA_IRQHandler+0xcec>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d040      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	@ (8006dc8 <HAL_DMA_IRQHandler+0xcf0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d03b      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a25      	ldr	r2, [pc, #148]	@ (8006dcc <HAL_DMA_IRQHandler+0xcf4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d036      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a23      	ldr	r2, [pc, #140]	@ (8006dd0 <HAL_DMA_IRQHandler+0xcf8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d031      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a22      	ldr	r2, [pc, #136]	@ (8006dd4 <HAL_DMA_IRQHandler+0xcfc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d02c      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a20      	ldr	r2, [pc, #128]	@ (8006dd8 <HAL_DMA_IRQHandler+0xd00>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d027      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <HAL_DMA_IRQHandler+0xd04>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d022      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <HAL_DMA_IRQHandler+0xd08>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d01d      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <HAL_DMA_IRQHandler+0xd0c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d018      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8006de8 <HAL_DMA_IRQHandler+0xd10>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a19      	ldr	r2, [pc, #100]	@ (8006dec <HAL_DMA_IRQHandler+0xd14>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00e      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a17      	ldr	r2, [pc, #92]	@ (8006df0 <HAL_DMA_IRQHandler+0xd18>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a16      	ldr	r2, [pc, #88]	@ (8006df4 <HAL_DMA_IRQHandler+0xd1c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_DMA_IRQHandler+0xcd2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a14      	ldr	r2, [pc, #80]	@ (8006df8 <HAL_DMA_IRQHandler+0xd20>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d128      	bne.n	8006dfc <HAL_DMA_IRQHandler+0xd24>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0214 	bic.w	r2, r2, #20
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	e027      	b.n	8006e0c <HAL_DMA_IRQHandler+0xd34>
 8006dbc:	40020010 	.word	0x40020010
 8006dc0:	40020028 	.word	0x40020028
 8006dc4:	40020040 	.word	0x40020040
 8006dc8:	40020058 	.word	0x40020058
 8006dcc:	40020070 	.word	0x40020070
 8006dd0:	40020088 	.word	0x40020088
 8006dd4:	400200a0 	.word	0x400200a0
 8006dd8:	400200b8 	.word	0x400200b8
 8006ddc:	40020410 	.word	0x40020410
 8006de0:	40020428 	.word	0x40020428
 8006de4:	40020440 	.word	0x40020440
 8006de8:	40020458 	.word	0x40020458
 8006dec:	40020470 	.word	0x40020470
 8006df0:	40020488 	.word	0x40020488
 8006df4:	400204a0 	.word	0x400204a0
 8006df8:	400204b8 	.word	0x400204b8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 020a 	bic.w	r2, r2, #10
 8006e0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8097 	beq.w	8006f54 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e2e:	e091      	b.n	8006f54 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2208      	movs	r2, #8
 8006e3a:	409a      	lsls	r2, r3
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8088 	beq.w	8006f56 <HAL_DMA_IRQHandler+0xe7e>
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8082 	beq.w	8006f56 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a41      	ldr	r2, [pc, #260]	@ (8006f5c <HAL_DMA_IRQHandler+0xe84>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3f      	ldr	r2, [pc, #252]	@ (8006f60 <HAL_DMA_IRQHandler+0xe88>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a3e      	ldr	r2, [pc, #248]	@ (8006f64 <HAL_DMA_IRQHandler+0xe8c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d040      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a3c      	ldr	r2, [pc, #240]	@ (8006f68 <HAL_DMA_IRQHandler+0xe90>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d03b      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8006f6c <HAL_DMA_IRQHandler+0xe94>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d036      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a39      	ldr	r2, [pc, #228]	@ (8006f70 <HAL_DMA_IRQHandler+0xe98>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d031      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a38      	ldr	r2, [pc, #224]	@ (8006f74 <HAL_DMA_IRQHandler+0xe9c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02c      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a36      	ldr	r2, [pc, #216]	@ (8006f78 <HAL_DMA_IRQHandler+0xea0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d027      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a35      	ldr	r2, [pc, #212]	@ (8006f7c <HAL_DMA_IRQHandler+0xea4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a33      	ldr	r2, [pc, #204]	@ (8006f80 <HAL_DMA_IRQHandler+0xea8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a32      	ldr	r2, [pc, #200]	@ (8006f84 <HAL_DMA_IRQHandler+0xeac>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a30      	ldr	r2, [pc, #192]	@ (8006f88 <HAL_DMA_IRQHandler+0xeb0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2f      	ldr	r2, [pc, #188]	@ (8006f8c <HAL_DMA_IRQHandler+0xeb4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8006f90 <HAL_DMA_IRQHandler+0xeb8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f94 <HAL_DMA_IRQHandler+0xebc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xe1a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	@ (8006f98 <HAL_DMA_IRQHandler+0xec0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d108      	bne.n	8006f04 <HAL_DMA_IRQHandler+0xe2c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 021c 	bic.w	r2, r2, #28
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e007      	b.n	8006f14 <HAL_DMA_IRQHandler+0xe3c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 020e 	bic.w	r2, r2, #14
 8006f12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
 8006f4a:	e004      	b.n	8006f56 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f56:	3728      	adds	r7, #40	@ 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40020010 	.word	0x40020010
 8006f60:	40020028 	.word	0x40020028
 8006f64:	40020040 	.word	0x40020040
 8006f68:	40020058 	.word	0x40020058
 8006f6c:	40020070 	.word	0x40020070
 8006f70:	40020088 	.word	0x40020088
 8006f74:	400200a0 	.word	0x400200a0
 8006f78:	400200b8 	.word	0x400200b8
 8006f7c:	40020410 	.word	0x40020410
 8006f80:	40020428 	.word	0x40020428
 8006f84:	40020440 	.word	0x40020440
 8006f88:	40020458 	.word	0x40020458
 8006f8c:	40020470 	.word	0x40020470
 8006f90:	40020488 	.word	0x40020488
 8006f94:	400204a0 	.word	0x400204a0
 8006f98:	400204b8 	.word	0x400204b8

08006f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a7f      	ldr	r2, [pc, #508]	@ (80071b8 <DMA_SetConfig+0x21c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d072      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a7d      	ldr	r2, [pc, #500]	@ (80071bc <DMA_SetConfig+0x220>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d06d      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a7c      	ldr	r2, [pc, #496]	@ (80071c0 <DMA_SetConfig+0x224>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d068      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80071c4 <DMA_SetConfig+0x228>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d063      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a79      	ldr	r2, [pc, #484]	@ (80071c8 <DMA_SetConfig+0x22c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d05e      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a77      	ldr	r2, [pc, #476]	@ (80071cc <DMA_SetConfig+0x230>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d059      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a76      	ldr	r2, [pc, #472]	@ (80071d0 <DMA_SetConfig+0x234>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d054      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a74      	ldr	r2, [pc, #464]	@ (80071d4 <DMA_SetConfig+0x238>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04f      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a73      	ldr	r2, [pc, #460]	@ (80071d8 <DMA_SetConfig+0x23c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d04a      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a71      	ldr	r2, [pc, #452]	@ (80071dc <DMA_SetConfig+0x240>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d045      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a70      	ldr	r2, [pc, #448]	@ (80071e0 <DMA_SetConfig+0x244>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d040      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a6e      	ldr	r2, [pc, #440]	@ (80071e4 <DMA_SetConfig+0x248>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d03b      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a6d      	ldr	r2, [pc, #436]	@ (80071e8 <DMA_SetConfig+0x24c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d036      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a6b      	ldr	r2, [pc, #428]	@ (80071ec <DMA_SetConfig+0x250>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d031      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a6a      	ldr	r2, [pc, #424]	@ (80071f0 <DMA_SetConfig+0x254>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d02c      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a68      	ldr	r2, [pc, #416]	@ (80071f4 <DMA_SetConfig+0x258>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d027      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a67      	ldr	r2, [pc, #412]	@ (80071f8 <DMA_SetConfig+0x25c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d022      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a65      	ldr	r2, [pc, #404]	@ (80071fc <DMA_SetConfig+0x260>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01d      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a64      	ldr	r2, [pc, #400]	@ (8007200 <DMA_SetConfig+0x264>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d018      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a62      	ldr	r2, [pc, #392]	@ (8007204 <DMA_SetConfig+0x268>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a61      	ldr	r2, [pc, #388]	@ (8007208 <DMA_SetConfig+0x26c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a5f      	ldr	r2, [pc, #380]	@ (800720c <DMA_SetConfig+0x270>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a5e      	ldr	r2, [pc, #376]	@ (8007210 <DMA_SetConfig+0x274>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <DMA_SetConfig+0x10a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a5c      	ldr	r2, [pc, #368]	@ (8007214 <DMA_SetConfig+0x278>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d101      	bne.n	80070aa <DMA_SetConfig+0x10e>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <DMA_SetConfig+0x110>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00d      	beq.n	80070cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80070b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80070ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a39      	ldr	r2, [pc, #228]	@ (80071b8 <DMA_SetConfig+0x21c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d04a      	beq.n	800716c <DMA_SetConfig+0x1d0>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a38      	ldr	r2, [pc, #224]	@ (80071bc <DMA_SetConfig+0x220>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d045      	beq.n	800716c <DMA_SetConfig+0x1d0>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a36      	ldr	r2, [pc, #216]	@ (80071c0 <DMA_SetConfig+0x224>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d040      	beq.n	800716c <DMA_SetConfig+0x1d0>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a35      	ldr	r2, [pc, #212]	@ (80071c4 <DMA_SetConfig+0x228>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d03b      	beq.n	800716c <DMA_SetConfig+0x1d0>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a33      	ldr	r2, [pc, #204]	@ (80071c8 <DMA_SetConfig+0x22c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d036      	beq.n	800716c <DMA_SetConfig+0x1d0>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a32      	ldr	r2, [pc, #200]	@ (80071cc <DMA_SetConfig+0x230>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d031      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a30      	ldr	r2, [pc, #192]	@ (80071d0 <DMA_SetConfig+0x234>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d02c      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2f      	ldr	r2, [pc, #188]	@ (80071d4 <DMA_SetConfig+0x238>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d027      	beq.n	800716c <DMA_SetConfig+0x1d0>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a2d      	ldr	r2, [pc, #180]	@ (80071d8 <DMA_SetConfig+0x23c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d022      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a2c      	ldr	r2, [pc, #176]	@ (80071dc <DMA_SetConfig+0x240>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d01d      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2a      	ldr	r2, [pc, #168]	@ (80071e0 <DMA_SetConfig+0x244>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <DMA_SetConfig+0x1d0>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a29      	ldr	r2, [pc, #164]	@ (80071e4 <DMA_SetConfig+0x248>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a27      	ldr	r2, [pc, #156]	@ (80071e8 <DMA_SetConfig+0x24c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <DMA_SetConfig+0x1d0>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a26      	ldr	r2, [pc, #152]	@ (80071ec <DMA_SetConfig+0x250>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a24      	ldr	r2, [pc, #144]	@ (80071f0 <DMA_SetConfig+0x254>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <DMA_SetConfig+0x1d0>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <DMA_SetConfig+0x258>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d101      	bne.n	8007170 <DMA_SetConfig+0x1d4>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <DMA_SetConfig+0x1d6>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d059      	beq.n	800722a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	223f      	movs	r2, #63	@ 0x3f
 8007180:	409a      	lsls	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007194:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b40      	cmp	r3, #64	@ 0x40
 80071a4:	d138      	bne.n	8007218 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071b6:	e0ae      	b.n	8007316 <DMA_SetConfig+0x37a>
 80071b8:	40020010 	.word	0x40020010
 80071bc:	40020028 	.word	0x40020028
 80071c0:	40020040 	.word	0x40020040
 80071c4:	40020058 	.word	0x40020058
 80071c8:	40020070 	.word	0x40020070
 80071cc:	40020088 	.word	0x40020088
 80071d0:	400200a0 	.word	0x400200a0
 80071d4:	400200b8 	.word	0x400200b8
 80071d8:	40020410 	.word	0x40020410
 80071dc:	40020428 	.word	0x40020428
 80071e0:	40020440 	.word	0x40020440
 80071e4:	40020458 	.word	0x40020458
 80071e8:	40020470 	.word	0x40020470
 80071ec:	40020488 	.word	0x40020488
 80071f0:	400204a0 	.word	0x400204a0
 80071f4:	400204b8 	.word	0x400204b8
 80071f8:	58025408 	.word	0x58025408
 80071fc:	5802541c 	.word	0x5802541c
 8007200:	58025430 	.word	0x58025430
 8007204:	58025444 	.word	0x58025444
 8007208:	58025458 	.word	0x58025458
 800720c:	5802546c 	.word	0x5802546c
 8007210:	58025480 	.word	0x58025480
 8007214:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	60da      	str	r2, [r3, #12]
}
 8007228:	e075      	b.n	8007316 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3d      	ldr	r2, [pc, #244]	@ (8007324 <DMA_SetConfig+0x388>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d04a      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a3b      	ldr	r2, [pc, #236]	@ (8007328 <DMA_SetConfig+0x38c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d045      	beq.n	80072ca <DMA_SetConfig+0x32e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3a      	ldr	r2, [pc, #232]	@ (800732c <DMA_SetConfig+0x390>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d040      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a38      	ldr	r2, [pc, #224]	@ (8007330 <DMA_SetConfig+0x394>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d03b      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a37      	ldr	r2, [pc, #220]	@ (8007334 <DMA_SetConfig+0x398>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d036      	beq.n	80072ca <DMA_SetConfig+0x32e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a35      	ldr	r2, [pc, #212]	@ (8007338 <DMA_SetConfig+0x39c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d031      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a34      	ldr	r2, [pc, #208]	@ (800733c <DMA_SetConfig+0x3a0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d02c      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a32      	ldr	r2, [pc, #200]	@ (8007340 <DMA_SetConfig+0x3a4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d027      	beq.n	80072ca <DMA_SetConfig+0x32e>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a31      	ldr	r2, [pc, #196]	@ (8007344 <DMA_SetConfig+0x3a8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d022      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a2f      	ldr	r2, [pc, #188]	@ (8007348 <DMA_SetConfig+0x3ac>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d01d      	beq.n	80072ca <DMA_SetConfig+0x32e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2e      	ldr	r2, [pc, #184]	@ (800734c <DMA_SetConfig+0x3b0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d018      	beq.n	80072ca <DMA_SetConfig+0x32e>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2c      	ldr	r2, [pc, #176]	@ (8007350 <DMA_SetConfig+0x3b4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <DMA_SetConfig+0x32e>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007354 <DMA_SetConfig+0x3b8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00e      	beq.n	80072ca <DMA_SetConfig+0x32e>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a29      	ldr	r2, [pc, #164]	@ (8007358 <DMA_SetConfig+0x3bc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <DMA_SetConfig+0x32e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a28      	ldr	r2, [pc, #160]	@ (800735c <DMA_SetConfig+0x3c0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <DMA_SetConfig+0x32e>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a26      	ldr	r2, [pc, #152]	@ (8007360 <DMA_SetConfig+0x3c4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d101      	bne.n	80072ce <DMA_SetConfig+0x332>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <DMA_SetConfig+0x334>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d020      	beq.n	8007316 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2201      	movs	r2, #1
 80072de:	409a      	lsls	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	d108      	bne.n	8007306 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	60da      	str	r2, [r3, #12]
}
 8007304:	e007      	b.n	8007316 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	60da      	str	r2, [r3, #12]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	48022c08 	.word	0x48022c08
 8007328:	48022c1c 	.word	0x48022c1c
 800732c:	48022c30 	.word	0x48022c30
 8007330:	48022c44 	.word	0x48022c44
 8007334:	48022c58 	.word	0x48022c58
 8007338:	48022c6c 	.word	0x48022c6c
 800733c:	48022c80 	.word	0x48022c80
 8007340:	48022c94 	.word	0x48022c94
 8007344:	58025408 	.word	0x58025408
 8007348:	5802541c 	.word	0x5802541c
 800734c:	58025430 	.word	0x58025430
 8007350:	58025444 	.word	0x58025444
 8007354:	58025458 	.word	0x58025458
 8007358:	5802546c 	.word	0x5802546c
 800735c:	58025480 	.word	0x58025480
 8007360:	58025494 	.word	0x58025494

08007364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a42      	ldr	r2, [pc, #264]	@ (800747c <DMA_CalcBaseAndBitshift+0x118>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04a      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a41      	ldr	r2, [pc, #260]	@ (8007480 <DMA_CalcBaseAndBitshift+0x11c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d045      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a3f      	ldr	r2, [pc, #252]	@ (8007484 <DMA_CalcBaseAndBitshift+0x120>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d040      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3e      	ldr	r2, [pc, #248]	@ (8007488 <DMA_CalcBaseAndBitshift+0x124>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d03b      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a3c      	ldr	r2, [pc, #240]	@ (800748c <DMA_CalcBaseAndBitshift+0x128>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d036      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007490 <DMA_CalcBaseAndBitshift+0x12c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d031      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a39      	ldr	r2, [pc, #228]	@ (8007494 <DMA_CalcBaseAndBitshift+0x130>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02c      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a38      	ldr	r2, [pc, #224]	@ (8007498 <DMA_CalcBaseAndBitshift+0x134>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d027      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a36      	ldr	r2, [pc, #216]	@ (800749c <DMA_CalcBaseAndBitshift+0x138>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a35      	ldr	r2, [pc, #212]	@ (80074a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d01d      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a33      	ldr	r2, [pc, #204]	@ (80074a4 <DMA_CalcBaseAndBitshift+0x140>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a32      	ldr	r2, [pc, #200]	@ (80074a8 <DMA_CalcBaseAndBitshift+0x144>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a30      	ldr	r2, [pc, #192]	@ (80074ac <DMA_CalcBaseAndBitshift+0x148>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2f      	ldr	r2, [pc, #188]	@ (80074b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2d      	ldr	r2, [pc, #180]	@ (80074b4 <DMA_CalcBaseAndBitshift+0x150>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <DMA_CalcBaseAndBitshift+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	@ (80074b8 <DMA_CalcBaseAndBitshift+0x154>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d101      	bne.n	8007410 <DMA_CalcBaseAndBitshift+0xac>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <DMA_CalcBaseAndBitshift+0xae>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d024      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	3b10      	subs	r3, #16
 800741e:	4a27      	ldr	r2, [pc, #156]	@ (80074bc <DMA_CalcBaseAndBitshift+0x158>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	091b      	lsrs	r3, r3, #4
 8007426:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007430:	5cd3      	ldrb	r3, [r2, r3]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d908      	bls.n	8007450 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	4b1f      	ldr	r3, [pc, #124]	@ (80074c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007446:	4013      	ands	r3, r2
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	659a      	str	r2, [r3, #88]	@ 0x58
 800744e:	e00d      	b.n	800746c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	4b1b      	ldr	r3, [pc, #108]	@ (80074c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007458:	4013      	ands	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6593      	str	r3, [r2, #88]	@ 0x58
 800745e:	e005      	b.n	800746c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40020010 	.word	0x40020010
 8007480:	40020028 	.word	0x40020028
 8007484:	40020040 	.word	0x40020040
 8007488:	40020058 	.word	0x40020058
 800748c:	40020070 	.word	0x40020070
 8007490:	40020088 	.word	0x40020088
 8007494:	400200a0 	.word	0x400200a0
 8007498:	400200b8 	.word	0x400200b8
 800749c:	40020410 	.word	0x40020410
 80074a0:	40020428 	.word	0x40020428
 80074a4:	40020440 	.word	0x40020440
 80074a8:	40020458 	.word	0x40020458
 80074ac:	40020470 	.word	0x40020470
 80074b0:	40020488 	.word	0x40020488
 80074b4:	400204a0 	.word	0x400204a0
 80074b8:	400204b8 	.word	0x400204b8
 80074bc:	aaaaaaab 	.word	0xaaaaaaab
 80074c0:	08014b1c 	.word	0x08014b1c
 80074c4:	fffffc00 	.word	0xfffffc00

080074c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d120      	bne.n	800751e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d858      	bhi.n	8007596 <DMA_CheckFifoParam+0xce>
 80074e4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <DMA_CheckFifoParam+0x24>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	0800750f 	.word	0x0800750f
 80074f4:	080074fd 	.word	0x080074fd
 80074f8:	08007597 	.word	0x08007597
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d048      	beq.n	800759a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800750c:	e045      	b.n	800759a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007516:	d142      	bne.n	800759e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800751c:	e03f      	b.n	800759e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007526:	d123      	bne.n	8007570 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	2b03      	cmp	r3, #3
 800752e:	d838      	bhi.n	80075a2 <DMA_CheckFifoParam+0xda>
 8007530:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <DMA_CheckFifoParam+0x70>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007549 	.word	0x08007549
 800753c:	0800754f 	.word	0x0800754f
 8007540:	08007549 	.word	0x08007549
 8007544:	08007561 	.word	0x08007561
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
        break;
 800754c:	e030      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d025      	beq.n	80075a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800755e:	e022      	b.n	80075a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007568:	d11f      	bne.n	80075aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800756e:	e01c      	b.n	80075aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	2b02      	cmp	r3, #2
 8007576:	d902      	bls.n	800757e <DMA_CheckFifoParam+0xb6>
 8007578:	2b03      	cmp	r3, #3
 800757a:	d003      	beq.n	8007584 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800757c:	e018      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
        break;
 8007582:	e015      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
    break;
 8007594:	e00b      	b.n	80075ae <DMA_CheckFifoParam+0xe6>
        break;
 8007596:	bf00      	nop
 8007598:	e00a      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        break;
 800759a:	bf00      	nop
 800759c:	e008      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        break;
 800759e:	bf00      	nop
 80075a0:	e006      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        break;
 80075a2:	bf00      	nop
 80075a4:	e004      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        break;
 80075a6:	bf00      	nop
 80075a8:	e002      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
        break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <DMA_CheckFifoParam+0xe8>
    break;
 80075ae:	bf00      	nop
    }
  }

  return status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop

080075c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a38      	ldr	r2, [pc, #224]	@ (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d022      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a36      	ldr	r2, [pc, #216]	@ (80076b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01d      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a35      	ldr	r2, [pc, #212]	@ (80076bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d018      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a33      	ldr	r2, [pc, #204]	@ (80076c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d013      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a32      	ldr	r2, [pc, #200]	@ (80076c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00e      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a30      	ldr	r2, [pc, #192]	@ (80076c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d009      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2f      	ldr	r2, [pc, #188]	@ (80076cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2d      	ldr	r2, [pc, #180]	@ (80076d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01a      	beq.n	800765e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	3b08      	subs	r3, #8
 8007630:	4a28      	ldr	r2, [pc, #160]	@ (80076d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	091b      	lsrs	r3, r3, #4
 8007638:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4b26      	ldr	r3, [pc, #152]	@ (80076d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a24      	ldr	r2, [pc, #144]	@ (80076dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800764c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2201      	movs	r2, #1
 8007656:	409a      	lsls	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800765c:	e024      	b.n	80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	3b10      	subs	r3, #16
 8007666:	4a1e      	ldr	r2, [pc, #120]	@ (80076e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007668:	fba2 2303 	umull	r2, r3, r2, r3
 800766c:	091b      	lsrs	r3, r3, #4
 800766e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4a1c      	ldr	r2, [pc, #112]	@ (80076e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d806      	bhi.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a1b      	ldr	r2, [pc, #108]	@ (80076e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d902      	bls.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3308      	adds	r3, #8
 8007684:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4b18      	ldr	r3, [pc, #96]	@ (80076ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a16      	ldr	r2, [pc, #88]	@ (80076f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007698:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	2201      	movs	r2, #1
 80076a2:	409a      	lsls	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	58025408 	.word	0x58025408
 80076b8:	5802541c 	.word	0x5802541c
 80076bc:	58025430 	.word	0x58025430
 80076c0:	58025444 	.word	0x58025444
 80076c4:	58025458 	.word	0x58025458
 80076c8:	5802546c 	.word	0x5802546c
 80076cc:	58025480 	.word	0x58025480
 80076d0:	58025494 	.word	0x58025494
 80076d4:	cccccccd 	.word	0xcccccccd
 80076d8:	16009600 	.word	0x16009600
 80076dc:	58025880 	.word	0x58025880
 80076e0:	aaaaaaab 	.word	0xaaaaaaab
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	4002040f 	.word	0x4002040f
 80076ec:	10008200 	.word	0x10008200
 80076f0:	40020880 	.word	0x40020880

080076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d04a      	beq.n	80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b08      	cmp	r3, #8
 800770e:	d847      	bhi.n	80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a25      	ldr	r2, [pc, #148]	@ (80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a24      	ldr	r2, [pc, #144]	@ (80077b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a22      	ldr	r2, [pc, #136]	@ (80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a21      	ldr	r2, [pc, #132]	@ (80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1f      	ldr	r2, [pc, #124]	@ (80077bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1e      	ldr	r2, [pc, #120]	@ (80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d101      	bne.n	8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4b17      	ldr	r3, [pc, #92]	@ (80077cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a15      	ldr	r2, [pc, #84]	@ (80077d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800777c:	671a      	str	r2, [r3, #112]	@ 0x70
 800777e:	e009      	b.n	8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	461a      	mov	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007792:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3b01      	subs	r3, #1
 8007798:	2201      	movs	r2, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	58025408 	.word	0x58025408
 80077b0:	5802541c 	.word	0x5802541c
 80077b4:	58025430 	.word	0x58025430
 80077b8:	58025444 	.word	0x58025444
 80077bc:	58025458 	.word	0x58025458
 80077c0:	5802546c 	.word	0x5802546c
 80077c4:	58025480 	.word	0x58025480
 80077c8:	58025494 	.word	0x58025494
 80077cc:	1600963f 	.word	0x1600963f
 80077d0:	58025940 	.word	0x58025940
 80077d4:	1000823f 	.word	0x1000823f
 80077d8:	40020940 	.word	0x40020940

080077dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b098      	sub	sp, #96	@ 0x60
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80077e4:	4a84      	ldr	r2, [pc, #528]	@ (80079f8 <HAL_FDCAN_Init+0x21c>)
 80077e6:	f107 030c 	add.w	r3, r7, #12
 80077ea:	4611      	mov	r1, r2
 80077ec:	224c      	movs	r2, #76	@ 0x4c
 80077ee:	4618      	mov	r0, r3
 80077f0:	f00c ffec 	bl	80147cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e1c6      	b.n	8007b8c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7e      	ldr	r2, [pc, #504]	@ (80079fc <HAL_FDCAN_Init+0x220>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d106      	bne.n	8007816 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fb fa80 	bl	8002d30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0210 	bic.w	r2, r2, #16
 800783e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007840:	f7fc ff5a 	bl	80046f8 <HAL_GetTick>
 8007844:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007846:	e014      	b.n	8007872 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007848:	f7fc ff56 	bl	80046f8 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b0a      	cmp	r3, #10
 8007854:	d90d      	bls.n	8007872 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2203      	movs	r2, #3
 800786a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e18c      	b.n	8007b8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b08      	cmp	r3, #8
 800787e:	d0e3      	beq.n	8007848 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007890:	f7fc ff32 	bl	80046f8 <HAL_GetTick>
 8007894:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007896:	e014      	b.n	80078c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007898:	f7fc ff2e 	bl	80046f8 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b0a      	cmp	r3, #10
 80078a4:	d90d      	bls.n	80078c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ac:	f043 0201 	orr.w	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2203      	movs	r2, #3
 80078ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e164      	b.n	8007b8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0e3      	beq.n	8007898 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0202 	orr.w	r2, r2, #2
 80078de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7c1b      	ldrb	r3, [r3, #16]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d108      	bne.n	80078fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078f6:	619a      	str	r2, [r3, #24]
 80078f8:	e007      	b.n	800790a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007908:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c5b      	ldrb	r3, [r3, #17]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d108      	bne.n	8007924 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007920:	619a      	str	r2, [r3, #24]
 8007922:	e007      	b.n	8007934 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007932:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c9b      	ldrb	r3, [r3, #18]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d108      	bne.n	800794e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800794a:	619a      	str	r2, [r3, #24]
 800794c:	e007      	b.n	800795e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800795c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007982:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0210 	bic.w	r2, r2, #16
 8007992:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d108      	bne.n	80079ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0204 	orr.w	r2, r2, #4
 80079aa:	619a      	str	r2, [r3, #24]
 80079ac:	e030      	b.n	8007a10 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d02c      	beq.n	8007a10 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d020      	beq.n	8007a00 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0210 	orr.w	r2, r2, #16
 80079dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d114      	bne.n	8007a10 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0220 	orr.w	r2, r2, #32
 80079f4:	619a      	str	r2, [r3, #24]
 80079f6:	e00b      	b.n	8007a10 <HAL_FDCAN_Init+0x234>
 80079f8:	08014a78 	.word	0x08014a78
 80079fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0220 	orr.w	r2, r2, #32
 8007a0e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a20:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a28:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a38:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a3a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a44:	d115      	bne.n	8007a72 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	3b01      	subs	r3, #1
 8007a52:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a54:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a5e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	3b01      	subs	r3, #1
 8007a68:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a6e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a70:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a98:	4413      	add	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007aa6:	f023 0107 	bic.w	r1, r3, #7
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	3360      	adds	r3, #96	@ 0x60
 8007ab2:	443b      	add	r3, r7
 8007ab4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d011      	beq.n	8007aee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ad2:	f023 0107 	bic.w	r1, r3, #7
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	3360      	adds	r3, #96	@ 0x60
 8007ade:	443b      	add	r3, r7
 8007ae0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d012      	beq.n	8007b1c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007afe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	3360      	adds	r3, #96	@ 0x60
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b10:	011a      	lsls	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b2c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	3360      	adds	r3, #96	@ 0x60
 8007b38:	443b      	add	r3, r7
 8007b3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b3e:	021a      	lsls	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a11      	ldr	r2, [pc, #68]	@ (8007b94 <HAL_FDCAN_Init+0x3b8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d107      	bne.n	8007b64 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f022 0203 	bic.w	r2, r2, #3
 8007b62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f80b 	bl	8007b98 <FDCAN_CalcultateRamBlockAddresses>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007b88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3760      	adds	r7, #96	@ 0x60
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	4000a000 	.word	0x4000a000

08007b98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007bae:	4ba7      	ldr	r3, [pc, #668]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	0091      	lsls	r1, r2, #2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	041a      	lsls	r2, r3, #16
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	4413      	add	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007bee:	4b97      	ldr	r3, [pc, #604]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	0091      	lsls	r1, r2, #2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c08:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	041a      	lsls	r2, r3, #16
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4413      	add	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007c30:	4b86      	ldr	r3, [pc, #536]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	0091      	lsls	r1, r2, #2
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6812      	ldr	r2, [r2, #0]
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c4a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	041a      	lsls	r2, r3, #16
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c78:	4b74      	ldr	r3, [pc, #464]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	0091      	lsls	r1, r2, #2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c92:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9a:	041a      	lsls	r2, r3, #16
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007cc0:	4b62      	ldr	r3, [pc, #392]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	0091      	lsls	r1, r2, #2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007cec:	4b57      	ldr	r3, [pc, #348]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	0091      	lsls	r1, r2, #2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d06:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0e:	041a      	lsls	r2, r3, #16
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4413      	add	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007d2e:	4b47      	ldr	r3, [pc, #284]	@ (8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0091      	lsls	r1, r2, #2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d48:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d50:	041a      	lsls	r2, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d64:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d6c:	061a      	lsls	r2, r3, #24
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d7c:	4b34      	ldr	r3, [pc, #208]	@ (8007e50 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007d7e:	4413      	add	r3, r2
 8007d80:	009a      	lsls	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	441a      	add	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007db2:	fb01 f303 	mul.w	r3, r1, r3
 8007db6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007db8:	441a      	add	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007dd0:	441a      	add	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007de8:	441a      	add	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	441a      	add	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007e34:	441a      	add	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e42:	4a04      	ldr	r2, [pc, #16]	@ (8007e54 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d915      	bls.n	8007e74 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007e48:	e006      	b.n	8007e58 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007e4a:	bf00      	nop
 8007e4c:	ffff0003 	.word	0xffff0003
 8007e50:	10002b00 	.word	0x10002b00
 8007e54:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e010      	b.n	8007e96 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	e005      	b.n	8007e88 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d3f3      	bcc.n	8007e7c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	@ 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007eb2:	4b89      	ldr	r3, [pc, #548]	@ (80080d8 <HAL_GPIO_Init+0x234>)
 8007eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eb6:	e194      	b.n	80081e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8186 	beq.w	80081dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d005      	beq.n	8007ee8 <HAL_GPIO_Init+0x44>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d130      	bne.n	8007f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4013      	ands	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f1e:	2201      	movs	r2, #1
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	f003 0201 	and.w	r2, r3, #1
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d017      	beq.n	8007f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	2203      	movs	r2, #3
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43db      	mvns	r3, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d123      	bne.n	8007fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	08da      	lsrs	r2, r3, #3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3208      	adds	r2, #8
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	220f      	movs	r2, #15
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	08da      	lsrs	r2, r3, #3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3208      	adds	r2, #8
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	43db      	mvns	r3, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f003 0203 	and.w	r2, r3, #3
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80e0 	beq.w	80081dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800801c:	4b2f      	ldr	r3, [pc, #188]	@ (80080dc <HAL_GPIO_Init+0x238>)
 800801e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008022:	4a2e      	ldr	r2, [pc, #184]	@ (80080dc <HAL_GPIO_Init+0x238>)
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800802c:	4b2b      	ldr	r3, [pc, #172]	@ (80080dc <HAL_GPIO_Init+0x238>)
 800802e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800803a:	4a29      	ldr	r2, [pc, #164]	@ (80080e0 <HAL_GPIO_Init+0x23c>)
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	089b      	lsrs	r3, r3, #2
 8008040:	3302      	adds	r3, #2
 8008042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	220f      	movs	r2, #15
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	4013      	ands	r3, r2
 800805c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a20      	ldr	r2, [pc, #128]	@ (80080e4 <HAL_GPIO_Init+0x240>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d052      	beq.n	800810c <HAL_GPIO_Init+0x268>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1f      	ldr	r2, [pc, #124]	@ (80080e8 <HAL_GPIO_Init+0x244>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d031      	beq.n	80080d2 <HAL_GPIO_Init+0x22e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1e      	ldr	r2, [pc, #120]	@ (80080ec <HAL_GPIO_Init+0x248>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02b      	beq.n	80080ce <HAL_GPIO_Init+0x22a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1d      	ldr	r2, [pc, #116]	@ (80080f0 <HAL_GPIO_Init+0x24c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d025      	beq.n	80080ca <HAL_GPIO_Init+0x226>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_GPIO_Init+0x250>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01f      	beq.n	80080c6 <HAL_GPIO_Init+0x222>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_GPIO_Init+0x254>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d019      	beq.n	80080c2 <HAL_GPIO_Init+0x21e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a1a      	ldr	r2, [pc, #104]	@ (80080fc <HAL_GPIO_Init+0x258>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_GPIO_Init+0x21a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a19      	ldr	r2, [pc, #100]	@ (8008100 <HAL_GPIO_Init+0x25c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00d      	beq.n	80080ba <HAL_GPIO_Init+0x216>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a18      	ldr	r2, [pc, #96]	@ (8008104 <HAL_GPIO_Init+0x260>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <HAL_GPIO_Init+0x212>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a17      	ldr	r2, [pc, #92]	@ (8008108 <HAL_GPIO_Init+0x264>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <HAL_GPIO_Init+0x20e>
 80080ae:	2309      	movs	r3, #9
 80080b0:	e02d      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080b2:	230a      	movs	r3, #10
 80080b4:	e02b      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080b6:	2308      	movs	r3, #8
 80080b8:	e029      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080ba:	2307      	movs	r3, #7
 80080bc:	e027      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080be:	2306      	movs	r3, #6
 80080c0:	e025      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080c2:	2305      	movs	r3, #5
 80080c4:	e023      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080c6:	2304      	movs	r3, #4
 80080c8:	e021      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080ca:	2303      	movs	r3, #3
 80080cc:	e01f      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e01d      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e01b      	b.n	800810e <HAL_GPIO_Init+0x26a>
 80080d6:	bf00      	nop
 80080d8:	58000080 	.word	0x58000080
 80080dc:	58024400 	.word	0x58024400
 80080e0:	58000400 	.word	0x58000400
 80080e4:	58020000 	.word	0x58020000
 80080e8:	58020400 	.word	0x58020400
 80080ec:	58020800 	.word	0x58020800
 80080f0:	58020c00 	.word	0x58020c00
 80080f4:	58021000 	.word	0x58021000
 80080f8:	58021400 	.word	0x58021400
 80080fc:	58021800 	.word	0x58021800
 8008100:	58021c00 	.word	0x58021c00
 8008104:	58022000 	.word	0x58022000
 8008108:	58022400 	.word	0x58022400
 800810c:	2300      	movs	r3, #0
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	f002 0203 	and.w	r2, r2, #3
 8008114:	0092      	lsls	r2, r2, #2
 8008116:	4093      	lsls	r3, r2
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	4313      	orrs	r3, r2
 800811c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800811e:	4938      	ldr	r1, [pc, #224]	@ (8008200 <HAL_GPIO_Init+0x35c>)
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	089b      	lsrs	r3, r3, #2
 8008124:	3302      	adds	r3, #2
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800812c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	43db      	mvns	r3, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4013      	ands	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800815a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	43db      	mvns	r3, r3
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	4013      	ands	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	43db      	mvns	r3, r3
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	4013      	ands	r3, r2
 8008196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	43db      	mvns	r3, r3
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	4013      	ands	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	3301      	adds	r3, #1
 80081e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f ae63 	bne.w	8007eb8 <HAL_GPIO_Init+0x14>
  }
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	3724      	adds	r7, #36	@ 0x24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	58000400 	.word	0x58000400

08008204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	807b      	strh	r3, [r7, #2]
 8008210:	4613      	mov	r3, r2
 8008212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008214:	787b      	ldrb	r3, [r7, #1]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008220:	e003      	b.n	800822a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008222:	887b      	ldrh	r3, [r7, #2]
 8008224:	041a      	lsls	r2, r3, #16
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	619a      	str	r2, [r3, #24]
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e08b      	b.n	8008362 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7fa fed2 	bl	8003008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2224      	movs	r2, #36	@ 0x24
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0201 	bic.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	e006      	b.n	80082c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80082be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d108      	bne.n	80082da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	e007      	b.n	80082ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6859      	ldr	r1, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	4b1d      	ldr	r3, [pc, #116]	@ (800836c <HAL_I2C_Init+0x134>)
 80082f6:	430b      	orrs	r3, r1
 80082f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69d9      	ldr	r1, [r3, #28]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1a      	ldr	r2, [r3, #32]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2220      	movs	r2, #32
 800834e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	02008000 	.word	0x02008000

08008370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b20      	cmp	r3, #32
 8008384:	d138      	bne.n	80083f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008390:	2302      	movs	r3, #2
 8008392:	e032      	b.n	80083fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2224      	movs	r2, #36	@ 0x24
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	e000      	b.n	80083fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083f8:	2302      	movs	r3, #2
  }
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b20      	cmp	r3, #32
 800841a:	d139      	bne.n	8008490 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008426:	2302      	movs	r3, #2
 8008428:	e033      	b.n	8008492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2224      	movs	r2, #36	@ 0x24
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0201 	bic.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008458:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e000      	b.n	8008492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008490:	2302      	movs	r3, #2
  }
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084a8:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <HAL_PWREx_ConfigSupply+0x70>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d00a      	beq.n	80084ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084b4:	4b16      	ldr	r3, [pc, #88]	@ (8008510 <HAL_PWREx_ConfigSupply+0x70>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d001      	beq.n	80084c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e01f      	b.n	8008506 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e01d      	b.n	8008506 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084ca:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <HAL_PWREx_ConfigSupply+0x70>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f023 0207 	bic.w	r2, r3, #7
 80084d2:	490f      	ldr	r1, [pc, #60]	@ (8008510 <HAL_PWREx_ConfigSupply+0x70>)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084da:	f7fc f90d 	bl	80046f8 <HAL_GetTick>
 80084de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084e0:	e009      	b.n	80084f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084e2:	f7fc f909 	bl	80046f8 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084f0:	d901      	bls.n	80084f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e007      	b.n	8008506 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084f6:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <HAL_PWREx_ConfigSupply+0x70>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008502:	d1ee      	bne.n	80084e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	58024800 	.word	0x58024800

08008514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	@ 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f000 bc1f 	b.w	8008d66 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80b3 	beq.w	800869c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008536:	4b95      	ldr	r3, [pc, #596]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800853e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008540:	4b92      	ldr	r3, [pc, #584]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008544:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	2b10      	cmp	r3, #16
 800854a:	d007      	beq.n	800855c <HAL_RCC_OscConfig+0x48>
 800854c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854e:	2b18      	cmp	r3, #24
 8008550:	d112      	bne.n	8008578 <HAL_RCC_OscConfig+0x64>
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d10d      	bne.n	8008578 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800855c:	4b8b      	ldr	r3, [pc, #556]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8098 	beq.w	800869a <HAL_RCC_OscConfig+0x186>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f040 8093 	bne.w	800869a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e3f6      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008580:	d106      	bne.n	8008590 <HAL_RCC_OscConfig+0x7c>
 8008582:	4b82      	ldr	r3, [pc, #520]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a81      	ldr	r2, [pc, #516]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e058      	b.n	8008642 <HAL_RCC_OscConfig+0x12e>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d112      	bne.n	80085be <HAL_RCC_OscConfig+0xaa>
 8008598:	4b7c      	ldr	r3, [pc, #496]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a7b      	ldr	r2, [pc, #492]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800859e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	4b79      	ldr	r3, [pc, #484]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a78      	ldr	r2, [pc, #480]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4b76      	ldr	r3, [pc, #472]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a75      	ldr	r2, [pc, #468]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	e041      	b.n	8008642 <HAL_RCC_OscConfig+0x12e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085c6:	d112      	bne.n	80085ee <HAL_RCC_OscConfig+0xda>
 80085c8:	4b70      	ldr	r3, [pc, #448]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a6f      	ldr	r2, [pc, #444]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a6c      	ldr	r2, [pc, #432]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4b6a      	ldr	r3, [pc, #424]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a69      	ldr	r2, [pc, #420]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e029      	b.n	8008642 <HAL_RCC_OscConfig+0x12e>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80085f6:	d112      	bne.n	800861e <HAL_RCC_OscConfig+0x10a>
 80085f8:	4b64      	ldr	r3, [pc, #400]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a63      	ldr	r2, [pc, #396]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80085fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4b61      	ldr	r3, [pc, #388]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a60      	ldr	r2, [pc, #384]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800860a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	4b5e      	ldr	r3, [pc, #376]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a5d      	ldr	r2, [pc, #372]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	e011      	b.n	8008642 <HAL_RCC_OscConfig+0x12e>
 800861e:	4b5b      	ldr	r3, [pc, #364]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a5a      	ldr	r2, [pc, #360]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4b58      	ldr	r3, [pc, #352]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a57      	ldr	r2, [pc, #348]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008630:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	4b55      	ldr	r3, [pc, #340]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a54      	ldr	r2, [pc, #336]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800863c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008640:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d013      	beq.n	8008672 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864a:	f7fc f855 	bl	80046f8 <HAL_GetTick>
 800864e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008650:	e008      	b.n	8008664 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008652:	f7fc f851 	bl	80046f8 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b64      	cmp	r3, #100	@ 0x64
 800865e:	d901      	bls.n	8008664 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e380      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008664:	4b49      	ldr	r3, [pc, #292]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0f0      	beq.n	8008652 <HAL_RCC_OscConfig+0x13e>
 8008670:	e014      	b.n	800869c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008672:	f7fc f841 	bl	80046f8 <HAL_GetTick>
 8008676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008678:	e008      	b.n	800868c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800867a:	f7fc f83d 	bl	80046f8 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b64      	cmp	r3, #100	@ 0x64
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e36c      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800868c:	4b3f      	ldr	r3, [pc, #252]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f0      	bne.n	800867a <HAL_RCC_OscConfig+0x166>
 8008698:	e000      	b.n	800869c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800869a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 808c 	beq.w	80087c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086aa:	4b38      	ldr	r3, [pc, #224]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086b4:	4b35      	ldr	r3, [pc, #212]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <HAL_RCC_OscConfig+0x1bc>
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	2b18      	cmp	r3, #24
 80086c4:	d137      	bne.n	8008736 <HAL_RCC_OscConfig+0x222>
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d132      	bne.n	8008736 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086d0:	4b2e      	ldr	r3, [pc, #184]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_OscConfig+0x1d4>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e33e      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086e8:	4b28      	ldr	r3, [pc, #160]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f023 0219 	bic.w	r2, r3, #25
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	4925      	ldr	r1, [pc, #148]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fa:	f7fb fffd 	bl	80046f8 <HAL_GetTick>
 80086fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008702:	f7fb fff9 	bl	80046f8 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e328      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008714:	4b1d      	ldr	r3, [pc, #116]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008720:	4b1a      	ldr	r3, [pc, #104]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	061b      	lsls	r3, r3, #24
 800872e:	4917      	ldr	r1, [pc, #92]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008730:	4313      	orrs	r3, r2
 8008732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008734:	e045      	b.n	80087c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d028      	beq.n	8008790 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800873e:	4b13      	ldr	r3, [pc, #76]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f023 0219 	bic.w	r2, r3, #25
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	4910      	ldr	r1, [pc, #64]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800874c:	4313      	orrs	r3, r2
 800874e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fb ffd2 	bl	80046f8 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008758:	f7fb ffce 	bl	80046f8 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e2fd      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800876a:	4b08      	ldr	r3, [pc, #32]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008776:	4b05      	ldr	r3, [pc, #20]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	4901      	ldr	r1, [pc, #4]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]
 800878a:	e01a      	b.n	80087c2 <HAL_RCC_OscConfig+0x2ae>
 800878c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008790:	4b97      	ldr	r3, [pc, #604]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a96      	ldr	r2, [pc, #600]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fb ffac 	bl	80046f8 <HAL_GetTick>
 80087a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a4:	f7fb ffa8 	bl	80046f8 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e2d7      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087b6:	4b8e      	ldr	r3, [pc, #568]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d06a      	beq.n	80088a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087ce:	4b88      	ldr	r3, [pc, #544]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087d8:	4b85      	ldr	r3, [pc, #532]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d007      	beq.n	80087f4 <HAL_RCC_OscConfig+0x2e0>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b18      	cmp	r3, #24
 80087e8:	d11b      	bne.n	8008822 <HAL_RCC_OscConfig+0x30e>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d116      	bne.n	8008822 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087f4:	4b7e      	ldr	r3, [pc, #504]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCC_OscConfig+0x2f8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	2b80      	cmp	r3, #128	@ 0x80
 8008806:	d001      	beq.n	800880c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e2ac      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800880c:	4b78      	ldr	r3, [pc, #480]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	4975      	ldr	r1, [pc, #468]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800881c:	4313      	orrs	r3, r2
 800881e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008820:	e040      	b.n	80088a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d023      	beq.n	8008872 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800882a:	4b71      	ldr	r3, [pc, #452]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a70      	ldr	r2, [pc, #448]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008836:	f7fb ff5f 	bl	80046f8 <HAL_GetTick>
 800883a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800883e:	f7fb ff5b 	bl	80046f8 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e28a      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008850:	4b67      	ldr	r3, [pc, #412]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800885c:	4b64      	ldr	r3, [pc, #400]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	061b      	lsls	r3, r3, #24
 800886a:	4961      	ldr	r1, [pc, #388]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800886c:	4313      	orrs	r3, r2
 800886e:	60cb      	str	r3, [r1, #12]
 8008870:	e018      	b.n	80088a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008872:	4b5f      	ldr	r3, [pc, #380]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a5e      	ldr	r2, [pc, #376]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800887c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887e:	f7fb ff3b 	bl	80046f8 <HAL_GetTick>
 8008882:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008884:	e008      	b.n	8008898 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008886:	f7fb ff37 	bl	80046f8 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e266      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008898:	4b55      	ldr	r3, [pc, #340]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1f0      	bne.n	8008886 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d036      	beq.n	800891e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d019      	beq.n	80088ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b8:	4b4d      	ldr	r3, [pc, #308]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80088ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088bc:	4a4c      	ldr	r2, [pc, #304]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c4:	f7fb ff18 	bl	80046f8 <HAL_GetTick>
 80088c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088ca:	e008      	b.n	80088de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088cc:	f7fb ff14 	bl	80046f8 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e243      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088de:	4b44      	ldr	r3, [pc, #272]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80088e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCC_OscConfig+0x3b8>
 80088ea:	e018      	b.n	800891e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ec:	4b40      	ldr	r3, [pc, #256]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80088ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f0:	4a3f      	ldr	r2, [pc, #252]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80088f2:	f023 0301 	bic.w	r3, r3, #1
 80088f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f8:	f7fb fefe 	bl	80046f8 <HAL_GetTick>
 80088fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008900:	f7fb fefa 	bl	80046f8 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e229      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008912:	4b37      	ldr	r3, [pc, #220]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d036      	beq.n	8008998 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d019      	beq.n	8008966 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008932:	4b2f      	ldr	r3, [pc, #188]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2e      	ldr	r2, [pc, #184]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008938:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800893c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800893e:	f7fb fedb 	bl	80046f8 <HAL_GetTick>
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008944:	e008      	b.n	8008958 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008946:	f7fb fed7 	bl	80046f8 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e206      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008958:	4b25      	ldr	r3, [pc, #148]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0f0      	beq.n	8008946 <HAL_RCC_OscConfig+0x432>
 8008964:	e018      	b.n	8008998 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008966:	4b22      	ldr	r3, [pc, #136]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a21      	ldr	r2, [pc, #132]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800896c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008970:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008972:	f7fb fec1 	bl	80046f8 <HAL_GetTick>
 8008976:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800897a:	f7fb febd 	bl	80046f8 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e1ec      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800898c:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1f0      	bne.n	800897a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 80af 	beq.w	8008b04 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80089a6:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <HAL_RCC_OscConfig+0x4e0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a12      	ldr	r2, [pc, #72]	@ (80089f4 <HAL_RCC_OscConfig+0x4e0>)
 80089ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089b2:	f7fb fea1 	bl	80046f8 <HAL_GetTick>
 80089b6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ba:	f7fb fe9d 	bl	80046f8 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b64      	cmp	r3, #100	@ 0x64
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e1cc      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <HAL_RCC_OscConfig+0x4e0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f0      	beq.n	80089ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10b      	bne.n	80089f8 <HAL_RCC_OscConfig+0x4e4>
 80089e0:	4b03      	ldr	r3, [pc, #12]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e4:	4a02      	ldr	r2, [pc, #8]	@ (80089f0 <HAL_RCC_OscConfig+0x4dc>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ec:	e05b      	b.n	8008aa6 <HAL_RCC_OscConfig+0x592>
 80089ee:	bf00      	nop
 80089f0:	58024400 	.word	0x58024400
 80089f4:	58024800 	.word	0x58024800
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d112      	bne.n	8008a26 <HAL_RCC_OscConfig+0x512>
 8008a00:	4b9d      	ldr	r3, [pc, #628]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a04:	4a9c      	ldr	r2, [pc, #624]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a06:	f023 0301 	bic.w	r3, r3, #1
 8008a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a10:	4a99      	ldr	r2, [pc, #612]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a18:	4b97      	ldr	r3, [pc, #604]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a1c:	4a96      	ldr	r2, [pc, #600]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a1e:	f023 0304 	bic.w	r3, r3, #4
 8008a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a24:	e03f      	b.n	8008aa6 <HAL_RCC_OscConfig+0x592>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	d112      	bne.n	8008a54 <HAL_RCC_OscConfig+0x540>
 8008a2e:	4b92      	ldr	r3, [pc, #584]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a32:	4a91      	ldr	r2, [pc, #580]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a34:	f043 0304 	orr.w	r3, r3, #4
 8008a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3e:	4a8e      	ldr	r2, [pc, #568]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a46:	4b8c      	ldr	r3, [pc, #560]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a4a:	4a8b      	ldr	r2, [pc, #556]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a52:	e028      	b.n	8008aa6 <HAL_RCC_OscConfig+0x592>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	2b85      	cmp	r3, #133	@ 0x85
 8008a5a:	d112      	bne.n	8008a82 <HAL_RCC_OscConfig+0x56e>
 8008a5c:	4b86      	ldr	r3, [pc, #536]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a60:	4a85      	ldr	r2, [pc, #532]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a62:	f043 0304 	orr.w	r3, r3, #4
 8008a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a68:	4b83      	ldr	r3, [pc, #524]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6c:	4a82      	ldr	r2, [pc, #520]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a74:	4b80      	ldr	r3, [pc, #512]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a78:	4a7f      	ldr	r2, [pc, #508]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a80:	e011      	b.n	8008aa6 <HAL_RCC_OscConfig+0x592>
 8008a82:	4b7d      	ldr	r3, [pc, #500]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a86:	4a7c      	ldr	r2, [pc, #496]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a92:	4a79      	ldr	r2, [pc, #484]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a94:	f023 0304 	bic.w	r3, r3, #4
 8008a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a9a:	4b77      	ldr	r3, [pc, #476]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9e:	4a76      	ldr	r2, [pc, #472]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aae:	f7fb fe23 	bl	80046f8 <HAL_GetTick>
 8008ab2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ab4:	e00a      	b.n	8008acc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab6:	f7fb fe1f 	bl	80046f8 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e14c      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008acc:	4b6a      	ldr	r3, [pc, #424]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0ee      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x5a2>
 8008ad8:	e014      	b.n	8008b04 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ada:	f7fb fe0d 	bl	80046f8 <HAL_GetTick>
 8008ade:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ae0:	e00a      	b.n	8008af8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae2:	f7fb fe09 	bl	80046f8 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e136      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008af8:	4b5f      	ldr	r3, [pc, #380]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1ee      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 812b 	beq.w	8008d64 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b16:	2b18      	cmp	r3, #24
 8008b18:	f000 80bb 	beq.w	8008c92 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	f040 8095 	bne.w	8008c50 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b26:	4b54      	ldr	r3, [pc, #336]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a53      	ldr	r2, [pc, #332]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b32:	f7fb fde1 	bl	80046f8 <HAL_GetTick>
 8008b36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b38:	e008      	b.n	8008b4c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3a:	f7fb fddd 	bl	80046f8 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e10c      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1f0      	bne.n	8008b3a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b58:	4b47      	ldr	r3, [pc, #284]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b5c:	4b47      	ldr	r3, [pc, #284]	@ (8008c7c <HAL_RCC_OscConfig+0x768>)
 8008b5e:	4013      	ands	r3, r2
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b68:	0112      	lsls	r2, r2, #4
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	4942      	ldr	r1, [pc, #264]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b76:	3b01      	subs	r3, #1
 8008b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b80:	3b01      	subs	r3, #1
 8008b82:	025b      	lsls	r3, r3, #9
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	061b      	lsls	r3, r3, #24
 8008b9e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ba2:	4935      	ldr	r1, [pc, #212]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ba8:	4b33      	ldr	r3, [pc, #204]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	4a32      	ldr	r2, [pc, #200]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bb4:	4b30      	ldr	r3, [pc, #192]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb8:	4b31      	ldr	r3, [pc, #196]	@ (8008c80 <HAL_RCC_OscConfig+0x76c>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bc0:	00d2      	lsls	r2, r2, #3
 8008bc2:	492d      	ldr	r1, [pc, #180]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bcc:	f023 020c 	bic.w	r2, r3, #12
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	4928      	ldr	r1, [pc, #160]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008bda:	4b27      	ldr	r3, [pc, #156]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	f023 0202 	bic.w	r2, r3, #2
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be6:	4924      	ldr	r1, [pc, #144]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008bec:	4b22      	ldr	r3, [pc, #136]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	4a21      	ldr	r2, [pc, #132]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c04:	4b1c      	ldr	r3, [pc, #112]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	4a1b      	ldr	r2, [pc, #108]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c10:	4b19      	ldr	r3, [pc, #100]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	4a18      	ldr	r2, [pc, #96]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c1c:	4b16      	ldr	r3, [pc, #88]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a15      	ldr	r2, [pc, #84]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fb fd66 	bl	80046f8 <HAL_GetTick>
 8008c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c30:	f7fb fd62 	bl	80046f8 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e091      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c42:	4b0d      	ldr	r3, [pc, #52]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0f0      	beq.n	8008c30 <HAL_RCC_OscConfig+0x71c>
 8008c4e:	e089      	b.n	8008d64 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c50:	4b09      	ldr	r3, [pc, #36]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a08      	ldr	r2, [pc, #32]	@ (8008c78 <HAL_RCC_OscConfig+0x764>)
 8008c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5c:	f7fb fd4c 	bl	80046f8 <HAL_GetTick>
 8008c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c62:	e00f      	b.n	8008c84 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c64:	f7fb fd48 	bl	80046f8 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d908      	bls.n	8008c84 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e077      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
 8008c76:	bf00      	nop
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	fffffc0c 	.word	0xfffffc0c
 8008c80:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c84:	4b3a      	ldr	r3, [pc, #232]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e9      	bne.n	8008c64 <HAL_RCC_OscConfig+0x750>
 8008c90:	e068      	b.n	8008d64 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c92:	4b37      	ldr	r3, [pc, #220]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c98:	4b35      	ldr	r3, [pc, #212]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d031      	beq.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f003 0203 	and.w	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d12a      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	091b      	lsrs	r3, r3, #4
 8008cb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d122      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d11a      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0a5b      	lsrs	r3, r3, #9
 8008cd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d111      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d108      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	0e1b      	lsrs	r3, r3, #24
 8008cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d001      	beq.n	8008d0e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e02b      	b.n	8008d66 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d0e:	4b18      	ldr	r3, [pc, #96]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d12:	08db      	lsrs	r3, r3, #3
 8008d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d18:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d01f      	beq.n	8008d64 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d24:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	4a11      	ldr	r2, [pc, #68]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d30:	f7fb fce2 	bl	80046f8 <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d36:	bf00      	nop
 8008d38:	f7fb fcde 	bl	80046f8 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d0f9      	beq.n	8008d38 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d44:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d48:	4b0a      	ldr	r3, [pc, #40]	@ (8008d74 <HAL_RCC_OscConfig+0x860>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d50:	00d2      	lsls	r2, r2, #3
 8008d52:	4907      	ldr	r1, [pc, #28]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d58:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	4a04      	ldr	r2, [pc, #16]	@ (8008d70 <HAL_RCC_OscConfig+0x85c>)
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3730      	adds	r7, #48	@ 0x30
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	58024400 	.word	0x58024400
 8008d74:	ffff0007 	.word	0xffff0007

08008d78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e19c      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d910      	bls.n	8008dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9a:	4b87      	ldr	r3, [pc, #540]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f023 020f 	bic.w	r2, r3, #15
 8008da2:	4985      	ldr	r1, [pc, #532]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008daa:	4b83      	ldr	r3, [pc, #524]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d001      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e184      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691a      	ldr	r2, [r3, #16]
 8008dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d908      	bls.n	8008dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008dd8:	4b78      	ldr	r3, [pc, #480]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	4975      	ldr	r1, [pc, #468]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0308 	and.w	r3, r3, #8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d010      	beq.n	8008e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695a      	ldr	r2, [r3, #20]
 8008dfa:	4b70      	ldr	r3, [pc, #448]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d908      	bls.n	8008e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e06:	4b6d      	ldr	r3, [pc, #436]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	496a      	ldr	r1, [pc, #424]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0310 	and.w	r3, r3, #16
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d010      	beq.n	8008e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	4b64      	ldr	r3, [pc, #400]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d908      	bls.n	8008e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e34:	4b61      	ldr	r3, [pc, #388]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	495e      	ldr	r1, [pc, #376]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d010      	beq.n	8008e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69da      	ldr	r2, [r3, #28]
 8008e56:	4b59      	ldr	r3, [pc, #356]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d908      	bls.n	8008e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e62:	4b56      	ldr	r3, [pc, #344]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	4953      	ldr	r1, [pc, #332]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d010      	beq.n	8008ea2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	4b4d      	ldr	r3, [pc, #308]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d908      	bls.n	8008ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e90:	4b4a      	ldr	r3, [pc, #296]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f023 020f 	bic.w	r2, r3, #15
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	4947      	ldr	r1, [pc, #284]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d055      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008eae:	4b43      	ldr	r3, [pc, #268]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	4940      	ldr	r1, [pc, #256]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d107      	bne.n	8008ed8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d121      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0f6      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d107      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ee0:	4b36      	ldr	r3, [pc, #216]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d115      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e0ea      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d107      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ef8:	4b30      	ldr	r3, [pc, #192]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0de      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f08:	4b2c      	ldr	r3, [pc, #176]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0d6      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f18:	4b28      	ldr	r3, [pc, #160]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	f023 0207 	bic.w	r2, r3, #7
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4925      	ldr	r1, [pc, #148]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f2a:	f7fb fbe5 	bl	80046f8 <HAL_GetTick>
 8008f2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f30:	e00a      	b.n	8008f48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f32:	f7fb fbe1 	bl	80046f8 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d901      	bls.n	8008f48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e0be      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f48:	4b1c      	ldr	r3, [pc, #112]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d1eb      	bne.n	8008f32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	4b14      	ldr	r3, [pc, #80]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d208      	bcs.n	8008f88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f76:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f023 020f 	bic.w	r2, r3, #15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	490e      	ldr	r1, [pc, #56]	@ (8008fbc <HAL_RCC_ClockConfig+0x244>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d214      	bcs.n	8008fc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f96:	4b08      	ldr	r3, [pc, #32]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f023 020f 	bic.w	r2, r3, #15
 8008f9e:	4906      	ldr	r1, [pc, #24]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fa6:	4b04      	ldr	r3, [pc, #16]	@ (8008fb8 <HAL_RCC_ClockConfig+0x240>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d005      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e086      	b.n	80090c6 <HAL_RCC_ClockConfig+0x34e>
 8008fb8:	52002000 	.word	0x52002000
 8008fbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d010      	beq.n	8008fee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d208      	bcs.n	8008fee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	4939      	ldr	r1, [pc, #228]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d010      	beq.n	800901c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695a      	ldr	r2, [r3, #20]
 8008ffe:	4b34      	ldr	r3, [pc, #208]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009006:	429a      	cmp	r2, r3
 8009008:	d208      	bcs.n	800901c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800900a:	4b31      	ldr	r3, [pc, #196]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	492e      	ldr	r1, [pc, #184]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009018:	4313      	orrs	r3, r2
 800901a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699a      	ldr	r2, [r3, #24]
 800902c:	4b28      	ldr	r3, [pc, #160]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009034:	429a      	cmp	r2, r3
 8009036:	d208      	bcs.n	800904a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009038:	4b25      	ldr	r3, [pc, #148]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	4922      	ldr	r1, [pc, #136]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009046:	4313      	orrs	r3, r2
 8009048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d010      	beq.n	8009078 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69da      	ldr	r2, [r3, #28]
 800905a:	4b1d      	ldr	r3, [pc, #116]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009062:	429a      	cmp	r2, r3
 8009064:	d208      	bcs.n	8009078 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009066:	4b1a      	ldr	r3, [pc, #104]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	4917      	ldr	r1, [pc, #92]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009074:	4313      	orrs	r3, r2
 8009076:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009078:	f000 f834 	bl	80090e4 <HAL_RCC_GetSysClockFreq>
 800907c:	4602      	mov	r2, r0
 800907e:	4b14      	ldr	r3, [pc, #80]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	4912      	ldr	r1, [pc, #72]	@ (80090d4 <HAL_RCC_ClockConfig+0x35c>)
 800908a:	5ccb      	ldrb	r3, [r1, r3]
 800908c:	f003 031f 	and.w	r3, r3, #31
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
 8009094:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009096:	4b0e      	ldr	r3, [pc, #56]	@ (80090d0 <HAL_RCC_ClockConfig+0x358>)
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	4a0d      	ldr	r2, [pc, #52]	@ (80090d4 <HAL_RCC_ClockConfig+0x35c>)
 80090a0:	5cd3      	ldrb	r3, [r2, r3]
 80090a2:	f003 031f 	and.w	r3, r3, #31
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ac:	4a0a      	ldr	r2, [pc, #40]	@ (80090d8 <HAL_RCC_ClockConfig+0x360>)
 80090ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090b0:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <HAL_RCC_ClockConfig+0x364>)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80090b6:	4b0a      	ldr	r3, [pc, #40]	@ (80090e0 <HAL_RCC_ClockConfig+0x368>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fb fad2 	bl	8004664 <HAL_InitTick>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	58024400 	.word	0x58024400
 80090d4:	08014b0c 	.word	0x08014b0c
 80090d8:	240000c4 	.word	0x240000c4
 80090dc:	240000c0 	.word	0x240000c0
 80090e0:	240000c8 	.word	0x240000c8

080090e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b089      	sub	sp, #36	@ 0x24
 80090e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090ea:	4bb3      	ldr	r3, [pc, #716]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090f2:	2b18      	cmp	r3, #24
 80090f4:	f200 8155 	bhi.w	80093a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80090f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <HAL_RCC_GetSysClockFreq+0x1c>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	08009165 	.word	0x08009165
 8009104:	080093a3 	.word	0x080093a3
 8009108:	080093a3 	.word	0x080093a3
 800910c:	080093a3 	.word	0x080093a3
 8009110:	080093a3 	.word	0x080093a3
 8009114:	080093a3 	.word	0x080093a3
 8009118:	080093a3 	.word	0x080093a3
 800911c:	080093a3 	.word	0x080093a3
 8009120:	0800918b 	.word	0x0800918b
 8009124:	080093a3 	.word	0x080093a3
 8009128:	080093a3 	.word	0x080093a3
 800912c:	080093a3 	.word	0x080093a3
 8009130:	080093a3 	.word	0x080093a3
 8009134:	080093a3 	.word	0x080093a3
 8009138:	080093a3 	.word	0x080093a3
 800913c:	080093a3 	.word	0x080093a3
 8009140:	08009191 	.word	0x08009191
 8009144:	080093a3 	.word	0x080093a3
 8009148:	080093a3 	.word	0x080093a3
 800914c:	080093a3 	.word	0x080093a3
 8009150:	080093a3 	.word	0x080093a3
 8009154:	080093a3 	.word	0x080093a3
 8009158:	080093a3 	.word	0x080093a3
 800915c:	080093a3 	.word	0x080093a3
 8009160:	08009197 	.word	0x08009197
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009164:	4b94      	ldr	r3, [pc, #592]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009170:	4b91      	ldr	r3, [pc, #580]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	08db      	lsrs	r3, r3, #3
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	4a90      	ldr	r2, [pc, #576]	@ (80093bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
 8009180:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009182:	e111      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009184:	4b8d      	ldr	r3, [pc, #564]	@ (80093bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009186:	61bb      	str	r3, [r7, #24]
      break;
 8009188:	e10e      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800918a:	4b8d      	ldr	r3, [pc, #564]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800918c:	61bb      	str	r3, [r7, #24]
      break;
 800918e:	e10b      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009190:	4b8c      	ldr	r3, [pc, #560]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009192:	61bb      	str	r3, [r7, #24]
      break;
 8009194:	e108      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009196:	4b88      	ldr	r3, [pc, #544]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80091a0:	4b85      	ldr	r3, [pc, #532]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a4:	091b      	lsrs	r3, r3, #4
 80091a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80091ac:	4b82      	ldr	r3, [pc, #520]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091b6:	4b80      	ldr	r3, [pc, #512]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ba:	08db      	lsrs	r3, r3, #3
 80091bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 80e1 	beq.w	800939c <HAL_RCC_GetSysClockFreq+0x2b8>
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	f000 8083 	beq.w	80092e8 <HAL_RCC_GetSysClockFreq+0x204>
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	f200 80a1 	bhi.w	800932c <HAL_RCC_GetSysClockFreq+0x248>
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <HAL_RCC_GetSysClockFreq+0x114>
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d056      	beq.n	80092a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80091f6:	e099      	b.n	800932c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f8:	4b6f      	ldr	r3, [pc, #444]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d02d      	beq.n	8009260 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009204:	4b6c      	ldr	r3, [pc, #432]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	08db      	lsrs	r3, r3, #3
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	4a6b      	ldr	r2, [pc, #428]	@ (80093bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009210:	fa22 f303 	lsr.w	r3, r2, r3
 8009214:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922e:	4b62      	ldr	r3, [pc, #392]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009242:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800925e:	e087      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80093cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800926e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009272:	4b51      	ldr	r3, [pc, #324]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009282:	ed97 6a02 	vldr	s12, [r7, #8]
 8009286:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800928a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092a2:	e065      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80093d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b6:	4b40      	ldr	r3, [pc, #256]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092e6:	e043      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80093d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b2f      	ldr	r3, [pc, #188]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a02 	vldr	s12, [r7, #8]
 800930e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800932a:	e021      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80093d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b1e      	ldr	r3, [pc, #120]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009352:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800936e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009370:	4b11      	ldr	r3, [pc, #68]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009374:	0a5b      	lsrs	r3, r3, #9
 8009376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937a:	3301      	adds	r3, #1
 800937c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009388:	edd7 6a07 	vldr	s13, [r7, #28]
 800938c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009394:	ee17 3a90 	vmov	r3, s15
 8009398:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800939a:	e005      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	61bb      	str	r3, [r7, #24]
      break;
 80093a0:	e002      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80093a2:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093a4:	61bb      	str	r3, [r7, #24]
      break;
 80093a6:	bf00      	nop
  }

  return sysclockfreq;
 80093a8:	69bb      	ldr	r3, [r7, #24]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3724      	adds	r7, #36	@ 0x24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	58024400 	.word	0x58024400
 80093bc:	03d09000 	.word	0x03d09000
 80093c0:	003d0900 	.word	0x003d0900
 80093c4:	016e3600 	.word	0x016e3600
 80093c8:	46000000 	.word	0x46000000
 80093cc:	4c742400 	.word	0x4c742400
 80093d0:	4a742400 	.word	0x4a742400
 80093d4:	4bb71b00 	.word	0x4bb71b00

080093d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80093de:	f7ff fe81 	bl	80090e4 <HAL_RCC_GetSysClockFreq>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4b10      	ldr	r3, [pc, #64]	@ (8009428 <HAL_RCC_GetHCLKFreq+0x50>)
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	f003 030f 	and.w	r3, r3, #15
 80093ee:	490f      	ldr	r1, [pc, #60]	@ (800942c <HAL_RCC_GetHCLKFreq+0x54>)
 80093f0:	5ccb      	ldrb	r3, [r1, r3]
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80093fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <HAL_RCC_GetHCLKFreq+0x50>)
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	4a09      	ldr	r2, [pc, #36]	@ (800942c <HAL_RCC_GetHCLKFreq+0x54>)
 8009406:	5cd3      	ldrb	r3, [r2, r3]
 8009408:	f003 031f 	and.w	r3, r3, #31
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	fa22 f303 	lsr.w	r3, r2, r3
 8009412:	4a07      	ldr	r2, [pc, #28]	@ (8009430 <HAL_RCC_GetHCLKFreq+0x58>)
 8009414:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009416:	4a07      	ldr	r2, [pc, #28]	@ (8009434 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800941c:	4b04      	ldr	r3, [pc, #16]	@ (8009430 <HAL_RCC_GetHCLKFreq+0x58>)
 800941e:	681b      	ldr	r3, [r3, #0]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	58024400 	.word	0x58024400
 800942c:	08014b0c 	.word	0x08014b0c
 8009430:	240000c4 	.word	0x240000c4
 8009434:	240000c0 	.word	0x240000c0

08009438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800943c:	f7ff ffcc 	bl	80093d8 <HAL_RCC_GetHCLKFreq>
 8009440:	4602      	mov	r2, r0
 8009442:	4b06      	ldr	r3, [pc, #24]	@ (800945c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	091b      	lsrs	r3, r3, #4
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	4904      	ldr	r1, [pc, #16]	@ (8009460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800944e:	5ccb      	ldrb	r3, [r1, r3]
 8009450:	f003 031f 	and.w	r3, r3, #31
 8009454:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009458:	4618      	mov	r0, r3
 800945a:	bd80      	pop	{r7, pc}
 800945c:	58024400 	.word	0x58024400
 8009460:	08014b0c 	.word	0x08014b0c

08009464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8009468:	f7ff ffb6 	bl	80093d8 <HAL_RCC_GetHCLKFreq>
 800946c:	4602      	mov	r2, r0
 800946e:	4b06      	ldr	r3, [pc, #24]	@ (8009488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	0a1b      	lsrs	r3, r3, #8
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	4904      	ldr	r1, [pc, #16]	@ (800948c <HAL_RCC_GetPCLK2Freq+0x28>)
 800947a:	5ccb      	ldrb	r3, [r1, r3]
 800947c:	f003 031f 	and.w	r3, r3, #31
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009484:	4618      	mov	r0, r3
 8009486:	bd80      	pop	{r7, pc}
 8009488:	58024400 	.word	0x58024400
 800948c:	08014b0c 	.word	0x08014b0c

08009490 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009494:	b0c8      	sub	sp, #288	@ 0x120
 8009496:	af00      	add	r7, sp, #0
 8009498:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800949c:	2300      	movs	r3, #0
 800949e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094a2:	2300      	movs	r3, #0
 80094a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80094b4:	2500      	movs	r5, #0
 80094b6:	ea54 0305 	orrs.w	r3, r4, r5
 80094ba:	d049      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80094bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094c6:	d02f      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80094c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094cc:	d828      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d2:	d01a      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80094d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d8:	d822      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80094de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094e2:	d007      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094e4:	e01c      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e6:	4ba7      	ldr	r3, [pc, #668]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	4aa6      	ldr	r2, [pc, #664]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094f2:	e01a      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	3308      	adds	r3, #8
 80094fa:	2102      	movs	r1, #2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fc43 	bl	800ad88 <RCCEx_PLL2_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009508:	e00f      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800950a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950e:	3328      	adds	r3, #40	@ 0x28
 8009510:	2102      	movs	r1, #2
 8009512:	4618      	mov	r0, r3
 8009514:	f001 fcea 	bl	800aeec <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800951e:	e004      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10a      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009532:	4b94      	ldr	r3, [pc, #592]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009536:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800953a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009540:	4a90      	ldr	r2, [pc, #576]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009542:	430b      	orrs	r3, r1
 8009544:	6513      	str	r3, [r2, #80]	@ 0x50
 8009546:	e003      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800954c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800955c:	f04f 0900 	mov.w	r9, #0
 8009560:	ea58 0309 	orrs.w	r3, r8, r9
 8009564:	d047      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956c:	2b04      	cmp	r3, #4
 800956e:	d82a      	bhi.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009570:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009576:	bf00      	nop
 8009578:	0800958d 	.word	0x0800958d
 800957c:	0800959b 	.word	0x0800959b
 8009580:	080095b1 	.word	0x080095b1
 8009584:	080095cf 	.word	0x080095cf
 8009588:	080095cf 	.word	0x080095cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958c:	4b7d      	ldr	r3, [pc, #500]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	4a7c      	ldr	r2, [pc, #496]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009598:	e01a      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800959a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959e:	3308      	adds	r3, #8
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 fbf0 	bl	800ad88 <RCCEx_PLL2_Config>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095ae:	e00f      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b4:	3328      	adds	r3, #40	@ 0x28
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 fc97 	bl	800aeec <RCCEx_PLL3_Config>
 80095be:	4603      	mov	r3, r0
 80095c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095c4:	e004      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095cc:	e000      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80095ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095dc:	f023 0107 	bic.w	r1, r3, #7
 80095e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095e6:	4a67      	ldr	r2, [pc, #412]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80095f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009602:	f04f 0b00 	mov.w	fp, #0
 8009606:	ea5a 030b 	orrs.w	r3, sl, fp
 800960a:	d054      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800960c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009612:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009616:	d036      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009618:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800961c:	d82f      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800961e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009622:	d032      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009628:	d829      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800962a:	2bc0      	cmp	r3, #192	@ 0xc0
 800962c:	d02f      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800962e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009630:	d825      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009632:	2b80      	cmp	r3, #128	@ 0x80
 8009634:	d018      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009636:	2b80      	cmp	r3, #128	@ 0x80
 8009638:	d821      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800963e:	2b40      	cmp	r3, #64	@ 0x40
 8009640:	d007      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009642:	e01c      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4b4f      	ldr	r3, [pc, #316]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	4a4e      	ldr	r2, [pc, #312]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009650:	e01e      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f001 fb94 	bl	800ad88 <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009666:	e013      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800966c:	3328      	adds	r3, #40	@ 0x28
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f001 fc3b 	bl	800aeec <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800967c:	e008      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009684:	e004      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009686:	bf00      	nop
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800968a:	bf00      	nop
 800968c:	e000      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800968e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009698:	4b3a      	ldr	r3, [pc, #232]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800969a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80096a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096a6:	4a37      	ldr	r2, [pc, #220]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80096ac:	e003      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80096b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80096c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80096cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d05c      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80096e0:	d03b      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80096e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80096e6:	d834      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ec:	d037      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80096ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f2:	d82e      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80096f8:	d033      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80096fe:	d828      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009704:	d01a      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8009706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800970a:	d822      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009714:	d007      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009716:	e01c      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009718:	4b1a      	ldr	r3, [pc, #104]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	4a19      	ldr	r2, [pc, #100]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800971e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009724:	e01e      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800972a:	3308      	adds	r3, #8
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f001 fb2a 	bl	800ad88 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800973a:	e013      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800973c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009740:	3328      	adds	r3, #40	@ 0x28
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f001 fbd1 	bl	800aeec <RCCEx_PLL3_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009750:	e008      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009758:	e004      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800975a:	bf00      	nop
 800975c:	e002      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800975e:	bf00      	nop
 8009760:	e000      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10d      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800976c:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800976e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009770:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800977a:	4a02      	ldr	r2, [pc, #8]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800977c:	430b      	orrs	r3, r1
 800977e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009780:	e006      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009782:	bf00      	nop
 8009784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800978c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800979c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80097a0:	2300      	movs	r3, #0
 80097a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80097aa:	460b      	mov	r3, r1
 80097ac:	4313      	orrs	r3, r2
 80097ae:	d03a      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80097b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b6:	2b30      	cmp	r3, #48	@ 0x30
 80097b8:	d01f      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80097ba:	2b30      	cmp	r3, #48	@ 0x30
 80097bc:	d819      	bhi.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d00c      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d815      	bhi.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d019      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80097ca:	2b10      	cmp	r3, #16
 80097cc:	d111      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ce:	4bae      	ldr	r3, [pc, #696]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d2:	4aad      	ldr	r2, [pc, #692]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097da:	e011      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e0:	3308      	adds	r3, #8
 80097e2:	2102      	movs	r1, #2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 facf 	bl	800ad88 <RCCEx_PLL2_Config>
 80097ea:	4603      	mov	r3, r0
 80097ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097f0:	e006      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097f8:	e002      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80097fa:	bf00      	nop
 80097fc:	e000      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80097fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009808:	4b9f      	ldr	r3, [pc, #636]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800980a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009816:	4a9c      	ldr	r2, [pc, #624]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009818:	430b      	orrs	r3, r1
 800981a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800981c:	e003      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009836:	2300      	movs	r3, #0
 8009838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800983c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009840:	460b      	mov	r3, r1
 8009842:	4313      	orrs	r3, r2
 8009844:	d051      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800984c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009850:	d035      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009856:	d82e      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800985c:	d031      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800985e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009862:	d828      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009868:	d01a      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986e:	d822      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009878:	d007      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800987a:	e01c      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4b82      	ldr	r3, [pc, #520]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	4a81      	ldr	r2, [pc, #516]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009888:	e01c      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800988e:	3308      	adds	r3, #8
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f001 fa78 	bl	800ad88 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800989e:	e011      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a4:	3328      	adds	r3, #40	@ 0x28
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fb1f 	bl	800aeec <RCCEx_PLL3_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80098bc:	e002      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80098c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098cc:	4b6e      	ldr	r3, [pc, #440]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80098d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098da:	4a6b      	ldr	r2, [pc, #428]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6513      	str	r3, [r2, #80]	@ 0x50
 80098e0:	e003      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80098f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009904:	460b      	mov	r3, r1
 8009906:	4313      	orrs	r3, r2
 8009908:	d053      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800990a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009914:	d033      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009916:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800991a:	d82c      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800991c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009920:	d02f      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009926:	d826      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800992c:	d02b      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800992e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009932:	d820      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009938:	d012      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800993a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800993e:	d81a      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d022      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009948:	d115      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800994a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994e:	3308      	adds	r3, #8
 8009950:	2101      	movs	r1, #1
 8009952:	4618      	mov	r0, r3
 8009954:	f001 fa18 	bl	800ad88 <RCCEx_PLL2_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800995e:	e015      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	3328      	adds	r3, #40	@ 0x28
 8009966:	2101      	movs	r1, #1
 8009968:	4618      	mov	r0, r3
 800996a:	f001 fabf 	bl	800aeec <RCCEx_PLL3_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009974:	e00a      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800997c:	e006      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800997e:	bf00      	nop
 8009980:	e004      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800998a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009994:	4b3c      	ldr	r3, [pc, #240]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009998:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800999c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099a2:	4a39      	ldr	r2, [pc, #228]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80099a8:	e003      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80099be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d060      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80099d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80099da:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099de:	d039      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80099e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099e4:	d832      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099ea:	d035      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80099ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099f0:	d82c      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f6:	d031      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80099f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fc:	d826      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a02:	d02d      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009a04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a08:	d820      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a0e:	d012      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a14:	d81a      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d024      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1e:	d115      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a24:	3308      	adds	r3, #8
 8009a26:	2101      	movs	r1, #1
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 f9ad 	bl	800ad88 <RCCEx_PLL2_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a34:	e017      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a3a:	3328      	adds	r3, #40	@ 0x28
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fa54 	bl	800aeec <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a4a:	e00c      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a52:	e008      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a54:	bf00      	nop
 8009a56:	e006      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a58:	bf00      	nop
 8009a5a:	e004      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a5c:	bf00      	nop
 8009a5e:	e002      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a60:	bf00      	nop
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10e      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a6e:	4b06      	ldr	r3, [pc, #24]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a7e:	4a02      	ldr	r2, [pc, #8]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a80:	430b      	orrs	r3, r1
 8009a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a84:	e006      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009a86:	bf00      	nop
 8009a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d037      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abe:	d00e      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ac4:	d816      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d018      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ace:	d111      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad0:	4bc4      	ldr	r3, [pc, #784]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	4ac3      	ldr	r2, [pc, #780]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009adc:	e00f      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 f94e 	bl	800ad88 <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009af2:	e004      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009afa:	e000      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b06:	4bb7      	ldr	r3, [pc, #732]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b14:	4ab3      	ldr	r2, [pc, #716]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b16:	430b      	orrs	r3, r1
 8009b18:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b1a:	e003      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b34:	2300      	movs	r3, #0
 8009b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009b3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d039      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d81c      	bhi.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b54:	08009b91 	.word	0x08009b91
 8009b58:	08009b65 	.word	0x08009b65
 8009b5c:	08009b73 	.word	0x08009b73
 8009b60:	08009b91 	.word	0x08009b91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b64:	4b9f      	ldr	r3, [pc, #636]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4a9e      	ldr	r2, [pc, #632]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b70:	e00f      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b76:	3308      	adds	r3, #8
 8009b78:	2102      	movs	r1, #2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 f904 	bl	800ad88 <RCCEx_PLL2_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b86:	e004      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b8e:	e000      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10a      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b9a:	4b92      	ldr	r3, [pc, #584]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b9e:	f023 0103 	bic.w	r1, r3, #3
 8009ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba8:	4a8e      	ldr	r2, [pc, #568]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009baa:	430b      	orrs	r3, r1
 8009bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009bae:	e003      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009bce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	f000 8099 	beq.w	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bda:	4b83      	ldr	r3, [pc, #524]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a82      	ldr	r2, [pc, #520]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009be4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009be6:	f7fa fd87 	bl	80046f8 <HAL_GetTick>
 8009bea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bee:	e00b      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bf0:	f7fa fd82 	bl	80046f8 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b64      	cmp	r3, #100	@ 0x64
 8009bfe:	d903      	bls.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c06:	e005      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c08:	4b77      	ldr	r3, [pc, #476]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0ed      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009c14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d173      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c1c:	4b71      	ldr	r3, [pc, #452]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c28:	4053      	eors	r3, r2
 8009c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d015      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c32:	4b6c      	ldr	r3, [pc, #432]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c3e:	4b69      	ldr	r3, [pc, #420]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c42:	4a68      	ldr	r2, [pc, #416]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c4a:	4b66      	ldr	r3, [pc, #408]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c4e:	4a65      	ldr	r2, [pc, #404]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c56:	4a63      	ldr	r2, [pc, #396]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c6a:	d118      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6c:	f7fa fd44 	bl	80046f8 <HAL_GetTick>
 8009c70:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c74:	e00d      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c76:	f7fa fd3f 	bl	80046f8 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c80:	1ad2      	subs	r2, r2, r3
 8009c82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d903      	bls.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009c90:	e005      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c92:	4b54      	ldr	r3, [pc, #336]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0eb      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d129      	bne.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cb6:	d10e      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cc8:	091a      	lsrs	r2, r3, #4
 8009cca:	4b48      	ldr	r3, [pc, #288]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	4a45      	ldr	r2, [pc, #276]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	6113      	str	r3, [r2, #16]
 8009cd4:	e005      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009cd6:	4b43      	ldr	r3, [pc, #268]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	4a42      	ldr	r2, [pc, #264]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ce0:	6113      	str	r3, [r2, #16]
 8009ce2:	4b40      	ldr	r3, [pc, #256]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cf8:	e008      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009d02:	e003      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f002 0301 	and.w	r3, r2, #1
 8009d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f000 8090 	beq.w	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d36:	2b28      	cmp	r3, #40	@ 0x28
 8009d38:	d870      	bhi.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009e25 	.word	0x08009e25
 8009d44:	08009e1d 	.word	0x08009e1d
 8009d48:	08009e1d 	.word	0x08009e1d
 8009d4c:	08009e1d 	.word	0x08009e1d
 8009d50:	08009e1d 	.word	0x08009e1d
 8009d54:	08009e1d 	.word	0x08009e1d
 8009d58:	08009e1d 	.word	0x08009e1d
 8009d5c:	08009e1d 	.word	0x08009e1d
 8009d60:	08009df1 	.word	0x08009df1
 8009d64:	08009e1d 	.word	0x08009e1d
 8009d68:	08009e1d 	.word	0x08009e1d
 8009d6c:	08009e1d 	.word	0x08009e1d
 8009d70:	08009e1d 	.word	0x08009e1d
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e1d 	.word	0x08009e1d
 8009d7c:	08009e1d 	.word	0x08009e1d
 8009d80:	08009e07 	.word	0x08009e07
 8009d84:	08009e1d 	.word	0x08009e1d
 8009d88:	08009e1d 	.word	0x08009e1d
 8009d8c:	08009e1d 	.word	0x08009e1d
 8009d90:	08009e1d 	.word	0x08009e1d
 8009d94:	08009e1d 	.word	0x08009e1d
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e1d 	.word	0x08009e1d
 8009da0:	08009e25 	.word	0x08009e25
 8009da4:	08009e1d 	.word	0x08009e1d
 8009da8:	08009e1d 	.word	0x08009e1d
 8009dac:	08009e1d 	.word	0x08009e1d
 8009db0:	08009e1d 	.word	0x08009e1d
 8009db4:	08009e1d 	.word	0x08009e1d
 8009db8:	08009e1d 	.word	0x08009e1d
 8009dbc:	08009e1d 	.word	0x08009e1d
 8009dc0:	08009e25 	.word	0x08009e25
 8009dc4:	08009e1d 	.word	0x08009e1d
 8009dc8:	08009e1d 	.word	0x08009e1d
 8009dcc:	08009e1d 	.word	0x08009e1d
 8009dd0:	08009e1d 	.word	0x08009e1d
 8009dd4:	08009e1d 	.word	0x08009e1d
 8009dd8:	08009e1d 	.word	0x08009e1d
 8009ddc:	08009e1d 	.word	0x08009e1d
 8009de0:	08009e25 	.word	0x08009e25
 8009de4:	58024400 	.word	0x58024400
 8009de8:	58024800 	.word	0x58024800
 8009dec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df4:	3308      	adds	r3, #8
 8009df6:	2101      	movs	r1, #1
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ffc5 	bl	800ad88 <RCCEx_PLL2_Config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e04:	e00f      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0a:	3328      	adds	r3, #40	@ 0x28
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 f86c 	bl	800aeec <RCCEx_PLL3_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e1a:	e004      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e22:	e000      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10b      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e2e:	4bc0      	ldr	r3, [pc, #768]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e32:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e3e:	4abc      	ldr	r2, [pc, #752]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e44:	e003      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f002 0302 	and.w	r3, r2, #2
 8009e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d043      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e76:	2b05      	cmp	r3, #5
 8009e78:	d824      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009ecd 	.word	0x08009ecd
 8009e84:	08009e99 	.word	0x08009e99
 8009e88:	08009eaf 	.word	0x08009eaf
 8009e8c:	08009ecd 	.word	0x08009ecd
 8009e90:	08009ecd 	.word	0x08009ecd
 8009e94:	08009ecd 	.word	0x08009ecd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 ff71 	bl	800ad88 <RCCEx_PLL2_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009eac:	e00f      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb2:	3328      	adds	r3, #40	@ 0x28
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 f818 	bl	800aeec <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ec2:	e004      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009eca:	e000      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10b      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009ed6:	4b96      	ldr	r3, [pc, #600]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eda:	f023 0107 	bic.w	r1, r3, #7
 8009ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee6:	4a92      	ldr	r2, [pc, #584]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eec:	e003      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ef2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f002 0304 	and.w	r3, r2, #4
 8009f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f06:	2300      	movs	r3, #0
 8009f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f0c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4313      	orrs	r3, r2
 8009f14:	d043      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	d824      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009f22:	a201      	add	r2, pc, #4	@ (adr r2, 8009f28 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f75 	.word	0x08009f75
 8009f2c:	08009f41 	.word	0x08009f41
 8009f30:	08009f57 	.word	0x08009f57
 8009f34:	08009f75 	.word	0x08009f75
 8009f38:	08009f75 	.word	0x08009f75
 8009f3c:	08009f75 	.word	0x08009f75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f44:	3308      	adds	r3, #8
 8009f46:	2101      	movs	r1, #1
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 ff1d 	bl	800ad88 <RCCEx_PLL2_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f54:	e00f      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f5a:	3328      	adds	r3, #40	@ 0x28
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 ffc4 	bl	800aeec <RCCEx_PLL3_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f6a:	e004      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f72:	e000      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f7e:	4b6c      	ldr	r3, [pc, #432]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f82:	f023 0107 	bic.w	r1, r3, #7
 8009f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f8e:	4a68      	ldr	r2, [pc, #416]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f90:	430b      	orrs	r3, r1
 8009f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f94:	e003      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f002 0320 	and.w	r3, r2, #32
 8009faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	d055      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fca:	d033      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fd0:	d82c      	bhi.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd6:	d02f      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fdc:	d826      	bhi.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fe2:	d02b      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009fe4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fe8:	d820      	bhi.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fee:	d012      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ff4:	d81a      	bhi.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d022      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ffe:	d115      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a004:	3308      	adds	r3, #8
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 febd 	bl	800ad88 <RCCEx_PLL2_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a014:	e015      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a01a:	3328      	adds	r3, #40	@ 0x28
 800a01c:	2102      	movs	r1, #2
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 ff64 	bl	800aeec <RCCEx_PLL3_Config>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a02a:	e00a      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a032:	e006      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a034:	bf00      	nop
 800a036:	e004      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a038:	bf00      	nop
 800a03a:	e002      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a03c:	bf00      	nop
 800a03e:	e000      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a040:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a04a:	4b39      	ldr	r3, [pc, #228]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a04e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a05a:	4a35      	ldr	r2, [pc, #212]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a05c:	430b      	orrs	r3, r1
 800a05e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a060:	e003      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a066:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a07a:	2300      	movs	r3, #0
 800a07c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a080:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a084:	460b      	mov	r3, r1
 800a086:	4313      	orrs	r3, r2
 800a088:	d058      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a08e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a092:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a096:	d033      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a098:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a09c:	d82c      	bhi.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d02f      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a0a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a8:	d826      	bhi.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a0aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0ae:	d02b      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a0b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0b4:	d820      	bhi.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a0b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0ba:	d012      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a0bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0c0:	d81a      	bhi.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d022      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a0c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ca:	d115      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fe57 	bl	800ad88 <RCCEx_PLL2_Config>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0e0:	e015      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e6:	3328      	adds	r3, #40	@ 0x28
 800a0e8:	2102      	movs	r1, #2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fefe 	bl	800aeec <RCCEx_PLL3_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0f6:	e00a      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0fe:	e006      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a100:	bf00      	nop
 800a102:	e004      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a104:	bf00      	nop
 800a106:	e002      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a10e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10e      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a116:	4b06      	ldr	r3, [pc, #24]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a126:	4a02      	ldr	r2, [pc, #8]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a128:	430b      	orrs	r3, r1
 800a12a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a12c:	e006      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a12e:	bf00      	nop
 800a130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a138:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a152:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a156:	460b      	mov	r3, r1
 800a158:	4313      	orrs	r3, r2
 800a15a:	d055      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a15c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a164:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a168:	d033      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a16a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a16e:	d82c      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a174:	d02f      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a17a:	d826      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a17c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a180:	d02b      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a182:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a186:	d820      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a18c:	d012      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a18e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a192:	d81a      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d022      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a19c:	d115      	bne.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fdee 	bl	800ad88 <RCCEx_PLL2_Config>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1b2:	e015      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1b8:	3328      	adds	r3, #40	@ 0x28
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fe95 	bl	800aeec <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a1d2:	bf00      	nop
 800a1d4:	e004      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a1d6:	bf00      	nop
 800a1d8:	e002      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10b      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1e8:	4ba1      	ldr	r3, [pc, #644]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a1f8:	4a9d      	ldr	r2, [pc, #628]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1fe:	e003      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a204:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f002 0308 	and.w	r3, r2, #8
 800a214:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a218:	2300      	movs	r3, #0
 800a21a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a21e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a222:	460b      	mov	r3, r1
 800a224:	4313      	orrs	r3, r2
 800a226:	d01e      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a22c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a234:	d10c      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a23a:	3328      	adds	r3, #40	@ 0x28
 800a23c:	2102      	movs	r1, #2
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fe54 	bl	800aeec <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a250:	4b87      	ldr	r3, [pc, #540]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a254:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a25c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a260:	4a83      	ldr	r2, [pc, #524]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a262:	430b      	orrs	r3, r1
 800a264:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f002 0310 	and.w	r3, r2, #16
 800a272:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a276:	2300      	movs	r3, #0
 800a278:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a27c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a280:	460b      	mov	r3, r1
 800a282:	4313      	orrs	r3, r2
 800a284:	d01e      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a28e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a292:	d10c      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a298:	3328      	adds	r3, #40	@ 0x28
 800a29a:	2102      	movs	r1, #2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fe25 	bl	800aeec <RCCEx_PLL3_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2ae:	4b70      	ldr	r3, [pc, #448]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2be:	4a6c      	ldr	r2, [pc, #432]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a2d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	d03e      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a2e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2f0:	d022      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a2f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2f6:	d81b      	bhi.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a300:	d00b      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a302:	e015      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a308:	3308      	adds	r3, #8
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 fd3b 	bl	800ad88 <RCCEx_PLL2_Config>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a318:	e00f      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a31a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a31e:	3328      	adds	r3, #40	@ 0x28
 800a320:	2102      	movs	r1, #2
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fde2 	bl	800aeec <RCCEx_PLL3_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a32e:	e004      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a336:	e000      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a33a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10b      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a342:	4b4b      	ldr	r3, [pc, #300]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a346:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a34e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a352:	4a47      	ldr	r2, [pc, #284]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a354:	430b      	orrs	r3, r1
 800a356:	6593      	str	r3, [r2, #88]	@ 0x58
 800a358:	e003      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a35a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a35e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a36e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a370:	2300      	movs	r3, #0
 800a372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a374:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a378:	460b      	mov	r3, r1
 800a37a:	4313      	orrs	r3, r2
 800a37c:	d03b      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a37e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a386:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a38a:	d01f      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a38c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a390:	d818      	bhi.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a396:	d003      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a39c:	d007      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a39e:	e011      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a0:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a4:	4a32      	ldr	r2, [pc, #200]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3ac:	e00f      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b2:	3328      	adds	r3, #40	@ 0x28
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fd98 	bl	800aeec <RCCEx_PLL3_Config>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3c2:	e004      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3ca:	e000      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a3cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10b      	bne.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3d6:	4b26      	ldr	r3, [pc, #152]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e6:	4a22      	ldr	r2, [pc, #136]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3ec:	e003      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a402:	673b      	str	r3, [r7, #112]	@ 0x70
 800a404:	2300      	movs	r3, #0
 800a406:	677b      	str	r3, [r7, #116]	@ 0x74
 800a408:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a40c:	460b      	mov	r3, r1
 800a40e:	4313      	orrs	r3, r2
 800a410:	d034      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a41c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a420:	d007      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a422:	e011      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a424:	4b12      	ldr	r3, [pc, #72]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a428:	4a11      	ldr	r2, [pc, #68]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a42a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a42e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a430:	e00e      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a436:	3308      	adds	r3, #8
 800a438:	2102      	movs	r1, #2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 fca4 	bl	800ad88 <RCCEx_PLL2_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a44e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10d      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a458:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a45c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a466:	4a02      	ldr	r2, [pc, #8]	@ (800a470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a468:	430b      	orrs	r3, r1
 800a46a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a46c:	e006      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a478:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a48a:	2300      	movs	r3, #0
 800a48c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a48e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a492:	460b      	mov	r3, r1
 800a494:	4313      	orrs	r3, r2
 800a496:	d00c      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a49c:	3328      	adds	r3, #40	@ 0x28
 800a49e:	2102      	movs	r1, #2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fd23 	bl	800aeec <RCCEx_PLL3_Config>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a4be:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	d038      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4da:	d018      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a4dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4e0:	d811      	bhi.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e6:	d014      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4ec:	d80b      	bhi.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d011      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4f6:	d106      	bne.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f8:	4bc3      	ldr	r3, [pc, #780]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fc:	4ac2      	ldr	r2, [pc, #776]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a504:	e008      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a50c:	e004      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a50e:	bf00      	nop
 800a510:	e002      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a512:	bf00      	nop
 800a514:	e000      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a516:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a518:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10b      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a520:	4bb9      	ldr	r3, [pc, #740]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a524:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a530:	4ab5      	ldr	r2, [pc, #724]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a532:	430b      	orrs	r3, r1
 800a534:	6553      	str	r3, [r2, #84]	@ 0x54
 800a536:	e003      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a53c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a54c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a54e:	2300      	movs	r3, #0
 800a550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a552:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a556:	460b      	mov	r3, r1
 800a558:	4313      	orrs	r3, r2
 800a55a:	d009      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a55c:	4baa      	ldr	r3, [pc, #680]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a55e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a560:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a56a:	4aa7      	ldr	r2, [pc, #668]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a57c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a57e:	2300      	movs	r3, #0
 800a580:	657b      	str	r3, [r7, #84]	@ 0x54
 800a582:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a586:	460b      	mov	r3, r1
 800a588:	4313      	orrs	r3, r2
 800a58a:	d009      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a58c:	4b9e      	ldr	r3, [pc, #632]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a590:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a59a:	4a9b      	ldr	r2, [pc, #620]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a59c:	430b      	orrs	r3, r1
 800a59e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	d009      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a5bc:	4b92      	ldr	r3, [pc, #584]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ca:	4a8f      	ldr	r2, [pc, #572]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5cc:	430b      	orrs	r3, r1
 800a5ce:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a5dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5de:	2300      	movs	r3, #0
 800a5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	d00e      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5ec:	4b86      	ldr	r3, [pc, #536]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4a85      	ldr	r2, [pc, #532]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a5f6:	6113      	str	r3, [r2, #16]
 800a5f8:	4b83      	ldr	r3, [pc, #524]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5fa:	6919      	ldr	r1, [r3, #16]
 800a5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a604:	4a80      	ldr	r2, [pc, #512]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a606:	430b      	orrs	r3, r1
 800a608:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a616:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a61c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a620:	460b      	mov	r3, r1
 800a622:	4313      	orrs	r3, r2
 800a624:	d009      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a626:	4b78      	ldr	r3, [pc, #480]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a62a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a62e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a634:	4a74      	ldr	r2, [pc, #464]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a636:	430b      	orrs	r3, r1
 800a638:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a63a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a646:	633b      	str	r3, [r7, #48]	@ 0x30
 800a648:	2300      	movs	r3, #0
 800a64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a64c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a650:	460b      	mov	r3, r1
 800a652:	4313      	orrs	r3, r2
 800a654:	d00a      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a656:	4b6c      	ldr	r3, [pc, #432]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a666:	4a68      	ldr	r2, [pc, #416]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a668:	430b      	orrs	r3, r1
 800a66a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	2100      	movs	r1, #0
 800a676:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a67e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a682:	460b      	mov	r3, r1
 800a684:	4313      	orrs	r3, r2
 800a686:	d011      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a68c:	3308      	adds	r3, #8
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fb79 	bl	800ad88 <RCCEx_PLL2_Config>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a69c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6239      	str	r1, [r7, #32]
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	d011      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fb59 	bl	800ad88 <RCCEx_PLL2_Config>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	61b9      	str	r1, [r7, #24]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a702:	460b      	mov	r3, r1
 800a704:	4313      	orrs	r3, r2
 800a706:	d011      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a70c:	3308      	adds	r3, #8
 800a70e:	2102      	movs	r1, #2
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fb39 	bl	800ad88 <RCCEx_PLL2_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a71c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a724:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a728:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	2100      	movs	r1, #0
 800a736:	6139      	str	r1, [r7, #16]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	d011      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a74c:	3328      	adds	r3, #40	@ 0x28
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fbcb 	bl	800aeec <RCCEx_PLL3_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a75c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a768:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	2100      	movs	r1, #0
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	f003 0310 	and.w	r3, r3, #16
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a782:	460b      	mov	r3, r1
 800a784:	4313      	orrs	r3, r2
 800a786:	d011      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a78c:	3328      	adds	r3, #40	@ 0x28
 800a78e:	2101      	movs	r1, #1
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fbab 	bl	800aeec <RCCEx_PLL3_Config>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a79c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a7ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6039      	str	r1, [r7, #0]
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	607b      	str	r3, [r7, #4]
 800a7be:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	d011      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7cc:	3328      	adds	r3, #40	@ 0x28
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fb8b 	bl	800aeec <RCCEx_PLL3_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a7dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a7ec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e000      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a800:	46bd      	mov	sp, r7
 800a802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a806:	bf00      	nop
 800a808:	58024400 	.word	0x58024400

0800a80c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a810:	f7fe fde2 	bl	80093d8 <HAL_RCC_GetHCLKFreq>
 800a814:	4602      	mov	r2, r0
 800a816:	4b06      	ldr	r3, [pc, #24]	@ (800a830 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	091b      	lsrs	r3, r3, #4
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	4904      	ldr	r1, [pc, #16]	@ (800a834 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a822:	5ccb      	ldrb	r3, [r1, r3]
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	58024400 	.word	0x58024400
 800a834:	08014b0c 	.word	0x08014b0c

0800a838 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a838:	b480      	push	{r7}
 800a83a:	b089      	sub	sp, #36	@ 0x24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a840:	4ba1      	ldr	r3, [pc, #644]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a84a:	4b9f      	ldr	r3, [pc, #636]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84e:	0b1b      	lsrs	r3, r3, #12
 800a850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a854:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a856:	4b9c      	ldr	r3, [pc, #624]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	091b      	lsrs	r3, r3, #4
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a862:	4b99      	ldr	r3, [pc, #612]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a866:	08db      	lsrs	r3, r3, #3
 800a868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	fb02 f303 	mul.w	r3, r2, r3
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 8111 	beq.w	800aaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	f000 8083 	beq.w	800a994 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b02      	cmp	r3, #2
 800a892:	f200 80a1 	bhi.w	800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d056      	beq.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8a2:	e099      	b.n	800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8a4:	4b88      	ldr	r3, [pc, #544]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d02d      	beq.n	800a90c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b0:	4b85      	ldr	r3, [pc, #532]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	08db      	lsrs	r3, r3, #3
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	4a84      	ldr	r2, [pc, #528]	@ (800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b7b      	ldr	r3, [pc, #492]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a90a:	e087      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aad4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b6a      	ldr	r3, [pc, #424]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a932:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a94e:	e065      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a962:	4b59      	ldr	r3, [pc, #356]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a972:	ed97 6a03 	vldr	s12, [r7, #12]
 800a976:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a992:	e043      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	4b48      	ldr	r3, [pc, #288]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9d6:	e021      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ea:	4b37      	ldr	r3, [pc, #220]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa1c:	4b2a      	ldr	r3, [pc, #168]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa20:	0a5b      	lsrs	r3, r3, #9
 800aa22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa36:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa42:	ee17 2a90 	vmov	r2, s15
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa4a:	4b1f      	ldr	r3, [pc, #124]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa4e:	0c1b      	lsrs	r3, r3, #16
 800aa50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa64:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa70:	ee17 2a90 	vmov	r2, s15
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aa78:	4b13      	ldr	r3, [pc, #76]	@ (800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7c:	0e1b      	lsrs	r3, r3, #24
 800aa7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa92:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9e:	ee17 2a90 	vmov	r2, s15
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aaa6:	e008      	b.n	800aaba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	609a      	str	r2, [r3, #8]
}
 800aaba:	bf00      	nop
 800aabc:	3724      	adds	r7, #36	@ 0x24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400
 800aacc:	03d09000 	.word	0x03d09000
 800aad0:	46000000 	.word	0x46000000
 800aad4:	4c742400 	.word	0x4c742400
 800aad8:	4a742400 	.word	0x4a742400
 800aadc:	4bb71b00 	.word	0x4bb71b00

0800aae0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b089      	sub	sp, #36	@ 0x24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aae8:	4ba1      	ldr	r3, [pc, #644]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aaf2:	4b9f      	ldr	r3, [pc, #636]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	0d1b      	lsrs	r3, r3, #20
 800aaf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aafc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aafe:	4b9c      	ldr	r3, [pc, #624]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab02:	0a1b      	lsrs	r3, r3, #8
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab0a:	4b99      	ldr	r3, [pc, #612]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab0e:	08db      	lsrs	r3, r3, #3
 800ab10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	fb02 f303 	mul.w	r3, r2, r3
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8111 	beq.w	800ad50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	f000 8083 	beq.w	800ac3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	f200 80a1 	bhi.w	800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d056      	beq.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab4a:	e099      	b.n	800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab4c:	4b88      	ldr	r3, [pc, #544]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0320 	and.w	r3, r3, #32
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d02d      	beq.n	800abb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab58:	4b85      	ldr	r3, [pc, #532]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	08db      	lsrs	r3, r3, #3
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	4a84      	ldr	r2, [pc, #528]	@ (800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ab64:	fa22 f303 	lsr.w	r3, r2, r3
 800ab68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b7b      	ldr	r3, [pc, #492]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abb2:	e087      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b6a      	ldr	r3, [pc, #424]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abf6:	e065      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ad80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b59      	ldr	r3, [pc, #356]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3a:	e043      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ad84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b48      	ldr	r3, [pc, #288]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7e:	e021      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ad80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b37      	ldr	r3, [pc, #220]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800acc4:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc8:	0a5b      	lsrs	r3, r3, #9
 800acca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acde:	edd7 6a07 	vldr	s13, [r7, #28]
 800ace2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ace6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acea:	ee17 2a90 	vmov	r2, s15
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800acf2:	4b1f      	ldr	r3, [pc, #124]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	0c1b      	lsrs	r3, r3, #16
 800acf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acfc:	ee07 3a90 	vmov	s15, r3
 800ad00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad18:	ee17 2a90 	vmov	r2, s15
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad20:	4b13      	ldr	r3, [pc, #76]	@ (800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad24:	0e1b      	lsrs	r3, r3, #24
 800ad26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad46:	ee17 2a90 	vmov	r2, s15
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad4e:	e008      	b.n	800ad62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	609a      	str	r2, [r3, #8]
}
 800ad62:	bf00      	nop
 800ad64:	3724      	adds	r7, #36	@ 0x24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	58024400 	.word	0x58024400
 800ad74:	03d09000 	.word	0x03d09000
 800ad78:	46000000 	.word	0x46000000
 800ad7c:	4c742400 	.word	0x4c742400
 800ad80:	4a742400 	.word	0x4a742400
 800ad84:	4bb71b00 	.word	0x4bb71b00

0800ad88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad96:	4b53      	ldr	r3, [pc, #332]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ad98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d101      	bne.n	800ada6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e099      	b.n	800aeda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ada6:	4b4f      	ldr	r3, [pc, #316]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a4e      	ldr	r2, [pc, #312]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800adac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800adb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb2:	f7f9 fca1 	bl	80046f8 <HAL_GetTick>
 800adb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800adb8:	e008      	b.n	800adcc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adba:	f7f9 fc9d 	bl	80046f8 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e086      	b.n	800aeda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800adcc:	4b45      	ldr	r3, [pc, #276]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1f0      	bne.n	800adba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800add8:	4b42      	ldr	r3, [pc, #264]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800adda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800addc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	031b      	lsls	r3, r3, #12
 800ade6:	493f      	ldr	r1, [pc, #252]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	628b      	str	r3, [r1, #40]	@ 0x28
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	025b      	lsls	r3, r3, #9
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	431a      	orrs	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	041b      	lsls	r3, r3, #16
 800ae0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	061b      	lsls	r3, r3, #24
 800ae18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae1c:	4931      	ldr	r1, [pc, #196]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae22:	4b30      	ldr	r3, [pc, #192]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	492d      	ldr	r1, [pc, #180]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae34:	4b2b      	ldr	r3, [pc, #172]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae38:	f023 0220 	bic.w	r2, r3, #32
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	4928      	ldr	r1, [pc, #160]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae46:	4b27      	ldr	r3, [pc, #156]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4a:	4a26      	ldr	r2, [pc, #152]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae4c:	f023 0310 	bic.w	r3, r3, #16
 800ae50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae52:	4b24      	ldr	r3, [pc, #144]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae56:	4b24      	ldr	r3, [pc, #144]	@ (800aee8 <RCCEx_PLL2_Config+0x160>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	69d2      	ldr	r2, [r2, #28]
 800ae5e:	00d2      	lsls	r2, r2, #3
 800ae60:	4920      	ldr	r1, [pc, #128]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae66:	4b1f      	ldr	r3, [pc, #124]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae6c:	f043 0310 	orr.w	r3, r3, #16
 800ae70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d106      	bne.n	800ae86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ae78:	4b1a      	ldr	r3, [pc, #104]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7c:	4a19      	ldr	r2, [pc, #100]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae84:	e00f      	b.n	800aea6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d106      	bne.n	800ae9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ae8c:	4b15      	ldr	r3, [pc, #84]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae90:	4a14      	ldr	r2, [pc, #80]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae98:	e005      	b.n	800aea6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ae9a:	4b12      	ldr	r3, [pc, #72]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	4a11      	ldr	r2, [pc, #68]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800aea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aea6:	4b0f      	ldr	r3, [pc, #60]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a0e      	ldr	r2, [pc, #56]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800aeac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aeb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeb2:	f7f9 fc21 	bl	80046f8 <HAL_GetTick>
 800aeb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aeb8:	e008      	b.n	800aecc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aeba:	f7f9 fc1d 	bl	80046f8 <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d901      	bls.n	800aecc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e006      	b.n	800aeda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aecc:	4b05      	ldr	r3, [pc, #20]	@ (800aee4 <RCCEx_PLL2_Config+0x15c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0f0      	beq.n	800aeba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	58024400 	.word	0x58024400
 800aee8:	ffff0007 	.word	0xffff0007

0800aeec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aefa:	4b53      	ldr	r3, [pc, #332]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800aefc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	2b03      	cmp	r3, #3
 800af04:	d101      	bne.n	800af0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e099      	b.n	800b03e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af0a:	4b4f      	ldr	r3, [pc, #316]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a4e      	ldr	r2, [pc, #312]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af16:	f7f9 fbef 	bl	80046f8 <HAL_GetTick>
 800af1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af1c:	e008      	b.n	800af30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af1e:	f7f9 fbeb 	bl	80046f8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e086      	b.n	800b03e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af30:	4b45      	ldr	r3, [pc, #276]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1f0      	bne.n	800af1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af3c:	4b42      	ldr	r3, [pc, #264]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	051b      	lsls	r3, r3, #20
 800af4a:	493f      	ldr	r1, [pc, #252]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	3b01      	subs	r3, #1
 800af56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	3b01      	subs	r3, #1
 800af60:	025b      	lsls	r3, r3, #9
 800af62:	b29b      	uxth	r3, r3
 800af64:	431a      	orrs	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	041b      	lsls	r3, r3, #16
 800af6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af72:	431a      	orrs	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	3b01      	subs	r3, #1
 800af7a:	061b      	lsls	r3, r3, #24
 800af7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af80:	4931      	ldr	r1, [pc, #196]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af82:	4313      	orrs	r3, r2
 800af84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af86:	4b30      	ldr	r3, [pc, #192]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	492d      	ldr	r1, [pc, #180]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af94:	4313      	orrs	r3, r2
 800af96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af98:	4b2b      	ldr	r3, [pc, #172]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	4928      	ldr	r1, [pc, #160]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800afaa:	4b27      	ldr	r3, [pc, #156]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afae:	4a26      	ldr	r2, [pc, #152]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800afb6:	4b24      	ldr	r3, [pc, #144]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afba:	4b24      	ldr	r3, [pc, #144]	@ (800b04c <RCCEx_PLL3_Config+0x160>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	69d2      	ldr	r2, [r2, #28]
 800afc2:	00d2      	lsls	r2, r2, #3
 800afc4:	4920      	ldr	r1, [pc, #128]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800afca:	4b1f      	ldr	r3, [pc, #124]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	4a1e      	ldr	r2, [pc, #120]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d106      	bne.n	800afea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afdc:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe0:	4a19      	ldr	r2, [pc, #100]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800afe2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afe8:	e00f      	b.n	800b00a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d106      	bne.n	800affe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aff0:	4b15      	ldr	r3, [pc, #84]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	4a14      	ldr	r2, [pc, #80]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800aff6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800affa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800affc:	e005      	b.n	800b00a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800affe:	4b12      	ldr	r3, [pc, #72]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800b000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b002:	4a11      	ldr	r2, [pc, #68]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800b004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b008:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b00a:	4b0f      	ldr	r3, [pc, #60]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a0e      	ldr	r2, [pc, #56]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800b010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b016:	f7f9 fb6f 	bl	80046f8 <HAL_GetTick>
 800b01a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b01c:	e008      	b.n	800b030 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b01e:	f7f9 fb6b 	bl	80046f8 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d901      	bls.n	800b030 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e006      	b.n	800b03e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b030:	4b05      	ldr	r3, [pc, #20]	@ (800b048 <RCCEx_PLL3_Config+0x15c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d0f0      	beq.n	800b01e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	58024400 	.word	0x58024400
 800b04c:	ffff0007 	.word	0xffff0007

0800b050 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e10f      	b.n	800b282 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a87      	ldr	r2, [pc, #540]	@ (800b28c <HAL_SPI_Init+0x23c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00f      	beq.n	800b092 <HAL_SPI_Init+0x42>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a86      	ldr	r2, [pc, #536]	@ (800b290 <HAL_SPI_Init+0x240>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00a      	beq.n	800b092 <HAL_SPI_Init+0x42>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a84      	ldr	r2, [pc, #528]	@ (800b294 <HAL_SPI_Init+0x244>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d005      	beq.n	800b092 <HAL_SPI_Init+0x42>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2b0f      	cmp	r3, #15
 800b08c:	d901      	bls.n	800b092 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e0f7      	b.n	800b282 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 f968 	bl	800c368 <SPI_GetPacketSize>
 800b098:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a7b      	ldr	r2, [pc, #492]	@ (800b28c <HAL_SPI_Init+0x23c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d00c      	beq.n	800b0be <HAL_SPI_Init+0x6e>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a79      	ldr	r2, [pc, #484]	@ (800b290 <HAL_SPI_Init+0x240>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d007      	beq.n	800b0be <HAL_SPI_Init+0x6e>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a78      	ldr	r2, [pc, #480]	@ (800b294 <HAL_SPI_Init+0x244>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d002      	beq.n	800b0be <HAL_SPI_Init+0x6e>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d811      	bhi.n	800b0e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0c2:	4a72      	ldr	r2, [pc, #456]	@ (800b28c <HAL_SPI_Init+0x23c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d009      	beq.n	800b0dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a70      	ldr	r2, [pc, #448]	@ (800b290 <HAL_SPI_Init+0x240>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d004      	beq.n	800b0dc <HAL_SPI_Init+0x8c>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a6f      	ldr	r2, [pc, #444]	@ (800b294 <HAL_SPI_Init+0x244>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d104      	bne.n	800b0e6 <HAL_SPI_Init+0x96>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b10      	cmp	r3, #16
 800b0e0:	d901      	bls.n	800b0e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e0cd      	b.n	800b282 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d106      	bne.n	800b100 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7f8 fa0a 	bl	8003514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0201 	bic.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b122:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b12c:	d119      	bne.n	800b162 <HAL_SPI_Init+0x112>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b136:	d103      	bne.n	800b140 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10c      	bne.n	800b162 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b150:	d107      	bne.n	800b162 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b160:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00f      	beq.n	800b18e <HAL_SPI_Init+0x13e>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	2b06      	cmp	r3, #6
 800b174:	d90b      	bls.n	800b18e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	e007      	b.n	800b19e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b19c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	69da      	ldr	r2, [r3, #28]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b0:	ea42 0103 	orr.w	r1, r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	431a      	orrs	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1fe:	ea42 0103 	orr.w	r1, r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d113      	bne.n	800b23e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b228:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b23c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	40013000 	.word	0x40013000
 800b290:	40003800 	.word	0x40003800
 800b294:	40003c00 	.word	0x40003c00

0800b298 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3320      	adds	r3, #32
 800b2ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2b0:	f7f9 fa22 	bl	80046f8 <HAL_GetTick>
 800b2b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d001      	beq.n	800b2c6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e1d1      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <HAL_SPI_Transmit+0x3a>
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e1c9      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_SPI_Transmit+0x4c>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e1c2      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	88fa      	ldrh	r2, [r7, #6]
 800b306:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	88fa      	ldrh	r2, [r7, #6]
 800b30e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b33c:	d108      	bne.n	800b350 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e009      	b.n	800b364 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b362:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	4b96      	ldr	r3, [pc, #600]	@ (800b5c4 <HAL_SPI_Transmit+0x32c>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	88f9      	ldrh	r1, [r7, #6]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	430b      	orrs	r3, r1
 800b376:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f042 0201 	orr.w	r2, r2, #1
 800b386:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b390:	d107      	bne.n	800b3a2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	2b0f      	cmp	r3, #15
 800b3a8:	d947      	bls.n	800b43a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b3aa:	e03f      	b.n	800b42c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d114      	bne.n	800b3e4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b3e2:	e023      	b.n	800b42c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3e4:	f7f9 f988 	bl	80046f8 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d803      	bhi.n	800b3fc <HAL_SPI_Transmit+0x164>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d102      	bne.n	800b402 <HAL_SPI_Transmit+0x16a>
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d114      	bne.n	800b42c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 fee2 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b40e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e11e      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b432:	b29b      	uxth	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1b9      	bne.n	800b3ac <HAL_SPI_Transmit+0x114>
 800b438:	e0f1      	b.n	800b61e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	2b07      	cmp	r3, #7
 800b440:	f240 80e6 	bls.w	800b610 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b444:	e05d      	b.n	800b502 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	f003 0302 	and.w	r3, r3, #2
 800b450:	2b02      	cmp	r3, #2
 800b452:	d132      	bne.n	800b4ba <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d918      	bls.n	800b492 <HAL_SPI_Transmit+0x1fa>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d014      	beq.n	800b492 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6812      	ldr	r2, [r2, #0]
 800b472:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b478:	1d1a      	adds	r2, r3, #4
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b02      	subs	r3, #2
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b490:	e037      	b.n	800b502 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b496:	881a      	ldrh	r2, [r3, #0]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4a0:	1c9a      	adds	r2, r3, #2
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b4b8:	e023      	b.n	800b502 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4ba:	f7f9 f91d 	bl	80046f8 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d803      	bhi.n	800b4d2 <HAL_SPI_Transmit+0x23a>
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d0:	d102      	bne.n	800b4d8 <HAL_SPI_Transmit+0x240>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d114      	bne.n	800b502 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 fe77 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e0b3      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b508:	b29b      	uxth	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d19b      	bne.n	800b446 <HAL_SPI_Transmit+0x1ae>
 800b50e:	e086      	b.n	800b61e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d154      	bne.n	800b5c8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b524:	b29b      	uxth	r3, r3
 800b526:	2b03      	cmp	r3, #3
 800b528:	d918      	bls.n	800b55c <HAL_SPI_Transmit+0x2c4>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b52e:	2b40      	cmp	r3, #64	@ 0x40
 800b530:	d914      	bls.n	800b55c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b04      	subs	r3, #4
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b55a:	e059      	b.n	800b610 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b562:	b29b      	uxth	r3, r3
 800b564:	2b01      	cmp	r3, #1
 800b566:	d917      	bls.n	800b598 <HAL_SPI_Transmit+0x300>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d013      	beq.n	800b598 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b574:	881a      	ldrh	r2, [r3, #0]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b57e:	1c9a      	adds	r2, r3, #2
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	3b02      	subs	r3, #2
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b596:	e03b      	b.n	800b610 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3320      	adds	r3, #32
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b5c2:	e025      	b.n	800b610 <HAL_SPI_Transmit+0x378>
 800b5c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5c8:	f7f9 f896 	bl	80046f8 <HAL_GetTick>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d803      	bhi.n	800b5e0 <HAL_SPI_Transmit+0x348>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5de:	d102      	bne.n	800b5e6 <HAL_SPI_Transmit+0x34e>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d114      	bne.n	800b610 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 fdf0 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e02c      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b616:	b29b      	uxth	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f47f af79 	bne.w	800b510 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2200      	movs	r2, #0
 800b626:	2108      	movs	r1, #8
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 fe6f 	bl	800c30c <SPI_WaitOnFlagUntilTimeout>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d007      	beq.n	800b644 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b63a:	f043 0220 	orr.w	r2, r3, #32
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 fdc1 	bl	800c1cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e000      	b.n	800b66a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b668:	2300      	movs	r3, #0
  }
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop

0800b674 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4613      	mov	r3, r2
 800b682:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b688:	095b      	lsrs	r3, r3, #5
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	3301      	adds	r3, #1
 800b68e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3330      	adds	r3, #48	@ 0x30
 800b696:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b698:	f7f9 f82e 	bl	80046f8 <HAL_GetTick>
 800b69c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d001      	beq.n	800b6ae <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	e250      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <HAL_SPI_Receive+0x46>
 800b6b4:	88fb      	ldrh	r3, [r7, #6]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e248      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d101      	bne.n	800b6cc <HAL_SPI_Receive+0x58>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e241      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	88fa      	ldrh	r2, [r7, #6]
 800b6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	88fa      	ldrh	r2, [r7, #6]
 800b6f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b724:	d108      	bne.n	800b738 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	e009      	b.n	800b74c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b74a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	4b95      	ldr	r3, [pc, #596]	@ (800b9a8 <HAL_SPI_Receive+0x334>)
 800b754:	4013      	ands	r3, r2
 800b756:	88f9      	ldrh	r1, [r7, #6]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	6812      	ldr	r2, [r2, #0]
 800b75c:	430b      	orrs	r3, r1
 800b75e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f042 0201 	orr.w	r2, r2, #1
 800b76e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b778:	d107      	bne.n	800b78a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b788:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	2b0f      	cmp	r3, #15
 800b790:	d96c      	bls.n	800b86c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b792:	e064      	b.n	800b85e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d114      	bne.n	800b7d4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b7b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b7d2:	e044      	b.n	800b85e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	8bfa      	ldrh	r2, [r7, #30]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d919      	bls.n	800b816 <HAL_SPI_Receive+0x1a2>
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d014      	beq.n	800b816 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b7f6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7fc:	1d1a      	adds	r2, r3, #4
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b814:	e023      	b.n	800b85e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b816:	f7f8 ff6f 	bl	80046f8 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d803      	bhi.n	800b82e <HAL_SPI_Receive+0x1ba>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d102      	bne.n	800b834 <HAL_SPI_Receive+0x1c0>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d114      	bne.n	800b85e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 fcc9 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b840:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e178      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d194      	bne.n	800b794 <HAL_SPI_Receive+0x120>
 800b86a:	e15e      	b.n	800bb2a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	2b07      	cmp	r3, #7
 800b872:	f240 8153 	bls.w	800bb1c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b876:	e08f      	b.n	800b998 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d114      	bne.n	800b8b8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	8812      	ldrh	r2, [r2, #0]
 800b896:	b292      	uxth	r2, r2
 800b898:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b89e:	1c9a      	adds	r2, r3, #2
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b8b6:	e06f      	b.n	800b998 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	8bfa      	ldrh	r2, [r7, #30]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d924      	bls.n	800b910 <HAL_SPI_Receive+0x29c>
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01f      	beq.n	800b910 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	8812      	ldrh	r2, [r2, #0]
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8e0:	1c9a      	adds	r2, r3, #2
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	8812      	ldrh	r2, [r2, #0]
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8f6:	1c9a      	adds	r2, r3, #2
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b902:	b29b      	uxth	r3, r3
 800b904:	3b02      	subs	r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b90e:	e043      	b.n	800b998 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b916:	b29b      	uxth	r3, r3
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d119      	bne.n	800b950 <HAL_SPI_Receive+0x2dc>
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b922:	2b00      	cmp	r3, #0
 800b924:	d014      	beq.n	800b950 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	8812      	ldrh	r2, [r2, #0]
 800b92e:	b292      	uxth	r2, r2
 800b930:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b936:	1c9a      	adds	r2, r3, #2
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b942:	b29b      	uxth	r3, r3
 800b944:	3b01      	subs	r3, #1
 800b946:	b29a      	uxth	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b94e:	e023      	b.n	800b998 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b950:	f7f8 fed2 	bl	80046f8 <HAL_GetTick>
 800b954:	4602      	mov	r2, r0
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d803      	bhi.n	800b968 <HAL_SPI_Receive+0x2f4>
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b966:	d102      	bne.n	800b96e <HAL_SPI_Receive+0x2fa>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d114      	bne.n	800b998 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 fc2c 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b97a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e0db      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f47f af69 	bne.w	800b878 <HAL_SPI_Receive+0x204>
 800b9a6:	e0c0      	b.n	800bb2a <HAL_SPI_Receive+0x4b6>
 800b9a8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d117      	bne.n	800b9f2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ce:	7812      	ldrb	r2, [r2, #0]
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9f0:	e094      	b.n	800bb1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	8bfa      	ldrh	r2, [r7, #30]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d946      	bls.n	800ba8e <HAL_SPI_Receive+0x41a>
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d041      	beq.n	800ba8e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	b2d2      	uxtb	r2, r2
 800ba1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	b2d2      	uxtb	r2, r2
 800ba36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba3c:	1c5a      	adds	r2, r3, #1
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba4e:	7812      	ldrb	r2, [r2, #0]
 800ba50:	b2d2      	uxtb	r2, r2
 800ba52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba58:	1c5a      	adds	r2, r3, #1
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba6a:	7812      	ldrb	r2, [r2, #0]
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b04      	subs	r3, #4
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba8c:	e046      	b.n	800bb1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d81c      	bhi.n	800bad4 <HAL_SPI_Receive+0x460>
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d017      	beq.n	800bad4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bab0:	7812      	ldrb	r2, [r2, #0]
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bad2:	e023      	b.n	800bb1c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bad4:	f7f8 fe10 	bl	80046f8 <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d803      	bhi.n	800baec <HAL_SPI_Receive+0x478>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d102      	bne.n	800baf2 <HAL_SPI_Receive+0x47e>
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d114      	bne.n	800bb1c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 fb6a 	bl	800c1cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bafe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e019      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f47f af41 	bne.w	800b9ac <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 fb4e 	bl	800c1cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
  }
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08e      	sub	sp, #56	@ 0x38
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3320      	adds	r3, #32
 800bb6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3330      	adds	r3, #48	@ 0x30
 800bb74:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb7a:	095b      	lsrs	r3, r3, #5
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	3301      	adds	r3, #1
 800bb80:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb82:	f7f8 fdb9 	bl	80046f8 <HAL_GetTick>
 800bb86:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bb8c:	887b      	ldrh	r3, [r7, #2]
 800bb8e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d001      	beq.n	800bba0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e310      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <HAL_SPI_TransmitReceive+0x5a>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <HAL_SPI_TransmitReceive+0x5a>
 800bbac:	887b      	ldrh	r3, [r7, #2]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e305      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_SPI_TransmitReceive+0x6c>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e2fe      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2205      	movs	r2, #5
 800bbd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	887a      	ldrh	r2, [r7, #2]
 800bbe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	887a      	ldrh	r2, [r7, #2]
 800bbee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	887a      	ldrh	r2, [r7, #2]
 800bbfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	887a      	ldrh	r2, [r7, #2]
 800bc04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68da      	ldr	r2, [r3, #12]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800bc22:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a70      	ldr	r2, [pc, #448]	@ (800bdec <HAL_SPI_TransmitReceive+0x294>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d009      	beq.n	800bc42 <HAL_SPI_TransmitReceive+0xea>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a6f      	ldr	r2, [pc, #444]	@ (800bdf0 <HAL_SPI_TransmitReceive+0x298>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d004      	beq.n	800bc42 <HAL_SPI_TransmitReceive+0xea>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a6d      	ldr	r2, [pc, #436]	@ (800bdf4 <HAL_SPI_TransmitReceive+0x29c>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d102      	bne.n	800bc48 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bc42:	2310      	movs	r3, #16
 800bc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc46:	e001      	b.n	800bc4c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bc48:	2308      	movs	r3, #8
 800bc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	4b69      	ldr	r3, [pc, #420]	@ (800bdf8 <HAL_SPI_TransmitReceive+0x2a0>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	8879      	ldrh	r1, [r7, #2]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	6812      	ldr	r2, [r2, #0]
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f042 0201 	orr.w	r2, r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc78:	d107      	bne.n	800bc8a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	2b0f      	cmp	r3, #15
 800bc90:	f240 80a2 	bls.w	800bdd8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc96:	089b      	lsrs	r3, r3, #2
 800bc98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc9a:	e094      	b.n	800bdc6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d120      	bne.n	800bcec <HAL_SPI_TransmitReceive+0x194>
 800bcaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01d      	beq.n	800bcec <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bcb0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bcb2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d217      	bcs.n	800bcec <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6812      	ldr	r2, [r2, #0]
 800bcc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bccc:	1d1a      	adds	r2, r3, #4
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcea:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bcf4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d065      	beq.n	800bdc6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d118      	bne.n	800bd3a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd12:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd18:	1d1a      	adds	r2, r3, #4
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd38:	e045      	b.n	800bdc6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd3a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bd3c:	8bfb      	ldrh	r3, [r7, #30]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d21d      	bcs.n	800bd7e <HAL_SPI_TransmitReceive+0x226>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d018      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd7c:	e023      	b.n	800bdc6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd7e:	f7f8 fcbb 	bl	80046f8 <HAL_GetTick>
 800bd82:	4602      	mov	r2, r0
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d803      	bhi.n	800bd96 <HAL_SPI_TransmitReceive+0x23e>
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd94:	d102      	bne.n	800bd9c <HAL_SPI_TransmitReceive+0x244>
 800bd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d114      	bne.n	800bdc6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 fa15 	bl	800c1cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bda8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e1fd      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f47f af67 	bne.w	800bc9c <HAL_SPI_TransmitReceive+0x144>
 800bdce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f47f af63 	bne.w	800bc9c <HAL_SPI_TransmitReceive+0x144>
 800bdd6:	e1ce      	b.n	800c176 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b07      	cmp	r3, #7
 800bdde:	f240 81c2 	bls.w	800c166 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde4:	085b      	lsrs	r3, r3, #1
 800bde6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bde8:	e0c9      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x426>
 800bdea:	bf00      	nop
 800bdec:	40013000 	.word	0x40013000
 800bdf0:	40003800 	.word	0x40003800
 800bdf4:	40003c00 	.word	0x40003c00
 800bdf8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	f003 0302 	and.w	r3, r3, #2
 800be06:	2b02      	cmp	r3, #2
 800be08:	d11f      	bne.n	800be4a <HAL_SPI_TransmitReceive+0x2f2>
 800be0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d01c      	beq.n	800be4a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800be10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be12:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800be18:	429a      	cmp	r2, r3
 800be1a:	d216      	bcs.n	800be4a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be20:	881a      	ldrh	r2, [r3, #0]
 800be22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be24:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be2a:	1c9a      	adds	r2, r3, #2
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be36:	b29b      	uxth	r3, r3
 800be38:	3b01      	subs	r3, #1
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be48:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800be52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 8092 	beq.w	800bf7e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b01      	cmp	r3, #1
 800be66:	d118      	bne.n	800be9a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be6c:	6a3a      	ldr	r2, [r7, #32]
 800be6e:	8812      	ldrh	r2, [r2, #0]
 800be70:	b292      	uxth	r2, r2
 800be72:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be78:	1c9a      	adds	r2, r3, #2
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be84:	b29b      	uxth	r3, r3
 800be86:	3b01      	subs	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be96:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be98:	e071      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be9a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be9c:	8bfb      	ldrh	r3, [r7, #30]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d228      	bcs.n	800bef4 <HAL_SPI_TransmitReceive+0x39c>
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d023      	beq.n	800bef4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb0:	6a3a      	ldr	r2, [r7, #32]
 800beb2:	8812      	ldrh	r2, [r2, #0]
 800beb4:	b292      	uxth	r2, r2
 800beb6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bebc:	1c9a      	adds	r2, r3, #2
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bec6:	6a3a      	ldr	r2, [r7, #32]
 800bec8:	8812      	ldrh	r2, [r2, #0]
 800beca:	b292      	uxth	r2, r2
 800becc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed2:	1c9a      	adds	r2, r3, #2
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bede:	b29b      	uxth	r3, r3
 800bee0:	3b02      	subs	r3, #2
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bef0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bef2:	e044      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bef4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d11d      	bne.n	800bf36 <HAL_SPI_TransmitReceive+0x3de>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d018      	beq.n	800bf36 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf08:	6a3a      	ldr	r2, [r7, #32]
 800bf0a:	8812      	ldrh	r2, [r2, #0]
 800bf0c:	b292      	uxth	r2, r2
 800bf0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf14:	1c9a      	adds	r2, r3, #2
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf32:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bf34:	e023      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf36:	f7f8 fbdf 	bl	80046f8 <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d803      	bhi.n	800bf4e <HAL_SPI_TransmitReceive+0x3f6>
 800bf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d102      	bne.n	800bf54 <HAL_SPI_TransmitReceive+0x3fc>
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d114      	bne.n	800bf7e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f939 	bl	800c1cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e121      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f47f af3b 	bne.w	800bdfc <HAL_SPI_TransmitReceive+0x2a4>
 800bf86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f47f af37 	bne.w	800bdfc <HAL_SPI_TransmitReceive+0x2a4>
 800bf8e:	e0f2      	b.n	800c176 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d121      	bne.n	800bfe2 <HAL_SPI_TransmitReceive+0x48a>
 800bf9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01e      	beq.n	800bfe2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bfa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bfa6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfaa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d218      	bcs.n	800bfe2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3320      	adds	r3, #32
 800bfba:	7812      	ldrb	r2, [r2, #0]
 800bfbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bfea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 80ba 	beq.w	800c166 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d11b      	bne.n	800c038 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	b2d2      	uxtb	r2, r2
 800c010:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c022:	b29b      	uxth	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	b29a      	uxth	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c034:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c036:	e096      	b.n	800c166 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c038:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c03a:	8bfb      	ldrh	r3, [r7, #30]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d24a      	bcs.n	800c0d6 <HAL_SPI_TransmitReceive+0x57e>
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d045      	beq.n	800c0d6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	b2d2      	uxtb	r2, r2
 800c05a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c08e:	7812      	ldrb	r2, [r2, #0]
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0aa:	7812      	ldrb	r2, [r2, #0]
 800c0ac:	b2d2      	uxtb	r2, r2
 800c0ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	3b04      	subs	r3, #4
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c0d4:	e047      	b.n	800c166 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c0d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d820      	bhi.n	800c11e <HAL_SPI_TransmitReceive+0x5c6>
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d01b      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0f2:	7812      	ldrb	r2, [r2, #0]
 800c0f4:	b2d2      	uxtb	r2, r2
 800c0f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c108:	b29b      	uxth	r3, r3
 800c10a:	3b01      	subs	r3, #1
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c11a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c11c:	e023      	b.n	800c166 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c11e:	f7f8 faeb 	bl	80046f8 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d803      	bhi.n	800c136 <HAL_SPI_TransmitReceive+0x5de>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d102      	bne.n	800c13c <HAL_SPI_TransmitReceive+0x5e4>
 800c136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d114      	bne.n	800c166 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f845 	bl	800c1cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c148:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e02d      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c166:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f47f af11 	bne.w	800bf90 <HAL_SPI_TransmitReceive+0x438>
 800c16e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c170:	2b00      	cmp	r3, #0
 800c172:	f47f af0d 	bne.w	800bf90 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17c:	2200      	movs	r2, #0
 800c17e:	2108      	movs	r1, #8
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f000 f8c3 	bl	800c30c <SPI_WaitOnFlagUntilTimeout>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c192:	f043 0220 	orr.w	r2, r3, #32
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 f815 	bl	800c1cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e000      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
  }
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3730      	adds	r7, #48	@ 0x30
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop

0800c1cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	699a      	ldr	r2, [r3, #24]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f042 0208 	orr.w	r2, r2, #8
 800c1ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0210 	orr.w	r2, r2, #16
 800c1fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0201 	bic.w	r2, r2, #1
 800c20a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6919      	ldr	r1, [r3, #16]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b3c      	ldr	r3, [pc, #240]	@ (800c308 <SPI_CloseTransfer+0x13c>)
 800c218:	400b      	ands	r3, r1
 800c21a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689a      	ldr	r2, [r3, #8]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c22a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b04      	cmp	r3, #4
 800c236:	d014      	beq.n	800c262 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f003 0320 	and.w	r3, r3, #32
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00f      	beq.n	800c262 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c248:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	699a      	ldr	r2, [r3, #24]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0220 	orr.w	r2, r2, #32
 800c260:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d014      	beq.n	800c298 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00f      	beq.n	800c298 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c27e:	f043 0204 	orr.w	r2, r3, #4
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	699a      	ldr	r2, [r3, #24]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c296:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00f      	beq.n	800c2c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2a8:	f043 0201 	orr.w	r2, r3, #1
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	699a      	ldr	r2, [r3, #24]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00f      	beq.n	800c2ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2d2:	f043 0208 	orr.w	r2, r3, #8
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c2fc:	bf00      	nop
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	fffffc90 	.word	0xfffffc90

0800c30c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c31c:	e010      	b.n	800c340 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c31e:	f7f8 f9eb 	bl	80046f8 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d803      	bhi.n	800c336 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c334:	d102      	bne.n	800c33c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e00f      	b.n	800c360 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	695a      	ldr	r2, [r3, #20]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	4013      	ands	r3, r2
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	bf0c      	ite	eq
 800c350:	2301      	moveq	r3, #1
 800c352:	2300      	movne	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	461a      	mov	r2, r3
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d0df      	beq.n	800c31e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c374:	095b      	lsrs	r3, r3, #5
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	3307      	adds	r3, #7
 800c386:	08db      	lsrs	r3, r3, #3
 800c388:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e049      	b.n	800c444 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d106      	bne.n	800c3ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7f7 fcbd 	bl	8003d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f000 fc57 	bl	800cc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d001      	beq.n	800c464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e054      	b.n	800c50e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f042 0201 	orr.w	r2, r2, #1
 800c47a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a26      	ldr	r2, [pc, #152]	@ (800c51c <HAL_TIM_Base_Start_IT+0xd0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d022      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c48e:	d01d      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a22      	ldr	r2, [pc, #136]	@ (800c520 <HAL_TIM_Base_Start_IT+0xd4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d018      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a21      	ldr	r2, [pc, #132]	@ (800c524 <HAL_TIM_Base_Start_IT+0xd8>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d013      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1f      	ldr	r2, [pc, #124]	@ (800c528 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00e      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a1e      	ldr	r2, [pc, #120]	@ (800c52c <HAL_TIM_Base_Start_IT+0xe0>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d009      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c530 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1b      	ldr	r2, [pc, #108]	@ (800c534 <HAL_TIM_Base_Start_IT+0xe8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d115      	bne.n	800c4f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689a      	ldr	r2, [r3, #8]
 800c4d2:	4b19      	ldr	r3, [pc, #100]	@ (800c538 <HAL_TIM_Base_Start_IT+0xec>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b06      	cmp	r3, #6
 800c4dc:	d015      	beq.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4e4:	d011      	beq.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f6:	e008      	b.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f042 0201 	orr.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	e000      	b.n	800c50c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	40010000 	.word	0x40010000
 800c520:	40000400 	.word	0x40000400
 800c524:	40000800 	.word	0x40000800
 800c528:	40000c00 	.word	0x40000c00
 800c52c:	40010400 	.word	0x40010400
 800c530:	40001800 	.word	0x40001800
 800c534:	40014000 	.word	0x40014000
 800c538:	00010007 	.word	0x00010007

0800c53c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e049      	b.n	800c5e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7f7 fba0 	bl	8003ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3304      	adds	r3, #4
 800c578:	4619      	mov	r1, r3
 800c57a:	4610      	mov	r0, r2
 800c57c:	f000 fb88 	bl	800cc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d109      	bne.n	800c610 <HAL_TIM_PWM_Start+0x24>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b01      	cmp	r3, #1
 800c606:	bf14      	ite	ne
 800c608:	2301      	movne	r3, #1
 800c60a:	2300      	moveq	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	e03c      	b.n	800c68a <HAL_TIM_PWM_Start+0x9e>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b04      	cmp	r3, #4
 800c614:	d109      	bne.n	800c62a <HAL_TIM_PWM_Start+0x3e>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b01      	cmp	r3, #1
 800c620:	bf14      	ite	ne
 800c622:	2301      	movne	r3, #1
 800c624:	2300      	moveq	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	e02f      	b.n	800c68a <HAL_TIM_PWM_Start+0x9e>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b08      	cmp	r3, #8
 800c62e:	d109      	bne.n	800c644 <HAL_TIM_PWM_Start+0x58>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b01      	cmp	r3, #1
 800c63a:	bf14      	ite	ne
 800c63c:	2301      	movne	r3, #1
 800c63e:	2300      	moveq	r3, #0
 800c640:	b2db      	uxtb	r3, r3
 800c642:	e022      	b.n	800c68a <HAL_TIM_PWM_Start+0x9e>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b0c      	cmp	r3, #12
 800c648:	d109      	bne.n	800c65e <HAL_TIM_PWM_Start+0x72>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b01      	cmp	r3, #1
 800c654:	bf14      	ite	ne
 800c656:	2301      	movne	r3, #1
 800c658:	2300      	moveq	r3, #0
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	e015      	b.n	800c68a <HAL_TIM_PWM_Start+0x9e>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b10      	cmp	r3, #16
 800c662:	d109      	bne.n	800c678 <HAL_TIM_PWM_Start+0x8c>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	bf14      	ite	ne
 800c670:	2301      	movne	r3, #1
 800c672:	2300      	moveq	r3, #0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	e008      	b.n	800c68a <HAL_TIM_PWM_Start+0x9e>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b01      	cmp	r3, #1
 800c682:	bf14      	ite	ne
 800c684:	2301      	movne	r3, #1
 800c686:	2300      	moveq	r3, #0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e0a1      	b.n	800c7d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_PWM_Start+0xb6>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2202      	movs	r2, #2
 800c69c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6a0:	e023      	b.n	800c6ea <HAL_TIM_PWM_Start+0xfe>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_PWM_Start+0xc6>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6b0:	e01b      	b.n	800c6ea <HAL_TIM_PWM_Start+0xfe>
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0xd6>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6c0:	e013      	b.n	800c6ea <HAL_TIM_PWM_Start+0xfe>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b0c      	cmp	r3, #12
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0xe6>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6d0:	e00b      	b.n	800c6ea <HAL_TIM_PWM_Start+0xfe>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b10      	cmp	r3, #16
 800c6d6:	d104      	bne.n	800c6e2 <HAL_TIM_PWM_Start+0xf6>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6e0:	e003      	b.n	800c6ea <HAL_TIM_PWM_Start+0xfe>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fe48 	bl	800d388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a38      	ldr	r2, [pc, #224]	@ (800c7e0 <HAL_TIM_PWM_Start+0x1f4>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d013      	beq.n	800c72a <HAL_TIM_PWM_Start+0x13e>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a37      	ldr	r2, [pc, #220]	@ (800c7e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d00e      	beq.n	800c72a <HAL_TIM_PWM_Start+0x13e>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a35      	ldr	r2, [pc, #212]	@ (800c7e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d009      	beq.n	800c72a <HAL_TIM_PWM_Start+0x13e>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a34      	ldr	r2, [pc, #208]	@ (800c7ec <HAL_TIM_PWM_Start+0x200>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d004      	beq.n	800c72a <HAL_TIM_PWM_Start+0x13e>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a32      	ldr	r2, [pc, #200]	@ (800c7f0 <HAL_TIM_PWM_Start+0x204>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d101      	bne.n	800c72e <HAL_TIM_PWM_Start+0x142>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <HAL_TIM_PWM_Start+0x144>
 800c72e:	2300      	movs	r3, #0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c742:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a25      	ldr	r2, [pc, #148]	@ (800c7e0 <HAL_TIM_PWM_Start+0x1f4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d022      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c756:	d01d      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a25      	ldr	r2, [pc, #148]	@ (800c7f4 <HAL_TIM_PWM_Start+0x208>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d018      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a24      	ldr	r2, [pc, #144]	@ (800c7f8 <HAL_TIM_PWM_Start+0x20c>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d013      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a22      	ldr	r2, [pc, #136]	@ (800c7fc <HAL_TIM_PWM_Start+0x210>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d00e      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a1a      	ldr	r2, [pc, #104]	@ (800c7e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d009      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a1e      	ldr	r2, [pc, #120]	@ (800c800 <HAL_TIM_PWM_Start+0x214>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d004      	beq.n	800c794 <HAL_TIM_PWM_Start+0x1a8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a16      	ldr	r2, [pc, #88]	@ (800c7e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d115      	bne.n	800c7c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689a      	ldr	r2, [r3, #8]
 800c79a:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <HAL_TIM_PWM_Start+0x218>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b06      	cmp	r3, #6
 800c7a4:	d015      	beq.n	800c7d2 <HAL_TIM_PWM_Start+0x1e6>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7ac:	d011      	beq.n	800c7d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f042 0201 	orr.w	r2, r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7be:	e008      	b.n	800c7d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f042 0201 	orr.w	r2, r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	e000      	b.n	800c7d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	40010000 	.word	0x40010000
 800c7e4:	40010400 	.word	0x40010400
 800c7e8:	40014000 	.word	0x40014000
 800c7ec:	40014400 	.word	0x40014400
 800c7f0:	40014800 	.word	0x40014800
 800c7f4:	40000400 	.word	0x40000400
 800c7f8:	40000800 	.word	0x40000800
 800c7fc:	40000c00 	.word	0x40000c00
 800c800:	40001800 	.word	0x40001800
 800c804:	00010007 	.word	0x00010007

0800c808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d020      	beq.n	800c86c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b00      	cmp	r3, #0
 800c832:	d01b      	beq.n	800c86c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f06f 0202 	mvn.w	r2, #2
 800c83c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	f003 0303 	and.w	r3, r3, #3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9fe 	bl	800cc54 <HAL_TIM_IC_CaptureCallback>
 800c858:	e005      	b.n	800c866 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f9f0 	bl	800cc40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fa01 	bl	800cc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f003 0304 	and.w	r3, r3, #4
 800c872:	2b00      	cmp	r3, #0
 800c874:	d020      	beq.n	800c8b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d01b      	beq.n	800c8b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f06f 0204 	mvn.w	r2, #4
 800c888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2202      	movs	r2, #2
 800c88e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f9d8 	bl	800cc54 <HAL_TIM_IC_CaptureCallback>
 800c8a4:	e005      	b.n	800c8b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f9ca 	bl	800cc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f9db 	bl	800cc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f003 0308 	and.w	r3, r3, #8
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d020      	beq.n	800c904 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f003 0308 	and.w	r3, r3, #8
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d01b      	beq.n	800c904 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f06f 0208 	mvn.w	r2, #8
 800c8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2204      	movs	r2, #4
 800c8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9b2 	bl	800cc54 <HAL_TIM_IC_CaptureCallback>
 800c8f0:	e005      	b.n	800c8fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f9a4 	bl	800cc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9b5 	bl	800cc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f003 0310 	and.w	r3, r3, #16
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d020      	beq.n	800c950 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f003 0310 	and.w	r3, r3, #16
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01b      	beq.n	800c950 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f06f 0210 	mvn.w	r2, #16
 800c920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2208      	movs	r2, #8
 800c926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c932:	2b00      	cmp	r3, #0
 800c934:	d003      	beq.n	800c93e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f98c 	bl	800cc54 <HAL_TIM_IC_CaptureCallback>
 800c93c:	e005      	b.n	800c94a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f97e 	bl	800cc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f98f 	bl	800cc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00c      	beq.n	800c974 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	d007      	beq.n	800c974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f06f 0201 	mvn.w	r2, #1
 800c96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7f6 fcc8 	bl	8003304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d104      	bne.n	800c988 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00c      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fdb1 	bl	800d504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00c      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fda9 	bl	800d518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00c      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f949 	bl	800cc7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f003 0320 	and.w	r3, r3, #32
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00c      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f003 0320 	and.w	r3, r3, #32
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d007      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f06f 0220 	mvn.w	r2, #32
 800ca06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fd71 	bl	800d4f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
	...

0800ca18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d101      	bne.n	800ca36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca32:	2302      	movs	r3, #2
 800ca34:	e0ff      	b.n	800cc36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b14      	cmp	r3, #20
 800ca42:	f200 80f0 	bhi.w	800cc26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800caa1 	.word	0x0800caa1
 800ca50:	0800cc27 	.word	0x0800cc27
 800ca54:	0800cc27 	.word	0x0800cc27
 800ca58:	0800cc27 	.word	0x0800cc27
 800ca5c:	0800cae1 	.word	0x0800cae1
 800ca60:	0800cc27 	.word	0x0800cc27
 800ca64:	0800cc27 	.word	0x0800cc27
 800ca68:	0800cc27 	.word	0x0800cc27
 800ca6c:	0800cb23 	.word	0x0800cb23
 800ca70:	0800cc27 	.word	0x0800cc27
 800ca74:	0800cc27 	.word	0x0800cc27
 800ca78:	0800cc27 	.word	0x0800cc27
 800ca7c:	0800cb63 	.word	0x0800cb63
 800ca80:	0800cc27 	.word	0x0800cc27
 800ca84:	0800cc27 	.word	0x0800cc27
 800ca88:	0800cc27 	.word	0x0800cc27
 800ca8c:	0800cba5 	.word	0x0800cba5
 800ca90:	0800cc27 	.word	0x0800cc27
 800ca94:	0800cc27 	.word	0x0800cc27
 800ca98:	0800cc27 	.word	0x0800cc27
 800ca9c:	0800cbe5 	.word	0x0800cbe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f998 	bl	800cddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	699a      	ldr	r2, [r3, #24]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f042 0208 	orr.w	r2, r2, #8
 800caba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	699a      	ldr	r2, [r3, #24]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0204 	bic.w	r2, r2, #4
 800caca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6999      	ldr	r1, [r3, #24]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	619a      	str	r2, [r3, #24]
      break;
 800cade:	e0a5      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fa08 	bl	800cefc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	699a      	ldr	r2, [r3, #24]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cafa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	699a      	ldr	r2, [r3, #24]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6999      	ldr	r1, [r3, #24]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	021a      	lsls	r2, r3, #8
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	619a      	str	r2, [r3, #24]
      break;
 800cb20:	e084      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 fa71 	bl	800d010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69da      	ldr	r2, [r3, #28]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f042 0208 	orr.w	r2, r2, #8
 800cb3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	69da      	ldr	r2, [r3, #28]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f022 0204 	bic.w	r2, r2, #4
 800cb4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	69d9      	ldr	r1, [r3, #28]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	691a      	ldr	r2, [r3, #16]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	61da      	str	r2, [r3, #28]
      break;
 800cb60:	e064      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68b9      	ldr	r1, [r7, #8]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 fad9 	bl	800d120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69da      	ldr	r2, [r3, #28]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	69da      	ldr	r2, [r3, #28]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	69d9      	ldr	r1, [r3, #28]
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	021a      	lsls	r2, r3, #8
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	61da      	str	r2, [r3, #28]
      break;
 800cba2:	e043      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 fb22 	bl	800d1f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f042 0208 	orr.w	r2, r2, #8
 800cbbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0204 	bic.w	r2, r2, #4
 800cbce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	691a      	ldr	r2, [r3, #16]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	430a      	orrs	r2, r1
 800cbe0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cbe2:	e023      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fb66 	bl	800d2bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	021a      	lsls	r2, r3, #8
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	430a      	orrs	r2, r1
 800cc22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc24:	e002      	b.n	800cc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	75fb      	strb	r3, [r7, #23]
      break;
 800cc2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop

0800cc40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a46      	ldr	r2, [pc, #280]	@ (800cdbc <TIM_Base_SetConfig+0x12c>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d013      	beq.n	800ccd0 <TIM_Base_SetConfig+0x40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccae:	d00f      	beq.n	800ccd0 <TIM_Base_SetConfig+0x40>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a43      	ldr	r2, [pc, #268]	@ (800cdc0 <TIM_Base_SetConfig+0x130>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d00b      	beq.n	800ccd0 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a42      	ldr	r2, [pc, #264]	@ (800cdc4 <TIM_Base_SetConfig+0x134>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d007      	beq.n	800ccd0 <TIM_Base_SetConfig+0x40>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a41      	ldr	r2, [pc, #260]	@ (800cdc8 <TIM_Base_SetConfig+0x138>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d003      	beq.n	800ccd0 <TIM_Base_SetConfig+0x40>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a40      	ldr	r2, [pc, #256]	@ (800cdcc <TIM_Base_SetConfig+0x13c>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d108      	bne.n	800cce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a35      	ldr	r2, [pc, #212]	@ (800cdbc <TIM_Base_SetConfig+0x12c>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d01f      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf0:	d01b      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a32      	ldr	r2, [pc, #200]	@ (800cdc0 <TIM_Base_SetConfig+0x130>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d017      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a31      	ldr	r2, [pc, #196]	@ (800cdc4 <TIM_Base_SetConfig+0x134>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d013      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a30      	ldr	r2, [pc, #192]	@ (800cdc8 <TIM_Base_SetConfig+0x138>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00f      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a2f      	ldr	r2, [pc, #188]	@ (800cdcc <TIM_Base_SetConfig+0x13c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d00b      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a2e      	ldr	r2, [pc, #184]	@ (800cdd0 <TIM_Base_SetConfig+0x140>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d007      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a2d      	ldr	r2, [pc, #180]	@ (800cdd4 <TIM_Base_SetConfig+0x144>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d003      	beq.n	800cd2a <TIM_Base_SetConfig+0x9a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a2c      	ldr	r2, [pc, #176]	@ (800cdd8 <TIM_Base_SetConfig+0x148>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d108      	bne.n	800cd3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a16      	ldr	r2, [pc, #88]	@ (800cdbc <TIM_Base_SetConfig+0x12c>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d00f      	beq.n	800cd88 <TIM_Base_SetConfig+0xf8>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a18      	ldr	r2, [pc, #96]	@ (800cdcc <TIM_Base_SetConfig+0x13c>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d00b      	beq.n	800cd88 <TIM_Base_SetConfig+0xf8>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a17      	ldr	r2, [pc, #92]	@ (800cdd0 <TIM_Base_SetConfig+0x140>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d007      	beq.n	800cd88 <TIM_Base_SetConfig+0xf8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a16      	ldr	r2, [pc, #88]	@ (800cdd4 <TIM_Base_SetConfig+0x144>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d003      	beq.n	800cd88 <TIM_Base_SetConfig+0xf8>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a15      	ldr	r2, [pc, #84]	@ (800cdd8 <TIM_Base_SetConfig+0x148>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d103      	bne.n	800cd90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	691a      	ldr	r2, [r3, #16]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d105      	bne.n	800cdae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	f023 0201 	bic.w	r2, r3, #1
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	611a      	str	r2, [r3, #16]
  }
}
 800cdae:	bf00      	nop
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	40010000 	.word	0x40010000
 800cdc0:	40000400 	.word	0x40000400
 800cdc4:	40000800 	.word	0x40000800
 800cdc8:	40000c00 	.word	0x40000c00
 800cdcc:	40010400 	.word	0x40010400
 800cdd0:	40014000 	.word	0x40014000
 800cdd4:	40014400 	.word	0x40014400
 800cdd8:	40014800 	.word	0x40014800

0800cddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a1b      	ldr	r3, [r3, #32]
 800cdf0:	f023 0201 	bic.w	r2, r3, #1
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4b37      	ldr	r3, [pc, #220]	@ (800cee4 <TIM_OC1_SetConfig+0x108>)
 800ce08:	4013      	ands	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f023 0303 	bic.w	r3, r3, #3
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f023 0302 	bic.w	r3, r3, #2
 800ce24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a2d      	ldr	r2, [pc, #180]	@ (800cee8 <TIM_OC1_SetConfig+0x10c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d00f      	beq.n	800ce58 <TIM_OC1_SetConfig+0x7c>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a2c      	ldr	r2, [pc, #176]	@ (800ceec <TIM_OC1_SetConfig+0x110>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d00b      	beq.n	800ce58 <TIM_OC1_SetConfig+0x7c>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a2b      	ldr	r2, [pc, #172]	@ (800cef0 <TIM_OC1_SetConfig+0x114>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d007      	beq.n	800ce58 <TIM_OC1_SetConfig+0x7c>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a2a      	ldr	r2, [pc, #168]	@ (800cef4 <TIM_OC1_SetConfig+0x118>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d003      	beq.n	800ce58 <TIM_OC1_SetConfig+0x7c>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a29      	ldr	r2, [pc, #164]	@ (800cef8 <TIM_OC1_SetConfig+0x11c>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d10c      	bne.n	800ce72 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	f023 0308 	bic.w	r3, r3, #8
 800ce5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f023 0304 	bic.w	r3, r3, #4
 800ce70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a1c      	ldr	r2, [pc, #112]	@ (800cee8 <TIM_OC1_SetConfig+0x10c>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d00f      	beq.n	800ce9a <TIM_OC1_SetConfig+0xbe>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a1b      	ldr	r2, [pc, #108]	@ (800ceec <TIM_OC1_SetConfig+0x110>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d00b      	beq.n	800ce9a <TIM_OC1_SetConfig+0xbe>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a1a      	ldr	r2, [pc, #104]	@ (800cef0 <TIM_OC1_SetConfig+0x114>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d007      	beq.n	800ce9a <TIM_OC1_SetConfig+0xbe>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a19      	ldr	r2, [pc, #100]	@ (800cef4 <TIM_OC1_SetConfig+0x118>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d003      	beq.n	800ce9a <TIM_OC1_SetConfig+0xbe>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a18      	ldr	r2, [pc, #96]	@ (800cef8 <TIM_OC1_SetConfig+0x11c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d111      	bne.n	800cebe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	695b      	ldr	r3, [r3, #20]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	621a      	str	r2, [r3, #32]
}
 800ced8:	bf00      	nop
 800ceda:	371c      	adds	r7, #28
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	fffeff8f 	.word	0xfffeff8f
 800cee8:	40010000 	.word	0x40010000
 800ceec:	40010400 	.word	0x40010400
 800cef0:	40014000 	.word	0x40014000
 800cef4:	40014400 	.word	0x40014400
 800cef8:	40014800 	.word	0x40014800

0800cefc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	f023 0210 	bic.w	r2, r3, #16
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	699b      	ldr	r3, [r3, #24]
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	4b34      	ldr	r3, [pc, #208]	@ (800cff8 <TIM_OC2_SetConfig+0xfc>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	021b      	lsls	r3, r3, #8
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f023 0320 	bic.w	r3, r3, #32
 800cf46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	697a      	ldr	r2, [r7, #20]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a29      	ldr	r2, [pc, #164]	@ (800cffc <TIM_OC2_SetConfig+0x100>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d003      	beq.n	800cf64 <TIM_OC2_SetConfig+0x68>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a28      	ldr	r2, [pc, #160]	@ (800d000 <TIM_OC2_SetConfig+0x104>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d10d      	bne.n	800cf80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a1e      	ldr	r2, [pc, #120]	@ (800cffc <TIM_OC2_SetConfig+0x100>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d00f      	beq.n	800cfa8 <TIM_OC2_SetConfig+0xac>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a1d      	ldr	r2, [pc, #116]	@ (800d000 <TIM_OC2_SetConfig+0x104>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d00b      	beq.n	800cfa8 <TIM_OC2_SetConfig+0xac>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a1c      	ldr	r2, [pc, #112]	@ (800d004 <TIM_OC2_SetConfig+0x108>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d007      	beq.n	800cfa8 <TIM_OC2_SetConfig+0xac>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a1b      	ldr	r2, [pc, #108]	@ (800d008 <TIM_OC2_SetConfig+0x10c>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d003      	beq.n	800cfa8 <TIM_OC2_SetConfig+0xac>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a1a      	ldr	r2, [pc, #104]	@ (800d00c <TIM_OC2_SetConfig+0x110>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d113      	bne.n	800cfd0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cfae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cfb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	695b      	ldr	r3, [r3, #20]
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	621a      	str	r2, [r3, #32]
}
 800cfea:	bf00      	nop
 800cfec:	371c      	adds	r7, #28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	feff8fff 	.word	0xfeff8fff
 800cffc:	40010000 	.word	0x40010000
 800d000:	40010400 	.word	0x40010400
 800d004:	40014000 	.word	0x40014000
 800d008:	40014400 	.word	0x40014400
 800d00c:	40014800 	.word	0x40014800

0800d010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a1b      	ldr	r3, [r3, #32]
 800d024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	69db      	ldr	r3, [r3, #28]
 800d036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4b33      	ldr	r3, [pc, #204]	@ (800d108 <TIM_OC3_SetConfig+0xf8>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 0303 	bic.w	r3, r3, #3
 800d046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	021b      	lsls	r3, r3, #8
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	4313      	orrs	r3, r2
 800d064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a28      	ldr	r2, [pc, #160]	@ (800d10c <TIM_OC3_SetConfig+0xfc>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d003      	beq.n	800d076 <TIM_OC3_SetConfig+0x66>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a27      	ldr	r2, [pc, #156]	@ (800d110 <TIM_OC3_SetConfig+0x100>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d10d      	bne.n	800d092 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d07c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	4313      	orrs	r3, r2
 800d088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a1d      	ldr	r2, [pc, #116]	@ (800d10c <TIM_OC3_SetConfig+0xfc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d00f      	beq.n	800d0ba <TIM_OC3_SetConfig+0xaa>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a1c      	ldr	r2, [pc, #112]	@ (800d110 <TIM_OC3_SetConfig+0x100>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d00b      	beq.n	800d0ba <TIM_OC3_SetConfig+0xaa>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d114 <TIM_OC3_SetConfig+0x104>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d007      	beq.n	800d0ba <TIM_OC3_SetConfig+0xaa>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d118 <TIM_OC3_SetConfig+0x108>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d003      	beq.n	800d0ba <TIM_OC3_SetConfig+0xaa>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a19      	ldr	r2, [pc, #100]	@ (800d11c <TIM_OC3_SetConfig+0x10c>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d113      	bne.n	800d0e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	011b      	lsls	r3, r3, #4
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	685a      	ldr	r2, [r3, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	621a      	str	r2, [r3, #32]
}
 800d0fc:	bf00      	nop
 800d0fe:	371c      	adds	r7, #28
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	fffeff8f 	.word	0xfffeff8f
 800d10c:	40010000 	.word	0x40010000
 800d110:	40010400 	.word	0x40010400
 800d114:	40014000 	.word	0x40014000
 800d118:	40014400 	.word	0x40014400
 800d11c:	40014800 	.word	0x40014800

0800d120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	69db      	ldr	r3, [r3, #28]
 800d146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	4b24      	ldr	r3, [pc, #144]	@ (800d1dc <TIM_OC4_SetConfig+0xbc>)
 800d14c:	4013      	ands	r3, r2
 800d14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	021b      	lsls	r3, r3, #8
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	4313      	orrs	r3, r2
 800d162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	031b      	lsls	r3, r3, #12
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	4313      	orrs	r3, r2
 800d176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a19      	ldr	r2, [pc, #100]	@ (800d1e0 <TIM_OC4_SetConfig+0xc0>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d00f      	beq.n	800d1a0 <TIM_OC4_SetConfig+0x80>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a18      	ldr	r2, [pc, #96]	@ (800d1e4 <TIM_OC4_SetConfig+0xc4>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d00b      	beq.n	800d1a0 <TIM_OC4_SetConfig+0x80>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a17      	ldr	r2, [pc, #92]	@ (800d1e8 <TIM_OC4_SetConfig+0xc8>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d007      	beq.n	800d1a0 <TIM_OC4_SetConfig+0x80>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a16      	ldr	r2, [pc, #88]	@ (800d1ec <TIM_OC4_SetConfig+0xcc>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d003      	beq.n	800d1a0 <TIM_OC4_SetConfig+0x80>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a15      	ldr	r2, [pc, #84]	@ (800d1f0 <TIM_OC4_SetConfig+0xd0>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d109      	bne.n	800d1b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	019b      	lsls	r3, r3, #6
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	621a      	str	r2, [r3, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	feff8fff 	.word	0xfeff8fff
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40010400 	.word	0x40010400
 800d1e8:	40014000 	.word	0x40014000
 800d1ec:	40014400 	.word	0x40014400
 800d1f0:	40014800 	.word	0x40014800

0800d1f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4b21      	ldr	r3, [pc, #132]	@ (800d2a4 <TIM_OC5_SetConfig+0xb0>)
 800d220:	4013      	ands	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d234:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	041b      	lsls	r3, r3, #16
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	4313      	orrs	r3, r2
 800d240:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a18      	ldr	r2, [pc, #96]	@ (800d2a8 <TIM_OC5_SetConfig+0xb4>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d00f      	beq.n	800d26a <TIM_OC5_SetConfig+0x76>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a17      	ldr	r2, [pc, #92]	@ (800d2ac <TIM_OC5_SetConfig+0xb8>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d00b      	beq.n	800d26a <TIM_OC5_SetConfig+0x76>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a16      	ldr	r2, [pc, #88]	@ (800d2b0 <TIM_OC5_SetConfig+0xbc>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d007      	beq.n	800d26a <TIM_OC5_SetConfig+0x76>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a15      	ldr	r2, [pc, #84]	@ (800d2b4 <TIM_OC5_SetConfig+0xc0>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d003      	beq.n	800d26a <TIM_OC5_SetConfig+0x76>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a14      	ldr	r2, [pc, #80]	@ (800d2b8 <TIM_OC5_SetConfig+0xc4>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d109      	bne.n	800d27e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d270:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	021b      	lsls	r3, r3, #8
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	621a      	str	r2, [r3, #32]
}
 800d298:	bf00      	nop
 800d29a:	371c      	adds	r7, #28
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	fffeff8f 	.word	0xfffeff8f
 800d2a8:	40010000 	.word	0x40010000
 800d2ac:	40010400 	.word	0x40010400
 800d2b0:	40014000 	.word	0x40014000
 800d2b4:	40014400 	.word	0x40014400
 800d2b8:	40014800 	.word	0x40014800

0800d2bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a1b      	ldr	r3, [r3, #32]
 800d2d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	4b22      	ldr	r3, [pc, #136]	@ (800d370 <TIM_OC6_SetConfig+0xb4>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	021b      	lsls	r3, r3, #8
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	051b      	lsls	r3, r3, #20
 800d306:	693a      	ldr	r2, [r7, #16]
 800d308:	4313      	orrs	r3, r2
 800d30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a19      	ldr	r2, [pc, #100]	@ (800d374 <TIM_OC6_SetConfig+0xb8>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d00f      	beq.n	800d334 <TIM_OC6_SetConfig+0x78>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a18      	ldr	r2, [pc, #96]	@ (800d378 <TIM_OC6_SetConfig+0xbc>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d00b      	beq.n	800d334 <TIM_OC6_SetConfig+0x78>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a17      	ldr	r2, [pc, #92]	@ (800d37c <TIM_OC6_SetConfig+0xc0>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d007      	beq.n	800d334 <TIM_OC6_SetConfig+0x78>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a16      	ldr	r2, [pc, #88]	@ (800d380 <TIM_OC6_SetConfig+0xc4>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d003      	beq.n	800d334 <TIM_OC6_SetConfig+0x78>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a15      	ldr	r2, [pc, #84]	@ (800d384 <TIM_OC6_SetConfig+0xc8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d109      	bne.n	800d348 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d33a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	029b      	lsls	r3, r3, #10
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	4313      	orrs	r3, r2
 800d346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	621a      	str	r2, [r3, #32]
}
 800d362:	bf00      	nop
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	feff8fff 	.word	0xfeff8fff
 800d374:	40010000 	.word	0x40010000
 800d378:	40010400 	.word	0x40010400
 800d37c:	40014000 	.word	0x40014000
 800d380:	40014400 	.word	0x40014400
 800d384:	40014800 	.word	0x40014800

0800d388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d388:	b480      	push	{r7}
 800d38a:	b087      	sub	sp, #28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f003 031f 	and.w	r3, r3, #31
 800d39a:	2201      	movs	r2, #1
 800d39c:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6a1a      	ldr	r2, [r3, #32]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	43db      	mvns	r3, r3
 800d3aa:	401a      	ands	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6a1a      	ldr	r2, [r3, #32]
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f003 031f 	and.w	r3, r3, #31
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	621a      	str	r2, [r3, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	371c      	adds	r7, #28
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d101      	bne.n	800d3ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	e06d      	b.n	800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a30      	ldr	r2, [pc, #192]	@ (800d4d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d004      	beq.n	800d420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a2f      	ldr	r2, [pc, #188]	@ (800d4d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d108      	bne.n	800d432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	4313      	orrs	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a20      	ldr	r2, [pc, #128]	@ (800d4d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d022      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d45e:	d01d      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a1d      	ldr	r2, [pc, #116]	@ (800d4dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d018      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a1c      	ldr	r2, [pc, #112]	@ (800d4e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d013      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a1a      	ldr	r2, [pc, #104]	@ (800d4e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00e      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a15      	ldr	r2, [pc, #84]	@ (800d4d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d009      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a16      	ldr	r2, [pc, #88]	@ (800d4e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d004      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a15      	ldr	r2, [pc, #84]	@ (800d4ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d10c      	bne.n	800d4b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	40010000 	.word	0x40010000
 800d4d8:	40010400 	.word	0x40010400
 800d4dc:	40000400 	.word	0x40000400
 800d4e0:	40000800 	.word	0x40000800
 800d4e4:	40000c00 	.word	0x40000c00
 800d4e8:	40001800 	.word	0x40001800
 800d4ec:	40014000 	.word	0x40014000

0800d4f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e042      	b.n	800d5c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d544:	2b00      	cmp	r3, #0
 800d546:	d106      	bne.n	800d556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7f6 fe33 	bl	80041bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2224      	movs	r2, #36	@ 0x24
 800d55a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f022 0201 	bic.w	r2, r2, #1
 800d56c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f001 fc98 	bl	800eeac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fe29 	bl	800e1d4 <UART_SetConfig>
 800d582:	4603      	mov	r3, r0
 800d584:	2b01      	cmp	r3, #1
 800d586:	d101      	bne.n	800d58c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e01b      	b.n	800d5c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d59a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689a      	ldr	r2, [r3, #8]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f042 0201 	orr.w	r2, r2, #1
 800d5ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 fd17 	bl	800eff0 <UART_CheckIdleState>
 800d5c2:	4603      	mov	r3, r0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	@ 0x28
 800d5d0:	af02      	add	r7, sp, #8
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5e2:	2b20      	cmp	r3, #32
 800d5e4:	d17b      	bne.n	800d6de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <HAL_UART_Transmit+0x26>
 800d5ec:	88fb      	ldrh	r3, [r7, #6]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e074      	b.n	800d6e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2221      	movs	r2, #33	@ 0x21
 800d602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d606:	f7f7 f877 	bl	80046f8 <HAL_GetTick>
 800d60a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	88fa      	ldrh	r2, [r7, #6]
 800d610:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	88fa      	ldrh	r2, [r7, #6]
 800d618:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d624:	d108      	bne.n	800d638 <HAL_UART_Transmit+0x6c>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d104      	bne.n	800d638 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d62e:	2300      	movs	r3, #0
 800d630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	61bb      	str	r3, [r7, #24]
 800d636:	e003      	b.n	800d640 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d640:	e030      	b.n	800d6a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2200      	movs	r2, #0
 800d64a:	2180      	movs	r1, #128	@ 0x80
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f001 fd79 	bl	800f144 <UART_WaitOnFlagUntilTimeout>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d005      	beq.n	800d664 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2220      	movs	r2, #32
 800d65c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d660:	2303      	movs	r3, #3
 800d662:	e03d      	b.n	800d6e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10b      	bne.n	800d682 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d678:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	3302      	adds	r3, #2
 800d67e:	61bb      	str	r3, [r7, #24]
 800d680:	e007      	b.n	800d692 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	781a      	ldrb	r2, [r3, #0]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	3301      	adds	r3, #1
 800d690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3b01      	subs	r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1c8      	bne.n	800d642 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2140      	movs	r1, #64	@ 0x40
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f001 fd42 	bl	800f144 <UART_WaitOnFlagUntilTimeout>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d005      	beq.n	800d6d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2220      	movs	r2, #32
 800d6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e006      	b.n	800d6e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e000      	b.n	800d6e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d6de:	2302      	movs	r3, #2
  }
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3720      	adds	r7, #32
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08a      	sub	sp, #40	@ 0x28
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6fc:	2b20      	cmp	r3, #32
 800d6fe:	d137      	bne.n	800d770 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d002      	beq.n	800d70c <HAL_UART_Receive_DMA+0x24>
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e030      	b.n	800d772 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a18      	ldr	r2, [pc, #96]	@ (800d77c <HAL_UART_Receive_DMA+0x94>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d01f      	beq.n	800d760 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d018      	beq.n	800d760 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	e853 3f00 	ldrex	r3, [r3]
 800d73a:	613b      	str	r3, [r7, #16]
   return(result);
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d742:	627b      	str	r3, [r7, #36]	@ 0x24
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74c:	623b      	str	r3, [r7, #32]
 800d74e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d750:	69f9      	ldr	r1, [r7, #28]
 800d752:	6a3a      	ldr	r2, [r7, #32]
 800d754:	e841 2300 	strex	r3, r2, [r1]
 800d758:	61bb      	str	r3, [r7, #24]
   return(result);
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1e6      	bne.n	800d72e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d760:	88fb      	ldrh	r3, [r7, #6]
 800d762:	461a      	mov	r2, r3
 800d764:	68b9      	ldr	r1, [r7, #8]
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f001 fd5a 	bl	800f220 <UART_Start_Receive_DMA>
 800d76c:	4603      	mov	r3, r0
 800d76e:	e000      	b.n	800d772 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d770:	2302      	movs	r3, #2
  }
}
 800d772:	4618      	mov	r0, r3
 800d774:	3728      	adds	r7, #40	@ 0x28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	58000c00 	.word	0x58000c00

0800d780 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b0a2      	sub	sp, #136	@ 0x88
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800d788:	2301      	movs	r3, #1
 800d78a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d796:	e853 3f00 	ldrex	r3, [r3]
 800d79a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d79c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d79e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800d7a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d7b2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7b8:	e841 2300 	strex	r3, r2, [r1]
 800d7bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1e4      	bne.n	800d78e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ce:	e853 3f00 	ldrex	r3, [r3]
 800d7d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7d6:	4b85      	ldr	r3, [pc, #532]	@ (800d9ec <HAL_UART_Abort_IT+0x26c>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d7e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d7e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e5      	bne.n	800d7c4 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d118      	bne.n	800d832 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d810:	f023 0310 	bic.w	r3, r3, #16
 800d814:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d81e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d820:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e6      	bne.n	800d800 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00f      	beq.n	800d85a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d844:	2b80      	cmp	r3, #128	@ 0x80
 800d846:	d104      	bne.n	800d852 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d84c:	4a68      	ldr	r2, [pc, #416]	@ (800d9f0 <HAL_UART_Abort_IT+0x270>)
 800d84e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d850:	e003      	b.n	800d85a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d856:	2200      	movs	r2, #0
 800d858:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d860:	2b00      	cmp	r3, #0
 800d862:	d011      	beq.n	800d888 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d86e:	2b40      	cmp	r3, #64	@ 0x40
 800d870:	d105      	bne.n	800d87e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d878:	4a5e      	ldr	r2, [pc, #376]	@ (800d9f4 <HAL_UART_Abort_IT+0x274>)
 800d87a:	651a      	str	r2, [r3, #80]	@ 0x50
 800d87c:	e004      	b.n	800d888 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d884:	2200      	movs	r2, #0
 800d886:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d892:	2b80      	cmp	r3, #128	@ 0x80
 800d894:	d12d      	bne.n	800d8f2 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3308      	adds	r3, #8
 800d89c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	623b      	str	r3, [r7, #32]
   return(result);
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8ac:	677b      	str	r3, [r7, #116]	@ 0x74
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d8b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8be:	e841 2300 	strex	r3, r2, [r1]
 800d8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1e5      	bne.n	800d896 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00f      	beq.n	800d8f2 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7f8 f9b8 	bl	8005c4c <HAL_DMA_Abort_IT>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	651a      	str	r2, [r3, #80]	@ 0x50
 800d8ea:	e002      	b.n	800d8f2 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8fc:	2b40      	cmp	r3, #64	@ 0x40
 800d8fe:	d133      	bne.n	800d968 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3308      	adds	r3, #8
 800d906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	e853 3f00 	ldrex	r3, [r3]
 800d90e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d916:	673b      	str	r3, [r7, #112]	@ 0x70
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3308      	adds	r3, #8
 800d91e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d920:	61fa      	str	r2, [r7, #28]
 800d922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d924:	69b9      	ldr	r1, [r7, #24]
 800d926:	69fa      	ldr	r2, [r7, #28]
 800d928:	e841 2300 	strex	r3, r2, [r1]
 800d92c:	617b      	str	r3, [r7, #20]
   return(result);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1e5      	bne.n	800d900 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d014      	beq.n	800d968 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d944:	4618      	mov	r0, r3
 800d946:	f7f8 f981 	bl	8005c4c <HAL_DMA_Abort_IT>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d008      	beq.n	800d962 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d956:	2200      	movs	r2, #0
 800d958:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d960:	e002      	b.n	800d968 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800d962:	2300      	movs	r3, #0
 800d964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800d968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d138      	bne.n	800d9e2 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	220f      	movs	r2, #15
 800d99a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9a4:	d107      	bne.n	800d9b6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	699a      	ldr	r2, [r3, #24]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f042 0210 	orr.w	r2, r2, #16
 800d9b4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	699a      	ldr	r2, [r3, #24]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f042 0208 	orr.w	r2, r2, #8
 800d9c4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2220      	movs	r2, #32
 800d9d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fbe3 	bl	800e1a8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3788      	adds	r7, #136	@ 0x88
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	ef7ffffe 	.word	0xef7ffffe
 800d9f0:	0800f6cf 	.word	0x0800f6cf
 800d9f4:	0800f75b 	.word	0x0800f75b

0800d9f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b0ba      	sub	sp, #232	@ 0xe8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	69db      	ldr	r3, [r3, #28]
 800da06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800da22:	f640 030f 	movw	r3, #2063	@ 0x80f
 800da26:	4013      	ands	r3, r2
 800da28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800da2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da30:	2b00      	cmp	r3, #0
 800da32:	d11b      	bne.n	800da6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800da34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da38:	f003 0320 	and.w	r3, r3, #32
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d015      	beq.n	800da6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da44:	f003 0320 	and.w	r3, r3, #32
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d105      	bne.n	800da58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da54:	2b00      	cmp	r3, #0
 800da56:	d009      	beq.n	800da6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 8377 	beq.w	800e150 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	4798      	blx	r3
      }
      return;
 800da6a:	e371      	b.n	800e150 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800da6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 8123 	beq.w	800dcbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da7a:	4b8d      	ldr	r3, [pc, #564]	@ (800dcb0 <HAL_UART_IRQHandler+0x2b8>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d106      	bne.n	800da90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800da86:	4b8b      	ldr	r3, [pc, #556]	@ (800dcb4 <HAL_UART_IRQHandler+0x2bc>)
 800da88:	4013      	ands	r3, r2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8116 	beq.w	800dcbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d011      	beq.n	800dac0 <HAL_UART_IRQHandler+0xc8>
 800da9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00b      	beq.n	800dac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2201      	movs	r2, #1
 800daae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dab6:	f043 0201 	orr.w	r2, r3, #1
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dac4:	f003 0302 	and.w	r3, r3, #2
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d011      	beq.n	800daf0 <HAL_UART_IRQHandler+0xf8>
 800dacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00b      	beq.n	800daf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2202      	movs	r2, #2
 800dade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dae6:	f043 0204 	orr.w	r2, r3, #4
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800daf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daf4:	f003 0304 	and.w	r3, r3, #4
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d011      	beq.n	800db20 <HAL_UART_IRQHandler+0x128>
 800dafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2204      	movs	r2, #4
 800db0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db16:	f043 0202 	orr.w	r2, r3, #2
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d017      	beq.n	800db5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db30:	f003 0320 	and.w	r3, r3, #32
 800db34:	2b00      	cmp	r3, #0
 800db36:	d105      	bne.n	800db44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800db38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800db3c:	4b5c      	ldr	r3, [pc, #368]	@ (800dcb0 <HAL_UART_IRQHandler+0x2b8>)
 800db3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00b      	beq.n	800db5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2208      	movs	r2, #8
 800db4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db52:	f043 0208 	orr.w	r2, r3, #8
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db64:	2b00      	cmp	r3, #0
 800db66:	d012      	beq.n	800db8e <HAL_UART_IRQHandler+0x196>
 800db68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00c      	beq.n	800db8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db84:	f043 0220 	orr.w	r2, r3, #32
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 82dd 	beq.w	800e154 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db9e:	f003 0320 	and.w	r3, r3, #32
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d013      	beq.n	800dbce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbaa:	f003 0320 	and.w	r3, r3, #32
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d105      	bne.n	800dbbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dbb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d007      	beq.n	800dbce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbe2:	2b40      	cmp	r3, #64	@ 0x40
 800dbe4:	d005      	beq.n	800dbf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dbe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d054      	beq.n	800dc9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 fbfc 	bl	800f3f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc02:	2b40      	cmp	r3, #64	@ 0x40
 800dc04:	d146      	bne.n	800dc94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dc1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dc32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dc36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dc3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dc42:	e841 2300 	strex	r3, r2, [r1]
 800dc46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dc4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1d9      	bne.n	800dc06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d017      	beq.n	800dc8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc62:	4a15      	ldr	r2, [pc, #84]	@ (800dcb8 <HAL_UART_IRQHandler+0x2c0>)
 800dc64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f7 ffed 	bl	8005c4c <HAL_DMA_Abort_IT>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d019      	beq.n	800dcac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc8a:	e00f      	b.n	800dcac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fa81 	bl	800e194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc92:	e00b      	b.n	800dcac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fa7d 	bl	800e194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc9a:	e007      	b.n	800dcac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fa79 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800dcaa:	e253      	b.n	800e154 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcac:	bf00      	nop
    return;
 800dcae:	e251      	b.n	800e154 <HAL_UART_IRQHandler+0x75c>
 800dcb0:	10000001 	.word	0x10000001
 800dcb4:	04000120 	.word	0x04000120
 800dcb8:	0800f6a3 	.word	0x0800f6a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	f040 81e7 	bne.w	800e094 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcca:	f003 0310 	and.w	r3, r3, #16
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 81e0 	beq.w	800e094 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dcd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcd8:	f003 0310 	and.w	r3, r3, #16
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 81d9 	beq.w	800e094 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2210      	movs	r2, #16
 800dce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcf4:	2b40      	cmp	r3, #64	@ 0x40
 800dcf6:	f040 8151 	bne.w	800df9c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a96      	ldr	r2, [pc, #600]	@ (800df5c <HAL_UART_IRQHandler+0x564>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d068      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a93      	ldr	r2, [pc, #588]	@ (800df60 <HAL_UART_IRQHandler+0x568>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d061      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a91      	ldr	r2, [pc, #580]	@ (800df64 <HAL_UART_IRQHandler+0x56c>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d05a      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a8e      	ldr	r2, [pc, #568]	@ (800df68 <HAL_UART_IRQHandler+0x570>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d053      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a8c      	ldr	r2, [pc, #560]	@ (800df6c <HAL_UART_IRQHandler+0x574>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d04c      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a89      	ldr	r2, [pc, #548]	@ (800df70 <HAL_UART_IRQHandler+0x578>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d045      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a87      	ldr	r2, [pc, #540]	@ (800df74 <HAL_UART_IRQHandler+0x57c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d03e      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a84      	ldr	r2, [pc, #528]	@ (800df78 <HAL_UART_IRQHandler+0x580>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d037      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a82      	ldr	r2, [pc, #520]	@ (800df7c <HAL_UART_IRQHandler+0x584>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d030      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a7f      	ldr	r2, [pc, #508]	@ (800df80 <HAL_UART_IRQHandler+0x588>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d029      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a7d      	ldr	r2, [pc, #500]	@ (800df84 <HAL_UART_IRQHandler+0x58c>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d022      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a7a      	ldr	r2, [pc, #488]	@ (800df88 <HAL_UART_IRQHandler+0x590>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d01b      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a78      	ldr	r2, [pc, #480]	@ (800df8c <HAL_UART_IRQHandler+0x594>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d014      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a75      	ldr	r2, [pc, #468]	@ (800df90 <HAL_UART_IRQHandler+0x598>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d00d      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a73      	ldr	r2, [pc, #460]	@ (800df94 <HAL_UART_IRQHandler+0x59c>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d006      	beq.n	800ddda <HAL_UART_IRQHandler+0x3e2>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a70      	ldr	r2, [pc, #448]	@ (800df98 <HAL_UART_IRQHandler+0x5a0>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d106      	bne.n	800dde8 <HAL_UART_IRQHandler+0x3f0>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	e005      	b.n	800ddf4 <HAL_UART_IRQHandler+0x3fc>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ddf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f000 81ab 	beq.w	800e158 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800de08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de0c:	429a      	cmp	r2, r3
 800de0e:	f080 81a3 	bcs.w	800e158 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de28:	f000 8087 	beq.w	800df3a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de38:	e853 3f00 	ldrex	r3, [r3]
 800de3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800de40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800de44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	461a      	mov	r2, r3
 800de52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800de62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800de66:	e841 2300 	strex	r3, r2, [r1]
 800de6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800de6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1da      	bne.n	800de2c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3308      	adds	r3, #8
 800de7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de80:	e853 3f00 	ldrex	r3, [r3]
 800de84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de88:	f023 0301 	bic.w	r3, r3, #1
 800de8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3308      	adds	r3, #8
 800de96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800de9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800de9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dea6:	e841 2300 	strex	r3, r2, [r1]
 800deaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800deac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1e1      	bne.n	800de76 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ded6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ded8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dedc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e3      	bne.n	800deb2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2220      	movs	r2, #32
 800deee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df08:	f023 0310 	bic.w	r3, r3, #16
 800df0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	461a      	mov	r2, r3
 800df16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800df28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e4      	bne.n	800def8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df34:	4618      	mov	r0, r3
 800df36:	f7f7 fb6b 	bl	8005610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2202      	movs	r2, #2
 800df3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	b29b      	uxth	r3, r3
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 f931 	bl	800e1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df5a:	e0fd      	b.n	800e158 <HAL_UART_IRQHandler+0x760>
 800df5c:	40020010 	.word	0x40020010
 800df60:	40020028 	.word	0x40020028
 800df64:	40020040 	.word	0x40020040
 800df68:	40020058 	.word	0x40020058
 800df6c:	40020070 	.word	0x40020070
 800df70:	40020088 	.word	0x40020088
 800df74:	400200a0 	.word	0x400200a0
 800df78:	400200b8 	.word	0x400200b8
 800df7c:	40020410 	.word	0x40020410
 800df80:	40020428 	.word	0x40020428
 800df84:	40020440 	.word	0x40020440
 800df88:	40020458 	.word	0x40020458
 800df8c:	40020470 	.word	0x40020470
 800df90:	40020488 	.word	0x40020488
 800df94:	400204a0 	.word	0x400204a0
 800df98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 80cf 	beq.w	800e15c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dfbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 80ca 	beq.w	800e15c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd0:	e853 3f00 	ldrex	r3, [r3]
 800dfd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dfd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dfea:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dff2:	e841 2300 	strex	r3, r2, [r1]
 800dff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1e4      	bne.n	800dfc8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3308      	adds	r3, #8
 800e004:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	e853 3f00 	ldrex	r3, [r3]
 800e00c:	623b      	str	r3, [r7, #32]
   return(result);
 800e00e:	6a3a      	ldr	r2, [r7, #32]
 800e010:	4b55      	ldr	r3, [pc, #340]	@ (800e168 <HAL_UART_IRQHandler+0x770>)
 800e012:	4013      	ands	r3, r2
 800e014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3308      	adds	r3, #8
 800e01e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e022:	633a      	str	r2, [r7, #48]	@ 0x30
 800e024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e02a:	e841 2300 	strex	r3, r2, [r1]
 800e02e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1e3      	bne.n	800dffe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2220      	movs	r2, #32
 800e03a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	e853 3f00 	ldrex	r3, [r3]
 800e056:	60fb      	str	r3, [r7, #12]
   return(result);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f023 0310 	bic.w	r3, r3, #16
 800e05e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e06c:	61fb      	str	r3, [r7, #28]
 800e06e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e070:	69b9      	ldr	r1, [r7, #24]
 800e072:	69fa      	ldr	r2, [r7, #28]
 800e074:	e841 2300 	strex	r3, r2, [r1]
 800e078:	617b      	str	r3, [r7, #20]
   return(result);
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e4      	bne.n	800e04a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2202      	movs	r2, #2
 800e084:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f895 	bl	800e1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e092:	e063      	b.n	800e15c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00e      	beq.n	800e0be <HAL_UART_IRQHandler+0x6c6>
 800e0a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e0b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f001 fbba 	bl	800f830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0bc:	e051      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d014      	beq.n	800e0f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d105      	bne.n	800e0e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e0d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d008      	beq.n	800e0f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d03a      	beq.n	800e160 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	4798      	blx	r3
    }
    return;
 800e0f2:	e035      	b.n	800e160 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d009      	beq.n	800e114 <HAL_UART_IRQHandler+0x71c>
 800e100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 fb64 	bl	800f7da <UART_EndTransmit_IT>
    return;
 800e112:	e026      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <HAL_UART_IRQHandler+0x73c>
 800e120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e124:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f001 fb93 	bl	800f858 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e132:	e016      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d010      	beq.n	800e162 <HAL_UART_IRQHandler+0x76a>
 800e140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e144:	2b00      	cmp	r3, #0
 800e146:	da0c      	bge.n	800e162 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f001 fb7b 	bl	800f844 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e14e:	e008      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
      return;
 800e150:	bf00      	nop
 800e152:	e006      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
    return;
 800e154:	bf00      	nop
 800e156:	e004      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
      return;
 800e158:	bf00      	nop
 800e15a:	e002      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
      return;
 800e15c:	bf00      	nop
 800e15e:	e000      	b.n	800e162 <HAL_UART_IRQHandler+0x76a>
    return;
 800e160:	bf00      	nop
  }
}
 800e162:	37e8      	adds	r7, #232	@ 0xe8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	effffffe 	.word	0xeffffffe

0800e16c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1d8:	b092      	sub	sp, #72	@ 0x48
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	4bbe      	ldr	r3, [pc, #760]	@ (800e4fc <UART_SetConfig+0x328>)
 800e204:	4013      	ands	r3, r2
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e20c:	430b      	orrs	r3, r1
 800e20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	68da      	ldr	r2, [r3, #12]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	430a      	orrs	r2, r1
 800e224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4ab3      	ldr	r2, [pc, #716]	@ (800e500 <UART_SetConfig+0x32c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d004      	beq.n	800e240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e23c:	4313      	orrs	r3, r2
 800e23e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689a      	ldr	r2, [r3, #8]
 800e246:	4baf      	ldr	r3, [pc, #700]	@ (800e504 <UART_SetConfig+0x330>)
 800e248:	4013      	ands	r3, r2
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	6812      	ldr	r2, [r2, #0]
 800e24e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e250:	430b      	orrs	r3, r1
 800e252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25a:	f023 010f 	bic.w	r1, r3, #15
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	430a      	orrs	r2, r1
 800e268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4aa6      	ldr	r2, [pc, #664]	@ (800e508 <UART_SetConfig+0x334>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d177      	bne.n	800e364 <UART_SetConfig+0x190>
 800e274:	4ba5      	ldr	r3, [pc, #660]	@ (800e50c <UART_SetConfig+0x338>)
 800e276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e27c:	2b28      	cmp	r3, #40	@ 0x28
 800e27e:	d86d      	bhi.n	800e35c <UART_SetConfig+0x188>
 800e280:	a201      	add	r2, pc, #4	@ (adr r2, 800e288 <UART_SetConfig+0xb4>)
 800e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e286:	bf00      	nop
 800e288:	0800e32d 	.word	0x0800e32d
 800e28c:	0800e35d 	.word	0x0800e35d
 800e290:	0800e35d 	.word	0x0800e35d
 800e294:	0800e35d 	.word	0x0800e35d
 800e298:	0800e35d 	.word	0x0800e35d
 800e29c:	0800e35d 	.word	0x0800e35d
 800e2a0:	0800e35d 	.word	0x0800e35d
 800e2a4:	0800e35d 	.word	0x0800e35d
 800e2a8:	0800e335 	.word	0x0800e335
 800e2ac:	0800e35d 	.word	0x0800e35d
 800e2b0:	0800e35d 	.word	0x0800e35d
 800e2b4:	0800e35d 	.word	0x0800e35d
 800e2b8:	0800e35d 	.word	0x0800e35d
 800e2bc:	0800e35d 	.word	0x0800e35d
 800e2c0:	0800e35d 	.word	0x0800e35d
 800e2c4:	0800e35d 	.word	0x0800e35d
 800e2c8:	0800e33d 	.word	0x0800e33d
 800e2cc:	0800e35d 	.word	0x0800e35d
 800e2d0:	0800e35d 	.word	0x0800e35d
 800e2d4:	0800e35d 	.word	0x0800e35d
 800e2d8:	0800e35d 	.word	0x0800e35d
 800e2dc:	0800e35d 	.word	0x0800e35d
 800e2e0:	0800e35d 	.word	0x0800e35d
 800e2e4:	0800e35d 	.word	0x0800e35d
 800e2e8:	0800e345 	.word	0x0800e345
 800e2ec:	0800e35d 	.word	0x0800e35d
 800e2f0:	0800e35d 	.word	0x0800e35d
 800e2f4:	0800e35d 	.word	0x0800e35d
 800e2f8:	0800e35d 	.word	0x0800e35d
 800e2fc:	0800e35d 	.word	0x0800e35d
 800e300:	0800e35d 	.word	0x0800e35d
 800e304:	0800e35d 	.word	0x0800e35d
 800e308:	0800e34d 	.word	0x0800e34d
 800e30c:	0800e35d 	.word	0x0800e35d
 800e310:	0800e35d 	.word	0x0800e35d
 800e314:	0800e35d 	.word	0x0800e35d
 800e318:	0800e35d 	.word	0x0800e35d
 800e31c:	0800e35d 	.word	0x0800e35d
 800e320:	0800e35d 	.word	0x0800e35d
 800e324:	0800e35d 	.word	0x0800e35d
 800e328:	0800e355 	.word	0x0800e355
 800e32c:	2301      	movs	r3, #1
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e332:	e326      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e334:	2304      	movs	r3, #4
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e33a:	e322      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e33c:	2308      	movs	r3, #8
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e342:	e31e      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e344:	2310      	movs	r3, #16
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e34a:	e31a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e34c:	2320      	movs	r3, #32
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e352:	e316      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e354:	2340      	movs	r3, #64	@ 0x40
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e35a:	e312      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e35c:	2380      	movs	r3, #128	@ 0x80
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e362:	e30e      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a69      	ldr	r2, [pc, #420]	@ (800e510 <UART_SetConfig+0x33c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d130      	bne.n	800e3d0 <UART_SetConfig+0x1fc>
 800e36e:	4b67      	ldr	r3, [pc, #412]	@ (800e50c <UART_SetConfig+0x338>)
 800e370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e372:	f003 0307 	and.w	r3, r3, #7
 800e376:	2b05      	cmp	r3, #5
 800e378:	d826      	bhi.n	800e3c8 <UART_SetConfig+0x1f4>
 800e37a:	a201      	add	r2, pc, #4	@ (adr r2, 800e380 <UART_SetConfig+0x1ac>)
 800e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e380:	0800e399 	.word	0x0800e399
 800e384:	0800e3a1 	.word	0x0800e3a1
 800e388:	0800e3a9 	.word	0x0800e3a9
 800e38c:	0800e3b1 	.word	0x0800e3b1
 800e390:	0800e3b9 	.word	0x0800e3b9
 800e394:	0800e3c1 	.word	0x0800e3c1
 800e398:	2300      	movs	r3, #0
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e39e:	e2f0      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3a6:	e2ec      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3a8:	2308      	movs	r3, #8
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ae:	e2e8      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3b6:	e2e4      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3be:	e2e0      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3c0:	2340      	movs	r3, #64	@ 0x40
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3c6:	e2dc      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3c8:	2380      	movs	r3, #128	@ 0x80
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ce:	e2d8      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a4f      	ldr	r2, [pc, #316]	@ (800e514 <UART_SetConfig+0x340>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d130      	bne.n	800e43c <UART_SetConfig+0x268>
 800e3da:	4b4c      	ldr	r3, [pc, #304]	@ (800e50c <UART_SetConfig+0x338>)
 800e3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3de:	f003 0307 	and.w	r3, r3, #7
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d826      	bhi.n	800e434 <UART_SetConfig+0x260>
 800e3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ec <UART_SetConfig+0x218>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e405 	.word	0x0800e405
 800e3f0:	0800e40d 	.word	0x0800e40d
 800e3f4:	0800e415 	.word	0x0800e415
 800e3f8:	0800e41d 	.word	0x0800e41d
 800e3fc:	0800e425 	.word	0x0800e425
 800e400:	0800e42d 	.word	0x0800e42d
 800e404:	2300      	movs	r3, #0
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e40a:	e2ba      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e40c:	2304      	movs	r3, #4
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e412:	e2b6      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e414:	2308      	movs	r3, #8
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e41a:	e2b2      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e41c:	2310      	movs	r3, #16
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e422:	e2ae      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e424:	2320      	movs	r3, #32
 800e426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e42a:	e2aa      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e42c:	2340      	movs	r3, #64	@ 0x40
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e432:	e2a6      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e434:	2380      	movs	r3, #128	@ 0x80
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e43a:	e2a2      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a35      	ldr	r2, [pc, #212]	@ (800e518 <UART_SetConfig+0x344>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d130      	bne.n	800e4a8 <UART_SetConfig+0x2d4>
 800e446:	4b31      	ldr	r3, [pc, #196]	@ (800e50c <UART_SetConfig+0x338>)
 800e448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e44a:	f003 0307 	and.w	r3, r3, #7
 800e44e:	2b05      	cmp	r3, #5
 800e450:	d826      	bhi.n	800e4a0 <UART_SetConfig+0x2cc>
 800e452:	a201      	add	r2, pc, #4	@ (adr r2, 800e458 <UART_SetConfig+0x284>)
 800e454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e458:	0800e471 	.word	0x0800e471
 800e45c:	0800e479 	.word	0x0800e479
 800e460:	0800e481 	.word	0x0800e481
 800e464:	0800e489 	.word	0x0800e489
 800e468:	0800e491 	.word	0x0800e491
 800e46c:	0800e499 	.word	0x0800e499
 800e470:	2300      	movs	r3, #0
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e476:	e284      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e478:	2304      	movs	r3, #4
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e47e:	e280      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e480:	2308      	movs	r3, #8
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e486:	e27c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e488:	2310      	movs	r3, #16
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e48e:	e278      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e490:	2320      	movs	r3, #32
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e496:	e274      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e498:	2340      	movs	r3, #64	@ 0x40
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e49e:	e270      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4a0:	2380      	movs	r3, #128	@ 0x80
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4a6:	e26c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e51c <UART_SetConfig+0x348>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d142      	bne.n	800e538 <UART_SetConfig+0x364>
 800e4b2:	4b16      	ldr	r3, [pc, #88]	@ (800e50c <UART_SetConfig+0x338>)
 800e4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b6:	f003 0307 	and.w	r3, r3, #7
 800e4ba:	2b05      	cmp	r3, #5
 800e4bc:	d838      	bhi.n	800e530 <UART_SetConfig+0x35c>
 800e4be:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c4 <UART_SetConfig+0x2f0>)
 800e4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c4:	0800e4dd 	.word	0x0800e4dd
 800e4c8:	0800e4e5 	.word	0x0800e4e5
 800e4cc:	0800e4ed 	.word	0x0800e4ed
 800e4d0:	0800e4f5 	.word	0x0800e4f5
 800e4d4:	0800e521 	.word	0x0800e521
 800e4d8:	0800e529 	.word	0x0800e529
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4e2:	e24e      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4e4:	2304      	movs	r3, #4
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ea:	e24a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4ec:	2308      	movs	r3, #8
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4f2:	e246      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4f4:	2310      	movs	r3, #16
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4fa:	e242      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e4fc:	cfff69f3 	.word	0xcfff69f3
 800e500:	58000c00 	.word	0x58000c00
 800e504:	11fff4ff 	.word	0x11fff4ff
 800e508:	40011000 	.word	0x40011000
 800e50c:	58024400 	.word	0x58024400
 800e510:	40004400 	.word	0x40004400
 800e514:	40004800 	.word	0x40004800
 800e518:	40004c00 	.word	0x40004c00
 800e51c:	40005000 	.word	0x40005000
 800e520:	2320      	movs	r3, #32
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e526:	e22c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e528:	2340      	movs	r3, #64	@ 0x40
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e52e:	e228      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e530:	2380      	movs	r3, #128	@ 0x80
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e536:	e224      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4ab1      	ldr	r2, [pc, #708]	@ (800e804 <UART_SetConfig+0x630>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d176      	bne.n	800e630 <UART_SetConfig+0x45c>
 800e542:	4bb1      	ldr	r3, [pc, #708]	@ (800e808 <UART_SetConfig+0x634>)
 800e544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e54a:	2b28      	cmp	r3, #40	@ 0x28
 800e54c:	d86c      	bhi.n	800e628 <UART_SetConfig+0x454>
 800e54e:	a201      	add	r2, pc, #4	@ (adr r2, 800e554 <UART_SetConfig+0x380>)
 800e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e554:	0800e5f9 	.word	0x0800e5f9
 800e558:	0800e629 	.word	0x0800e629
 800e55c:	0800e629 	.word	0x0800e629
 800e560:	0800e629 	.word	0x0800e629
 800e564:	0800e629 	.word	0x0800e629
 800e568:	0800e629 	.word	0x0800e629
 800e56c:	0800e629 	.word	0x0800e629
 800e570:	0800e629 	.word	0x0800e629
 800e574:	0800e601 	.word	0x0800e601
 800e578:	0800e629 	.word	0x0800e629
 800e57c:	0800e629 	.word	0x0800e629
 800e580:	0800e629 	.word	0x0800e629
 800e584:	0800e629 	.word	0x0800e629
 800e588:	0800e629 	.word	0x0800e629
 800e58c:	0800e629 	.word	0x0800e629
 800e590:	0800e629 	.word	0x0800e629
 800e594:	0800e609 	.word	0x0800e609
 800e598:	0800e629 	.word	0x0800e629
 800e59c:	0800e629 	.word	0x0800e629
 800e5a0:	0800e629 	.word	0x0800e629
 800e5a4:	0800e629 	.word	0x0800e629
 800e5a8:	0800e629 	.word	0x0800e629
 800e5ac:	0800e629 	.word	0x0800e629
 800e5b0:	0800e629 	.word	0x0800e629
 800e5b4:	0800e611 	.word	0x0800e611
 800e5b8:	0800e629 	.word	0x0800e629
 800e5bc:	0800e629 	.word	0x0800e629
 800e5c0:	0800e629 	.word	0x0800e629
 800e5c4:	0800e629 	.word	0x0800e629
 800e5c8:	0800e629 	.word	0x0800e629
 800e5cc:	0800e629 	.word	0x0800e629
 800e5d0:	0800e629 	.word	0x0800e629
 800e5d4:	0800e619 	.word	0x0800e619
 800e5d8:	0800e629 	.word	0x0800e629
 800e5dc:	0800e629 	.word	0x0800e629
 800e5e0:	0800e629 	.word	0x0800e629
 800e5e4:	0800e629 	.word	0x0800e629
 800e5e8:	0800e629 	.word	0x0800e629
 800e5ec:	0800e629 	.word	0x0800e629
 800e5f0:	0800e629 	.word	0x0800e629
 800e5f4:	0800e621 	.word	0x0800e621
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5fe:	e1c0      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e600:	2304      	movs	r3, #4
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e606:	e1bc      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e608:	2308      	movs	r3, #8
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e60e:	e1b8      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e610:	2310      	movs	r3, #16
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e616:	e1b4      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e618:	2320      	movs	r3, #32
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e61e:	e1b0      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e620:	2340      	movs	r3, #64	@ 0x40
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e626:	e1ac      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e628:	2380      	movs	r3, #128	@ 0x80
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e62e:	e1a8      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a75      	ldr	r2, [pc, #468]	@ (800e80c <UART_SetConfig+0x638>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d130      	bne.n	800e69c <UART_SetConfig+0x4c8>
 800e63a:	4b73      	ldr	r3, [pc, #460]	@ (800e808 <UART_SetConfig+0x634>)
 800e63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	2b05      	cmp	r3, #5
 800e644:	d826      	bhi.n	800e694 <UART_SetConfig+0x4c0>
 800e646:	a201      	add	r2, pc, #4	@ (adr r2, 800e64c <UART_SetConfig+0x478>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e665 	.word	0x0800e665
 800e650:	0800e66d 	.word	0x0800e66d
 800e654:	0800e675 	.word	0x0800e675
 800e658:	0800e67d 	.word	0x0800e67d
 800e65c:	0800e685 	.word	0x0800e685
 800e660:	0800e68d 	.word	0x0800e68d
 800e664:	2300      	movs	r3, #0
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e66a:	e18a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e66c:	2304      	movs	r3, #4
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e672:	e186      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e674:	2308      	movs	r3, #8
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e67a:	e182      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e67c:	2310      	movs	r3, #16
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e682:	e17e      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e684:	2320      	movs	r3, #32
 800e686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e68a:	e17a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e68c:	2340      	movs	r3, #64	@ 0x40
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e692:	e176      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e694:	2380      	movs	r3, #128	@ 0x80
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e69a:	e172      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a5b      	ldr	r2, [pc, #364]	@ (800e810 <UART_SetConfig+0x63c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d130      	bne.n	800e708 <UART_SetConfig+0x534>
 800e6a6:	4b58      	ldr	r3, [pc, #352]	@ (800e808 <UART_SetConfig+0x634>)
 800e6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6aa:	f003 0307 	and.w	r3, r3, #7
 800e6ae:	2b05      	cmp	r3, #5
 800e6b0:	d826      	bhi.n	800e700 <UART_SetConfig+0x52c>
 800e6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e6b8 <UART_SetConfig+0x4e4>)
 800e6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b8:	0800e6d1 	.word	0x0800e6d1
 800e6bc:	0800e6d9 	.word	0x0800e6d9
 800e6c0:	0800e6e1 	.word	0x0800e6e1
 800e6c4:	0800e6e9 	.word	0x0800e6e9
 800e6c8:	0800e6f1 	.word	0x0800e6f1
 800e6cc:	0800e6f9 	.word	0x0800e6f9
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6d6:	e154      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e6d8:	2304      	movs	r3, #4
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6de:	e150      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e6e0:	2308      	movs	r3, #8
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6e6:	e14c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e6e8:	2310      	movs	r3, #16
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ee:	e148      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e6f0:	2320      	movs	r3, #32
 800e6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6f6:	e144      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e6f8:	2340      	movs	r3, #64	@ 0x40
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6fe:	e140      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e700:	2380      	movs	r3, #128	@ 0x80
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e706:	e13c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a41      	ldr	r2, [pc, #260]	@ (800e814 <UART_SetConfig+0x640>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	f040 8082 	bne.w	800e818 <UART_SetConfig+0x644>
 800e714:	4b3c      	ldr	r3, [pc, #240]	@ (800e808 <UART_SetConfig+0x634>)
 800e716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e71c:	2b28      	cmp	r3, #40	@ 0x28
 800e71e:	d86d      	bhi.n	800e7fc <UART_SetConfig+0x628>
 800e720:	a201      	add	r2, pc, #4	@ (adr r2, 800e728 <UART_SetConfig+0x554>)
 800e722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e726:	bf00      	nop
 800e728:	0800e7cd 	.word	0x0800e7cd
 800e72c:	0800e7fd 	.word	0x0800e7fd
 800e730:	0800e7fd 	.word	0x0800e7fd
 800e734:	0800e7fd 	.word	0x0800e7fd
 800e738:	0800e7fd 	.word	0x0800e7fd
 800e73c:	0800e7fd 	.word	0x0800e7fd
 800e740:	0800e7fd 	.word	0x0800e7fd
 800e744:	0800e7fd 	.word	0x0800e7fd
 800e748:	0800e7d5 	.word	0x0800e7d5
 800e74c:	0800e7fd 	.word	0x0800e7fd
 800e750:	0800e7fd 	.word	0x0800e7fd
 800e754:	0800e7fd 	.word	0x0800e7fd
 800e758:	0800e7fd 	.word	0x0800e7fd
 800e75c:	0800e7fd 	.word	0x0800e7fd
 800e760:	0800e7fd 	.word	0x0800e7fd
 800e764:	0800e7fd 	.word	0x0800e7fd
 800e768:	0800e7dd 	.word	0x0800e7dd
 800e76c:	0800e7fd 	.word	0x0800e7fd
 800e770:	0800e7fd 	.word	0x0800e7fd
 800e774:	0800e7fd 	.word	0x0800e7fd
 800e778:	0800e7fd 	.word	0x0800e7fd
 800e77c:	0800e7fd 	.word	0x0800e7fd
 800e780:	0800e7fd 	.word	0x0800e7fd
 800e784:	0800e7fd 	.word	0x0800e7fd
 800e788:	0800e7e5 	.word	0x0800e7e5
 800e78c:	0800e7fd 	.word	0x0800e7fd
 800e790:	0800e7fd 	.word	0x0800e7fd
 800e794:	0800e7fd 	.word	0x0800e7fd
 800e798:	0800e7fd 	.word	0x0800e7fd
 800e79c:	0800e7fd 	.word	0x0800e7fd
 800e7a0:	0800e7fd 	.word	0x0800e7fd
 800e7a4:	0800e7fd 	.word	0x0800e7fd
 800e7a8:	0800e7ed 	.word	0x0800e7ed
 800e7ac:	0800e7fd 	.word	0x0800e7fd
 800e7b0:	0800e7fd 	.word	0x0800e7fd
 800e7b4:	0800e7fd 	.word	0x0800e7fd
 800e7b8:	0800e7fd 	.word	0x0800e7fd
 800e7bc:	0800e7fd 	.word	0x0800e7fd
 800e7c0:	0800e7fd 	.word	0x0800e7fd
 800e7c4:	0800e7fd 	.word	0x0800e7fd
 800e7c8:	0800e7f5 	.word	0x0800e7f5
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7d2:	e0d6      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7d4:	2304      	movs	r3, #4
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7da:	e0d2      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7dc:	2308      	movs	r3, #8
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7e2:	e0ce      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7e4:	2310      	movs	r3, #16
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ea:	e0ca      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7ec:	2320      	movs	r3, #32
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7f2:	e0c6      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7f4:	2340      	movs	r3, #64	@ 0x40
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7fa:	e0c2      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e7fc:	2380      	movs	r3, #128	@ 0x80
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e802:	e0be      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e804:	40011400 	.word	0x40011400
 800e808:	58024400 	.word	0x58024400
 800e80c:	40007800 	.word	0x40007800
 800e810:	40007c00 	.word	0x40007c00
 800e814:	40011800 	.word	0x40011800
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4aad      	ldr	r2, [pc, #692]	@ (800ead4 <UART_SetConfig+0x900>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d176      	bne.n	800e910 <UART_SetConfig+0x73c>
 800e822:	4bad      	ldr	r3, [pc, #692]	@ (800ead8 <UART_SetConfig+0x904>)
 800e824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e82a:	2b28      	cmp	r3, #40	@ 0x28
 800e82c:	d86c      	bhi.n	800e908 <UART_SetConfig+0x734>
 800e82e:	a201      	add	r2, pc, #4	@ (adr r2, 800e834 <UART_SetConfig+0x660>)
 800e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e834:	0800e8d9 	.word	0x0800e8d9
 800e838:	0800e909 	.word	0x0800e909
 800e83c:	0800e909 	.word	0x0800e909
 800e840:	0800e909 	.word	0x0800e909
 800e844:	0800e909 	.word	0x0800e909
 800e848:	0800e909 	.word	0x0800e909
 800e84c:	0800e909 	.word	0x0800e909
 800e850:	0800e909 	.word	0x0800e909
 800e854:	0800e8e1 	.word	0x0800e8e1
 800e858:	0800e909 	.word	0x0800e909
 800e85c:	0800e909 	.word	0x0800e909
 800e860:	0800e909 	.word	0x0800e909
 800e864:	0800e909 	.word	0x0800e909
 800e868:	0800e909 	.word	0x0800e909
 800e86c:	0800e909 	.word	0x0800e909
 800e870:	0800e909 	.word	0x0800e909
 800e874:	0800e8e9 	.word	0x0800e8e9
 800e878:	0800e909 	.word	0x0800e909
 800e87c:	0800e909 	.word	0x0800e909
 800e880:	0800e909 	.word	0x0800e909
 800e884:	0800e909 	.word	0x0800e909
 800e888:	0800e909 	.word	0x0800e909
 800e88c:	0800e909 	.word	0x0800e909
 800e890:	0800e909 	.word	0x0800e909
 800e894:	0800e8f1 	.word	0x0800e8f1
 800e898:	0800e909 	.word	0x0800e909
 800e89c:	0800e909 	.word	0x0800e909
 800e8a0:	0800e909 	.word	0x0800e909
 800e8a4:	0800e909 	.word	0x0800e909
 800e8a8:	0800e909 	.word	0x0800e909
 800e8ac:	0800e909 	.word	0x0800e909
 800e8b0:	0800e909 	.word	0x0800e909
 800e8b4:	0800e8f9 	.word	0x0800e8f9
 800e8b8:	0800e909 	.word	0x0800e909
 800e8bc:	0800e909 	.word	0x0800e909
 800e8c0:	0800e909 	.word	0x0800e909
 800e8c4:	0800e909 	.word	0x0800e909
 800e8c8:	0800e909 	.word	0x0800e909
 800e8cc:	0800e909 	.word	0x0800e909
 800e8d0:	0800e909 	.word	0x0800e909
 800e8d4:	0800e901 	.word	0x0800e901
 800e8d8:	2301      	movs	r3, #1
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8de:	e050      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e6:	e04c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ee:	e048      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8f6:	e044      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fe:	e040      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e900:	2340      	movs	r3, #64	@ 0x40
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e906:	e03c      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e908:	2380      	movs	r3, #128	@ 0x80
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e038      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a71      	ldr	r2, [pc, #452]	@ (800eadc <UART_SetConfig+0x908>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d130      	bne.n	800e97c <UART_SetConfig+0x7a8>
 800e91a:	4b6f      	ldr	r3, [pc, #444]	@ (800ead8 <UART_SetConfig+0x904>)
 800e91c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b05      	cmp	r3, #5
 800e924:	d826      	bhi.n	800e974 <UART_SetConfig+0x7a0>
 800e926:	a201      	add	r2, pc, #4	@ (adr r2, 800e92c <UART_SetConfig+0x758>)
 800e928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92c:	0800e945 	.word	0x0800e945
 800e930:	0800e94d 	.word	0x0800e94d
 800e934:	0800e955 	.word	0x0800e955
 800e938:	0800e95d 	.word	0x0800e95d
 800e93c:	0800e965 	.word	0x0800e965
 800e940:	0800e96d 	.word	0x0800e96d
 800e944:	2302      	movs	r3, #2
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94a:	e01a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e94c:	2304      	movs	r3, #4
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e952:	e016      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e954:	2308      	movs	r3, #8
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95a:	e012      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e95c:	2310      	movs	r3, #16
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e962:	e00e      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e964:	2320      	movs	r3, #32
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96a:	e00a      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e96c:	2340      	movs	r3, #64	@ 0x40
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e972:	e006      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e974:	2380      	movs	r3, #128	@ 0x80
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97a:	e002      	b.n	800e982 <UART_SetConfig+0x7ae>
 800e97c:	2380      	movs	r3, #128	@ 0x80
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a55      	ldr	r2, [pc, #340]	@ (800eadc <UART_SetConfig+0x908>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	f040 80f8 	bne.w	800eb7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e98e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e992:	2b20      	cmp	r3, #32
 800e994:	dc46      	bgt.n	800ea24 <UART_SetConfig+0x850>
 800e996:	2b02      	cmp	r3, #2
 800e998:	db75      	blt.n	800ea86 <UART_SetConfig+0x8b2>
 800e99a:	3b02      	subs	r3, #2
 800e99c:	2b1e      	cmp	r3, #30
 800e99e:	d872      	bhi.n	800ea86 <UART_SetConfig+0x8b2>
 800e9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800e9a8 <UART_SetConfig+0x7d4>)
 800e9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a6:	bf00      	nop
 800e9a8:	0800ea2b 	.word	0x0800ea2b
 800e9ac:	0800ea87 	.word	0x0800ea87
 800e9b0:	0800ea33 	.word	0x0800ea33
 800e9b4:	0800ea87 	.word	0x0800ea87
 800e9b8:	0800ea87 	.word	0x0800ea87
 800e9bc:	0800ea87 	.word	0x0800ea87
 800e9c0:	0800ea43 	.word	0x0800ea43
 800e9c4:	0800ea87 	.word	0x0800ea87
 800e9c8:	0800ea87 	.word	0x0800ea87
 800e9cc:	0800ea87 	.word	0x0800ea87
 800e9d0:	0800ea87 	.word	0x0800ea87
 800e9d4:	0800ea87 	.word	0x0800ea87
 800e9d8:	0800ea87 	.word	0x0800ea87
 800e9dc:	0800ea87 	.word	0x0800ea87
 800e9e0:	0800ea53 	.word	0x0800ea53
 800e9e4:	0800ea87 	.word	0x0800ea87
 800e9e8:	0800ea87 	.word	0x0800ea87
 800e9ec:	0800ea87 	.word	0x0800ea87
 800e9f0:	0800ea87 	.word	0x0800ea87
 800e9f4:	0800ea87 	.word	0x0800ea87
 800e9f8:	0800ea87 	.word	0x0800ea87
 800e9fc:	0800ea87 	.word	0x0800ea87
 800ea00:	0800ea87 	.word	0x0800ea87
 800ea04:	0800ea87 	.word	0x0800ea87
 800ea08:	0800ea87 	.word	0x0800ea87
 800ea0c:	0800ea87 	.word	0x0800ea87
 800ea10:	0800ea87 	.word	0x0800ea87
 800ea14:	0800ea87 	.word	0x0800ea87
 800ea18:	0800ea87 	.word	0x0800ea87
 800ea1c:	0800ea87 	.word	0x0800ea87
 800ea20:	0800ea79 	.word	0x0800ea79
 800ea24:	2b40      	cmp	r3, #64	@ 0x40
 800ea26:	d02a      	beq.n	800ea7e <UART_SetConfig+0x8aa>
 800ea28:	e02d      	b.n	800ea86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea2a:	f7fb feef 	bl	800a80c <HAL_RCCEx_GetD3PCLK1Freq>
 800ea2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea30:	e02f      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb fefe 	bl	800a838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea40:	e027      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea42:	f107 0318 	add.w	r3, r7, #24
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fc f84a 	bl	800aae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea50:	e01f      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea52:	4b21      	ldr	r3, [pc, #132]	@ (800ead8 <UART_SetConfig+0x904>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f003 0320 	and.w	r3, r3, #32
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d009      	beq.n	800ea72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ead8 <UART_SetConfig+0x904>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	08db      	lsrs	r3, r3, #3
 800ea64:	f003 0303 	and.w	r3, r3, #3
 800ea68:	4a1d      	ldr	r2, [pc, #116]	@ (800eae0 <UART_SetConfig+0x90c>)
 800ea6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea70:	e00f      	b.n	800ea92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea72:	4b1b      	ldr	r3, [pc, #108]	@ (800eae0 <UART_SetConfig+0x90c>)
 800ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea76:	e00c      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea78:	4b1a      	ldr	r3, [pc, #104]	@ (800eae4 <UART_SetConfig+0x910>)
 800ea7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea7c:	e009      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea84:	e005      	b.n	800ea92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea86:	2300      	movs	r3, #0
 800ea88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ea90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 81ee 	beq.w	800ee76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea9e:	4a12      	ldr	r2, [pc, #72]	@ (800eae8 <UART_SetConfig+0x914>)
 800eaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	4613      	mov	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	4413      	add	r3, r2
 800eab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d305      	bcc.n	800eaca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d910      	bls.n	800eaec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ead0:	e1d1      	b.n	800ee76 <UART_SetConfig+0xca2>
 800ead2:	bf00      	nop
 800ead4:	40011c00 	.word	0x40011c00
 800ead8:	58024400 	.word	0x58024400
 800eadc:	58000c00 	.word	0x58000c00
 800eae0:	03d09000 	.word	0x03d09000
 800eae4:	003d0900 	.word	0x003d0900
 800eae8:	08014b24 	.word	0x08014b24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaee:	2200      	movs	r2, #0
 800eaf0:	60bb      	str	r3, [r7, #8]
 800eaf2:	60fa      	str	r2, [r7, #12]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaf8:	4ac0      	ldr	r2, [pc, #768]	@ (800edfc <UART_SetConfig+0xc28>)
 800eafa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	2200      	movs	r2, #0
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	607a      	str	r2, [r7, #4]
 800eb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb0e:	f7f1 fc3f 	bl	8000390 <__aeabi_uldivmod>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	4610      	mov	r0, r2
 800eb18:	4619      	mov	r1, r3
 800eb1a:	f04f 0200 	mov.w	r2, #0
 800eb1e:	f04f 0300 	mov.w	r3, #0
 800eb22:	020b      	lsls	r3, r1, #8
 800eb24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb28:	0202      	lsls	r2, r0, #8
 800eb2a:	6979      	ldr	r1, [r7, #20]
 800eb2c:	6849      	ldr	r1, [r1, #4]
 800eb2e:	0849      	lsrs	r1, r1, #1
 800eb30:	2000      	movs	r0, #0
 800eb32:	460c      	mov	r4, r1
 800eb34:	4605      	mov	r5, r0
 800eb36:	eb12 0804 	adds.w	r8, r2, r4
 800eb3a:	eb43 0905 	adc.w	r9, r3, r5
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	469a      	mov	sl, r3
 800eb46:	4693      	mov	fp, r2
 800eb48:	4652      	mov	r2, sl
 800eb4a:	465b      	mov	r3, fp
 800eb4c:	4640      	mov	r0, r8
 800eb4e:	4649      	mov	r1, r9
 800eb50:	f7f1 fc1e 	bl	8000390 <__aeabi_uldivmod>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4613      	mov	r3, r2
 800eb5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb62:	d308      	bcc.n	800eb76 <UART_SetConfig+0x9a2>
 800eb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb6a:	d204      	bcs.n	800eb76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb72:	60da      	str	r2, [r3, #12]
 800eb74:	e17f      	b.n	800ee76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb7c:	e17b      	b.n	800ee76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	69db      	ldr	r3, [r3, #28]
 800eb82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb86:	f040 80bd 	bne.w	800ed04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eb8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	dc48      	bgt.n	800ec24 <UART_SetConfig+0xa50>
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	db7b      	blt.n	800ec8e <UART_SetConfig+0xaba>
 800eb96:	2b20      	cmp	r3, #32
 800eb98:	d879      	bhi.n	800ec8e <UART_SetConfig+0xaba>
 800eb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eba0 <UART_SetConfig+0x9cc>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ec2b 	.word	0x0800ec2b
 800eba4:	0800ec33 	.word	0x0800ec33
 800eba8:	0800ec8f 	.word	0x0800ec8f
 800ebac:	0800ec8f 	.word	0x0800ec8f
 800ebb0:	0800ec3b 	.word	0x0800ec3b
 800ebb4:	0800ec8f 	.word	0x0800ec8f
 800ebb8:	0800ec8f 	.word	0x0800ec8f
 800ebbc:	0800ec8f 	.word	0x0800ec8f
 800ebc0:	0800ec4b 	.word	0x0800ec4b
 800ebc4:	0800ec8f 	.word	0x0800ec8f
 800ebc8:	0800ec8f 	.word	0x0800ec8f
 800ebcc:	0800ec8f 	.word	0x0800ec8f
 800ebd0:	0800ec8f 	.word	0x0800ec8f
 800ebd4:	0800ec8f 	.word	0x0800ec8f
 800ebd8:	0800ec8f 	.word	0x0800ec8f
 800ebdc:	0800ec8f 	.word	0x0800ec8f
 800ebe0:	0800ec5b 	.word	0x0800ec5b
 800ebe4:	0800ec8f 	.word	0x0800ec8f
 800ebe8:	0800ec8f 	.word	0x0800ec8f
 800ebec:	0800ec8f 	.word	0x0800ec8f
 800ebf0:	0800ec8f 	.word	0x0800ec8f
 800ebf4:	0800ec8f 	.word	0x0800ec8f
 800ebf8:	0800ec8f 	.word	0x0800ec8f
 800ebfc:	0800ec8f 	.word	0x0800ec8f
 800ec00:	0800ec8f 	.word	0x0800ec8f
 800ec04:	0800ec8f 	.word	0x0800ec8f
 800ec08:	0800ec8f 	.word	0x0800ec8f
 800ec0c:	0800ec8f 	.word	0x0800ec8f
 800ec10:	0800ec8f 	.word	0x0800ec8f
 800ec14:	0800ec8f 	.word	0x0800ec8f
 800ec18:	0800ec8f 	.word	0x0800ec8f
 800ec1c:	0800ec8f 	.word	0x0800ec8f
 800ec20:	0800ec81 	.word	0x0800ec81
 800ec24:	2b40      	cmp	r3, #64	@ 0x40
 800ec26:	d02e      	beq.n	800ec86 <UART_SetConfig+0xab2>
 800ec28:	e031      	b.n	800ec8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec2a:	f7fa fc05 	bl	8009438 <HAL_RCC_GetPCLK1Freq>
 800ec2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec30:	e033      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec32:	f7fa fc17 	bl	8009464 <HAL_RCC_GetPCLK2Freq>
 800ec36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec38:	e02f      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fb fdfa 	bl	800a838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec48:	e027      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec4a:	f107 0318 	add.w	r3, r7, #24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fb ff46 	bl	800aae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec58:	e01f      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec5a:	4b69      	ldr	r3, [pc, #420]	@ (800ee00 <UART_SetConfig+0xc2c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f003 0320 	and.w	r3, r3, #32
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d009      	beq.n	800ec7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec66:	4b66      	ldr	r3, [pc, #408]	@ (800ee00 <UART_SetConfig+0xc2c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	08db      	lsrs	r3, r3, #3
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	4a64      	ldr	r2, [pc, #400]	@ (800ee04 <UART_SetConfig+0xc30>)
 800ec72:	fa22 f303 	lsr.w	r3, r2, r3
 800ec76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec78:	e00f      	b.n	800ec9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ec7a:	4b62      	ldr	r3, [pc, #392]	@ (800ee04 <UART_SetConfig+0xc30>)
 800ec7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec7e:	e00c      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec80:	4b61      	ldr	r3, [pc, #388]	@ (800ee08 <UART_SetConfig+0xc34>)
 800ec82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec84:	e009      	b.n	800ec9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec8c:	e005      	b.n	800ec9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ec92:	2301      	movs	r3, #1
 800ec94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ec98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 80ea 	beq.w	800ee76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca6:	4a55      	ldr	r2, [pc, #340]	@ (800edfc <UART_SetConfig+0xc28>)
 800eca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecac:	461a      	mov	r2, r3
 800ecae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecb4:	005a      	lsls	r2, r3, #1
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	085b      	lsrs	r3, r3, #1
 800ecbc:	441a      	add	r2, r3
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecca:	2b0f      	cmp	r3, #15
 800eccc:	d916      	bls.n	800ecfc <UART_SetConfig+0xb28>
 800ecce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecd4:	d212      	bcs.n	800ecfc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	f023 030f 	bic.w	r3, r3, #15
 800ecde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ece0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece2:	085b      	lsrs	r3, r3, #1
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	f003 0307 	and.w	r3, r3, #7
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	e0bc      	b.n	800ee76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed02:	e0b8      	b.n	800ee76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed08:	2b20      	cmp	r3, #32
 800ed0a:	dc4b      	bgt.n	800eda4 <UART_SetConfig+0xbd0>
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f2c0 8087 	blt.w	800ee20 <UART_SetConfig+0xc4c>
 800ed12:	2b20      	cmp	r3, #32
 800ed14:	f200 8084 	bhi.w	800ee20 <UART_SetConfig+0xc4c>
 800ed18:	a201      	add	r2, pc, #4	@ (adr r2, 800ed20 <UART_SetConfig+0xb4c>)
 800ed1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1e:	bf00      	nop
 800ed20:	0800edab 	.word	0x0800edab
 800ed24:	0800edb3 	.word	0x0800edb3
 800ed28:	0800ee21 	.word	0x0800ee21
 800ed2c:	0800ee21 	.word	0x0800ee21
 800ed30:	0800edbb 	.word	0x0800edbb
 800ed34:	0800ee21 	.word	0x0800ee21
 800ed38:	0800ee21 	.word	0x0800ee21
 800ed3c:	0800ee21 	.word	0x0800ee21
 800ed40:	0800edcb 	.word	0x0800edcb
 800ed44:	0800ee21 	.word	0x0800ee21
 800ed48:	0800ee21 	.word	0x0800ee21
 800ed4c:	0800ee21 	.word	0x0800ee21
 800ed50:	0800ee21 	.word	0x0800ee21
 800ed54:	0800ee21 	.word	0x0800ee21
 800ed58:	0800ee21 	.word	0x0800ee21
 800ed5c:	0800ee21 	.word	0x0800ee21
 800ed60:	0800eddb 	.word	0x0800eddb
 800ed64:	0800ee21 	.word	0x0800ee21
 800ed68:	0800ee21 	.word	0x0800ee21
 800ed6c:	0800ee21 	.word	0x0800ee21
 800ed70:	0800ee21 	.word	0x0800ee21
 800ed74:	0800ee21 	.word	0x0800ee21
 800ed78:	0800ee21 	.word	0x0800ee21
 800ed7c:	0800ee21 	.word	0x0800ee21
 800ed80:	0800ee21 	.word	0x0800ee21
 800ed84:	0800ee21 	.word	0x0800ee21
 800ed88:	0800ee21 	.word	0x0800ee21
 800ed8c:	0800ee21 	.word	0x0800ee21
 800ed90:	0800ee21 	.word	0x0800ee21
 800ed94:	0800ee21 	.word	0x0800ee21
 800ed98:	0800ee21 	.word	0x0800ee21
 800ed9c:	0800ee21 	.word	0x0800ee21
 800eda0:	0800ee13 	.word	0x0800ee13
 800eda4:	2b40      	cmp	r3, #64	@ 0x40
 800eda6:	d037      	beq.n	800ee18 <UART_SetConfig+0xc44>
 800eda8:	e03a      	b.n	800ee20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800edaa:	f7fa fb45 	bl	8009438 <HAL_RCC_GetPCLK1Freq>
 800edae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800edb0:	e03c      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edb2:	f7fa fb57 	bl	8009464 <HAL_RCC_GetPCLK2Freq>
 800edb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800edb8:	e038      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fb fd3a 	bl	800a838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edc8:	e030      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edca:	f107 0318 	add.w	r3, r7, #24
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fb fe86 	bl	800aae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edd8:	e028      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edda:	4b09      	ldr	r3, [pc, #36]	@ (800ee00 <UART_SetConfig+0xc2c>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f003 0320 	and.w	r3, r3, #32
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d012      	beq.n	800ee0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ede6:	4b06      	ldr	r3, [pc, #24]	@ (800ee00 <UART_SetConfig+0xc2c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	08db      	lsrs	r3, r3, #3
 800edec:	f003 0303 	and.w	r3, r3, #3
 800edf0:	4a04      	ldr	r2, [pc, #16]	@ (800ee04 <UART_SetConfig+0xc30>)
 800edf2:	fa22 f303 	lsr.w	r3, r2, r3
 800edf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edf8:	e018      	b.n	800ee2c <UART_SetConfig+0xc58>
 800edfa:	bf00      	nop
 800edfc:	08014b24 	.word	0x08014b24
 800ee00:	58024400 	.word	0x58024400
 800ee04:	03d09000 	.word	0x03d09000
 800ee08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ee0c:	4b24      	ldr	r3, [pc, #144]	@ (800eea0 <UART_SetConfig+0xccc>)
 800ee0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee10:	e00c      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee12:	4b24      	ldr	r3, [pc, #144]	@ (800eea4 <UART_SetConfig+0xcd0>)
 800ee14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee16:	e009      	b.n	800ee2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee1e:	e005      	b.n	800ee2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ee20:	2300      	movs	r3, #0
 800ee22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee2a:	bf00      	nop
    }

    if (pclk != 0U)
 800ee2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d021      	beq.n	800ee76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee36:	4a1c      	ldr	r2, [pc, #112]	@ (800eea8 <UART_SetConfig+0xcd4>)
 800ee38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee40:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	085b      	lsrs	r3, r3, #1
 800ee4a:	441a      	add	r2, r3
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee58:	2b0f      	cmp	r3, #15
 800ee5a:	d909      	bls.n	800ee70 <UART_SetConfig+0xc9c>
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee62:	d205      	bcs.n	800ee70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60da      	str	r2, [r3, #12]
 800ee6e:	e002      	b.n	800ee76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ee92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3748      	adds	r7, #72	@ 0x48
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eea0:	03d09000 	.word	0x03d09000
 800eea4:	003d0900 	.word	0x003d0900
 800eea8:	08014b24 	.word	0x08014b24

0800eeac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00a      	beq.n	800eed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	430a      	orrs	r2, r1
 800eed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00a      	beq.n	800eef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	430a      	orrs	r2, r1
 800eef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eefc:	f003 0302 	and.w	r3, r3, #2
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00a      	beq.n	800ef1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef1e:	f003 0304 	and.w	r3, r3, #4
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00a      	beq.n	800ef3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	430a      	orrs	r2, r1
 800ef3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef40:	f003 0310 	and.w	r3, r3, #16
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00a      	beq.n	800ef5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef62:	f003 0320 	and.w	r3, r3, #32
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00a      	beq.n	800ef80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	430a      	orrs	r2, r1
 800ef7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d01a      	beq.n	800efc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efaa:	d10a      	bne.n	800efc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	430a      	orrs	r2, r1
 800efc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	430a      	orrs	r2, r1
 800efe2:	605a      	str	r2, [r3, #4]
  }
}
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b098      	sub	sp, #96	@ 0x60
 800eff4:	af02      	add	r7, sp, #8
 800eff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f000:	f7f5 fb7a 	bl	80046f8 <HAL_GetTick>
 800f004:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f003 0308 	and.w	r3, r3, #8
 800f010:	2b08      	cmp	r3, #8
 800f012:	d12f      	bne.n	800f074 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f014:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f01c:	2200      	movs	r2, #0
 800f01e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f88e 	bl	800f144 <UART_WaitOnFlagUntilTimeout>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d022      	beq.n	800f074 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f036:	e853 3f00 	ldrex	r3, [r3]
 800f03a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f03e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f042:	653b      	str	r3, [r7, #80]	@ 0x50
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	461a      	mov	r2, r3
 800f04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f04e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f054:	e841 2300 	strex	r3, r2, [r1]
 800f058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1e6      	bne.n	800f02e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2220      	movs	r2, #32
 800f064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f070:	2303      	movs	r3, #3
 800f072:	e063      	b.n	800f13c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f003 0304 	and.w	r3, r3, #4
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d149      	bne.n	800f116 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f082:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f08a:	2200      	movs	r2, #0
 800f08c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 f857 	bl	800f144 <UART_WaitOnFlagUntilTimeout>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d03c      	beq.n	800f116 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a4:	e853 3f00 	ldrex	r3, [r3]
 800f0a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0c2:	e841 2300 	strex	r3, r2, [r1]
 800f0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e6      	bne.n	800f09c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f023 0301 	bic.w	r3, r3, #1
 800f0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3308      	adds	r3, #8
 800f0ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0ee:	61fa      	str	r2, [r7, #28]
 800f0f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f2:	69b9      	ldr	r1, [r7, #24]
 800f0f4:	69fa      	ldr	r2, [r7, #28]
 800f0f6:	e841 2300 	strex	r3, r2, [r1]
 800f0fa:	617b      	str	r3, [r7, #20]
   return(result);
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1e5      	bne.n	800f0ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2220      	movs	r2, #32
 800f106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f112:	2303      	movs	r3, #3
 800f114:	e012      	b.n	800f13c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2220      	movs	r2, #32
 800f11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2220      	movs	r2, #32
 800f122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3758      	adds	r7, #88	@ 0x58
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	603b      	str	r3, [r7, #0]
 800f150:	4613      	mov	r3, r2
 800f152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f154:	e04f      	b.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15c:	d04b      	beq.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f15e:	f7f5 facb 	bl	80046f8 <HAL_GetTick>
 800f162:	4602      	mov	r2, r0
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d302      	bcc.n	800f174 <UART_WaitOnFlagUntilTimeout+0x30>
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f174:	2303      	movs	r3, #3
 800f176:	e04e      	b.n	800f216 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f003 0304 	and.w	r3, r3, #4
 800f182:	2b00      	cmp	r3, #0
 800f184:	d037      	beq.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b80      	cmp	r3, #128	@ 0x80
 800f18a:	d034      	beq.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2b40      	cmp	r3, #64	@ 0x40
 800f190:	d031      	beq.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	f003 0308 	and.w	r3, r3, #8
 800f19c:	2b08      	cmp	r3, #8
 800f19e:	d110      	bne.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2208      	movs	r2, #8
 800f1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f000 f921 	bl	800f3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2208      	movs	r2, #8
 800f1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e029      	b.n	800f216 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	69db      	ldr	r3, [r3, #28]
 800f1c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f1cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f1d0:	d111      	bne.n	800f1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f1da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f000 f907 	bl	800f3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2220      	movs	r2, #32
 800f1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	e00f      	b.n	800f216 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	69da      	ldr	r2, [r3, #28]
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	4013      	ands	r3, r2
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	429a      	cmp	r2, r3
 800f204:	bf0c      	ite	eq
 800f206:	2301      	moveq	r3, #1
 800f208:	2300      	movne	r3, #0
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	461a      	mov	r2, r3
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	429a      	cmp	r2, r3
 800f212:	d0a0      	beq.n	800f156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
	...

0800f220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b096      	sub	sp, #88	@ 0x58
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	88fa      	ldrh	r2, [r7, #6]
 800f238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2222      	movs	r2, #34	@ 0x22
 800f248:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f252:	2b00      	cmp	r3, #0
 800f254:	d02d      	beq.n	800f2b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f25c:	4a40      	ldr	r2, [pc, #256]	@ (800f360 <UART_Start_Receive_DMA+0x140>)
 800f25e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f266:	4a3f      	ldr	r2, [pc, #252]	@ (800f364 <UART_Start_Receive_DMA+0x144>)
 800f268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f270:	4a3d      	ldr	r2, [pc, #244]	@ (800f368 <UART_Start_Receive_DMA+0x148>)
 800f272:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f27a:	2200      	movs	r2, #0
 800f27c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	3324      	adds	r3, #36	@ 0x24
 800f28a:	4619      	mov	r1, r3
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f290:	461a      	mov	r2, r3
 800f292:	88fb      	ldrh	r3, [r7, #6]
 800f294:	f7f5 ff52 	bl	800513c <HAL_DMA_Start_IT>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d009      	beq.n	800f2b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2210      	movs	r2, #16
 800f2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2220      	movs	r2, #32
 800f2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e051      	b.n	800f356 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d018      	beq.n	800f2ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c2:	e853 3f00 	ldrex	r3, [r3]
 800f2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f2ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2e0:	e841 2300 	strex	r3, r2, [r1]
 800f2e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f2e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1e6      	bne.n	800f2ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f6:	e853 3f00 	ldrex	r3, [r3]
 800f2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fe:	f043 0301 	orr.w	r3, r3, #1
 800f302:	653b      	str	r3, [r7, #80]	@ 0x50
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3308      	adds	r3, #8
 800f30a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f30c:	637a      	str	r2, [r7, #52]	@ 0x34
 800f30e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f314:	e841 2300 	strex	r3, r2, [r1]
 800f318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1e5      	bne.n	800f2ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3308      	adds	r3, #8
 800f326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	e853 3f00 	ldrex	r3, [r3]
 800f32e:	613b      	str	r3, [r7, #16]
   return(result);
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3308      	adds	r3, #8
 800f33e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f340:	623a      	str	r2, [r7, #32]
 800f342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f344:	69f9      	ldr	r1, [r7, #28]
 800f346:	6a3a      	ldr	r2, [r7, #32]
 800f348:	e841 2300 	strex	r3, r2, [r1]
 800f34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1e5      	bne.n	800f320 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3758      	adds	r7, #88	@ 0x58
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	0800f4bd 	.word	0x0800f4bd
 800f364:	0800f5e5 	.word	0x0800f5e5
 800f368:	0800f623 	.word	0x0800f623

0800f36c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b08f      	sub	sp, #60	@ 0x3c
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37a:	6a3b      	ldr	r3, [r7, #32]
 800f37c:	e853 3f00 	ldrex	r3, [r3]
 800f380:	61fb      	str	r3, [r7, #28]
   return(result);
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f388:	637b      	str	r3, [r7, #52]	@ 0x34
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	461a      	mov	r2, r3
 800f390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f394:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f39a:	e841 2300 	strex	r3, r2, [r1]
 800f39e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e6      	bne.n	800f374 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	e853 3f00 	ldrex	r3, [r3]
 800f3b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f3bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3c6:	61ba      	str	r2, [r7, #24]
 800f3c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ca:	6979      	ldr	r1, [r7, #20]
 800f3cc:	69ba      	ldr	r2, [r7, #24]
 800f3ce:	e841 2300 	strex	r3, r2, [r1]
 800f3d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1e5      	bne.n	800f3a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2220      	movs	r2, #32
 800f3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f3e2:	bf00      	nop
 800f3e4:	373c      	adds	r7, #60	@ 0x3c
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
	...

0800f3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b095      	sub	sp, #84	@ 0x54
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f40c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f416:	643b      	str	r3, [r7, #64]	@ 0x40
 800f418:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f41c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e6      	bne.n	800f3f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6a3b      	ldr	r3, [r7, #32]
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	61fb      	str	r3, [r7, #28]
   return(result);
 800f43a:	69fa      	ldr	r2, [r7, #28]
 800f43c:	4b1e      	ldr	r3, [pc, #120]	@ (800f4b8 <UART_EndRxTransfer+0xc8>)
 800f43e:	4013      	ands	r3, r2
 800f440:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3308      	adds	r3, #8
 800f448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f44a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f44c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f450:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e5      	bne.n	800f42a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f462:	2b01      	cmp	r3, #1
 800f464:	d118      	bne.n	800f498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	e853 3f00 	ldrex	r3, [r3]
 800f472:	60bb      	str	r3, [r7, #8]
   return(result);
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	f023 0310 	bic.w	r3, r3, #16
 800f47a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	461a      	mov	r2, r3
 800f482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f484:	61bb      	str	r3, [r7, #24]
 800f486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f488:	6979      	ldr	r1, [r7, #20]
 800f48a:	69ba      	ldr	r2, [r7, #24]
 800f48c:	e841 2300 	strex	r3, r2, [r1]
 800f490:	613b      	str	r3, [r7, #16]
   return(result);
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1e6      	bne.n	800f466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2220      	movs	r2, #32
 800f49c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f4ac:	bf00      	nop
 800f4ae:	3754      	adds	r7, #84	@ 0x54
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	effffffe 	.word	0xeffffffe

0800f4bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b09c      	sub	sp, #112	@ 0x70
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4d2:	d071      	beq.n	800f5b8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f4d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4e4:	e853 3f00 	ldrex	r3, [r3]
 800f4e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f4fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e6      	bne.n	800f4dc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3308      	adds	r3, #8
 800f514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f518:	e853 3f00 	ldrex	r3, [r3]
 800f51c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f520:	f023 0301 	bic.w	r3, r3, #1
 800f524:	667b      	str	r3, [r7, #100]	@ 0x64
 800f526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3308      	adds	r3, #8
 800f52c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f52e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f536:	e841 2300 	strex	r3, r2, [r1]
 800f53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1e5      	bne.n	800f50e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3308      	adds	r3, #8
 800f548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f54c:	e853 3f00 	ldrex	r3, [r3]
 800f550:	623b      	str	r3, [r7, #32]
   return(result);
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f558:	663b      	str	r3, [r7, #96]	@ 0x60
 800f55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3308      	adds	r3, #8
 800f560:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f562:	633a      	str	r2, [r7, #48]	@ 0x30
 800f564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f56a:	e841 2300 	strex	r3, r2, [r1]
 800f56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1e5      	bne.n	800f542 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f578:	2220      	movs	r2, #32
 800f57a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f57e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f582:	2b01      	cmp	r3, #1
 800f584:	d118      	bne.n	800f5b8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	e853 3f00 	ldrex	r3, [r3]
 800f592:	60fb      	str	r3, [r7, #12]
   return(result);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 0310 	bic.w	r3, r3, #16
 800f59a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5a4:	61fb      	str	r3, [r7, #28]
 800f5a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a8:	69b9      	ldr	r1, [r7, #24]
 800f5aa:	69fa      	ldr	r2, [r7, #28]
 800f5ac:	e841 2300 	strex	r3, r2, [r1]
 800f5b0:	617b      	str	r3, [r7, #20]
   return(result);
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1e6      	bne.n	800f586 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d107      	bne.n	800f5d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f5d0:	f7fe fdf4 	bl	800e1bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f5d4:	e002      	b.n	800f5dc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f5d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f5d8:	f7f3 fe60 	bl	800329c <HAL_UART_RxCpltCallback>
}
 800f5dc:	bf00      	nop
 800f5de:	3770      	adds	r7, #112	@ 0x70
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d109      	bne.n	800f614 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f606:	085b      	lsrs	r3, r3, #1
 800f608:	b29b      	uxth	r3, r3
 800f60a:	4619      	mov	r1, r3
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7fe fdd5 	bl	800e1bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f612:	e002      	b.n	800f61a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f7fe fdb3 	bl	800e180 <HAL_UART_RxHalfCpltCallback>
}
 800f61a:	bf00      	nop
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b086      	sub	sp, #24
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f62e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f636:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f63e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f64a:	2b80      	cmp	r3, #128	@ 0x80
 800f64c:	d109      	bne.n	800f662 <UART_DMAError+0x40>
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	2b21      	cmp	r3, #33	@ 0x21
 800f652:	d106      	bne.n	800f662 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	2200      	movs	r2, #0
 800f658:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f65c:	6978      	ldr	r0, [r7, #20]
 800f65e:	f7ff fe85 	bl	800f36c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	689b      	ldr	r3, [r3, #8]
 800f668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f66c:	2b40      	cmp	r3, #64	@ 0x40
 800f66e:	d109      	bne.n	800f684 <UART_DMAError+0x62>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b22      	cmp	r3, #34	@ 0x22
 800f674:	d106      	bne.n	800f684 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2200      	movs	r2, #0
 800f67a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f67e:	6978      	ldr	r0, [r7, #20]
 800f680:	f7ff feb6 	bl	800f3f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f68a:	f043 0210 	orr.w	r2, r3, #16
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f694:	6978      	ldr	r0, [r7, #20]
 800f696:	f7fe fd7d 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f69a:	bf00      	nop
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f7fe fd67 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b084      	sub	sp, #16
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6da:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d005      	beq.n	800f6fa <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d12b      	bne.n	800f752 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2200      	movs	r2, #0
 800f706:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	220f      	movs	r2, #15
 800f718:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f71e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f722:	d107      	bne.n	800f734 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	699a      	ldr	r2, [r3, #24]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f042 0210 	orr.w	r2, r2, #16
 800f732:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2220      	movs	r2, #32
 800f738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2220      	movs	r2, #32
 800f740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f7fe fd2c 	bl	800e1a8 <HAL_UART_AbortCpltCallback>
 800f750:	e000      	b.n	800f754 <UART_DMATxAbortCallback+0x86>
      return;
 800f752:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f766:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f76e:	2200      	movs	r2, #0
 800f770:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d004      	beq.n	800f784 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f77e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f780:	2b00      	cmp	r3, #0
 800f782:	d126      	bne.n	800f7d2 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2200      	movs	r2, #0
 800f790:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2200      	movs	r2, #0
 800f798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	220f      	movs	r2, #15
 800f7a2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f042 0208 	orr.w	r2, r2, #8
 800f7b2:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2220      	movs	r2, #32
 800f7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2220      	movs	r2, #32
 800f7c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7fe fcec 	bl	800e1a8 <HAL_UART_AbortCpltCallback>
 800f7d0:	e000      	b.n	800f7d4 <UART_DMARxAbortCallback+0x7a>
      return;
 800f7d2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b088      	sub	sp, #32
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	e853 3f00 	ldrex	r3, [r3]
 800f7ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7f6:	61fb      	str	r3, [r7, #28]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	61bb      	str	r3, [r7, #24]
 800f802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f804:	6979      	ldr	r1, [r7, #20]
 800f806:	69ba      	ldr	r2, [r7, #24]
 800f808:	e841 2300 	strex	r3, r2, [r1]
 800f80c:	613b      	str	r3, [r7, #16]
   return(result);
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1e6      	bne.n	800f7e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2220      	movs	r2, #32
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7fe fca2 	bl	800e16c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f828:	bf00      	nop
 800f82a:	3720      	adds	r7, #32
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d101      	bne.n	800f882 <HAL_UARTEx_DisableFifoMode+0x16>
 800f87e:	2302      	movs	r3, #2
 800f880:	e027      	b.n	800f8d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2224      	movs	r2, #36	@ 0x24
 800f88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f022 0201 	bic.w	r2, r2, #1
 800f8a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f8b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2220      	movs	r2, #32
 800f8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3714      	adds	r7, #20
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b084      	sub	sp, #16
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
 800f8e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d101      	bne.n	800f8f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	e02d      	b.n	800f952 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2224      	movs	r2, #36	@ 0x24
 800f902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f022 0201 	bic.w	r2, r2, #1
 800f91c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	430a      	orrs	r2, r1
 800f930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 f850 	bl	800f9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2220      	movs	r2, #32
 800f944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d101      	bne.n	800f972 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f96e:	2302      	movs	r3, #2
 800f970:	e02d      	b.n	800f9ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2224      	movs	r2, #36	@ 0x24
 800f97e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f022 0201 	bic.w	r2, r2, #1
 800f998:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	683a      	ldr	r2, [r7, #0]
 800f9aa:	430a      	orrs	r2, r1
 800f9ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f812 	bl	800f9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d108      	bne.n	800f9fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9f8:	e031      	b.n	800fa5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9fa:	2310      	movs	r3, #16
 800f9fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9fe:	2310      	movs	r3, #16
 800fa00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	0e5b      	lsrs	r3, r3, #25
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	f003 0307 	and.w	r3, r3, #7
 800fa10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	0f5b      	lsrs	r3, r3, #29
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	f003 0307 	and.w	r3, r3, #7
 800fa20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	7b3a      	ldrb	r2, [r7, #12]
 800fa26:	4911      	ldr	r1, [pc, #68]	@ (800fa6c <UARTEx_SetNbDataToProcess+0x94>)
 800fa28:	5c8a      	ldrb	r2, [r1, r2]
 800fa2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fa2e:	7b3a      	ldrb	r2, [r7, #12]
 800fa30:	490f      	ldr	r1, [pc, #60]	@ (800fa70 <UARTEx_SetNbDataToProcess+0x98>)
 800fa32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa40:	7bfb      	ldrb	r3, [r7, #15]
 800fa42:	7b7a      	ldrb	r2, [r7, #13]
 800fa44:	4909      	ldr	r1, [pc, #36]	@ (800fa6c <UARTEx_SetNbDataToProcess+0x94>)
 800fa46:	5c8a      	ldrb	r2, [r1, r2]
 800fa48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa4c:	7b7a      	ldrb	r2, [r7, #13]
 800fa4e:	4908      	ldr	r1, [pc, #32]	@ (800fa70 <UARTEx_SetNbDataToProcess+0x98>)
 800fa50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa52:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fa5e:	bf00      	nop
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	08014b3c 	.word	0x08014b3c
 800fa70:	08014b44 	.word	0x08014b44

0800fa74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fa78:	4904      	ldr	r1, [pc, #16]	@ (800fa8c <MX_FATFS_Init+0x18>)
 800fa7a:	4805      	ldr	r0, [pc, #20]	@ (800fa90 <MX_FATFS_Init+0x1c>)
 800fa7c:	f004 fd9e 	bl	80145bc <FATFS_LinkDriver>
 800fa80:	4603      	mov	r3, r0
 800fa82:	461a      	mov	r2, r3
 800fa84:	4b03      	ldr	r3, [pc, #12]	@ (800fa94 <MX_FATFS_Init+0x20>)
 800fa86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa88:	bf00      	nop
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	24004bc0 	.word	0x24004bc0
 800fa90:	240000d0 	.word	0x240000d0
 800fa94:	24004bbc 	.word	0x24004bbc

0800fa98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fa9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 f9fd 	bl	800feb4 <SD_disk_initialize>
 800faba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800face:	79fb      	ldrb	r3, [r7, #7]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fad5 	bl	8010080 <SD_disk_status>
 800fad6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	607a      	str	r2, [r7, #4]
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800faf0:	7bf8      	ldrb	r0, [r7, #15]
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	68b9      	ldr	r1, [r7, #8]
 800faf8:	f000 fad8 	bl	80100ac <SD_disk_read>
 800fafc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b084      	sub	sp, #16
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
 800fb12:	4603      	mov	r3, r0
 800fb14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800fb16:	7bf8      	ldrb	r0, [r7, #15]
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	68b9      	ldr	r1, [r7, #8]
 800fb1e:	f000 fb2f 	bl	8010180 <SD_disk_write>
 800fb22:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	4603      	mov	r3, r0
 800fb34:	603a      	str	r2, [r7, #0]
 800fb36:	71fb      	strb	r3, [r7, #7]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800fb3c:	79b9      	ldrb	r1, [r7, #6]
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fba0 	bl	8010288 <SD_disk_ioctl>
 800fb48:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3708      	adds	r7, #8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
	...

0800fb54 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800fb58:	2200      	movs	r2, #0
 800fb5a:	2110      	movs	r1, #16
 800fb5c:	4802      	ldr	r0, [pc, #8]	@ (800fb68 <SELECT+0x14>)
 800fb5e:	f7f8 fb51 	bl	8008204 <HAL_GPIO_WritePin>
}
 800fb62:	bf00      	nop
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	58020000 	.word	0x58020000

0800fb6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800fb70:	2201      	movs	r2, #1
 800fb72:	2110      	movs	r1, #16
 800fb74:	4802      	ldr	r0, [pc, #8]	@ (800fb80 <DESELECT+0x14>)
 800fb76:	f7f8 fb45 	bl	8008204 <HAL_GPIO_WritePin>
}
 800fb7a:	bf00      	nop
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	58020000 	.word	0x58020000

0800fb84 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fb8e:	bf00      	nop
 800fb90:	4b08      	ldr	r3, [pc, #32]	@ (800fbb4 <SPI_TxByte+0x30>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d1f8      	bne.n	800fb90 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800fb9e:	1df9      	adds	r1, r7, #7
 800fba0:	2364      	movs	r3, #100	@ 0x64
 800fba2:	2201      	movs	r2, #1
 800fba4:	4803      	ldr	r0, [pc, #12]	@ (800fbb4 <SPI_TxByte+0x30>)
 800fba6:	f7fb fb77 	bl	800b298 <HAL_SPI_Transmit>
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	240045a0 	.word	0x240045a0

0800fbb8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fbc4:	bf00      	nop
 800fbc6:	4b08      	ldr	r3, [pc, #32]	@ (800fbe8 <SPI_TxBuffer+0x30>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	695b      	ldr	r3, [r3, #20]
 800fbcc:	f003 0302 	and.w	r3, r3, #2
 800fbd0:	2b02      	cmp	r3, #2
 800fbd2:	d1f8      	bne.n	800fbc6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800fbd4:	887a      	ldrh	r2, [r7, #2]
 800fbd6:	2364      	movs	r3, #100	@ 0x64
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	4803      	ldr	r0, [pc, #12]	@ (800fbe8 <SPI_TxBuffer+0x30>)
 800fbdc:	f7fb fb5c 	bl	800b298 <HAL_SPI_Transmit>
}
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	240045a0 	.word	0x240045a0

0800fbec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800fbf2:	23ff      	movs	r3, #255	@ 0xff
 800fbf4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fbf6:	bf00      	nop
 800fbf8:	4b09      	ldr	r3, [pc, #36]	@ (800fc20 <SPI_RxByte+0x34>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	f003 0302 	and.w	r3, r3, #2
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d1f8      	bne.n	800fbf8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800fc06:	1dba      	adds	r2, r7, #6
 800fc08:	1df9      	adds	r1, r7, #7
 800fc0a:	2364      	movs	r3, #100	@ 0x64
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	2301      	movs	r3, #1
 800fc10:	4803      	ldr	r0, [pc, #12]	@ (800fc20 <SPI_RxByte+0x34>)
 800fc12:	f7fb ffa1 	bl	800bb58 <HAL_SPI_TransmitReceive>
  return data;
 800fc16:	79bb      	ldrb	r3, [r7, #6]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	240045a0 	.word	0x240045a0

0800fc24 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800fc2c:	f7ff ffde 	bl	800fbec <SPI_RxByte>
 800fc30:	4603      	mov	r3, r0
 800fc32:	461a      	mov	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	701a      	strb	r2, [r3, #0]
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800fc46:	4b0a      	ldr	r3, [pc, #40]	@ (800fc70 <SD_ReadyWait+0x30>)
 800fc48:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fc4c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800fc4e:	f7ff ffcd 	bl	800fbec <SPI_RxByte>
 800fc52:	4603      	mov	r3, r0
 800fc54:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800fc56:	79fb      	ldrb	r3, [r7, #7]
 800fc58:	2bff      	cmp	r3, #255	@ 0xff
 800fc5a:	d003      	beq.n	800fc64 <SD_ReadyWait+0x24>
 800fc5c:	4b04      	ldr	r3, [pc, #16]	@ (800fc70 <SD_ReadyWait+0x30>)
 800fc5e:	881b      	ldrh	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1f4      	bne.n	800fc4e <SD_ReadyWait+0xe>
  return res;
 800fc64:	79fb      	ldrb	r3, [r7, #7]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	24004bc6 	.word	0x24004bc6

0800fc74 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800fc7a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800fc7e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800fc80:	f7ff ff74 	bl	800fb6c <DESELECT>
  for(int i = 0; i < 10; i++)
 800fc84:	2300      	movs	r3, #0
 800fc86:	60bb      	str	r3, [r7, #8]
 800fc88:	e005      	b.n	800fc96 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800fc8a:	20ff      	movs	r0, #255	@ 0xff
 800fc8c:	f7ff ff7a 	bl	800fb84 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	3301      	adds	r3, #1
 800fc94:	60bb      	str	r3, [r7, #8]
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b09      	cmp	r3, #9
 800fc9a:	ddf6      	ble.n	800fc8a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800fc9c:	f7ff ff5a 	bl	800fb54 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800fca0:	2340      	movs	r3, #64	@ 0x40
 800fca2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800fca4:	2300      	movs	r3, #0
 800fca6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800fcb4:	2395      	movs	r3, #149	@ 0x95
 800fcb6:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800fcb8:	463b      	mov	r3, r7
 800fcba:	2106      	movs	r1, #6
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff ff7b 	bl	800fbb8 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800fcc2:	e002      	b.n	800fcca <SD_PowerOn+0x56>
  {
    cnt--;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800fcca:	f7ff ff8f 	bl	800fbec <SPI_RxByte>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d002      	beq.n	800fcda <SD_PowerOn+0x66>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1f4      	bne.n	800fcc4 <SD_PowerOn+0x50>
  }
  DESELECT();
 800fcda:	f7ff ff47 	bl	800fb6c <DESELECT>
  SPI_TxByte(0XFF);
 800fcde:	20ff      	movs	r0, #255	@ 0xff
 800fce0:	f7ff ff50 	bl	800fb84 <SPI_TxByte>
  PowerFlag = 1;
 800fce4:	4b03      	ldr	r3, [pc, #12]	@ (800fcf4 <SD_PowerOn+0x80>)
 800fce6:	2201      	movs	r2, #1
 800fce8:	701a      	strb	r2, [r3, #0]
}
 800fcea:	bf00      	nop
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	24004bc9 	.word	0x24004bc9

0800fcf8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800fcfc:	4b03      	ldr	r3, [pc, #12]	@ (800fd0c <SD_PowerOff+0x14>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	701a      	strb	r2, [r3, #0]
}
 800fd02:	bf00      	nop
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	24004bc9 	.word	0x24004bc9

0800fd10 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800fd10:	b480      	push	{r7}
 800fd12:	af00      	add	r7, sp, #0
  return PowerFlag;
 800fd14:	4b03      	ldr	r3, [pc, #12]	@ (800fd24 <SD_CheckPower+0x14>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	24004bc9 	.word	0x24004bc9

0800fd28 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800fd32:	4b13      	ldr	r3, [pc, #76]	@ (800fd80 <SD_RxDataBlock+0x58>)
 800fd34:	22c8      	movs	r2, #200	@ 0xc8
 800fd36:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800fd38:	f7ff ff58 	bl	800fbec <SPI_RxByte>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
 800fd42:	2bff      	cmp	r3, #255	@ 0xff
 800fd44:	d103      	bne.n	800fd4e <SD_RxDataBlock+0x26>
 800fd46:	4b0e      	ldr	r3, [pc, #56]	@ (800fd80 <SD_RxDataBlock+0x58>)
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d1f4      	bne.n	800fd38 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd52:	d001      	beq.n	800fd58 <SD_RxDataBlock+0x30>
 800fd54:	2300      	movs	r3, #0
 800fd56:	e00f      	b.n	800fd78 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	1c5a      	adds	r2, r3, #1
 800fd5c:	607a      	str	r2, [r7, #4]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff ff60 	bl	800fc24 <SPI_RxBytePtr>
  } while(len--);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	1e5a      	subs	r2, r3, #1
 800fd68:	603a      	str	r2, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d1f4      	bne.n	800fd58 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800fd6e:	f7ff ff3d 	bl	800fbec <SPI_RxByte>
  SPI_RxByte();
 800fd72:	f7ff ff3b 	bl	800fbec <SPI_RxByte>
  return TRUE;
 800fd76:	2301      	movs	r3, #1
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	24004bc4 	.word	0x24004bc4

0800fd84 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800fd94:	f7ff ff54 	bl	800fc40 <SD_ReadyWait>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2bff      	cmp	r3, #255	@ 0xff
 800fd9c:	d001      	beq.n	800fda2 <SD_TxDataBlock+0x1e>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e02f      	b.n	800fe02 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff feed 	bl	800fb84 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	2bfd      	cmp	r3, #253	@ 0xfd
 800fdae:	d020      	beq.n	800fdf2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800fdb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff feff 	bl	800fbb8 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800fdba:	f7ff ff17 	bl	800fbec <SPI_RxByte>
    SPI_RxByte();
 800fdbe:	f7ff ff15 	bl	800fbec <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800fdc2:	e00b      	b.n	800fddc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800fdc4:	f7ff ff12 	bl	800fbec <SPI_RxByte>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	f003 031f 	and.w	r3, r3, #31
 800fdd2:	2b05      	cmp	r3, #5
 800fdd4:	d006      	beq.n	800fde4 <SD_TxDataBlock+0x60>
      i++;
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800fddc:	7bbb      	ldrb	r3, [r7, #14]
 800fdde:	2b40      	cmp	r3, #64	@ 0x40
 800fde0:	d9f0      	bls.n	800fdc4 <SD_TxDataBlock+0x40>
 800fde2:	e000      	b.n	800fde6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800fde4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800fde6:	bf00      	nop
 800fde8:	f7ff ff00 	bl	800fbec <SPI_RxByte>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d0fa      	beq.n	800fde8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	f003 031f 	and.w	r3, r3, #31
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	d101      	bne.n	800fe00 <SD_TxDataBlock+0x7c>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e000      	b.n	800fe02 <SD_TxDataBlock+0x7e>

  return FALSE;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	4603      	mov	r3, r0
 800fe12:	6039      	str	r1, [r7, #0]
 800fe14:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800fe16:	f7ff ff13 	bl	800fc40 <SD_ReadyWait>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2bff      	cmp	r3, #255	@ 0xff
 800fe1e:	d001      	beq.n	800fe24 <SD_SendCmd+0x1a>
 800fe20:	23ff      	movs	r3, #255	@ 0xff
 800fe22:	e042      	b.n	800feaa <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff feac 	bl	800fb84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	0e1b      	lsrs	r3, r3, #24
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7ff fea6 	bl	800fb84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	0c1b      	lsrs	r3, r3, #16
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff fea0 	bl	800fb84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	0a1b      	lsrs	r3, r3, #8
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7ff fe9a 	bl	800fb84 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7ff fe95 	bl	800fb84 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800fe5a:	79fb      	ldrb	r3, [r7, #7]
 800fe5c:	2b40      	cmp	r3, #64	@ 0x40
 800fe5e:	d102      	bne.n	800fe66 <SD_SendCmd+0x5c>
 800fe60:	2395      	movs	r3, #149	@ 0x95
 800fe62:	73fb      	strb	r3, [r7, #15]
 800fe64:	e007      	b.n	800fe76 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800fe66:	79fb      	ldrb	r3, [r7, #7]
 800fe68:	2b48      	cmp	r3, #72	@ 0x48
 800fe6a:	d102      	bne.n	800fe72 <SD_SendCmd+0x68>
 800fe6c:	2387      	movs	r3, #135	@ 0x87
 800fe6e:	73fb      	strb	r3, [r7, #15]
 800fe70:	e001      	b.n	800fe76 <SD_SendCmd+0x6c>
  else crc = 1;
 800fe72:	2301      	movs	r3, #1
 800fe74:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff fe83 	bl	800fb84 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	2b4c      	cmp	r3, #76	@ 0x4c
 800fe82:	d101      	bne.n	800fe88 <SD_SendCmd+0x7e>
 800fe84:	f7ff feb2 	bl	800fbec <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800fe88:	230a      	movs	r3, #10
 800fe8a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800fe8c:	f7ff feae 	bl	800fbec <SPI_RxByte>
 800fe90:	4603      	mov	r3, r0
 800fe92:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800fe94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	da05      	bge.n	800fea8 <SD_SendCmd+0x9e>
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	73bb      	strb	r3, [r7, #14]
 800fea2:	7bbb      	ldrb	r3, [r7, #14]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1f1      	bne.n	800fe8c <SD_SendCmd+0x82>

  return res;
 800fea8:	7b7b      	ldrb	r3, [r7, #13]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
	...

0800feb4 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800feb4:	b590      	push	{r4, r7, lr}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
 800feba:	4603      	mov	r3, r0
 800febc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <SD_disk_initialize+0x14>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e0d1      	b.n	801006c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800fec8:	4b6a      	ldr	r3, [pc, #424]	@ (8010074 <SD_disk_initialize+0x1c0>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	f003 0302 	and.w	r3, r3, #2
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <SD_disk_initialize+0x2a>
 800fed6:	4b67      	ldr	r3, [pc, #412]	@ (8010074 <SD_disk_initialize+0x1c0>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	e0c6      	b.n	801006c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800fede:	f7ff fec9 	bl	800fc74 <SD_PowerOn>
  /* slave select */
  SELECT();
 800fee2:	f7ff fe37 	bl	800fb54 <SELECT>
  /* check disk type */
  type = 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800feea:	2100      	movs	r1, #0
 800feec:	2040      	movs	r0, #64	@ 0x40
 800feee:	f7ff ff8c 	bl	800fe0a <SD_SendCmd>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	f040 80a1 	bne.w	801003c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800fefa:	4b5f      	ldr	r3, [pc, #380]	@ (8010078 <SD_disk_initialize+0x1c4>)
 800fefc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff00:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ff02:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ff06:	2048      	movs	r0, #72	@ 0x48
 800ff08:	f7ff ff7f 	bl	800fe0a <SD_SendCmd>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d155      	bne.n	800ffbe <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800ff12:	2300      	movs	r3, #0
 800ff14:	73fb      	strb	r3, [r7, #15]
 800ff16:	e00c      	b.n	800ff32 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800ff18:	7bfc      	ldrb	r4, [r7, #15]
 800ff1a:	f7ff fe67 	bl	800fbec <SPI_RxByte>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	461a      	mov	r2, r3
 800ff22:	f104 0310 	add.w	r3, r4, #16
 800ff26:	443b      	add	r3, r7
 800ff28:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	73fb      	strb	r3, [r7, #15]
 800ff32:	7bfb      	ldrb	r3, [r7, #15]
 800ff34:	2b03      	cmp	r3, #3
 800ff36:	d9ef      	bls.n	800ff18 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800ff38:	7abb      	ldrb	r3, [r7, #10]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d17e      	bne.n	801003c <SD_disk_initialize+0x188>
 800ff3e:	7afb      	ldrb	r3, [r7, #11]
 800ff40:	2baa      	cmp	r3, #170	@ 0xaa
 800ff42:	d17b      	bne.n	801003c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ff44:	2100      	movs	r1, #0
 800ff46:	2077      	movs	r0, #119	@ 0x77
 800ff48:	f7ff ff5f 	bl	800fe0a <SD_SendCmd>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d807      	bhi.n	800ff62 <SD_disk_initialize+0xae>
 800ff52:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ff56:	2069      	movs	r0, #105	@ 0x69
 800ff58:	f7ff ff57 	bl	800fe0a <SD_SendCmd>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d004      	beq.n	800ff6c <SD_disk_initialize+0xb8>
        } while (Timer1);
 800ff62:	4b45      	ldr	r3, [pc, #276]	@ (8010078 <SD_disk_initialize+0x1c4>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1ec      	bne.n	800ff44 <SD_disk_initialize+0x90>
 800ff6a:	e000      	b.n	800ff6e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ff6c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800ff6e:	4b42      	ldr	r3, [pc, #264]	@ (8010078 <SD_disk_initialize+0x1c4>)
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d062      	beq.n	801003c <SD_disk_initialize+0x188>
 800ff76:	2100      	movs	r1, #0
 800ff78:	207a      	movs	r0, #122	@ 0x7a
 800ff7a:	f7ff ff46 	bl	800fe0a <SD_SendCmd>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d15b      	bne.n	801003c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800ff84:	2300      	movs	r3, #0
 800ff86:	73fb      	strb	r3, [r7, #15]
 800ff88:	e00c      	b.n	800ffa4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800ff8a:	7bfc      	ldrb	r4, [r7, #15]
 800ff8c:	f7ff fe2e 	bl	800fbec <SPI_RxByte>
 800ff90:	4603      	mov	r3, r0
 800ff92:	461a      	mov	r2, r3
 800ff94:	f104 0310 	add.w	r3, r4, #16
 800ff98:	443b      	add	r3, r7
 800ff9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800ff9e:	7bfb      	ldrb	r3, [r7, #15]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	73fb      	strb	r3, [r7, #15]
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d9ef      	bls.n	800ff8a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800ffaa:	7a3b      	ldrb	r3, [r7, #8]
 800ffac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <SD_disk_initialize+0x104>
 800ffb4:	230c      	movs	r3, #12
 800ffb6:	e000      	b.n	800ffba <SD_disk_initialize+0x106>
 800ffb8:	2304      	movs	r3, #4
 800ffba:	73bb      	strb	r3, [r7, #14]
 800ffbc:	e03e      	b.n	801003c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	2077      	movs	r0, #119	@ 0x77
 800ffc2:	f7ff ff22 	bl	800fe0a <SD_SendCmd>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d808      	bhi.n	800ffde <SD_disk_initialize+0x12a>
 800ffcc:	2100      	movs	r1, #0
 800ffce:	2069      	movs	r0, #105	@ 0x69
 800ffd0:	f7ff ff1b 	bl	800fe0a <SD_SendCmd>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d801      	bhi.n	800ffde <SD_disk_initialize+0x12a>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e000      	b.n	800ffe0 <SD_disk_initialize+0x12c>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800ffe2:	7bbb      	ldrb	r3, [r7, #14]
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d10e      	bne.n	8010006 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800ffe8:	2100      	movs	r1, #0
 800ffea:	2077      	movs	r0, #119	@ 0x77
 800ffec:	f7ff ff0d 	bl	800fe0a <SD_SendCmd>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d80e      	bhi.n	8010014 <SD_disk_initialize+0x160>
 800fff6:	2100      	movs	r1, #0
 800fff8:	2069      	movs	r0, #105	@ 0x69
 800fffa:	f7ff ff06 	bl	800fe0a <SD_SendCmd>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d107      	bne.n	8010014 <SD_disk_initialize+0x160>
 8010004:	e00c      	b.n	8010020 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8010006:	2100      	movs	r1, #0
 8010008:	2041      	movs	r0, #65	@ 0x41
 801000a:	f7ff fefe 	bl	800fe0a <SD_SendCmd>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d004      	beq.n	801001e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8010014:	4b18      	ldr	r3, [pc, #96]	@ (8010078 <SD_disk_initialize+0x1c4>)
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1e2      	bne.n	800ffe2 <SD_disk_initialize+0x12e>
 801001c:	e000      	b.n	8010020 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801001e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8010020:	4b15      	ldr	r3, [pc, #84]	@ (8010078 <SD_disk_initialize+0x1c4>)
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d007      	beq.n	8010038 <SD_disk_initialize+0x184>
 8010028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801002c:	2050      	movs	r0, #80	@ 0x50
 801002e:	f7ff feec 	bl	800fe0a <SD_SendCmd>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <SD_disk_initialize+0x188>
 8010038:	2300      	movs	r3, #0
 801003a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 801003c:	4a0f      	ldr	r2, [pc, #60]	@ (801007c <SD_disk_initialize+0x1c8>)
 801003e:	7bbb      	ldrb	r3, [r7, #14]
 8010040:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8010042:	f7ff fd93 	bl	800fb6c <DESELECT>
  SPI_RxByte();
 8010046:	f7ff fdd1 	bl	800fbec <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801004a:	7bbb      	ldrb	r3, [r7, #14]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d008      	beq.n	8010062 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8010050:	4b08      	ldr	r3, [pc, #32]	@ (8010074 <SD_disk_initialize+0x1c0>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	f023 0301 	bic.w	r3, r3, #1
 801005a:	b2da      	uxtb	r2, r3
 801005c:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <SD_disk_initialize+0x1c0>)
 801005e:	701a      	strb	r2, [r3, #0]
 8010060:	e001      	b.n	8010066 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8010062:	f7ff fe49 	bl	800fcf8 <SD_PowerOff>
  }
  return Stat;
 8010066:	4b03      	ldr	r3, [pc, #12]	@ (8010074 <SD_disk_initialize+0x1c0>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	b2db      	uxtb	r3, r3
}
 801006c:	4618      	mov	r0, r3
 801006e:	3714      	adds	r7, #20
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	240000e4 	.word	0x240000e4
 8010078:	24004bc4 	.word	0x24004bc4
 801007c:	24004bc8 	.word	0x24004bc8

08010080 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	4603      	mov	r3, r0
 8010088:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801008a:	79fb      	ldrb	r3, [r7, #7]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <SD_disk_status+0x14>
 8010090:	2301      	movs	r3, #1
 8010092:	e002      	b.n	801009a <SD_disk_status+0x1a>
  return Stat;
 8010094:	4b04      	ldr	r3, [pc, #16]	@ (80100a8 <SD_disk_status+0x28>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	b2db      	uxtb	r3, r3
}
 801009a:	4618      	mov	r0, r3
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	240000e4 	.word	0x240000e4

080100ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
 80100b6:	603b      	str	r3, [r7, #0]
 80100b8:	4603      	mov	r3, r0
 80100ba:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d102      	bne.n	80100c8 <SD_disk_read+0x1c>
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <SD_disk_read+0x20>
 80100c8:	2304      	movs	r3, #4
 80100ca:	e051      	b.n	8010170 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80100cc:	4b2a      	ldr	r3, [pc, #168]	@ (8010178 <SD_disk_read+0xcc>)
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	f003 0301 	and.w	r3, r3, #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <SD_disk_read+0x32>
 80100da:	2303      	movs	r3, #3
 80100dc:	e048      	b.n	8010170 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80100de:	4b27      	ldr	r3, [pc, #156]	@ (801017c <SD_disk_read+0xd0>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	f003 0304 	and.w	r3, r3, #4
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d102      	bne.n	80100f0 <SD_disk_read+0x44>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	025b      	lsls	r3, r3, #9
 80100ee:	607b      	str	r3, [r7, #4]

  SELECT();
 80100f0:	f7ff fd30 	bl	800fb54 <SELECT>

  if (count == 1)
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d111      	bne.n	801011e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	2051      	movs	r0, #81	@ 0x51
 80100fe:	f7ff fe84 	bl	800fe0a <SD_SendCmd>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d129      	bne.n	801015c <SD_disk_read+0xb0>
 8010108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801010c:	68b8      	ldr	r0, [r7, #8]
 801010e:	f7ff fe0b 	bl	800fd28 <SD_RxDataBlock>
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d021      	beq.n	801015c <SD_disk_read+0xb0>
 8010118:	2300      	movs	r3, #0
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	e01e      	b.n	801015c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	2052      	movs	r0, #82	@ 0x52
 8010122:	f7ff fe72 	bl	800fe0a <SD_SendCmd>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d117      	bne.n	801015c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 801012c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010130:	68b8      	ldr	r0, [r7, #8]
 8010132:	f7ff fdf9 	bl	800fd28 <SD_RxDataBlock>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00a      	beq.n	8010152 <SD_disk_read+0xa6>
        buff += 512;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010142:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	3b01      	subs	r3, #1
 8010148:	603b      	str	r3, [r7, #0]
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1ed      	bne.n	801012c <SD_disk_read+0x80>
 8010150:	e000      	b.n	8010154 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8010152:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8010154:	2100      	movs	r1, #0
 8010156:	204c      	movs	r0, #76	@ 0x4c
 8010158:	f7ff fe57 	bl	800fe0a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801015c:	f7ff fd06 	bl	800fb6c <DESELECT>
  SPI_RxByte();
 8010160:	f7ff fd44 	bl	800fbec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	bf14      	ite	ne
 801016a:	2301      	movne	r3, #1
 801016c:	2300      	moveq	r3, #0
 801016e:	b2db      	uxtb	r3, r3
}
 8010170:	4618      	mov	r0, r3
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	240000e4 	.word	0x240000e4
 801017c:	24004bc8 	.word	0x24004bc8

08010180 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	60b9      	str	r1, [r7, #8]
 8010188:	607a      	str	r2, [r7, #4]
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	4603      	mov	r3, r0
 801018e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8010190:	7bfb      	ldrb	r3, [r7, #15]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d102      	bne.n	801019c <SD_disk_write+0x1c>
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <SD_disk_write+0x20>
 801019c:	2304      	movs	r3, #4
 801019e:	e06b      	b.n	8010278 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80101a0:	4b37      	ldr	r3, [pc, #220]	@ (8010280 <SD_disk_write+0x100>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	f003 0301 	and.w	r3, r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <SD_disk_write+0x32>
 80101ae:	2303      	movs	r3, #3
 80101b0:	e062      	b.n	8010278 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80101b2:	4b33      	ldr	r3, [pc, #204]	@ (8010280 <SD_disk_write+0x100>)
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0304 	and.w	r3, r3, #4
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <SD_disk_write+0x44>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e059      	b.n	8010278 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80101c4:	4b2f      	ldr	r3, [pc, #188]	@ (8010284 <SD_disk_write+0x104>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	f003 0304 	and.w	r3, r3, #4
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d102      	bne.n	80101d6 <SD_disk_write+0x56>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	025b      	lsls	r3, r3, #9
 80101d4:	607b      	str	r3, [r7, #4]

  SELECT();
 80101d6:	f7ff fcbd 	bl	800fb54 <SELECT>

  if (count == 1)
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d110      	bne.n	8010202 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80101e0:	6879      	ldr	r1, [r7, #4]
 80101e2:	2058      	movs	r0, #88	@ 0x58
 80101e4:	f7ff fe11 	bl	800fe0a <SD_SendCmd>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d13a      	bne.n	8010264 <SD_disk_write+0xe4>
 80101ee:	21fe      	movs	r1, #254	@ 0xfe
 80101f0:	68b8      	ldr	r0, [r7, #8]
 80101f2:	f7ff fdc7 	bl	800fd84 <SD_TxDataBlock>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d033      	beq.n	8010264 <SD_disk_write+0xe4>
      count = 0;
 80101fc:	2300      	movs	r3, #0
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	e030      	b.n	8010264 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8010202:	4b20      	ldr	r3, [pc, #128]	@ (8010284 <SD_disk_write+0x104>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	f003 0302 	and.w	r3, r3, #2
 801020a:	2b00      	cmp	r3, #0
 801020c:	d007      	beq.n	801021e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 801020e:	2100      	movs	r1, #0
 8010210:	2077      	movs	r0, #119	@ 0x77
 8010212:	f7ff fdfa 	bl	800fe0a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8010216:	6839      	ldr	r1, [r7, #0]
 8010218:	2057      	movs	r0, #87	@ 0x57
 801021a:	f7ff fdf6 	bl	800fe0a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 801021e:	6879      	ldr	r1, [r7, #4]
 8010220:	2059      	movs	r0, #89	@ 0x59
 8010222:	f7ff fdf2 	bl	800fe0a <SD_SendCmd>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d11b      	bne.n	8010264 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 801022c:	21fc      	movs	r1, #252	@ 0xfc
 801022e:	68b8      	ldr	r0, [r7, #8]
 8010230:	f7ff fda8 	bl	800fd84 <SD_TxDataBlock>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00a      	beq.n	8010250 <SD_disk_write+0xd0>
        buff += 512;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010240:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	3b01      	subs	r3, #1
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1ee      	bne.n	801022c <SD_disk_write+0xac>
 801024e:	e000      	b.n	8010252 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8010250:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8010252:	21fd      	movs	r1, #253	@ 0xfd
 8010254:	2000      	movs	r0, #0
 8010256:	f7ff fd95 	bl	800fd84 <SD_TxDataBlock>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d101      	bne.n	8010264 <SD_disk_write+0xe4>
      {
        count = 1;
 8010260:	2301      	movs	r3, #1
 8010262:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8010264:	f7ff fc82 	bl	800fb6c <DESELECT>
  SPI_RxByte();
 8010268:	f7ff fcc0 	bl	800fbec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	bf14      	ite	ne
 8010272:	2301      	movne	r3, #1
 8010274:	2300      	moveq	r3, #0
 8010276:	b2db      	uxtb	r3, r3
}
 8010278:	4618      	mov	r0, r3
 801027a:	3710      	adds	r7, #16
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	240000e4 	.word	0x240000e4
 8010284:	24004bc8 	.word	0x24004bc8

08010288 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b08b      	sub	sp, #44	@ 0x2c
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	603a      	str	r2, [r7, #0]
 8010292:	71fb      	strb	r3, [r7, #7]
 8010294:	460b      	mov	r3, r1
 8010296:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <SD_disk_ioctl+0x1e>
 80102a2:	2304      	movs	r3, #4
 80102a4:	e113      	b.n	80104ce <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80102ac:	79bb      	ldrb	r3, [r7, #6]
 80102ae:	2b05      	cmp	r3, #5
 80102b0:	d124      	bne.n	80102fc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80102b2:	6a3b      	ldr	r3, [r7, #32]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	d012      	beq.n	80102e0 <SD_disk_ioctl+0x58>
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	dc1a      	bgt.n	80102f4 <SD_disk_ioctl+0x6c>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d002      	beq.n	80102c8 <SD_disk_ioctl+0x40>
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d006      	beq.n	80102d4 <SD_disk_ioctl+0x4c>
 80102c6:	e015      	b.n	80102f4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80102c8:	f7ff fd16 	bl	800fcf8 <SD_PowerOff>
      res = RES_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80102d2:	e0fa      	b.n	80104ca <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80102d4:	f7ff fcce 	bl	800fc74 <SD_PowerOn>
      res = RES_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80102de:	e0f4      	b.n	80104ca <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	1c5c      	adds	r4, r3, #1
 80102e4:	f7ff fd14 	bl	800fd10 <SD_CheckPower>
 80102e8:	4603      	mov	r3, r0
 80102ea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80102ec:	2300      	movs	r3, #0
 80102ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80102f2:	e0ea      	b.n	80104ca <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80102f4:	2304      	movs	r3, #4
 80102f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102fa:	e0e6      	b.n	80104ca <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80102fc:	4b76      	ldr	r3, [pc, #472]	@ (80104d8 <SD_disk_ioctl+0x250>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	b2db      	uxtb	r3, r3
 8010302:	f003 0301 	and.w	r3, r3, #1
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 801030a:	2303      	movs	r3, #3
 801030c:	e0df      	b.n	80104ce <SD_disk_ioctl+0x246>
    }
    SELECT();
 801030e:	f7ff fc21 	bl	800fb54 <SELECT>
    switch (ctrl)
 8010312:	79bb      	ldrb	r3, [r7, #6]
 8010314:	2b0d      	cmp	r3, #13
 8010316:	f200 80c9 	bhi.w	80104ac <SD_disk_ioctl+0x224>
 801031a:	a201      	add	r2, pc, #4	@ (adr r2, 8010320 <SD_disk_ioctl+0x98>)
 801031c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010320:	08010417 	.word	0x08010417
 8010324:	08010359 	.word	0x08010359
 8010328:	08010407 	.word	0x08010407
 801032c:	080104ad 	.word	0x080104ad
 8010330:	080104ad 	.word	0x080104ad
 8010334:	080104ad 	.word	0x080104ad
 8010338:	080104ad 	.word	0x080104ad
 801033c:	080104ad 	.word	0x080104ad
 8010340:	080104ad 	.word	0x080104ad
 8010344:	080104ad 	.word	0x080104ad
 8010348:	080104ad 	.word	0x080104ad
 801034c:	08010429 	.word	0x08010429
 8010350:	0801044d 	.word	0x0801044d
 8010354:	08010471 	.word	0x08010471
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8010358:	2100      	movs	r1, #0
 801035a:	2049      	movs	r0, #73	@ 0x49
 801035c:	f7ff fd55 	bl	800fe0a <SD_SendCmd>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 80a6 	bne.w	80104b4 <SD_disk_ioctl+0x22c>
 8010368:	f107 030c 	add.w	r3, r7, #12
 801036c:	2110      	movs	r1, #16
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff fcda 	bl	800fd28 <SD_RxDataBlock>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	f000 809c 	beq.w	80104b4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 801037c:	7b3b      	ldrb	r3, [r7, #12]
 801037e:	099b      	lsrs	r3, r3, #6
 8010380:	b2db      	uxtb	r3, r3
 8010382:	2b01      	cmp	r3, #1
 8010384:	d10d      	bne.n	80103a2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8010386:	7d7b      	ldrb	r3, [r7, #21]
 8010388:	461a      	mov	r2, r3
 801038a:	7d3b      	ldrb	r3, [r7, #20]
 801038c:	021b      	lsls	r3, r3, #8
 801038e:	b29b      	uxth	r3, r3
 8010390:	4413      	add	r3, r2
 8010392:	b29b      	uxth	r3, r3
 8010394:	3301      	adds	r3, #1
 8010396:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8010398:	8bfb      	ldrh	r3, [r7, #30]
 801039a:	029a      	lsls	r2, r3, #10
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e02d      	b.n	80103fe <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80103a2:	7c7b      	ldrb	r3, [r7, #17]
 80103a4:	f003 030f 	and.w	r3, r3, #15
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	7dbb      	ldrb	r3, [r7, #22]
 80103ac:	09db      	lsrs	r3, r3, #7
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	4413      	add	r3, r2
 80103b2:	b2da      	uxtb	r2, r3
 80103b4:	7d7b      	ldrb	r3, [r7, #21]
 80103b6:	005b      	lsls	r3, r3, #1
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	f003 0306 	and.w	r3, r3, #6
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	4413      	add	r3, r2
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	3302      	adds	r3, #2
 80103c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80103ca:	7d3b      	ldrb	r3, [r7, #20]
 80103cc:	099b      	lsrs	r3, r3, #6
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	461a      	mov	r2, r3
 80103d2:	7cfb      	ldrb	r3, [r7, #19]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	4413      	add	r3, r2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	7cbb      	ldrb	r3, [r7, #18]
 80103de:	029b      	lsls	r3, r3, #10
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	4413      	add	r3, r2
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	3301      	adds	r3, #1
 80103ee:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80103f0:	8bfa      	ldrh	r2, [r7, #30]
 80103f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103f6:	3b09      	subs	r3, #9
 80103f8:	409a      	lsls	r2, r3
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8010404:	e056      	b.n	80104b4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801040c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8010414:	e055      	b.n	80104c2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8010416:	f7ff fc13 	bl	800fc40 <SD_ReadyWait>
 801041a:	4603      	mov	r3, r0
 801041c:	2bff      	cmp	r3, #255	@ 0xff
 801041e:	d14b      	bne.n	80104b8 <SD_disk_ioctl+0x230>
 8010420:	2300      	movs	r3, #0
 8010422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8010426:	e047      	b.n	80104b8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8010428:	2100      	movs	r1, #0
 801042a:	2049      	movs	r0, #73	@ 0x49
 801042c:	f7ff fced 	bl	800fe0a <SD_SendCmd>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d142      	bne.n	80104bc <SD_disk_ioctl+0x234>
 8010436:	2110      	movs	r1, #16
 8010438:	6a38      	ldr	r0, [r7, #32]
 801043a:	f7ff fc75 	bl	800fd28 <SD_RxDataBlock>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d03b      	beq.n	80104bc <SD_disk_ioctl+0x234>
 8010444:	2300      	movs	r3, #0
 8010446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801044a:	e037      	b.n	80104bc <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801044c:	2100      	movs	r1, #0
 801044e:	204a      	movs	r0, #74	@ 0x4a
 8010450:	f7ff fcdb 	bl	800fe0a <SD_SendCmd>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d132      	bne.n	80104c0 <SD_disk_ioctl+0x238>
 801045a:	2110      	movs	r1, #16
 801045c:	6a38      	ldr	r0, [r7, #32]
 801045e:	f7ff fc63 	bl	800fd28 <SD_RxDataBlock>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d02b      	beq.n	80104c0 <SD_disk_ioctl+0x238>
 8010468:	2300      	movs	r3, #0
 801046a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801046e:	e027      	b.n	80104c0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8010470:	2100      	movs	r1, #0
 8010472:	207a      	movs	r0, #122	@ 0x7a
 8010474:	f7ff fcc9 	bl	800fe0a <SD_SendCmd>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d116      	bne.n	80104ac <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 801047e:	2300      	movs	r3, #0
 8010480:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010484:	e00b      	b.n	801049e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8010486:	6a3c      	ldr	r4, [r7, #32]
 8010488:	1c63      	adds	r3, r4, #1
 801048a:	623b      	str	r3, [r7, #32]
 801048c:	f7ff fbae 	bl	800fbec <SPI_RxByte>
 8010490:	4603      	mov	r3, r0
 8010492:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8010494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010498:	3301      	adds	r3, #1
 801049a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801049e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	d9ef      	bls.n	8010486 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80104a6:	2300      	movs	r3, #0
 80104a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80104ac:	2304      	movs	r3, #4
 80104ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104b2:	e006      	b.n	80104c2 <SD_disk_ioctl+0x23a>
      break;
 80104b4:	bf00      	nop
 80104b6:	e004      	b.n	80104c2 <SD_disk_ioctl+0x23a>
      break;
 80104b8:	bf00      	nop
 80104ba:	e002      	b.n	80104c2 <SD_disk_ioctl+0x23a>
      break;
 80104bc:	bf00      	nop
 80104be:	e000      	b.n	80104c2 <SD_disk_ioctl+0x23a>
      break;
 80104c0:	bf00      	nop
    }
    DESELECT();
 80104c2:	f7ff fb53 	bl	800fb6c <DESELECT>
    SPI_RxByte();
 80104c6:	f7ff fb91 	bl	800fbec <SPI_RxByte>
  }
  return res;
 80104ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	372c      	adds	r7, #44	@ 0x2c
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd90      	pop	{r4, r7, pc}
 80104d6:	bf00      	nop
 80104d8:	240000e4 	.word	0x240000e4

080104dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	4603      	mov	r3, r0
 80104e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80104e6:	79fb      	ldrb	r3, [r7, #7]
 80104e8:	4a08      	ldr	r2, [pc, #32]	@ (801050c <disk_status+0x30>)
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4413      	add	r3, r2
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	79fa      	ldrb	r2, [r7, #7]
 80104f4:	4905      	ldr	r1, [pc, #20]	@ (801050c <disk_status+0x30>)
 80104f6:	440a      	add	r2, r1
 80104f8:	7a12      	ldrb	r2, [r2, #8]
 80104fa:	4610      	mov	r0, r2
 80104fc:	4798      	blx	r3
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010502:	7bfb      	ldrb	r3, [r7, #15]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	24004df4 	.word	0x24004df4

08010510 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	4603      	mov	r3, r0
 8010518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	4a0e      	ldr	r2, [pc, #56]	@ (801055c <disk_initialize+0x4c>)
 8010522:	5cd3      	ldrb	r3, [r2, r3]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d114      	bne.n	8010552 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	4a0c      	ldr	r2, [pc, #48]	@ (801055c <disk_initialize+0x4c>)
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	4413      	add	r3, r2
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	79fa      	ldrb	r2, [r7, #7]
 8010536:	4909      	ldr	r1, [pc, #36]	@ (801055c <disk_initialize+0x4c>)
 8010538:	440a      	add	r2, r1
 801053a:	7a12      	ldrb	r2, [r2, #8]
 801053c:	4610      	mov	r0, r2
 801053e:	4798      	blx	r3
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d103      	bne.n	8010552 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801054a:	79fb      	ldrb	r3, [r7, #7]
 801054c:	4a03      	ldr	r2, [pc, #12]	@ (801055c <disk_initialize+0x4c>)
 801054e:	2101      	movs	r1, #1
 8010550:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010552:	7bfb      	ldrb	r3, [r7, #15]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	24004df4 	.word	0x24004df4

08010560 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b087      	sub	sp, #28
 8010564:	af00      	add	r7, sp, #0
 8010566:	60b9      	str	r1, [r7, #8]
 8010568:	607a      	str	r2, [r7, #4]
 801056a:	603b      	str	r3, [r7, #0]
 801056c:	4603      	mov	r3, r0
 801056e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010570:	7bfb      	ldrb	r3, [r7, #15]
 8010572:	4a0a      	ldr	r2, [pc, #40]	@ (801059c <disk_read+0x3c>)
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4413      	add	r3, r2
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	689c      	ldr	r4, [r3, #8]
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	4a07      	ldr	r2, [pc, #28]	@ (801059c <disk_read+0x3c>)
 8010580:	4413      	add	r3, r2
 8010582:	7a18      	ldrb	r0, [r3, #8]
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	68b9      	ldr	r1, [r7, #8]
 801058a:	47a0      	blx	r4
 801058c:	4603      	mov	r3, r0
 801058e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010590:	7dfb      	ldrb	r3, [r7, #23]
}
 8010592:	4618      	mov	r0, r3
 8010594:	371c      	adds	r7, #28
 8010596:	46bd      	mov	sp, r7
 8010598:	bd90      	pop	{r4, r7, pc}
 801059a:	bf00      	nop
 801059c:	24004df4 	.word	0x24004df4

080105a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80105a0:	b590      	push	{r4, r7, lr}
 80105a2:	b087      	sub	sp, #28
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60b9      	str	r1, [r7, #8]
 80105a8:	607a      	str	r2, [r7, #4]
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	4a0a      	ldr	r2, [pc, #40]	@ (80105dc <disk_write+0x3c>)
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	4413      	add	r3, r2
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	68dc      	ldr	r4, [r3, #12]
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	4a07      	ldr	r2, [pc, #28]	@ (80105dc <disk_write+0x3c>)
 80105c0:	4413      	add	r3, r2
 80105c2:	7a18      	ldrb	r0, [r3, #8]
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	68b9      	ldr	r1, [r7, #8]
 80105ca:	47a0      	blx	r4
 80105cc:	4603      	mov	r3, r0
 80105ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80105d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	371c      	adds	r7, #28
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd90      	pop	{r4, r7, pc}
 80105da:	bf00      	nop
 80105dc:	24004df4 	.word	0x24004df4

080105e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	4603      	mov	r3, r0
 80105e8:	603a      	str	r2, [r7, #0]
 80105ea:	71fb      	strb	r3, [r7, #7]
 80105ec:	460b      	mov	r3, r1
 80105ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	4a09      	ldr	r2, [pc, #36]	@ (8010618 <disk_ioctl+0x38>)
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	79fa      	ldrb	r2, [r7, #7]
 80105fe:	4906      	ldr	r1, [pc, #24]	@ (8010618 <disk_ioctl+0x38>)
 8010600:	440a      	add	r2, r1
 8010602:	7a10      	ldrb	r0, [r2, #8]
 8010604:	79b9      	ldrb	r1, [r7, #6]
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	4798      	blx	r3
 801060a:	4603      	mov	r3, r0
 801060c:	73fb      	strb	r3, [r7, #15]
  return res;
 801060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	24004df4 	.word	0x24004df4

0801061c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	3301      	adds	r3, #1
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801062c:	89fb      	ldrh	r3, [r7, #14]
 801062e:	021b      	lsls	r3, r3, #8
 8010630:	b21a      	sxth	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	b21b      	sxth	r3, r3
 8010638:	4313      	orrs	r3, r2
 801063a:	b21b      	sxth	r3, r3
 801063c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801063e:	89fb      	ldrh	r3, [r7, #14]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	3303      	adds	r3, #3
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	021b      	lsls	r3, r3, #8
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	3202      	adds	r2, #2
 8010664:	7812      	ldrb	r2, [r2, #0]
 8010666:	4313      	orrs	r3, r2
 8010668:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	021b      	lsls	r3, r3, #8
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	3201      	adds	r2, #1
 8010672:	7812      	ldrb	r2, [r2, #0]
 8010674:	4313      	orrs	r3, r2
 8010676:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	021b      	lsls	r3, r3, #8
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	7812      	ldrb	r2, [r2, #0]
 8010680:	4313      	orrs	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
	return rv;
 8010684:	68fb      	ldr	r3, [r7, #12]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3714      	adds	r7, #20
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010692:	b480      	push	{r7}
 8010694:	b083      	sub	sp, #12
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	460b      	mov	r3, r1
 801069c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	1c5a      	adds	r2, r3, #1
 80106a2:	607a      	str	r2, [r7, #4]
 80106a4:	887a      	ldrh	r2, [r7, #2]
 80106a6:	b2d2      	uxtb	r2, r2
 80106a8:	701a      	strb	r2, [r3, #0]
 80106aa:	887b      	ldrh	r3, [r7, #2]
 80106ac:	0a1b      	lsrs	r3, r3, #8
 80106ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	607a      	str	r2, [r7, #4]
 80106b6:	887a      	ldrh	r2, [r7, #2]
 80106b8:	b2d2      	uxtb	r2, r2
 80106ba:	701a      	strb	r2, [r3, #0]
}
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	b2d2      	uxtb	r2, r2
 80106dc:	701a      	strb	r2, [r3, #0]
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	0a1b      	lsrs	r3, r3, #8
 80106e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	607a      	str	r2, [r7, #4]
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	701a      	strb	r2, [r3, #0]
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	0a1b      	lsrs	r3, r3, #8
 80106f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	607a      	str	r2, [r7, #4]
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	b2d2      	uxtb	r2, r2
 8010700:	701a      	strb	r2, [r3, #0]
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	0a1b      	lsrs	r3, r3, #8
 8010706:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	1c5a      	adds	r2, r3, #1
 801070c:	607a      	str	r2, [r7, #4]
 801070e:	683a      	ldr	r2, [r7, #0]
 8010710:	b2d2      	uxtb	r2, r2
 8010712:	701a      	strb	r2, [r3, #0]
}
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010720:	b480      	push	{r7}
 8010722:	b087      	sub	sp, #28
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00d      	beq.n	8010756 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	1c53      	adds	r3, r2, #1
 801073e:	613b      	str	r3, [r7, #16]
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	1c59      	adds	r1, r3, #1
 8010744:	6179      	str	r1, [r7, #20]
 8010746:	7812      	ldrb	r2, [r2, #0]
 8010748:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	3b01      	subs	r3, #1
 801074e:	607b      	str	r3, [r7, #4]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1f1      	bne.n	801073a <mem_cpy+0x1a>
	}
}
 8010756:	bf00      	nop
 8010758:	371c      	adds	r7, #28
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010762:	b480      	push	{r7}
 8010764:	b087      	sub	sp, #28
 8010766:	af00      	add	r7, sp, #0
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	617a      	str	r2, [r7, #20]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	b2d2      	uxtb	r2, r2
 801077c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	3b01      	subs	r3, #1
 8010782:	607b      	str	r3, [r7, #4]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1f3      	bne.n	8010772 <mem_set+0x10>
}
 801078a:	bf00      	nop
 801078c:	bf00      	nop
 801078e:	371c      	adds	r7, #28
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010798:	b480      	push	{r7}
 801079a:	b089      	sub	sp, #36	@ 0x24
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	61fb      	str	r3, [r7, #28]
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80107ac:	2300      	movs	r3, #0
 80107ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	1c5a      	adds	r2, r3, #1
 80107b4:	61fa      	str	r2, [r7, #28]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	4619      	mov	r1, r3
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	1c5a      	adds	r2, r3, #1
 80107be:	61ba      	str	r2, [r7, #24]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	1acb      	subs	r3, r1, r3
 80107c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	607b      	str	r3, [r7, #4]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <mem_cmp+0x40>
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0eb      	beq.n	80107b0 <mem_cmp+0x18>

	return r;
 80107d8:	697b      	ldr	r3, [r7, #20]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3724      	adds	r7, #36	@ 0x24
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80107e6:	b480      	push	{r7}
 80107e8:	b083      	sub	sp, #12
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80107f0:	e002      	b.n	80107f8 <chk_chr+0x12>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	3301      	adds	r3, #1
 80107f6:	607b      	str	r3, [r7, #4]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d005      	beq.n	801080c <chk_chr+0x26>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	461a      	mov	r2, r3
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	4293      	cmp	r3, r2
 801080a:	d1f2      	bne.n	80107f2 <chk_chr+0xc>
	return *str;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	781b      	ldrb	r3, [r3, #0]
}
 8010810:	4618      	mov	r0, r3
 8010812:	370c      	adds	r7, #12
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801081c:	b480      	push	{r7}
 801081e:	b085      	sub	sp, #20
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010826:	2300      	movs	r3, #0
 8010828:	60bb      	str	r3, [r7, #8]
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	60fb      	str	r3, [r7, #12]
 801082e:	e029      	b.n	8010884 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010830:	4a27      	ldr	r2, [pc, #156]	@ (80108d0 <chk_lock+0xb4>)
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	011b      	lsls	r3, r3, #4
 8010836:	4413      	add	r3, r2
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d01d      	beq.n	801087a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801083e:	4a24      	ldr	r2, [pc, #144]	@ (80108d0 <chk_lock+0xb4>)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	011b      	lsls	r3, r3, #4
 8010844:	4413      	add	r3, r2
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	429a      	cmp	r2, r3
 801084e:	d116      	bne.n	801087e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010850:	4a1f      	ldr	r2, [pc, #124]	@ (80108d0 <chk_lock+0xb4>)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	011b      	lsls	r3, r3, #4
 8010856:	4413      	add	r3, r2
 8010858:	3304      	adds	r3, #4
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010860:	429a      	cmp	r2, r3
 8010862:	d10c      	bne.n	801087e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010864:	4a1a      	ldr	r2, [pc, #104]	@ (80108d0 <chk_lock+0xb4>)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	011b      	lsls	r3, r3, #4
 801086a:	4413      	add	r3, r2
 801086c:	3308      	adds	r3, #8
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010874:	429a      	cmp	r2, r3
 8010876:	d102      	bne.n	801087e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010878:	e007      	b.n	801088a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801087a:	2301      	movs	r3, #1
 801087c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3301      	adds	r3, #1
 8010882:	60fb      	str	r3, [r7, #12]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2b01      	cmp	r3, #1
 8010888:	d9d2      	bls.n	8010830 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d109      	bne.n	80108a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <chk_lock+0x80>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d101      	bne.n	80108a0 <chk_lock+0x84>
 801089c:	2300      	movs	r3, #0
 801089e:	e010      	b.n	80108c2 <chk_lock+0xa6>
 80108a0:	2312      	movs	r3, #18
 80108a2:	e00e      	b.n	80108c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d108      	bne.n	80108bc <chk_lock+0xa0>
 80108aa:	4a09      	ldr	r2, [pc, #36]	@ (80108d0 <chk_lock+0xb4>)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	011b      	lsls	r3, r3, #4
 80108b0:	4413      	add	r3, r2
 80108b2:	330c      	adds	r3, #12
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108ba:	d101      	bne.n	80108c0 <chk_lock+0xa4>
 80108bc:	2310      	movs	r3, #16
 80108be:	e000      	b.n	80108c2 <chk_lock+0xa6>
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3714      	adds	r7, #20
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	24004bd4 	.word	0x24004bd4

080108d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108da:	2300      	movs	r3, #0
 80108dc:	607b      	str	r3, [r7, #4]
 80108de:	e002      	b.n	80108e6 <enq_lock+0x12>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	3301      	adds	r3, #1
 80108e4:	607b      	str	r3, [r7, #4]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d806      	bhi.n	80108fa <enq_lock+0x26>
 80108ec:	4a09      	ldr	r2, [pc, #36]	@ (8010914 <enq_lock+0x40>)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	4413      	add	r3, r2
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1f2      	bne.n	80108e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	bf14      	ite	ne
 8010900:	2301      	movne	r3, #1
 8010902:	2300      	moveq	r3, #0
 8010904:	b2db      	uxtb	r3, r3
}
 8010906:	4618      	mov	r0, r3
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	24004bd4 	.word	0x24004bd4

08010918 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010922:	2300      	movs	r3, #0
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	e01f      	b.n	8010968 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010928:	4a41      	ldr	r2, [pc, #260]	@ (8010a30 <inc_lock+0x118>)
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	011b      	lsls	r3, r3, #4
 801092e:	4413      	add	r3, r2
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d113      	bne.n	8010962 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801093a:	4a3d      	ldr	r2, [pc, #244]	@ (8010a30 <inc_lock+0x118>)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	011b      	lsls	r3, r3, #4
 8010940:	4413      	add	r3, r2
 8010942:	3304      	adds	r3, #4
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801094a:	429a      	cmp	r2, r3
 801094c:	d109      	bne.n	8010962 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801094e:	4a38      	ldr	r2, [pc, #224]	@ (8010a30 <inc_lock+0x118>)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	011b      	lsls	r3, r3, #4
 8010954:	4413      	add	r3, r2
 8010956:	3308      	adds	r3, #8
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801095e:	429a      	cmp	r2, r3
 8010960:	d006      	beq.n	8010970 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3301      	adds	r3, #1
 8010966:	60fb      	str	r3, [r7, #12]
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2b01      	cmp	r3, #1
 801096c:	d9dc      	bls.n	8010928 <inc_lock+0x10>
 801096e:	e000      	b.n	8010972 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010970:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d132      	bne.n	80109de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010978:	2300      	movs	r3, #0
 801097a:	60fb      	str	r3, [r7, #12]
 801097c:	e002      	b.n	8010984 <inc_lock+0x6c>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3301      	adds	r3, #1
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2b01      	cmp	r3, #1
 8010988:	d806      	bhi.n	8010998 <inc_lock+0x80>
 801098a:	4a29      	ldr	r2, [pc, #164]	@ (8010a30 <inc_lock+0x118>)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	011b      	lsls	r3, r3, #4
 8010990:	4413      	add	r3, r2
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d1f2      	bne.n	801097e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b02      	cmp	r3, #2
 801099c:	d101      	bne.n	80109a2 <inc_lock+0x8a>
 801099e:	2300      	movs	r3, #0
 80109a0:	e040      	b.n	8010a24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	4922      	ldr	r1, [pc, #136]	@ (8010a30 <inc_lock+0x118>)
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	440b      	add	r3, r1
 80109ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	689a      	ldr	r2, [r3, #8]
 80109b4:	491e      	ldr	r1, [pc, #120]	@ (8010a30 <inc_lock+0x118>)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	011b      	lsls	r3, r3, #4
 80109ba:	440b      	add	r3, r1
 80109bc:	3304      	adds	r3, #4
 80109be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	695a      	ldr	r2, [r3, #20]
 80109c4:	491a      	ldr	r1, [pc, #104]	@ (8010a30 <inc_lock+0x118>)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	011b      	lsls	r3, r3, #4
 80109ca:	440b      	add	r3, r1
 80109cc:	3308      	adds	r3, #8
 80109ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80109d0:	4a17      	ldr	r2, [pc, #92]	@ (8010a30 <inc_lock+0x118>)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	011b      	lsls	r3, r3, #4
 80109d6:	4413      	add	r3, r2
 80109d8:	330c      	adds	r3, #12
 80109da:	2200      	movs	r2, #0
 80109dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d009      	beq.n	80109f8 <inc_lock+0xe0>
 80109e4:	4a12      	ldr	r2, [pc, #72]	@ (8010a30 <inc_lock+0x118>)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	4413      	add	r3, r2
 80109ec:	330c      	adds	r3, #12
 80109ee:	881b      	ldrh	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <inc_lock+0xe0>
 80109f4:	2300      	movs	r3, #0
 80109f6:	e015      	b.n	8010a24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d108      	bne.n	8010a10 <inc_lock+0xf8>
 80109fe:	4a0c      	ldr	r2, [pc, #48]	@ (8010a30 <inc_lock+0x118>)
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	011b      	lsls	r3, r3, #4
 8010a04:	4413      	add	r3, r2
 8010a06:	330c      	adds	r3, #12
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	e001      	b.n	8010a14 <inc_lock+0xfc>
 8010a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010a14:	4906      	ldr	r1, [pc, #24]	@ (8010a30 <inc_lock+0x118>)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	011b      	lsls	r3, r3, #4
 8010a1a:	440b      	add	r3, r1
 8010a1c:	330c      	adds	r3, #12
 8010a1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	3301      	adds	r3, #1
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr
 8010a30:	24004bd4 	.word	0x24004bd4

08010a34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	607b      	str	r3, [r7, #4]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d825      	bhi.n	8010a94 <dec_lock+0x60>
		n = Files[i].ctr;
 8010a48:	4a17      	ldr	r2, [pc, #92]	@ (8010aa8 <dec_lock+0x74>)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	4413      	add	r3, r2
 8010a50:	330c      	adds	r3, #12
 8010a52:	881b      	ldrh	r3, [r3, #0]
 8010a54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010a56:	89fb      	ldrh	r3, [r7, #14]
 8010a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a5c:	d101      	bne.n	8010a62 <dec_lock+0x2e>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010a62:	89fb      	ldrh	r3, [r7, #14]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d002      	beq.n	8010a6e <dec_lock+0x3a>
 8010a68:	89fb      	ldrh	r3, [r7, #14]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8010aa8 <dec_lock+0x74>)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	011b      	lsls	r3, r3, #4
 8010a74:	4413      	add	r3, r2
 8010a76:	330c      	adds	r3, #12
 8010a78:	89fa      	ldrh	r2, [r7, #14]
 8010a7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010a7c:	89fb      	ldrh	r3, [r7, #14]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d105      	bne.n	8010a8e <dec_lock+0x5a>
 8010a82:	4a09      	ldr	r2, [pc, #36]	@ (8010aa8 <dec_lock+0x74>)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	4413      	add	r3, r2
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	737b      	strb	r3, [r7, #13]
 8010a92:	e001      	b.n	8010a98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010a94:	2302      	movs	r3, #2
 8010a96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010a98:	7b7b      	ldrb	r3, [r7, #13]
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3714      	adds	r7, #20
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	24004bd4 	.word	0x24004bd4

08010aac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	60fb      	str	r3, [r7, #12]
 8010ab8:	e010      	b.n	8010adc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010aba:	4a0d      	ldr	r2, [pc, #52]	@ (8010af0 <clear_lock+0x44>)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	011b      	lsls	r3, r3, #4
 8010ac0:	4413      	add	r3, r2
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d105      	bne.n	8010ad6 <clear_lock+0x2a>
 8010aca:	4a09      	ldr	r2, [pc, #36]	@ (8010af0 <clear_lock+0x44>)
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	011b      	lsls	r3, r3, #4
 8010ad0:	4413      	add	r3, r2
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	60fb      	str	r3, [r7, #12]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d9eb      	bls.n	8010aba <clear_lock+0xe>
	}
}
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	3714      	adds	r7, #20
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	24004bd4 	.word	0x24004bd4

08010af4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b086      	sub	sp, #24
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010afc:	2300      	movs	r3, #0
 8010afe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	78db      	ldrb	r3, [r3, #3]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d034      	beq.n	8010b72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7858      	ldrb	r0, [r3, #1]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b18:	2301      	movs	r3, #1
 8010b1a:	697a      	ldr	r2, [r7, #20]
 8010b1c:	f7ff fd40 	bl	80105a0 <disk_write>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d002      	beq.n	8010b2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010b26:	2301      	movs	r3, #1
 8010b28:	73fb      	strb	r3, [r7, #15]
 8010b2a:	e022      	b.n	8010b72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b36:	697a      	ldr	r2, [r7, #20]
 8010b38:	1ad2      	subs	r2, r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d217      	bcs.n	8010b72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	789b      	ldrb	r3, [r3, #2]
 8010b46:	613b      	str	r3, [r7, #16]
 8010b48:	e010      	b.n	8010b6c <sync_window+0x78>
					wsect += fs->fsize;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	4413      	add	r3, r2
 8010b52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7858      	ldrb	r0, [r3, #1]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b5e:	2301      	movs	r3, #1
 8010b60:	697a      	ldr	r2, [r7, #20]
 8010b62:	f7ff fd1d 	bl	80105a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	613b      	str	r3, [r7, #16]
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d8eb      	bhi.n	8010b4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b86:	2300      	movs	r3, #0
 8010b88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b8e:	683a      	ldr	r2, [r7, #0]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d01b      	beq.n	8010bcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffad 	bl	8010af4 <sync_window>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010b9e:	7bfb      	ldrb	r3, [r7, #15]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d113      	bne.n	8010bcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	7858      	ldrb	r0, [r3, #1]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010bae:	2301      	movs	r3, #1
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	f7ff fcd5 	bl	8010560 <disk_read>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d004      	beq.n	8010bc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	683a      	ldr	r2, [r7, #0]
 8010bca:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
	...

08010bd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff ff87 	bl	8010af4 <sync_window>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d159      	bne.n	8010ca4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	d149      	bne.n	8010c8c <sync_fs+0xb4>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	791b      	ldrb	r3, [r3, #4]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d145      	bne.n	8010c8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	899b      	ldrh	r3, [r3, #12]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	f7ff fda8 	bl	8010762 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	333c      	adds	r3, #60	@ 0x3c
 8010c16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c1a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ff fd37 	bl	8010692 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	333c      	adds	r3, #60	@ 0x3c
 8010c28:	4921      	ldr	r1, [pc, #132]	@ (8010cb0 <sync_fs+0xd8>)
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff fd4c 	bl	80106c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	333c      	adds	r3, #60	@ 0x3c
 8010c34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010c38:	491e      	ldr	r1, [pc, #120]	@ (8010cb4 <sync_fs+0xdc>)
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fd44 	bl	80106c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	333c      	adds	r3, #60	@ 0x3c
 8010c44:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	4610      	mov	r0, r2
 8010c50:	f7ff fd3a 	bl	80106c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	333c      	adds	r3, #60	@ 0x3c
 8010c58:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	4619      	mov	r1, r3
 8010c62:	4610      	mov	r0, r2
 8010c64:	f7ff fd30 	bl	80106c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6c:	1c5a      	adds	r2, r3, #1
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7858      	ldrb	r0, [r3, #1]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c80:	2301      	movs	r3, #1
 8010c82:	f7ff fc8d 	bl	80105a0 <disk_write>
			fs->fsi_flag = 0;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	785b      	ldrb	r3, [r3, #1]
 8010c90:	2200      	movs	r2, #0
 8010c92:	2100      	movs	r1, #0
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7ff fca3 	bl	80105e0 <disk_ioctl>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <sync_fs+0xcc>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3710      	adds	r7, #16
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	41615252 	.word	0x41615252
 8010cb4:	61417272 	.word	0x61417272

08010cb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	3b02      	subs	r3, #2
 8010cc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6a1b      	ldr	r3, [r3, #32]
 8010ccc:	3b02      	subs	r3, #2
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d301      	bcc.n	8010cd8 <clust2sect+0x20>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e008      	b.n	8010cea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	895b      	ldrh	r3, [r3, #10]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	fb03 f202 	mul.w	r2, r3, r2
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ce8:	4413      	add	r3, r2
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	370c      	adds	r7, #12
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr

08010cf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b086      	sub	sp, #24
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d904      	bls.n	8010d16 <get_fat+0x20>
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	683a      	ldr	r2, [r7, #0]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d302      	bcc.n	8010d1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010d16:	2301      	movs	r3, #1
 8010d18:	617b      	str	r3, [r7, #20]
 8010d1a:	e0ba      	b.n	8010e92 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	f000 8082 	beq.w	8010e30 <get_fat+0x13a>
 8010d2c:	2b03      	cmp	r3, #3
 8010d2e:	f300 80a6 	bgt.w	8010e7e <get_fat+0x188>
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d002      	beq.n	8010d3c <get_fat+0x46>
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d055      	beq.n	8010de6 <get_fat+0xf0>
 8010d3a:	e0a0      	b.n	8010e7e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	085b      	lsrs	r3, r3, #1
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	4413      	add	r3, r2
 8010d48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	899b      	ldrh	r3, [r3, #12]
 8010d52:	4619      	mov	r1, r3
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d5a:	4413      	add	r3, r2
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6938      	ldr	r0, [r7, #16]
 8010d60:	f7ff ff0c 	bl	8010b7c <move_window>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f040 808c 	bne.w	8010e84 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	1c5a      	adds	r2, r3, #1
 8010d70:	60fa      	str	r2, [r7, #12]
 8010d72:	693a      	ldr	r2, [r7, #16]
 8010d74:	8992      	ldrh	r2, [r2, #12]
 8010d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d7a:	fb01 f202 	mul.w	r2, r1, r2
 8010d7e:	1a9b      	subs	r3, r3, r2
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	4413      	add	r3, r2
 8010d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	899b      	ldrh	r3, [r3, #12]
 8010d92:	4619      	mov	r1, r3
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d9a:	4413      	add	r3, r2
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	6938      	ldr	r0, [r7, #16]
 8010da0:	f7ff feec 	bl	8010b7c <move_window>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d16e      	bne.n	8010e88 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	899b      	ldrh	r3, [r3, #12]
 8010dae:	461a      	mov	r2, r3
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010db6:	fb01 f202 	mul.w	r2, r1, r2
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	693a      	ldr	r2, [r7, #16]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010dc4:	021b      	lsls	r3, r3, #8
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d002      	beq.n	8010ddc <get_fat+0xe6>
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	091b      	lsrs	r3, r3, #4
 8010dda:	e002      	b.n	8010de2 <get_fat+0xec>
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010de2:	617b      	str	r3, [r7, #20]
			break;
 8010de4:	e055      	b.n	8010e92 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	899b      	ldrh	r3, [r3, #12]
 8010dee:	085b      	lsrs	r3, r3, #1
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	4619      	mov	r1, r3
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dfa:	4413      	add	r3, r2
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	6938      	ldr	r0, [r7, #16]
 8010e00:	f7ff febc 	bl	8010b7c <move_window>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d140      	bne.n	8010e8c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	693a      	ldr	r2, [r7, #16]
 8010e16:	8992      	ldrh	r2, [r2, #12]
 8010e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e1c:	fb00 f202 	mul.w	r2, r0, r2
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	440b      	add	r3, r1
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff fbf9 	bl	801061c <ld_word>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	617b      	str	r3, [r7, #20]
			break;
 8010e2e:	e030      	b.n	8010e92 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	899b      	ldrh	r3, [r3, #12]
 8010e38:	089b      	lsrs	r3, r3, #2
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e44:	4413      	add	r3, r2
 8010e46:	4619      	mov	r1, r3
 8010e48:	6938      	ldr	r0, [r7, #16]
 8010e4a:	f7ff fe97 	bl	8010b7c <move_window>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d11d      	bne.n	8010e90 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	693a      	ldr	r2, [r7, #16]
 8010e60:	8992      	ldrh	r2, [r2, #12]
 8010e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e66:	fb00 f202 	mul.w	r2, r0, r2
 8010e6a:	1a9b      	subs	r3, r3, r2
 8010e6c:	440b      	add	r3, r1
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff fbec 	bl	801064c <ld_dword>
 8010e74:	4603      	mov	r3, r0
 8010e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010e7a:	617b      	str	r3, [r7, #20]
			break;
 8010e7c:	e009      	b.n	8010e92 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010e7e:	2301      	movs	r3, #1
 8010e80:	617b      	str	r3, [r7, #20]
 8010e82:	e006      	b.n	8010e92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e84:	bf00      	nop
 8010e86:	e004      	b.n	8010e92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e88:	bf00      	nop
 8010e8a:	e002      	b.n	8010e92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e8c:	bf00      	nop
 8010e8e:	e000      	b.n	8010e92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e90:	bf00      	nop
		}
	}

	return val;
 8010e92:	697b      	ldr	r3, [r7, #20]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3718      	adds	r7, #24
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b089      	sub	sp, #36	@ 0x24
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	f240 8109 	bls.w	80110c6 <put_fat+0x22a>
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6a1b      	ldr	r3, [r3, #32]
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	f080 8103 	bcs.w	80110c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	f000 80b6 	beq.w	8011036 <put_fat+0x19a>
 8010eca:	2b03      	cmp	r3, #3
 8010ecc:	f300 80fb 	bgt.w	80110c6 <put_fat+0x22a>
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d003      	beq.n	8010edc <put_fat+0x40>
 8010ed4:	2b02      	cmp	r3, #2
 8010ed6:	f000 8083 	beq.w	8010fe0 <put_fat+0x144>
 8010eda:	e0f4      	b.n	80110c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	61bb      	str	r3, [r7, #24]
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	085b      	lsrs	r3, r3, #1
 8010ee4:	69ba      	ldr	r2, [r7, #24]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	899b      	ldrh	r3, [r3, #12]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010efa:	4413      	add	r3, r2
 8010efc:	4619      	mov	r1, r3
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff fe3c 	bl	8010b7c <move_window>
 8010f04:	4603      	mov	r3, r0
 8010f06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f08:	7ffb      	ldrb	r3, [r7, #31]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	f040 80d4 	bne.w	80110b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	61ba      	str	r2, [r7, #24]
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	8992      	ldrh	r2, [r2, #12]
 8010f20:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f24:	fb00 f202 	mul.w	r2, r0, r2
 8010f28:	1a9b      	subs	r3, r3, r2
 8010f2a:	440b      	add	r3, r1
 8010f2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	f003 0301 	and.w	r3, r3, #1
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d00d      	beq.n	8010f54 <put_fat+0xb8>
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	b25b      	sxtb	r3, r3
 8010f3e:	f003 030f 	and.w	r3, r3, #15
 8010f42:	b25a      	sxtb	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	011b      	lsls	r3, r3, #4
 8010f4a:	b25b      	sxtb	r3, r3
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	b25b      	sxtb	r3, r3
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	e001      	b.n	8010f58 <put_fat+0xbc>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	697a      	ldr	r2, [r7, #20]
 8010f5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	899b      	ldrh	r3, [r3, #12]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f72:	4413      	add	r3, r2
 8010f74:	4619      	mov	r1, r3
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f7ff fe00 	bl	8010b7c <move_window>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f80:	7ffb      	ldrb	r3, [r7, #31]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f040 809a 	bne.w	80110bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	899b      	ldrh	r3, [r3, #12]
 8010f92:	461a      	mov	r2, r3
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f9a:	fb00 f202 	mul.w	r2, r0, r2
 8010f9e:	1a9b      	subs	r3, r3, r2
 8010fa0:	440b      	add	r3, r1
 8010fa2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <put_fat+0x11a>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	091b      	lsrs	r3, r3, #4
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	e00e      	b.n	8010fd4 <put_fat+0x138>
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	b25b      	sxtb	r3, r3
 8010fbc:	f023 030f 	bic.w	r3, r3, #15
 8010fc0:	b25a      	sxtb	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	0a1b      	lsrs	r3, r3, #8
 8010fc6:	b25b      	sxtb	r3, r3
 8010fc8:	f003 030f 	and.w	r3, r3, #15
 8010fcc:	b25b      	sxtb	r3, r3
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	b25b      	sxtb	r3, r3
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	697a      	ldr	r2, [r7, #20]
 8010fd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2201      	movs	r2, #1
 8010fdc:	70da      	strb	r2, [r3, #3]
			break;
 8010fde:	e072      	b.n	80110c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	899b      	ldrh	r3, [r3, #12]
 8010fe8:	085b      	lsrs	r3, r3, #1
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	4619      	mov	r1, r3
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ff4:	4413      	add	r3, r2
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7ff fdbf 	bl	8010b7c <move_window>
 8010ffe:	4603      	mov	r3, r0
 8011000:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011002:	7ffb      	ldrb	r3, [r7, #31]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d15b      	bne.n	80110c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	8992      	ldrh	r2, [r2, #12]
 8011016:	fbb3 f0f2 	udiv	r0, r3, r2
 801101a:	fb00 f202 	mul.w	r2, r0, r2
 801101e:	1a9b      	subs	r3, r3, r2
 8011020:	440b      	add	r3, r1
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	b292      	uxth	r2, r2
 8011026:	4611      	mov	r1, r2
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff fb32 	bl	8010692 <st_word>
			fs->wflag = 1;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2201      	movs	r2, #1
 8011032:	70da      	strb	r2, [r3, #3]
			break;
 8011034:	e047      	b.n	80110c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	899b      	ldrh	r3, [r3, #12]
 801103e:	089b      	lsrs	r3, r3, #2
 8011040:	b29b      	uxth	r3, r3
 8011042:	4619      	mov	r1, r3
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	fbb3 f3f1 	udiv	r3, r3, r1
 801104a:	4413      	add	r3, r2
 801104c:	4619      	mov	r1, r3
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f7ff fd94 	bl	8010b7c <move_window>
 8011054:	4603      	mov	r3, r0
 8011056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011058:	7ffb      	ldrb	r3, [r7, #31]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d132      	bne.n	80110c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	8992      	ldrh	r2, [r2, #12]
 8011072:	fbb3 f0f2 	udiv	r0, r3, r2
 8011076:	fb00 f202 	mul.w	r2, r0, r2
 801107a:	1a9b      	subs	r3, r3, r2
 801107c:	440b      	add	r3, r1
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff fae4 	bl	801064c <ld_dword>
 8011084:	4603      	mov	r3, r0
 8011086:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801108a:	4323      	orrs	r3, r4
 801108c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	68fa      	ldr	r2, [r7, #12]
 801109a:	8992      	ldrh	r2, [r2, #12]
 801109c:	fbb3 f0f2 	udiv	r0, r3, r2
 80110a0:	fb00 f202 	mul.w	r2, r0, r2
 80110a4:	1a9b      	subs	r3, r3, r2
 80110a6:	440b      	add	r3, r1
 80110a8:	6879      	ldr	r1, [r7, #4]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff fb0c 	bl	80106c8 <st_dword>
			fs->wflag = 1;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2201      	movs	r2, #1
 80110b4:	70da      	strb	r2, [r3, #3]
			break;
 80110b6:	e006      	b.n	80110c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80110b8:	bf00      	nop
 80110ba:	e004      	b.n	80110c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80110bc:	bf00      	nop
 80110be:	e002      	b.n	80110c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80110c0:	bf00      	nop
 80110c2:	e000      	b.n	80110c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80110c4:	bf00      	nop
		}
	}
	return res;
 80110c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3724      	adds	r7, #36	@ 0x24
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd90      	pop	{r4, r7, pc}

080110d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b088      	sub	sp, #32
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d904      	bls.n	80110f6 <remove_chain+0x26>
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	6a1b      	ldr	r3, [r3, #32]
 80110f0:	68ba      	ldr	r2, [r7, #8]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d301      	bcc.n	80110fa <remove_chain+0x2a>
 80110f6:	2302      	movs	r3, #2
 80110f8:	e04b      	b.n	8011192 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00c      	beq.n	801111a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011100:	f04f 32ff 	mov.w	r2, #4294967295
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	69b8      	ldr	r0, [r7, #24]
 8011108:	f7ff fec8 	bl	8010e9c <put_fat>
 801110c:	4603      	mov	r3, r0
 801110e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011110:	7ffb      	ldrb	r3, [r7, #31]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <remove_chain+0x4a>
 8011116:	7ffb      	ldrb	r3, [r7, #31]
 8011118:	e03b      	b.n	8011192 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801111a:	68b9      	ldr	r1, [r7, #8]
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f7ff fdea 	bl	8010cf6 <get_fat>
 8011122:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d031      	beq.n	801118e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d101      	bne.n	8011134 <remove_chain+0x64>
 8011130:	2302      	movs	r3, #2
 8011132:	e02e      	b.n	8011192 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113a:	d101      	bne.n	8011140 <remove_chain+0x70>
 801113c:	2301      	movs	r3, #1
 801113e:	e028      	b.n	8011192 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011140:	2200      	movs	r2, #0
 8011142:	68b9      	ldr	r1, [r7, #8]
 8011144:	69b8      	ldr	r0, [r7, #24]
 8011146:	f7ff fea9 	bl	8010e9c <put_fat>
 801114a:	4603      	mov	r3, r0
 801114c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801114e:	7ffb      	ldrb	r3, [r7, #31]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d001      	beq.n	8011158 <remove_chain+0x88>
 8011154:	7ffb      	ldrb	r3, [r7, #31]
 8011156:	e01c      	b.n	8011192 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	699a      	ldr	r2, [r3, #24]
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	6a1b      	ldr	r3, [r3, #32]
 8011160:	3b02      	subs	r3, #2
 8011162:	429a      	cmp	r2, r3
 8011164:	d20b      	bcs.n	801117e <remove_chain+0xae>
			fs->free_clst++;
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	1c5a      	adds	r2, r3, #1
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	791b      	ldrb	r3, [r3, #4]
 8011174:	f043 0301 	orr.w	r3, r3, #1
 8011178:	b2da      	uxtb	r2, r3
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	6a1b      	ldr	r3, [r3, #32]
 8011186:	68ba      	ldr	r2, [r7, #8]
 8011188:	429a      	cmp	r2, r3
 801118a:	d3c6      	bcc.n	801111a <remove_chain+0x4a>
 801118c:	e000      	b.n	8011190 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801118e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3720      	adds	r7, #32
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b088      	sub	sp, #32
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
 80111a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d10d      	bne.n	80111cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	695b      	ldr	r3, [r3, #20]
 80111b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d004      	beq.n	80111c6 <create_chain+0x2c>
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	6a1b      	ldr	r3, [r3, #32]
 80111c0:	69ba      	ldr	r2, [r7, #24]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d31b      	bcc.n	80111fe <create_chain+0x64>
 80111c6:	2301      	movs	r3, #1
 80111c8:	61bb      	str	r3, [r7, #24]
 80111ca:	e018      	b.n	80111fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80111cc:	6839      	ldr	r1, [r7, #0]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff fd91 	bl	8010cf6 <get_fat>
 80111d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d801      	bhi.n	80111e0 <create_chain+0x46>
 80111dc:	2301      	movs	r3, #1
 80111de:	e070      	b.n	80112c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e6:	d101      	bne.n	80111ec <create_chain+0x52>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	e06a      	b.n	80112c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	6a1b      	ldr	r3, [r3, #32]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d201      	bcs.n	80111fa <create_chain+0x60>
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	e063      	b.n	80112c2 <create_chain+0x128>
		scl = clst;
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	3301      	adds	r3, #1
 8011206:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	6a1b      	ldr	r3, [r3, #32]
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	429a      	cmp	r2, r3
 8011210:	d307      	bcc.n	8011222 <create_chain+0x88>
				ncl = 2;
 8011212:	2302      	movs	r3, #2
 8011214:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011216:	69fa      	ldr	r2, [r7, #28]
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	429a      	cmp	r2, r3
 801121c:	d901      	bls.n	8011222 <create_chain+0x88>
 801121e:	2300      	movs	r3, #0
 8011220:	e04f      	b.n	80112c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011222:	69f9      	ldr	r1, [r7, #28]
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff fd66 	bl	8010cf6 <get_fat>
 801122a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00e      	beq.n	8011250 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d003      	beq.n	8011240 <create_chain+0xa6>
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801123e:	d101      	bne.n	8011244 <create_chain+0xaa>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	e03e      	b.n	80112c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011244:	69fa      	ldr	r2, [r7, #28]
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	429a      	cmp	r2, r3
 801124a:	d1da      	bne.n	8011202 <create_chain+0x68>
 801124c:	2300      	movs	r3, #0
 801124e:	e038      	b.n	80112c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011250:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011252:	f04f 32ff 	mov.w	r2, #4294967295
 8011256:	69f9      	ldr	r1, [r7, #28]
 8011258:	6938      	ldr	r0, [r7, #16]
 801125a:	f7ff fe1f 	bl	8010e9c <put_fat>
 801125e:	4603      	mov	r3, r0
 8011260:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011262:	7dfb      	ldrb	r3, [r7, #23]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d109      	bne.n	801127c <create_chain+0xe2>
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d006      	beq.n	801127c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801126e:	69fa      	ldr	r2, [r7, #28]
 8011270:	6839      	ldr	r1, [r7, #0]
 8011272:	6938      	ldr	r0, [r7, #16]
 8011274:	f7ff fe12 	bl	8010e9c <put_fat>
 8011278:	4603      	mov	r3, r0
 801127a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801127c:	7dfb      	ldrb	r3, [r7, #23]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d116      	bne.n	80112b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	69fa      	ldr	r2, [r7, #28]
 8011286:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	699a      	ldr	r2, [r3, #24]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	6a1b      	ldr	r3, [r3, #32]
 8011290:	3b02      	subs	r3, #2
 8011292:	429a      	cmp	r2, r3
 8011294:	d804      	bhi.n	80112a0 <create_chain+0x106>
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	699b      	ldr	r3, [r3, #24]
 801129a:	1e5a      	subs	r2, r3, #1
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	791b      	ldrb	r3, [r3, #4]
 80112a4:	f043 0301 	orr.w	r3, r3, #1
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	711a      	strb	r2, [r3, #4]
 80112ae:	e007      	b.n	80112c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d102      	bne.n	80112bc <create_chain+0x122>
 80112b6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ba:	e000      	b.n	80112be <create_chain+0x124>
 80112bc:	2301      	movs	r3, #1
 80112be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80112c0:	69fb      	ldr	r3, [r7, #28]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3720      	adds	r7, #32
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80112ca:	b480      	push	{r7}
 80112cc:	b087      	sub	sp, #28
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112de:	3304      	adds	r3, #4
 80112e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	899b      	ldrh	r3, [r3, #12]
 80112e6:	461a      	mov	r2, r3
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	8952      	ldrh	r2, [r2, #10]
 80112f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80112f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	1d1a      	adds	r2, r3, #4
 80112fc:	613a      	str	r2, [r7, #16]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d101      	bne.n	801130c <clmt_clust+0x42>
 8011308:	2300      	movs	r3, #0
 801130a:	e010      	b.n	801132e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801130c:	697a      	ldr	r2, [r7, #20]
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	429a      	cmp	r2, r3
 8011312:	d307      	bcc.n	8011324 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011314:	697a      	ldr	r2, [r7, #20]
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	617b      	str	r3, [r7, #20]
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	3304      	adds	r3, #4
 8011320:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011322:	e7e9      	b.n	80112f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011324:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	4413      	add	r3, r2
}
 801132e:	4618      	mov	r0, r3
 8011330:	371c      	adds	r7, #28
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr

0801133a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b086      	sub	sp, #24
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
 8011342:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011350:	d204      	bcs.n	801135c <dir_sdi+0x22>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	f003 031f 	and.w	r3, r3, #31
 8011358:	2b00      	cmp	r3, #0
 801135a:	d001      	beq.n	8011360 <dir_sdi+0x26>
		return FR_INT_ERR;
 801135c:	2302      	movs	r3, #2
 801135e:	e071      	b.n	8011444 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	689b      	ldr	r3, [r3, #8]
 801136a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <dir_sdi+0x46>
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b02      	cmp	r3, #2
 8011378:	d902      	bls.n	8011380 <dir_sdi+0x46>
		clst = fs->dirbase;
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d10c      	bne.n	80113a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	095b      	lsrs	r3, r3, #5
 801138a:	693a      	ldr	r2, [r7, #16]
 801138c:	8912      	ldrh	r2, [r2, #8]
 801138e:	4293      	cmp	r3, r2
 8011390:	d301      	bcc.n	8011396 <dir_sdi+0x5c>
 8011392:	2302      	movs	r3, #2
 8011394:	e056      	b.n	8011444 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	61da      	str	r2, [r3, #28]
 801139e:	e02d      	b.n	80113fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	895b      	ldrh	r3, [r3, #10]
 80113a4:	461a      	mov	r2, r3
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	fb02 f303 	mul.w	r3, r2, r3
 80113ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113b0:	e019      	b.n	80113e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6979      	ldr	r1, [r7, #20]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff fc9d 	bl	8010cf6 <get_fat>
 80113bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c4:	d101      	bne.n	80113ca <dir_sdi+0x90>
 80113c6:	2301      	movs	r3, #1
 80113c8:	e03c      	b.n	8011444 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d904      	bls.n	80113da <dir_sdi+0xa0>
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	6a1b      	ldr	r3, [r3, #32]
 80113d4:	697a      	ldr	r2, [r7, #20]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d301      	bcc.n	80113de <dir_sdi+0xa4>
 80113da:	2302      	movs	r3, #2
 80113dc:	e032      	b.n	8011444 <dir_sdi+0x10a>
			ofs -= csz;
 80113de:	683a      	ldr	r2, [r7, #0]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d2e1      	bcs.n	80113b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80113ee:	6979      	ldr	r1, [r7, #20]
 80113f0:	6938      	ldr	r0, [r7, #16]
 80113f2:	f7ff fc61 	bl	8010cb8 <clust2sect>
 80113f6:	4602      	mov	r2, r0
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	697a      	ldr	r2, [r7, #20]
 8011400:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	69db      	ldr	r3, [r3, #28]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d101      	bne.n	801140e <dir_sdi+0xd4>
 801140a:	2302      	movs	r3, #2
 801140c:	e01a      	b.n	8011444 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	69da      	ldr	r2, [r3, #28]
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	899b      	ldrh	r3, [r3, #12]
 8011416:	4619      	mov	r1, r3
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	fbb3 f3f1 	udiv	r3, r3, r1
 801141e:	441a      	add	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	899b      	ldrh	r3, [r3, #12]
 801142e:	461a      	mov	r2, r3
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	fbb3 f0f2 	udiv	r0, r3, r2
 8011436:	fb00 f202 	mul.w	r2, r0, r2
 801143a:	1a9b      	subs	r3, r3, r2
 801143c:	18ca      	adds	r2, r1, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3718      	adds	r7, #24
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	695b      	ldr	r3, [r3, #20]
 8011460:	3320      	adds	r3, #32
 8011462:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	69db      	ldr	r3, [r3, #28]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d003      	beq.n	8011474 <dir_next+0x28>
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011472:	d301      	bcc.n	8011478 <dir_next+0x2c>
 8011474:	2304      	movs	r3, #4
 8011476:	e0bb      	b.n	80115f0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	899b      	ldrh	r3, [r3, #12]
 801147c:	461a      	mov	r2, r3
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	fbb3 f1f2 	udiv	r1, r3, r2
 8011484:	fb01 f202 	mul.w	r2, r1, r2
 8011488:	1a9b      	subs	r3, r3, r2
 801148a:	2b00      	cmp	r3, #0
 801148c:	f040 809d 	bne.w	80115ca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	69db      	ldr	r3, [r3, #28]
 8011494:	1c5a      	adds	r2, r3, #1
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d10b      	bne.n	80114ba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	095b      	lsrs	r3, r3, #5
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	8912      	ldrh	r2, [r2, #8]
 80114aa:	4293      	cmp	r3, r2
 80114ac:	f0c0 808d 	bcc.w	80115ca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	61da      	str	r2, [r3, #28]
 80114b6:	2304      	movs	r3, #4
 80114b8:	e09a      	b.n	80115f0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	899b      	ldrh	r3, [r3, #12]
 80114be:	461a      	mov	r2, r3
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	8952      	ldrh	r2, [r2, #10]
 80114ca:	3a01      	subs	r2, #1
 80114cc:	4013      	ands	r3, r2
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d17b      	bne.n	80115ca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	699b      	ldr	r3, [r3, #24]
 80114d8:	4619      	mov	r1, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f7ff fc0b 	bl	8010cf6 <get_fat>
 80114e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d801      	bhi.n	80114ec <dir_next+0xa0>
 80114e8:	2302      	movs	r3, #2
 80114ea:	e081      	b.n	80115f0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f2:	d101      	bne.n	80114f8 <dir_next+0xac>
 80114f4:	2301      	movs	r3, #1
 80114f6:	e07b      	b.n	80115f0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6a1b      	ldr	r3, [r3, #32]
 80114fc:	697a      	ldr	r2, [r7, #20]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d359      	bcc.n	80115b6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d104      	bne.n	8011512 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	61da      	str	r2, [r3, #28]
 801150e:	2304      	movs	r3, #4
 8011510:	e06e      	b.n	80115f0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	699b      	ldr	r3, [r3, #24]
 8011518:	4619      	mov	r1, r3
 801151a:	4610      	mov	r0, r2
 801151c:	f7ff fe3d 	bl	801119a <create_chain>
 8011520:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d101      	bne.n	801152c <dir_next+0xe0>
 8011528:	2307      	movs	r3, #7
 801152a:	e061      	b.n	80115f0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d101      	bne.n	8011536 <dir_next+0xea>
 8011532:	2302      	movs	r3, #2
 8011534:	e05c      	b.n	80115f0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153c:	d101      	bne.n	8011542 <dir_next+0xf6>
 801153e:	2301      	movs	r3, #1
 8011540:	e056      	b.n	80115f0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7ff fad6 	bl	8010af4 <sync_window>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <dir_next+0x106>
 801154e:	2301      	movs	r3, #1
 8011550:	e04e      	b.n	80115f0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	899b      	ldrh	r3, [r3, #12]
 801155c:	461a      	mov	r2, r3
 801155e:	2100      	movs	r1, #0
 8011560:	f7ff f8ff 	bl	8010762 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011564:	2300      	movs	r3, #0
 8011566:	613b      	str	r3, [r7, #16]
 8011568:	6979      	ldr	r1, [r7, #20]
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7ff fba4 	bl	8010cb8 <clust2sect>
 8011570:	4602      	mov	r2, r0
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	639a      	str	r2, [r3, #56]	@ 0x38
 8011576:	e012      	b.n	801159e <dir_next+0x152>
						fs->wflag = 1;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2201      	movs	r2, #1
 801157c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	f7ff fab8 	bl	8010af4 <sync_window>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d001      	beq.n	801158e <dir_next+0x142>
 801158a:	2301      	movs	r3, #1
 801158c:	e030      	b.n	80115f0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3301      	adds	r3, #1
 8011592:	613b      	str	r3, [r7, #16]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011598:	1c5a      	adds	r2, r3, #1
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	639a      	str	r2, [r3, #56]	@ 0x38
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	895b      	ldrh	r3, [r3, #10]
 80115a2:	461a      	mov	r2, r3
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d3e6      	bcc.n	8011578 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	1ad2      	subs	r2, r2, r3
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80115bc:	6979      	ldr	r1, [r7, #20]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f7ff fb7a 	bl	8010cb8 <clust2sect>
 80115c4:	4602      	mov	r2, r0
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	899b      	ldrh	r3, [r3, #12]
 80115da:	461a      	mov	r2, r3
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	fbb3 f0f2 	udiv	r0, r3, r2
 80115e2:	fb00 f202 	mul.w	r2, r0, r2
 80115e6:	1a9b      	subs	r3, r3, r2
 80115e8:	18ca      	adds	r2, r1, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3718      	adds	r7, #24
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b086      	sub	sp, #24
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011608:	2100      	movs	r1, #0
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7ff fe95 	bl	801133a <dir_sdi>
 8011610:	4603      	mov	r3, r0
 8011612:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011614:	7dfb      	ldrb	r3, [r7, #23]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d12b      	bne.n	8011672 <dir_alloc+0x7a>
		n = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	69db      	ldr	r3, [r3, #28]
 8011622:	4619      	mov	r1, r3
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7ff faa9 	bl	8010b7c <move_window>
 801162a:	4603      	mov	r3, r0
 801162c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801162e:	7dfb      	ldrb	r3, [r7, #23]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d11d      	bne.n	8011670 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6a1b      	ldr	r3, [r3, #32]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	2be5      	cmp	r3, #229	@ 0xe5
 801163c:	d004      	beq.n	8011648 <dir_alloc+0x50>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6a1b      	ldr	r3, [r3, #32]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d107      	bne.n	8011658 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	3301      	adds	r3, #1
 801164c:	613b      	str	r3, [r7, #16]
 801164e:	693a      	ldr	r2, [r7, #16]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	429a      	cmp	r2, r3
 8011654:	d102      	bne.n	801165c <dir_alloc+0x64>
 8011656:	e00c      	b.n	8011672 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011658:	2300      	movs	r3, #0
 801165a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801165c:	2101      	movs	r1, #1
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fef4 	bl	801144c <dir_next>
 8011664:	4603      	mov	r3, r0
 8011666:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011668:	7dfb      	ldrb	r3, [r7, #23]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d0d7      	beq.n	801161e <dir_alloc+0x26>
 801166e:	e000      	b.n	8011672 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011670:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	2b04      	cmp	r3, #4
 8011676:	d101      	bne.n	801167c <dir_alloc+0x84>
 8011678:	2307      	movs	r3, #7
 801167a:	75fb      	strb	r3, [r7, #23]
	return res;
 801167c:	7dfb      	ldrb	r3, [r7, #23]
}
 801167e:	4618      	mov	r0, r3
 8011680:	3718      	adds	r7, #24
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b084      	sub	sp, #16
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
 801168e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	331a      	adds	r3, #26
 8011694:	4618      	mov	r0, r3
 8011696:	f7fe ffc1 	bl	801061c <ld_word>
 801169a:	4603      	mov	r3, r0
 801169c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	2b03      	cmp	r3, #3
 80116a4:	d109      	bne.n	80116ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	3314      	adds	r3, #20
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fe ffb6 	bl	801061c <ld_word>
 80116b0:	4603      	mov	r3, r0
 80116b2:	041b      	lsls	r3, r3, #16
 80116b4:	68fa      	ldr	r2, [r7, #12]
 80116b6:	4313      	orrs	r3, r2
 80116b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80116ba:	68fb      	ldr	r3, [r7, #12]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	331a      	adds	r3, #26
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	b292      	uxth	r2, r2
 80116d8:	4611      	mov	r1, r2
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fe ffd9 	bl	8010692 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	2b03      	cmp	r3, #3
 80116e6:	d109      	bne.n	80116fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	f103 0214 	add.w	r2, r3, #20
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	0c1b      	lsrs	r3, r3, #16
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	4619      	mov	r1, r3
 80116f6:	4610      	mov	r0, r2
 80116f8:	f7fe ffcb 	bl	8010692 <st_word>
	}
}
 80116fc:	bf00      	nop
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011704:	b590      	push	{r4, r7, lr}
 8011706:	b087      	sub	sp, #28
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	331a      	adds	r3, #26
 8011712:	4618      	mov	r0, r3
 8011714:	f7fe ff82 	bl	801061c <ld_word>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <cmp_lfn+0x1e>
 801171e:	2300      	movs	r3, #0
 8011720:	e059      	b.n	80117d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801172a:	1e5a      	subs	r2, r3, #1
 801172c:	4613      	mov	r3, r2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	4413      	add	r3, r2
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	4413      	add	r3, r2
 8011736:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011738:	2301      	movs	r3, #1
 801173a:	81fb      	strh	r3, [r7, #14]
 801173c:	2300      	movs	r3, #0
 801173e:	613b      	str	r3, [r7, #16]
 8011740:	e033      	b.n	80117aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011742:	4a27      	ldr	r2, [pc, #156]	@ (80117e0 <cmp_lfn+0xdc>)
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	4413      	add	r3, r2
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	461a      	mov	r2, r3
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	4413      	add	r3, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe ff63 	bl	801061c <ld_word>
 8011756:	4603      	mov	r3, r0
 8011758:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801175a:	89fb      	ldrh	r3, [r7, #14]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d01a      	beq.n	8011796 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	2bfe      	cmp	r3, #254	@ 0xfe
 8011764:	d812      	bhi.n	801178c <cmp_lfn+0x88>
 8011766:	89bb      	ldrh	r3, [r7, #12]
 8011768:	4618      	mov	r0, r3
 801176a:	f002 ff73 	bl	8014654 <ff_wtoupper>
 801176e:	4603      	mov	r3, r0
 8011770:	461c      	mov	r4, r3
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	617a      	str	r2, [r7, #20]
 8011778:	005b      	lsls	r3, r3, #1
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	4413      	add	r3, r2
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	4618      	mov	r0, r3
 8011782:	f002 ff67 	bl	8014654 <ff_wtoupper>
 8011786:	4603      	mov	r3, r0
 8011788:	429c      	cmp	r4, r3
 801178a:	d001      	beq.n	8011790 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801178c:	2300      	movs	r3, #0
 801178e:	e022      	b.n	80117d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011790:	89bb      	ldrh	r3, [r7, #12]
 8011792:	81fb      	strh	r3, [r7, #14]
 8011794:	e006      	b.n	80117a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011796:	89bb      	ldrh	r3, [r7, #12]
 8011798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801179c:	4293      	cmp	r3, r2
 801179e:	d001      	beq.n	80117a4 <cmp_lfn+0xa0>
 80117a0:	2300      	movs	r3, #0
 80117a2:	e018      	b.n	80117d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	3301      	adds	r3, #1
 80117a8:	613b      	str	r3, [r7, #16]
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	2b0c      	cmp	r3, #12
 80117ae:	d9c8      	bls.n	8011742 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00b      	beq.n	80117d4 <cmp_lfn+0xd0>
 80117bc:	89fb      	ldrh	r3, [r7, #14]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d008      	beq.n	80117d4 <cmp_lfn+0xd0>
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	4413      	add	r3, r2
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d001      	beq.n	80117d4 <cmp_lfn+0xd0>
 80117d0:	2300      	movs	r3, #0
 80117d2:	e000      	b.n	80117d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80117d4:	2301      	movs	r3, #1
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	371c      	adds	r7, #28
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd90      	pop	{r4, r7, pc}
 80117de:	bf00      	nop
 80117e0:	08014bcc 	.word	0x08014bcc

080117e4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	331a      	adds	r3, #26
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fe ff12 	bl	801061c <ld_word>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d001      	beq.n	8011802 <pick_lfn+0x1e>
 80117fe:	2300      	movs	r3, #0
 8011800:	e04d      	b.n	801189e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801180a:	1e5a      	subs	r2, r3, #1
 801180c:	4613      	mov	r3, r2
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	4413      	add	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011818:	2301      	movs	r3, #1
 801181a:	81fb      	strh	r3, [r7, #14]
 801181c:	2300      	movs	r3, #0
 801181e:	613b      	str	r3, [r7, #16]
 8011820:	e028      	b.n	8011874 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011822:	4a21      	ldr	r2, [pc, #132]	@ (80118a8 <pick_lfn+0xc4>)
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	4413      	add	r3, r2
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	4413      	add	r3, r2
 8011830:	4618      	mov	r0, r3
 8011832:	f7fe fef3 	bl	801061c <ld_word>
 8011836:	4603      	mov	r3, r0
 8011838:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801183a:	89fb      	ldrh	r3, [r7, #14]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00f      	beq.n	8011860 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	2bfe      	cmp	r3, #254	@ 0xfe
 8011844:	d901      	bls.n	801184a <pick_lfn+0x66>
 8011846:	2300      	movs	r3, #0
 8011848:	e029      	b.n	801189e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801184a:	89bb      	ldrh	r3, [r7, #12]
 801184c:	81fb      	strh	r3, [r7, #14]
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	617a      	str	r2, [r7, #20]
 8011854:	005b      	lsls	r3, r3, #1
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	4413      	add	r3, r2
 801185a:	89fa      	ldrh	r2, [r7, #14]
 801185c:	801a      	strh	r2, [r3, #0]
 801185e:	e006      	b.n	801186e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011860:	89bb      	ldrh	r3, [r7, #12]
 8011862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011866:	4293      	cmp	r3, r2
 8011868:	d001      	beq.n	801186e <pick_lfn+0x8a>
 801186a:	2300      	movs	r3, #0
 801186c:	e017      	b.n	801189e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	3301      	adds	r3, #1
 8011872:	613b      	str	r3, [r7, #16]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	2b0c      	cmp	r3, #12
 8011878:	d9d3      	bls.n	8011822 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2bfe      	cmp	r3, #254	@ 0xfe
 801188a:	d901      	bls.n	8011890 <pick_lfn+0xac>
 801188c:	2300      	movs	r3, #0
 801188e:	e006      	b.n	801189e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	4413      	add	r3, r2
 8011898:	2200      	movs	r2, #0
 801189a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801189c:	2301      	movs	r3, #1
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3718      	adds	r7, #24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	08014bcc 	.word	0x08014bcc

080118ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	4611      	mov	r1, r2
 80118b8:	461a      	mov	r2, r3
 80118ba:	460b      	mov	r3, r1
 80118bc:	71fb      	strb	r3, [r7, #7]
 80118be:	4613      	mov	r3, r2
 80118c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	330d      	adds	r3, #13
 80118c6:	79ba      	ldrb	r2, [r7, #6]
 80118c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	330b      	adds	r3, #11
 80118ce:	220f      	movs	r2, #15
 80118d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	330c      	adds	r3, #12
 80118d6:	2200      	movs	r2, #0
 80118d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	331a      	adds	r3, #26
 80118de:	2100      	movs	r1, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7fe fed6 	bl	8010692 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80118e6:	79fb      	ldrb	r3, [r7, #7]
 80118e8:	1e5a      	subs	r2, r3, #1
 80118ea:	4613      	mov	r3, r2
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	4413      	add	r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	4413      	add	r3, r2
 80118f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	82fb      	strh	r3, [r7, #22]
 80118fa:	2300      	movs	r3, #0
 80118fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80118fe:	8afb      	ldrh	r3, [r7, #22]
 8011900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011904:	4293      	cmp	r3, r2
 8011906:	d007      	beq.n	8011918 <put_lfn+0x6c>
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	1c5a      	adds	r2, r3, #1
 801190c:	61fa      	str	r2, [r7, #28]
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	68fa      	ldr	r2, [r7, #12]
 8011912:	4413      	add	r3, r2
 8011914:	881b      	ldrh	r3, [r3, #0]
 8011916:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011918:	4a17      	ldr	r2, [pc, #92]	@ (8011978 <put_lfn+0xcc>)
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	4413      	add	r3, r2
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	461a      	mov	r2, r3
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	4413      	add	r3, r2
 8011926:	8afa      	ldrh	r2, [r7, #22]
 8011928:	4611      	mov	r1, r2
 801192a:	4618      	mov	r0, r3
 801192c:	f7fe feb1 	bl	8010692 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011930:	8afb      	ldrh	r3, [r7, #22]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d102      	bne.n	801193c <put_lfn+0x90>
 8011936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801193a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	3301      	adds	r3, #1
 8011940:	61bb      	str	r3, [r7, #24]
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	2b0c      	cmp	r3, #12
 8011946:	d9da      	bls.n	80118fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011948:	8afb      	ldrh	r3, [r7, #22]
 801194a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801194e:	4293      	cmp	r3, r2
 8011950:	d006      	beq.n	8011960 <put_lfn+0xb4>
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	4413      	add	r3, r2
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d103      	bne.n	8011968 <put_lfn+0xbc>
 8011960:	79fb      	ldrb	r3, [r7, #7]
 8011962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011966:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	79fa      	ldrb	r2, [r7, #7]
 801196c:	701a      	strb	r2, [r3, #0]
}
 801196e:	bf00      	nop
 8011970:	3720      	adds	r7, #32
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	08014bcc 	.word	0x08014bcc

0801197c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b08c      	sub	sp, #48	@ 0x30
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	607a      	str	r2, [r7, #4]
 8011988:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801198a:	220b      	movs	r2, #11
 801198c:	68b9      	ldr	r1, [r7, #8]
 801198e:	68f8      	ldr	r0, [r7, #12]
 8011990:	f7fe fec6 	bl	8010720 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2b05      	cmp	r3, #5
 8011998:	d929      	bls.n	80119ee <gen_numname+0x72>
		sr = seq;
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801199e:	e020      	b.n	80119e2 <gen_numname+0x66>
			wc = *lfn++;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	1c9a      	adds	r2, r3, #2
 80119a4:	607a      	str	r2, [r7, #4]
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80119aa:	2300      	movs	r3, #0
 80119ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119ae:	e015      	b.n	80119dc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	005a      	lsls	r2, r3, #1
 80119b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80119b6:	f003 0301 	and.w	r3, r3, #1
 80119ba:	4413      	add	r3, r2
 80119bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80119be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80119c0:	085b      	lsrs	r3, r3, #1
 80119c2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d003      	beq.n	80119d6 <gen_numname+0x5a>
 80119ce:	69fa      	ldr	r2, [r7, #28]
 80119d0:	4b30      	ldr	r3, [pc, #192]	@ (8011a94 <gen_numname+0x118>)
 80119d2:	4053      	eors	r3, r2
 80119d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80119d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d8:	3301      	adds	r3, #1
 80119da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119de:	2b0f      	cmp	r3, #15
 80119e0:	d9e6      	bls.n	80119b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1da      	bne.n	80119a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80119ee:	2307      	movs	r3, #7
 80119f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	f003 030f 	and.w	r3, r3, #15
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	3330      	adds	r3, #48	@ 0x30
 80119fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8011a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a06:	2b39      	cmp	r3, #57	@ 0x39
 8011a08:	d904      	bls.n	8011a14 <gen_numname+0x98>
 8011a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a0e:	3307      	adds	r3, #7
 8011a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8011a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a16:	1e5a      	subs	r2, r3, #1
 8011a18:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011a1a:	3330      	adds	r3, #48	@ 0x30
 8011a1c:	443b      	add	r3, r7
 8011a1e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011a22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	091b      	lsrs	r3, r3, #4
 8011a2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1df      	bne.n	80119f2 <gen_numname+0x76>
	ns[i] = '~';
 8011a32:	f107 0214 	add.w	r2, r7, #20
 8011a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a38:	4413      	add	r3, r2
 8011a3a:	227e      	movs	r2, #126	@ 0x7e
 8011a3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011a3e:	2300      	movs	r3, #0
 8011a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a42:	e002      	b.n	8011a4a <gen_numname+0xce>
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	3301      	adds	r3, #1
 8011a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d205      	bcs.n	8011a5e <gen_numname+0xe2>
 8011a52:	68fa      	ldr	r2, [r7, #12]
 8011a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a56:	4413      	add	r3, r2
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	2b20      	cmp	r3, #32
 8011a5c:	d1f2      	bne.n	8011a44 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a60:	2b07      	cmp	r3, #7
 8011a62:	d807      	bhi.n	8011a74 <gen_numname+0xf8>
 8011a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011a6a:	3330      	adds	r3, #48	@ 0x30
 8011a6c:	443b      	add	r3, r7
 8011a6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011a72:	e000      	b.n	8011a76 <gen_numname+0xfa>
 8011a74:	2120      	movs	r1, #32
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	1c5a      	adds	r2, r3, #1
 8011a7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	4413      	add	r3, r2
 8011a80:	460a      	mov	r2, r1
 8011a82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a86:	2b07      	cmp	r3, #7
 8011a88:	d9e9      	bls.n	8011a5e <gen_numname+0xe2>
}
 8011a8a:	bf00      	nop
 8011a8c:	bf00      	nop
 8011a8e:	3730      	adds	r7, #48	@ 0x30
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	00011021 	.word	0x00011021

08011a98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b085      	sub	sp, #20
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011aa4:	230b      	movs	r3, #11
 8011aa6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011aa8:	7bfb      	ldrb	r3, [r7, #15]
 8011aaa:	b2da      	uxtb	r2, r3
 8011aac:	0852      	lsrs	r2, r2, #1
 8011aae:	01db      	lsls	r3, r3, #7
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	1c59      	adds	r1, r3, #1
 8011ab8:	6079      	str	r1, [r7, #4]
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	4413      	add	r3, r2
 8011abe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	60bb      	str	r3, [r7, #8]
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1ed      	bne.n	8011aa8 <sum_sfn+0x10>
	return sum;
 8011acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3714      	adds	r7, #20
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b086      	sub	sp, #24
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011ae4:	2304      	movs	r3, #4
 8011ae6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011aee:	23ff      	movs	r3, #255	@ 0xff
 8011af0:	757b      	strb	r3, [r7, #21]
 8011af2:	23ff      	movs	r3, #255	@ 0xff
 8011af4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011af6:	e081      	b.n	8011bfc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	4619      	mov	r1, r3
 8011afe:	6938      	ldr	r0, [r7, #16]
 8011b00:	f7ff f83c 	bl	8010b7c <move_window>
 8011b04:	4603      	mov	r3, r0
 8011b06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011b08:	7dfb      	ldrb	r3, [r7, #23]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d17c      	bne.n	8011c08 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6a1b      	ldr	r3, [r3, #32]
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011b16:	7dbb      	ldrb	r3, [r7, #22]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d102      	bne.n	8011b22 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011b1c:	2304      	movs	r3, #4
 8011b1e:	75fb      	strb	r3, [r7, #23]
 8011b20:	e077      	b.n	8011c12 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	330b      	adds	r3, #11
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011b2e:	73fb      	strb	r3, [r7, #15]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7bfa      	ldrb	r2, [r7, #15]
 8011b34:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011b36:	7dbb      	ldrb	r3, [r7, #22]
 8011b38:	2be5      	cmp	r3, #229	@ 0xe5
 8011b3a:	d00e      	beq.n	8011b5a <dir_read+0x80>
 8011b3c:	7dbb      	ldrb	r3, [r7, #22]
 8011b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b40:	d00b      	beq.n	8011b5a <dir_read+0x80>
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	f023 0320 	bic.w	r3, r3, #32
 8011b48:	2b08      	cmp	r3, #8
 8011b4a:	bf0c      	ite	eq
 8011b4c:	2301      	moveq	r3, #1
 8011b4e:	2300      	movne	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	461a      	mov	r2, r3
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d002      	beq.n	8011b60 <dir_read+0x86>
				ord = 0xFF;
 8011b5a:	23ff      	movs	r3, #255	@ 0xff
 8011b5c:	757b      	strb	r3, [r7, #21]
 8011b5e:	e044      	b.n	8011bea <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011b60:	7bfb      	ldrb	r3, [r7, #15]
 8011b62:	2b0f      	cmp	r3, #15
 8011b64:	d12f      	bne.n	8011bc6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011b66:	7dbb      	ldrb	r3, [r7, #22]
 8011b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00d      	beq.n	8011b8c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6a1b      	ldr	r3, [r3, #32]
 8011b74:	7b5b      	ldrb	r3, [r3, #13]
 8011b76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011b78:	7dbb      	ldrb	r3, [r7, #22]
 8011b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b7e:	75bb      	strb	r3, [r7, #22]
 8011b80:	7dbb      	ldrb	r3, [r7, #22]
 8011b82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	695a      	ldr	r2, [r3, #20]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011b8c:	7dba      	ldrb	r2, [r7, #22]
 8011b8e:	7d7b      	ldrb	r3, [r7, #21]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d115      	bne.n	8011bc0 <dir_read+0xe6>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6a1b      	ldr	r3, [r3, #32]
 8011b98:	330d      	adds	r3, #13
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	7d3a      	ldrb	r2, [r7, #20]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d10e      	bne.n	8011bc0 <dir_read+0xe6>
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	691a      	ldr	r2, [r3, #16]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a1b      	ldr	r3, [r3, #32]
 8011baa:	4619      	mov	r1, r3
 8011bac:	4610      	mov	r0, r2
 8011bae:	f7ff fe19 	bl	80117e4 <pick_lfn>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d003      	beq.n	8011bc0 <dir_read+0xe6>
 8011bb8:	7d7b      	ldrb	r3, [r7, #21]
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	b2db      	uxtb	r3, r3
 8011bbe:	e000      	b.n	8011bc2 <dir_read+0xe8>
 8011bc0:	23ff      	movs	r3, #255	@ 0xff
 8011bc2:	757b      	strb	r3, [r7, #21]
 8011bc4:	e011      	b.n	8011bea <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011bc6:	7d7b      	ldrb	r3, [r7, #21]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d109      	bne.n	8011be0 <dir_read+0x106>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6a1b      	ldr	r3, [r3, #32]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ff ff61 	bl	8011a98 <sum_sfn>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	461a      	mov	r2, r3
 8011bda:	7d3b      	ldrb	r3, [r7, #20]
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d015      	beq.n	8011c0c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f04f 32ff 	mov.w	r2, #4294967295
 8011be6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8011be8:	e010      	b.n	8011c0c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011bea:	2100      	movs	r1, #0
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff fc2d 	bl	801144c <dir_next>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <dir_read+0x136>
	while (dp->sect) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	69db      	ldr	r3, [r3, #28]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f47f af79 	bne.w	8011af8 <dir_read+0x1e>
 8011c06:	e004      	b.n	8011c12 <dir_read+0x138>
		if (res != FR_OK) break;
 8011c08:	bf00      	nop
 8011c0a:	e002      	b.n	8011c12 <dir_read+0x138>
					break;
 8011c0c:	bf00      	nop
 8011c0e:	e000      	b.n	8011c12 <dir_read+0x138>
		if (res != FR_OK) break;
 8011c10:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <dir_read+0x144>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	61da      	str	r2, [r3, #28]
	return res;
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3718      	adds	r7, #24
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011c36:	2100      	movs	r1, #0
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff fb7e 	bl	801133a <dir_sdi>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011c42:	7dfb      	ldrb	r3, [r7, #23]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <dir_find+0x24>
 8011c48:	7dfb      	ldrb	r3, [r7, #23]
 8011c4a:	e0a9      	b.n	8011da0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011c4c:	23ff      	movs	r3, #255	@ 0xff
 8011c4e:	753b      	strb	r3, [r7, #20]
 8011c50:	7d3b      	ldrb	r3, [r7, #20]
 8011c52:	757b      	strb	r3, [r7, #21]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f04f 32ff 	mov.w	r2, #4294967295
 8011c5a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	69db      	ldr	r3, [r3, #28]
 8011c60:	4619      	mov	r1, r3
 8011c62:	6938      	ldr	r0, [r7, #16]
 8011c64:	f7fe ff8a 	bl	8010b7c <move_window>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011c6c:	7dfb      	ldrb	r3, [r7, #23]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f040 8090 	bne.w	8011d94 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6a1b      	ldr	r3, [r3, #32]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011c7c:	7dbb      	ldrb	r3, [r7, #22]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d102      	bne.n	8011c88 <dir_find+0x60>
 8011c82:	2304      	movs	r3, #4
 8011c84:	75fb      	strb	r3, [r7, #23]
 8011c86:	e08a      	b.n	8011d9e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6a1b      	ldr	r3, [r3, #32]
 8011c8c:	330b      	adds	r3, #11
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c94:	73fb      	strb	r3, [r7, #15]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	7bfa      	ldrb	r2, [r7, #15]
 8011c9a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011c9c:	7dbb      	ldrb	r3, [r7, #22]
 8011c9e:	2be5      	cmp	r3, #229	@ 0xe5
 8011ca0:	d007      	beq.n	8011cb2 <dir_find+0x8a>
 8011ca2:	7bfb      	ldrb	r3, [r7, #15]
 8011ca4:	f003 0308 	and.w	r3, r3, #8
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d009      	beq.n	8011cc0 <dir_find+0x98>
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
 8011cae:	2b0f      	cmp	r3, #15
 8011cb0:	d006      	beq.n	8011cc0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011cb2:	23ff      	movs	r3, #255	@ 0xff
 8011cb4:	757b      	strb	r3, [r7, #21]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8011cbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cbe:	e05e      	b.n	8011d7e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
 8011cc2:	2b0f      	cmp	r3, #15
 8011cc4:	d136      	bne.n	8011d34 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d154      	bne.n	8011d7e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011cd4:	7dbb      	ldrb	r3, [r7, #22]
 8011cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00d      	beq.n	8011cfa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6a1b      	ldr	r3, [r3, #32]
 8011ce2:	7b5b      	ldrb	r3, [r3, #13]
 8011ce4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011ce6:	7dbb      	ldrb	r3, [r7, #22]
 8011ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cec:	75bb      	strb	r3, [r7, #22]
 8011cee:	7dbb      	ldrb	r3, [r7, #22]
 8011cf0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	695a      	ldr	r2, [r3, #20]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011cfa:	7dba      	ldrb	r2, [r7, #22]
 8011cfc:	7d7b      	ldrb	r3, [r7, #21]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d115      	bne.n	8011d2e <dir_find+0x106>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a1b      	ldr	r3, [r3, #32]
 8011d06:	330d      	adds	r3, #13
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	7d3a      	ldrb	r2, [r7, #20]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d10e      	bne.n	8011d2e <dir_find+0x106>
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	691a      	ldr	r2, [r3, #16]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a1b      	ldr	r3, [r3, #32]
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	f7ff fcf2 	bl	8011704 <cmp_lfn>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d003      	beq.n	8011d2e <dir_find+0x106>
 8011d26:	7d7b      	ldrb	r3, [r7, #21]
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	e000      	b.n	8011d30 <dir_find+0x108>
 8011d2e:	23ff      	movs	r3, #255	@ 0xff
 8011d30:	757b      	strb	r3, [r7, #21]
 8011d32:	e024      	b.n	8011d7e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011d34:	7d7b      	ldrb	r3, [r7, #21]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d109      	bne.n	8011d4e <dir_find+0x126>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a1b      	ldr	r3, [r3, #32]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7ff feaa 	bl	8011a98 <sum_sfn>
 8011d44:	4603      	mov	r3, r0
 8011d46:	461a      	mov	r2, r3
 8011d48:	7d3b      	ldrb	r3, [r7, #20]
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d024      	beq.n	8011d98 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011d54:	f003 0301 	and.w	r3, r3, #1
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10a      	bne.n	8011d72 <dir_find+0x14a>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a18      	ldr	r0, [r3, #32]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	3324      	adds	r3, #36	@ 0x24
 8011d64:	220b      	movs	r2, #11
 8011d66:	4619      	mov	r1, r3
 8011d68:	f7fe fd16 	bl	8010798 <mem_cmp>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d014      	beq.n	8011d9c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011d72:	23ff      	movs	r3, #255	@ 0xff
 8011d74:	757b      	strb	r3, [r7, #21]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011d7e:	2100      	movs	r1, #0
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fb63 	bl	801144c <dir_next>
 8011d86:	4603      	mov	r3, r0
 8011d88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f43f af65 	beq.w	8011c5c <dir_find+0x34>
 8011d92:	e004      	b.n	8011d9e <dir_find+0x176>
		if (res != FR_OK) break;
 8011d94:	bf00      	nop
 8011d96:	e002      	b.n	8011d9e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011d9c:	bf00      	nop

	return res;
 8011d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3718      	adds	r7, #24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b08c      	sub	sp, #48	@ 0x30
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011dbc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <dir_register+0x20>
 8011dc4:	2306      	movs	r3, #6
 8011dc6:	e0e0      	b.n	8011f8a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011dc8:	2300      	movs	r3, #0
 8011dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dcc:	e002      	b.n	8011dd4 <dir_register+0x2c>
 8011dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	691a      	ldr	r2, [r3, #16]
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	4413      	add	r3, r2
 8011dde:	881b      	ldrh	r3, [r3, #0]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d1f4      	bne.n	8011dce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8011dea:	f107 030c 	add.w	r3, r7, #12
 8011dee:	220c      	movs	r2, #12
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fe fc95 	bl	8010720 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011df6:	7dfb      	ldrb	r3, [r7, #23]
 8011df8:	f003 0301 	and.w	r3, r3, #1
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d032      	beq.n	8011e66 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2240      	movs	r2, #64	@ 0x40
 8011e04:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8011e08:	2301      	movs	r3, #1
 8011e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e0c:	e016      	b.n	8011e3c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	691a      	ldr	r2, [r3, #16]
 8011e18:	f107 010c 	add.w	r1, r7, #12
 8011e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1e:	f7ff fdad 	bl	801197c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7ff ff00 	bl	8011c28 <dir_find>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8011e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e38:	3301      	adds	r3, #1
 8011e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e3e:	2b63      	cmp	r3, #99	@ 0x63
 8011e40:	d9e5      	bls.n	8011e0e <dir_register+0x66>
 8011e42:	e000      	b.n	8011e46 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011e44:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e48:	2b64      	cmp	r3, #100	@ 0x64
 8011e4a:	d101      	bne.n	8011e50 <dir_register+0xa8>
 8011e4c:	2307      	movs	r3, #7
 8011e4e:	e09c      	b.n	8011f8a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011e50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e54:	2b04      	cmp	r3, #4
 8011e56:	d002      	beq.n	8011e5e <dir_register+0xb6>
 8011e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e5c:	e095      	b.n	8011f8a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011e5e:	7dfa      	ldrb	r2, [r7, #23]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011e66:	7dfb      	ldrb	r3, [r7, #23]
 8011e68:	f003 0302 	and.w	r3, r3, #2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d007      	beq.n	8011e80 <dir_register+0xd8>
 8011e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e72:	330c      	adds	r3, #12
 8011e74:	4a47      	ldr	r2, [pc, #284]	@ (8011f94 <dir_register+0x1ec>)
 8011e76:	fba2 2303 	umull	r2, r3, r2, r3
 8011e7a:	089b      	lsrs	r3, r3, #2
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	e000      	b.n	8011e82 <dir_register+0xda>
 8011e80:	2301      	movs	r3, #1
 8011e82:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011e84:	6a39      	ldr	r1, [r7, #32]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7ff fbb6 	bl	80115f8 <dir_alloc>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d148      	bne.n	8011f2c <dir_register+0x184>
 8011e9a:	6a3b      	ldr	r3, [r7, #32]
 8011e9c:	3b01      	subs	r3, #1
 8011e9e:	623b      	str	r3, [r7, #32]
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d042      	beq.n	8011f2c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	695a      	ldr	r2, [r3, #20]
 8011eaa:	6a3b      	ldr	r3, [r7, #32]
 8011eac:	015b      	lsls	r3, r3, #5
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff fa41 	bl	801133a <dir_sdi>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d132      	bne.n	8011f2c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	3324      	adds	r3, #36	@ 0x24
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ff fde4 	bl	8011a98 <sum_sfn>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	69db      	ldr	r3, [r3, #28]
 8011ed8:	4619      	mov	r1, r3
 8011eda:	69f8      	ldr	r0, [r7, #28]
 8011edc:	f7fe fe4e 	bl	8010b7c <move_window>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8011ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d11d      	bne.n	8011f2a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	6918      	ldr	r0, [r3, #16]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a19      	ldr	r1, [r3, #32]
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	7efb      	ldrb	r3, [r7, #27]
 8011efc:	f7ff fcd6 	bl	80118ac <put_lfn>
				fs->wflag = 1;
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	2201      	movs	r2, #1
 8011f04:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011f06:	2100      	movs	r1, #0
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff fa9f 	bl	801144c <dir_next>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8011f14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d107      	bne.n	8011f2c <dir_register+0x184>
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	623b      	str	r3, [r7, #32]
 8011f22:	6a3b      	ldr	r3, [r7, #32]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1d5      	bne.n	8011ed4 <dir_register+0x12c>
 8011f28:	e000      	b.n	8011f2c <dir_register+0x184>
				if (res != FR_OK) break;
 8011f2a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d128      	bne.n	8011f86 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	69db      	ldr	r3, [r3, #28]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	69f8      	ldr	r0, [r7, #28]
 8011f3c:	f7fe fe1e 	bl	8010b7c <move_window>
 8011f40:	4603      	mov	r3, r0
 8011f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d11b      	bne.n	8011f86 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a1b      	ldr	r3, [r3, #32]
 8011f52:	2220      	movs	r2, #32
 8011f54:	2100      	movs	r1, #0
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe fc03 	bl	8010762 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a18      	ldr	r0, [r3, #32]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3324      	adds	r3, #36	@ 0x24
 8011f64:	220b      	movs	r2, #11
 8011f66:	4619      	mov	r1, r3
 8011f68:	f7fe fbda 	bl	8010720 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a1b      	ldr	r3, [r3, #32]
 8011f76:	330c      	adds	r3, #12
 8011f78:	f002 0218 	and.w	r2, r2, #24
 8011f7c:	b2d2      	uxtb	r2, r2
 8011f7e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	2201      	movs	r2, #1
 8011f84:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3730      	adds	r7, #48	@ 0x30
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	4ec4ec4f 	.word	0x4ec4ec4f

08011f98 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b086      	sub	sp, #24
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	695b      	ldr	r3, [r3, #20]
 8011faa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb4:	d007      	beq.n	8011fc6 <dir_remove+0x2e>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fba:	4619      	mov	r1, r3
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f7ff f9bc 	bl	801133a <dir_sdi>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	e000      	b.n	8011fc8 <dir_remove+0x30>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fca:	7dfb      	ldrb	r3, [r7, #23]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d128      	bne.n	8012022 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	69db      	ldr	r3, [r3, #28]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	6938      	ldr	r0, [r7, #16]
 8011fd8:	f7fe fdd0 	bl	8010b7c <move_window>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d115      	bne.n	8012012 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	22e5      	movs	r2, #229	@ 0xe5
 8011fec:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	695b      	ldr	r3, [r3, #20]
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d90b      	bls.n	8012016 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8011ffe:	2100      	movs	r1, #0
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f7ff fa23 	bl	801144c <dir_next>
 8012006:	4603      	mov	r3, r0
 8012008:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801200a:	7dfb      	ldrb	r3, [r7, #23]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d0df      	beq.n	8011fd0 <dir_remove+0x38>
 8012010:	e002      	b.n	8012018 <dir_remove+0x80>
			if (res != FR_OK) break;
 8012012:	bf00      	nop
 8012014:	e000      	b.n	8012018 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012016:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8012018:	7dfb      	ldrb	r3, [r7, #23]
 801201a:	2b04      	cmp	r3, #4
 801201c:	d101      	bne.n	8012022 <dir_remove+0x8a>
 801201e:	2302      	movs	r3, #2
 8012020:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8012022:	7dfb      	ldrb	r3, [r7, #23]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08a      	sub	sp, #40	@ 0x28
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	613b      	str	r3, [r7, #16]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	2300      	movs	r3, #0
 8012046:	617b      	str	r3, [r7, #20]
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	1c5a      	adds	r2, r3, #1
 8012050:	61ba      	str	r2, [r7, #24]
 8012052:	693a      	ldr	r2, [r7, #16]
 8012054:	4413      	add	r3, r2
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801205a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801205c:	2b1f      	cmp	r3, #31
 801205e:	d940      	bls.n	80120e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012060:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012062:	2b2f      	cmp	r3, #47	@ 0x2f
 8012064:	d006      	beq.n	8012074 <create_name+0x48>
 8012066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012068:	2b5c      	cmp	r3, #92	@ 0x5c
 801206a:	d110      	bne.n	801208e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801206c:	e002      	b.n	8012074 <create_name+0x48>
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	3301      	adds	r3, #1
 8012072:	61bb      	str	r3, [r7, #24]
 8012074:	693a      	ldr	r2, [r7, #16]
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	4413      	add	r3, r2
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b2f      	cmp	r3, #47	@ 0x2f
 801207e:	d0f6      	beq.n	801206e <create_name+0x42>
 8012080:	693a      	ldr	r2, [r7, #16]
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	4413      	add	r3, r2
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	2b5c      	cmp	r3, #92	@ 0x5c
 801208a:	d0f0      	beq.n	801206e <create_name+0x42>
			break;
 801208c:	e02a      	b.n	80120e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	2bfe      	cmp	r3, #254	@ 0xfe
 8012092:	d901      	bls.n	8012098 <create_name+0x6c>
 8012094:	2306      	movs	r3, #6
 8012096:	e1ca      	b.n	801242e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801209a:	b2db      	uxtb	r3, r3
 801209c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801209e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120a0:	2101      	movs	r1, #1
 80120a2:	4618      	mov	r0, r3
 80120a4:	f002 fa9a 	bl	80145dc <ff_convert>
 80120a8:	4603      	mov	r3, r0
 80120aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80120ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d101      	bne.n	80120b6 <create_name+0x8a>
 80120b2:	2306      	movs	r3, #6
 80120b4:	e1bb      	b.n	801242e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80120b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80120ba:	d809      	bhi.n	80120d0 <create_name+0xa4>
 80120bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120be:	4619      	mov	r1, r3
 80120c0:	489e      	ldr	r0, [pc, #632]	@ (801233c <create_name+0x310>)
 80120c2:	f7fe fb90 	bl	80107e6 <chk_chr>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <create_name+0xa4>
 80120cc:	2306      	movs	r3, #6
 80120ce:	e1ae      	b.n	801242e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	1c5a      	adds	r2, r3, #1
 80120d4:	617a      	str	r2, [r7, #20]
 80120d6:	005b      	lsls	r3, r3, #1
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	4413      	add	r3, r2
 80120dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80120de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80120e0:	e7b4      	b.n	801204c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80120e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80120e4:	693a      	ldr	r2, [r7, #16]
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	441a      	add	r2, r3
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80120ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120f0:	2b1f      	cmp	r3, #31
 80120f2:	d801      	bhi.n	80120f8 <create_name+0xcc>
 80120f4:	2304      	movs	r3, #4
 80120f6:	e000      	b.n	80120fa <create_name+0xce>
 80120f8:	2300      	movs	r3, #0
 80120fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d109      	bne.n	8012118 <create_name+0xec>
 8012104:	697a      	ldr	r2, [r7, #20]
 8012106:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801210a:	4413      	add	r3, r2
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	68fa      	ldr	r2, [r7, #12]
 8012110:	4413      	add	r3, r2
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	2b2e      	cmp	r3, #46	@ 0x2e
 8012116:	d015      	beq.n	8012144 <create_name+0x118>
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2b02      	cmp	r3, #2
 801211c:	d14d      	bne.n	80121ba <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012124:	4413      	add	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	4413      	add	r3, r2
 801212c:	881b      	ldrh	r3, [r3, #0]
 801212e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012130:	d143      	bne.n	80121ba <create_name+0x18e>
 8012132:	697a      	ldr	r2, [r7, #20]
 8012134:	4b82      	ldr	r3, [pc, #520]	@ (8012340 <create_name+0x314>)
 8012136:	4413      	add	r3, r2
 8012138:	005b      	lsls	r3, r3, #1
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	4413      	add	r3, r2
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	2b2e      	cmp	r3, #46	@ 0x2e
 8012142:	d13a      	bne.n	80121ba <create_name+0x18e>
		lfn[di] = 0;
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	005b      	lsls	r3, r3, #1
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	4413      	add	r3, r2
 801214c:	2200      	movs	r2, #0
 801214e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8012150:	2300      	movs	r3, #0
 8012152:	623b      	str	r3, [r7, #32]
 8012154:	e00f      	b.n	8012176 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8012156:	6a3a      	ldr	r2, [r7, #32]
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	429a      	cmp	r2, r3
 801215c:	d201      	bcs.n	8012162 <create_name+0x136>
 801215e:	212e      	movs	r1, #46	@ 0x2e
 8012160:	e000      	b.n	8012164 <create_name+0x138>
 8012162:	2120      	movs	r1, #32
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	4413      	add	r3, r2
 801216a:	3324      	adds	r3, #36	@ 0x24
 801216c:	460a      	mov	r2, r1
 801216e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8012170:	6a3b      	ldr	r3, [r7, #32]
 8012172:	3301      	adds	r3, #1
 8012174:	623b      	str	r3, [r7, #32]
 8012176:	6a3b      	ldr	r3, [r7, #32]
 8012178:	2b0a      	cmp	r3, #10
 801217a:	d9ec      	bls.n	8012156 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801217c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012180:	f043 0320 	orr.w	r3, r3, #32
 8012184:	b2d9      	uxtb	r1, r3
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	6a3b      	ldr	r3, [r7, #32]
 801218a:	4413      	add	r3, r2
 801218c:	3324      	adds	r3, #36	@ 0x24
 801218e:	460a      	mov	r2, r1
 8012190:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	e14b      	b.n	801242e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8012196:	697a      	ldr	r2, [r7, #20]
 8012198:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801219c:	4413      	add	r3, r2
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	4413      	add	r3, r2
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80121a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80121aa:	2b20      	cmp	r3, #32
 80121ac:	d002      	beq.n	80121b4 <create_name+0x188>
 80121ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80121b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80121b2:	d106      	bne.n	80121c2 <create_name+0x196>
		di--;
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	3b01      	subs	r3, #1
 80121b8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1ea      	bne.n	8012196 <create_name+0x16a>
 80121c0:	e000      	b.n	80121c4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80121c2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	4413      	add	r3, r2
 80121cc:	2200      	movs	r2, #0
 80121ce:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <create_name+0x1ae>
 80121d6:	2306      	movs	r3, #6
 80121d8:	e129      	b.n	801242e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3324      	adds	r3, #36	@ 0x24
 80121de:	220b      	movs	r2, #11
 80121e0:	2120      	movs	r1, #32
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7fe fabd 	bl	8010762 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80121e8:	2300      	movs	r3, #0
 80121ea:	61bb      	str	r3, [r7, #24]
 80121ec:	e002      	b.n	80121f4 <create_name+0x1c8>
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	3301      	adds	r3, #1
 80121f2:	61bb      	str	r3, [r7, #24]
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	4413      	add	r3, r2
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	2b20      	cmp	r3, #32
 8012200:	d0f5      	beq.n	80121ee <create_name+0x1c2>
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	005b      	lsls	r3, r3, #1
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	4413      	add	r3, r2
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	2b2e      	cmp	r3, #46	@ 0x2e
 801220e:	d0ee      	beq.n	80121ee <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d009      	beq.n	801222a <create_name+0x1fe>
 8012216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801221a:	f043 0303 	orr.w	r3, r3, #3
 801221e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012222:	e002      	b.n	801222a <create_name+0x1fe>
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	3b01      	subs	r3, #1
 8012228:	617b      	str	r3, [r7, #20]
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d009      	beq.n	8012244 <create_name+0x218>
 8012230:	697a      	ldr	r2, [r7, #20]
 8012232:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012236:	4413      	add	r3, r2
 8012238:	005b      	lsls	r3, r3, #1
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	4413      	add	r3, r2
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	2b2e      	cmp	r3, #46	@ 0x2e
 8012242:	d1ef      	bne.n	8012224 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8012244:	2300      	movs	r3, #0
 8012246:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801224a:	2300      	movs	r3, #0
 801224c:	623b      	str	r3, [r7, #32]
 801224e:	2308      	movs	r3, #8
 8012250:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	1c5a      	adds	r2, r3, #1
 8012256:	61ba      	str	r2, [r7, #24]
 8012258:	005b      	lsls	r3, r3, #1
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	4413      	add	r3, r2
 801225e:	881b      	ldrh	r3, [r3, #0]
 8012260:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 8098 	beq.w	801239a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801226a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801226c:	2b20      	cmp	r3, #32
 801226e:	d006      	beq.n	801227e <create_name+0x252>
 8012270:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012272:	2b2e      	cmp	r3, #46	@ 0x2e
 8012274:	d10a      	bne.n	801228c <create_name+0x260>
 8012276:	69ba      	ldr	r2, [r7, #24]
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	429a      	cmp	r2, r3
 801227c:	d006      	beq.n	801228c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 801227e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012282:	f043 0303 	orr.w	r3, r3, #3
 8012286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801228a:	e085      	b.n	8012398 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801228c:	6a3a      	ldr	r2, [r7, #32]
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	429a      	cmp	r2, r3
 8012292:	d203      	bcs.n	801229c <create_name+0x270>
 8012294:	69ba      	ldr	r2, [r7, #24]
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	429a      	cmp	r2, r3
 801229a:	d123      	bne.n	80122e4 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	2b0b      	cmp	r3, #11
 80122a0:	d106      	bne.n	80122b0 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 80122a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122a6:	f043 0303 	orr.w	r3, r3, #3
 80122aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80122ae:	e077      	b.n	80123a0 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80122b0:	69ba      	ldr	r2, [r7, #24]
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d005      	beq.n	80122c4 <create_name+0x298>
 80122b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122bc:	f043 0303 	orr.w	r3, r3, #3
 80122c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80122c4:	69ba      	ldr	r2, [r7, #24]
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d868      	bhi.n	801239e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	61bb      	str	r3, [r7, #24]
 80122d0:	2308      	movs	r3, #8
 80122d2:	623b      	str	r3, [r7, #32]
 80122d4:	230b      	movs	r3, #11
 80122d6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80122d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80122e2:	e059      	b.n	8012398 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80122e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80122e8:	d914      	bls.n	8012314 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80122ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122ec:	2100      	movs	r1, #0
 80122ee:	4618      	mov	r0, r3
 80122f0:	f002 f974 	bl	80145dc <ff_convert>
 80122f4:	4603      	mov	r3, r0
 80122f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80122f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d004      	beq.n	8012308 <create_name+0x2dc>
 80122fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012300:	3b80      	subs	r3, #128	@ 0x80
 8012302:	4a10      	ldr	r2, [pc, #64]	@ (8012344 <create_name+0x318>)
 8012304:	5cd3      	ldrb	r3, [r2, r3]
 8012306:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801230c:	f043 0302 	orr.w	r3, r3, #2
 8012310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012316:	2b00      	cmp	r3, #0
 8012318:	d007      	beq.n	801232a <create_name+0x2fe>
 801231a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801231c:	4619      	mov	r1, r3
 801231e:	480a      	ldr	r0, [pc, #40]	@ (8012348 <create_name+0x31c>)
 8012320:	f7fe fa61 	bl	80107e6 <chk_chr>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d010      	beq.n	801234c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801232a:	235f      	movs	r3, #95	@ 0x5f
 801232c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801232e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012332:	f043 0303 	orr.w	r3, r3, #3
 8012336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801233a:	e023      	b.n	8012384 <create_name+0x358>
 801233c:	08014ac4 	.word	0x08014ac4
 8012340:	7ffffffe 	.word	0x7ffffffe
 8012344:	08014b4c 	.word	0x08014b4c
 8012348:	08014ad0 	.word	0x08014ad0
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801234c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801234e:	2b40      	cmp	r3, #64	@ 0x40
 8012350:	d909      	bls.n	8012366 <create_name+0x33a>
 8012352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012354:	2b5a      	cmp	r3, #90	@ 0x5a
 8012356:	d806      	bhi.n	8012366 <create_name+0x33a>
					b |= 2;
 8012358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801235c:	f043 0302 	orr.w	r3, r3, #2
 8012360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012364:	e00e      	b.n	8012384 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012368:	2b60      	cmp	r3, #96	@ 0x60
 801236a:	d90b      	bls.n	8012384 <create_name+0x358>
 801236c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801236e:	2b7a      	cmp	r3, #122	@ 0x7a
 8012370:	d808      	bhi.n	8012384 <create_name+0x358>
						b |= 1; w -= 0x20;
 8012372:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012376:	f043 0301 	orr.w	r3, r3, #1
 801237a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801237e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012380:	3b20      	subs	r3, #32
 8012382:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012384:	6a3b      	ldr	r3, [r7, #32]
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	623a      	str	r2, [r7, #32]
 801238a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801238c:	b2d1      	uxtb	r1, r2
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	4413      	add	r3, r2
 8012392:	460a      	mov	r2, r1
 8012394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012398:	e75b      	b.n	8012252 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801239a:	bf00      	nop
 801239c:	e000      	b.n	80123a0 <create_name+0x374>
			if (si > di) break;			/* No extension */
 801239e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80123a6:	2be5      	cmp	r3, #229	@ 0xe5
 80123a8:	d103      	bne.n	80123b2 <create_name+0x386>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2205      	movs	r2, #5
 80123ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	2b08      	cmp	r3, #8
 80123b6:	d104      	bne.n	80123c2 <create_name+0x396>
 80123b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123bc:	009b      	lsls	r3, r3, #2
 80123be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80123c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123c6:	f003 030c 	and.w	r3, r3, #12
 80123ca:	2b0c      	cmp	r3, #12
 80123cc:	d005      	beq.n	80123da <create_name+0x3ae>
 80123ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123d2:	f003 0303 	and.w	r3, r3, #3
 80123d6:	2b03      	cmp	r3, #3
 80123d8:	d105      	bne.n	80123e6 <create_name+0x3ba>
 80123da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123de:	f043 0302 	orr.w	r3, r3, #2
 80123e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80123e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123ea:	f003 0302 	and.w	r3, r3, #2
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d117      	bne.n	8012422 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80123f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123f6:	f003 0303 	and.w	r3, r3, #3
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d105      	bne.n	801240a <create_name+0x3de>
 80123fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012402:	f043 0310 	orr.w	r3, r3, #16
 8012406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801240a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801240e:	f003 030c 	and.w	r3, r3, #12
 8012412:	2b04      	cmp	r3, #4
 8012414:	d105      	bne.n	8012422 <create_name+0x3f6>
 8012416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801241a:	f043 0308 	orr.w	r3, r3, #8
 801241e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012428:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801242c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801242e:	4618      	mov	r0, r3
 8012430:	3728      	adds	r7, #40	@ 0x28
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop

08012438 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	2b2f      	cmp	r3, #47	@ 0x2f
 8012452:	d00b      	beq.n	801246c <follow_path+0x34>
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	2b5c      	cmp	r3, #92	@ 0x5c
 801245a:	d007      	beq.n	801246c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	69da      	ldr	r2, [r3, #28]
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	609a      	str	r2, [r3, #8]
 8012464:	e00d      	b.n	8012482 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	3301      	adds	r3, #1
 801246a:	603b      	str	r3, [r7, #0]
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	2b2f      	cmp	r3, #47	@ 0x2f
 8012472:	d0f8      	beq.n	8012466 <follow_path+0x2e>
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	2b5c      	cmp	r3, #92	@ 0x5c
 801247a:	d0f4      	beq.n	8012466 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	2200      	movs	r2, #0
 8012480:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	2b1f      	cmp	r3, #31
 8012488:	d80a      	bhi.n	80124a0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2280      	movs	r2, #128	@ 0x80
 801248e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012492:	2100      	movs	r1, #0
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7fe ff50 	bl	801133a <dir_sdi>
 801249a:	4603      	mov	r3, r0
 801249c:	75fb      	strb	r3, [r7, #23]
 801249e:	e05b      	b.n	8012558 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124a0:	463b      	mov	r3, r7
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff fdc1 	bl	801202c <create_name>
 80124aa:	4603      	mov	r3, r0
 80124ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80124ae:	7dfb      	ldrb	r3, [r7, #23]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d14c      	bne.n	801254e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7ff fbb7 	bl	8011c28 <dir_find>
 80124ba:	4603      	mov	r3, r0
 80124bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80124c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d01b      	beq.n	8012504 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
 80124ce:	2b04      	cmp	r3, #4
 80124d0:	d13f      	bne.n	8012552 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80124d2:	7afb      	ldrb	r3, [r7, #11]
 80124d4:	f003 0320 	and.w	r3, r3, #32
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00b      	beq.n	80124f4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124dc:	7afb      	ldrb	r3, [r7, #11]
 80124de:	f003 0304 	and.w	r3, r3, #4
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d031      	beq.n	801254a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2280      	movs	r2, #128	@ 0x80
 80124ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80124ee:	2300      	movs	r3, #0
 80124f0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80124f2:	e02e      	b.n	8012552 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80124f4:	7afb      	ldrb	r3, [r7, #11]
 80124f6:	f003 0304 	and.w	r3, r3, #4
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d129      	bne.n	8012552 <follow_path+0x11a>
 80124fe:	2305      	movs	r3, #5
 8012500:	75fb      	strb	r3, [r7, #23]
				break;
 8012502:	e026      	b.n	8012552 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012504:	7afb      	ldrb	r3, [r7, #11]
 8012506:	f003 0304 	and.w	r3, r3, #4
 801250a:	2b00      	cmp	r3, #0
 801250c:	d123      	bne.n	8012556 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	799b      	ldrb	r3, [r3, #6]
 8012512:	f003 0310 	and.w	r3, r3, #16
 8012516:	2b00      	cmp	r3, #0
 8012518:	d102      	bne.n	8012520 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801251a:	2305      	movs	r3, #5
 801251c:	75fb      	strb	r3, [r7, #23]
 801251e:	e01b      	b.n	8012558 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	68fa      	ldr	r2, [r7, #12]
 801252c:	8992      	ldrh	r2, [r2, #12]
 801252e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012532:	fb00 f202 	mul.w	r2, r0, r2
 8012536:	1a9b      	subs	r3, r3, r2
 8012538:	440b      	add	r3, r1
 801253a:	4619      	mov	r1, r3
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f7ff f8a2 	bl	8011686 <ld_clust>
 8012542:	4602      	mov	r2, r0
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	609a      	str	r2, [r3, #8]
 8012548:	e7aa      	b.n	80124a0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801254a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801254c:	e7a8      	b.n	80124a0 <follow_path+0x68>
			if (res != FR_OK) break;
 801254e:	bf00      	nop
 8012550:	e002      	b.n	8012558 <follow_path+0x120>
				break;
 8012552:	bf00      	nop
 8012554:	e000      	b.n	8012558 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012556:	bf00      	nop
			}
		}
	}

	return res;
 8012558:	7dfb      	ldrb	r3, [r7, #23]
}
 801255a:	4618      	mov	r0, r3
 801255c:	3718      	adds	r7, #24
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}

08012562 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012562:	b480      	push	{r7}
 8012564:	b087      	sub	sp, #28
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801256a:	f04f 33ff 	mov.w	r3, #4294967295
 801256e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d031      	beq.n	80125dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	617b      	str	r3, [r7, #20]
 801257e:	e002      	b.n	8012586 <get_ldnumber+0x24>
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	3301      	adds	r3, #1
 8012584:	617b      	str	r3, [r7, #20]
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	2b1f      	cmp	r3, #31
 801258c:	d903      	bls.n	8012596 <get_ldnumber+0x34>
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b3a      	cmp	r3, #58	@ 0x3a
 8012594:	d1f4      	bne.n	8012580 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	2b3a      	cmp	r3, #58	@ 0x3a
 801259c:	d11c      	bne.n	80125d8 <get_ldnumber+0x76>
			tp = *path;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	1c5a      	adds	r2, r3, #1
 80125a8:	60fa      	str	r2, [r7, #12]
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	3b30      	subs	r3, #48	@ 0x30
 80125ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	2b09      	cmp	r3, #9
 80125b4:	d80e      	bhi.n	80125d4 <get_ldnumber+0x72>
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d10a      	bne.n	80125d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d107      	bne.n	80125d4 <get_ldnumber+0x72>
					vol = (int)i;
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	3301      	adds	r3, #1
 80125cc:	617b      	str	r3, [r7, #20]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	697a      	ldr	r2, [r7, #20]
 80125d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	e002      	b.n	80125de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80125d8:	2300      	movs	r3, #0
 80125da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125dc:	693b      	ldr	r3, [r7, #16]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	371c      	adds	r7, #28
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr
	...

080125ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2200      	movs	r2, #0
 80125fa:	70da      	strb	r2, [r3, #3]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012602:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012604:	6839      	ldr	r1, [r7, #0]
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7fe fab8 	bl	8010b7c <move_window>
 801260c:	4603      	mov	r3, r0
 801260e:	2b00      	cmp	r3, #0
 8012610:	d001      	beq.n	8012616 <check_fs+0x2a>
 8012612:	2304      	movs	r3, #4
 8012614:	e038      	b.n	8012688 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	333c      	adds	r3, #60	@ 0x3c
 801261a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801261e:	4618      	mov	r0, r3
 8012620:	f7fd fffc 	bl	801061c <ld_word>
 8012624:	4603      	mov	r3, r0
 8012626:	461a      	mov	r2, r3
 8012628:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801262c:	429a      	cmp	r2, r3
 801262e:	d001      	beq.n	8012634 <check_fs+0x48>
 8012630:	2303      	movs	r3, #3
 8012632:	e029      	b.n	8012688 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801263a:	2be9      	cmp	r3, #233	@ 0xe9
 801263c:	d009      	beq.n	8012652 <check_fs+0x66>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012644:	2beb      	cmp	r3, #235	@ 0xeb
 8012646:	d11e      	bne.n	8012686 <check_fs+0x9a>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801264e:	2b90      	cmp	r3, #144	@ 0x90
 8012650:	d119      	bne.n	8012686 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	333c      	adds	r3, #60	@ 0x3c
 8012656:	3336      	adds	r3, #54	@ 0x36
 8012658:	4618      	mov	r0, r3
 801265a:	f7fd fff7 	bl	801064c <ld_dword>
 801265e:	4603      	mov	r3, r0
 8012660:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012664:	4a0a      	ldr	r2, [pc, #40]	@ (8012690 <check_fs+0xa4>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d101      	bne.n	801266e <check_fs+0x82>
 801266a:	2300      	movs	r3, #0
 801266c:	e00c      	b.n	8012688 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	333c      	adds	r3, #60	@ 0x3c
 8012672:	3352      	adds	r3, #82	@ 0x52
 8012674:	4618      	mov	r0, r3
 8012676:	f7fd ffe9 	bl	801064c <ld_dword>
 801267a:	4603      	mov	r3, r0
 801267c:	4a05      	ldr	r2, [pc, #20]	@ (8012694 <check_fs+0xa8>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d101      	bne.n	8012686 <check_fs+0x9a>
 8012682:	2300      	movs	r3, #0
 8012684:	e000      	b.n	8012688 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012686:	2302      	movs	r3, #2
}
 8012688:	4618      	mov	r0, r3
 801268a:	3708      	adds	r7, #8
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	00544146 	.word	0x00544146
 8012694:	33544146 	.word	0x33544146

08012698 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b096      	sub	sp, #88	@ 0x58
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	4613      	mov	r3, r2
 80126a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	2200      	movs	r2, #0
 80126aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f7ff ff58 	bl	8012562 <get_ldnumber>
 80126b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80126b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	da01      	bge.n	80126be <find_volume+0x26>
 80126ba:	230b      	movs	r3, #11
 80126bc:	e268      	b.n	8012b90 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80126be:	4a9f      	ldr	r2, [pc, #636]	@ (801293c <find_volume+0x2a4>)
 80126c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80126c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <find_volume+0x3a>
 80126ce:	230c      	movs	r3, #12
 80126d0:	e25e      	b.n	8012b90 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80126d8:	79fb      	ldrb	r3, [r7, #7]
 80126da:	f023 0301 	bic.w	r3, r3, #1
 80126de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d01a      	beq.n	801271e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ea:	785b      	ldrb	r3, [r3, #1]
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7fd fef5 	bl	80104dc <disk_status>
 80126f2:	4603      	mov	r3, r0
 80126f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80126f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10c      	bne.n	801271e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012704:	79fb      	ldrb	r3, [r7, #7]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d007      	beq.n	801271a <find_volume+0x82>
 801270a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801270e:	f003 0304 	and.w	r3, r3, #4
 8012712:	2b00      	cmp	r3, #0
 8012714:	d001      	beq.n	801271a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012716:	230a      	movs	r3, #10
 8012718:	e23a      	b.n	8012b90 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801271a:	2300      	movs	r3, #0
 801271c:	e238      	b.n	8012b90 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012720:	2200      	movs	r2, #0
 8012722:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012726:	b2da      	uxtb	r2, r3
 8012728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801272a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801272c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801272e:	785b      	ldrb	r3, [r3, #1]
 8012730:	4618      	mov	r0, r3
 8012732:	f7fd feed 	bl	8010510 <disk_initialize>
 8012736:	4603      	mov	r3, r0
 8012738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801273c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012740:	f003 0301 	and.w	r3, r3, #1
 8012744:	2b00      	cmp	r3, #0
 8012746:	d001      	beq.n	801274c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012748:	2303      	movs	r3, #3
 801274a:	e221      	b.n	8012b90 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d007      	beq.n	8012762 <find_volume+0xca>
 8012752:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012756:	f003 0304 	and.w	r3, r3, #4
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801275e:	230a      	movs	r3, #10
 8012760:	e216      	b.n	8012b90 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012764:	7858      	ldrb	r0, [r3, #1]
 8012766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012768:	330c      	adds	r3, #12
 801276a:	461a      	mov	r2, r3
 801276c:	2102      	movs	r1, #2
 801276e:	f7fd ff37 	bl	80105e0 <disk_ioctl>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d001      	beq.n	801277c <find_volume+0xe4>
 8012778:	2301      	movs	r3, #1
 801277a:	e209      	b.n	8012b90 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277e:	899b      	ldrh	r3, [r3, #12]
 8012780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012784:	d80d      	bhi.n	80127a2 <find_volume+0x10a>
 8012786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012788:	899b      	ldrh	r3, [r3, #12]
 801278a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801278e:	d308      	bcc.n	80127a2 <find_volume+0x10a>
 8012790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012792:	899b      	ldrh	r3, [r3, #12]
 8012794:	461a      	mov	r2, r3
 8012796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012798:	899b      	ldrh	r3, [r3, #12]
 801279a:	3b01      	subs	r3, #1
 801279c:	4013      	ands	r3, r2
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d001      	beq.n	80127a6 <find_volume+0x10e>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e1f4      	b.n	8012b90 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80127a6:	2300      	movs	r3, #0
 80127a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80127aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80127ae:	f7ff ff1d 	bl	80125ec <check_fs>
 80127b2:	4603      	mov	r3, r0
 80127b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80127b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d149      	bne.n	8012854 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127c0:	2300      	movs	r3, #0
 80127c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80127c4:	e01e      	b.n	8012804 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80127c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80127cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127ce:	011b      	lsls	r3, r3, #4
 80127d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80127d4:	4413      	add	r3, r2
 80127d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80127d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127da:	3304      	adds	r3, #4
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d006      	beq.n	80127f0 <find_volume+0x158>
 80127e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e4:	3308      	adds	r3, #8
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fd ff30 	bl	801064c <ld_dword>
 80127ec:	4602      	mov	r2, r0
 80127ee:	e000      	b.n	80127f2 <find_volume+0x15a>
 80127f0:	2200      	movs	r2, #0
 80127f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	3358      	adds	r3, #88	@ 0x58
 80127f8:	443b      	add	r3, r7
 80127fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012800:	3301      	adds	r3, #1
 8012802:	643b      	str	r3, [r7, #64]	@ 0x40
 8012804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012806:	2b03      	cmp	r3, #3
 8012808:	d9dd      	bls.n	80127c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801280a:	2300      	movs	r3, #0
 801280c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801280e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <find_volume+0x182>
 8012814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012816:	3b01      	subs	r3, #1
 8012818:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801281a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801281c:	009b      	lsls	r3, r3, #2
 801281e:	3358      	adds	r3, #88	@ 0x58
 8012820:	443b      	add	r3, r7
 8012822:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012826:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801282a:	2b00      	cmp	r3, #0
 801282c:	d005      	beq.n	801283a <find_volume+0x1a2>
 801282e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012830:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012832:	f7ff fedb 	bl	80125ec <check_fs>
 8012836:	4603      	mov	r3, r0
 8012838:	e000      	b.n	801283c <find_volume+0x1a4>
 801283a:	2303      	movs	r3, #3
 801283c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012840:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012844:	2b01      	cmp	r3, #1
 8012846:	d905      	bls.n	8012854 <find_volume+0x1bc>
 8012848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801284a:	3301      	adds	r3, #1
 801284c:	643b      	str	r3, [r7, #64]	@ 0x40
 801284e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012850:	2b03      	cmp	r3, #3
 8012852:	d9e2      	bls.n	801281a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012858:	2b04      	cmp	r3, #4
 801285a:	d101      	bne.n	8012860 <find_volume+0x1c8>
 801285c:	2301      	movs	r3, #1
 801285e:	e197      	b.n	8012b90 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012864:	2b01      	cmp	r3, #1
 8012866:	d901      	bls.n	801286c <find_volume+0x1d4>
 8012868:	230d      	movs	r3, #13
 801286a:	e191      	b.n	8012b90 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801286c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801286e:	333c      	adds	r3, #60	@ 0x3c
 8012870:	330b      	adds	r3, #11
 8012872:	4618      	mov	r0, r3
 8012874:	f7fd fed2 	bl	801061c <ld_word>
 8012878:	4603      	mov	r3, r0
 801287a:	461a      	mov	r2, r3
 801287c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801287e:	899b      	ldrh	r3, [r3, #12]
 8012880:	429a      	cmp	r2, r3
 8012882:	d001      	beq.n	8012888 <find_volume+0x1f0>
 8012884:	230d      	movs	r3, #13
 8012886:	e183      	b.n	8012b90 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288a:	333c      	adds	r3, #60	@ 0x3c
 801288c:	3316      	adds	r3, #22
 801288e:	4618      	mov	r0, r3
 8012890:	f7fd fec4 	bl	801061c <ld_word>
 8012894:	4603      	mov	r3, r0
 8012896:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <find_volume+0x214>
 801289e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a0:	333c      	adds	r3, #60	@ 0x3c
 80128a2:	3324      	adds	r3, #36	@ 0x24
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fd fed1 	bl	801064c <ld_dword>
 80128aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80128ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80128b0:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80128b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b4:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80128b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80128bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128be:	789b      	ldrb	r3, [r3, #2]
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d005      	beq.n	80128d0 <find_volume+0x238>
 80128c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c6:	789b      	ldrb	r3, [r3, #2]
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	d001      	beq.n	80128d0 <find_volume+0x238>
 80128cc:	230d      	movs	r3, #13
 80128ce:	e15f      	b.n	8012b90 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80128d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128d2:	789b      	ldrb	r3, [r3, #2]
 80128d4:	461a      	mov	r2, r3
 80128d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128d8:	fb02 f303 	mul.w	r3, r2, r3
 80128dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80128de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80128e4:	461a      	mov	r2, r3
 80128e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80128ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ec:	895b      	ldrh	r3, [r3, #10]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d008      	beq.n	8012904 <find_volume+0x26c>
 80128f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128f4:	895b      	ldrh	r3, [r3, #10]
 80128f6:	461a      	mov	r2, r3
 80128f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128fa:	895b      	ldrh	r3, [r3, #10]
 80128fc:	3b01      	subs	r3, #1
 80128fe:	4013      	ands	r3, r2
 8012900:	2b00      	cmp	r3, #0
 8012902:	d001      	beq.n	8012908 <find_volume+0x270>
 8012904:	230d      	movs	r3, #13
 8012906:	e143      	b.n	8012b90 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801290a:	333c      	adds	r3, #60	@ 0x3c
 801290c:	3311      	adds	r3, #17
 801290e:	4618      	mov	r0, r3
 8012910:	f7fd fe84 	bl	801061c <ld_word>
 8012914:	4603      	mov	r3, r0
 8012916:	461a      	mov	r2, r3
 8012918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291e:	891b      	ldrh	r3, [r3, #8]
 8012920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012922:	8992      	ldrh	r2, [r2, #12]
 8012924:	0952      	lsrs	r2, r2, #5
 8012926:	b292      	uxth	r2, r2
 8012928:	fbb3 f1f2 	udiv	r1, r3, r2
 801292c:	fb01 f202 	mul.w	r2, r1, r2
 8012930:	1a9b      	subs	r3, r3, r2
 8012932:	b29b      	uxth	r3, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	d003      	beq.n	8012940 <find_volume+0x2a8>
 8012938:	230d      	movs	r3, #13
 801293a:	e129      	b.n	8012b90 <find_volume+0x4f8>
 801293c:	24004bcc 	.word	0x24004bcc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012942:	333c      	adds	r3, #60	@ 0x3c
 8012944:	3313      	adds	r3, #19
 8012946:	4618      	mov	r0, r3
 8012948:	f7fd fe68 	bl	801061c <ld_word>
 801294c:	4603      	mov	r3, r0
 801294e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <find_volume+0x2cc>
 8012956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012958:	333c      	adds	r3, #60	@ 0x3c
 801295a:	3320      	adds	r3, #32
 801295c:	4618      	mov	r0, r3
 801295e:	f7fd fe75 	bl	801064c <ld_dword>
 8012962:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012966:	333c      	adds	r3, #60	@ 0x3c
 8012968:	330e      	adds	r3, #14
 801296a:	4618      	mov	r0, r3
 801296c:	f7fd fe56 	bl	801061c <ld_word>
 8012970:	4603      	mov	r3, r0
 8012972:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012974:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012976:	2b00      	cmp	r3, #0
 8012978:	d101      	bne.n	801297e <find_volume+0x2e6>
 801297a:	230d      	movs	r3, #13
 801297c:	e108      	b.n	8012b90 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801297e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012982:	4413      	add	r3, r2
 8012984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012986:	8911      	ldrh	r1, [r2, #8]
 8012988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801298a:	8992      	ldrh	r2, [r2, #12]
 801298c:	0952      	lsrs	r2, r2, #5
 801298e:	b292      	uxth	r2, r2
 8012990:	fbb1 f2f2 	udiv	r2, r1, r2
 8012994:	b292      	uxth	r2, r2
 8012996:	4413      	add	r3, r2
 8012998:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801299a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801299e:	429a      	cmp	r2, r3
 80129a0:	d201      	bcs.n	80129a6 <find_volume+0x30e>
 80129a2:	230d      	movs	r3, #13
 80129a4:	e0f4      	b.n	8012b90 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80129a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80129a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129ae:	8952      	ldrh	r2, [r2, #10]
 80129b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80129b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80129b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d101      	bne.n	80129c0 <find_volume+0x328>
 80129bc:	230d      	movs	r3, #13
 80129be:	e0e7      	b.n	8012b90 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80129c0:	2303      	movs	r3, #3
 80129c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80129c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d802      	bhi.n	80129d6 <find_volume+0x33e>
 80129d0:	2302      	movs	r3, #2
 80129d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80129d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80129dc:	4293      	cmp	r3, r2
 80129de:	d802      	bhi.n	80129e6 <find_volume+0x34e>
 80129e0:	2301      	movs	r3, #1
 80129e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80129e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e8:	1c9a      	adds	r2, r3, #2
 80129ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ec:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80129ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80129f2:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80129f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80129f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129f8:	441a      	add	r2, r3
 80129fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129fc:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80129fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a02:	441a      	add	r2, r3
 8012a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a06:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8012a08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a0c:	2b03      	cmp	r3, #3
 8012a0e:	d11e      	bne.n	8012a4e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a12:	333c      	adds	r3, #60	@ 0x3c
 8012a14:	332a      	adds	r3, #42	@ 0x2a
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fd fe00 	bl	801061c <ld_word>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <find_volume+0x38e>
 8012a22:	230d      	movs	r3, #13
 8012a24:	e0b4      	b.n	8012b90 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a28:	891b      	ldrh	r3, [r3, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <find_volume+0x39a>
 8012a2e:	230d      	movs	r3, #13
 8012a30:	e0ae      	b.n	8012b90 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a34:	333c      	adds	r3, #60	@ 0x3c
 8012a36:	332c      	adds	r3, #44	@ 0x2c
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fd fe07 	bl	801064c <ld_dword>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a42:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a46:	6a1b      	ldr	r3, [r3, #32]
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a4c:	e01f      	b.n	8012a8e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a50:	891b      	ldrh	r3, [r3, #8]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d101      	bne.n	8012a5a <find_volume+0x3c2>
 8012a56:	230d      	movs	r3, #13
 8012a58:	e09a      	b.n	8012b90 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a60:	441a      	add	r2, r3
 8012a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a64:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a6a:	2b02      	cmp	r3, #2
 8012a6c:	d103      	bne.n	8012a76 <find_volume+0x3de>
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	e00a      	b.n	8012a8c <find_volume+0x3f4>
 8012a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a78:	6a1a      	ldr	r2, [r3, #32]
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	005b      	lsls	r3, r3, #1
 8012a7e:	4413      	add	r3, r2
 8012a80:	085a      	lsrs	r2, r3, #1
 8012a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	f003 0301 	and.w	r3, r3, #1
 8012a8a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a8c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	4619      	mov	r1, r3
 8012a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a9a:	440b      	add	r3, r1
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012aa0:	8989      	ldrh	r1, [r1, #12]
 8012aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d201      	bcs.n	8012aae <find_volume+0x416>
 8012aaa:	230d      	movs	r3, #13
 8012aac:	e070      	b.n	8012b90 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab4:	619a      	str	r2, [r3, #24]
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab8:	699a      	ldr	r2, [r3, #24]
 8012aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012abc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8012abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ac0:	2280      	movs	r2, #128	@ 0x80
 8012ac2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012ac8:	2b03      	cmp	r3, #3
 8012aca:	d149      	bne.n	8012b60 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ace:	333c      	adds	r3, #60	@ 0x3c
 8012ad0:	3330      	adds	r3, #48	@ 0x30
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fd fda2 	bl	801061c <ld_word>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d140      	bne.n	8012b60 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012ae6:	f7fe f849 	bl	8010b7c <move_window>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d137      	bne.n	8012b60 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af2:	2200      	movs	r2, #0
 8012af4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af8:	333c      	adds	r3, #60	@ 0x3c
 8012afa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fd fd8c 	bl	801061c <ld_word>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d127      	bne.n	8012b60 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b12:	333c      	adds	r3, #60	@ 0x3c
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fd fd99 	bl	801064c <ld_dword>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8012b98 <find_volume+0x500>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d11e      	bne.n	8012b60 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b24:	333c      	adds	r3, #60	@ 0x3c
 8012b26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fd fd8e 	bl	801064c <ld_dword>
 8012b30:	4603      	mov	r3, r0
 8012b32:	4a1a      	ldr	r2, [pc, #104]	@ (8012b9c <find_volume+0x504>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d113      	bne.n	8012b60 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b3a:	333c      	adds	r3, #60	@ 0x3c
 8012b3c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fd fd83 	bl	801064c <ld_dword>
 8012b46:	4602      	mov	r2, r0
 8012b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b4a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b4e:	333c      	adds	r3, #60	@ 0x3c
 8012b50:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fd fd79 	bl	801064c <ld_dword>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b5e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012b66:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012b68:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba0 <find_volume+0x508>)
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	b29a      	uxth	r2, r3
 8012b70:	4b0b      	ldr	r3, [pc, #44]	@ (8012ba0 <find_volume+0x508>)
 8012b72:	801a      	strh	r2, [r3, #0]
 8012b74:	4b0a      	ldr	r3, [pc, #40]	@ (8012ba0 <find_volume+0x508>)
 8012b76:	881a      	ldrh	r2, [r3, #0]
 8012b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b7a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b7e:	4a09      	ldr	r2, [pc, #36]	@ (8012ba4 <find_volume+0x50c>)
 8012b80:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b84:	2200      	movs	r2, #0
 8012b86:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b8a:	f7fd ff8f 	bl	8010aac <clear_lock>
#endif
	return FR_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3758      	adds	r7, #88	@ 0x58
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	41615252 	.word	0x41615252
 8012b9c:	61417272 	.word	0x61417272
 8012ba0:	24004bd0 	.word	0x24004bd0
 8012ba4:	24004bf4 	.word	0x24004bf4

08012ba8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012bb2:	2309      	movs	r3, #9
 8012bb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d01c      	beq.n	8012bf6 <validate+0x4e>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d018      	beq.n	8012bf6 <validate+0x4e>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d013      	beq.n	8012bf6 <validate+0x4e>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	889a      	ldrh	r2, [r3, #4]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	88db      	ldrh	r3, [r3, #6]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d10c      	bne.n	8012bf6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	785b      	ldrb	r3, [r3, #1]
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fd fc7a 	bl	80104dc <disk_status>
 8012be8:	4603      	mov	r3, r0
 8012bea:	f003 0301 	and.w	r3, r3, #1
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d101      	bne.n	8012bf6 <validate+0x4e>
			res = FR_OK;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012bf6:	7bfb      	ldrb	r3, [r7, #15]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d102      	bne.n	8012c02 <validate+0x5a>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	e000      	b.n	8012c04 <validate+0x5c>
 8012c02:	2300      	movs	r3, #0
 8012c04:	683a      	ldr	r2, [r7, #0]
 8012c06:	6013      	str	r3, [r2, #0]
	return res;
 8012c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
	...

08012c14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b088      	sub	sp, #32
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c26:	f107 0310 	add.w	r3, r7, #16
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7ff fc99 	bl	8012562 <get_ldnumber>
 8012c30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	da01      	bge.n	8012c3c <f_mount+0x28>
 8012c38:	230b      	movs	r3, #11
 8012c3a:	e02b      	b.n	8012c94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012c3c:	4a17      	ldr	r2, [pc, #92]	@ (8012c9c <f_mount+0x88>)
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d005      	beq.n	8012c58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012c4c:	69b8      	ldr	r0, [r7, #24]
 8012c4e:	f7fd ff2d 	bl	8010aac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	2200      	movs	r2, #0
 8012c56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d002      	beq.n	8012c64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2200      	movs	r2, #0
 8012c62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012c64:	68fa      	ldr	r2, [r7, #12]
 8012c66:	490d      	ldr	r1, [pc, #52]	@ (8012c9c <f_mount+0x88>)
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <f_mount+0x66>
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d001      	beq.n	8012c7e <f_mount+0x6a>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e00a      	b.n	8012c94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012c7e:	f107 010c 	add.w	r1, r7, #12
 8012c82:	f107 0308 	add.w	r3, r7, #8
 8012c86:	2200      	movs	r2, #0
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff fd05 	bl	8012698 <find_volume>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3720      	adds	r7, #32
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	24004bcc 	.word	0x24004bcc

08012ca0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b09a      	sub	sp, #104	@ 0x68
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	60f8      	str	r0, [r7, #12]
 8012ca8:	60b9      	str	r1, [r7, #8]
 8012caa:	4613      	mov	r3, r2
 8012cac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d101      	bne.n	8012cb8 <f_open+0x18>
 8012cb4:	2309      	movs	r3, #9
 8012cb6:	e1b7      	b.n	8013028 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012cb8:	79fb      	ldrb	r3, [r7, #7]
 8012cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012cbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012cc0:	79fa      	ldrb	r2, [r7, #7]
 8012cc2:	f107 0114 	add.w	r1, r7, #20
 8012cc6:	f107 0308 	add.w	r3, r7, #8
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7ff fce4 	bl	8012698 <find_volume>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8012cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	f040 819b 	bne.w	8013016 <f_open+0x376>
		dj.obj.fs = fs;
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	f107 0318 	add.w	r3, r7, #24
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff fba3 	bl	8012438 <follow_path>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d118      	bne.n	8012d32 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012d00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012d04:	b25b      	sxtb	r3, r3
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	da03      	bge.n	8012d12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012d0a:	2306      	movs	r3, #6
 8012d0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012d10:	e00f      	b.n	8012d32 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d12:	79fb      	ldrb	r3, [r7, #7]
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	bf8c      	ite	hi
 8012d18:	2301      	movhi	r3, #1
 8012d1a:	2300      	movls	r3, #0
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	461a      	mov	r2, r3
 8012d20:	f107 0318 	add.w	r3, r7, #24
 8012d24:	4611      	mov	r1, r2
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fd fd78 	bl	801081c <chk_lock>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012d32:	79fb      	ldrb	r3, [r7, #7]
 8012d34:	f003 031c 	and.w	r3, r3, #28
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d07f      	beq.n	8012e3c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012d3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d017      	beq.n	8012d74 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012d44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	d10e      	bne.n	8012d6a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012d4c:	f7fd fdc2 	bl	80108d4 <enq_lock>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d006      	beq.n	8012d64 <f_open+0xc4>
 8012d56:	f107 0318 	add.w	r3, r7, #24
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff f824 	bl	8011da8 <dir_register>
 8012d60:	4603      	mov	r3, r0
 8012d62:	e000      	b.n	8012d66 <f_open+0xc6>
 8012d64:	2312      	movs	r3, #18
 8012d66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012d6a:	79fb      	ldrb	r3, [r7, #7]
 8012d6c:	f043 0308 	orr.w	r3, r3, #8
 8012d70:	71fb      	strb	r3, [r7, #7]
 8012d72:	e010      	b.n	8012d96 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012d74:	7fbb      	ldrb	r3, [r7, #30]
 8012d76:	f003 0311 	and.w	r3, r3, #17
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d003      	beq.n	8012d86 <f_open+0xe6>
					res = FR_DENIED;
 8012d7e:	2307      	movs	r3, #7
 8012d80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012d84:	e007      	b.n	8012d96 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	f003 0304 	and.w	r3, r3, #4
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <f_open+0xf6>
 8012d90:	2308      	movs	r3, #8
 8012d92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d168      	bne.n	8012e70 <f_open+0x1d0>
 8012d9e:	79fb      	ldrb	r3, [r7, #7]
 8012da0:	f003 0308 	and.w	r3, r3, #8
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d063      	beq.n	8012e70 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012da8:	f7fc fe76 	bl	800fa98 <get_fattime>
 8012dac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db0:	330e      	adds	r3, #14
 8012db2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7fd fc87 	bl	80106c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dbc:	3316      	adds	r3, #22
 8012dbe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fd fc81 	bl	80106c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc8:	330b      	adds	r3, #11
 8012dca:	2220      	movs	r2, #32
 8012dcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe fc56 	bl	8011686 <ld_clust>
 8012dda:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012de0:	2200      	movs	r2, #0
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe fc6e 	bl	80116c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dea:	331c      	adds	r3, #28
 8012dec:	2100      	movs	r1, #0
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7fd fc6a 	bl	80106c8 <st_dword>
					fs->wflag = 1;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	2201      	movs	r2, #1
 8012df8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d037      	beq.n	8012e70 <f_open+0x1d0>
						dw = fs->winsect;
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e04:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012e06:	f107 0318 	add.w	r3, r7, #24
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fe f95e 	bl	80110d0 <remove_chain>
 8012e14:	4603      	mov	r3, r0
 8012e16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8012e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d126      	bne.n	8012e70 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fd fea8 	bl	8010b7c <move_window>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012e36:	3a01      	subs	r2, #1
 8012e38:	615a      	str	r2, [r3, #20]
 8012e3a:	e019      	b.n	8012e70 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d115      	bne.n	8012e70 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012e44:	7fbb      	ldrb	r3, [r7, #30]
 8012e46:	f003 0310 	and.w	r3, r3, #16
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d003      	beq.n	8012e56 <f_open+0x1b6>
					res = FR_NO_FILE;
 8012e4e:	2304      	movs	r3, #4
 8012e50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012e54:	e00c      	b.n	8012e70 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012e56:	79fb      	ldrb	r3, [r7, #7]
 8012e58:	f003 0302 	and.w	r3, r3, #2
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d007      	beq.n	8012e70 <f_open+0x1d0>
 8012e60:	7fbb      	ldrb	r3, [r7, #30]
 8012e62:	f003 0301 	and.w	r3, r3, #1
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <f_open+0x1d0>
						res = FR_DENIED;
 8012e6a:	2307      	movs	r3, #7
 8012e6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012e70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d126      	bne.n	8012ec6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e78:	79fb      	ldrb	r3, [r7, #7]
 8012e7a:	f003 0308 	and.w	r3, r3, #8
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d003      	beq.n	8012e8a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012e82:	79fb      	ldrb	r3, [r7, #7]
 8012e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012e92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	bf8c      	ite	hi
 8012e9e:	2301      	movhi	r3, #1
 8012ea0:	2300      	movls	r3, #0
 8012ea2:	b2db      	uxtb	r3, r3
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	f107 0318 	add.w	r3, r7, #24
 8012eaa:	4611      	mov	r1, r2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fd fd33 	bl	8010918 <inc_lock>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	691b      	ldr	r3, [r3, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d102      	bne.n	8012ec6 <f_open+0x226>
 8012ec0:	2302      	movs	r3, #2
 8012ec2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012ec6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f040 80a3 	bne.w	8013016 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012ed4:	4611      	mov	r1, r2
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fe fbd5 	bl	8011686 <ld_clust>
 8012edc:	4602      	mov	r2, r0
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ee4:	331c      	adds	r3, #28
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7fd fbb0 	bl	801064c <ld_dword>
 8012eec:	4602      	mov	r2, r0
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	88da      	ldrh	r2, [r3, #6]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	79fa      	ldrb	r2, [r7, #7]
 8012f0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	2200      	movs	r2, #0
 8012f16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	3330      	adds	r3, #48	@ 0x30
 8012f22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012f26:	2100      	movs	r1, #0
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7fd fc1a 	bl	8010762 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012f2e:	79fb      	ldrb	r3, [r7, #7]
 8012f30:	f003 0320 	and.w	r3, r3, #32
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d06e      	beq.n	8013016 <f_open+0x376>
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d06a      	beq.n	8013016 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	68da      	ldr	r2, [r3, #12]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	895b      	ldrh	r3, [r3, #10]
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	899b      	ldrh	r3, [r3, #12]
 8012f52:	fb02 f303 	mul.w	r3, r2, r3
 8012f56:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f64:	e016      	b.n	8012f94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fd fec3 	bl	8010cf6 <get_fat>
 8012f70:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d802      	bhi.n	8012f7e <f_open+0x2de>
 8012f78:	2302      	movs	r3, #2
 8012f7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f84:	d102      	bne.n	8012f8c <f_open+0x2ec>
 8012f86:	2301      	movs	r3, #1
 8012f88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d103      	bne.n	8012fa4 <f_open+0x304>
 8012f9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d8e0      	bhi.n	8012f66 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012fa8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012faa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d131      	bne.n	8013016 <f_open+0x376>
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	899b      	ldrh	r3, [r3, #12]
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fbe:	fb01 f202 	mul.w	r2, r1, r2
 8012fc2:	1a9b      	subs	r3, r3, r2
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d026      	beq.n	8013016 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7fd fe73 	bl	8010cb8 <clust2sect>
 8012fd2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d103      	bne.n	8012fe2 <f_open+0x342>
						res = FR_INT_ERR;
 8012fda:	2302      	movs	r3, #2
 8012fdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012fe0:	e019      	b.n	8013016 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	899b      	ldrh	r3, [r3, #12]
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8012fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ff0:	441a      	add	r2, r3
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	7858      	ldrb	r0, [r3, #1]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6a1a      	ldr	r2, [r3, #32]
 8013004:	2301      	movs	r3, #1
 8013006:	f7fd faab 	bl	8010560 <disk_read>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d002      	beq.n	8013016 <f_open+0x376>
 8013010:	2301      	movs	r3, #1
 8013012:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013016:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801301a:	2b00      	cmp	r3, #0
 801301c:	d002      	beq.n	8013024 <f_open+0x384>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013028:	4618      	mov	r0, r3
 801302a:	3768      	adds	r7, #104	@ 0x68
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08e      	sub	sp, #56	@ 0x38
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	2200      	movs	r2, #0
 8013046:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f107 0214 	add.w	r2, r7, #20
 801304e:	4611      	mov	r1, r2
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fda9 	bl	8012ba8 <validate>
 8013056:	4603      	mov	r3, r0
 8013058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801305c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013060:	2b00      	cmp	r3, #0
 8013062:	d107      	bne.n	8013074 <f_read+0x44>
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	7d5b      	ldrb	r3, [r3, #21]
 8013068:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801306c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013070:	2b00      	cmp	r3, #0
 8013072:	d002      	beq.n	801307a <f_read+0x4a>
 8013074:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013078:	e135      	b.n	80132e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	7d1b      	ldrb	r3, [r3, #20]
 801307e:	f003 0301 	and.w	r3, r3, #1
 8013082:	2b00      	cmp	r3, #0
 8013084:	d101      	bne.n	801308a <f_read+0x5a>
 8013086:	2307      	movs	r3, #7
 8013088:	e12d      	b.n	80132e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68da      	ldr	r2, [r3, #12]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	6a3b      	ldr	r3, [r7, #32]
 801309a:	429a      	cmp	r2, r3
 801309c:	f240 811e 	bls.w	80132dc <f_read+0x2ac>
 80130a0:	6a3b      	ldr	r3, [r7, #32]
 80130a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80130a4:	e11a      	b.n	80132dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	8992      	ldrh	r2, [r2, #12]
 80130ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80130b2:	fb01 f202 	mul.w	r2, r1, r2
 80130b6:	1a9b      	subs	r3, r3, r2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 80d5 	bne.w	8013268 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	699b      	ldr	r3, [r3, #24]
 80130c2:	697a      	ldr	r2, [r7, #20]
 80130c4:	8992      	ldrh	r2, [r2, #12]
 80130c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80130ca:	697a      	ldr	r2, [r7, #20]
 80130cc:	8952      	ldrh	r2, [r2, #10]
 80130ce:	3a01      	subs	r2, #1
 80130d0:	4013      	ands	r3, r2
 80130d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d12f      	bne.n	801313a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	699b      	ldr	r3, [r3, #24]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d103      	bne.n	80130ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	689b      	ldr	r3, [r3, #8]
 80130e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80130e8:	e013      	b.n	8013112 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d007      	beq.n	8013102 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	699b      	ldr	r3, [r3, #24]
 80130f6:	4619      	mov	r1, r3
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f7fe f8e6 	bl	80112ca <clmt_clust>
 80130fe:	6338      	str	r0, [r7, #48]	@ 0x30
 8013100:	e007      	b.n	8013112 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	69db      	ldr	r3, [r3, #28]
 8013108:	4619      	mov	r1, r3
 801310a:	4610      	mov	r0, r2
 801310c:	f7fd fdf3 	bl	8010cf6 <get_fat>
 8013110:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013114:	2b01      	cmp	r3, #1
 8013116:	d804      	bhi.n	8013122 <f_read+0xf2>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2202      	movs	r2, #2
 801311c:	755a      	strb	r2, [r3, #21]
 801311e:	2302      	movs	r3, #2
 8013120:	e0e1      	b.n	80132e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013128:	d104      	bne.n	8013134 <f_read+0x104>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2201      	movs	r2, #1
 801312e:	755a      	strb	r2, [r3, #21]
 8013130:	2301      	movs	r3, #1
 8013132:	e0d8      	b.n	80132e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013138:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801313a:	697a      	ldr	r2, [r7, #20]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	69db      	ldr	r3, [r3, #28]
 8013140:	4619      	mov	r1, r3
 8013142:	4610      	mov	r0, r2
 8013144:	f7fd fdb8 	bl	8010cb8 <clust2sect>
 8013148:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d104      	bne.n	801315a <f_read+0x12a>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2202      	movs	r2, #2
 8013154:	755a      	strb	r2, [r3, #21]
 8013156:	2302      	movs	r3, #2
 8013158:	e0c5      	b.n	80132e6 <f_read+0x2b6>
			sect += csect;
 801315a:	69ba      	ldr	r2, [r7, #24]
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	4413      	add	r3, r2
 8013160:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	899b      	ldrh	r3, [r3, #12]
 8013166:	461a      	mov	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	fbb3 f3f2 	udiv	r3, r3, r2
 801316e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013172:	2b00      	cmp	r3, #0
 8013174:	d041      	beq.n	80131fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013176:	69fa      	ldr	r2, [r7, #28]
 8013178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317a:	4413      	add	r3, r2
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	8952      	ldrh	r2, [r2, #10]
 8013180:	4293      	cmp	r3, r2
 8013182:	d905      	bls.n	8013190 <f_read+0x160>
					cc = fs->csize - csect;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	895b      	ldrh	r3, [r3, #10]
 8013188:	461a      	mov	r2, r3
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	1ad3      	subs	r3, r2, r3
 801318e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	7858      	ldrb	r0, [r3, #1]
 8013194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013196:	69ba      	ldr	r2, [r7, #24]
 8013198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801319a:	f7fd f9e1 	bl	8010560 <disk_read>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <f_read+0x17e>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2201      	movs	r2, #1
 80131a8:	755a      	strb	r2, [r3, #21]
 80131aa:	2301      	movs	r3, #1
 80131ac:	e09b      	b.n	80132e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	7d1b      	ldrb	r3, [r3, #20]
 80131b2:	b25b      	sxtb	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	da18      	bge.n	80131ea <f_read+0x1ba>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6a1a      	ldr	r2, [r3, #32]
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d911      	bls.n	80131ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	6a1a      	ldr	r2, [r3, #32]
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	697a      	ldr	r2, [r7, #20]
 80131d0:	8992      	ldrh	r2, [r2, #12]
 80131d2:	fb02 f303 	mul.w	r3, r2, r3
 80131d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131d8:	18d0      	adds	r0, r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	899b      	ldrh	r3, [r3, #12]
 80131e4:	461a      	mov	r2, r3
 80131e6:	f7fd fa9b 	bl	8010720 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	899b      	ldrh	r3, [r3, #12]
 80131ee:	461a      	mov	r2, r3
 80131f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131f2:	fb02 f303 	mul.w	r3, r2, r3
 80131f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80131f8:	e05c      	b.n	80132b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6a1b      	ldr	r3, [r3, #32]
 80131fe:	69ba      	ldr	r2, [r7, #24]
 8013200:	429a      	cmp	r2, r3
 8013202:	d02e      	beq.n	8013262 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	7d1b      	ldrb	r3, [r3, #20]
 8013208:	b25b      	sxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	da18      	bge.n	8013240 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	7858      	ldrb	r0, [r3, #1]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6a1a      	ldr	r2, [r3, #32]
 801321c:	2301      	movs	r3, #1
 801321e:	f7fd f9bf 	bl	80105a0 <disk_write>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d004      	beq.n	8013232 <f_read+0x202>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	755a      	strb	r2, [r3, #21]
 801322e:	2301      	movs	r3, #1
 8013230:	e059      	b.n	80132e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	7d1b      	ldrb	r3, [r3, #20]
 8013236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801323a:	b2da      	uxtb	r2, r3
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	7858      	ldrb	r0, [r3, #1]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801324a:	2301      	movs	r3, #1
 801324c:	69ba      	ldr	r2, [r7, #24]
 801324e:	f7fd f987 	bl	8010560 <disk_read>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d004      	beq.n	8013262 <f_read+0x232>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2201      	movs	r2, #1
 801325c:	755a      	strb	r2, [r3, #21]
 801325e:	2301      	movs	r3, #1
 8013260:	e041      	b.n	80132e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	69ba      	ldr	r2, [r7, #24]
 8013266:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	899b      	ldrh	r3, [r3, #12]
 801326c:	4618      	mov	r0, r3
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	699b      	ldr	r3, [r3, #24]
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	8992      	ldrh	r2, [r2, #12]
 8013276:	fbb3 f1f2 	udiv	r1, r3, r2
 801327a:	fb01 f202 	mul.w	r2, r1, r2
 801327e:	1a9b      	subs	r3, r3, r2
 8013280:	1ac3      	subs	r3, r0, r3
 8013282:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	429a      	cmp	r2, r3
 801328a:	d901      	bls.n	8013290 <f_read+0x260>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	699b      	ldr	r3, [r3, #24]
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	8992      	ldrh	r2, [r2, #12]
 801329e:	fbb3 f0f2 	udiv	r0, r3, r2
 80132a2:	fb00 f202 	mul.w	r2, r0, r2
 80132a6:	1a9b      	subs	r3, r3, r2
 80132a8:	440b      	add	r3, r1
 80132aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80132ac:	4619      	mov	r1, r3
 80132ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80132b0:	f7fd fa36 	bl	8010720 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b8:	4413      	add	r3, r2
 80132ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	699a      	ldr	r2, [r3, #24]
 80132c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c2:	441a      	add	r2, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	619a      	str	r2, [r3, #24]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ce:	441a      	add	r2, r3
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f47f aee1 	bne.w	80130a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3738      	adds	r7, #56	@ 0x38
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b08c      	sub	sp, #48	@ 0x30
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f107 0210 	add.w	r2, r7, #16
 801330c:	4611      	mov	r1, r2
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff fc4a 	bl	8012ba8 <validate>
 8013314:	4603      	mov	r3, r0
 8013316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801331a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801331e:	2b00      	cmp	r3, #0
 8013320:	d107      	bne.n	8013332 <f_write+0x44>
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	7d5b      	ldrb	r3, [r3, #21]
 8013326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801332a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d002      	beq.n	8013338 <f_write+0x4a>
 8013332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013336:	e16a      	b.n	801360e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	7d1b      	ldrb	r3, [r3, #20]
 801333c:	f003 0302 	and.w	r3, r3, #2
 8013340:	2b00      	cmp	r3, #0
 8013342:	d101      	bne.n	8013348 <f_write+0x5a>
 8013344:	2307      	movs	r3, #7
 8013346:	e162      	b.n	801360e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	699a      	ldr	r2, [r3, #24]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	441a      	add	r2, r3
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	699b      	ldr	r3, [r3, #24]
 8013354:	429a      	cmp	r2, r3
 8013356:	f080 814c 	bcs.w	80135f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	699b      	ldr	r3, [r3, #24]
 801335e:	43db      	mvns	r3, r3
 8013360:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013362:	e146      	b.n	80135f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	693a      	ldr	r2, [r7, #16]
 801336a:	8992      	ldrh	r2, [r2, #12]
 801336c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013370:	fb01 f202 	mul.w	r2, r1, r2
 8013374:	1a9b      	subs	r3, r3, r2
 8013376:	2b00      	cmp	r3, #0
 8013378:	f040 80f1 	bne.w	801355e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	693a      	ldr	r2, [r7, #16]
 8013382:	8992      	ldrh	r2, [r2, #12]
 8013384:	fbb3 f3f2 	udiv	r3, r3, r2
 8013388:	693a      	ldr	r2, [r7, #16]
 801338a:	8952      	ldrh	r2, [r2, #10]
 801338c:	3a01      	subs	r2, #1
 801338e:	4013      	ands	r3, r2
 8013390:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d143      	bne.n	8013420 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10c      	bne.n	80133ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80133a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d11a      	bne.n	80133e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2100      	movs	r1, #0
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fd fef2 	bl	801119a <create_chain>
 80133b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80133b8:	e013      	b.n	80133e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d007      	beq.n	80133d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	699b      	ldr	r3, [r3, #24]
 80133c6:	4619      	mov	r1, r3
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f7fd ff7e 	bl	80112ca <clmt_clust>
 80133ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80133d0:	e007      	b.n	80133e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80133d2:	68fa      	ldr	r2, [r7, #12]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	4619      	mov	r1, r3
 80133da:	4610      	mov	r0, r2
 80133dc:	f7fd fedd 	bl	801119a <create_chain>
 80133e0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f000 8109 	beq.w	80135fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d104      	bne.n	80133fa <f_write+0x10c>
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2202      	movs	r2, #2
 80133f4:	755a      	strb	r2, [r3, #21]
 80133f6:	2302      	movs	r3, #2
 80133f8:	e109      	b.n	801360e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013400:	d104      	bne.n	801340c <f_write+0x11e>
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2201      	movs	r2, #1
 8013406:	755a      	strb	r2, [r3, #21]
 8013408:	2301      	movs	r3, #1
 801340a:	e100      	b.n	801360e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013410:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d102      	bne.n	8013420 <f_write+0x132>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801341e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	7d1b      	ldrb	r3, [r3, #20]
 8013424:	b25b      	sxtb	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	da18      	bge.n	801345c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	7858      	ldrb	r0, [r3, #1]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6a1a      	ldr	r2, [r3, #32]
 8013438:	2301      	movs	r3, #1
 801343a:	f7fd f8b1 	bl	80105a0 <disk_write>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d004      	beq.n	801344e <f_write+0x160>
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2201      	movs	r2, #1
 8013448:	755a      	strb	r2, [r3, #21]
 801344a:	2301      	movs	r3, #1
 801344c:	e0df      	b.n	801360e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	7d1b      	ldrb	r3, [r3, #20]
 8013452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013456:	b2da      	uxtb	r2, r3
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801345c:	693a      	ldr	r2, [r7, #16]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	69db      	ldr	r3, [r3, #28]
 8013462:	4619      	mov	r1, r3
 8013464:	4610      	mov	r0, r2
 8013466:	f7fd fc27 	bl	8010cb8 <clust2sect>
 801346a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d104      	bne.n	801347c <f_write+0x18e>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2202      	movs	r2, #2
 8013476:	755a      	strb	r2, [r3, #21]
 8013478:	2302      	movs	r3, #2
 801347a:	e0c8      	b.n	801360e <f_write+0x320>
			sect += csect;
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	4413      	add	r3, r2
 8013482:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	899b      	ldrh	r3, [r3, #12]
 8013488:	461a      	mov	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013490:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d043      	beq.n	8013520 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	6a3b      	ldr	r3, [r7, #32]
 801349c:	4413      	add	r3, r2
 801349e:	693a      	ldr	r2, [r7, #16]
 80134a0:	8952      	ldrh	r2, [r2, #10]
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d905      	bls.n	80134b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	895b      	ldrh	r3, [r3, #10]
 80134aa:	461a      	mov	r2, r3
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	7858      	ldrb	r0, [r3, #1]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	69f9      	ldr	r1, [r7, #28]
 80134bc:	f7fd f870 	bl	80105a0 <disk_write>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d004      	beq.n	80134d0 <f_write+0x1e2>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2201      	movs	r2, #1
 80134ca:	755a      	strb	r2, [r3, #21]
 80134cc:	2301      	movs	r3, #1
 80134ce:	e09e      	b.n	801360e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6a1a      	ldr	r2, [r3, #32]
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	6a3a      	ldr	r2, [r7, #32]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d918      	bls.n	8013510 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6a1a      	ldr	r2, [r3, #32]
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	693a      	ldr	r2, [r7, #16]
 80134ee:	8992      	ldrh	r2, [r2, #12]
 80134f0:	fb02 f303 	mul.w	r3, r2, r3
 80134f4:	69fa      	ldr	r2, [r7, #28]
 80134f6:	18d1      	adds	r1, r2, r3
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	899b      	ldrh	r3, [r3, #12]
 80134fc:	461a      	mov	r2, r3
 80134fe:	f7fd f90f 	bl	8010720 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	7d1b      	ldrb	r3, [r3, #20]
 8013506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801350a:	b2da      	uxtb	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	899b      	ldrh	r3, [r3, #12]
 8013514:	461a      	mov	r2, r3
 8013516:	6a3b      	ldr	r3, [r7, #32]
 8013518:	fb02 f303 	mul.w	r3, r2, r3
 801351c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801351e:	e04b      	b.n	80135b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6a1b      	ldr	r3, [r3, #32]
 8013524:	697a      	ldr	r2, [r7, #20]
 8013526:	429a      	cmp	r2, r3
 8013528:	d016      	beq.n	8013558 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	699a      	ldr	r2, [r3, #24]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013532:	429a      	cmp	r2, r3
 8013534:	d210      	bcs.n	8013558 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	7858      	ldrb	r0, [r3, #1]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013540:	2301      	movs	r3, #1
 8013542:	697a      	ldr	r2, [r7, #20]
 8013544:	f7fd f80c 	bl	8010560 <disk_read>
 8013548:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801354a:	2b00      	cmp	r3, #0
 801354c:	d004      	beq.n	8013558 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2201      	movs	r2, #1
 8013552:	755a      	strb	r2, [r3, #21]
 8013554:	2301      	movs	r3, #1
 8013556:	e05a      	b.n	801360e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	697a      	ldr	r2, [r7, #20]
 801355c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	899b      	ldrh	r3, [r3, #12]
 8013562:	4618      	mov	r0, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	8992      	ldrh	r2, [r2, #12]
 801356c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013570:	fb01 f202 	mul.w	r2, r1, r2
 8013574:	1a9b      	subs	r3, r3, r2
 8013576:	1ac3      	subs	r3, r0, r3
 8013578:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	429a      	cmp	r2, r3
 8013580:	d901      	bls.n	8013586 <f_write+0x298>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	699b      	ldr	r3, [r3, #24]
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	8992      	ldrh	r2, [r2, #12]
 8013594:	fbb3 f0f2 	udiv	r0, r3, r2
 8013598:	fb00 f202 	mul.w	r2, r0, r2
 801359c:	1a9b      	subs	r3, r3, r2
 801359e:	440b      	add	r3, r1
 80135a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135a2:	69f9      	ldr	r1, [r7, #28]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fd f8bb 	bl	8010720 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	7d1b      	ldrb	r3, [r3, #20]
 80135ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135b8:	69fa      	ldr	r2, [r7, #28]
 80135ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135bc:	4413      	add	r3, r2
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	699a      	ldr	r2, [r3, #24]
 80135c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c6:	441a      	add	r2, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	619a      	str	r2, [r3, #24]
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68da      	ldr	r2, [r3, #12]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	699b      	ldr	r3, [r3, #24]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	bf38      	it	cc
 80135d8:	461a      	movcc	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	60da      	str	r2, [r3, #12]
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e4:	441a      	add	r2, r3
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f47f aeb5 	bne.w	8013364 <f_write+0x76>
 80135fa:	e000      	b.n	80135fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	7d1b      	ldrb	r3, [r3, #20]
 8013602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013606:	b2da      	uxtb	r2, r3
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3730      	adds	r7, #48	@ 0x30
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}

08013616 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013616:	b580      	push	{r7, lr}
 8013618:	b086      	sub	sp, #24
 801361a:	af00      	add	r7, sp, #0
 801361c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f107 0208 	add.w	r2, r7, #8
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fabe 	bl	8012ba8 <validate>
 801362c:	4603      	mov	r3, r0
 801362e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013630:	7dfb      	ldrb	r3, [r7, #23]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d168      	bne.n	8013708 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	7d1b      	ldrb	r3, [r3, #20]
 801363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801363e:	2b00      	cmp	r3, #0
 8013640:	d062      	beq.n	8013708 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	7d1b      	ldrb	r3, [r3, #20]
 8013646:	b25b      	sxtb	r3, r3
 8013648:	2b00      	cmp	r3, #0
 801364a:	da15      	bge.n	8013678 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	7858      	ldrb	r0, [r3, #1]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a1a      	ldr	r2, [r3, #32]
 801365a:	2301      	movs	r3, #1
 801365c:	f7fc ffa0 	bl	80105a0 <disk_write>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d001      	beq.n	801366a <f_sync+0x54>
 8013666:	2301      	movs	r3, #1
 8013668:	e04f      	b.n	801370a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	7d1b      	ldrb	r3, [r3, #20]
 801366e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013672:	b2da      	uxtb	r2, r3
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013678:	f7fc fa0e 	bl	800fa98 <get_fattime>
 801367c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013684:	4619      	mov	r1, r3
 8013686:	4610      	mov	r0, r2
 8013688:	f7fd fa78 	bl	8010b7c <move_window>
 801368c:	4603      	mov	r3, r0
 801368e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013690:	7dfb      	ldrb	r3, [r7, #23]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d138      	bne.n	8013708 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801369a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	330b      	adds	r3, #11
 80136a0:	781a      	ldrb	r2, [r3, #0]
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	330b      	adds	r3, #11
 80136a6:	f042 0220 	orr.w	r2, r2, #32
 80136aa:	b2d2      	uxtb	r2, r2
 80136ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	461a      	mov	r2, r3
 80136b8:	68f9      	ldr	r1, [r7, #12]
 80136ba:	f7fe f803 	bl	80116c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f103 021c 	add.w	r2, r3, #28
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	4619      	mov	r1, r3
 80136ca:	4610      	mov	r0, r2
 80136cc:	f7fc fffc 	bl	80106c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	3316      	adds	r3, #22
 80136d4:	6939      	ldr	r1, [r7, #16]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fc fff6 	bl	80106c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	3312      	adds	r3, #18
 80136e0:	2100      	movs	r1, #0
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fc ffd5 	bl	8010692 <st_word>
					fs->wflag = 1;
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	2201      	movs	r2, #1
 80136ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fd fa71 	bl	8010bd8 <sync_fs>
 80136f6:	4603      	mov	r3, r0
 80136f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7d1b      	ldrb	r3, [r3, #20]
 80136fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013702:	b2da      	uxtb	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013708:	7dfb      	ldrb	r3, [r7, #23]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b084      	sub	sp, #16
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f7ff ff7b 	bl	8013616 <f_sync>
 8013720:	4603      	mov	r3, r0
 8013722:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013724:	7bfb      	ldrb	r3, [r7, #15]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d118      	bne.n	801375c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f107 0208 	add.w	r2, r7, #8
 8013730:	4611      	mov	r1, r2
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fa38 	bl	8012ba8 <validate>
 8013738:	4603      	mov	r3, r0
 801373a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801373c:	7bfb      	ldrb	r3, [r7, #15]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d10c      	bne.n	801375c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	691b      	ldr	r3, [r3, #16]
 8013746:	4618      	mov	r0, r3
 8013748:	f7fd f974 	bl	8010a34 <dec_lock>
 801374c:	4603      	mov	r3, r0
 801374e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013750:	7bfb      	ldrb	r3, [r7, #15]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d102      	bne.n	801375c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801375c:	7bfb      	ldrb	r3, [r7, #15]
}
 801375e:	4618      	mov	r0, r3
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013766:	b590      	push	{r4, r7, lr}
 8013768:	b093      	sub	sp, #76	@ 0x4c
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801376e:	f107 010c 	add.w	r1, r7, #12
 8013772:	1d3b      	adds	r3, r7, #4
 8013774:	2200      	movs	r2, #0
 8013776:	4618      	mov	r0, r3
 8013778:	f7fe ff8e 	bl	8012698 <find_volume>
 801377c:	4603      	mov	r3, r0
 801377e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8013782:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013786:	2b00      	cmp	r3, #0
 8013788:	d131      	bne.n	80137ee <f_chdir+0x88>
		dj.obj.fs = fs;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	f107 0310 	add.w	r3, r7, #16
 8013794:	4611      	mov	r1, r2
 8013796:	4618      	mov	r0, r3
 8013798:	f7fe fe4e 	bl	8012438 <follow_path>
 801379c:	4603      	mov	r3, r0
 801379e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 80137a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d11a      	bne.n	80137e0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80137aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80137ae:	b25b      	sxtb	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	da03      	bge.n	80137bc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	69ba      	ldr	r2, [r7, #24]
 80137b8:	61da      	str	r2, [r3, #28]
 80137ba:	e011      	b.n	80137e0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80137bc:	7dbb      	ldrb	r3, [r7, #22]
 80137be:	f003 0310 	and.w	r3, r3, #16
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d009      	beq.n	80137da <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137ca:	68fc      	ldr	r4, [r7, #12]
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fd ff59 	bl	8011686 <ld_clust>
 80137d4:	4603      	mov	r3, r0
 80137d6:	61e3      	str	r3, [r4, #28]
 80137d8:	e002      	b.n	80137e0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80137da:	2305      	movs	r3, #5
 80137dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80137e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80137e4:	2b04      	cmp	r3, #4
 80137e6:	d102      	bne.n	80137ee <f_chdir+0x88>
 80137e8:	2305      	movs	r3, #5
 80137ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 80137ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	374c      	adds	r7, #76	@ 0x4c
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd90      	pop	{r4, r7, pc}

080137fa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b090      	sub	sp, #64	@ 0x40
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f107 0208 	add.w	r2, r7, #8
 801380a:	4611      	mov	r1, r2
 801380c:	4618      	mov	r0, r3
 801380e:	f7ff f9cb 	bl	8012ba8 <validate>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013818:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801381c:	2b00      	cmp	r3, #0
 801381e:	d103      	bne.n	8013828 <f_lseek+0x2e>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	7d5b      	ldrb	r3, [r3, #21]
 8013824:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013828:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801382c:	2b00      	cmp	r3, #0
 801382e:	d002      	beq.n	8013836 <f_lseek+0x3c>
 8013830:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013834:	e201      	b.n	8013c3a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801383a:	2b00      	cmp	r3, #0
 801383c:	f000 80d9 	beq.w	80139f2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013846:	d15a      	bne.n	80138fe <f_lseek+0x104>
			tbl = fp->cltbl;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801384c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013850:	1d1a      	adds	r2, r3, #4
 8013852:	627a      	str	r2, [r7, #36]	@ 0x24
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	617b      	str	r3, [r7, #20]
 8013858:	2302      	movs	r3, #2
 801385a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013864:	2b00      	cmp	r3, #0
 8013866:	d03a      	beq.n	80138de <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801386a:	613b      	str	r3, [r7, #16]
 801386c:	2300      	movs	r3, #0
 801386e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013872:	3302      	adds	r3, #2
 8013874:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013878:	60fb      	str	r3, [r7, #12]
 801387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387c:	3301      	adds	r3, #1
 801387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013884:	4618      	mov	r0, r3
 8013886:	f7fd fa36 	bl	8010cf6 <get_fat>
 801388a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388e:	2b01      	cmp	r3, #1
 8013890:	d804      	bhi.n	801389c <f_lseek+0xa2>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2202      	movs	r2, #2
 8013896:	755a      	strb	r2, [r3, #21]
 8013898:	2302      	movs	r3, #2
 801389a:	e1ce      	b.n	8013c3a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a2:	d104      	bne.n	80138ae <f_lseek+0xb4>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2201      	movs	r2, #1
 80138a8:	755a      	strb	r2, [r3, #21]
 80138aa:	2301      	movs	r3, #1
 80138ac:	e1c5      	b.n	8013c3a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3301      	adds	r3, #1
 80138b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d0de      	beq.n	8013876 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80138b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d809      	bhi.n	80138d4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80138c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c2:	1d1a      	adds	r2, r3, #4
 80138c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80138c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138c8:	601a      	str	r2, [r3, #0]
 80138ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138cc:	1d1a      	adds	r2, r3, #4
 80138ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80138d0:	693a      	ldr	r2, [r7, #16]
 80138d2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	6a1b      	ldr	r3, [r3, #32]
 80138d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138da:	429a      	cmp	r2, r3
 80138dc:	d3c4      	bcc.n	8013868 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138e4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80138e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d803      	bhi.n	80138f6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80138ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f0:	2200      	movs	r2, #0
 80138f2:	601a      	str	r2, [r3, #0]
 80138f4:	e19f      	b.n	8013c36 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80138f6:	2311      	movs	r3, #17
 80138f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80138fc:	e19b      	b.n	8013c36 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	683a      	ldr	r2, [r7, #0]
 8013904:	429a      	cmp	r2, r3
 8013906:	d902      	bls.n	801390e <f_lseek+0x114>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	683a      	ldr	r2, [r7, #0]
 8013912:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	f000 818d 	beq.w	8013c36 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	3b01      	subs	r3, #1
 8013920:	4619      	mov	r1, r3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7fd fcd1 	bl	80112ca <clmt_clust>
 8013928:	4602      	mov	r2, r0
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	69db      	ldr	r3, [r3, #28]
 8013934:	4619      	mov	r1, r3
 8013936:	4610      	mov	r0, r2
 8013938:	f7fd f9be 	bl	8010cb8 <clust2sect>
 801393c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d104      	bne.n	801394e <f_lseek+0x154>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2202      	movs	r2, #2
 8013948:	755a      	strb	r2, [r3, #21]
 801394a:	2302      	movs	r3, #2
 801394c:	e175      	b.n	8013c3a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	3b01      	subs	r3, #1
 8013952:	68ba      	ldr	r2, [r7, #8]
 8013954:	8992      	ldrh	r2, [r2, #12]
 8013956:	fbb3 f3f2 	udiv	r3, r3, r2
 801395a:	68ba      	ldr	r2, [r7, #8]
 801395c:	8952      	ldrh	r2, [r2, #10]
 801395e:	3a01      	subs	r2, #1
 8013960:	4013      	ands	r3, r2
 8013962:	69ba      	ldr	r2, [r7, #24]
 8013964:	4413      	add	r3, r2
 8013966:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	699b      	ldr	r3, [r3, #24]
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	8992      	ldrh	r2, [r2, #12]
 8013970:	fbb3 f1f2 	udiv	r1, r3, r2
 8013974:	fb01 f202 	mul.w	r2, r1, r2
 8013978:	1a9b      	subs	r3, r3, r2
 801397a:	2b00      	cmp	r3, #0
 801397c:	f000 815b 	beq.w	8013c36 <f_lseek+0x43c>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a1b      	ldr	r3, [r3, #32]
 8013984:	69ba      	ldr	r2, [r7, #24]
 8013986:	429a      	cmp	r2, r3
 8013988:	f000 8155 	beq.w	8013c36 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	7d1b      	ldrb	r3, [r3, #20]
 8013990:	b25b      	sxtb	r3, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	da18      	bge.n	80139c8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	7858      	ldrb	r0, [r3, #1]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6a1a      	ldr	r2, [r3, #32]
 80139a4:	2301      	movs	r3, #1
 80139a6:	f7fc fdfb 	bl	80105a0 <disk_write>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d004      	beq.n	80139ba <f_lseek+0x1c0>
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2201      	movs	r2, #1
 80139b4:	755a      	strb	r2, [r3, #21]
 80139b6:	2301      	movs	r3, #1
 80139b8:	e13f      	b.n	8013c3a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	7d1b      	ldrb	r3, [r3, #20]
 80139be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139c2:	b2da      	uxtb	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	7858      	ldrb	r0, [r3, #1]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80139d2:	2301      	movs	r3, #1
 80139d4:	69ba      	ldr	r2, [r7, #24]
 80139d6:	f7fc fdc3 	bl	8010560 <disk_read>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d004      	beq.n	80139ea <f_lseek+0x1f0>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2201      	movs	r2, #1
 80139e4:	755a      	strb	r2, [r3, #21]
 80139e6:	2301      	movs	r3, #1
 80139e8:	e127      	b.n	8013c3a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	69ba      	ldr	r2, [r7, #24]
 80139ee:	621a      	str	r2, [r3, #32]
 80139f0:	e121      	b.n	8013c36 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d908      	bls.n	8013a0e <f_lseek+0x214>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	7d1b      	ldrb	r3, [r3, #20]
 8013a00:	f003 0302 	and.w	r3, r3, #2
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d102      	bne.n	8013a0e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	699b      	ldr	r3, [r3, #24]
 8013a12:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013a14:	2300      	movs	r3, #0
 8013a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a1c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f000 80b5 	beq.w	8013b90 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	895b      	ldrh	r3, [r3, #10]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	899b      	ldrh	r3, [r3, #12]
 8013a30:	fb02 f303 	mul.w	r3, r2, r3
 8013a34:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d01b      	beq.n	8013a74 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	1e5a      	subs	r2, r3, #1
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	fbb2 f2f3 	udiv	r2, r2, r3
 8013a46:	6a3b      	ldr	r3, [r7, #32]
 8013a48:	1e59      	subs	r1, r3, #1
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d30f      	bcc.n	8013a74 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a54:	6a3b      	ldr	r3, [r7, #32]
 8013a56:	1e5a      	subs	r2, r3, #1
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	425b      	negs	r3, r3
 8013a5c:	401a      	ands	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	683a      	ldr	r2, [r7, #0]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	69db      	ldr	r3, [r3, #28]
 8013a70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a72:	e022      	b.n	8013aba <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	689b      	ldr	r3, [r3, #8]
 8013a78:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d119      	bne.n	8013ab4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2100      	movs	r1, #0
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fd fb88 	bl	801119a <create_chain>
 8013a8a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d104      	bne.n	8013a9c <f_lseek+0x2a2>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2202      	movs	r2, #2
 8013a96:	755a      	strb	r2, [r3, #21]
 8013a98:	2302      	movs	r3, #2
 8013a9a:	e0ce      	b.n	8013c3a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa2:	d104      	bne.n	8013aae <f_lseek+0x2b4>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	755a      	strb	r2, [r3, #21]
 8013aaa:	2301      	movs	r3, #1
 8013aac:	e0c5      	b.n	8013c3a <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ab2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ab8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d067      	beq.n	8013b90 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013ac0:	e03a      	b.n	8013b38 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013ac2:	683a      	ldr	r2, [r7, #0]
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	603b      	str	r3, [r7, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	699a      	ldr	r2, [r3, #24]
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	441a      	add	r2, r3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	7d1b      	ldrb	r3, [r3, #20]
 8013ada:	f003 0302 	and.w	r3, r3, #2
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d00b      	beq.n	8013afa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7fd fb57 	bl	801119a <create_chain>
 8013aec:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d108      	bne.n	8013b06 <f_lseek+0x30c>
							ofs = 0; break;
 8013af4:	2300      	movs	r3, #0
 8013af6:	603b      	str	r3, [r7, #0]
 8013af8:	e022      	b.n	8013b40 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fd f8f9 	bl	8010cf6 <get_fat>
 8013b04:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b0c:	d104      	bne.n	8013b18 <f_lseek+0x31e>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2201      	movs	r2, #1
 8013b12:	755a      	strb	r2, [r3, #21]
 8013b14:	2301      	movs	r3, #1
 8013b16:	e090      	b.n	8013c3a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d904      	bls.n	8013b28 <f_lseek+0x32e>
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	6a1b      	ldr	r3, [r3, #32]
 8013b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d304      	bcc.n	8013b32 <f_lseek+0x338>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2202      	movs	r2, #2
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	2302      	movs	r3, #2
 8013b30:	e083      	b.n	8013c3a <f_lseek+0x440>
					fp->clust = clst;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b36:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013b38:	683a      	ldr	r2, [r7, #0]
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d8c0      	bhi.n	8013ac2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	699a      	ldr	r2, [r3, #24]
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	441a      	add	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	899b      	ldrh	r3, [r3, #12]
 8013b50:	461a      	mov	r2, r3
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b58:	fb01 f202 	mul.w	r2, r1, r2
 8013b5c:	1a9b      	subs	r3, r3, r2
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d016      	beq.n	8013b90 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fd f8a6 	bl	8010cb8 <clust2sect>
 8013b6c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d104      	bne.n	8013b7e <f_lseek+0x384>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2202      	movs	r2, #2
 8013b78:	755a      	strb	r2, [r3, #21]
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	e05d      	b.n	8013c3a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	899b      	ldrh	r3, [r3, #12]
 8013b82:	461a      	mov	r2, r3
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b8c:	4413      	add	r3, r2
 8013b8e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	699a      	ldr	r2, [r3, #24]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d90a      	bls.n	8013bb2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	699a      	ldr	r2, [r3, #24]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bac:	b2da      	uxtb	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	699b      	ldr	r3, [r3, #24]
 8013bb6:	68ba      	ldr	r2, [r7, #8]
 8013bb8:	8992      	ldrh	r2, [r2, #12]
 8013bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bbe:	fb01 f202 	mul.w	r2, r1, r2
 8013bc2:	1a9b      	subs	r3, r3, r2
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d036      	beq.n	8013c36 <f_lseek+0x43c>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6a1b      	ldr	r3, [r3, #32]
 8013bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d031      	beq.n	8013c36 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7d1b      	ldrb	r3, [r3, #20]
 8013bd6:	b25b      	sxtb	r3, r3
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	da18      	bge.n	8013c0e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	7858      	ldrb	r0, [r3, #1]
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a1a      	ldr	r2, [r3, #32]
 8013bea:	2301      	movs	r3, #1
 8013bec:	f7fc fcd8 	bl	80105a0 <disk_write>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d004      	beq.n	8013c00 <f_lseek+0x406>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	755a      	strb	r2, [r3, #21]
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	e01c      	b.n	8013c3a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	7d1b      	ldrb	r3, [r3, #20]
 8013c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c08:	b2da      	uxtb	r2, r3
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	7858      	ldrb	r0, [r3, #1]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013c18:	2301      	movs	r3, #1
 8013c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c1c:	f7fc fca0 	bl	8010560 <disk_read>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d004      	beq.n	8013c30 <f_lseek+0x436>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	755a      	strb	r2, [r3, #21]
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e004      	b.n	8013c3a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c34:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013c36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3740      	adds	r7, #64	@ 0x40
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b0a0      	sub	sp, #128	@ 0x80
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c4e:	f107 010c 	add.w	r1, r7, #12
 8013c52:	1d3b      	adds	r3, r7, #4
 8013c54:	2202      	movs	r2, #2
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fe fd1e 	bl	8012698 <find_volume>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8013c66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f040 80a4 	bne.w	8013db8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013c76:	4611      	mov	r1, r2
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fe fbdd 	bl	8012438 <follow_path>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d108      	bne.n	8013c9e <f_unlink+0x5c>
 8013c8c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8013c90:	f003 0320 	and.w	r3, r3, #32
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013c98:	2306      	movs	r3, #6
 8013c9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013c9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d108      	bne.n	8013cb8 <f_unlink+0x76>
 8013ca6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013caa:	2102      	movs	r1, #2
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fc fdb5 	bl	801081c <chk_lock>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013cb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d17b      	bne.n	8013db8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013cc0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8013cc4:	b25b      	sxtb	r3, r3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	da03      	bge.n	8013cd2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013cca:	2306      	movs	r3, #6
 8013ccc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8013cd0:	e008      	b.n	8013ce4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013cd2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8013cd6:	f003 0301 	and.w	r3, r3, #1
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d002      	beq.n	8013ce4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013cde:	2307      	movs	r3, #7
 8013ce0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8013ce4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d13d      	bne.n	8013d68 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7fd fcc7 	bl	8011686 <ld_clust>
 8013cf8:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013cfa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8013cfe:	f003 0310 	and.w	r3, r3, #16
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d030      	beq.n	8013d68 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	69db      	ldr	r3, [r3, #28]
 8013d0a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d103      	bne.n	8013d18 <f_unlink+0xd6>
						res = FR_DENIED;
 8013d10:	2307      	movs	r3, #7
 8013d12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8013d16:	e027      	b.n	8013d68 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d1e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013d20:	f107 0310 	add.w	r3, r7, #16
 8013d24:	2100      	movs	r1, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fd fb07 	bl	801133a <dir_sdi>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8013d32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d116      	bne.n	8013d68 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013d3a:	f107 0310 	add.w	r3, r7, #16
 8013d3e:	2100      	movs	r1, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fd feca 	bl	8011ada <dir_read>
 8013d46:	4603      	mov	r3, r0
 8013d48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013d4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d102      	bne.n	8013d5a <f_unlink+0x118>
 8013d54:	2307      	movs	r3, #7
 8013d56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d5e:	2b04      	cmp	r3, #4
 8013d60:	d102      	bne.n	8013d68 <f_unlink+0x126>
 8013d62:	2300      	movs	r3, #0
 8013d64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d123      	bne.n	8013db8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fe f90f 	bl	8011f98 <dir_remove>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d10c      	bne.n	8013da2 <f_unlink+0x160>
 8013d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d009      	beq.n	8013da2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d8e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d92:	2200      	movs	r2, #0
 8013d94:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fd f99a 	bl	80110d0 <remove_chain>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013da2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d106      	bne.n	8013db8 <f_unlink+0x176>
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fc ff13 	bl	8010bd8 <sync_fs>
 8013db2:	4603      	mov	r3, r0
 8013db4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013db8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3780      	adds	r7, #128	@ 0x80
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b098      	sub	sp, #96	@ 0x60
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013dcc:	f107 010c 	add.w	r1, r7, #12
 8013dd0:	1d3b      	adds	r3, r7, #4
 8013dd2:	2202      	movs	r2, #2
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fe fc5f 	bl	8012698 <find_volume>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8013de4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f040 80ff 	bne.w	8013fec <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	f107 0310 	add.w	r3, r7, #16
 8013df4:	4611      	mov	r1, r2
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7fe fb1e 	bl	8012438 <follow_path>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d102      	bne.n	8013e10 <f_mkdir+0x4c>
 8013e0a:	2308      	movs	r3, #8
 8013e0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013e10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e14:	2b04      	cmp	r3, #4
 8013e16:	d108      	bne.n	8013e2a <f_mkdir+0x66>
 8013e18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013e1c:	f003 0320 	and.w	r3, r3, #32
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d002      	beq.n	8013e2a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013e24:	2306      	movs	r3, #6
 8013e26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e2e:	2b04      	cmp	r3, #4
 8013e30:	f040 80dc 	bne.w	8013fec <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013e34:	f107 0310 	add.w	r3, r7, #16
 8013e38:	2100      	movs	r1, #0
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fd f9ad 	bl	801119a <create_chain>
 8013e40:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	895b      	ldrh	r3, [r3, #10]
 8013e46:	461a      	mov	r2, r3
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	899b      	ldrh	r3, [r3, #12]
 8013e4c:	fb02 f303 	mul.w	r3, r2, r3
 8013e50:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8013e52:	2300      	movs	r3, #0
 8013e54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d102      	bne.n	8013e64 <f_mkdir+0xa0>
 8013e5e:	2307      	movs	r3, #7
 8013e60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8013e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d102      	bne.n	8013e70 <f_mkdir+0xac>
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e76:	d102      	bne.n	8013e7e <f_mkdir+0xba>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d106      	bne.n	8013e94 <f_mkdir+0xd0>
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fc fe33 	bl	8010af4 <sync_window>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8013e94:	f7fb fe00 	bl	800fa98 <get_fattime>
 8013e98:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d16c      	bne.n	8013f7c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fc ff06 	bl	8010cb8 <clust2sect>
 8013eac:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	333c      	adds	r3, #60	@ 0x3c
 8013eb2:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	899b      	ldrh	r3, [r3, #12]
 8013eb8:	461a      	mov	r2, r3
 8013eba:	2100      	movs	r1, #0
 8013ebc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013ebe:	f7fc fc50 	bl	8010762 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013ec2:	220b      	movs	r2, #11
 8013ec4:	2120      	movs	r1, #32
 8013ec6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013ec8:	f7fc fc4b 	bl	8010762 <mem_set>
					dir[DIR_Name] = '.';
 8013ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ece:	222e      	movs	r2, #46	@ 0x2e
 8013ed0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ed4:	330b      	adds	r3, #11
 8013ed6:	2210      	movs	r2, #16
 8013ed8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013edc:	3316      	adds	r3, #22
 8013ede:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fc fbf1 	bl	80106c8 <st_dword>
					st_clust(fs, dir, dcl);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013eea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fd fbe9 	bl	80116c4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef4:	3320      	adds	r3, #32
 8013ef6:	2220      	movs	r2, #32
 8013ef8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fc fc10 	bl	8010720 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f02:	3321      	adds	r3, #33	@ 0x21
 8013f04:	222e      	movs	r2, #46	@ 0x2e
 8013f06:	701a      	strb	r2, [r3, #0]
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	2b03      	cmp	r3, #3
 8013f12:	d106      	bne.n	8013f22 <f_mkdir+0x15e>
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d101      	bne.n	8013f22 <f_mkdir+0x15e>
 8013f1e:	2300      	movs	r3, #0
 8013f20:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f26:	3320      	adds	r3, #32
 8013f28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	f7fd fbca 	bl	80116c4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	895b      	ldrh	r3, [r3, #10]
 8013f34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f36:	e01c      	b.n	8013f72 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8013f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f3a:	1c5a      	adds	r2, r3, #1
 8013f3c:	657a      	str	r2, [r7, #84]	@ 0x54
 8013f3e:	68fa      	ldr	r2, [r7, #12]
 8013f40:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2201      	movs	r2, #1
 8013f46:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fc fdd2 	bl	8010af4 <sync_window>
 8013f50:	4603      	mov	r3, r0
 8013f52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 8013f56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10d      	bne.n	8013f7a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	899b      	ldrh	r3, [r3, #12]
 8013f62:	461a      	mov	r2, r3
 8013f64:	2100      	movs	r1, #0
 8013f66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013f68:	f7fc fbfb 	bl	8010762 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d1df      	bne.n	8013f38 <f_mkdir+0x174>
 8013f78:	e000      	b.n	8013f7c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8013f7a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d107      	bne.n	8013f94 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013f84:	f107 0310 	add.w	r3, r7, #16
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fd ff0d 	bl	8011da8 <dir_register>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8013f94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d120      	bne.n	8013fde <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f9e:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fa2:	3316      	adds	r3, #22
 8013fa4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7fc fb8e 	bl	80106c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013fb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fd fb86 	bl	80116c4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fba:	330b      	adds	r3, #11
 8013fbc:	2210      	movs	r2, #16
 8013fbe:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d10e      	bne.n	8013fec <f_mkdir+0x228>
					res = sync_fs(fs);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fc fe01 	bl	8010bd8 <sync_fs>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013fdc:	e006      	b.n	8013fec <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013fde:	f107 0310 	add.w	r3, r7, #16
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fd f872 	bl	80110d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013fec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3760      	adds	r7, #96	@ 0x60
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}

08013ff8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	460b      	mov	r3, r1
 8014002:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8014004:	78fb      	ldrb	r3, [r7, #3]
 8014006:	2b0a      	cmp	r3, #10
 8014008:	d103      	bne.n	8014012 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801400a:	210d      	movs	r1, #13
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7ff fff3 	bl	8013ff8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	db25      	blt.n	801406a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	1c5a      	adds	r2, r3, #1
 8014022:	60fa      	str	r2, [r7, #12]
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4413      	add	r3, r2
 8014028:	78fa      	ldrb	r2, [r7, #3]
 801402a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2b3c      	cmp	r3, #60	@ 0x3c
 8014030:	dd12      	ble.n	8014058 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6818      	ldr	r0, [r3, #0]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f103 010c 	add.w	r1, r3, #12
 801403c:	68fa      	ldr	r2, [r7, #12]
 801403e:	f107 0308 	add.w	r3, r7, #8
 8014042:	f7ff f954 	bl	80132ee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8014046:	68ba      	ldr	r2, [r7, #8]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	429a      	cmp	r2, r3
 801404c:	d101      	bne.n	8014052 <putc_bfd+0x5a>
 801404e:	2300      	movs	r3, #0
 8014050:	e001      	b.n	8014056 <putc_bfd+0x5e>
 8014052:	f04f 33ff 	mov.w	r3, #4294967295
 8014056:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	1c5a      	adds	r2, r3, #1
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	609a      	str	r2, [r3, #8]
 8014068:	e000      	b.n	801406c <putc_bfd+0x74>
	if (i < 0) return;
 801406a:	bf00      	nop
}
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8014072:	b580      	push	{r7, lr}
 8014074:	b084      	sub	sp, #16
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	2b00      	cmp	r3, #0
 8014080:	db16      	blt.n	80140b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6818      	ldr	r0, [r3, #0]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f103 010c 	add.w	r1, r3, #12
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	461a      	mov	r2, r3
 8014092:	f107 030c 	add.w	r3, r7, #12
 8014096:	f7ff f92a 	bl	80132ee <f_write>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d107      	bne.n	80140b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	685b      	ldr	r3, [r3, #4]
 80140a4:	68fa      	ldr	r2, [r7, #12]
 80140a6:	4293      	cmp	r3, r2
 80140a8:	d102      	bne.n	80140b0 <putc_flush+0x3e>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	e001      	b.n	80140b4 <putc_flush+0x42>
	return EOF;
 80140b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3710      	adds	r7, #16
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	683a      	ldr	r2, [r7, #0]
 80140ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	605a      	str	r2, [r3, #4]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	685a      	ldr	r2, [r3, #4]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	609a      	str	r2, [r3, #8]
}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr
	...

080140e8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80140e8:	b40e      	push	{r1, r2, r3}
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b0a7      	sub	sp, #156	@ 0x9c
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80140f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80140f6:	6879      	ldr	r1, [r7, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff ffdf 	bl	80140bc <putc_init>

	va_start(arp, fmt);
 80140fe:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8014102:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8014104:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014108:	1c5a      	adds	r2, r3, #1
 801410a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8014114:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 81f2 	beq.w	8014502 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801411e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014122:	2b25      	cmp	r3, #37	@ 0x25
 8014124:	d008      	beq.n	8014138 <f_printf+0x50>
			putc_bfd(&pb, c);
 8014126:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801412a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801412e:	4611      	mov	r1, r2
 8014130:	4618      	mov	r0, r3
 8014132:	f7ff ff61 	bl	8013ff8 <putc_bfd>
			continue;
 8014136:	e1e3      	b.n	8014500 <f_printf+0x418>
		}
		w = f = 0;
 8014138:	2300      	movs	r3, #0
 801413a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801413e:	2300      	movs	r3, #0
 8014140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8014144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014148:	1c5a      	adds	r2, r3, #1
 801414a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8014154:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014158:	2b30      	cmp	r3, #48	@ 0x30
 801415a:	d10b      	bne.n	8014174 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801415c:	2301      	movs	r3, #1
 801415e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014166:	1c5a      	adds	r2, r3, #1
 8014168:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8014172:	e024      	b.n	80141be <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8014174:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014178:	2b2d      	cmp	r3, #45	@ 0x2d
 801417a:	d120      	bne.n	80141be <f_printf+0xd6>
				f = 2; c = *fmt++;
 801417c:	2302      	movs	r3, #2
 801417e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014186:	1c5a      	adds	r2, r3, #1
 8014188:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8014192:	e014      	b.n	80141be <f_printf+0xd6>
			w = w * 10 + c - '0';
 8014194:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014198:	4613      	mov	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	005b      	lsls	r3, r3, #1
 80141a0:	461a      	mov	r2, r3
 80141a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141a6:	4413      	add	r3, r2
 80141a8:	3b30      	subs	r3, #48	@ 0x30
 80141aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80141ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80141b2:	1c5a      	adds	r2, r3, #1
 80141b4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80141be:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80141c4:	d903      	bls.n	80141ce <f_printf+0xe6>
 80141c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141ca:	2b39      	cmp	r3, #57	@ 0x39
 80141cc:	d9e2      	bls.n	8014194 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80141ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80141d4:	d003      	beq.n	80141de <f_printf+0xf6>
 80141d6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141da:	2b4c      	cmp	r3, #76	@ 0x4c
 80141dc:	d10d      	bne.n	80141fa <f_printf+0x112>
			f |= 4; c = *fmt++;
 80141de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80141e2:	f043 0304 	orr.w	r3, r3, #4
 80141e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80141ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80141ee:	1c5a      	adds	r2, r3, #1
 80141f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80141fa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 8181 	beq.w	8014506 <f_printf+0x41e>
		d = c;
 8014204:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014208:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 801420c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014210:	2b60      	cmp	r3, #96	@ 0x60
 8014212:	d908      	bls.n	8014226 <f_printf+0x13e>
 8014214:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014218:	2b7a      	cmp	r3, #122	@ 0x7a
 801421a:	d804      	bhi.n	8014226 <f_printf+0x13e>
 801421c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014220:	3b20      	subs	r3, #32
 8014222:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8014226:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801422a:	3b42      	subs	r3, #66	@ 0x42
 801422c:	2b16      	cmp	r3, #22
 801422e:	f200 8098 	bhi.w	8014362 <f_printf+0x27a>
 8014232:	a201      	add	r2, pc, #4	@ (adr r2, 8014238 <f_printf+0x150>)
 8014234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014238:	08014343 	.word	0x08014343
 801423c:	0801432b 	.word	0x0801432b
 8014240:	08014353 	.word	0x08014353
 8014244:	08014363 	.word	0x08014363
 8014248:	08014363 	.word	0x08014363
 801424c:	08014363 	.word	0x08014363
 8014250:	08014363 	.word	0x08014363
 8014254:	08014363 	.word	0x08014363
 8014258:	08014363 	.word	0x08014363
 801425c:	08014363 	.word	0x08014363
 8014260:	08014363 	.word	0x08014363
 8014264:	08014363 	.word	0x08014363
 8014268:	08014363 	.word	0x08014363
 801426c:	0801434b 	.word	0x0801434b
 8014270:	08014363 	.word	0x08014363
 8014274:	08014363 	.word	0x08014363
 8014278:	08014363 	.word	0x08014363
 801427c:	08014295 	.word	0x08014295
 8014280:	08014363 	.word	0x08014363
 8014284:	08014353 	.word	0x08014353
 8014288:	08014363 	.word	0x08014363
 801428c:	08014363 	.word	0x08014363
 8014290:	0801435b 	.word	0x0801435b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8014294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014296:	1d1a      	adds	r2, r3, #4
 8014298:	67ba      	str	r2, [r7, #120]	@ 0x78
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801429e:	2300      	movs	r3, #0
 80142a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80142a4:	e004      	b.n	80142b0 <f_printf+0x1c8>
 80142a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142aa:	3301      	adds	r3, #1
 80142ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80142b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80142b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142b6:	4413      	add	r3, r2
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d1f3      	bne.n	80142a6 <f_printf+0x1be>
			if (!(f & 2)) {
 80142be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80142c2:	f003 0302 	and.w	r3, r3, #2
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d11a      	bne.n	8014300 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80142ca:	e005      	b.n	80142d8 <f_printf+0x1f0>
 80142cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80142d0:	2120      	movs	r1, #32
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7ff fe90 	bl	8013ff8 <putc_bfd>
 80142d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142dc:	1c5a      	adds	r2, r3, #1
 80142de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80142e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d8f0      	bhi.n	80142cc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80142ea:	e009      	b.n	8014300 <f_printf+0x218>
 80142ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142ee:	1c5a      	adds	r2, r3, #1
 80142f0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80142f2:	781a      	ldrb	r2, [r3, #0]
 80142f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80142f8:	4611      	mov	r1, r2
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7ff fe7c 	bl	8013ff8 <putc_bfd>
 8014300:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d1f1      	bne.n	80142ec <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8014308:	e005      	b.n	8014316 <f_printf+0x22e>
 801430a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801430e:	2120      	movs	r1, #32
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fe71 	bl	8013ff8 <putc_bfd>
 8014316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801431a:	1c5a      	adds	r2, r3, #1
 801431c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014320:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014324:	429a      	cmp	r2, r3
 8014326:	d8f0      	bhi.n	801430a <f_printf+0x222>
			continue;
 8014328:	e0ea      	b.n	8014500 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801432a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801432c:	1d1a      	adds	r2, r3, #4
 801432e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	b2da      	uxtb	r2, r3
 8014334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014338:	4611      	mov	r1, r2
 801433a:	4618      	mov	r0, r3
 801433c:	f7ff fe5c 	bl	8013ff8 <putc_bfd>
 8014340:	e0de      	b.n	8014500 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8014342:	2302      	movs	r3, #2
 8014344:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014348:	e014      	b.n	8014374 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801434a:	2308      	movs	r3, #8
 801434c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014350:	e010      	b.n	8014374 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8014352:	230a      	movs	r3, #10
 8014354:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014358:	e00c      	b.n	8014374 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801435a:	2310      	movs	r3, #16
 801435c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014360:	e008      	b.n	8014374 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8014362:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8014366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801436a:	4611      	mov	r1, r2
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff fe43 	bl	8013ff8 <putc_bfd>
 8014372:	e0c5      	b.n	8014500 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8014374:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014378:	f003 0304 	and.w	r3, r3, #4
 801437c:	2b00      	cmp	r3, #0
 801437e:	d004      	beq.n	801438a <f_printf+0x2a2>
 8014380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014382:	1d1a      	adds	r2, r3, #4
 8014384:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	e00c      	b.n	80143a4 <f_printf+0x2bc>
 801438a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801438e:	2b44      	cmp	r3, #68	@ 0x44
 8014390:	d104      	bne.n	801439c <f_printf+0x2b4>
 8014392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014394:	1d1a      	adds	r2, r3, #4
 8014396:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	e003      	b.n	80143a4 <f_printf+0x2bc>
 801439c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801439e:	1d1a      	adds	r2, r3, #4
 80143a0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80143a8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80143ac:	2b44      	cmp	r3, #68	@ 0x44
 80143ae:	d10e      	bne.n	80143ce <f_printf+0x2e6>
 80143b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	da0a      	bge.n	80143ce <f_printf+0x2e6>
			v = 0 - v;
 80143b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143bc:	425b      	negs	r3, r3
 80143be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80143c2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80143c6:	f043 0308 	orr.w	r3, r3, #8
 80143ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80143ce:	2300      	movs	r3, #0
 80143d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80143d4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80143d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80143e0:	fb01 f202 	mul.w	r2, r1, r2
 80143e4:	1a9b      	subs	r3, r3, r2
 80143e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80143ea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80143ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80143f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80143f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80143fa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80143fe:	2b09      	cmp	r3, #9
 8014400:	d90b      	bls.n	801441a <f_printf+0x332>
 8014402:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014406:	2b78      	cmp	r3, #120	@ 0x78
 8014408:	d101      	bne.n	801440e <f_printf+0x326>
 801440a:	2227      	movs	r2, #39	@ 0x27
 801440c:	e000      	b.n	8014410 <f_printf+0x328>
 801440e:	2207      	movs	r2, #7
 8014410:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014414:	4413      	add	r3, r2
 8014416:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801441a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801441e:	1c5a      	adds	r2, r3, #1
 8014420:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8014424:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8014428:	3230      	adds	r2, #48	@ 0x30
 801442a:	b2d2      	uxtb	r2, r2
 801442c:	3398      	adds	r3, #152	@ 0x98
 801442e:	443b      	add	r3, r7
 8014430:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8014434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014438:	2b00      	cmp	r3, #0
 801443a:	d003      	beq.n	8014444 <f_printf+0x35c>
 801443c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014440:	2b1f      	cmp	r3, #31
 8014442:	d9c7      	bls.n	80143d4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8014444:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014448:	f003 0308 	and.w	r3, r3, #8
 801444c:	2b00      	cmp	r3, #0
 801444e:	d009      	beq.n	8014464 <f_printf+0x37c>
 8014450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014454:	1c5a      	adds	r2, r3, #1
 8014456:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801445a:	3398      	adds	r3, #152	@ 0x98
 801445c:	443b      	add	r3, r7
 801445e:	222d      	movs	r2, #45	@ 0x2d
 8014460:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801446c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014470:	f003 0301 	and.w	r3, r3, #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	d001      	beq.n	801447c <f_printf+0x394>
 8014478:	2330      	movs	r3, #48	@ 0x30
 801447a:	e000      	b.n	801447e <f_printf+0x396>
 801447c:	2320      	movs	r3, #32
 801447e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8014482:	e007      	b.n	8014494 <f_printf+0x3ac>
 8014484:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8014488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801448c:	4611      	mov	r1, r2
 801448e:	4618      	mov	r0, r3
 8014490:	f7ff fdb2 	bl	8013ff8 <putc_bfd>
 8014494:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014498:	f003 0302 	and.w	r3, r3, #2
 801449c:	2b00      	cmp	r3, #0
 801449e:	d108      	bne.n	80144b2 <f_printf+0x3ca>
 80144a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144a4:	1c5a      	adds	r2, r3, #1
 80144a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80144aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d8e8      	bhi.n	8014484 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80144b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144b6:	3b01      	subs	r3, #1
 80144b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80144bc:	f107 020c 	add.w	r2, r7, #12
 80144c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144c4:	4413      	add	r3, r2
 80144c6:	781a      	ldrb	r2, [r3, #0]
 80144c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80144cc:	4611      	mov	r1, r2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7ff fd92 	bl	8013ff8 <putc_bfd>
		} while (i);
 80144d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1ea      	bne.n	80144b2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80144dc:	e007      	b.n	80144ee <f_printf+0x406>
 80144de:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80144e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80144e6:	4611      	mov	r1, r2
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7ff fd85 	bl	8013ff8 <putc_bfd>
 80144ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144f2:	1c5a      	adds	r2, r3, #1
 80144f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80144f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d8ee      	bhi.n	80144de <f_printf+0x3f6>
		c = *fmt++;
 8014500:	e600      	b.n	8014104 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8014502:	bf00      	nop
 8014504:	e000      	b.n	8014508 <f_printf+0x420>
		if (!c) break;
 8014506:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8014508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801450c:	4618      	mov	r0, r3
 801450e:	f7ff fdb0 	bl	8014072 <putc_flush>
 8014512:	4603      	mov	r3, r0
}
 8014514:	4618      	mov	r0, r3
 8014516:	379c      	adds	r7, #156	@ 0x9c
 8014518:	46bd      	mov	sp, r7
 801451a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801451e:	b003      	add	sp, #12
 8014520:	4770      	bx	lr
 8014522:	bf00      	nop

08014524 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014524:	b480      	push	{r7}
 8014526:	b087      	sub	sp, #28
 8014528:	af00      	add	r7, sp, #0
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	4613      	mov	r3, r2
 8014530:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014532:	2301      	movs	r3, #1
 8014534:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014536:	2300      	movs	r3, #0
 8014538:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801453a:	4b1f      	ldr	r3, [pc, #124]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 801453c:	7a5b      	ldrb	r3, [r3, #9]
 801453e:	b2db      	uxtb	r3, r3
 8014540:	2b00      	cmp	r3, #0
 8014542:	d131      	bne.n	80145a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014544:	4b1c      	ldr	r3, [pc, #112]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 8014546:	7a5b      	ldrb	r3, [r3, #9]
 8014548:	b2db      	uxtb	r3, r3
 801454a:	461a      	mov	r2, r3
 801454c:	4b1a      	ldr	r3, [pc, #104]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 801454e:	2100      	movs	r1, #0
 8014550:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014552:	4b19      	ldr	r3, [pc, #100]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 8014554:	7a5b      	ldrb	r3, [r3, #9]
 8014556:	b2db      	uxtb	r3, r3
 8014558:	4a17      	ldr	r2, [pc, #92]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	4413      	add	r3, r2
 801455e:	68fa      	ldr	r2, [r7, #12]
 8014560:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014562:	4b15      	ldr	r3, [pc, #84]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 8014564:	7a5b      	ldrb	r3, [r3, #9]
 8014566:	b2db      	uxtb	r3, r3
 8014568:	461a      	mov	r2, r3
 801456a:	4b13      	ldr	r3, [pc, #76]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 801456c:	4413      	add	r3, r2
 801456e:	79fa      	ldrb	r2, [r7, #7]
 8014570:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014572:	4b11      	ldr	r3, [pc, #68]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 8014574:	7a5b      	ldrb	r3, [r3, #9]
 8014576:	b2db      	uxtb	r3, r3
 8014578:	1c5a      	adds	r2, r3, #1
 801457a:	b2d1      	uxtb	r1, r2
 801457c:	4a0e      	ldr	r2, [pc, #56]	@ (80145b8 <FATFS_LinkDriverEx+0x94>)
 801457e:	7251      	strb	r1, [r2, #9]
 8014580:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014582:	7dbb      	ldrb	r3, [r7, #22]
 8014584:	3330      	adds	r3, #48	@ 0x30
 8014586:	b2da      	uxtb	r2, r3
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	3301      	adds	r3, #1
 8014590:	223a      	movs	r2, #58	@ 0x3a
 8014592:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	3302      	adds	r3, #2
 8014598:	222f      	movs	r2, #47	@ 0x2f
 801459a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	3303      	adds	r3, #3
 80145a0:	2200      	movs	r2, #0
 80145a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80145a4:	2300      	movs	r3, #0
 80145a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	371c      	adds	r7, #28
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr
 80145b6:	bf00      	nop
 80145b8:	24004df4 	.word	0x24004df4

080145bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80145c6:	2200      	movs	r2, #0
 80145c8:	6839      	ldr	r1, [r7, #0]
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f7ff ffaa 	bl	8014524 <FATFS_LinkDriverEx>
 80145d0:	4603      	mov	r3, r0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3708      	adds	r7, #8
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
	...

080145dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80145dc:	b480      	push	{r7}
 80145de:	b085      	sub	sp, #20
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	4603      	mov	r3, r0
 80145e4:	6039      	str	r1, [r7, #0]
 80145e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80145e8:	88fb      	ldrh	r3, [r7, #6]
 80145ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80145ec:	d802      	bhi.n	80145f4 <ff_convert+0x18>
		c = chr;
 80145ee:	88fb      	ldrh	r3, [r7, #6]
 80145f0:	81fb      	strh	r3, [r7, #14]
 80145f2:	e025      	b.n	8014640 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00b      	beq.n	8014612 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80145fa:	88fb      	ldrh	r3, [r7, #6]
 80145fc:	2bff      	cmp	r3, #255	@ 0xff
 80145fe:	d805      	bhi.n	801460c <ff_convert+0x30>
 8014600:	88fb      	ldrh	r3, [r7, #6]
 8014602:	3b80      	subs	r3, #128	@ 0x80
 8014604:	4a12      	ldr	r2, [pc, #72]	@ (8014650 <ff_convert+0x74>)
 8014606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801460a:	e000      	b.n	801460e <ff_convert+0x32>
 801460c:	2300      	movs	r3, #0
 801460e:	81fb      	strh	r3, [r7, #14]
 8014610:	e016      	b.n	8014640 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014612:	2300      	movs	r3, #0
 8014614:	81fb      	strh	r3, [r7, #14]
 8014616:	e009      	b.n	801462c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014618:	89fb      	ldrh	r3, [r7, #14]
 801461a:	4a0d      	ldr	r2, [pc, #52]	@ (8014650 <ff_convert+0x74>)
 801461c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014620:	88fa      	ldrh	r2, [r7, #6]
 8014622:	429a      	cmp	r2, r3
 8014624:	d006      	beq.n	8014634 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014626:	89fb      	ldrh	r3, [r7, #14]
 8014628:	3301      	adds	r3, #1
 801462a:	81fb      	strh	r3, [r7, #14]
 801462c:	89fb      	ldrh	r3, [r7, #14]
 801462e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014630:	d9f2      	bls.n	8014618 <ff_convert+0x3c>
 8014632:	e000      	b.n	8014636 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014634:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014636:	89fb      	ldrh	r3, [r7, #14]
 8014638:	3380      	adds	r3, #128	@ 0x80
 801463a:	b29b      	uxth	r3, r3
 801463c:	b2db      	uxtb	r3, r3
 801463e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014640:	89fb      	ldrh	r3, [r7, #14]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3714      	adds	r7, #20
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop
 8014650:	08014bdc 	.word	0x08014bdc

08014654 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014654:	b480      	push	{r7}
 8014656:	b087      	sub	sp, #28
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801465e:	88fb      	ldrh	r3, [r7, #6]
 8014660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014664:	d201      	bcs.n	801466a <ff_wtoupper+0x16>
 8014666:	4b3e      	ldr	r3, [pc, #248]	@ (8014760 <ff_wtoupper+0x10c>)
 8014668:	e000      	b.n	801466c <ff_wtoupper+0x18>
 801466a:	4b3e      	ldr	r3, [pc, #248]	@ (8014764 <ff_wtoupper+0x110>)
 801466c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	1c9a      	adds	r2, r3, #2
 8014672:	617a      	str	r2, [r7, #20]
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014678:	8a7b      	ldrh	r3, [r7, #18]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d068      	beq.n	8014750 <ff_wtoupper+0xfc>
 801467e:	88fa      	ldrh	r2, [r7, #6]
 8014680:	8a7b      	ldrh	r3, [r7, #18]
 8014682:	429a      	cmp	r2, r3
 8014684:	d364      	bcc.n	8014750 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	1c9a      	adds	r2, r3, #2
 801468a:	617a      	str	r2, [r7, #20]
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	823b      	strh	r3, [r7, #16]
 8014690:	8a3b      	ldrh	r3, [r7, #16]
 8014692:	0a1b      	lsrs	r3, r3, #8
 8014694:	81fb      	strh	r3, [r7, #14]
 8014696:	8a3b      	ldrh	r3, [r7, #16]
 8014698:	b2db      	uxtb	r3, r3
 801469a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	8a79      	ldrh	r1, [r7, #18]
 80146a0:	8a3b      	ldrh	r3, [r7, #16]
 80146a2:	440b      	add	r3, r1
 80146a4:	429a      	cmp	r2, r3
 80146a6:	da49      	bge.n	801473c <ff_wtoupper+0xe8>
			switch (cmd) {
 80146a8:	89fb      	ldrh	r3, [r7, #14]
 80146aa:	2b08      	cmp	r3, #8
 80146ac:	d84f      	bhi.n	801474e <ff_wtoupper+0xfa>
 80146ae:	a201      	add	r2, pc, #4	@ (adr r2, 80146b4 <ff_wtoupper+0x60>)
 80146b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b4:	080146d9 	.word	0x080146d9
 80146b8:	080146eb 	.word	0x080146eb
 80146bc:	08014701 	.word	0x08014701
 80146c0:	08014709 	.word	0x08014709
 80146c4:	08014711 	.word	0x08014711
 80146c8:	08014719 	.word	0x08014719
 80146cc:	08014721 	.word	0x08014721
 80146d0:	08014729 	.word	0x08014729
 80146d4:	08014731 	.word	0x08014731
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80146d8:	88fa      	ldrh	r2, [r7, #6]
 80146da:	8a7b      	ldrh	r3, [r7, #18]
 80146dc:	1ad3      	subs	r3, r2, r3
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	697a      	ldr	r2, [r7, #20]
 80146e2:	4413      	add	r3, r2
 80146e4:	881b      	ldrh	r3, [r3, #0]
 80146e6:	80fb      	strh	r3, [r7, #6]
 80146e8:	e027      	b.n	801473a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80146ea:	88fa      	ldrh	r2, [r7, #6]
 80146ec:	8a7b      	ldrh	r3, [r7, #18]
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	88fa      	ldrh	r2, [r7, #6]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	80fb      	strh	r3, [r7, #6]
 80146fe:	e01c      	b.n	801473a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014700:	88fb      	ldrh	r3, [r7, #6]
 8014702:	3b10      	subs	r3, #16
 8014704:	80fb      	strh	r3, [r7, #6]
 8014706:	e018      	b.n	801473a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014708:	88fb      	ldrh	r3, [r7, #6]
 801470a:	3b20      	subs	r3, #32
 801470c:	80fb      	strh	r3, [r7, #6]
 801470e:	e014      	b.n	801473a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014710:	88fb      	ldrh	r3, [r7, #6]
 8014712:	3b30      	subs	r3, #48	@ 0x30
 8014714:	80fb      	strh	r3, [r7, #6]
 8014716:	e010      	b.n	801473a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014718:	88fb      	ldrh	r3, [r7, #6]
 801471a:	3b1a      	subs	r3, #26
 801471c:	80fb      	strh	r3, [r7, #6]
 801471e:	e00c      	b.n	801473a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014720:	88fb      	ldrh	r3, [r7, #6]
 8014722:	3308      	adds	r3, #8
 8014724:	80fb      	strh	r3, [r7, #6]
 8014726:	e008      	b.n	801473a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014728:	88fb      	ldrh	r3, [r7, #6]
 801472a:	3b50      	subs	r3, #80	@ 0x50
 801472c:	80fb      	strh	r3, [r7, #6]
 801472e:	e004      	b.n	801473a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014730:	88fb      	ldrh	r3, [r7, #6]
 8014732:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014736:	80fb      	strh	r3, [r7, #6]
 8014738:	bf00      	nop
			}
			break;
 801473a:	e008      	b.n	801474e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801473c:	89fb      	ldrh	r3, [r7, #14]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d195      	bne.n	801466e <ff_wtoupper+0x1a>
 8014742:	8a3b      	ldrh	r3, [r7, #16]
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	4413      	add	r3, r2
 801474a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801474c:	e78f      	b.n	801466e <ff_wtoupper+0x1a>
			break;
 801474e:	bf00      	nop
	}

	return chr;
 8014750:	88fb      	ldrh	r3, [r7, #6]
}
 8014752:	4618      	mov	r0, r3
 8014754:	371c      	adds	r7, #28
 8014756:	46bd      	mov	sp, r7
 8014758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop
 8014760:	08014cdc 	.word	0x08014cdc
 8014764:	08014ed0 	.word	0x08014ed0

08014768 <memset>:
 8014768:	4402      	add	r2, r0
 801476a:	4603      	mov	r3, r0
 801476c:	4293      	cmp	r3, r2
 801476e:	d100      	bne.n	8014772 <memset+0xa>
 8014770:	4770      	bx	lr
 8014772:	f803 1b01 	strb.w	r1, [r3], #1
 8014776:	e7f9      	b.n	801476c <memset+0x4>

08014778 <__errno>:
 8014778:	4b01      	ldr	r3, [pc, #4]	@ (8014780 <__errno+0x8>)
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	240000e8 	.word	0x240000e8

08014784 <__libc_init_array>:
 8014784:	b570      	push	{r4, r5, r6, lr}
 8014786:	4d0d      	ldr	r5, [pc, #52]	@ (80147bc <__libc_init_array+0x38>)
 8014788:	4c0d      	ldr	r4, [pc, #52]	@ (80147c0 <__libc_init_array+0x3c>)
 801478a:	1b64      	subs	r4, r4, r5
 801478c:	10a4      	asrs	r4, r4, #2
 801478e:	2600      	movs	r6, #0
 8014790:	42a6      	cmp	r6, r4
 8014792:	d109      	bne.n	80147a8 <__libc_init_array+0x24>
 8014794:	4d0b      	ldr	r5, [pc, #44]	@ (80147c4 <__libc_init_array+0x40>)
 8014796:	4c0c      	ldr	r4, [pc, #48]	@ (80147c8 <__libc_init_array+0x44>)
 8014798:	f000 f952 	bl	8014a40 <_init>
 801479c:	1b64      	subs	r4, r4, r5
 801479e:	10a4      	asrs	r4, r4, #2
 80147a0:	2600      	movs	r6, #0
 80147a2:	42a6      	cmp	r6, r4
 80147a4:	d105      	bne.n	80147b2 <__libc_init_array+0x2e>
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80147ac:	4798      	blx	r3
 80147ae:	3601      	adds	r6, #1
 80147b0:	e7ee      	b.n	8014790 <__libc_init_array+0xc>
 80147b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80147b6:	4798      	blx	r3
 80147b8:	3601      	adds	r6, #1
 80147ba:	e7f2      	b.n	80147a2 <__libc_init_array+0x1e>
 80147bc:	08015828 	.word	0x08015828
 80147c0:	08015828 	.word	0x08015828
 80147c4:	08015828 	.word	0x08015828
 80147c8:	0801582c 	.word	0x0801582c

080147cc <memcpy>:
 80147cc:	440a      	add	r2, r1
 80147ce:	4291      	cmp	r1, r2
 80147d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80147d4:	d100      	bne.n	80147d8 <memcpy+0xc>
 80147d6:	4770      	bx	lr
 80147d8:	b510      	push	{r4, lr}
 80147da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147e2:	4291      	cmp	r1, r2
 80147e4:	d1f9      	bne.n	80147da <memcpy+0xe>
 80147e6:	bd10      	pop	{r4, pc}

080147e8 <log>:
 80147e8:	b4f0      	push	{r4, r5, r6, r7}
 80147ea:	ee10 0a90 	vmov	r0, s1
 80147ee:	ee10 3a10 	vmov	r3, s0
 80147f2:	f04f 34ff 	mov.w	r4, #4294967295
 80147f6:	429c      	cmp	r4, r3
 80147f8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80147fc:	4c70      	ldr	r4, [pc, #448]	@ (80149c0 <log+0x1d8>)
 80147fe:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8014802:	418c      	sbcs	r4, r1
 8014804:	ed2d 8b02 	vpush	{d8}
 8014808:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801480c:	d35a      	bcc.n	80148c4 <log+0xdc>
 801480e:	4a6d      	ldr	r2, [pc, #436]	@ (80149c4 <log+0x1dc>)
 8014810:	4290      	cmp	r0, r2
 8014812:	bf08      	it	eq
 8014814:	2b00      	cmpeq	r3, #0
 8014816:	f000 80c4 	beq.w	80149a2 <log+0x1ba>
 801481a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801481e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014822:	4b69      	ldr	r3, [pc, #420]	@ (80149c8 <log+0x1e0>)
 8014824:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014828:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801482c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014830:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8014834:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014838:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801483c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8014840:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014844:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8014848:	eea5 6b00 	vfma.f64	d6, d5, d0
 801484c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8014850:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8014854:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014858:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801485c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014860:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8014864:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014868:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801486c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014870:	eea5 6b04 	vfma.f64	d6, d5, d4
 8014874:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014878:	eea6 7b04 	vfma.f64	d7, d6, d4
 801487c:	eeb0 2b47 	vmov.f64	d2, d7
 8014880:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80149a8 <log+0x1c0>
 8014884:	eeb0 6b40 	vmov.f64	d6, d0
 8014888:	eeb0 3b40 	vmov.f64	d3, d0
 801488c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014890:	eea0 6b47 	vfms.f64	d6, d0, d7
 8014894:	ee30 8b46 	vsub.f64	d8, d0, d6
 8014898:	ee26 1b06 	vmul.f64	d1, d6, d6
 801489c:	eea1 3b05 	vfma.f64	d3, d1, d5
 80148a0:	ee30 7b43 	vsub.f64	d7, d0, d3
 80148a4:	ee30 0b06 	vadd.f64	d0, d0, d6
 80148a8:	eea1 7b05 	vfma.f64	d7, d1, d5
 80148ac:	ee25 5b08 	vmul.f64	d5, d5, d8
 80148b0:	eea5 7b00 	vfma.f64	d7, d5, d0
 80148b4:	eea2 7b04 	vfma.f64	d7, d2, d4
 80148b8:	ee33 0b07 	vadd.f64	d0, d3, d7
 80148bc:	ecbd 8b02 	vpop	{d8}
 80148c0:	bcf0      	pop	{r4, r5, r6, r7}
 80148c2:	4770      	bx	lr
 80148c4:	f1a2 0410 	sub.w	r4, r2, #16
 80148c8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80148cc:	428c      	cmp	r4, r1
 80148ce:	d923      	bls.n	8014918 <log+0x130>
 80148d0:	18d9      	adds	r1, r3, r3
 80148d2:	eb40 0400 	adc.w	r4, r0, r0
 80148d6:	4321      	orrs	r1, r4
 80148d8:	d105      	bne.n	80148e6 <log+0xfe>
 80148da:	ecbd 8b02 	vpop	{d8}
 80148de:	2001      	movs	r0, #1
 80148e0:	bcf0      	pop	{r4, r5, r6, r7}
 80148e2:	f000 b885 	b.w	80149f0 <__math_divzero>
 80148e6:	4939      	ldr	r1, [pc, #228]	@ (80149cc <log+0x1e4>)
 80148e8:	4288      	cmp	r0, r1
 80148ea:	bf08      	it	eq
 80148ec:	2b00      	cmpeq	r3, #0
 80148ee:	d0e5      	beq.n	80148bc <log+0xd4>
 80148f0:	0413      	lsls	r3, r2, #16
 80148f2:	d403      	bmi.n	80148fc <log+0x114>
 80148f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80148f8:	4393      	bics	r3, r2
 80148fa:	d104      	bne.n	8014906 <log+0x11e>
 80148fc:	ecbd 8b02 	vpop	{d8}
 8014900:	bcf0      	pop	{r4, r5, r6, r7}
 8014902:	f000 b88d 	b.w	8014a20 <__math_invalid>
 8014906:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80149b0 <log+0x1c8>
 801490a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801490e:	ec53 2b17 	vmov	r2, r3, d7
 8014912:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8014916:	4613      	mov	r3, r2
 8014918:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 801491c:	492a      	ldr	r1, [pc, #168]	@ (80149c8 <log+0x1e0>)
 801491e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8014922:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8014926:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801492a:	0d15      	lsrs	r5, r2, #20
 801492c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8014930:	052d      	lsls	r5, r5, #20
 8014932:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8014936:	1e1e      	subs	r6, r3, #0
 8014938:	1b47      	subs	r7, r0, r5
 801493a:	ec47 6b16 	vmov	d6, r6, r7
 801493e:	1512      	asrs	r2, r2, #20
 8014940:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014944:	ee07 2a90 	vmov	s15, r2
 8014948:	ee25 2b05 	vmul.f64	d2, d5, d5
 801494c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014950:	ed91 4b00 	vldr	d4, [r1]
 8014954:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014958:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801495c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014960:	ee35 4b07 	vadd.f64	d4, d5, d7
 8014964:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014968:	ed91 7b02 	vldr	d7, [r1, #8]
 801496c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014970:	eea7 0b06 	vfma.f64	d0, d7, d6
 8014974:	ed91 7b04 	vldr	d7, [r1, #16]
 8014978:	ed91 6b08 	vldr	d6, [r1, #32]
 801497c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014980:	ed91 7b06 	vldr	d7, [r1, #24]
 8014984:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014988:	eea6 7b05 	vfma.f64	d7, d6, d5
 801498c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014990:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014994:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014998:	eea1 0b07 	vfma.f64	d0, d1, d7
 801499c:	ee30 0b04 	vadd.f64	d0, d0, d4
 80149a0:	e78c      	b.n	80148bc <log+0xd4>
 80149a2:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80149b8 <log+0x1d0>
 80149a6:	e789      	b.n	80148bc <log+0xd4>
 80149a8:	00000000 	.word	0x00000000
 80149ac:	41a00000 	.word	0x41a00000
 80149b0:	00000000 	.word	0x00000000
 80149b4:	43300000 	.word	0x43300000
	...
 80149c0:	000308ff 	.word	0x000308ff
 80149c4:	3ff00000 	.word	0x3ff00000
 80149c8:	08014f90 	.word	0x08014f90
 80149cc:	7ff00000 	.word	0x7ff00000

080149d0 <with_errno>:
 80149d0:	b510      	push	{r4, lr}
 80149d2:	ed2d 8b02 	vpush	{d8}
 80149d6:	eeb0 8b40 	vmov.f64	d8, d0
 80149da:	4604      	mov	r4, r0
 80149dc:	f7ff fecc 	bl	8014778 <__errno>
 80149e0:	eeb0 0b48 	vmov.f64	d0, d8
 80149e4:	ecbd 8b02 	vpop	{d8}
 80149e8:	6004      	str	r4, [r0, #0]
 80149ea:	bd10      	pop	{r4, pc}
 80149ec:	0000      	movs	r0, r0
	...

080149f0 <__math_divzero>:
 80149f0:	b082      	sub	sp, #8
 80149f2:	2800      	cmp	r0, #0
 80149f4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80149f8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80149fc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8014a00:	ed8d 7b00 	vstr	d7, [sp]
 8014a04:	ed9d 0b00 	vldr	d0, [sp]
 8014a08:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8014a18 <__math_divzero+0x28>
 8014a0c:	2022      	movs	r0, #34	@ 0x22
 8014a0e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8014a12:	b002      	add	sp, #8
 8014a14:	f7ff bfdc 	b.w	80149d0 <with_errno>
	...

08014a20 <__math_invalid>:
 8014a20:	eeb0 7b40 	vmov.f64	d7, d0
 8014a24:	eeb4 7b47 	vcmp.f64	d7, d7
 8014a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8014a30:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8014a34:	d602      	bvs.n	8014a3c <__math_invalid+0x1c>
 8014a36:	2021      	movs	r0, #33	@ 0x21
 8014a38:	f7ff bfca 	b.w	80149d0 <with_errno>
 8014a3c:	4770      	bx	lr
	...

08014a40 <_init>:
 8014a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a42:	bf00      	nop
 8014a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a46:	bc08      	pop	{r3}
 8014a48:	469e      	mov	lr, r3
 8014a4a:	4770      	bx	lr

08014a4c <_fini>:
 8014a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4e:	bf00      	nop
 8014a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a52:	bc08      	pop	{r3}
 8014a54:	469e      	mov	lr, r3
 8014a56:	4770      	bx	lr
